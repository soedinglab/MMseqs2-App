(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.NGL = {}));
}(this, (function (exports) { 'use strict';

  /**
   * @file shims
   * @private
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   */

  /// ///////////
  // Polyfills

  if (typeof window !== 'undefined') {
    (function () {
      // Console-polyfill. MIT license.
      // https://github.com/paulmillr/console-polyfill
      // Make it safe to do console.log() always.

      window.console = window.console || {};
      var properties = 'memory'.split(',');
      var methods = (
        'assert,clear,count,debug,dir,dirxml,error,exception,group,' +
        'groupCollapsed,groupEnd,info,log,markTimeline,profile,profiles,profileEnd,' +
        'show,table,time,timeEnd,timeline,timelineEnd,timeStamp,trace,warn'
      ).split(',');

      while ((properties.pop())) { }
      while ((methods.pop())) { }
    })();
  }

  if (typeof window !== 'undefined' && typeof window.HTMLCanvasElement !== 'undefined' && !window.HTMLCanvasElement.prototype.toBlob) {
    // http://code.google.com/p/chromium/issues/detail?id=67587#57
    Object.defineProperty(window.HTMLCanvasElement.prototype, 'toBlob', {

      value: function (callback, type, quality) {
        var bin = window.atob(this.toDataURL(type, quality).split(',')[ 1 ]);
        var len = bin.length;
        var len32 = len >> 2;
        var a8 = new Uint8Array(len);
        var a32 = new Uint32Array(a8.buffer, 0, len32);

        for (var i = 0, j = 0; i < len32; i++) {
          a32[i] = (
            bin.charCodeAt(j++) |
            bin.charCodeAt(j++) << 8 |
            bin.charCodeAt(j++) << 16 |
            bin.charCodeAt(j++) << 24
          );
        }

        var tailLength = len & 3;

        while (tailLength--) {
          a8[ j ] = bin.charCodeAt(j++);
        }

        callback(new window.Blob([ a8 ], { 'type': type || 'image/png' }));
      }

    });
  }

  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cbrt
  Math.cbrt = Math.cbrt || function (x) {
    var y = Math.pow(Math.abs(x), 1 / 3);
    return x < 0 ? -y : y
  };

  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign
  if (!Math.sign) {
    Math.sign = function (x) {
      // If x is NaN, the result is NaN.
      // If x is -0, the result is -0.
      // If x is +0, the result is +0.
      // If x is negative and not -0, the result is -1.
      // If x is positive and not +0, the result is +1.
      x = +x; // convert to a number
      if (x === 0 || isNaN(x)) {
        return Number(x)
      }
      return x > 0 ? 1 : -1
    };
  }

  if (!Number.isInteger) {
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger
    Number.isInteger = function isInteger (nVal) {
      return typeof nVal === 'number' && isFinite(nVal) && nVal > -9007199254740992 && nVal < 9007199254740992 && Math.floor(nVal) === nVal
    };
  }

  if (!Number.isNaN) {
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN
    Number.isNaN = function isNaN (value) {
      return value !== value // eslint-disable-line no-self-compare
    };
  }

  if (!Object.assign) {
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
    Object.defineProperty(Object, 'assign', {

      enumerable: false,
      configurable: true,
      writable: true,

      value: function (target/*, firstSource */) {
        var arguments$1 = arguments;

        if (target === undefined || target === null) { throw new TypeError('Cannot convert first argument to object') }

        var to = Object(target);

        var hasPendingException = false;
        var pendingException;

        for (var i = 1; i < arguments.length; i++) {
          var nextSource = arguments$1[i];
          if (nextSource === undefined || nextSource === null) { continue }

          var keysArray = Object.keys(Object(nextSource));
          for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {
            var nextKey = keysArray[nextIndex];
            try {
              var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
              if (desc !== undefined && desc.enumerable) { to[nextKey] = nextSource[nextKey]; }
            } catch (e) {
              if (!hasPendingException) {
                hasPendingException = true;
                pendingException = e;
              }
            }
          }

          if (hasPendingException) { throw pendingException }
        }

        return to
      }

    });
  }

  if (!String.prototype.startsWith) {
    /*! https://mths.be/startswith v0.2.0 by @mathias */

    (function () {
      var defineProperty = (function () {
        // IE 8 only supports `Object.defineProperty` on DOM elements
        var result;
        try {
          var object = {};
          var $defineProperty = Object.defineProperty;
          result = $defineProperty(object, object, object) && $defineProperty;
        } catch (error) {} // eslint-disable-line no-empty
        return result
      }());
      var toString = {}.toString;
      var startsWith = function (search) {
        if (this === null) {
          throw TypeError()
        }
        var string = String(this);
        if (search && toString.call(search) === '[object RegExp]') {
          throw TypeError()
        }
        var stringLength = string.length;
        var searchString = String(search);
        var searchLength = searchString.length;
        var position = arguments.length > 1 ? arguments[1] : undefined;
        // `ToInteger`
        var pos = position ? Number(position) : 0;
        if (Number.isNaN(pos)) {
          pos = 0;
        }
        var start = Math.min(Math.max(pos, 0), stringLength);
        // Avoid the `indexOf` call if no match is possible
        if (searchLength + start > stringLength) {
          return false
        }
        var index = -1;
        while (++index < searchLength) {
          if (string.charCodeAt(start + index) !== searchString.charCodeAt(index)) {
            return false
          }
        }
        return true
      };
      if (defineProperty) {
        defineProperty(String.prototype, 'startsWith', {
          'value': startsWith,
          'configurable': true,
          'writable': true
        });
      } else {
        // eslint-disable-next-line no-extend-native
        String.prototype.startsWith = startsWith;
      }
    }());
  }

  if (!String.prototype.endsWith) {
    // eslint-disable-next-line no-extend-native
    String.prototype.endsWith = function (searchString, position) {
      var subjectString = this.toString();
      if (typeof position !== 'number' || !isFinite(position) || Math.floor(position) !== position || position > subjectString.length) {
        position = subjectString.length;
      }
      position -= searchString.length;
      var lastIndex = subjectString.indexOf(searchString, position);
      return lastIndex !== -1 && lastIndex === position
    };
  }

  if (!String.prototype.repeat) {
    // eslint-disable-next-line no-extend-native
    String.prototype.repeat = function (count) {
      if (this === null) {
        throw new TypeError('can\'t convert ' + this + ' to object')
      }
      var str = '' + this;
      count = +count;
      if (Number.isNaN(count)) {
        count = 0;
      }
      if (count < 0) {
        throw new RangeError('repeat count must be non-negative')
      }
      if (count === Infinity) {
        throw new RangeError('repeat count must be less than infinity')
      }
      count = Math.floor(count);
      if (str.length === 0 || count === 0) {
        return ''
      }
      // Ensuring count is a 31-bit integer allows us to heavily optimize the
      // main part. But anyway, most current (August 2014) browsers can't handle
      // strings 1 << 28 chars or longer, so:
      if (str.length * count >= 1 << 28) {
        throw new RangeError('repeat count must not overflow maximum string size')
      }
      var rpt = '';
      for (;;) {
        if ((count & 1) === 1) {
          rpt += str;
        }
        count >>>= 1;
        if (count === 0) {
          break
        }
        str += str;
      }
      // Could we try:
      // return Array(count + 1).join(this);
      return rpt
    };
  }

  if (!String.prototype.includes) {
    // eslint-disable-next-line no-extend-native
    String.prototype.includes = function (search, start) {
      if (typeof start !== 'number') {
        start = 0;
      }

      if (start + search.length > this.length) {
        return false
      } else {
        return this.indexOf(search, start) !== -1
      }
    };
  }

  if (!Array.prototype.includes) {
    // eslint-disable-next-line no-extend-native
    Array.prototype.includes = function (searchElement /*, fromIndex */) {
      if (this == null) {
        throw new TypeError('Array.prototype.includes called on null or undefined')
      }

      var O = Object(this);
      var len = parseInt(O.length, 10) || 0;
      if (len === 0) {
        return false
      }
      var n = parseInt(arguments[1], 10) || 0;
      var k;
      if (n >= 0) {
        k = n;
      } else {
        k = len + n;
        if (k < 0) { k = 0; }
      }
      var currentElement;
      while (k < len) {
        currentElement = O[k];
        if (searchElement === currentElement ||
            (Number.isNaN(searchElement) && Number.isNaN(currentElement))
        ) {
          return true
        }
        k++;
      }
      return false
    };
  }

  // Production steps of ECMA-262, Edition 6, 22.1.2.1
  // Reference: https://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.from
  if (!Array.from) {
    Array.from = (function () {
      var toStr = Object.prototype.toString;
      var isCallable = function (fn) {
        return typeof fn === 'function' || toStr.call(fn) === '[object Function]'
      };
      var toInteger = function (value) {
        var number = Number(value);
        if (isNaN(number)) { return 0 }
        if (number === 0 || !isFinite(number)) { return number }
        return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number))
      };
      var maxSafeInteger = Math.pow(2, 53) - 1;
      var toLength = function (value) {
        var len = toInteger(value);
        return Math.min(Math.max(len, 0), maxSafeInteger)
      };

      // The length property of the from method is 1.
      return function from (arrayLike/*, mapFn, thisArg */) {
        // 1. Let C be the this value.
        var C = this;

        // 2. Let items be ToObject(arrayLike).
        var items = Object(arrayLike);

        // 3. ReturnIfAbrupt(items).
        if (arrayLike == null) {
          throw new TypeError('Array.from requires an array-like object - not null or undefined')
        }

        // 4. If mapfn is undefined, then let mapping be false.
        var mapFn = arguments.length > 1 ? arguments[1] : void undefined;
        var T;
        if (typeof mapFn !== 'undefined') {
          // 5. else
          // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.
          if (!isCallable(mapFn)) {
            throw new TypeError('Array.from: when provided, the second argument must be a function')
          }

          // 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.
          if (arguments.length > 2) {
            T = arguments[2];
          }
        }

        // 10. Let lenValue be Get(items, "length").
        // 11. Let len be ToLength(lenValue).
        var len = toLength(items.length);

        // 13. If IsConstructor(C) is true, then
        // 13. a. Let A be the result of calling the [[Construct]] internal method of C with an argument list containing the single item len.
        // 14. a. Else, Let A be ArrayCreate(len).
        var A = isCallable(C) ? Object(new C(len)) : new Array(len);

        // 16. Let k be 0.
        var k = 0;
        // 17. Repeat, while k < len… (also steps a - h)
        var kValue;
        while (k < len) {
          kValue = items[k];
          if (mapFn) {
            A[k] = typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k);
          } else {
            A[k] = kValue;
          }
          k += 1;
        }
        // 18. Let putStatus be Put(A, "length", len, true).
        A.length = len;
        // 20. Return A.
        return A
      }
    }());
  }

  if (typeof window !== 'undefined') {
    (function () {
      // http://paulirish.com/2011/requestanimationframe-for-smart-animating/
      // http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating

      // requestAnimationFrame polyfill by Erik Möller. fixes from Paul Irish and Tino Zijdel

      // MIT license

      var lastTime = 0;
      var vendors = [ 'ms', 'moz', 'webkit', 'o' ];

      for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
        window.requestAnimationFrame = (
          window[ vendors[ x ] + 'RequestAnimationFrame' ]
        );

        window.cancelAnimationFrame = (
          window[ vendors[ x ] + 'CancelAnimationFrame' ] ||
          window[ vendors[ x ] + 'CancelRequestAnimationFrame' ]
        );
      }

      if (!window.requestAnimationFrame) {
        window.requestAnimationFrame = function (callback/*, element */) {
          var currTime = new Date().getTime();
          var timeToCall = Math.max(0, 16 - (currTime - lastTime));

          var id = window.setTimeout(function () {
            var time = currTime + timeToCall;
            callback(time);
          }, timeToCall);

          lastTime = currTime + timeToCall;

          return id
        };
      }

      if (!window.cancelAnimationFrame) {
        window.cancelAnimationFrame = function (id) {
          clearTimeout(id);
        };
      }
    }());
  }

  if (Function.prototype.name === undefined && Object.defineProperty !== undefined) {
    // Missing in IE9-11.
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name

    // eslint-disable-next-line no-extend-native
    Object.defineProperty(Function.prototype, 'name', {

      get: function () {
        return this.toString().match(/^\s*function\s*(\S*)\s*\(/)[ 1 ]
      }

    });
  }

  if (typeof window !== 'undefined') {
    if (window.performance === undefined) {
      /* global self */
      self.performance = {};
    }

    if (window.performance.now === undefined) {
      (function () {
        var start = Date.now();

        window.performance.now = function () {
          return Date.now() - start
        };
      })();
    }
  }

  if (Object.defineProperty !== undefined) {
    // Missing in IE < 13
    // MIT license
    // Copyright (c) 2016 Financial Times
    // https://github.com/Financial-Times/polyfill-service
    if (Number.MAX_SAFE_INTEGER === undefined) {
      Object.defineProperty(Number, 'MAX_SAFE_INTEGER', {
        enumerable: false,
        configurable: false,
        writable: false,
        value: Math.pow(2, 53) - 1
      });
    }
    if (Number.MIN_SAFE_INTEGER === undefined) {
      Object.defineProperty(Number, 'MIN_SAFE_INTEGER', {
        enumerable: false,
        configurable: false,
        writable: false,
        value: -(Math.pow(2, 53) - 1)
      });
    }
  }

  /**
   * @this {Promise}
   */
  function finallyConstructor(callback) {
    var constructor = this.constructor;
    return this.then(
      function(value) {
        // @ts-ignore
        return constructor.resolve(callback()).then(function() {
          return value;
        });
      },
      function(reason) {
        // @ts-ignore
        return constructor.resolve(callback()).then(function() {
          // @ts-ignore
          return constructor.reject(reason);
        });
      }
    );
  }

  function allSettled(arr) {
    var P = this;
    return new P(function(resolve, reject) {
      if (!(arr && typeof arr.length !== 'undefined')) {
        return reject(
          new TypeError(
            typeof arr +
              ' ' +
              arr +
              ' is not iterable(cannot read property Symbol(Symbol.iterator))'
          )
        );
      }
      var args = Array.prototype.slice.call(arr);
      if (args.length === 0) { return resolve([]); }
      var remaining = args.length;

      function res(i, val) {
        if (val && (typeof val === 'object' || typeof val === 'function')) {
          var then = val.then;
          if (typeof then === 'function') {
            then.call(
              val,
              function(val) {
                res(i, val);
              },
              function(e) {
                args[i] = { status: 'rejected', reason: e };
                if (--remaining === 0) {
                  resolve(args);
                }
              }
            );
            return;
          }
        }
        args[i] = { status: 'fulfilled', value: val };
        if (--remaining === 0) {
          resolve(args);
        }
      }

      for (var i = 0; i < args.length; i++) {
        res(i, args[i]);
      }
    });
  }

  // Store setTimeout reference so promise-polyfill will be unaffected by
  // other code modifying setTimeout (like sinon.useFakeTimers())
  var setTimeoutFunc = setTimeout;

  function isArray(x) {
    return Boolean(x && typeof x.length !== 'undefined');
  }

  function noop() {}

  // Polyfill for Function.prototype.bind
  function bind(fn, thisArg) {
    return function() {
      fn.apply(thisArg, arguments);
    };
  }

  /**
   * @constructor
   * @param {Function} fn
   */
  function Promise$1(fn) {
    if (!(this instanceof Promise$1))
      { throw new TypeError('Promises must be constructed via new'); }
    if (typeof fn !== 'function') { throw new TypeError('not a function'); }
    /** @type {!number} */
    this._state = 0;
    /** @type {!boolean} */
    this._handled = false;
    /** @type {Promise|undefined} */
    this._value = undefined;
    /** @type {!Array<!Function>} */
    this._deferreds = [];

    doResolve(fn, this);
  }

  function handle(self, deferred) {
    while (self._state === 3) {
      self = self._value;
    }
    if (self._state === 0) {
      self._deferreds.push(deferred);
      return;
    }
    self._handled = true;
    Promise$1._immediateFn(function() {
      var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;
      if (cb === null) {
        (self._state === 1 ? resolve : reject)(deferred.promise, self._value);
        return;
      }
      var ret;
      try {
        ret = cb(self._value);
      } catch (e) {
        reject(deferred.promise, e);
        return;
      }
      resolve(deferred.promise, ret);
    });
  }

  function resolve(self, newValue) {
    try {
      // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
      if (newValue === self)
        { throw new TypeError('A promise cannot be resolved with itself.'); }
      if (
        newValue &&
        (typeof newValue === 'object' || typeof newValue === 'function')
      ) {
        var then = newValue.then;
        if (newValue instanceof Promise$1) {
          self._state = 3;
          self._value = newValue;
          finale(self);
          return;
        } else if (typeof then === 'function') {
          doResolve(bind(then, newValue), self);
          return;
        }
      }
      self._state = 1;
      self._value = newValue;
      finale(self);
    } catch (e) {
      reject(self, e);
    }
  }

  function reject(self, newValue) {
    self._state = 2;
    self._value = newValue;
    finale(self);
  }

  function finale(self) {
    if (self._state === 2 && self._deferreds.length === 0) {
      Promise$1._immediateFn(function() {
        if (!self._handled) {
          Promise$1._unhandledRejectionFn(self._value);
        }
      });
    }

    for (var i = 0, len = self._deferreds.length; i < len; i++) {
      handle(self, self._deferreds[i]);
    }
    self._deferreds = null;
  }

  /**
   * @constructor
   */
  function Handler(onFulfilled, onRejected, promise) {
    this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
    this.onRejected = typeof onRejected === 'function' ? onRejected : null;
    this.promise = promise;
  }

  /**
   * Take a potentially misbehaving resolver function and make sure
   * onFulfilled and onRejected are only called once.
   *
   * Makes no guarantees about asynchrony.
   */
  function doResolve(fn, self) {
    var done = false;
    try {
      fn(
        function(value) {
          if (done) { return; }
          done = true;
          resolve(self, value);
        },
        function(reason) {
          if (done) { return; }
          done = true;
          reject(self, reason);
        }
      );
    } catch (ex) {
      if (done) { return; }
      done = true;
      reject(self, ex);
    }
  }

  Promise$1.prototype['catch'] = function(onRejected) {
    return this.then(null, onRejected);
  };

  Promise$1.prototype.then = function(onFulfilled, onRejected) {
    // @ts-ignore
    var prom = new this.constructor(noop);

    handle(this, new Handler(onFulfilled, onRejected, prom));
    return prom;
  };

  Promise$1.prototype['finally'] = finallyConstructor;

  Promise$1.all = function(arr) {
    return new Promise$1(function(resolve, reject) {
      if (!isArray(arr)) {
        return reject(new TypeError('Promise.all accepts an array'));
      }

      var args = Array.prototype.slice.call(arr);
      if (args.length === 0) { return resolve([]); }
      var remaining = args.length;

      function res(i, val) {
        try {
          if (val && (typeof val === 'object' || typeof val === 'function')) {
            var then = val.then;
            if (typeof then === 'function') {
              then.call(
                val,
                function(val) {
                  res(i, val);
                },
                reject
              );
              return;
            }
          }
          args[i] = val;
          if (--remaining === 0) {
            resolve(args);
          }
        } catch (ex) {
          reject(ex);
        }
      }

      for (var i = 0; i < args.length; i++) {
        res(i, args[i]);
      }
    });
  };

  Promise$1.allSettled = allSettled;

  Promise$1.resolve = function(value) {
    if (value && typeof value === 'object' && value.constructor === Promise$1) {
      return value;
    }

    return new Promise$1(function(resolve) {
      resolve(value);
    });
  };

  Promise$1.reject = function(value) {
    return new Promise$1(function(resolve, reject) {
      reject(value);
    });
  };

  Promise$1.race = function(arr) {
    return new Promise$1(function(resolve, reject) {
      if (!isArray(arr)) {
        return reject(new TypeError('Promise.race accepts an array'));
      }

      for (var i = 0, len = arr.length; i < len; i++) {
        Promise$1.resolve(arr[i]).then(resolve, reject);
      }
    });
  };

  // Use polyfill for setImmediate for performance gains
  Promise$1._immediateFn =
    // @ts-ignore
    (typeof setImmediate === 'function' &&
      function(fn) {
        // @ts-ignore
        setImmediate(fn);
      }) ||
    function(fn) {
      setTimeoutFunc(fn, 0);
    };

  Promise$1._unhandledRejectionFn = function _unhandledRejectionFn(err) {
    if (typeof console !== 'undefined' && console) {
      console.warn('Possible Unhandled Promise Rejection:', err); // eslint-disable-line no-console
    }
  };

  // Polyfills

  if ( Number.EPSILON === undefined ) {

  	Number.EPSILON = Math.pow( 2, - 52 );

  }

  if ( Number.isInteger === undefined ) {

  	// Missing in IE
  	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger

  	Number.isInteger = function ( value ) {

  		return typeof value === 'number' && isFinite( value ) && Math.floor( value ) === value;

  	};

  }

  //

  if ( Math.sign === undefined ) {

  	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign

  	Math.sign = function ( x ) {

  		return ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;

  	};

  }

  if ( 'name' in Function.prototype === false ) {

  	// Missing in IE
  	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name

  	Object.defineProperty( Function.prototype, 'name', {

  		get: function () {

  			return this.toString().match( /^\s*function\s*([^\(\s]*)/ )[ 1 ];

  		}

  	} );

  }

  if ( Object.assign === undefined ) {

  	// Missing in IE
  	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign

  	Object.assign = function ( target ) {
  		var arguments$1 = arguments;


  		if ( target === undefined || target === null ) {

  			throw new TypeError( 'Cannot convert undefined or null to object' );

  		}

  		var output = Object( target );

  		for ( var index = 1; index < arguments.length; index ++ ) {

  			var source = arguments$1[ index ];

  			if ( source !== undefined && source !== null ) {

  				for ( var nextKey in source ) {

  					if ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {

  						output[ nextKey ] = source[ nextKey ];

  					}

  				}

  			}

  		}

  		return output;

  	};

  }

  var REVISION = '118';
  var CullFaceNone = 0;
  var CullFaceBack = 1;
  var CullFaceFront = 2;
  var PCFShadowMap = 1;
  var PCFSoftShadowMap = 2;
  var VSMShadowMap = 3;
  var FrontSide = 0;
  var BackSide = 1;
  var DoubleSide = 2;
  var FlatShading = 1;
  var NoBlending = 0;
  var NormalBlending = 1;
  var AdditiveBlending = 2;
  var SubtractiveBlending = 3;
  var MultiplyBlending = 4;
  var CustomBlending = 5;
  var AddEquation = 100;
  var SubtractEquation = 101;
  var ReverseSubtractEquation = 102;
  var MinEquation = 103;
  var MaxEquation = 104;
  var ZeroFactor = 200;
  var OneFactor = 201;
  var SrcColorFactor = 202;
  var OneMinusSrcColorFactor = 203;
  var SrcAlphaFactor = 204;
  var OneMinusSrcAlphaFactor = 205;
  var DstAlphaFactor = 206;
  var OneMinusDstAlphaFactor = 207;
  var DstColorFactor = 208;
  var OneMinusDstColorFactor = 209;
  var SrcAlphaSaturateFactor = 210;
  var NeverDepth = 0;
  var AlwaysDepth = 1;
  var LessDepth = 2;
  var LessEqualDepth = 3;
  var EqualDepth = 4;
  var GreaterEqualDepth = 5;
  var GreaterDepth = 6;
  var NotEqualDepth = 7;
  var MultiplyOperation = 0;
  var MixOperation = 1;
  var AddOperation = 2;
  var NoToneMapping = 0;
  var LinearToneMapping = 1;
  var ReinhardToneMapping = 2;
  var CineonToneMapping = 3;
  var ACESFilmicToneMapping = 4;
  var CustomToneMapping = 5;

  var UVMapping = 300;
  var CubeReflectionMapping = 301;
  var CubeRefractionMapping = 302;
  var EquirectangularReflectionMapping = 303;
  var EquirectangularRefractionMapping = 304;
  var CubeUVReflectionMapping = 306;
  var CubeUVRefractionMapping = 307;
  var RepeatWrapping = 1000;
  var ClampToEdgeWrapping = 1001;
  var MirroredRepeatWrapping = 1002;
  var NearestFilter = 1003;
  var NearestMipmapNearestFilter = 1004;
  var NearestMipmapLinearFilter = 1005;
  var LinearFilter = 1006;
  var LinearMipmapNearestFilter = 1007;
  var LinearMipmapLinearFilter = 1008;
  var UnsignedByteType = 1009;
  var ByteType = 1010;
  var ShortType = 1011;
  var UnsignedShortType = 1012;
  var IntType = 1013;
  var UnsignedIntType = 1014;
  var FloatType = 1015;
  var HalfFloatType = 1016;
  var UnsignedShort4444Type = 1017;
  var UnsignedShort5551Type = 1018;
  var UnsignedShort565Type = 1019;
  var UnsignedInt248Type = 1020;
  var AlphaFormat = 1021;
  var RGBFormat = 1022;
  var RGBAFormat = 1023;
  var LuminanceFormat = 1024;
  var LuminanceAlphaFormat = 1025;
  var DepthFormat = 1026;
  var DepthStencilFormat = 1027;
  var RedFormat = 1028;
  var RedIntegerFormat = 1029;
  var RGFormat = 1030;
  var RGIntegerFormat = 1031;
  var RGBIntegerFormat = 1032;
  var RGBAIntegerFormat = 1033;

  var RGB_S3TC_DXT1_Format = 33776;
  var RGBA_S3TC_DXT1_Format = 33777;
  var RGBA_S3TC_DXT3_Format = 33778;
  var RGBA_S3TC_DXT5_Format = 33779;
  var RGB_PVRTC_4BPPV1_Format = 35840;
  var RGB_PVRTC_2BPPV1_Format = 35841;
  var RGBA_PVRTC_4BPPV1_Format = 35842;
  var RGBA_PVRTC_2BPPV1_Format = 35843;
  var RGB_ETC1_Format = 36196;
  var RGB_ETC2_Format = 37492;
  var RGBA_ETC2_EAC_Format = 37496;
  var RGBA_ASTC_4x4_Format = 37808;
  var RGBA_ASTC_5x4_Format = 37809;
  var RGBA_ASTC_5x5_Format = 37810;
  var RGBA_ASTC_6x5_Format = 37811;
  var RGBA_ASTC_6x6_Format = 37812;
  var RGBA_ASTC_8x5_Format = 37813;
  var RGBA_ASTC_8x6_Format = 37814;
  var RGBA_ASTC_8x8_Format = 37815;
  var RGBA_ASTC_10x5_Format = 37816;
  var RGBA_ASTC_10x6_Format = 37817;
  var RGBA_ASTC_10x8_Format = 37818;
  var RGBA_ASTC_10x10_Format = 37819;
  var RGBA_ASTC_12x10_Format = 37820;
  var RGBA_ASTC_12x12_Format = 37821;
  var RGBA_BPTC_Format = 36492;
  var SRGB8_ALPHA8_ASTC_4x4_Format = 37840;
  var SRGB8_ALPHA8_ASTC_5x4_Format = 37841;
  var SRGB8_ALPHA8_ASTC_5x5_Format = 37842;
  var SRGB8_ALPHA8_ASTC_6x5_Format = 37843;
  var SRGB8_ALPHA8_ASTC_6x6_Format = 37844;
  var SRGB8_ALPHA8_ASTC_8x5_Format = 37845;
  var SRGB8_ALPHA8_ASTC_8x6_Format = 37846;
  var SRGB8_ALPHA8_ASTC_8x8_Format = 37847;
  var SRGB8_ALPHA8_ASTC_10x5_Format = 37848;
  var SRGB8_ALPHA8_ASTC_10x6_Format = 37849;
  var SRGB8_ALPHA8_ASTC_10x8_Format = 37850;
  var SRGB8_ALPHA8_ASTC_10x10_Format = 37851;
  var SRGB8_ALPHA8_ASTC_12x10_Format = 37852;
  var SRGB8_ALPHA8_ASTC_12x12_Format = 37853;
  var LoopOnce = 2200;
  var LoopRepeat = 2201;
  var LoopPingPong = 2202;
  var InterpolateDiscrete = 2300;
  var InterpolateLinear = 2301;
  var InterpolateSmooth = 2302;
  var ZeroCurvatureEnding = 2400;
  var ZeroSlopeEnding = 2401;
  var WrapAroundEnding = 2402;
  var NormalAnimationBlendMode = 2500;
  var AdditiveAnimationBlendMode = 2501;
  var TrianglesDrawMode = 0;
  var LinearEncoding = 3000;
  var sRGBEncoding = 3001;
  var GammaEncoding = 3007;
  var RGBEEncoding = 3002;
  var LogLuvEncoding = 3003;
  var RGBM7Encoding = 3004;
  var RGBM16Encoding = 3005;
  var RGBDEncoding = 3006;
  var BasicDepthPacking = 3200;
  var RGBADepthPacking = 3201;
  var TangentSpaceNormalMap = 0;
  var ObjectSpaceNormalMap = 1;
  var KeepStencilOp = 7680;
  var AlwaysStencilFunc = 519;

  var StaticDrawUsage = 35044;
  var DynamicDrawUsage = 35048;

  /**
   * https://github.com/mrdoob/eventdispatcher.js/
   */

  function EventDispatcher() {}

  Object.assign( EventDispatcher.prototype, {

  	addEventListener: function ( type, listener ) {

  		if ( this._listeners === undefined ) { this._listeners = {}; }

  		var listeners = this._listeners;

  		if ( listeners[ type ] === undefined ) {

  			listeners[ type ] = [];

  		}

  		if ( listeners[ type ].indexOf( listener ) === - 1 ) {

  			listeners[ type ].push( listener );

  		}

  	},

  	hasEventListener: function ( type, listener ) {

  		if ( this._listeners === undefined ) { return false; }

  		var listeners = this._listeners;

  		return listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;

  	},

  	removeEventListener: function ( type, listener ) {

  		if ( this._listeners === undefined ) { return; }

  		var listeners = this._listeners;
  		var listenerArray = listeners[ type ];

  		if ( listenerArray !== undefined ) {

  			var index = listenerArray.indexOf( listener );

  			if ( index !== - 1 ) {

  				listenerArray.splice( index, 1 );

  			}

  		}

  	},

  	dispatchEvent: function ( event ) {

  		if ( this._listeners === undefined ) { return; }

  		var listeners = this._listeners;
  		var listenerArray = listeners[ event.type ];

  		if ( listenerArray !== undefined ) {

  			event.target = this;

  			// Make a copy, in case listeners are removed while iterating.
  			var array = listenerArray.slice( 0 );

  			for ( var i = 0, l = array.length; i < l; i ++ ) {

  				array[ i ].call( this, event );

  			}

  		}

  	}

  } );

  /**
   * @author alteredq / http://alteredqualia.com/
   * @author mrdoob / http://mrdoob.com/
   * @author WestLangley / http://github.com/WestLangley
   * @author thezwap
   */

  var _lut = [];

  for ( var i = 0; i < 256; i ++ ) {

  	_lut[ i ] = ( i < 16 ? '0' : '' ) + ( i ).toString( 16 );

  }

  var MathUtils = {

  	DEG2RAD: Math.PI / 180,
  	RAD2DEG: 180 / Math.PI,

  	generateUUID: function () {

  		// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136

  		var d0 = Math.random() * 0xffffffff | 0;
  		var d1 = Math.random() * 0xffffffff | 0;
  		var d2 = Math.random() * 0xffffffff | 0;
  		var d3 = Math.random() * 0xffffffff | 0;
  		var uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +
  			_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +
  			_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +
  			_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];

  		// .toUpperCase() here flattens concatenated strings to save heap memory space.
  		return uuid.toUpperCase();

  	},

  	clamp: function ( value, min, max ) {

  		return Math.max( min, Math.min( max, value ) );

  	},

  	// compute euclidian modulo of m % n
  	// https://en.wikipedia.org/wiki/Modulo_operation

  	euclideanModulo: function ( n, m ) {

  		return ( ( n % m ) + m ) % m;

  	},

  	// Linear mapping from range <a1, a2> to range <b1, b2>

  	mapLinear: function ( x, a1, a2, b1, b2 ) {

  		return b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );

  	},

  	// https://en.wikipedia.org/wiki/Linear_interpolation

  	lerp: function ( x, y, t ) {

  		return ( 1 - t ) * x + t * y;

  	},

  	// http://en.wikipedia.org/wiki/Smoothstep

  	smoothstep: function ( x, min, max ) {

  		if ( x <= min ) { return 0; }
  		if ( x >= max ) { return 1; }

  		x = ( x - min ) / ( max - min );

  		return x * x * ( 3 - 2 * x );

  	},

  	smootherstep: function ( x, min, max ) {

  		if ( x <= min ) { return 0; }
  		if ( x >= max ) { return 1; }

  		x = ( x - min ) / ( max - min );

  		return x * x * x * ( x * ( x * 6 - 15 ) + 10 );

  	},

  	// Random integer from <low, high> interval

  	randInt: function ( low, high ) {

  		return low + Math.floor( Math.random() * ( high - low + 1 ) );

  	},

  	// Random float from <low, high> interval

  	randFloat: function ( low, high ) {

  		return low + Math.random() * ( high - low );

  	},

  	// Random float from <-range/2, range/2> interval

  	randFloatSpread: function ( range ) {

  		return range * ( 0.5 - Math.random() );

  	},

  	degToRad: function ( degrees ) {

  		return degrees * MathUtils.DEG2RAD;

  	},

  	radToDeg: function ( radians ) {

  		return radians * MathUtils.RAD2DEG;

  	},

  	isPowerOfTwo: function ( value ) {

  		return ( value & ( value - 1 ) ) === 0 && value !== 0;

  	},

  	ceilPowerOfTwo: function ( value ) {

  		return Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );

  	},

  	floorPowerOfTwo: function ( value ) {

  		return Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );

  	},

  	setQuaternionFromProperEuler: function ( q, a, b, c, order ) {

  		// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles

  		// rotations are applied to the axes in the order specified by 'order'
  		// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'
  		// angles are in radians

  		var cos = Math.cos;
  		var sin = Math.sin;

  		var c2 = cos( b / 2 );
  		var s2 = sin( b / 2 );

  		var c13 = cos( ( a + c ) / 2 );
  		var s13 = sin( ( a + c ) / 2 );

  		var c1_3 = cos( ( a - c ) / 2 );
  		var s1_3 = sin( ( a - c ) / 2 );

  		var c3_1 = cos( ( c - a ) / 2 );
  		var s3_1 = sin( ( c - a ) / 2 );

  		switch ( order ) {

  			case 'XYX':
  				q.set( c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13 );
  				break;

  			case 'YZY':
  				q.set( s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13 );
  				break;

  			case 'ZXZ':
  				q.set( s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13 );
  				break;

  			case 'XZX':
  				q.set( c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13 );
  				break;

  			case 'YXY':
  				q.set( s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13 );
  				break;

  			case 'ZYZ':
  				q.set( s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13 );
  				break;

  			default:
  				console.warn( 'THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order );

  		}

  	}

  };

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author philogb / http://blog.thejit.org/
   * @author egraether / http://egraether.com/
   * @author zz85 / http://www.lab4games.net/zz85/blog
   */

  function Vector2( x, y ) {
  	if ( x === void 0 ) x = 0;
  	if ( y === void 0 ) y = 0;


  	this.x = x;
  	this.y = y;

  }

  Object.defineProperties( Vector2.prototype, {

  	"width": {

  		get: function () {

  			return this.x;

  		},

  		set: function ( value ) {

  			this.x = value;

  		}

  	},

  	"height": {

  		get: function () {

  			return this.y;

  		},

  		set: function ( value ) {

  			this.y = value;

  		}

  	}

  } );

  Object.assign( Vector2.prototype, {

  	isVector2: true,

  	set: function ( x, y ) {

  		this.x = x;
  		this.y = y;

  		return this;

  	},

  	setScalar: function ( scalar ) {

  		this.x = scalar;
  		this.y = scalar;

  		return this;

  	},

  	setX: function ( x ) {

  		this.x = x;

  		return this;

  	},

  	setY: function ( y ) {

  		this.y = y;

  		return this;

  	},

  	setComponent: function ( index, value ) {

  		switch ( index ) {

  			case 0: this.x = value; break;
  			case 1: this.y = value; break;
  			default: throw new Error( 'index is out of range: ' + index );

  		}

  		return this;

  	},

  	getComponent: function ( index ) {

  		switch ( index ) {

  			case 0: return this.x;
  			case 1: return this.y;
  			default: throw new Error( 'index is out of range: ' + index );

  		}

  	},

  	clone: function () {

  		return new this.constructor( this.x, this.y );

  	},

  	copy: function ( v ) {

  		this.x = v.x;
  		this.y = v.y;

  		return this;

  	},

  	add: function ( v, w ) {

  		if ( w !== undefined ) {

  			console.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
  			return this.addVectors( v, w );

  		}

  		this.x += v.x;
  		this.y += v.y;

  		return this;

  	},

  	addScalar: function ( s ) {

  		this.x += s;
  		this.y += s;

  		return this;

  	},

  	addVectors: function ( a, b ) {

  		this.x = a.x + b.x;
  		this.y = a.y + b.y;

  		return this;

  	},

  	addScaledVector: function ( v, s ) {

  		this.x += v.x * s;
  		this.y += v.y * s;

  		return this;

  	},

  	sub: function ( v, w ) {

  		if ( w !== undefined ) {

  			console.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
  			return this.subVectors( v, w );

  		}

  		this.x -= v.x;
  		this.y -= v.y;

  		return this;

  	},

  	subScalar: function ( s ) {

  		this.x -= s;
  		this.y -= s;

  		return this;

  	},

  	subVectors: function ( a, b ) {

  		this.x = a.x - b.x;
  		this.y = a.y - b.y;

  		return this;

  	},

  	multiply: function ( v ) {

  		this.x *= v.x;
  		this.y *= v.y;

  		return this;

  	},

  	multiplyScalar: function ( scalar ) {

  		this.x *= scalar;
  		this.y *= scalar;

  		return this;

  	},

  	divide: function ( v ) {

  		this.x /= v.x;
  		this.y /= v.y;

  		return this;

  	},

  	divideScalar: function ( scalar ) {

  		return this.multiplyScalar( 1 / scalar );

  	},

  	applyMatrix3: function ( m ) {

  		var x = this.x, y = this.y;
  		var e = m.elements;

  		this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];
  		this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];

  		return this;

  	},

  	min: function ( v ) {

  		this.x = Math.min( this.x, v.x );
  		this.y = Math.min( this.y, v.y );

  		return this;

  	},

  	max: function ( v ) {

  		this.x = Math.max( this.x, v.x );
  		this.y = Math.max( this.y, v.y );

  		return this;

  	},

  	clamp: function ( min, max ) {

  		// assumes min < max, componentwise

  		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
  		this.y = Math.max( min.y, Math.min( max.y, this.y ) );

  		return this;

  	},

  	clampScalar: function ( minVal, maxVal ) {

  		this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
  		this.y = Math.max( minVal, Math.min( maxVal, this.y ) );

  		return this;

  	},

  	clampLength: function ( min, max ) {

  		var length = this.length();

  		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

  	},

  	floor: function () {

  		this.x = Math.floor( this.x );
  		this.y = Math.floor( this.y );

  		return this;

  	},

  	ceil: function () {

  		this.x = Math.ceil( this.x );
  		this.y = Math.ceil( this.y );

  		return this;

  	},

  	round: function () {

  		this.x = Math.round( this.x );
  		this.y = Math.round( this.y );

  		return this;

  	},

  	roundToZero: function () {

  		this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
  		this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );

  		return this;

  	},

  	negate: function () {

  		this.x = - this.x;
  		this.y = - this.y;

  		return this;

  	},

  	dot: function ( v ) {

  		return this.x * v.x + this.y * v.y;

  	},

  	cross: function ( v ) {

  		return this.x * v.y - this.y * v.x;

  	},

  	lengthSq: function () {

  		return this.x * this.x + this.y * this.y;

  	},

  	length: function () {

  		return Math.sqrt( this.x * this.x + this.y * this.y );

  	},

  	manhattanLength: function () {

  		return Math.abs( this.x ) + Math.abs( this.y );

  	},

  	normalize: function () {

  		return this.divideScalar( this.length() || 1 );

  	},

  	angle: function () {

  		// computes the angle in radians with respect to the positive x-axis

  		var angle = Math.atan2( - this.y, - this.x ) + Math.PI;

  		return angle;

  	},

  	distanceTo: function ( v ) {

  		return Math.sqrt( this.distanceToSquared( v ) );

  	},

  	distanceToSquared: function ( v ) {

  		var dx = this.x - v.x, dy = this.y - v.y;
  		return dx * dx + dy * dy;

  	},

  	manhattanDistanceTo: function ( v ) {

  		return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );

  	},

  	setLength: function ( length ) {

  		return this.normalize().multiplyScalar( length );

  	},

  	lerp: function ( v, alpha ) {

  		this.x += ( v.x - this.x ) * alpha;
  		this.y += ( v.y - this.y ) * alpha;

  		return this;

  	},

  	lerpVectors: function ( v1, v2, alpha ) {

  		this.x = v1.x + ( v2.x - v1.x ) * alpha;
  		this.y = v1.y + ( v2.y - v1.y ) * alpha;

  		return this;

  	},

  	equals: function ( v ) {

  		return ( ( v.x === this.x ) && ( v.y === this.y ) );

  	},

  	fromArray: function ( array, offset ) {

  		if ( offset === undefined ) { offset = 0; }

  		this.x = array[ offset ];
  		this.y = array[ offset + 1 ];

  		return this;

  	},

  	toArray: function ( array, offset ) {

  		if ( array === undefined ) { array = []; }
  		if ( offset === undefined ) { offset = 0; }

  		array[ offset ] = this.x;
  		array[ offset + 1 ] = this.y;

  		return array;

  	},

  	fromBufferAttribute: function ( attribute, index, offset ) {

  		if ( offset !== undefined ) {

  			console.warn( 'THREE.Vector2: offset has been removed from .fromBufferAttribute().' );

  		}

  		this.x = attribute.getX( index );
  		this.y = attribute.getY( index );

  		return this;

  	},

  	rotateAround: function ( center, angle ) {

  		var c = Math.cos( angle ), s = Math.sin( angle );

  		var x = this.x - center.x;
  		var y = this.y - center.y;

  		this.x = x * c - y * s + center.x;
  		this.y = x * s + y * c + center.y;

  		return this;

  	},

  	random: function () {

  		this.x = Math.random();
  		this.y = Math.random();

  		return this;

  	}

  } );

  /**
   * @author alteredq / http://alteredqualia.com/
   * @author WestLangley / http://github.com/WestLangley
   * @author bhouston / http://clara.io
   * @author tschw
   */

  function Matrix3() {

  	this.elements = [

  		1, 0, 0,
  		0, 1, 0,
  		0, 0, 1

  	];

  	if ( arguments.length > 0 ) {

  		console.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );

  	}

  }

  Object.assign( Matrix3.prototype, {

  	isMatrix3: true,

  	set: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {

  		var te = this.elements;

  		te[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;
  		te[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;
  		te[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;

  		return this;

  	},

  	identity: function () {

  		this.set(

  			1, 0, 0,
  			0, 1, 0,
  			0, 0, 1

  		);

  		return this;

  	},

  	clone: function () {

  		return new this.constructor().fromArray( this.elements );

  	},

  	copy: function ( m ) {

  		var te = this.elements;
  		var me = m.elements;

  		te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];
  		te[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];
  		te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];

  		return this;

  	},

  	extractBasis: function ( xAxis, yAxis, zAxis ) {

  		xAxis.setFromMatrix3Column( this, 0 );
  		yAxis.setFromMatrix3Column( this, 1 );
  		zAxis.setFromMatrix3Column( this, 2 );

  		return this;

  	},

  	setFromMatrix4: function ( m ) {

  		var me = m.elements;

  		this.set(

  			me[ 0 ], me[ 4 ], me[ 8 ],
  			me[ 1 ], me[ 5 ], me[ 9 ],
  			me[ 2 ], me[ 6 ], me[ 10 ]

  		);

  		return this;

  	},

  	multiply: function ( m ) {

  		return this.multiplyMatrices( this, m );

  	},

  	premultiply: function ( m ) {

  		return this.multiplyMatrices( m, this );

  	},

  	multiplyMatrices: function ( a, b ) {

  		var ae = a.elements;
  		var be = b.elements;
  		var te = this.elements;

  		var a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];
  		var a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];
  		var a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];

  		var b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];
  		var b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];
  		var b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];

  		te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;
  		te[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;
  		te[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;

  		te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;
  		te[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;
  		te[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;

  		te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;
  		te[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;
  		te[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;

  		return this;

  	},

  	multiplyScalar: function ( s ) {

  		var te = this.elements;

  		te[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;
  		te[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;
  		te[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;

  		return this;

  	},

  	determinant: function () {

  		var te = this.elements;

  		var a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],
  			d = te[ 3 ], e = te[ 4 ], f = te[ 5 ],
  			g = te[ 6 ], h = te[ 7 ], i = te[ 8 ];

  		return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;

  	},

  	getInverse: function ( matrix, throwOnDegenerate ) {

  		if ( throwOnDegenerate !== undefined ) {

  			console.warn( "THREE.Matrix3: .getInverse() can no longer be configured to throw on degenerate." );

  		}

  		var me = matrix.elements,
  			te = this.elements,

  			n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],
  			n12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],
  			n13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],

  			t11 = n33 * n22 - n32 * n23,
  			t12 = n32 * n13 - n33 * n12,
  			t13 = n23 * n12 - n22 * n13,

  			det = n11 * t11 + n21 * t12 + n31 * t13;

  		if ( det === 0 ) { return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0 ); }

  		var detInv = 1 / det;

  		te[ 0 ] = t11 * detInv;
  		te[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;
  		te[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;

  		te[ 3 ] = t12 * detInv;
  		te[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;
  		te[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;

  		te[ 6 ] = t13 * detInv;
  		te[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;
  		te[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;

  		return this;

  	},

  	transpose: function () {

  		var tmp;
  		var m = this.elements;

  		tmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;
  		tmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;
  		tmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;

  		return this;

  	},

  	getNormalMatrix: function ( matrix4 ) {

  		return this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();

  	},

  	transposeIntoArray: function ( r ) {

  		var m = this.elements;

  		r[ 0 ] = m[ 0 ];
  		r[ 1 ] = m[ 3 ];
  		r[ 2 ] = m[ 6 ];
  		r[ 3 ] = m[ 1 ];
  		r[ 4 ] = m[ 4 ];
  		r[ 5 ] = m[ 7 ];
  		r[ 6 ] = m[ 2 ];
  		r[ 7 ] = m[ 5 ];
  		r[ 8 ] = m[ 8 ];

  		return this;

  	},

  	setUvTransform: function ( tx, ty, sx, sy, rotation, cx, cy ) {

  		var c = Math.cos( rotation );
  		var s = Math.sin( rotation );

  		this.set(
  			sx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,
  			- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,
  			0, 0, 1
  		);

  	},

  	scale: function ( sx, sy ) {

  		var te = this.elements;

  		te[ 0 ] *= sx; te[ 3 ] *= sx; te[ 6 ] *= sx;
  		te[ 1 ] *= sy; te[ 4 ] *= sy; te[ 7 ] *= sy;

  		return this;

  	},

  	rotate: function ( theta ) {

  		var c = Math.cos( theta );
  		var s = Math.sin( theta );

  		var te = this.elements;

  		var a11 = te[ 0 ], a12 = te[ 3 ], a13 = te[ 6 ];
  		var a21 = te[ 1 ], a22 = te[ 4 ], a23 = te[ 7 ];

  		te[ 0 ] = c * a11 + s * a21;
  		te[ 3 ] = c * a12 + s * a22;
  		te[ 6 ] = c * a13 + s * a23;

  		te[ 1 ] = - s * a11 + c * a21;
  		te[ 4 ] = - s * a12 + c * a22;
  		te[ 7 ] = - s * a13 + c * a23;

  		return this;

  	},

  	translate: function ( tx, ty ) {

  		var te = this.elements;

  		te[ 0 ] += tx * te[ 2 ]; te[ 3 ] += tx * te[ 5 ]; te[ 6 ] += tx * te[ 8 ];
  		te[ 1 ] += ty * te[ 2 ]; te[ 4 ] += ty * te[ 5 ]; te[ 7 ] += ty * te[ 8 ];

  		return this;

  	},

  	equals: function ( matrix ) {

  		var te = this.elements;
  		var me = matrix.elements;

  		for ( var i = 0; i < 9; i ++ ) {

  			if ( te[ i ] !== me[ i ] ) { return false; }

  		}

  		return true;

  	},

  	fromArray: function ( array, offset ) {

  		if ( offset === undefined ) { offset = 0; }

  		for ( var i = 0; i < 9; i ++ ) {

  			this.elements[ i ] = array[ i + offset ];

  		}

  		return this;

  	},

  	toArray: function ( array, offset ) {

  		if ( array === undefined ) { array = []; }
  		if ( offset === undefined ) { offset = 0; }

  		var te = this.elements;

  		array[ offset ] = te[ 0 ];
  		array[ offset + 1 ] = te[ 1 ];
  		array[ offset + 2 ] = te[ 2 ];

  		array[ offset + 3 ] = te[ 3 ];
  		array[ offset + 4 ] = te[ 4 ];
  		array[ offset + 5 ] = te[ 5 ];

  		array[ offset + 6 ] = te[ 6 ];
  		array[ offset + 7 ] = te[ 7 ];
  		array[ offset + 8 ] = te[ 8 ];

  		return array;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author alteredq / http://alteredqualia.com/
   * @author szimek / https://github.com/szimek/
   */

  var _canvas;

  var ImageUtils = {

  	getDataURL: function ( image ) {

  		if ( /^data:/i.test( image.src ) ) {

  			return image.src;

  		}

  		if ( typeof HTMLCanvasElement == 'undefined' ) {

  			return image.src;

  		}

  		var canvas;

  		if ( image instanceof HTMLCanvasElement ) {

  			canvas = image;

  		} else {

  			if ( _canvas === undefined ) { _canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ); }

  			_canvas.width = image.width;
  			_canvas.height = image.height;

  			var context = _canvas.getContext( '2d' );

  			if ( image instanceof ImageData ) {

  				context.putImageData( image, 0, 0 );

  			} else {

  				context.drawImage( image, 0, 0, image.width, image.height );

  			}

  			canvas = _canvas;

  		}

  		if ( canvas.width > 2048 || canvas.height > 2048 ) {

  			return canvas.toDataURL( 'image/jpeg', 0.6 );

  		} else {

  			return canvas.toDataURL( 'image/png' );

  		}

  	}

  };

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author alteredq / http://alteredqualia.com/
   * @author szimek / https://github.com/szimek/
   */

  var textureId = 0;

  function Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {

  	Object.defineProperty( this, 'id', { value: textureId ++ } );

  	this.uuid = MathUtils.generateUUID();

  	this.name = '';

  	this.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;
  	this.mipmaps = [];

  	this.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;

  	this.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;
  	this.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;

  	this.magFilter = magFilter !== undefined ? magFilter : LinearFilter;
  	this.minFilter = minFilter !== undefined ? minFilter : LinearMipmapLinearFilter;

  	this.anisotropy = anisotropy !== undefined ? anisotropy : 1;

  	this.format = format !== undefined ? format : RGBAFormat;
  	this.internalFormat = null;
  	this.type = type !== undefined ? type : UnsignedByteType;

  	this.offset = new Vector2( 0, 0 );
  	this.repeat = new Vector2( 1, 1 );
  	this.center = new Vector2( 0, 0 );
  	this.rotation = 0;

  	this.matrixAutoUpdate = true;
  	this.matrix = new Matrix3();

  	this.generateMipmaps = true;
  	this.premultiplyAlpha = false;
  	this.flipY = true;
  	this.unpackAlignment = 4;	// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)

  	// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.
  	//
  	// Also changing the encoding after already used by a Material will not automatically make the Material
  	// update. You need to explicitly call Material.needsUpdate to trigger it to recompile.
  	this.encoding = encoding !== undefined ? encoding : LinearEncoding;

  	this.version = 0;
  	this.onUpdate = null;

  }

  Texture.DEFAULT_IMAGE = undefined;
  Texture.DEFAULT_MAPPING = UVMapping;

  Texture.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

  	constructor: Texture,

  	isTexture: true,

  	updateMatrix: function () {

  		this.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	copy: function ( source ) {

  		this.name = source.name;

  		this.image = source.image;
  		this.mipmaps = source.mipmaps.slice( 0 );

  		this.mapping = source.mapping;

  		this.wrapS = source.wrapS;
  		this.wrapT = source.wrapT;

  		this.magFilter = source.magFilter;
  		this.minFilter = source.minFilter;

  		this.anisotropy = source.anisotropy;

  		this.format = source.format;
  		this.internalFormat = source.internalFormat;
  		this.type = source.type;

  		this.offset.copy( source.offset );
  		this.repeat.copy( source.repeat );
  		this.center.copy( source.center );
  		this.rotation = source.rotation;

  		this.matrixAutoUpdate = source.matrixAutoUpdate;
  		this.matrix.copy( source.matrix );

  		this.generateMipmaps = source.generateMipmaps;
  		this.premultiplyAlpha = source.premultiplyAlpha;
  		this.flipY = source.flipY;
  		this.unpackAlignment = source.unpackAlignment;
  		this.encoding = source.encoding;

  		return this;

  	},

  	toJSON: function ( meta ) {

  		var isRootObject = ( meta === undefined || typeof meta === 'string' );

  		if ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {

  			return meta.textures[ this.uuid ];

  		}

  		var output = {

  			metadata: {
  				version: 4.5,
  				type: 'Texture',
  				generator: 'Texture.toJSON'
  			},

  			uuid: this.uuid,
  			name: this.name,

  			mapping: this.mapping,

  			repeat: [ this.repeat.x, this.repeat.y ],
  			offset: [ this.offset.x, this.offset.y ],
  			center: [ this.center.x, this.center.y ],
  			rotation: this.rotation,

  			wrap: [ this.wrapS, this.wrapT ],

  			format: this.format,
  			type: this.type,
  			encoding: this.encoding,

  			minFilter: this.minFilter,
  			magFilter: this.magFilter,
  			anisotropy: this.anisotropy,

  			flipY: this.flipY,

  			premultiplyAlpha: this.premultiplyAlpha,
  			unpackAlignment: this.unpackAlignment

  		};

  		if ( this.image !== undefined ) {

  			// TODO: Move to THREE.Image

  			var image = this.image;

  			if ( image.uuid === undefined ) {

  				image.uuid = MathUtils.generateUUID(); // UGH

  			}

  			if ( ! isRootObject && meta.images[ image.uuid ] === undefined ) {

  				var url;

  				if ( Array.isArray( image ) ) {

  					// process array of images e.g. CubeTexture

  					url = [];

  					for ( var i = 0, l = image.length; i < l; i ++ ) {

  						url.push( ImageUtils.getDataURL( image[ i ] ) );

  					}

  				} else {

  					// process single image

  					url = ImageUtils.getDataURL( image );

  				}

  				meta.images[ image.uuid ] = {
  					uuid: image.uuid,
  					url: url
  				};

  			}

  			output.image = image.uuid;

  		}

  		if ( ! isRootObject ) {

  			meta.textures[ this.uuid ] = output;

  		}

  		return output;

  	},

  	dispose: function () {

  		this.dispatchEvent( { type: 'dispose' } );

  	},

  	transformUv: function ( uv ) {

  		if ( this.mapping !== UVMapping ) { return uv; }

  		uv.applyMatrix3( this.matrix );

  		if ( uv.x < 0 || uv.x > 1 ) {

  			switch ( this.wrapS ) {

  				case RepeatWrapping:

  					uv.x = uv.x - Math.floor( uv.x );
  					break;

  				case ClampToEdgeWrapping:

  					uv.x = uv.x < 0 ? 0 : 1;
  					break;

  				case MirroredRepeatWrapping:

  					if ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {

  						uv.x = Math.ceil( uv.x ) - uv.x;

  					} else {

  						uv.x = uv.x - Math.floor( uv.x );

  					}

  					break;

  			}

  		}

  		if ( uv.y < 0 || uv.y > 1 ) {

  			switch ( this.wrapT ) {

  				case RepeatWrapping:

  					uv.y = uv.y - Math.floor( uv.y );
  					break;

  				case ClampToEdgeWrapping:

  					uv.y = uv.y < 0 ? 0 : 1;
  					break;

  				case MirroredRepeatWrapping:

  					if ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {

  						uv.y = Math.ceil( uv.y ) - uv.y;

  					} else {

  						uv.y = uv.y - Math.floor( uv.y );

  					}

  					break;

  			}

  		}

  		if ( this.flipY ) {

  			uv.y = 1 - uv.y;

  		}

  		return uv;

  	}

  } );

  Object.defineProperty( Texture.prototype, "needsUpdate", {

  	set: function ( value ) {

  		if ( value === true ) { this.version ++; }

  	}

  } );

  /**
   * @author supereggbert / http://www.paulbrunt.co.uk/
   * @author philogb / http://blog.thejit.org/
   * @author mikael emtinger / http://gomo.se/
   * @author egraether / http://egraether.com/
   * @author WestLangley / http://github.com/WestLangley
   */

  function Vector4( x, y, z, w ) {
  	if ( x === void 0 ) x = 0;
  	if ( y === void 0 ) y = 0;
  	if ( z === void 0 ) z = 0;
  	if ( w === void 0 ) w = 1;


  	this.x = x;
  	this.y = y;
  	this.z = z;
  	this.w = w;

  }

  Object.defineProperties( Vector4.prototype, {

  	"width": {

  		get: function () {

  			return this.z;

  		},

  		set: function ( value ) {

  			this.z = value;

  		}

  	},

  	"height": {

  		get: function () {

  			return this.w;

  		},

  		set: function ( value ) {

  			this.w = value;

  		}

  	}

  } );

  Object.assign( Vector4.prototype, {

  	isVector4: true,

  	set: function ( x, y, z, w ) {

  		this.x = x;
  		this.y = y;
  		this.z = z;
  		this.w = w;

  		return this;

  	},

  	setScalar: function ( scalar ) {

  		this.x = scalar;
  		this.y = scalar;
  		this.z = scalar;
  		this.w = scalar;

  		return this;

  	},

  	setX: function ( x ) {

  		this.x = x;

  		return this;

  	},

  	setY: function ( y ) {

  		this.y = y;

  		return this;

  	},

  	setZ: function ( z ) {

  		this.z = z;

  		return this;

  	},

  	setW: function ( w ) {

  		this.w = w;

  		return this;

  	},

  	setComponent: function ( index, value ) {

  		switch ( index ) {

  			case 0: this.x = value; break;
  			case 1: this.y = value; break;
  			case 2: this.z = value; break;
  			case 3: this.w = value; break;
  			default: throw new Error( 'index is out of range: ' + index );

  		}

  		return this;

  	},

  	getComponent: function ( index ) {

  		switch ( index ) {

  			case 0: return this.x;
  			case 1: return this.y;
  			case 2: return this.z;
  			case 3: return this.w;
  			default: throw new Error( 'index is out of range: ' + index );

  		}

  	},

  	clone: function () {

  		return new this.constructor( this.x, this.y, this.z, this.w );

  	},

  	copy: function ( v ) {

  		this.x = v.x;
  		this.y = v.y;
  		this.z = v.z;
  		this.w = ( v.w !== undefined ) ? v.w : 1;

  		return this;

  	},

  	add: function ( v, w ) {

  		if ( w !== undefined ) {

  			console.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
  			return this.addVectors( v, w );

  		}

  		this.x += v.x;
  		this.y += v.y;
  		this.z += v.z;
  		this.w += v.w;

  		return this;

  	},

  	addScalar: function ( s ) {

  		this.x += s;
  		this.y += s;
  		this.z += s;
  		this.w += s;

  		return this;

  	},

  	addVectors: function ( a, b ) {

  		this.x = a.x + b.x;
  		this.y = a.y + b.y;
  		this.z = a.z + b.z;
  		this.w = a.w + b.w;

  		return this;

  	},

  	addScaledVector: function ( v, s ) {

  		this.x += v.x * s;
  		this.y += v.y * s;
  		this.z += v.z * s;
  		this.w += v.w * s;

  		return this;

  	},

  	sub: function ( v, w ) {

  		if ( w !== undefined ) {

  			console.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
  			return this.subVectors( v, w );

  		}

  		this.x -= v.x;
  		this.y -= v.y;
  		this.z -= v.z;
  		this.w -= v.w;

  		return this;

  	},

  	subScalar: function ( s ) {

  		this.x -= s;
  		this.y -= s;
  		this.z -= s;
  		this.w -= s;

  		return this;

  	},

  	subVectors: function ( a, b ) {

  		this.x = a.x - b.x;
  		this.y = a.y - b.y;
  		this.z = a.z - b.z;
  		this.w = a.w - b.w;

  		return this;

  	},

  	multiplyScalar: function ( scalar ) {

  		this.x *= scalar;
  		this.y *= scalar;
  		this.z *= scalar;
  		this.w *= scalar;

  		return this;

  	},

  	applyMatrix4: function ( m ) {

  		var x = this.x, y = this.y, z = this.z, w = this.w;
  		var e = m.elements;

  		this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;
  		this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;
  		this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;
  		this.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;

  		return this;

  	},

  	divideScalar: function ( scalar ) {

  		return this.multiplyScalar( 1 / scalar );

  	},

  	setAxisAngleFromQuaternion: function ( q ) {

  		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm

  		// q is assumed to be normalized

  		this.w = 2 * Math.acos( q.w );

  		var s = Math.sqrt( 1 - q.w * q.w );

  		if ( s < 0.0001 ) {

  			this.x = 1;
  			this.y = 0;
  			this.z = 0;

  		} else {

  			this.x = q.x / s;
  			this.y = q.y / s;
  			this.z = q.z / s;

  		}

  		return this;

  	},

  	setAxisAngleFromRotationMatrix: function ( m ) {

  		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm

  		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

  		var angle, x, y, z; // variables for result
  		var epsilon = 0.01,		// margin to allow for rounding errors
  			epsilon2 = 0.1,		// margin to distinguish between 0 and 180 degrees

  			te = m.elements,

  			m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
  			m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
  			m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

  		if ( ( Math.abs( m12 - m21 ) < epsilon ) &&
  		     ( Math.abs( m13 - m31 ) < epsilon ) &&
  		     ( Math.abs( m23 - m32 ) < epsilon ) ) {

  			// singularity found
  			// first check for identity matrix which must have +1 for all terms
  			// in leading diagonal and zero in other terms

  			if ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&
  			     ( Math.abs( m13 + m31 ) < epsilon2 ) &&
  			     ( Math.abs( m23 + m32 ) < epsilon2 ) &&
  			     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {

  				// this singularity is identity matrix so angle = 0

  				this.set( 1, 0, 0, 0 );

  				return this; // zero angle, arbitrary axis

  			}

  			// otherwise this singularity is angle = 180

  			angle = Math.PI;

  			var xx = ( m11 + 1 ) / 2;
  			var yy = ( m22 + 1 ) / 2;
  			var zz = ( m33 + 1 ) / 2;
  			var xy = ( m12 + m21 ) / 4;
  			var xz = ( m13 + m31 ) / 4;
  			var yz = ( m23 + m32 ) / 4;

  			if ( ( xx > yy ) && ( xx > zz ) ) {

  				// m11 is the largest diagonal term

  				if ( xx < epsilon ) {

  					x = 0;
  					y = 0.707106781;
  					z = 0.707106781;

  				} else {

  					x = Math.sqrt( xx );
  					y = xy / x;
  					z = xz / x;

  				}

  			} else if ( yy > zz ) {

  				// m22 is the largest diagonal term

  				if ( yy < epsilon ) {

  					x = 0.707106781;
  					y = 0;
  					z = 0.707106781;

  				} else {

  					y = Math.sqrt( yy );
  					x = xy / y;
  					z = yz / y;

  				}

  			} else {

  				// m33 is the largest diagonal term so base result on this

  				if ( zz < epsilon ) {

  					x = 0.707106781;
  					y = 0.707106781;
  					z = 0;

  				} else {

  					z = Math.sqrt( zz );
  					x = xz / z;
  					y = yz / z;

  				}

  			}

  			this.set( x, y, z, angle );

  			return this; // return 180 deg rotation

  		}

  		// as we have reached here there are no singularities so we can handle normally

  		var s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +
  			( m13 - m31 ) * ( m13 - m31 ) +
  			( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize

  		if ( Math.abs( s ) < 0.001 ) { s = 1; }

  		// prevent divide by zero, should not happen if matrix is orthogonal and should be
  		// caught by singularity test above, but I've left it in just in case

  		this.x = ( m32 - m23 ) / s;
  		this.y = ( m13 - m31 ) / s;
  		this.z = ( m21 - m12 ) / s;
  		this.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );

  		return this;

  	},

  	min: function ( v ) {

  		this.x = Math.min( this.x, v.x );
  		this.y = Math.min( this.y, v.y );
  		this.z = Math.min( this.z, v.z );
  		this.w = Math.min( this.w, v.w );

  		return this;

  	},

  	max: function ( v ) {

  		this.x = Math.max( this.x, v.x );
  		this.y = Math.max( this.y, v.y );
  		this.z = Math.max( this.z, v.z );
  		this.w = Math.max( this.w, v.w );

  		return this;

  	},

  	clamp: function ( min, max ) {

  		// assumes min < max, componentwise

  		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
  		this.y = Math.max( min.y, Math.min( max.y, this.y ) );
  		this.z = Math.max( min.z, Math.min( max.z, this.z ) );
  		this.w = Math.max( min.w, Math.min( max.w, this.w ) );

  		return this;

  	},

  	clampScalar: function ( minVal, maxVal ) {

  		this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
  		this.y = Math.max( minVal, Math.min( maxVal, this.y ) );
  		this.z = Math.max( minVal, Math.min( maxVal, this.z ) );
  		this.w = Math.max( minVal, Math.min( maxVal, this.w ) );

  		return this;

  	},

  	clampLength: function ( min, max ) {

  		var length = this.length();

  		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

  	},

  	floor: function () {

  		this.x = Math.floor( this.x );
  		this.y = Math.floor( this.y );
  		this.z = Math.floor( this.z );
  		this.w = Math.floor( this.w );

  		return this;

  	},

  	ceil: function () {

  		this.x = Math.ceil( this.x );
  		this.y = Math.ceil( this.y );
  		this.z = Math.ceil( this.z );
  		this.w = Math.ceil( this.w );

  		return this;

  	},

  	round: function () {

  		this.x = Math.round( this.x );
  		this.y = Math.round( this.y );
  		this.z = Math.round( this.z );
  		this.w = Math.round( this.w );

  		return this;

  	},

  	roundToZero: function () {

  		this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
  		this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
  		this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );
  		this.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );

  		return this;

  	},

  	negate: function () {

  		this.x = - this.x;
  		this.y = - this.y;
  		this.z = - this.z;
  		this.w = - this.w;

  		return this;

  	},

  	dot: function ( v ) {

  		return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;

  	},

  	lengthSq: function () {

  		return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;

  	},

  	length: function () {

  		return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );

  	},

  	manhattanLength: function () {

  		return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );

  	},

  	normalize: function () {

  		return this.divideScalar( this.length() || 1 );

  	},

  	setLength: function ( length ) {

  		return this.normalize().multiplyScalar( length );

  	},

  	lerp: function ( v, alpha ) {

  		this.x += ( v.x - this.x ) * alpha;
  		this.y += ( v.y - this.y ) * alpha;
  		this.z += ( v.z - this.z ) * alpha;
  		this.w += ( v.w - this.w ) * alpha;

  		return this;

  	},

  	lerpVectors: function ( v1, v2, alpha ) {

  		this.x = v1.x + ( v2.x - v1.x ) * alpha;
  		this.y = v1.y + ( v2.y - v1.y ) * alpha;
  		this.z = v1.z + ( v2.z - v1.z ) * alpha;
  		this.w = v1.w + ( v2.w - v1.w ) * alpha;

  		return this;

  	},

  	equals: function ( v ) {

  		return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );

  	},

  	fromArray: function ( array, offset ) {

  		if ( offset === undefined ) { offset = 0; }

  		this.x = array[ offset ];
  		this.y = array[ offset + 1 ];
  		this.z = array[ offset + 2 ];
  		this.w = array[ offset + 3 ];

  		return this;

  	},

  	toArray: function ( array, offset ) {

  		if ( array === undefined ) { array = []; }
  		if ( offset === undefined ) { offset = 0; }

  		array[ offset ] = this.x;
  		array[ offset + 1 ] = this.y;
  		array[ offset + 2 ] = this.z;
  		array[ offset + 3 ] = this.w;

  		return array;

  	},

  	fromBufferAttribute: function ( attribute, index, offset ) {

  		if ( offset !== undefined ) {

  			console.warn( 'THREE.Vector4: offset has been removed from .fromBufferAttribute().' );

  		}

  		this.x = attribute.getX( index );
  		this.y = attribute.getY( index );
  		this.z = attribute.getZ( index );
  		this.w = attribute.getW( index );

  		return this;

  	},

  	random: function () {

  		this.x = Math.random();
  		this.y = Math.random();
  		this.z = Math.random();
  		this.w = Math.random();

  		return this;

  	}

  } );

  /**
   * @author szimek / https://github.com/szimek/
   * @author alteredq / http://alteredqualia.com/
   * @author Marius Kintel / https://github.com/kintel
   */

  /*
   In options, we can specify:
   * Texture parameters for an auto-generated target texture
   * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
  */
  function WebGLRenderTarget( width, height, options ) {

  	this.width = width;
  	this.height = height;

  	this.scissor = new Vector4( 0, 0, width, height );
  	this.scissorTest = false;

  	this.viewport = new Vector4( 0, 0, width, height );

  	options = options || {};

  	this.texture = new Texture( undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );

  	this.texture.image = {};
  	this.texture.image.width = width;
  	this.texture.image.height = height;

  	this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;
  	this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;

  	this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;
  	this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;
  	this.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;

  }

  WebGLRenderTarget.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

  	constructor: WebGLRenderTarget,

  	isWebGLRenderTarget: true,

  	setSize: function ( width, height ) {

  		if ( this.width !== width || this.height !== height ) {

  			this.width = width;
  			this.height = height;

  			this.texture.image.width = width;
  			this.texture.image.height = height;

  			this.dispose();

  		}

  		this.viewport.set( 0, 0, width, height );
  		this.scissor.set( 0, 0, width, height );

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	copy: function ( source ) {

  		this.width = source.width;
  		this.height = source.height;

  		this.viewport.copy( source.viewport );

  		this.texture = source.texture.clone();

  		this.depthBuffer = source.depthBuffer;
  		this.stencilBuffer = source.stencilBuffer;
  		this.depthTexture = source.depthTexture;

  		return this;

  	},

  	dispose: function () {

  		this.dispatchEvent( { type: 'dispose' } );

  	}

  } );

  /**
   * @author Mugen87 / https://github.com/Mugen87
   * @author Matt DesLauriers / @mattdesl
   */

  function WebGLMultisampleRenderTarget( width, height, options ) {

  	WebGLRenderTarget.call( this, width, height, options );

  	this.samples = 4;

  }

  WebGLMultisampleRenderTarget.prototype = Object.assign( Object.create( WebGLRenderTarget.prototype ), {

  	constructor: WebGLMultisampleRenderTarget,

  	isWebGLMultisampleRenderTarget: true,

  	copy: function ( source ) {

  		WebGLRenderTarget.prototype.copy.call( this, source );

  		this.samples = source.samples;

  		return this;

  	}

  } );

  /**
   * @author mikael emtinger / http://gomo.se/
   * @author alteredq / http://alteredqualia.com/
   * @author WestLangley / http://github.com/WestLangley
   * @author bhouston / http://clara.io
   */

  function Quaternion( x, y, z, w ) {
  	if ( x === void 0 ) x = 0;
  	if ( y === void 0 ) y = 0;
  	if ( z === void 0 ) z = 0;
  	if ( w === void 0 ) w = 1;


  	this._x = x;
  	this._y = y;
  	this._z = z;
  	this._w = w;

  }

  Object.assign( Quaternion, {

  	slerp: function ( qa, qb, qm, t ) {

  		return qm.copy( qa ).slerp( qb, t );

  	},

  	slerpFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {

  		// fuzz-free, array-based Quaternion SLERP operation

  		var x0 = src0[ srcOffset0 + 0 ],
  			y0 = src0[ srcOffset0 + 1 ],
  			z0 = src0[ srcOffset0 + 2 ],
  			w0 = src0[ srcOffset0 + 3 ];

  		var x1 = src1[ srcOffset1 + 0 ],
  			y1 = src1[ srcOffset1 + 1 ],
  			z1 = src1[ srcOffset1 + 2 ],
  			w1 = src1[ srcOffset1 + 3 ];

  		if ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {

  			var s = 1 - t,

  				cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,

  				dir = ( cos >= 0 ? 1 : - 1 ),
  				sqrSin = 1 - cos * cos;

  			// Skip the Slerp for tiny steps to avoid numeric problems:
  			if ( sqrSin > Number.EPSILON ) {

  				var sin = Math.sqrt( sqrSin ),
  					len = Math.atan2( sin, cos * dir );

  				s = Math.sin( s * len ) / sin;
  				t = Math.sin( t * len ) / sin;

  			}

  			var tDir = t * dir;

  			x0 = x0 * s + x1 * tDir;
  			y0 = y0 * s + y1 * tDir;
  			z0 = z0 * s + z1 * tDir;
  			w0 = w0 * s + w1 * tDir;

  			// Normalize in case we just did a lerp:
  			if ( s === 1 - t ) {

  				var f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );

  				x0 *= f;
  				y0 *= f;
  				z0 *= f;
  				w0 *= f;

  			}

  		}

  		dst[ dstOffset ] = x0;
  		dst[ dstOffset + 1 ] = y0;
  		dst[ dstOffset + 2 ] = z0;
  		dst[ dstOffset + 3 ] = w0;

  	},

  	multiplyQuaternionsFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1 ) {

  		var x0 = src0[ srcOffset0 ];
  		var y0 = src0[ srcOffset0 + 1 ];
  		var z0 = src0[ srcOffset0 + 2 ];
  		var w0 = src0[ srcOffset0 + 3 ];

  		var x1 = src1[ srcOffset1 ];
  		var y1 = src1[ srcOffset1 + 1 ];
  		var z1 = src1[ srcOffset1 + 2 ];
  		var w1 = src1[ srcOffset1 + 3 ];

  		dst[ dstOffset ] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;
  		dst[ dstOffset + 1 ] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;
  		dst[ dstOffset + 2 ] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;
  		dst[ dstOffset + 3 ] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;

  		return dst;

  	}

  } );

  Object.defineProperties( Quaternion.prototype, {

  	x: {

  		get: function () {

  			return this._x;

  		},

  		set: function ( value ) {

  			this._x = value;
  			this._onChangeCallback();

  		}

  	},

  	y: {

  		get: function () {

  			return this._y;

  		},

  		set: function ( value ) {

  			this._y = value;
  			this._onChangeCallback();

  		}

  	},

  	z: {

  		get: function () {

  			return this._z;

  		},

  		set: function ( value ) {

  			this._z = value;
  			this._onChangeCallback();

  		}

  	},

  	w: {

  		get: function () {

  			return this._w;

  		},

  		set: function ( value ) {

  			this._w = value;
  			this._onChangeCallback();

  		}

  	}

  } );

  Object.assign( Quaternion.prototype, {

  	isQuaternion: true,

  	set: function ( x, y, z, w ) {

  		this._x = x;
  		this._y = y;
  		this._z = z;
  		this._w = w;

  		this._onChangeCallback();

  		return this;

  	},

  	clone: function () {

  		return new this.constructor( this._x, this._y, this._z, this._w );

  	},

  	copy: function ( quaternion ) {

  		this._x = quaternion.x;
  		this._y = quaternion.y;
  		this._z = quaternion.z;
  		this._w = quaternion.w;

  		this._onChangeCallback();

  		return this;

  	},

  	setFromEuler: function ( euler, update ) {

  		if ( ! ( euler && euler.isEuler ) ) {

  			throw new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );

  		}

  		var x = euler._x, y = euler._y, z = euler._z, order = euler.order;

  		// http://www.mathworks.com/matlabcentral/fileexchange/
  		// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
  		//	content/SpinCalc.m

  		var cos = Math.cos;
  		var sin = Math.sin;

  		var c1 = cos( x / 2 );
  		var c2 = cos( y / 2 );
  		var c3 = cos( z / 2 );

  		var s1 = sin( x / 2 );
  		var s2 = sin( y / 2 );
  		var s3 = sin( z / 2 );

  		switch ( order ) {

  			case 'XYZ':
  				this._x = s1 * c2 * c3 + c1 * s2 * s3;
  				this._y = c1 * s2 * c3 - s1 * c2 * s3;
  				this._z = c1 * c2 * s3 + s1 * s2 * c3;
  				this._w = c1 * c2 * c3 - s1 * s2 * s3;
  				break;

  			case 'YXZ':
  				this._x = s1 * c2 * c3 + c1 * s2 * s3;
  				this._y = c1 * s2 * c3 - s1 * c2 * s3;
  				this._z = c1 * c2 * s3 - s1 * s2 * c3;
  				this._w = c1 * c2 * c3 + s1 * s2 * s3;
  				break;

  			case 'ZXY':
  				this._x = s1 * c2 * c3 - c1 * s2 * s3;
  				this._y = c1 * s2 * c3 + s1 * c2 * s3;
  				this._z = c1 * c2 * s3 + s1 * s2 * c3;
  				this._w = c1 * c2 * c3 - s1 * s2 * s3;
  				break;

  			case 'ZYX':
  				this._x = s1 * c2 * c3 - c1 * s2 * s3;
  				this._y = c1 * s2 * c3 + s1 * c2 * s3;
  				this._z = c1 * c2 * s3 - s1 * s2 * c3;
  				this._w = c1 * c2 * c3 + s1 * s2 * s3;
  				break;

  			case 'YZX':
  				this._x = s1 * c2 * c3 + c1 * s2 * s3;
  				this._y = c1 * s2 * c3 + s1 * c2 * s3;
  				this._z = c1 * c2 * s3 - s1 * s2 * c3;
  				this._w = c1 * c2 * c3 - s1 * s2 * s3;
  				break;

  			case 'XZY':
  				this._x = s1 * c2 * c3 - c1 * s2 * s3;
  				this._y = c1 * s2 * c3 - s1 * c2 * s3;
  				this._z = c1 * c2 * s3 + s1 * s2 * c3;
  				this._w = c1 * c2 * c3 + s1 * s2 * s3;
  				break;

  			default:
  				console.warn( 'THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order );

  		}

  		if ( update !== false ) { this._onChangeCallback(); }

  		return this;

  	},

  	setFromAxisAngle: function ( axis, angle ) {

  		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm

  		// assumes axis is normalized

  		var halfAngle = angle / 2, s = Math.sin( halfAngle );

  		this._x = axis.x * s;
  		this._y = axis.y * s;
  		this._z = axis.z * s;
  		this._w = Math.cos( halfAngle );

  		this._onChangeCallback();

  		return this;

  	},

  	setFromRotationMatrix: function ( m ) {

  		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm

  		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

  		var te = m.elements,

  			m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
  			m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
  			m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],

  			trace = m11 + m22 + m33;

  		if ( trace > 0 ) {

  			var s = 0.5 / Math.sqrt( trace + 1.0 );

  			this._w = 0.25 / s;
  			this._x = ( m32 - m23 ) * s;
  			this._y = ( m13 - m31 ) * s;
  			this._z = ( m21 - m12 ) * s;

  		} else if ( m11 > m22 && m11 > m33 ) {

  			var s$1 = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );

  			this._w = ( m32 - m23 ) / s$1;
  			this._x = 0.25 * s$1;
  			this._y = ( m12 + m21 ) / s$1;
  			this._z = ( m13 + m31 ) / s$1;

  		} else if ( m22 > m33 ) {

  			var s$2 = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );

  			this._w = ( m13 - m31 ) / s$2;
  			this._x = ( m12 + m21 ) / s$2;
  			this._y = 0.25 * s$2;
  			this._z = ( m23 + m32 ) / s$2;

  		} else {

  			var s$3 = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );

  			this._w = ( m21 - m12 ) / s$3;
  			this._x = ( m13 + m31 ) / s$3;
  			this._y = ( m23 + m32 ) / s$3;
  			this._z = 0.25 * s$3;

  		}

  		this._onChangeCallback();

  		return this;

  	},

  	setFromUnitVectors: function ( vFrom, vTo ) {

  		// assumes direction vectors vFrom and vTo are normalized

  		var EPS = 0.000001;

  		var r = vFrom.dot( vTo ) + 1;

  		if ( r < EPS ) {

  			r = 0;

  			if ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {

  				this._x = - vFrom.y;
  				this._y = vFrom.x;
  				this._z = 0;
  				this._w = r;

  			} else {

  				this._x = 0;
  				this._y = - vFrom.z;
  				this._z = vFrom.y;
  				this._w = r;

  			}

  		} else {

  			// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3

  			this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
  			this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
  			this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
  			this._w = r;

  		}

  		return this.normalize();

  	},

  	angleTo: function ( q ) {

  		return 2 * Math.acos( Math.abs( MathUtils.clamp( this.dot( q ), - 1, 1 ) ) );

  	},

  	rotateTowards: function ( q, step ) {

  		var angle = this.angleTo( q );

  		if ( angle === 0 ) { return this; }

  		var t = Math.min( 1, step / angle );

  		this.slerp( q, t );

  		return this;

  	},

  	inverse: function () {

  		// quaternion is assumed to have unit length

  		return this.conjugate();

  	},

  	conjugate: function () {

  		this._x *= - 1;
  		this._y *= - 1;
  		this._z *= - 1;

  		this._onChangeCallback();

  		return this;

  	},

  	dot: function ( v ) {

  		return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;

  	},

  	lengthSq: function () {

  		return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;

  	},

  	length: function () {

  		return Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );

  	},

  	normalize: function () {

  		var l = this.length();

  		if ( l === 0 ) {

  			this._x = 0;
  			this._y = 0;
  			this._z = 0;
  			this._w = 1;

  		} else {

  			l = 1 / l;

  			this._x = this._x * l;
  			this._y = this._y * l;
  			this._z = this._z * l;
  			this._w = this._w * l;

  		}

  		this._onChangeCallback();

  		return this;

  	},

  	multiply: function ( q, p ) {

  		if ( p !== undefined ) {

  			console.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );
  			return this.multiplyQuaternions( q, p );

  		}

  		return this.multiplyQuaternions( this, q );

  	},

  	premultiply: function ( q ) {

  		return this.multiplyQuaternions( q, this );

  	},

  	multiplyQuaternions: function ( a, b ) {

  		// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm

  		var qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
  		var qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;

  		this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
  		this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
  		this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
  		this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;

  		this._onChangeCallback();

  		return this;

  	},

  	slerp: function ( qb, t ) {

  		if ( t === 0 ) { return this; }
  		if ( t === 1 ) { return this.copy( qb ); }

  		var x = this._x, y = this._y, z = this._z, w = this._w;

  		// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/

  		var cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;

  		if ( cosHalfTheta < 0 ) {

  			this._w = - qb._w;
  			this._x = - qb._x;
  			this._y = - qb._y;
  			this._z = - qb._z;

  			cosHalfTheta = - cosHalfTheta;

  		} else {

  			this.copy( qb );

  		}

  		if ( cosHalfTheta >= 1.0 ) {

  			this._w = w;
  			this._x = x;
  			this._y = y;
  			this._z = z;

  			return this;

  		}

  		var sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;

  		if ( sqrSinHalfTheta <= Number.EPSILON ) {

  			var s = 1 - t;
  			this._w = s * w + t * this._w;
  			this._x = s * x + t * this._x;
  			this._y = s * y + t * this._y;
  			this._z = s * z + t * this._z;

  			this.normalize();
  			this._onChangeCallback();

  			return this;

  		}

  		var sinHalfTheta = Math.sqrt( sqrSinHalfTheta );
  		var halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );
  		var ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,
  			ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;

  		this._w = ( w * ratioA + this._w * ratioB );
  		this._x = ( x * ratioA + this._x * ratioB );
  		this._y = ( y * ratioA + this._y * ratioB );
  		this._z = ( z * ratioA + this._z * ratioB );

  		this._onChangeCallback();

  		return this;

  	},

  	equals: function ( quaternion ) {

  		return ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );

  	},

  	fromArray: function ( array, offset ) {

  		if ( offset === undefined ) { offset = 0; }

  		this._x = array[ offset ];
  		this._y = array[ offset + 1 ];
  		this._z = array[ offset + 2 ];
  		this._w = array[ offset + 3 ];

  		this._onChangeCallback();

  		return this;

  	},

  	toArray: function ( array, offset ) {

  		if ( array === undefined ) { array = []; }
  		if ( offset === undefined ) { offset = 0; }

  		array[ offset ] = this._x;
  		array[ offset + 1 ] = this._y;
  		array[ offset + 2 ] = this._z;
  		array[ offset + 3 ] = this._w;

  		return array;

  	},

  	fromBufferAttribute: function ( attribute, index ) {

  		this._x = attribute.getX( index );
  		this._y = attribute.getY( index );
  		this._z = attribute.getZ( index );
  		this._w = attribute.getW( index );

  		return this;

  	},

  	_onChange: function ( callback ) {

  		this._onChangeCallback = callback;

  		return this;

  	},

  	_onChangeCallback: function () {}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author kile / http://kile.stravaganza.org/
   * @author philogb / http://blog.thejit.org/
   * @author mikael emtinger / http://gomo.se/
   * @author egraether / http://egraether.com/
   * @author WestLangley / http://github.com/WestLangley
   */

  var _vector = new Vector3();
  var _quaternion = new Quaternion();

  function Vector3( x, y, z ) {
  	if ( x === void 0 ) x = 0;
  	if ( y === void 0 ) y = 0;
  	if ( z === void 0 ) z = 0;


  	this.x = x;
  	this.y = y;
  	this.z = z;

  }

  Object.assign( Vector3.prototype, {

  	isVector3: true,

  	set: function ( x, y, z ) {

  		this.x = x;
  		this.y = y;
  		this.z = z;

  		return this;

  	},

  	setScalar: function ( scalar ) {

  		this.x = scalar;
  		this.y = scalar;
  		this.z = scalar;

  		return this;

  	},

  	setX: function ( x ) {

  		this.x = x;

  		return this;

  	},

  	setY: function ( y ) {

  		this.y = y;

  		return this;

  	},

  	setZ: function ( z ) {

  		this.z = z;

  		return this;

  	},

  	setComponent: function ( index, value ) {

  		switch ( index ) {

  			case 0: this.x = value; break;
  			case 1: this.y = value; break;
  			case 2: this.z = value; break;
  			default: throw new Error( 'index is out of range: ' + index );

  		}

  		return this;

  	},

  	getComponent: function ( index ) {

  		switch ( index ) {

  			case 0: return this.x;
  			case 1: return this.y;
  			case 2: return this.z;
  			default: throw new Error( 'index is out of range: ' + index );

  		}

  	},

  	clone: function () {

  		return new this.constructor( this.x, this.y, this.z );

  	},

  	copy: function ( v ) {

  		this.x = v.x;
  		this.y = v.y;
  		this.z = v.z;

  		return this;

  	},

  	add: function ( v, w ) {

  		if ( w !== undefined ) {

  			console.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
  			return this.addVectors( v, w );

  		}

  		this.x += v.x;
  		this.y += v.y;
  		this.z += v.z;

  		return this;

  	},

  	addScalar: function ( s ) {

  		this.x += s;
  		this.y += s;
  		this.z += s;

  		return this;

  	},

  	addVectors: function ( a, b ) {

  		this.x = a.x + b.x;
  		this.y = a.y + b.y;
  		this.z = a.z + b.z;

  		return this;

  	},

  	addScaledVector: function ( v, s ) {

  		this.x += v.x * s;
  		this.y += v.y * s;
  		this.z += v.z * s;

  		return this;

  	},

  	sub: function ( v, w ) {

  		if ( w !== undefined ) {

  			console.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
  			return this.subVectors( v, w );

  		}

  		this.x -= v.x;
  		this.y -= v.y;
  		this.z -= v.z;

  		return this;

  	},

  	subScalar: function ( s ) {

  		this.x -= s;
  		this.y -= s;
  		this.z -= s;

  		return this;

  	},

  	subVectors: function ( a, b ) {

  		this.x = a.x - b.x;
  		this.y = a.y - b.y;
  		this.z = a.z - b.z;

  		return this;

  	},

  	multiply: function ( v, w ) {

  		if ( w !== undefined ) {

  			console.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );
  			return this.multiplyVectors( v, w );

  		}

  		this.x *= v.x;
  		this.y *= v.y;
  		this.z *= v.z;

  		return this;

  	},

  	multiplyScalar: function ( scalar ) {

  		this.x *= scalar;
  		this.y *= scalar;
  		this.z *= scalar;

  		return this;

  	},

  	multiplyVectors: function ( a, b ) {

  		this.x = a.x * b.x;
  		this.y = a.y * b.y;
  		this.z = a.z * b.z;

  		return this;

  	},

  	applyEuler: function ( euler ) {

  		if ( ! ( euler && euler.isEuler ) ) {

  			console.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );

  		}

  		return this.applyQuaternion( _quaternion.setFromEuler( euler ) );

  	},

  	applyAxisAngle: function ( axis, angle ) {

  		return this.applyQuaternion( _quaternion.setFromAxisAngle( axis, angle ) );

  	},

  	applyMatrix3: function ( m ) {

  		var x = this.x, y = this.y, z = this.z;
  		var e = m.elements;

  		this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;
  		this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;
  		this.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;

  		return this;

  	},

  	applyNormalMatrix: function ( m ) {

  		return this.applyMatrix3( m ).normalize();

  	},

  	applyMatrix4: function ( m ) {

  		var x = this.x, y = this.y, z = this.z;
  		var e = m.elements;

  		var w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );

  		this.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;
  		this.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;
  		this.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;

  		return this;

  	},

  	applyQuaternion: function ( q ) {

  		var x = this.x, y = this.y, z = this.z;
  		var qx = q.x, qy = q.y, qz = q.z, qw = q.w;

  		// calculate quat * vector

  		var ix = qw * x + qy * z - qz * y;
  		var iy = qw * y + qz * x - qx * z;
  		var iz = qw * z + qx * y - qy * x;
  		var iw = - qx * x - qy * y - qz * z;

  		// calculate result * inverse quat

  		this.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;
  		this.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;
  		this.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;

  		return this;

  	},

  	project: function ( camera ) {

  		return this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );

  	},

  	unproject: function ( camera ) {

  		return this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );

  	},

  	transformDirection: function ( m ) {

  		// input: THREE.Matrix4 affine matrix
  		// vector interpreted as a direction

  		var x = this.x, y = this.y, z = this.z;
  		var e = m.elements;

  		this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;
  		this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;
  		this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;

  		return this.normalize();

  	},

  	divide: function ( v ) {

  		this.x /= v.x;
  		this.y /= v.y;
  		this.z /= v.z;

  		return this;

  	},

  	divideScalar: function ( scalar ) {

  		return this.multiplyScalar( 1 / scalar );

  	},

  	min: function ( v ) {

  		this.x = Math.min( this.x, v.x );
  		this.y = Math.min( this.y, v.y );
  		this.z = Math.min( this.z, v.z );

  		return this;

  	},

  	max: function ( v ) {

  		this.x = Math.max( this.x, v.x );
  		this.y = Math.max( this.y, v.y );
  		this.z = Math.max( this.z, v.z );

  		return this;

  	},

  	clamp: function ( min, max ) {

  		// assumes min < max, componentwise

  		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
  		this.y = Math.max( min.y, Math.min( max.y, this.y ) );
  		this.z = Math.max( min.z, Math.min( max.z, this.z ) );

  		return this;

  	},

  	clampScalar: function ( minVal, maxVal ) {

  		this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
  		this.y = Math.max( minVal, Math.min( maxVal, this.y ) );
  		this.z = Math.max( minVal, Math.min( maxVal, this.z ) );

  		return this;

  	},

  	clampLength: function ( min, max ) {

  		var length = this.length();

  		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

  	},

  	floor: function () {

  		this.x = Math.floor( this.x );
  		this.y = Math.floor( this.y );
  		this.z = Math.floor( this.z );

  		return this;

  	},

  	ceil: function () {

  		this.x = Math.ceil( this.x );
  		this.y = Math.ceil( this.y );
  		this.z = Math.ceil( this.z );

  		return this;

  	},

  	round: function () {

  		this.x = Math.round( this.x );
  		this.y = Math.round( this.y );
  		this.z = Math.round( this.z );

  		return this;

  	},

  	roundToZero: function () {

  		this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
  		this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
  		this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );

  		return this;

  	},

  	negate: function () {

  		this.x = - this.x;
  		this.y = - this.y;
  		this.z = - this.z;

  		return this;

  	},

  	dot: function ( v ) {

  		return this.x * v.x + this.y * v.y + this.z * v.z;

  	},

  	// TODO lengthSquared?

  	lengthSq: function () {

  		return this.x * this.x + this.y * this.y + this.z * this.z;

  	},

  	length: function () {

  		return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );

  	},

  	manhattanLength: function () {

  		return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );

  	},

  	normalize: function () {

  		return this.divideScalar( this.length() || 1 );

  	},

  	setLength: function ( length ) {

  		return this.normalize().multiplyScalar( length );

  	},

  	lerp: function ( v, alpha ) {

  		this.x += ( v.x - this.x ) * alpha;
  		this.y += ( v.y - this.y ) * alpha;
  		this.z += ( v.z - this.z ) * alpha;

  		return this;

  	},

  	lerpVectors: function ( v1, v2, alpha ) {

  		this.x = v1.x + ( v2.x - v1.x ) * alpha;
  		this.y = v1.y + ( v2.y - v1.y ) * alpha;
  		this.z = v1.z + ( v2.z - v1.z ) * alpha;

  		return this;

  	},

  	cross: function ( v, w ) {

  		if ( w !== undefined ) {

  			console.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );
  			return this.crossVectors( v, w );

  		}

  		return this.crossVectors( this, v );

  	},

  	crossVectors: function ( a, b ) {

  		var ax = a.x, ay = a.y, az = a.z;
  		var bx = b.x, by = b.y, bz = b.z;

  		this.x = ay * bz - az * by;
  		this.y = az * bx - ax * bz;
  		this.z = ax * by - ay * bx;

  		return this;

  	},

  	projectOnVector: function ( v ) {

  		var denominator = v.lengthSq();

  		if ( denominator === 0 ) { return this.set( 0, 0, 0 ); }

  		var scalar = v.dot( this ) / denominator;

  		return this.copy( v ).multiplyScalar( scalar );

  	},

  	projectOnPlane: function ( planeNormal ) {

  		_vector.copy( this ).projectOnVector( planeNormal );

  		return this.sub( _vector );

  	},

  	reflect: function ( normal ) {

  		// reflect incident vector off plane orthogonal to normal
  		// normal is assumed to have unit length

  		return this.sub( _vector.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );

  	},

  	angleTo: function ( v ) {

  		var denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );

  		if ( denominator === 0 ) { return Math.PI / 2; }

  		var theta = this.dot( v ) / denominator;

  		// clamp, to handle numerical problems

  		return Math.acos( MathUtils.clamp( theta, - 1, 1 ) );

  	},

  	distanceTo: function ( v ) {

  		return Math.sqrt( this.distanceToSquared( v ) );

  	},

  	distanceToSquared: function ( v ) {

  		var dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;

  		return dx * dx + dy * dy + dz * dz;

  	},

  	manhattanDistanceTo: function ( v ) {

  		return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );

  	},

  	setFromSpherical: function ( s ) {

  		return this.setFromSphericalCoords( s.radius, s.phi, s.theta );

  	},

  	setFromSphericalCoords: function ( radius, phi, theta ) {

  		var sinPhiRadius = Math.sin( phi ) * radius;

  		this.x = sinPhiRadius * Math.sin( theta );
  		this.y = Math.cos( phi ) * radius;
  		this.z = sinPhiRadius * Math.cos( theta );

  		return this;

  	},

  	setFromCylindrical: function ( c ) {

  		return this.setFromCylindricalCoords( c.radius, c.theta, c.y );

  	},

  	setFromCylindricalCoords: function ( radius, theta, y ) {

  		this.x = radius * Math.sin( theta );
  		this.y = y;
  		this.z = radius * Math.cos( theta );

  		return this;

  	},

  	setFromMatrixPosition: function ( m ) {

  		var e = m.elements;

  		this.x = e[ 12 ];
  		this.y = e[ 13 ];
  		this.z = e[ 14 ];

  		return this;

  	},

  	setFromMatrixScale: function ( m ) {

  		var sx = this.setFromMatrixColumn( m, 0 ).length();
  		var sy = this.setFromMatrixColumn( m, 1 ).length();
  		var sz = this.setFromMatrixColumn( m, 2 ).length();

  		this.x = sx;
  		this.y = sy;
  		this.z = sz;

  		return this;

  	},

  	setFromMatrixColumn: function ( m, index ) {

  		return this.fromArray( m.elements, index * 4 );

  	},

  	setFromMatrix3Column: function ( m, index ) {

  		return this.fromArray( m.elements, index * 3 );

  	},

  	equals: function ( v ) {

  		return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );

  	},

  	fromArray: function ( array, offset ) {

  		if ( offset === undefined ) { offset = 0; }

  		this.x = array[ offset ];
  		this.y = array[ offset + 1 ];
  		this.z = array[ offset + 2 ];

  		return this;

  	},

  	toArray: function ( array, offset ) {

  		if ( array === undefined ) { array = []; }
  		if ( offset === undefined ) { offset = 0; }

  		array[ offset ] = this.x;
  		array[ offset + 1 ] = this.y;
  		array[ offset + 2 ] = this.z;

  		return array;

  	},

  	fromBufferAttribute: function ( attribute, index, offset ) {

  		if ( offset !== undefined ) {

  			console.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );

  		}

  		this.x = attribute.getX( index );
  		this.y = attribute.getY( index );
  		this.z = attribute.getZ( index );

  		return this;

  	},

  	random: function () {

  		this.x = Math.random();
  		this.y = Math.random();
  		this.z = Math.random();

  		return this;

  	}

  } );

  var _v1 = new Vector3();
  var _m1 = new Matrix4();
  var _zero = new Vector3( 0, 0, 0 );
  var _one = new Vector3( 1, 1, 1 );
  var _x = new Vector3();
  var _y = new Vector3();
  var _z = new Vector3();

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author supereggbert / http://www.paulbrunt.co.uk/
   * @author philogb / http://blog.thejit.org/
   * @author jordi_ros / http://plattsoft.com
   * @author D1plo1d / http://github.com/D1plo1d
   * @author alteredq / http://alteredqualia.com/
   * @author mikael emtinger / http://gomo.se/
   * @author timknip / http://www.floorplanner.com/
   * @author bhouston / http://clara.io
   * @author WestLangley / http://github.com/WestLangley
   */

  function Matrix4() {

  	this.elements = [

  		1, 0, 0, 0,
  		0, 1, 0, 0,
  		0, 0, 1, 0,
  		0, 0, 0, 1

  	];

  	if ( arguments.length > 0 ) {

  		console.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );

  	}

  }

  Object.assign( Matrix4.prototype, {

  	isMatrix4: true,

  	set: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {

  		var te = this.elements;

  		te[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;
  		te[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;
  		te[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;
  		te[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;

  		return this;

  	},

  	identity: function () {

  		this.set(

  			1, 0, 0, 0,
  			0, 1, 0, 0,
  			0, 0, 1, 0,
  			0, 0, 0, 1

  		);

  		return this;

  	},

  	clone: function () {

  		return new Matrix4().fromArray( this.elements );

  	},

  	copy: function ( m ) {

  		var te = this.elements;
  		var me = m.elements;

  		te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];
  		te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];
  		te[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];
  		te[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];

  		return this;

  	},

  	copyPosition: function ( m ) {

  		var te = this.elements, me = m.elements;

  		te[ 12 ] = me[ 12 ];
  		te[ 13 ] = me[ 13 ];
  		te[ 14 ] = me[ 14 ];

  		return this;

  	},

  	extractBasis: function ( xAxis, yAxis, zAxis ) {

  		xAxis.setFromMatrixColumn( this, 0 );
  		yAxis.setFromMatrixColumn( this, 1 );
  		zAxis.setFromMatrixColumn( this, 2 );

  		return this;

  	},

  	makeBasis: function ( xAxis, yAxis, zAxis ) {

  		this.set(
  			xAxis.x, yAxis.x, zAxis.x, 0,
  			xAxis.y, yAxis.y, zAxis.y, 0,
  			xAxis.z, yAxis.z, zAxis.z, 0,
  			0, 0, 0, 1
  		);

  		return this;

  	},

  	extractRotation: function ( m ) {

  		// this method does not support reflection matrices

  		var te = this.elements;
  		var me = m.elements;

  		var scaleX = 1 / _v1.setFromMatrixColumn( m, 0 ).length();
  		var scaleY = 1 / _v1.setFromMatrixColumn( m, 1 ).length();
  		var scaleZ = 1 / _v1.setFromMatrixColumn( m, 2 ).length();

  		te[ 0 ] = me[ 0 ] * scaleX;
  		te[ 1 ] = me[ 1 ] * scaleX;
  		te[ 2 ] = me[ 2 ] * scaleX;
  		te[ 3 ] = 0;

  		te[ 4 ] = me[ 4 ] * scaleY;
  		te[ 5 ] = me[ 5 ] * scaleY;
  		te[ 6 ] = me[ 6 ] * scaleY;
  		te[ 7 ] = 0;

  		te[ 8 ] = me[ 8 ] * scaleZ;
  		te[ 9 ] = me[ 9 ] * scaleZ;
  		te[ 10 ] = me[ 10 ] * scaleZ;
  		te[ 11 ] = 0;

  		te[ 12 ] = 0;
  		te[ 13 ] = 0;
  		te[ 14 ] = 0;
  		te[ 15 ] = 1;

  		return this;

  	},

  	makeRotationFromEuler: function ( euler ) {

  		if ( ! ( euler && euler.isEuler ) ) {

  			console.error( 'THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );

  		}

  		var te = this.elements;

  		var x = euler.x, y = euler.y, z = euler.z;
  		var a = Math.cos( x ), b = Math.sin( x );
  		var c = Math.cos( y ), d = Math.sin( y );
  		var e = Math.cos( z ), f = Math.sin( z );

  		if ( euler.order === 'XYZ' ) {

  			var ae = a * e, af = a * f, be = b * e, bf = b * f;

  			te[ 0 ] = c * e;
  			te[ 4 ] = - c * f;
  			te[ 8 ] = d;

  			te[ 1 ] = af + be * d;
  			te[ 5 ] = ae - bf * d;
  			te[ 9 ] = - b * c;

  			te[ 2 ] = bf - ae * d;
  			te[ 6 ] = be + af * d;
  			te[ 10 ] = a * c;

  		} else if ( euler.order === 'YXZ' ) {

  			var ce = c * e, cf = c * f, de = d * e, df = d * f;

  			te[ 0 ] = ce + df * b;
  			te[ 4 ] = de * b - cf;
  			te[ 8 ] = a * d;

  			te[ 1 ] = a * f;
  			te[ 5 ] = a * e;
  			te[ 9 ] = - b;

  			te[ 2 ] = cf * b - de;
  			te[ 6 ] = df + ce * b;
  			te[ 10 ] = a * c;

  		} else if ( euler.order === 'ZXY' ) {

  			var ce$1 = c * e, cf$1 = c * f, de$1 = d * e, df$1 = d * f;

  			te[ 0 ] = ce$1 - df$1 * b;
  			te[ 4 ] = - a * f;
  			te[ 8 ] = de$1 + cf$1 * b;

  			te[ 1 ] = cf$1 + de$1 * b;
  			te[ 5 ] = a * e;
  			te[ 9 ] = df$1 - ce$1 * b;

  			te[ 2 ] = - a * d;
  			te[ 6 ] = b;
  			te[ 10 ] = a * c;

  		} else if ( euler.order === 'ZYX' ) {

  			var ae$1 = a * e, af$1 = a * f, be$1 = b * e, bf$1 = b * f;

  			te[ 0 ] = c * e;
  			te[ 4 ] = be$1 * d - af$1;
  			te[ 8 ] = ae$1 * d + bf$1;

  			te[ 1 ] = c * f;
  			te[ 5 ] = bf$1 * d + ae$1;
  			te[ 9 ] = af$1 * d - be$1;

  			te[ 2 ] = - d;
  			te[ 6 ] = b * c;
  			te[ 10 ] = a * c;

  		} else if ( euler.order === 'YZX' ) {

  			var ac = a * c, ad = a * d, bc = b * c, bd = b * d;

  			te[ 0 ] = c * e;
  			te[ 4 ] = bd - ac * f;
  			te[ 8 ] = bc * f + ad;

  			te[ 1 ] = f;
  			te[ 5 ] = a * e;
  			te[ 9 ] = - b * e;

  			te[ 2 ] = - d * e;
  			te[ 6 ] = ad * f + bc;
  			te[ 10 ] = ac - bd * f;

  		} else if ( euler.order === 'XZY' ) {

  			var ac$1 = a * c, ad$1 = a * d, bc$1 = b * c, bd$1 = b * d;

  			te[ 0 ] = c * e;
  			te[ 4 ] = - f;
  			te[ 8 ] = d * e;

  			te[ 1 ] = ac$1 * f + bd$1;
  			te[ 5 ] = a * e;
  			te[ 9 ] = ad$1 * f - bc$1;

  			te[ 2 ] = bc$1 * f - ad$1;
  			te[ 6 ] = b * e;
  			te[ 10 ] = bd$1 * f + ac$1;

  		}

  		// bottom row
  		te[ 3 ] = 0;
  		te[ 7 ] = 0;
  		te[ 11 ] = 0;

  		// last column
  		te[ 12 ] = 0;
  		te[ 13 ] = 0;
  		te[ 14 ] = 0;
  		te[ 15 ] = 1;

  		return this;

  	},

  	makeRotationFromQuaternion: function ( q ) {

  		return this.compose( _zero, q, _one );

  	},

  	lookAt: function ( eye, target, up ) {

  		var te = this.elements;

  		_z.subVectors( eye, target );

  		if ( _z.lengthSq() === 0 ) {

  			// eye and target are in the same position

  			_z.z = 1;

  		}

  		_z.normalize();
  		_x.crossVectors( up, _z );

  		if ( _x.lengthSq() === 0 ) {

  			// up and z are parallel

  			if ( Math.abs( up.z ) === 1 ) {

  				_z.x += 0.0001;

  			} else {

  				_z.z += 0.0001;

  			}

  			_z.normalize();
  			_x.crossVectors( up, _z );

  		}

  		_x.normalize();
  		_y.crossVectors( _z, _x );

  		te[ 0 ] = _x.x; te[ 4 ] = _y.x; te[ 8 ] = _z.x;
  		te[ 1 ] = _x.y; te[ 5 ] = _y.y; te[ 9 ] = _z.y;
  		te[ 2 ] = _x.z; te[ 6 ] = _y.z; te[ 10 ] = _z.z;

  		return this;

  	},

  	multiply: function ( m, n ) {

  		if ( n !== undefined ) {

  			console.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );
  			return this.multiplyMatrices( m, n );

  		}

  		return this.multiplyMatrices( this, m );

  	},

  	premultiply: function ( m ) {

  		return this.multiplyMatrices( m, this );

  	},

  	multiplyMatrices: function ( a, b ) {

  		var ae = a.elements;
  		var be = b.elements;
  		var te = this.elements;

  		var a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];
  		var a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];
  		var a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];
  		var a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];

  		var b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];
  		var b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];
  		var b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];
  		var b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];

  		te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
  		te[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
  		te[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
  		te[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;

  		te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
  		te[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
  		te[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
  		te[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;

  		te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
  		te[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
  		te[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
  		te[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;

  		te[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
  		te[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
  		te[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
  		te[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;

  		return this;

  	},

  	multiplyScalar: function ( s ) {

  		var te = this.elements;

  		te[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;
  		te[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;
  		te[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;
  		te[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;

  		return this;

  	},

  	determinant: function () {

  		var te = this.elements;

  		var n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];
  		var n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];
  		var n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];
  		var n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];

  		//TODO: make this more efficient
  		//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )

  		return (
  			n41 * (
  				+ n14 * n23 * n32
  				 - n13 * n24 * n32
  				 - n14 * n22 * n33
  				 + n12 * n24 * n33
  				 + n13 * n22 * n34
  				 - n12 * n23 * n34
  			) +
  			n42 * (
  				+ n11 * n23 * n34
  				 - n11 * n24 * n33
  				 + n14 * n21 * n33
  				 - n13 * n21 * n34
  				 + n13 * n24 * n31
  				 - n14 * n23 * n31
  			) +
  			n43 * (
  				+ n11 * n24 * n32
  				 - n11 * n22 * n34
  				 - n14 * n21 * n32
  				 + n12 * n21 * n34
  				 + n14 * n22 * n31
  				 - n12 * n24 * n31
  			) +
  			n44 * (
  				- n13 * n22 * n31
  				 - n11 * n23 * n32
  				 + n11 * n22 * n33
  				 + n13 * n21 * n32
  				 - n12 * n21 * n33
  				 + n12 * n23 * n31
  			)

  		);

  	},

  	transpose: function () {

  		var te = this.elements;
  		var tmp;

  		tmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;
  		tmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;
  		tmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;

  		tmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;
  		tmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;
  		tmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;

  		return this;

  	},

  	setPosition: function ( x, y, z ) {

  		var te = this.elements;

  		if ( x.isVector3 ) {

  			te[ 12 ] = x.x;
  			te[ 13 ] = x.y;
  			te[ 14 ] = x.z;

  		} else {

  			te[ 12 ] = x;
  			te[ 13 ] = y;
  			te[ 14 ] = z;

  		}

  		return this;

  	},

  	getInverse: function ( m, throwOnDegenerate ) {

  		if ( throwOnDegenerate !== undefined ) {

  			console.warn( "THREE.Matrix4: .getInverse() can no longer be configured to throw on degenerate." );

  		}

  		// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
  		var te = this.elements,
  			me = m.elements,

  			n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],
  			n12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],
  			n13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],
  			n14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],

  			t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,
  			t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,
  			t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,
  			t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;

  		var det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;

  		if ( det === 0 ) { return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ); }

  		var detInv = 1 / det;

  		te[ 0 ] = t11 * detInv;
  		te[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;
  		te[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;
  		te[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;

  		te[ 4 ] = t12 * detInv;
  		te[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;
  		te[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;
  		te[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;

  		te[ 8 ] = t13 * detInv;
  		te[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;
  		te[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;
  		te[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;

  		te[ 12 ] = t14 * detInv;
  		te[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;
  		te[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;
  		te[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;

  		return this;

  	},

  	scale: function ( v ) {

  		var te = this.elements;
  		var x = v.x, y = v.y, z = v.z;

  		te[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;
  		te[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;
  		te[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;
  		te[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;

  		return this;

  	},

  	getMaxScaleOnAxis: function () {

  		var te = this.elements;

  		var scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];
  		var scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];
  		var scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];

  		return Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );

  	},

  	makeTranslation: function ( x, y, z ) {

  		this.set(

  			1, 0, 0, x,
  			0, 1, 0, y,
  			0, 0, 1, z,
  			0, 0, 0, 1

  		);

  		return this;

  	},

  	makeRotationX: function ( theta ) {

  		var c = Math.cos( theta ), s = Math.sin( theta );

  		this.set(

  			1, 0, 0, 0,
  			0, c, - s, 0,
  			0, s, c, 0,
  			0, 0, 0, 1

  		);

  		return this;

  	},

  	makeRotationY: function ( theta ) {

  		var c = Math.cos( theta ), s = Math.sin( theta );

  		this.set(

  			 c, 0, s, 0,
  			 0, 1, 0, 0,
  			- s, 0, c, 0,
  			 0, 0, 0, 1

  		);

  		return this;

  	},

  	makeRotationZ: function ( theta ) {

  		var c = Math.cos( theta ), s = Math.sin( theta );

  		this.set(

  			c, - s, 0, 0,
  			s, c, 0, 0,
  			0, 0, 1, 0,
  			0, 0, 0, 1

  		);

  		return this;

  	},

  	makeRotationAxis: function ( axis, angle ) {

  		// Based on http://www.gamedev.net/reference/articles/article1199.asp

  		var c = Math.cos( angle );
  		var s = Math.sin( angle );
  		var t = 1 - c;
  		var x = axis.x, y = axis.y, z = axis.z;
  		var tx = t * x, ty = t * y;

  		this.set(

  			tx * x + c, tx * y - s * z, tx * z + s * y, 0,
  			tx * y + s * z, ty * y + c, ty * z - s * x, 0,
  			tx * z - s * y, ty * z + s * x, t * z * z + c, 0,
  			0, 0, 0, 1

  		);

  		 return this;

  	},

  	makeScale: function ( x, y, z ) {

  		this.set(

  			x, 0, 0, 0,
  			0, y, 0, 0,
  			0, 0, z, 0,
  			0, 0, 0, 1

  		);

  		return this;

  	},

  	makeShear: function ( x, y, z ) {

  		this.set(

  			1, y, z, 0,
  			x, 1, z, 0,
  			x, y, 1, 0,
  			0, 0, 0, 1

  		);

  		return this;

  	},

  	compose: function ( position, quaternion, scale ) {

  		var te = this.elements;

  		var x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;
  		var x2 = x + x,	y2 = y + y, z2 = z + z;
  		var xx = x * x2, xy = x * y2, xz = x * z2;
  		var yy = y * y2, yz = y * z2, zz = z * z2;
  		var wx = w * x2, wy = w * y2, wz = w * z2;

  		var sx = scale.x, sy = scale.y, sz = scale.z;

  		te[ 0 ] = ( 1 - ( yy + zz ) ) * sx;
  		te[ 1 ] = ( xy + wz ) * sx;
  		te[ 2 ] = ( xz - wy ) * sx;
  		te[ 3 ] = 0;

  		te[ 4 ] = ( xy - wz ) * sy;
  		te[ 5 ] = ( 1 - ( xx + zz ) ) * sy;
  		te[ 6 ] = ( yz + wx ) * sy;
  		te[ 7 ] = 0;

  		te[ 8 ] = ( xz + wy ) * sz;
  		te[ 9 ] = ( yz - wx ) * sz;
  		te[ 10 ] = ( 1 - ( xx + yy ) ) * sz;
  		te[ 11 ] = 0;

  		te[ 12 ] = position.x;
  		te[ 13 ] = position.y;
  		te[ 14 ] = position.z;
  		te[ 15 ] = 1;

  		return this;

  	},

  	decompose: function ( position, quaternion, scale ) {

  		var te = this.elements;

  		var sx = _v1.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();
  		var sy = _v1.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();
  		var sz = _v1.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();

  		// if determine is negative, we need to invert one scale
  		var det = this.determinant();
  		if ( det < 0 ) { sx = - sx; }

  		position.x = te[ 12 ];
  		position.y = te[ 13 ];
  		position.z = te[ 14 ];

  		// scale the rotation part
  		_m1.copy( this );

  		var invSX = 1 / sx;
  		var invSY = 1 / sy;
  		var invSZ = 1 / sz;

  		_m1.elements[ 0 ] *= invSX;
  		_m1.elements[ 1 ] *= invSX;
  		_m1.elements[ 2 ] *= invSX;

  		_m1.elements[ 4 ] *= invSY;
  		_m1.elements[ 5 ] *= invSY;
  		_m1.elements[ 6 ] *= invSY;

  		_m1.elements[ 8 ] *= invSZ;
  		_m1.elements[ 9 ] *= invSZ;
  		_m1.elements[ 10 ] *= invSZ;

  		quaternion.setFromRotationMatrix( _m1 );

  		scale.x = sx;
  		scale.y = sy;
  		scale.z = sz;

  		return this;

  	},

  	makePerspective: function ( left, right, top, bottom, near, far ) {

  		if ( far === undefined ) {

  			console.warn( 'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );

  		}

  		var te = this.elements;
  		var x = 2 * near / ( right - left );
  		var y = 2 * near / ( top - bottom );

  		var a = ( right + left ) / ( right - left );
  		var b = ( top + bottom ) / ( top - bottom );
  		var c = - ( far + near ) / ( far - near );
  		var d = - 2 * far * near / ( far - near );

  		te[ 0 ] = x;	te[ 4 ] = 0;	te[ 8 ] = a;	te[ 12 ] = 0;
  		te[ 1 ] = 0;	te[ 5 ] = y;	te[ 9 ] = b;	te[ 13 ] = 0;
  		te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = c;	te[ 14 ] = d;
  		te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = - 1;	te[ 15 ] = 0;

  		return this;

  	},

  	makeOrthographic: function ( left, right, top, bottom, near, far ) {

  		var te = this.elements;
  		var w = 1.0 / ( right - left );
  		var h = 1.0 / ( top - bottom );
  		var p = 1.0 / ( far - near );

  		var x = ( right + left ) * w;
  		var y = ( top + bottom ) * h;
  		var z = ( far + near ) * p;

  		te[ 0 ] = 2 * w;	te[ 4 ] = 0;	te[ 8 ] = 0;	te[ 12 ] = - x;
  		te[ 1 ] = 0;	te[ 5 ] = 2 * h;	te[ 9 ] = 0;	te[ 13 ] = - y;
  		te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = - 2 * p;	te[ 14 ] = - z;
  		te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = 0;	te[ 15 ] = 1;

  		return this;

  	},

  	equals: function ( matrix ) {

  		var te = this.elements;
  		var me = matrix.elements;

  		for ( var i = 0; i < 16; i ++ ) {

  			if ( te[ i ] !== me[ i ] ) { return false; }

  		}

  		return true;

  	},

  	fromArray: function ( array, offset ) {

  		if ( offset === undefined ) { offset = 0; }

  		for ( var i = 0; i < 16; i ++ ) {

  			this.elements[ i ] = array[ i + offset ];

  		}

  		return this;

  	},

  	toArray: function ( array, offset ) {

  		if ( array === undefined ) { array = []; }
  		if ( offset === undefined ) { offset = 0; }

  		var te = this.elements;

  		array[ offset ] = te[ 0 ];
  		array[ offset + 1 ] = te[ 1 ];
  		array[ offset + 2 ] = te[ 2 ];
  		array[ offset + 3 ] = te[ 3 ];

  		array[ offset + 4 ] = te[ 4 ];
  		array[ offset + 5 ] = te[ 5 ];
  		array[ offset + 6 ] = te[ 6 ];
  		array[ offset + 7 ] = te[ 7 ];

  		array[ offset + 8 ] = te[ 8 ];
  		array[ offset + 9 ] = te[ 9 ];
  		array[ offset + 10 ] = te[ 10 ];
  		array[ offset + 11 ] = te[ 11 ];

  		array[ offset + 12 ] = te[ 12 ];
  		array[ offset + 13 ] = te[ 13 ];
  		array[ offset + 14 ] = te[ 14 ];
  		array[ offset + 15 ] = te[ 15 ];

  		return array;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author WestLangley / http://github.com/WestLangley
   * @author bhouston / http://clara.io
   */

  var _matrix = new Matrix4();
  var _quaternion$1 = new Quaternion();

  function Euler( x, y, z, order ) {
  	if ( x === void 0 ) x = 0;
  	if ( y === void 0 ) y = 0;
  	if ( z === void 0 ) z = 0;
  	if ( order === void 0 ) order = Euler.DefaultOrder;


  	this._x = x;
  	this._y = y;
  	this._z = z;
  	this._order = order;

  }

  Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];

  Euler.DefaultOrder = 'XYZ';

  Object.defineProperties( Euler.prototype, {

  	x: {

  		get: function () {

  			return this._x;

  		},

  		set: function ( value ) {

  			this._x = value;
  			this._onChangeCallback();

  		}

  	},

  	y: {

  		get: function () {

  			return this._y;

  		},

  		set: function ( value ) {

  			this._y = value;
  			this._onChangeCallback();

  		}

  	},

  	z: {

  		get: function () {

  			return this._z;

  		},

  		set: function ( value ) {

  			this._z = value;
  			this._onChangeCallback();

  		}

  	},

  	order: {

  		get: function () {

  			return this._order;

  		},

  		set: function ( value ) {

  			this._order = value;
  			this._onChangeCallback();

  		}

  	}

  } );

  Object.assign( Euler.prototype, {

  	isEuler: true,

  	set: function ( x, y, z, order ) {

  		this._x = x;
  		this._y = y;
  		this._z = z;
  		this._order = order || this._order;

  		this._onChangeCallback();

  		return this;

  	},

  	clone: function () {

  		return new this.constructor( this._x, this._y, this._z, this._order );

  	},

  	copy: function ( euler ) {

  		this._x = euler._x;
  		this._y = euler._y;
  		this._z = euler._z;
  		this._order = euler._order;

  		this._onChangeCallback();

  		return this;

  	},

  	setFromRotationMatrix: function ( m, order, update ) {

  		var clamp = MathUtils.clamp;

  		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

  		var te = m.elements;
  		var m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];
  		var m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];
  		var m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

  		order = order || this._order;

  		switch ( order ) {

  			case 'XYZ':

  				this._y = Math.asin( clamp( m13, - 1, 1 ) );

  				if ( Math.abs( m13 ) < 0.9999999 ) {

  					this._x = Math.atan2( - m23, m33 );
  					this._z = Math.atan2( - m12, m11 );

  				} else {

  					this._x = Math.atan2( m32, m22 );
  					this._z = 0;

  				}

  				break;

  			case 'YXZ':

  				this._x = Math.asin( - clamp( m23, - 1, 1 ) );

  				if ( Math.abs( m23 ) < 0.9999999 ) {

  					this._y = Math.atan2( m13, m33 );
  					this._z = Math.atan2( m21, m22 );

  				} else {

  					this._y = Math.atan2( - m31, m11 );
  					this._z = 0;

  				}

  				break;

  			case 'ZXY':

  				this._x = Math.asin( clamp( m32, - 1, 1 ) );

  				if ( Math.abs( m32 ) < 0.9999999 ) {

  					this._y = Math.atan2( - m31, m33 );
  					this._z = Math.atan2( - m12, m22 );

  				} else {

  					this._y = 0;
  					this._z = Math.atan2( m21, m11 );

  				}

  				break;

  			case 'ZYX':

  				this._y = Math.asin( - clamp( m31, - 1, 1 ) );

  				if ( Math.abs( m31 ) < 0.9999999 ) {

  					this._x = Math.atan2( m32, m33 );
  					this._z = Math.atan2( m21, m11 );

  				} else {

  					this._x = 0;
  					this._z = Math.atan2( - m12, m22 );

  				}

  				break;

  			case 'YZX':

  				this._z = Math.asin( clamp( m21, - 1, 1 ) );

  				if ( Math.abs( m21 ) < 0.9999999 ) {

  					this._x = Math.atan2( - m23, m22 );
  					this._y = Math.atan2( - m31, m11 );

  				} else {

  					this._x = 0;
  					this._y = Math.atan2( m13, m33 );

  				}

  				break;

  			case 'XZY':

  				this._z = Math.asin( - clamp( m12, - 1, 1 ) );

  				if ( Math.abs( m12 ) < 0.9999999 ) {

  					this._x = Math.atan2( m32, m22 );
  					this._y = Math.atan2( m13, m11 );

  				} else {

  					this._x = Math.atan2( - m23, m33 );
  					this._y = 0;

  				}

  				break;

  			default:

  				console.warn( 'THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order );

  		}

  		this._order = order;

  		if ( update !== false ) { this._onChangeCallback(); }

  		return this;

  	},

  	setFromQuaternion: function ( q, order, update ) {

  		_matrix.makeRotationFromQuaternion( q );

  		return this.setFromRotationMatrix( _matrix, order, update );

  	},

  	setFromVector3: function ( v, order ) {

  		return this.set( v.x, v.y, v.z, order || this._order );

  	},

  	reorder: function ( newOrder ) {

  		// WARNING: this discards revolution information -bhouston

  		_quaternion$1.setFromEuler( this );

  		return this.setFromQuaternion( _quaternion$1, newOrder );

  	},

  	equals: function ( euler ) {

  		return ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );

  	},

  	fromArray: function ( array ) {

  		this._x = array[ 0 ];
  		this._y = array[ 1 ];
  		this._z = array[ 2 ];
  		if ( array[ 3 ] !== undefined ) { this._order = array[ 3 ]; }

  		this._onChangeCallback();

  		return this;

  	},

  	toArray: function ( array, offset ) {

  		if ( array === undefined ) { array = []; }
  		if ( offset === undefined ) { offset = 0; }

  		array[ offset ] = this._x;
  		array[ offset + 1 ] = this._y;
  		array[ offset + 2 ] = this._z;
  		array[ offset + 3 ] = this._order;

  		return array;

  	},

  	toVector3: function ( optionalResult ) {

  		if ( optionalResult ) {

  			return optionalResult.set( this._x, this._y, this._z );

  		} else {

  			return new Vector3( this._x, this._y, this._z );

  		}

  	},

  	_onChange: function ( callback ) {

  		this._onChangeCallback = callback;

  		return this;

  	},

  	_onChangeCallback: function () {}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function Layers() {

  	this.mask = 1 | 0;

  }

  Object.assign( Layers.prototype, {

  	set: function ( channel ) {

  		this.mask = 1 << channel | 0;

  	},

  	enable: function ( channel ) {

  		this.mask |= 1 << channel | 0;

  	},

  	enableAll: function () {

  		this.mask = 0xffffffff | 0;

  	},

  	toggle: function ( channel ) {

  		this.mask ^= 1 << channel | 0;

  	},

  	disable: function ( channel ) {

  		this.mask &= ~ ( 1 << channel | 0 );

  	},

  	disableAll: function () {

  		this.mask = 0;

  	},

  	test: function ( layers ) {

  		return ( this.mask & layers.mask ) !== 0;

  	}

  } );

  var _object3DId = 0;

  var _v1$1 = new Vector3();
  var _q1 = new Quaternion();
  var _m1$1 = new Matrix4();
  var _target = new Vector3();

  var _position = new Vector3();
  var _scale = new Vector3();
  var _quaternion$2 = new Quaternion();

  var _xAxis = new Vector3( 1, 0, 0 );
  var _yAxis = new Vector3( 0, 1, 0 );
  var _zAxis = new Vector3( 0, 0, 1 );

  var _addedEvent = { type: 'added' };
  var _removedEvent = { type: 'removed' };

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author mikael emtinger / http://gomo.se/
   * @author alteredq / http://alteredqualia.com/
   * @author WestLangley / http://github.com/WestLangley
   * @author elephantatwork / www.elephantatwork.ch
   */

  function Object3D() {

  	Object.defineProperty( this, 'id', { value: _object3DId ++ } );

  	this.uuid = MathUtils.generateUUID();

  	this.name = '';
  	this.type = 'Object3D';

  	this.parent = null;
  	this.children = [];

  	this.up = Object3D.DefaultUp.clone();

  	var position = new Vector3();
  	var rotation = new Euler();
  	var quaternion = new Quaternion();
  	var scale = new Vector3( 1, 1, 1 );

  	function onRotationChange() {

  		quaternion.setFromEuler( rotation, false );

  	}

  	function onQuaternionChange() {

  		rotation.setFromQuaternion( quaternion, undefined, false );

  	}

  	rotation._onChange( onRotationChange );
  	quaternion._onChange( onQuaternionChange );

  	Object.defineProperties( this, {
  		position: {
  			configurable: true,
  			enumerable: true,
  			value: position
  		},
  		rotation: {
  			configurable: true,
  			enumerable: true,
  			value: rotation
  		},
  		quaternion: {
  			configurable: true,
  			enumerable: true,
  			value: quaternion
  		},
  		scale: {
  			configurable: true,
  			enumerable: true,
  			value: scale
  		},
  		modelViewMatrix: {
  			value: new Matrix4()
  		},
  		normalMatrix: {
  			value: new Matrix3()
  		}
  	} );

  	this.matrix = new Matrix4();
  	this.matrixWorld = new Matrix4();

  	this.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;
  	this.matrixWorldNeedsUpdate = false;

  	this.layers = new Layers();
  	this.visible = true;

  	this.castShadow = false;
  	this.receiveShadow = false;

  	this.frustumCulled = true;
  	this.renderOrder = 0;

  	this.userData = {};

  }

  Object3D.DefaultUp = new Vector3( 0, 1, 0 );
  Object3D.DefaultMatrixAutoUpdate = true;

  Object3D.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

  	constructor: Object3D,

  	isObject3D: true,

  	onBeforeRender: function () {},
  	onAfterRender: function () {},

  	applyMatrix4: function ( matrix ) {

  		if ( this.matrixAutoUpdate ) { this.updateMatrix(); }

  		this.matrix.premultiply( matrix );

  		this.matrix.decompose( this.position, this.quaternion, this.scale );

  	},

  	applyQuaternion: function ( q ) {

  		this.quaternion.premultiply( q );

  		return this;

  	},

  	setRotationFromAxisAngle: function ( axis, angle ) {

  		// assumes axis is normalized

  		this.quaternion.setFromAxisAngle( axis, angle );

  	},

  	setRotationFromEuler: function ( euler ) {

  		this.quaternion.setFromEuler( euler, true );

  	},

  	setRotationFromMatrix: function ( m ) {

  		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

  		this.quaternion.setFromRotationMatrix( m );

  	},

  	setRotationFromQuaternion: function ( q ) {

  		// assumes q is normalized

  		this.quaternion.copy( q );

  	},

  	rotateOnAxis: function ( axis, angle ) {

  		// rotate object on axis in object space
  		// axis is assumed to be normalized

  		_q1.setFromAxisAngle( axis, angle );

  		this.quaternion.multiply( _q1 );

  		return this;

  	},

  	rotateOnWorldAxis: function ( axis, angle ) {

  		// rotate object on axis in world space
  		// axis is assumed to be normalized
  		// method assumes no rotated parent

  		_q1.setFromAxisAngle( axis, angle );

  		this.quaternion.premultiply( _q1 );

  		return this;

  	},

  	rotateX: function ( angle ) {

  		return this.rotateOnAxis( _xAxis, angle );

  	},

  	rotateY: function ( angle ) {

  		return this.rotateOnAxis( _yAxis, angle );

  	},

  	rotateZ: function ( angle ) {

  		return this.rotateOnAxis( _zAxis, angle );

  	},

  	translateOnAxis: function ( axis, distance ) {

  		// translate object by distance along axis in object space
  		// axis is assumed to be normalized

  		_v1$1.copy( axis ).applyQuaternion( this.quaternion );

  		this.position.add( _v1$1.multiplyScalar( distance ) );

  		return this;

  	},

  	translateX: function ( distance ) {

  		return this.translateOnAxis( _xAxis, distance );

  	},

  	translateY: function ( distance ) {

  		return this.translateOnAxis( _yAxis, distance );

  	},

  	translateZ: function ( distance ) {

  		return this.translateOnAxis( _zAxis, distance );

  	},

  	localToWorld: function ( vector ) {

  		return vector.applyMatrix4( this.matrixWorld );

  	},

  	worldToLocal: function ( vector ) {

  		return vector.applyMatrix4( _m1$1.getInverse( this.matrixWorld ) );

  	},

  	lookAt: function ( x, y, z ) {

  		// This method does not support objects having non-uniformly-scaled parent(s)

  		if ( x.isVector3 ) {

  			_target.copy( x );

  		} else {

  			_target.set( x, y, z );

  		}

  		var parent = this.parent;

  		this.updateWorldMatrix( true, false );

  		_position.setFromMatrixPosition( this.matrixWorld );

  		if ( this.isCamera || this.isLight ) {

  			_m1$1.lookAt( _position, _target, this.up );

  		} else {

  			_m1$1.lookAt( _target, _position, this.up );

  		}

  		this.quaternion.setFromRotationMatrix( _m1$1 );

  		if ( parent ) {

  			_m1$1.extractRotation( parent.matrixWorld );
  			_q1.setFromRotationMatrix( _m1$1 );
  			this.quaternion.premultiply( _q1.inverse() );

  		}

  	},

  	add: function ( object ) {
  		var arguments$1 = arguments;


  		if ( arguments.length > 1 ) {

  			for ( var i = 0; i < arguments.length; i ++ ) {

  				this.add( arguments$1[ i ] );

  			}

  			return this;

  		}

  		if ( object === this ) {

  			console.error( "THREE.Object3D.add: object can't be added as a child of itself.", object );
  			return this;

  		}

  		if ( ( object && object.isObject3D ) ) {

  			if ( object.parent !== null ) {

  				object.parent.remove( object );

  			}

  			object.parent = this;
  			this.children.push( object );

  			object.dispatchEvent( _addedEvent );

  		} else {

  			console.error( "THREE.Object3D.add: object not an instance of THREE.Object3D.", object );

  		}

  		return this;

  	},

  	remove: function ( object ) {
  		var arguments$1 = arguments;


  		if ( arguments.length > 1 ) {

  			for ( var i = 0; i < arguments.length; i ++ ) {

  				this.remove( arguments$1[ i ] );

  			}

  			return this;

  		}

  		var index = this.children.indexOf( object );

  		if ( index !== - 1 ) {

  			object.parent = null;
  			this.children.splice( index, 1 );

  			object.dispatchEvent( _removedEvent );

  		}

  		return this;

  	},

  	attach: function ( object ) {

  		// adds object as a child of this, while maintaining the object's world transform

  		this.updateWorldMatrix( true, false );

  		_m1$1.getInverse( this.matrixWorld );

  		if ( object.parent !== null ) {

  			object.parent.updateWorldMatrix( true, false );

  			_m1$1.multiply( object.parent.matrixWorld );

  		}

  		object.applyMatrix4( _m1$1 );

  		object.updateWorldMatrix( false, false );

  		this.add( object );

  		return this;

  	},

  	getObjectById: function ( id ) {

  		return this.getObjectByProperty( 'id', id );

  	},

  	getObjectByName: function ( name ) {

  		return this.getObjectByProperty( 'name', name );

  	},

  	getObjectByProperty: function ( name, value ) {

  		if ( this[ name ] === value ) { return this; }

  		for ( var i = 0, l = this.children.length; i < l; i ++ ) {

  			var child = this.children[ i ];
  			var object = child.getObjectByProperty( name, value );

  			if ( object !== undefined ) {

  				return object;

  			}

  		}

  		return undefined;

  	},

  	getWorldPosition: function ( target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Object3D: .getWorldPosition() target is now required' );
  			target = new Vector3();

  		}

  		this.updateMatrixWorld( true );

  		return target.setFromMatrixPosition( this.matrixWorld );

  	},

  	getWorldQuaternion: function ( target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Object3D: .getWorldQuaternion() target is now required' );
  			target = new Quaternion();

  		}

  		this.updateMatrixWorld( true );

  		this.matrixWorld.decompose( _position, target, _scale );

  		return target;

  	},

  	getWorldScale: function ( target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Object3D: .getWorldScale() target is now required' );
  			target = new Vector3();

  		}

  		this.updateMatrixWorld( true );

  		this.matrixWorld.decompose( _position, _quaternion$2, target );

  		return target;

  	},

  	getWorldDirection: function ( target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Object3D: .getWorldDirection() target is now required' );
  			target = new Vector3();

  		}

  		this.updateMatrixWorld( true );

  		var e = this.matrixWorld.elements;

  		return target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();

  	},

  	raycast: function () {},

  	traverse: function ( callback ) {

  		callback( this );

  		var children = this.children;

  		for ( var i = 0, l = children.length; i < l; i ++ ) {

  			children[ i ].traverse( callback );

  		}

  	},

  	traverseVisible: function ( callback ) {

  		if ( this.visible === false ) { return; }

  		callback( this );

  		var children = this.children;

  		for ( var i = 0, l = children.length; i < l; i ++ ) {

  			children[ i ].traverseVisible( callback );

  		}

  	},

  	traverseAncestors: function ( callback ) {

  		var parent = this.parent;

  		if ( parent !== null ) {

  			callback( parent );

  			parent.traverseAncestors( callback );

  		}

  	},

  	updateMatrix: function () {

  		this.matrix.compose( this.position, this.quaternion, this.scale );

  		this.matrixWorldNeedsUpdate = true;

  	},

  	updateMatrixWorld: function ( force ) {

  		if ( this.matrixAutoUpdate ) { this.updateMatrix(); }

  		if ( this.matrixWorldNeedsUpdate || force ) {

  			if ( this.parent === null ) {

  				this.matrixWorld.copy( this.matrix );

  			} else {

  				this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

  			}

  			this.matrixWorldNeedsUpdate = false;

  			force = true;

  		}

  		// update children

  		var children = this.children;

  		for ( var i = 0, l = children.length; i < l; i ++ ) {

  			children[ i ].updateMatrixWorld( force );

  		}

  	},

  	updateWorldMatrix: function ( updateParents, updateChildren ) {

  		var parent = this.parent;

  		if ( updateParents === true && parent !== null ) {

  			parent.updateWorldMatrix( true, false );

  		}

  		if ( this.matrixAutoUpdate ) { this.updateMatrix(); }

  		if ( this.parent === null ) {

  			this.matrixWorld.copy( this.matrix );

  		} else {

  			this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

  		}

  		// update children

  		if ( updateChildren === true ) {

  			var children = this.children;

  			for ( var i = 0, l = children.length; i < l; i ++ ) {

  				children[ i ].updateWorldMatrix( false, true );

  			}

  		}

  	},

  	toJSON: function ( meta ) {

  		// meta is a string when called from JSON.stringify
  		var isRootObject = ( meta === undefined || typeof meta === 'string' );

  		var output = {};

  		// meta is a hash used to collect geometries, materials.
  		// not providing it implies that this is the root object
  		// being serialized.
  		if ( isRootObject ) {

  			// initialize meta obj
  			meta = {
  				geometries: {},
  				materials: {},
  				textures: {},
  				images: {},
  				shapes: {}
  			};

  			output.metadata = {
  				version: 4.5,
  				type: 'Object',
  				generator: 'Object3D.toJSON'
  			};

  		}

  		// standard Object3D serialization

  		var object = {};

  		object.uuid = this.uuid;
  		object.type = this.type;

  		if ( this.name !== '' ) { object.name = this.name; }
  		if ( this.castShadow === true ) { object.castShadow = true; }
  		if ( this.receiveShadow === true ) { object.receiveShadow = true; }
  		if ( this.visible === false ) { object.visible = false; }
  		if ( this.frustumCulled === false ) { object.frustumCulled = false; }
  		if ( this.renderOrder !== 0 ) { object.renderOrder = this.renderOrder; }
  		if ( JSON.stringify( this.userData ) !== '{}' ) { object.userData = this.userData; }

  		object.layers = this.layers.mask;
  		object.matrix = this.matrix.toArray();

  		if ( this.matrixAutoUpdate === false ) { object.matrixAutoUpdate = false; }

  		// object specific properties

  		if ( this.isInstancedMesh ) {

  			object.type = 'InstancedMesh';
  			object.count = this.count;
  			object.instanceMatrix = this.instanceMatrix.toJSON();

  		}

  		//

  		function serialize( library, element ) {

  			if ( library[ element.uuid ] === undefined ) {

  				library[ element.uuid ] = element.toJSON( meta );

  			}

  			return element.uuid;

  		}

  		if ( this.isMesh || this.isLine || this.isPoints ) {

  			object.geometry = serialize( meta.geometries, this.geometry );

  			var parameters = this.geometry.parameters;

  			if ( parameters !== undefined && parameters.shapes !== undefined ) {

  				var shapes = parameters.shapes;

  				if ( Array.isArray( shapes ) ) {

  					for ( var i = 0, l = shapes.length; i < l; i ++ ) {

  						var shape = shapes[ i ];

  						serialize( meta.shapes, shape );

  					}

  				} else {

  					serialize( meta.shapes, shapes );

  				}

  			}

  		}

  		if ( this.material !== undefined ) {

  			if ( Array.isArray( this.material ) ) {

  				var uuids = [];

  				for ( var i$1 = 0, l$1 = this.material.length; i$1 < l$1; i$1 ++ ) {

  					uuids.push( serialize( meta.materials, this.material[ i$1 ] ) );

  				}

  				object.material = uuids;

  			} else {

  				object.material = serialize( meta.materials, this.material );

  			}

  		}

  		//

  		if ( this.children.length > 0 ) {

  			object.children = [];

  			for ( var i$2 = 0; i$2 < this.children.length; i$2 ++ ) {

  				object.children.push( this.children[ i$2 ].toJSON( meta ).object );

  			}

  		}

  		if ( isRootObject ) {

  			var geometries = extractFromCache( meta.geometries );
  			var materials = extractFromCache( meta.materials );
  			var textures = extractFromCache( meta.textures );
  			var images = extractFromCache( meta.images );
  			var shapes$1 = extractFromCache( meta.shapes );

  			if ( geometries.length > 0 ) { output.geometries = geometries; }
  			if ( materials.length > 0 ) { output.materials = materials; }
  			if ( textures.length > 0 ) { output.textures = textures; }
  			if ( images.length > 0 ) { output.images = images; }
  			if ( shapes$1.length > 0 ) { output.shapes = shapes$1; }

  		}

  		output.object = object;

  		return output;

  		// extract data from the cache hash
  		// remove metadata on each item
  		// and return as array
  		function extractFromCache( cache ) {

  			var values = [];
  			for ( var key in cache ) {

  				var data = cache[ key ];
  				delete data.metadata;
  				values.push( data );

  			}

  			return values;

  		}

  	},

  	clone: function ( recursive ) {

  		return new this.constructor().copy( this, recursive );

  	},

  	copy: function ( source, recursive ) {

  		if ( recursive === undefined ) { recursive = true; }

  		this.name = source.name;

  		this.up.copy( source.up );

  		this.position.copy( source.position );
  		this.quaternion.copy( source.quaternion );
  		this.scale.copy( source.scale );

  		this.matrix.copy( source.matrix );
  		this.matrixWorld.copy( source.matrixWorld );

  		this.matrixAutoUpdate = source.matrixAutoUpdate;
  		this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;

  		this.layers.mask = source.layers.mask;
  		this.visible = source.visible;

  		this.castShadow = source.castShadow;
  		this.receiveShadow = source.receiveShadow;

  		this.frustumCulled = source.frustumCulled;
  		this.renderOrder = source.renderOrder;

  		this.userData = JSON.parse( JSON.stringify( source.userData ) );

  		if ( recursive === true ) {

  			for ( var i = 0; i < source.children.length; i ++ ) {

  				var child = source.children[ i ];
  				this.add( child.clone() );

  			}

  		}

  		return this;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function Scene() {

  	Object3D.call( this );

  	this.type = 'Scene';

  	this.background = null;
  	this.environment = null;
  	this.fog = null;

  	this.overrideMaterial = null;

  	this.autoUpdate = true; // checked by the renderer

  	if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {

  		__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef

  	}

  }

  Scene.prototype = Object.assign( Object.create( Object3D.prototype ), {

  	constructor: Scene,

  	isScene: true,

  	copy: function ( source, recursive ) {

  		Object3D.prototype.copy.call( this, source, recursive );

  		if ( source.background !== null ) { this.background = source.background.clone(); }
  		if ( source.environment !== null ) { this.environment = source.environment.clone(); }
  		if ( source.fog !== null ) { this.fog = source.fog.clone(); }

  		if ( source.overrideMaterial !== null ) { this.overrideMaterial = source.overrideMaterial.clone(); }

  		this.autoUpdate = source.autoUpdate;
  		this.matrixAutoUpdate = source.matrixAutoUpdate;

  		return this;

  	},

  	toJSON: function ( meta ) {

  		var data = Object3D.prototype.toJSON.call( this, meta );

  		if ( this.background !== null ) { data.object.background = this.background.toJSON( meta ); }
  		if ( this.environment !== null ) { data.object.environment = this.environment.toJSON( meta ); }
  		if ( this.fog !== null ) { data.object.fog = this.fog.toJSON(); }

  		return data;

  	},

  	dispose: function () {

  		this.dispatchEvent( { type: 'dispose' } );

  	}

  } );

  var _points = [
  	new Vector3(),
  	new Vector3(),
  	new Vector3(),
  	new Vector3(),
  	new Vector3(),
  	new Vector3(),
  	new Vector3(),
  	new Vector3()
  ];

  var _vector$1 = new Vector3();

  var _box = new Box3();

  // triangle centered vertices

  var _v0 = new Vector3();
  var _v1$2 = new Vector3();
  var _v2 = new Vector3();

  // triangle edge vectors

  var _f0 = new Vector3();
  var _f1 = new Vector3();
  var _f2 = new Vector3();

  var _center = new Vector3();
  var _extents = new Vector3();
  var _triangleNormal = new Vector3();
  var _testAxis = new Vector3();

  /**
   * @author bhouston / http://clara.io
   * @author WestLangley / http://github.com/WestLangley
   */

  function Box3( min, max ) {

  	this.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );
  	this.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );

  }


  Object.assign( Box3.prototype, {

  	isBox3: true,

  	set: function ( min, max ) {

  		this.min.copy( min );
  		this.max.copy( max );

  		return this;

  	},

  	setFromArray: function ( array ) {

  		var minX = + Infinity;
  		var minY = + Infinity;
  		var minZ = + Infinity;

  		var maxX = - Infinity;
  		var maxY = - Infinity;
  		var maxZ = - Infinity;

  		for ( var i = 0, l = array.length; i < l; i += 3 ) {

  			var x = array[ i ];
  			var y = array[ i + 1 ];
  			var z = array[ i + 2 ];

  			if ( x < minX ) { minX = x; }
  			if ( y < minY ) { minY = y; }
  			if ( z < minZ ) { minZ = z; }

  			if ( x > maxX ) { maxX = x; }
  			if ( y > maxY ) { maxY = y; }
  			if ( z > maxZ ) { maxZ = z; }

  		}

  		this.min.set( minX, minY, minZ );
  		this.max.set( maxX, maxY, maxZ );

  		return this;

  	},

  	setFromBufferAttribute: function ( attribute ) {

  		var minX = + Infinity;
  		var minY = + Infinity;
  		var minZ = + Infinity;

  		var maxX = - Infinity;
  		var maxY = - Infinity;
  		var maxZ = - Infinity;

  		for ( var i = 0, l = attribute.count; i < l; i ++ ) {

  			var x = attribute.getX( i );
  			var y = attribute.getY( i );
  			var z = attribute.getZ( i );

  			if ( x < minX ) { minX = x; }
  			if ( y < minY ) { minY = y; }
  			if ( z < minZ ) { minZ = z; }

  			if ( x > maxX ) { maxX = x; }
  			if ( y > maxY ) { maxY = y; }
  			if ( z > maxZ ) { maxZ = z; }

  		}

  		this.min.set( minX, minY, minZ );
  		this.max.set( maxX, maxY, maxZ );

  		return this;

  	},

  	setFromPoints: function ( points ) {

  		this.makeEmpty();

  		for ( var i = 0, il = points.length; i < il; i ++ ) {

  			this.expandByPoint( points[ i ] );

  		}

  		return this;

  	},

  	setFromCenterAndSize: function ( center, size ) {

  		var halfSize = _vector$1.copy( size ).multiplyScalar( 0.5 );

  		this.min.copy( center ).sub( halfSize );
  		this.max.copy( center ).add( halfSize );

  		return this;

  	},

  	setFromObject: function ( object ) {

  		this.makeEmpty();

  		return this.expandByObject( object );

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	copy: function ( box ) {

  		this.min.copy( box.min );
  		this.max.copy( box.max );

  		return this;

  	},

  	makeEmpty: function () {

  		this.min.x = this.min.y = this.min.z = + Infinity;
  		this.max.x = this.max.y = this.max.z = - Infinity;

  		return this;

  	},

  	isEmpty: function () {

  		// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

  		return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );

  	},

  	getCenter: function ( target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Box3: .getCenter() target is now required' );
  			target = new Vector3();

  		}

  		return this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

  	},

  	getSize: function ( target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Box3: .getSize() target is now required' );
  			target = new Vector3();

  		}

  		return this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );

  	},

  	expandByPoint: function ( point ) {

  		this.min.min( point );
  		this.max.max( point );

  		return this;

  	},

  	expandByVector: function ( vector ) {

  		this.min.sub( vector );
  		this.max.add( vector );

  		return this;

  	},

  	expandByScalar: function ( scalar ) {

  		this.min.addScalar( - scalar );
  		this.max.addScalar( scalar );

  		return this;

  	},

  	expandByObject: function ( object ) {

  		// Computes the world-axis-aligned bounding box of an object (including its children),
  		// accounting for both the object's, and children's, world transforms

  		object.updateWorldMatrix( false, false );

  		var geometry = object.geometry;

  		if ( geometry !== undefined ) {

  			if ( geometry.boundingBox === null ) {

  				geometry.computeBoundingBox();

  			}

  			_box.copy( geometry.boundingBox );
  			_box.applyMatrix4( object.matrixWorld );

  			this.union( _box );

  		}

  		var children = object.children;

  		for ( var i = 0, l = children.length; i < l; i ++ ) {

  			this.expandByObject( children[ i ] );

  		}

  		return this;

  	},

  	containsPoint: function ( point ) {

  		return point.x < this.min.x || point.x > this.max.x ||
  			point.y < this.min.y || point.y > this.max.y ||
  			point.z < this.min.z || point.z > this.max.z ? false : true;

  	},

  	containsBox: function ( box ) {

  		return this.min.x <= box.min.x && box.max.x <= this.max.x &&
  			this.min.y <= box.min.y && box.max.y <= this.max.y &&
  			this.min.z <= box.min.z && box.max.z <= this.max.z;

  	},

  	getParameter: function ( point, target ) {

  		// This can potentially have a divide by zero if the box
  		// has a size dimension of 0.

  		if ( target === undefined ) {

  			console.warn( 'THREE.Box3: .getParameter() target is now required' );
  			target = new Vector3();

  		}

  		return target.set(
  			( point.x - this.min.x ) / ( this.max.x - this.min.x ),
  			( point.y - this.min.y ) / ( this.max.y - this.min.y ),
  			( point.z - this.min.z ) / ( this.max.z - this.min.z )
  		);

  	},

  	intersectsBox: function ( box ) {

  		// using 6 splitting planes to rule out intersections.
  		return box.max.x < this.min.x || box.min.x > this.max.x ||
  			box.max.y < this.min.y || box.min.y > this.max.y ||
  			box.max.z < this.min.z || box.min.z > this.max.z ? false : true;

  	},

  	intersectsSphere: function ( sphere ) {

  		// Find the point on the AABB closest to the sphere center.
  		this.clampPoint( sphere.center, _vector$1 );

  		// If that point is inside the sphere, the AABB and sphere intersect.
  		return _vector$1.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );

  	},

  	intersectsPlane: function ( plane ) {

  		// We compute the minimum and maximum dot product values. If those values
  		// are on the same side (back or front) of the plane, then there is no intersection.

  		var min, max;

  		if ( plane.normal.x > 0 ) {

  			min = plane.normal.x * this.min.x;
  			max = plane.normal.x * this.max.x;

  		} else {

  			min = plane.normal.x * this.max.x;
  			max = plane.normal.x * this.min.x;

  		}

  		if ( plane.normal.y > 0 ) {

  			min += plane.normal.y * this.min.y;
  			max += plane.normal.y * this.max.y;

  		} else {

  			min += plane.normal.y * this.max.y;
  			max += plane.normal.y * this.min.y;

  		}

  		if ( plane.normal.z > 0 ) {

  			min += plane.normal.z * this.min.z;
  			max += plane.normal.z * this.max.z;

  		} else {

  			min += plane.normal.z * this.max.z;
  			max += plane.normal.z * this.min.z;

  		}

  		return ( min <= - plane.constant && max >= - plane.constant );

  	},

  	intersectsTriangle: function ( triangle ) {

  		if ( this.isEmpty() ) {

  			return false;

  		}

  		// compute box center and extents
  		this.getCenter( _center );
  		_extents.subVectors( this.max, _center );

  		// translate triangle to aabb origin
  		_v0.subVectors( triangle.a, _center );
  		_v1$2.subVectors( triangle.b, _center );
  		_v2.subVectors( triangle.c, _center );

  		// compute edge vectors for triangle
  		_f0.subVectors( _v1$2, _v0 );
  		_f1.subVectors( _v2, _v1$2 );
  		_f2.subVectors( _v0, _v2 );

  		// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb
  		// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation
  		// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)
  		var axes = [
  			0, - _f0.z, _f0.y, 0, - _f1.z, _f1.y, 0, - _f2.z, _f2.y,
  			_f0.z, 0, - _f0.x, _f1.z, 0, - _f1.x, _f2.z, 0, - _f2.x,
  			- _f0.y, _f0.x, 0, - _f1.y, _f1.x, 0, - _f2.y, _f2.x, 0
  		];
  		if ( ! satForAxes( axes, _v0, _v1$2, _v2, _extents ) ) {

  			return false;

  		}

  		// test 3 face normals from the aabb
  		axes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];
  		if ( ! satForAxes( axes, _v0, _v1$2, _v2, _extents ) ) {

  			return false;

  		}

  		// finally testing the face normal of the triangle
  		// use already existing triangle edge vectors here
  		_triangleNormal.crossVectors( _f0, _f1 );
  		axes = [ _triangleNormal.x, _triangleNormal.y, _triangleNormal.z ];

  		return satForAxes( axes, _v0, _v1$2, _v2, _extents );

  	},

  	clampPoint: function ( point, target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Box3: .clampPoint() target is now required' );
  			target = new Vector3();

  		}

  		return target.copy( point ).clamp( this.min, this.max );

  	},

  	distanceToPoint: function ( point ) {

  		var clampedPoint = _vector$1.copy( point ).clamp( this.min, this.max );

  		return clampedPoint.sub( point ).length();

  	},

  	getBoundingSphere: function ( target ) {

  		if ( target === undefined ) {

  			console.error( 'THREE.Box3: .getBoundingSphere() target is now required' );
  			//target = new Sphere(); // removed to avoid cyclic dependency

  		}

  		this.getCenter( target.center );

  		target.radius = this.getSize( _vector$1 ).length() * 0.5;

  		return target;

  	},

  	intersect: function ( box ) {

  		this.min.max( box.min );
  		this.max.min( box.max );

  		// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.
  		if ( this.isEmpty() ) { this.makeEmpty(); }

  		return this;

  	},

  	union: function ( box ) {

  		this.min.min( box.min );
  		this.max.max( box.max );

  		return this;

  	},

  	applyMatrix4: function ( matrix ) {

  		// transform of empty box is an empty box.
  		if ( this.isEmpty() ) { return this; }

  		// NOTE: I am using a binary pattern to specify all 2^3 combinations below
  		_points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000
  		_points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001
  		_points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010
  		_points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011
  		_points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100
  		_points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101
  		_points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110
  		_points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111

  		this.setFromPoints( _points );

  		return this;

  	},

  	translate: function ( offset ) {

  		this.min.add( offset );
  		this.max.add( offset );

  		return this;

  	},

  	equals: function ( box ) {

  		return box.min.equals( this.min ) && box.max.equals( this.max );

  	}

  } );

  function satForAxes( axes, v0, v1, v2, extents ) {

  	for ( var i = 0, j = axes.length - 3; i <= j; i += 3 ) {

  		_testAxis.fromArray( axes, i );
  		// project the aabb onto the seperating axis
  		var r = extents.x * Math.abs( _testAxis.x ) + extents.y * Math.abs( _testAxis.y ) + extents.z * Math.abs( _testAxis.z );
  		// project all 3 vertices of the triangle onto the seperating axis
  		var p0 = v0.dot( _testAxis );
  		var p1 = v1.dot( _testAxis );
  		var p2 = v2.dot( _testAxis );
  		// actual test, basically see if either of the most extreme of the triangle points intersects r
  		if ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {

  			// points of the projected triangle are outside the projected half-length of the aabb
  			// the axis is seperating and we can exit
  			return false;

  		}

  	}

  	return true;

  }

  var _box$1 = new Box3();

  /**
   * @author bhouston / http://clara.io
   * @author mrdoob / http://mrdoob.com/
   */

  function Sphere( center, radius ) {

  	this.center = ( center !== undefined ) ? center : new Vector3();
  	this.radius = ( radius !== undefined ) ? radius : - 1;

  }

  Object.assign( Sphere.prototype, {

  	set: function ( center, radius ) {

  		this.center.copy( center );
  		this.radius = radius;

  		return this;

  	},

  	setFromPoints: function ( points, optionalCenter ) {

  		var center = this.center;

  		if ( optionalCenter !== undefined ) {

  			center.copy( optionalCenter );

  		} else {

  			_box$1.setFromPoints( points ).getCenter( center );

  		}

  		var maxRadiusSq = 0;

  		for ( var i = 0, il = points.length; i < il; i ++ ) {

  			maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );

  		}

  		this.radius = Math.sqrt( maxRadiusSq );

  		return this;

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	copy: function ( sphere ) {

  		this.center.copy( sphere.center );
  		this.radius = sphere.radius;

  		return this;

  	},

  	isEmpty: function () {

  		return ( this.radius < 0 );

  	},

  	makeEmpty: function () {

  		this.center.set( 0, 0, 0 );
  		this.radius = - 1;

  		return this;

  	},

  	containsPoint: function ( point ) {

  		return ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );

  	},

  	distanceToPoint: function ( point ) {

  		return ( point.distanceTo( this.center ) - this.radius );

  	},

  	intersectsSphere: function ( sphere ) {

  		var radiusSum = this.radius + sphere.radius;

  		return sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );

  	},

  	intersectsBox: function ( box ) {

  		return box.intersectsSphere( this );

  	},

  	intersectsPlane: function ( plane ) {

  		return Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;

  	},

  	clampPoint: function ( point, target ) {

  		var deltaLengthSq = this.center.distanceToSquared( point );

  		if ( target === undefined ) {

  			console.warn( 'THREE.Sphere: .clampPoint() target is now required' );
  			target = new Vector3();

  		}

  		target.copy( point );

  		if ( deltaLengthSq > ( this.radius * this.radius ) ) {

  			target.sub( this.center ).normalize();
  			target.multiplyScalar( this.radius ).add( this.center );

  		}

  		return target;

  	},

  	getBoundingBox: function ( target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Sphere: .getBoundingBox() target is now required' );
  			target = new Box3();

  		}

  		if ( this.isEmpty() ) {

  			// Empty sphere produces empty bounding box
  			target.makeEmpty();
  			return target;

  		}

  		target.set( this.center, this.center );
  		target.expandByScalar( this.radius );

  		return target;

  	},

  	applyMatrix4: function ( matrix ) {

  		this.center.applyMatrix4( matrix );
  		this.radius = this.radius * matrix.getMaxScaleOnAxis();

  		return this;

  	},

  	translate: function ( offset ) {

  		this.center.add( offset );

  		return this;

  	},

  	equals: function ( sphere ) {

  		return sphere.center.equals( this.center ) && ( sphere.radius === this.radius );

  	}

  } );

  var _vector$2 = new Vector3();
  var _segCenter = new Vector3();
  var _segDir = new Vector3();
  var _diff = new Vector3();

  var _edge1 = new Vector3();
  var _edge2 = new Vector3();
  var _normal = new Vector3();

  /**
   * @author bhouston / http://clara.io
   */

  function Ray( origin, direction ) {

  	this.origin = ( origin !== undefined ) ? origin : new Vector3();
  	this.direction = ( direction !== undefined ) ? direction : new Vector3( 0, 0, - 1 );

  }

  Object.assign( Ray.prototype, {

  	set: function ( origin, direction ) {

  		this.origin.copy( origin );
  		this.direction.copy( direction );

  		return this;

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	copy: function ( ray ) {

  		this.origin.copy( ray.origin );
  		this.direction.copy( ray.direction );

  		return this;

  	},

  	at: function ( t, target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Ray: .at() target is now required' );
  			target = new Vector3();

  		}

  		return target.copy( this.direction ).multiplyScalar( t ).add( this.origin );

  	},

  	lookAt: function ( v ) {

  		this.direction.copy( v ).sub( this.origin ).normalize();

  		return this;

  	},

  	recast: function ( t ) {

  		this.origin.copy( this.at( t, _vector$2 ) );

  		return this;

  	},

  	closestPointToPoint: function ( point, target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Ray: .closestPointToPoint() target is now required' );
  			target = new Vector3();

  		}

  		target.subVectors( point, this.origin );

  		var directionDistance = target.dot( this.direction );

  		if ( directionDistance < 0 ) {

  			return target.copy( this.origin );

  		}

  		return target.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

  	},

  	distanceToPoint: function ( point ) {

  		return Math.sqrt( this.distanceSqToPoint( point ) );

  	},

  	distanceSqToPoint: function ( point ) {

  		var directionDistance = _vector$2.subVectors( point, this.origin ).dot( this.direction );

  		// point behind the ray

  		if ( directionDistance < 0 ) {

  			return this.origin.distanceToSquared( point );

  		}

  		_vector$2.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

  		return _vector$2.distanceToSquared( point );

  	},

  	distanceSqToSegment: function ( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {

  		// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h
  		// It returns the min distance between the ray and the segment
  		// defined by v0 and v1
  		// It can also set two optional targets :
  		// - The closest point on the ray
  		// - The closest point on the segment

  		_segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );
  		_segDir.copy( v1 ).sub( v0 ).normalize();
  		_diff.copy( this.origin ).sub( _segCenter );

  		var segExtent = v0.distanceTo( v1 ) * 0.5;
  		var a01 = - this.direction.dot( _segDir );
  		var b0 = _diff.dot( this.direction );
  		var b1 = - _diff.dot( _segDir );
  		var c = _diff.lengthSq();
  		var det = Math.abs( 1 - a01 * a01 );
  		var s0, s1, sqrDist, extDet;

  		if ( det > 0 ) {

  			// The ray and segment are not parallel.

  			s0 = a01 * b1 - b0;
  			s1 = a01 * b0 - b1;
  			extDet = segExtent * det;

  			if ( s0 >= 0 ) {

  				if ( s1 >= - extDet ) {

  					if ( s1 <= extDet ) {

  						// region 0
  						// Minimum at interior points of ray and segment.

  						var invDet = 1 / det;
  						s0 *= invDet;
  						s1 *= invDet;
  						sqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;

  					} else {

  						// region 1

  						s1 = segExtent;
  						s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
  						sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

  					}

  				} else {

  					// region 5

  					s1 = - segExtent;
  					s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
  					sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

  				}

  			} else {

  				if ( s1 <= - extDet ) {

  					// region 4

  					s0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );
  					s1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
  					sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

  				} else if ( s1 <= extDet ) {

  					// region 3

  					s0 = 0;
  					s1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );
  					sqrDist = s1 * ( s1 + 2 * b1 ) + c;

  				} else {

  					// region 2

  					s0 = Math.max( 0, - ( a01 * segExtent + b0 ) );
  					s1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
  					sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

  				}

  			}

  		} else {

  			// Ray and segment are parallel.

  			s1 = ( a01 > 0 ) ? - segExtent : segExtent;
  			s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
  			sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

  		}

  		if ( optionalPointOnRay ) {

  			optionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );

  		}

  		if ( optionalPointOnSegment ) {

  			optionalPointOnSegment.copy( _segDir ).multiplyScalar( s1 ).add( _segCenter );

  		}

  		return sqrDist;

  	},

  	intersectSphere: function ( sphere, target ) {

  		_vector$2.subVectors( sphere.center, this.origin );
  		var tca = _vector$2.dot( this.direction );
  		var d2 = _vector$2.dot( _vector$2 ) - tca * tca;
  		var radius2 = sphere.radius * sphere.radius;

  		if ( d2 > radius2 ) { return null; }

  		var thc = Math.sqrt( radius2 - d2 );

  		// t0 = first intersect point - entrance on front of sphere
  		var t0 = tca - thc;

  		// t1 = second intersect point - exit point on back of sphere
  		var t1 = tca + thc;

  		// test to see if both t0 and t1 are behind the ray - if so, return null
  		if ( t0 < 0 && t1 < 0 ) { return null; }

  		// test to see if t0 is behind the ray:
  		// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
  		// in order to always return an intersect point that is in front of the ray.
  		if ( t0 < 0 ) { return this.at( t1, target ); }

  		// else t0 is in front of the ray, so return the first collision point scaled by t0
  		return this.at( t0, target );

  	},

  	intersectsSphere: function ( sphere ) {

  		return this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );

  	},

  	distanceToPlane: function ( plane ) {

  		var denominator = plane.normal.dot( this.direction );

  		if ( denominator === 0 ) {

  			// line is coplanar, return origin
  			if ( plane.distanceToPoint( this.origin ) === 0 ) {

  				return 0;

  			}

  			// Null is preferable to undefined since undefined means.... it is undefined

  			return null;

  		}

  		var t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;

  		// Return if the ray never intersects the plane

  		return t >= 0 ? t : null;

  	},

  	intersectPlane: function ( plane, target ) {

  		var t = this.distanceToPlane( plane );

  		if ( t === null ) {

  			return null;

  		}

  		return this.at( t, target );

  	},

  	intersectsPlane: function ( plane ) {

  		// check if the ray lies on the plane first

  		var distToPoint = plane.distanceToPoint( this.origin );

  		if ( distToPoint === 0 ) {

  			return true;

  		}

  		var denominator = plane.normal.dot( this.direction );

  		if ( denominator * distToPoint < 0 ) {

  			return true;

  		}

  		// ray origin is behind the plane (and is pointing behind it)

  		return false;

  	},

  	intersectBox: function ( box, target ) {

  		var tmin, tmax, tymin, tymax, tzmin, tzmax;

  		var invdirx = 1 / this.direction.x,
  			invdiry = 1 / this.direction.y,
  			invdirz = 1 / this.direction.z;

  		var origin = this.origin;

  		if ( invdirx >= 0 ) {

  			tmin = ( box.min.x - origin.x ) * invdirx;
  			tmax = ( box.max.x - origin.x ) * invdirx;

  		} else {

  			tmin = ( box.max.x - origin.x ) * invdirx;
  			tmax = ( box.min.x - origin.x ) * invdirx;

  		}

  		if ( invdiry >= 0 ) {

  			tymin = ( box.min.y - origin.y ) * invdiry;
  			tymax = ( box.max.y - origin.y ) * invdiry;

  		} else {

  			tymin = ( box.max.y - origin.y ) * invdiry;
  			tymax = ( box.min.y - origin.y ) * invdiry;

  		}

  		if ( ( tmin > tymax ) || ( tymin > tmax ) ) { return null; }

  		// These lines also handle the case where tmin or tmax is NaN
  		// (result of 0 * Infinity). x !== x returns true if x is NaN

  		if ( tymin > tmin || tmin !== tmin ) { tmin = tymin; }

  		if ( tymax < tmax || tmax !== tmax ) { tmax = tymax; }

  		if ( invdirz >= 0 ) {

  			tzmin = ( box.min.z - origin.z ) * invdirz;
  			tzmax = ( box.max.z - origin.z ) * invdirz;

  		} else {

  			tzmin = ( box.max.z - origin.z ) * invdirz;
  			tzmax = ( box.min.z - origin.z ) * invdirz;

  		}

  		if ( ( tmin > tzmax ) || ( tzmin > tmax ) ) { return null; }

  		if ( tzmin > tmin || tmin !== tmin ) { tmin = tzmin; }

  		if ( tzmax < tmax || tmax !== tmax ) { tmax = tzmax; }

  		//return point closest to the ray (positive side)

  		if ( tmax < 0 ) { return null; }

  		return this.at( tmin >= 0 ? tmin : tmax, target );

  	},

  	intersectsBox: function ( box ) {

  		return this.intersectBox( box, _vector$2 ) !== null;

  	},

  	intersectTriangle: function ( a, b, c, backfaceCulling, target ) {

  		// Compute the offset origin, edges, and normal.

  		// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h

  		_edge1.subVectors( b, a );
  		_edge2.subVectors( c, a );
  		_normal.crossVectors( _edge1, _edge2 );

  		// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
  		// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
  		//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
  		//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
  		//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
  		var DdN = this.direction.dot( _normal );
  		var sign;

  		if ( DdN > 0 ) {

  			if ( backfaceCulling ) { return null; }
  			sign = 1;

  		} else if ( DdN < 0 ) {

  			sign = - 1;
  			DdN = - DdN;

  		} else {

  			return null;

  		}

  		_diff.subVectors( this.origin, a );
  		var DdQxE2 = sign * this.direction.dot( _edge2.crossVectors( _diff, _edge2 ) );

  		// b1 < 0, no intersection
  		if ( DdQxE2 < 0 ) {

  			return null;

  		}

  		var DdE1xQ = sign * this.direction.dot( _edge1.cross( _diff ) );

  		// b2 < 0, no intersection
  		if ( DdE1xQ < 0 ) {

  			return null;

  		}

  		// b1+b2 > 1, no intersection
  		if ( DdQxE2 + DdE1xQ > DdN ) {

  			return null;

  		}

  		// Line intersects triangle, check if ray does.
  		var QdN = - sign * _diff.dot( _normal );

  		// t < 0, no intersection
  		if ( QdN < 0 ) {

  			return null;

  		}

  		// Ray intersects triangle.
  		return this.at( QdN / DdN, target );

  	},

  	applyMatrix4: function ( matrix4 ) {

  		this.origin.applyMatrix4( matrix4 );
  		this.direction.transformDirection( matrix4 );

  		return this;

  	},

  	equals: function ( ray ) {

  		return ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );

  	}

  } );

  /**
   * @author bhouston / http://clara.io
   */

  var _vector1 = new Vector3();
  var _vector2 = new Vector3();
  var _normalMatrix = new Matrix3();

  function Plane( normal, constant ) {

  	// normal is assumed to be normalized

  	this.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );
  	this.constant = ( constant !== undefined ) ? constant : 0;

  }

  Object.assign( Plane.prototype, {

  	isPlane: true,

  	set: function ( normal, constant ) {

  		this.normal.copy( normal );
  		this.constant = constant;

  		return this;

  	},

  	setComponents: function ( x, y, z, w ) {

  		this.normal.set( x, y, z );
  		this.constant = w;

  		return this;

  	},

  	setFromNormalAndCoplanarPoint: function ( normal, point ) {

  		this.normal.copy( normal );
  		this.constant = - point.dot( this.normal );

  		return this;

  	},

  	setFromCoplanarPoints: function ( a, b, c ) {

  		var normal = _vector1.subVectors( c, b ).cross( _vector2.subVectors( a, b ) ).normalize();

  		// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?

  		this.setFromNormalAndCoplanarPoint( normal, a );

  		return this;

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	copy: function ( plane ) {

  		this.normal.copy( plane.normal );
  		this.constant = plane.constant;

  		return this;

  	},

  	normalize: function () {

  		// Note: will lead to a divide by zero if the plane is invalid.

  		var inverseNormalLength = 1.0 / this.normal.length();
  		this.normal.multiplyScalar( inverseNormalLength );
  		this.constant *= inverseNormalLength;

  		return this;

  	},

  	negate: function () {

  		this.constant *= - 1;
  		this.normal.negate();

  		return this;

  	},

  	distanceToPoint: function ( point ) {

  		return this.normal.dot( point ) + this.constant;

  	},

  	distanceToSphere: function ( sphere ) {

  		return this.distanceToPoint( sphere.center ) - sphere.radius;

  	},

  	projectPoint: function ( point, target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Plane: .projectPoint() target is now required' );
  			target = new Vector3();

  		}

  		return target.copy( this.normal ).multiplyScalar( - this.distanceToPoint( point ) ).add( point );

  	},

  	intersectLine: function ( line, target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Plane: .intersectLine() target is now required' );
  			target = new Vector3();

  		}

  		var direction = line.delta( _vector1 );

  		var denominator = this.normal.dot( direction );

  		if ( denominator === 0 ) {

  			// line is coplanar, return origin
  			if ( this.distanceToPoint( line.start ) === 0 ) {

  				return target.copy( line.start );

  			}

  			// Unsure if this is the correct method to handle this case.
  			return undefined;

  		}

  		var t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;

  		if ( t < 0 || t > 1 ) {

  			return undefined;

  		}

  		return target.copy( direction ).multiplyScalar( t ).add( line.start );

  	},

  	intersectsLine: function ( line ) {

  		// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.

  		var startSign = this.distanceToPoint( line.start );
  		var endSign = this.distanceToPoint( line.end );

  		return ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );

  	},

  	intersectsBox: function ( box ) {

  		return box.intersectsPlane( this );

  	},

  	intersectsSphere: function ( sphere ) {

  		return sphere.intersectsPlane( this );

  	},

  	coplanarPoint: function ( target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Plane: .coplanarPoint() target is now required' );
  			target = new Vector3();

  		}

  		return target.copy( this.normal ).multiplyScalar( - this.constant );

  	},

  	applyMatrix4: function ( matrix, optionalNormalMatrix ) {

  		var normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix( matrix );

  		var referencePoint = this.coplanarPoint( _vector1 ).applyMatrix4( matrix );

  		var normal = this.normal.applyMatrix3( normalMatrix ).normalize();

  		this.constant = - referencePoint.dot( normal );

  		return this;

  	},

  	translate: function ( offset ) {

  		this.constant -= offset.dot( this.normal );

  		return this;

  	},

  	equals: function ( plane ) {

  		return plane.normal.equals( this.normal ) && ( plane.constant === this.constant );

  	}

  } );

  /**
   * @author bhouston / http://clara.io
   * @author mrdoob / http://mrdoob.com/
   */

  var _v0$1 = new Vector3();
  var _v1$3 = new Vector3();
  var _v2$1 = new Vector3();
  var _v3 = new Vector3();

  var _vab = new Vector3();
  var _vac = new Vector3();
  var _vbc = new Vector3();
  var _vap = new Vector3();
  var _vbp = new Vector3();
  var _vcp = new Vector3();

  function Triangle( a, b, c ) {

  	this.a = ( a !== undefined ) ? a : new Vector3();
  	this.b = ( b !== undefined ) ? b : new Vector3();
  	this.c = ( c !== undefined ) ? c : new Vector3();

  }

  Object.assign( Triangle, {

  	getNormal: function ( a, b, c, target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Triangle: .getNormal() target is now required' );
  			target = new Vector3();

  		}

  		target.subVectors( c, b );
  		_v0$1.subVectors( a, b );
  		target.cross( _v0$1 );

  		var targetLengthSq = target.lengthSq();
  		if ( targetLengthSq > 0 ) {

  			return target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );

  		}

  		return target.set( 0, 0, 0 );

  	},

  	// static/instance method to calculate barycentric coordinates
  	// based on: http://www.blackpawn.com/texts/pointinpoly/default.html
  	getBarycoord: function ( point, a, b, c, target ) {

  		_v0$1.subVectors( c, a );
  		_v1$3.subVectors( b, a );
  		_v2$1.subVectors( point, a );

  		var dot00 = _v0$1.dot( _v0$1 );
  		var dot01 = _v0$1.dot( _v1$3 );
  		var dot02 = _v0$1.dot( _v2$1 );
  		var dot11 = _v1$3.dot( _v1$3 );
  		var dot12 = _v1$3.dot( _v2$1 );

  		var denom = ( dot00 * dot11 - dot01 * dot01 );

  		if ( target === undefined ) {

  			console.warn( 'THREE.Triangle: .getBarycoord() target is now required' );
  			target = new Vector3();

  		}

  		// collinear or singular triangle
  		if ( denom === 0 ) {

  			// arbitrary location outside of triangle?
  			// not sure if this is the best idea, maybe should be returning undefined
  			return target.set( - 2, - 1, - 1 );

  		}

  		var invDenom = 1 / denom;
  		var u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;
  		var v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;

  		// barycentric coordinates must always sum to 1
  		return target.set( 1 - u - v, v, u );

  	},

  	containsPoint: function ( point, a, b, c ) {

  		Triangle.getBarycoord( point, a, b, c, _v3 );

  		return ( _v3.x >= 0 ) && ( _v3.y >= 0 ) && ( ( _v3.x + _v3.y ) <= 1 );

  	},

  	getUV: function ( point, p1, p2, p3, uv1, uv2, uv3, target ) {

  		this.getBarycoord( point, p1, p2, p3, _v3 );

  		target.set( 0, 0 );
  		target.addScaledVector( uv1, _v3.x );
  		target.addScaledVector( uv2, _v3.y );
  		target.addScaledVector( uv3, _v3.z );

  		return target;

  	},

  	isFrontFacing: function ( a, b, c, direction ) {

  		_v0$1.subVectors( c, b );
  		_v1$3.subVectors( a, b );

  		// strictly front facing
  		return ( _v0$1.cross( _v1$3 ).dot( direction ) < 0 ) ? true : false;

  	}

  } );

  Object.assign( Triangle.prototype, {

  	set: function ( a, b, c ) {

  		this.a.copy( a );
  		this.b.copy( b );
  		this.c.copy( c );

  		return this;

  	},

  	setFromPointsAndIndices: function ( points, i0, i1, i2 ) {

  		this.a.copy( points[ i0 ] );
  		this.b.copy( points[ i1 ] );
  		this.c.copy( points[ i2 ] );

  		return this;

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	copy: function ( triangle ) {

  		this.a.copy( triangle.a );
  		this.b.copy( triangle.b );
  		this.c.copy( triangle.c );

  		return this;

  	},

  	getArea: function () {

  		_v0$1.subVectors( this.c, this.b );
  		_v1$3.subVectors( this.a, this.b );

  		return _v0$1.cross( _v1$3 ).length() * 0.5;

  	},

  	getMidpoint: function ( target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Triangle: .getMidpoint() target is now required' );
  			target = new Vector3();

  		}

  		return target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );

  	},

  	getNormal: function ( target ) {

  		return Triangle.getNormal( this.a, this.b, this.c, target );

  	},

  	getPlane: function ( target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Triangle: .getPlane() target is now required' );
  			target = new Plane();

  		}

  		return target.setFromCoplanarPoints( this.a, this.b, this.c );

  	},

  	getBarycoord: function ( point, target ) {

  		return Triangle.getBarycoord( point, this.a, this.b, this.c, target );

  	},

  	getUV: function ( point, uv1, uv2, uv3, target ) {

  		return Triangle.getUV( point, this.a, this.b, this.c, uv1, uv2, uv3, target );

  	},

  	containsPoint: function ( point ) {

  		return Triangle.containsPoint( point, this.a, this.b, this.c );

  	},

  	isFrontFacing: function ( direction ) {

  		return Triangle.isFrontFacing( this.a, this.b, this.c, direction );

  	},

  	intersectsBox: function ( box ) {

  		return box.intersectsTriangle( this );

  	},

  	closestPointToPoint: function ( p, target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Triangle: .closestPointToPoint() target is now required' );
  			target = new Vector3();

  		}

  		var a = this.a, b = this.b, c = this.c;
  		var v, w;

  		// algorithm thanks to Real-Time Collision Detection by Christer Ericson,
  		// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,
  		// under the accompanying license; see chapter 5.1.5 for detailed explanation.
  		// basically, we're distinguishing which of the voronoi regions of the triangle
  		// the point lies in with the minimum amount of redundant computation.

  		_vab.subVectors( b, a );
  		_vac.subVectors( c, a );
  		_vap.subVectors( p, a );
  		var d1 = _vab.dot( _vap );
  		var d2 = _vac.dot( _vap );
  		if ( d1 <= 0 && d2 <= 0 ) {

  			// vertex region of A; barycentric coords (1, 0, 0)
  			return target.copy( a );

  		}

  		_vbp.subVectors( p, b );
  		var d3 = _vab.dot( _vbp );
  		var d4 = _vac.dot( _vbp );
  		if ( d3 >= 0 && d4 <= d3 ) {

  			// vertex region of B; barycentric coords (0, 1, 0)
  			return target.copy( b );

  		}

  		var vc = d1 * d4 - d3 * d2;
  		if ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {

  			v = d1 / ( d1 - d3 );
  			// edge region of AB; barycentric coords (1-v, v, 0)
  			return target.copy( a ).addScaledVector( _vab, v );

  		}

  		_vcp.subVectors( p, c );
  		var d5 = _vab.dot( _vcp );
  		var d6 = _vac.dot( _vcp );
  		if ( d6 >= 0 && d5 <= d6 ) {

  			// vertex region of C; barycentric coords (0, 0, 1)
  			return target.copy( c );

  		}

  		var vb = d5 * d2 - d1 * d6;
  		if ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {

  			w = d2 / ( d2 - d6 );
  			// edge region of AC; barycentric coords (1-w, 0, w)
  			return target.copy( a ).addScaledVector( _vac, w );

  		}

  		var va = d3 * d6 - d5 * d4;
  		if ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {

  			_vbc.subVectors( c, b );
  			w = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );
  			// edge region of BC; barycentric coords (0, 1-w, w)
  			return target.copy( b ).addScaledVector( _vbc, w ); // edge region of BC

  		}

  		// face region
  		var denom = 1 / ( va + vb + vc );
  		// u = va * denom
  		v = vb * denom;
  		w = vc * denom;

  		return target.copy( a ).addScaledVector( _vab, v ).addScaledVector( _vac, w );

  	},

  	equals: function ( triangle ) {

  		return triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  var _colorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,
  	'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,
  	'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,
  	'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,
  	'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,
  	'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,
  	'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,
  	'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,
  	'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,
  	'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,
  	'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,
  	'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,
  	'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,
  	'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,
  	'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,
  	'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,
  	'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,
  	'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,
  	'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,
  	'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,
  	'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,
  	'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,
  	'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,
  	'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };

  var _hslA = { h: 0, s: 0, l: 0 };
  var _hslB = { h: 0, s: 0, l: 0 };

  function Color( r, g, b ) {

  	if ( g === undefined && b === undefined ) {

  		// r is THREE.Color, hex or string
  		return this.set( r );

  	}

  	return this.setRGB( r, g, b );

  }

  function hue2rgb( p, q, t ) {

  	if ( t < 0 ) { t += 1; }
  	if ( t > 1 ) { t -= 1; }
  	if ( t < 1 / 6 ) { return p + ( q - p ) * 6 * t; }
  	if ( t < 1 / 2 ) { return q; }
  	if ( t < 2 / 3 ) { return p + ( q - p ) * 6 * ( 2 / 3 - t ); }
  	return p;

  }

  function SRGBToLinear( c ) {

  	return ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );

  }

  function LinearToSRGB( c ) {

  	return ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;

  }

  Object.assign( Color.prototype, {

  	isColor: true,

  	r: 1, g: 1, b: 1,

  	set: function ( value ) {

  		if ( value && value.isColor ) {

  			this.copy( value );

  		} else if ( typeof value === 'number' ) {

  			this.setHex( value );

  		} else if ( typeof value === 'string' ) {

  			this.setStyle( value );

  		}

  		return this;

  	},

  	setScalar: function ( scalar ) {

  		this.r = scalar;
  		this.g = scalar;
  		this.b = scalar;

  		return this;

  	},

  	setHex: function ( hex ) {

  		hex = Math.floor( hex );

  		this.r = ( hex >> 16 & 255 ) / 255;
  		this.g = ( hex >> 8 & 255 ) / 255;
  		this.b = ( hex & 255 ) / 255;

  		return this;

  	},

  	setRGB: function ( r, g, b ) {

  		this.r = r;
  		this.g = g;
  		this.b = b;

  		return this;

  	},

  	setHSL: function ( h, s, l ) {

  		// h,s,l ranges are in 0.0 - 1.0
  		h = MathUtils.euclideanModulo( h, 1 );
  		s = MathUtils.clamp( s, 0, 1 );
  		l = MathUtils.clamp( l, 0, 1 );

  		if ( s === 0 ) {

  			this.r = this.g = this.b = l;

  		} else {

  			var p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );
  			var q = ( 2 * l ) - p;

  			this.r = hue2rgb( q, p, h + 1 / 3 );
  			this.g = hue2rgb( q, p, h );
  			this.b = hue2rgb( q, p, h - 1 / 3 );

  		}

  		return this;

  	},

  	setStyle: function ( style ) {

  		function handleAlpha( string ) {

  			if ( string === undefined ) { return; }

  			if ( parseFloat( string ) < 1 ) {

  				console.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );

  			}

  		}


  		var m;

  		if ( m = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec( style ) ) {

  			// rgb / hsl

  			var color;
  			var name = m[ 1 ];
  			var components = m[ 2 ];

  			switch ( name ) {

  				case 'rgb':
  				case 'rgba':

  					if ( color = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

  						// rgb(255,0,0) rgba(255,0,0,0.5)
  						this.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;
  						this.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;
  						this.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;

  						handleAlpha( color[ 5 ] );

  						return this;

  					}

  					if ( color = /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

  						// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)
  						this.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;
  						this.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;
  						this.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;

  						handleAlpha( color[ 5 ] );

  						return this;

  					}

  					break;

  				case 'hsl':
  				case 'hsla':

  					if ( color = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

  						// hsl(120,50%,50%) hsla(120,50%,50%,0.5)
  						var h = parseFloat( color[ 1 ] ) / 360;
  						var s = parseInt( color[ 2 ], 10 ) / 100;
  						var l = parseInt( color[ 3 ], 10 ) / 100;

  						handleAlpha( color[ 5 ] );

  						return this.setHSL( h, s, l );

  					}

  					break;

  			}

  		} else if ( m = /^\#([A-Fa-f0-9]+)$/.exec( style ) ) {

  			// hex color

  			var hex = m[ 1 ];
  			var size = hex.length;

  			if ( size === 3 ) {

  				// #ff0
  				this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;
  				this.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;
  				this.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;

  				return this;

  			} else if ( size === 6 ) {

  				// #ff0000
  				this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;
  				this.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;
  				this.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;

  				return this;

  			}

  		}

  		if ( style && style.length > 0 ) {

  			return this.setColorName( style );

  		}

  		return this;

  	},

  	setColorName: function ( style ) {

  		// color keywords
  		var hex = _colorKeywords[ style ];

  		if ( hex !== undefined ) {

  			// red
  			this.setHex( hex );

  		} else {

  			// unknown color
  			console.warn( 'THREE.Color: Unknown color ' + style );

  		}

  		return this;

  	},

  	clone: function () {

  		return new this.constructor( this.r, this.g, this.b );

  	},

  	copy: function ( color ) {

  		this.r = color.r;
  		this.g = color.g;
  		this.b = color.b;

  		return this;

  	},

  	copyGammaToLinear: function ( color, gammaFactor ) {

  		if ( gammaFactor === undefined ) { gammaFactor = 2.0; }

  		this.r = Math.pow( color.r, gammaFactor );
  		this.g = Math.pow( color.g, gammaFactor );
  		this.b = Math.pow( color.b, gammaFactor );

  		return this;

  	},

  	copyLinearToGamma: function ( color, gammaFactor ) {

  		if ( gammaFactor === undefined ) { gammaFactor = 2.0; }

  		var safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;

  		this.r = Math.pow( color.r, safeInverse );
  		this.g = Math.pow( color.g, safeInverse );
  		this.b = Math.pow( color.b, safeInverse );

  		return this;

  	},

  	convertGammaToLinear: function ( gammaFactor ) {

  		this.copyGammaToLinear( this, gammaFactor );

  		return this;

  	},

  	convertLinearToGamma: function ( gammaFactor ) {

  		this.copyLinearToGamma( this, gammaFactor );

  		return this;

  	},

  	copySRGBToLinear: function ( color ) {

  		this.r = SRGBToLinear( color.r );
  		this.g = SRGBToLinear( color.g );
  		this.b = SRGBToLinear( color.b );

  		return this;

  	},

  	copyLinearToSRGB: function ( color ) {

  		this.r = LinearToSRGB( color.r );
  		this.g = LinearToSRGB( color.g );
  		this.b = LinearToSRGB( color.b );

  		return this;

  	},

  	convertSRGBToLinear: function () {

  		this.copySRGBToLinear( this );

  		return this;

  	},

  	convertLinearToSRGB: function () {

  		this.copyLinearToSRGB( this );

  		return this;

  	},

  	getHex: function () {

  		return ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;

  	},

  	getHexString: function () {

  		return ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );

  	},

  	getHSL: function ( target ) {

  		// h,s,l ranges are in 0.0 - 1.0

  		if ( target === undefined ) {

  			console.warn( 'THREE.Color: .getHSL() target is now required' );
  			target = { h: 0, s: 0, l: 0 };

  		}

  		var r = this.r, g = this.g, b = this.b;

  		var max = Math.max( r, g, b );
  		var min = Math.min( r, g, b );

  		var hue, saturation;
  		var lightness = ( min + max ) / 2.0;

  		if ( min === max ) {

  			hue = 0;
  			saturation = 0;

  		} else {

  			var delta = max - min;

  			saturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );

  			switch ( max ) {

  				case r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;
  				case g: hue = ( b - r ) / delta + 2; break;
  				case b: hue = ( r - g ) / delta + 4; break;

  			}

  			hue /= 6;

  		}

  		target.h = hue;
  		target.s = saturation;
  		target.l = lightness;

  		return target;

  	},

  	getStyle: function () {

  		return 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';

  	},

  	offsetHSL: function ( h, s, l ) {

  		this.getHSL( _hslA );

  		_hslA.h += h; _hslA.s += s; _hslA.l += l;

  		this.setHSL( _hslA.h, _hslA.s, _hslA.l );

  		return this;

  	},

  	add: function ( color ) {

  		this.r += color.r;
  		this.g += color.g;
  		this.b += color.b;

  		return this;

  	},

  	addColors: function ( color1, color2 ) {

  		this.r = color1.r + color2.r;
  		this.g = color1.g + color2.g;
  		this.b = color1.b + color2.b;

  		return this;

  	},

  	addScalar: function ( s ) {

  		this.r += s;
  		this.g += s;
  		this.b += s;

  		return this;

  	},

  	sub: function ( color ) {

  		this.r = Math.max( 0, this.r - color.r );
  		this.g = Math.max( 0, this.g - color.g );
  		this.b = Math.max( 0, this.b - color.b );

  		return this;

  	},

  	multiply: function ( color ) {

  		this.r *= color.r;
  		this.g *= color.g;
  		this.b *= color.b;

  		return this;

  	},

  	multiplyScalar: function ( s ) {

  		this.r *= s;
  		this.g *= s;
  		this.b *= s;

  		return this;

  	},

  	lerp: function ( color, alpha ) {

  		this.r += ( color.r - this.r ) * alpha;
  		this.g += ( color.g - this.g ) * alpha;
  		this.b += ( color.b - this.b ) * alpha;

  		return this;

  	},

  	lerpHSL: function ( color, alpha ) {

  		this.getHSL( _hslA );
  		color.getHSL( _hslB );

  		var h = MathUtils.lerp( _hslA.h, _hslB.h, alpha );
  		var s = MathUtils.lerp( _hslA.s, _hslB.s, alpha );
  		var l = MathUtils.lerp( _hslA.l, _hslB.l, alpha );

  		this.setHSL( h, s, l );

  		return this;

  	},

  	equals: function ( c ) {

  		return ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );

  	},

  	fromArray: function ( array, offset ) {

  		if ( offset === undefined ) { offset = 0; }

  		this.r = array[ offset ];
  		this.g = array[ offset + 1 ];
  		this.b = array[ offset + 2 ];

  		return this;

  	},

  	toArray: function ( array, offset ) {

  		if ( array === undefined ) { array = []; }
  		if ( offset === undefined ) { offset = 0; }

  		array[ offset ] = this.r;
  		array[ offset + 1 ] = this.g;
  		array[ offset + 2 ] = this.b;

  		return array;

  	},

  	fromBufferAttribute: function ( attribute, index ) {

  		this.r = attribute.getX( index );
  		this.g = attribute.getY( index );
  		this.b = attribute.getZ( index );

  		if ( attribute.normalized === true ) {

  			// assuming Uint8Array

  			this.r /= 255;
  			this.g /= 255;
  			this.b /= 255;

  		}

  		return this;

  	},

  	toJSON: function () {

  		return this.getHex();

  	}

  } );

  Color.NAMES = _colorKeywords;

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author alteredq / http://alteredqualia.com/
   */

  function Face3( a, b, c, normal, color, materialIndex ) {

  	this.a = a;
  	this.b = b;
  	this.c = c;

  	this.normal = ( normal && normal.isVector3 ) ? normal : new Vector3();
  	this.vertexNormals = Array.isArray( normal ) ? normal : [];

  	this.color = ( color && color.isColor ) ? color : new Color();
  	this.vertexColors = Array.isArray( color ) ? color : [];

  	this.materialIndex = materialIndex !== undefined ? materialIndex : 0;

  }

  Object.assign( Face3.prototype, {

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	copy: function ( source ) {

  		this.a = source.a;
  		this.b = source.b;
  		this.c = source.c;

  		this.normal.copy( source.normal );
  		this.color.copy( source.color );

  		this.materialIndex = source.materialIndex;

  		for ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {

  			this.vertexNormals[ i ] = source.vertexNormals[ i ].clone();

  		}

  		for ( var i$1 = 0, il$1 = source.vertexColors.length; i$1 < il$1; i$1 ++ ) {

  			this.vertexColors[ i$1 ] = source.vertexColors[ i$1 ].clone();

  		}

  		return this;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author alteredq / http://alteredqualia.com/
   */

  var materialId = 0;

  function Material() {

  	Object.defineProperty( this, 'id', { value: materialId ++ } );

  	this.uuid = MathUtils.generateUUID();

  	this.name = '';
  	this.type = 'Material';

  	this.fog = true;

  	this.blending = NormalBlending;
  	this.side = FrontSide;
  	this.flatShading = false;
  	this.vertexColors = false;

  	this.opacity = 1;
  	this.transparent = false;

  	this.blendSrc = SrcAlphaFactor;
  	this.blendDst = OneMinusSrcAlphaFactor;
  	this.blendEquation = AddEquation;
  	this.blendSrcAlpha = null;
  	this.blendDstAlpha = null;
  	this.blendEquationAlpha = null;

  	this.depthFunc = LessEqualDepth;
  	this.depthTest = true;
  	this.depthWrite = true;

  	this.stencilWriteMask = 0xff;
  	this.stencilFunc = AlwaysStencilFunc;
  	this.stencilRef = 0;
  	this.stencilFuncMask = 0xff;
  	this.stencilFail = KeepStencilOp;
  	this.stencilZFail = KeepStencilOp;
  	this.stencilZPass = KeepStencilOp;
  	this.stencilWrite = false;

  	this.clippingPlanes = null;
  	this.clipIntersection = false;
  	this.clipShadows = false;

  	this.shadowSide = null;

  	this.colorWrite = true;

  	this.precision = null; // override the renderer's default precision for this material

  	this.polygonOffset = false;
  	this.polygonOffsetFactor = 0;
  	this.polygonOffsetUnits = 0;

  	this.dithering = false;

  	this.alphaTest = 0;
  	this.premultipliedAlpha = false;

  	this.visible = true;

  	this.toneMapped = true;

  	this.userData = {};

  	this.version = 0;

  }

  Material.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

  	constructor: Material,

  	isMaterial: true,

  	onBeforeCompile: function ( /* shaderobject, renderer */ ) {},

  	customProgramCacheKey: function () {

  		return this.onBeforeCompile.toString();

  	},

  	setValues: function ( values ) {

  		if ( values === undefined ) { return; }

  		for ( var key in values ) {

  			var newValue = values[ key ];

  			if ( newValue === undefined ) {

  				console.warn( "THREE.Material: '" + key + "' parameter is undefined." );
  				continue;

  			}

  			// for backward compatability if shading is set in the constructor
  			if ( key === 'shading' ) {

  				console.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );
  				this.flatShading = ( newValue === FlatShading ) ? true : false;
  				continue;

  			}

  			var currentValue = this[ key ];

  			if ( currentValue === undefined ) {

  				console.warn( "THREE." + this.type + ": '" + key + "' is not a property of this material." );
  				continue;

  			}

  			if ( currentValue && currentValue.isColor ) {

  				currentValue.set( newValue );

  			} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {

  				currentValue.copy( newValue );

  			} else {

  				this[ key ] = newValue;

  			}

  		}

  	},

  	toJSON: function ( meta ) {

  		var isRoot = ( meta === undefined || typeof meta === 'string' );

  		if ( isRoot ) {

  			meta = {
  				textures: {},
  				images: {}
  			};

  		}

  		var data = {
  			metadata: {
  				version: 4.5,
  				type: 'Material',
  				generator: 'Material.toJSON'
  			}
  		};

  		// standard Material serialization
  		data.uuid = this.uuid;
  		data.type = this.type;

  		if ( this.name !== '' ) { data.name = this.name; }

  		if ( this.color && this.color.isColor ) { data.color = this.color.getHex(); }

  		if ( this.roughness !== undefined ) { data.roughness = this.roughness; }
  		if ( this.metalness !== undefined ) { data.metalness = this.metalness; }

  		if ( this.sheen && this.sheen.isColor ) { data.sheen = this.sheen.getHex(); }
  		if ( this.emissive && this.emissive.isColor ) { data.emissive = this.emissive.getHex(); }
  		if ( this.emissiveIntensity && this.emissiveIntensity !== 1 ) { data.emissiveIntensity = this.emissiveIntensity; }

  		if ( this.specular && this.specular.isColor ) { data.specular = this.specular.getHex(); }
  		if ( this.shininess !== undefined ) { data.shininess = this.shininess; }
  		if ( this.clearcoat !== undefined ) { data.clearcoat = this.clearcoat; }
  		if ( this.clearcoatRoughness !== undefined ) { data.clearcoatRoughness = this.clearcoatRoughness; }

  		if ( this.clearcoatMap && this.clearcoatMap.isTexture ) {

  			data.clearcoatMap = this.clearcoatMap.toJSON( meta ).uuid;

  		}

  		if ( this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture ) {

  			data.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON( meta ).uuid;

  		}

  		if ( this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture ) {

  			data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON( meta ).uuid;
  			data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();

  		}

  		if ( this.map && this.map.isTexture ) { data.map = this.map.toJSON( meta ).uuid; }
  		if ( this.matcap && this.matcap.isTexture ) { data.matcap = this.matcap.toJSON( meta ).uuid; }
  		if ( this.alphaMap && this.alphaMap.isTexture ) { data.alphaMap = this.alphaMap.toJSON( meta ).uuid; }
  		if ( this.lightMap && this.lightMap.isTexture ) { data.lightMap = this.lightMap.toJSON( meta ).uuid; }

  		if ( this.aoMap && this.aoMap.isTexture ) {

  			data.aoMap = this.aoMap.toJSON( meta ).uuid;
  			data.aoMapIntensity = this.aoMapIntensity;

  		}

  		if ( this.bumpMap && this.bumpMap.isTexture ) {

  			data.bumpMap = this.bumpMap.toJSON( meta ).uuid;
  			data.bumpScale = this.bumpScale;

  		}

  		if ( this.normalMap && this.normalMap.isTexture ) {

  			data.normalMap = this.normalMap.toJSON( meta ).uuid;
  			data.normalMapType = this.normalMapType;
  			data.normalScale = this.normalScale.toArray();

  		}

  		if ( this.displacementMap && this.displacementMap.isTexture ) {

  			data.displacementMap = this.displacementMap.toJSON( meta ).uuid;
  			data.displacementScale = this.displacementScale;
  			data.displacementBias = this.displacementBias;

  		}

  		if ( this.roughnessMap && this.roughnessMap.isTexture ) { data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid; }
  		if ( this.metalnessMap && this.metalnessMap.isTexture ) { data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid; }

  		if ( this.emissiveMap && this.emissiveMap.isTexture ) { data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid; }
  		if ( this.specularMap && this.specularMap.isTexture ) { data.specularMap = this.specularMap.toJSON( meta ).uuid; }

  		if ( this.envMap && this.envMap.isTexture ) {

  			data.envMap = this.envMap.toJSON( meta ).uuid;
  			data.reflectivity = this.reflectivity; // Scale behind envMap
  			data.refractionRatio = this.refractionRatio;

  			if ( this.combine !== undefined ) { data.combine = this.combine; }
  			if ( this.envMapIntensity !== undefined ) { data.envMapIntensity = this.envMapIntensity; }

  		}

  		if ( this.gradientMap && this.gradientMap.isTexture ) {

  			data.gradientMap = this.gradientMap.toJSON( meta ).uuid;

  		}

  		if ( this.size !== undefined ) { data.size = this.size; }
  		if ( this.sizeAttenuation !== undefined ) { data.sizeAttenuation = this.sizeAttenuation; }

  		if ( this.blending !== NormalBlending ) { data.blending = this.blending; }
  		if ( this.flatShading === true ) { data.flatShading = this.flatShading; }
  		if ( this.side !== FrontSide ) { data.side = this.side; }
  		if ( this.vertexColors ) { data.vertexColors = true; }

  		if ( this.opacity < 1 ) { data.opacity = this.opacity; }
  		if ( this.transparent === true ) { data.transparent = this.transparent; }

  		data.depthFunc = this.depthFunc;
  		data.depthTest = this.depthTest;
  		data.depthWrite = this.depthWrite;

  		data.stencilWrite = this.stencilWrite;
  		data.stencilWriteMask = this.stencilWriteMask;
  		data.stencilFunc = this.stencilFunc;
  		data.stencilRef = this.stencilRef;
  		data.stencilFuncMask = this.stencilFuncMask;
  		data.stencilFail = this.stencilFail;
  		data.stencilZFail = this.stencilZFail;
  		data.stencilZPass = this.stencilZPass;

  		// rotation (SpriteMaterial)
  		if ( this.rotation && this.rotation !== 0 ) { data.rotation = this.rotation; }

  		if ( this.polygonOffset === true ) { data.polygonOffset = true; }
  		if ( this.polygonOffsetFactor !== 0 ) { data.polygonOffsetFactor = this.polygonOffsetFactor; }
  		if ( this.polygonOffsetUnits !== 0 ) { data.polygonOffsetUnits = this.polygonOffsetUnits; }

  		if ( this.linewidth && this.linewidth !== 1 ) { data.linewidth = this.linewidth; }
  		if ( this.dashSize !== undefined ) { data.dashSize = this.dashSize; }
  		if ( this.gapSize !== undefined ) { data.gapSize = this.gapSize; }
  		if ( this.scale !== undefined ) { data.scale = this.scale; }

  		if ( this.dithering === true ) { data.dithering = true; }

  		if ( this.alphaTest > 0 ) { data.alphaTest = this.alphaTest; }
  		if ( this.premultipliedAlpha === true ) { data.premultipliedAlpha = this.premultipliedAlpha; }

  		if ( this.wireframe === true ) { data.wireframe = this.wireframe; }
  		if ( this.wireframeLinewidth > 1 ) { data.wireframeLinewidth = this.wireframeLinewidth; }
  		if ( this.wireframeLinecap !== 'round' ) { data.wireframeLinecap = this.wireframeLinecap; }
  		if ( this.wireframeLinejoin !== 'round' ) { data.wireframeLinejoin = this.wireframeLinejoin; }

  		if ( this.morphTargets === true ) { data.morphTargets = true; }
  		if ( this.morphNormals === true ) { data.morphNormals = true; }
  		if ( this.skinning === true ) { data.skinning = true; }

  		if ( this.visible === false ) { data.visible = false; }

  		if ( this.toneMapped === false ) { data.toneMapped = false; }

  		if ( JSON.stringify( this.userData ) !== '{}' ) { data.userData = this.userData; }

  		// TODO: Copied from Object3D.toJSON

  		function extractFromCache( cache ) {

  			var values = [];

  			for ( var key in cache ) {

  				var data = cache[ key ];
  				delete data.metadata;
  				values.push( data );

  			}

  			return values;

  		}

  		if ( isRoot ) {

  			var textures = extractFromCache( meta.textures );
  			var images = extractFromCache( meta.images );

  			if ( textures.length > 0 ) { data.textures = textures; }
  			if ( images.length > 0 ) { data.images = images; }

  		}

  		return data;

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	copy: function ( source ) {

  		this.name = source.name;

  		this.fog = source.fog;

  		this.blending = source.blending;
  		this.side = source.side;
  		this.flatShading = source.flatShading;
  		this.vertexColors = source.vertexColors;

  		this.opacity = source.opacity;
  		this.transparent = source.transparent;

  		this.blendSrc = source.blendSrc;
  		this.blendDst = source.blendDst;
  		this.blendEquation = source.blendEquation;
  		this.blendSrcAlpha = source.blendSrcAlpha;
  		this.blendDstAlpha = source.blendDstAlpha;
  		this.blendEquationAlpha = source.blendEquationAlpha;

  		this.depthFunc = source.depthFunc;
  		this.depthTest = source.depthTest;
  		this.depthWrite = source.depthWrite;

  		this.stencilWriteMask = source.stencilWriteMask;
  		this.stencilFunc = source.stencilFunc;
  		this.stencilRef = source.stencilRef;
  		this.stencilFuncMask = source.stencilFuncMask;
  		this.stencilFail = source.stencilFail;
  		this.stencilZFail = source.stencilZFail;
  		this.stencilZPass = source.stencilZPass;
  		this.stencilWrite = source.stencilWrite;

  		var srcPlanes = source.clippingPlanes;
  		var dstPlanes = null;

  		if ( srcPlanes !== null ) {

  			var n = srcPlanes.length;
  			dstPlanes = new Array( n );

  			for ( var i = 0; i !== n; ++ i ) {

  				dstPlanes[ i ] = srcPlanes[ i ].clone();

  			}

  		}

  		this.clippingPlanes = dstPlanes;
  		this.clipIntersection = source.clipIntersection;
  		this.clipShadows = source.clipShadows;

  		this.shadowSide = source.shadowSide;

  		this.colorWrite = source.colorWrite;

  		this.precision = source.precision;

  		this.polygonOffset = source.polygonOffset;
  		this.polygonOffsetFactor = source.polygonOffsetFactor;
  		this.polygonOffsetUnits = source.polygonOffsetUnits;

  		this.dithering = source.dithering;

  		this.alphaTest = source.alphaTest;
  		this.premultipliedAlpha = source.premultipliedAlpha;

  		this.visible = source.visible;

  		this.toneMapped = source.toneMapped;

  		this.userData = JSON.parse( JSON.stringify( source.userData ) );

  		return this;

  	},

  	dispose: function () {

  		this.dispatchEvent( { type: 'dispose' } );

  	}

  } );

  Object.defineProperty( Material.prototype, 'needsUpdate', {

  	set: function ( value ) {

  		if ( value === true ) { this.version ++; }

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author alteredq / http://alteredqualia.com/
   *
   * parameters = {
   *  color: <hex>,
   *  opacity: <float>,
   *  map: new THREE.Texture( <Image> ),
   *
   *  lightMap: new THREE.Texture( <Image> ),
   *  lightMapIntensity: <float>
   *
   *  aoMap: new THREE.Texture( <Image> ),
   *  aoMapIntensity: <float>
   *
   *  specularMap: new THREE.Texture( <Image> ),
   *
   *  alphaMap: new THREE.Texture( <Image> ),
   *
   *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
   *  combine: THREE.Multiply,
   *  reflectivity: <float>,
   *  refractionRatio: <float>,
   *
   *  depthTest: <bool>,
   *  depthWrite: <bool>,
   *
   *  wireframe: <boolean>,
   *  wireframeLinewidth: <float>,
   *
   *  skinning: <bool>,
   *  morphTargets: <bool>
   * }
   */

  function MeshBasicMaterial( parameters ) {

  	Material.call( this );

  	this.type = 'MeshBasicMaterial';

  	this.color = new Color( 0xffffff ); // emissive

  	this.map = null;

  	this.lightMap = null;
  	this.lightMapIntensity = 1.0;

  	this.aoMap = null;
  	this.aoMapIntensity = 1.0;

  	this.specularMap = null;

  	this.alphaMap = null;

  	this.envMap = null;
  	this.combine = MultiplyOperation;
  	this.reflectivity = 1;
  	this.refractionRatio = 0.98;

  	this.wireframe = false;
  	this.wireframeLinewidth = 1;
  	this.wireframeLinecap = 'round';
  	this.wireframeLinejoin = 'round';

  	this.skinning = false;
  	this.morphTargets = false;

  	this.setValues( parameters );

  }

  MeshBasicMaterial.prototype = Object.create( Material.prototype );
  MeshBasicMaterial.prototype.constructor = MeshBasicMaterial;

  MeshBasicMaterial.prototype.isMeshBasicMaterial = true;

  MeshBasicMaterial.prototype.copy = function ( source ) {

  	Material.prototype.copy.call( this, source );

  	this.color.copy( source.color );

  	this.map = source.map;

  	this.lightMap = source.lightMap;
  	this.lightMapIntensity = source.lightMapIntensity;

  	this.aoMap = source.aoMap;
  	this.aoMapIntensity = source.aoMapIntensity;

  	this.specularMap = source.specularMap;

  	this.alphaMap = source.alphaMap;

  	this.envMap = source.envMap;
  	this.combine = source.combine;
  	this.reflectivity = source.reflectivity;
  	this.refractionRatio = source.refractionRatio;

  	this.wireframe = source.wireframe;
  	this.wireframeLinewidth = source.wireframeLinewidth;
  	this.wireframeLinecap = source.wireframeLinecap;
  	this.wireframeLinejoin = source.wireframeLinejoin;

  	this.skinning = source.skinning;
  	this.morphTargets = source.morphTargets;

  	return this;

  };

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  var _vector$3 = new Vector3();
  var _vector2$1 = new Vector2();

  function BufferAttribute( array, itemSize, normalized ) {

  	if ( Array.isArray( array ) ) {

  		throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );

  	}

  	this.name = '';

  	this.array = array;
  	this.itemSize = itemSize;
  	this.count = array !== undefined ? array.length / itemSize : 0;
  	this.normalized = normalized === true;

  	this.usage = StaticDrawUsage;
  	this.updateRange = { offset: 0, count: - 1 };

  	this.version = 0;

  }

  Object.defineProperty( BufferAttribute.prototype, 'needsUpdate', {

  	set: function ( value ) {

  		if ( value === true ) { this.version ++; }

  	}

  } );

  Object.assign( BufferAttribute.prototype, {

  	isBufferAttribute: true,

  	onUploadCallback: function () {},

  	setUsage: function ( value ) {

  		this.usage = value;

  		return this;

  	},

  	copy: function ( source ) {

  		this.name = source.name;
  		this.array = new source.array.constructor( source.array );
  		this.itemSize = source.itemSize;
  		this.count = source.count;
  		this.normalized = source.normalized;

  		this.usage = source.usage;

  		return this;

  	},

  	copyAt: function ( index1, attribute, index2 ) {

  		index1 *= this.itemSize;
  		index2 *= attribute.itemSize;

  		for ( var i = 0, l = this.itemSize; i < l; i ++ ) {

  			this.array[ index1 + i ] = attribute.array[ index2 + i ];

  		}

  		return this;

  	},

  	copyArray: function ( array ) {

  		this.array.set( array );

  		return this;

  	},

  	copyColorsArray: function ( colors ) {

  		var array = this.array;
  		var offset = 0;

  		for ( var i = 0, l = colors.length; i < l; i ++ ) {

  			var color = colors[ i ];

  			if ( color === undefined ) {

  				console.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );
  				color = new Color();

  			}

  			array[ offset ++ ] = color.r;
  			array[ offset ++ ] = color.g;
  			array[ offset ++ ] = color.b;

  		}

  		return this;

  	},

  	copyVector2sArray: function ( vectors ) {

  		var array = this.array;
  		var offset = 0;

  		for ( var i = 0, l = vectors.length; i < l; i ++ ) {

  			var vector = vectors[ i ];

  			if ( vector === undefined ) {

  				console.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );
  				vector = new Vector2();

  			}

  			array[ offset ++ ] = vector.x;
  			array[ offset ++ ] = vector.y;

  		}

  		return this;

  	},

  	copyVector3sArray: function ( vectors ) {

  		var array = this.array;
  		var offset = 0;

  		for ( var i = 0, l = vectors.length; i < l; i ++ ) {

  			var vector = vectors[ i ];

  			if ( vector === undefined ) {

  				console.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );
  				vector = new Vector3();

  			}

  			array[ offset ++ ] = vector.x;
  			array[ offset ++ ] = vector.y;
  			array[ offset ++ ] = vector.z;

  		}

  		return this;

  	},

  	copyVector4sArray: function ( vectors ) {

  		var array = this.array;
  		var offset = 0;

  		for ( var i = 0, l = vectors.length; i < l; i ++ ) {

  			var vector = vectors[ i ];

  			if ( vector === undefined ) {

  				console.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );
  				vector = new Vector4();

  			}

  			array[ offset ++ ] = vector.x;
  			array[ offset ++ ] = vector.y;
  			array[ offset ++ ] = vector.z;
  			array[ offset ++ ] = vector.w;

  		}

  		return this;

  	},

  	applyMatrix3: function ( m ) {

  		if ( this.itemSize === 2 ) {

  			for ( var i = 0, l = this.count; i < l; i ++ ) {

  				_vector2$1.fromBufferAttribute( this, i );
  				_vector2$1.applyMatrix3( m );

  				this.setXY( i, _vector2$1.x, _vector2$1.y );

  			}

  		} else if ( this.itemSize === 3 ) {

  			for ( var i$1 = 0, l$1 = this.count; i$1 < l$1; i$1 ++ ) {

  				_vector$3.fromBufferAttribute( this, i$1 );
  				_vector$3.applyMatrix3( m );

  				this.setXYZ( i$1, _vector$3.x, _vector$3.y, _vector$3.z );

  			}

  		}

  		return this;

  	},

  	applyMatrix4: function ( m ) {

  		for ( var i = 0, l = this.count; i < l; i ++ ) {

  			_vector$3.x = this.getX( i );
  			_vector$3.y = this.getY( i );
  			_vector$3.z = this.getZ( i );

  			_vector$3.applyMatrix4( m );

  			this.setXYZ( i, _vector$3.x, _vector$3.y, _vector$3.z );

  		}

  		return this;

  	},

  	applyNormalMatrix: function ( m ) {

  		for ( var i = 0, l = this.count; i < l; i ++ ) {

  			_vector$3.x = this.getX( i );
  			_vector$3.y = this.getY( i );
  			_vector$3.z = this.getZ( i );

  			_vector$3.applyNormalMatrix( m );

  			this.setXYZ( i, _vector$3.x, _vector$3.y, _vector$3.z );

  		}

  		return this;

  	},

  	transformDirection: function ( m ) {

  		for ( var i = 0, l = this.count; i < l; i ++ ) {

  			_vector$3.x = this.getX( i );
  			_vector$3.y = this.getY( i );
  			_vector$3.z = this.getZ( i );

  			_vector$3.transformDirection( m );

  			this.setXYZ( i, _vector$3.x, _vector$3.y, _vector$3.z );

  		}

  		return this;

  	},

  	set: function ( value, offset ) {

  		if ( offset === undefined ) { offset = 0; }

  		this.array.set( value, offset );

  		return this;

  	},

  	getX: function ( index ) {

  		return this.array[ index * this.itemSize ];

  	},

  	setX: function ( index, x ) {

  		this.array[ index * this.itemSize ] = x;

  		return this;

  	},

  	getY: function ( index ) {

  		return this.array[ index * this.itemSize + 1 ];

  	},

  	setY: function ( index, y ) {

  		this.array[ index * this.itemSize + 1 ] = y;

  		return this;

  	},

  	getZ: function ( index ) {

  		return this.array[ index * this.itemSize + 2 ];

  	},

  	setZ: function ( index, z ) {

  		this.array[ index * this.itemSize + 2 ] = z;

  		return this;

  	},

  	getW: function ( index ) {

  		return this.array[ index * this.itemSize + 3 ];

  	},

  	setW: function ( index, w ) {

  		this.array[ index * this.itemSize + 3 ] = w;

  		return this;

  	},

  	setXY: function ( index, x, y ) {

  		index *= this.itemSize;

  		this.array[ index + 0 ] = x;
  		this.array[ index + 1 ] = y;

  		return this;

  	},

  	setXYZ: function ( index, x, y, z ) {

  		index *= this.itemSize;

  		this.array[ index + 0 ] = x;
  		this.array[ index + 1 ] = y;
  		this.array[ index + 2 ] = z;

  		return this;

  	},

  	setXYZW: function ( index, x, y, z, w ) {

  		index *= this.itemSize;

  		this.array[ index + 0 ] = x;
  		this.array[ index + 1 ] = y;
  		this.array[ index + 2 ] = z;
  		this.array[ index + 3 ] = w;

  		return this;

  	},

  	onUpload: function ( callback ) {

  		this.onUploadCallback = callback;

  		return this;

  	},

  	clone: function () {

  		return new this.constructor( this.array, this.itemSize ).copy( this );

  	},

  	toJSON: function () {

  		return {
  			itemSize: this.itemSize,
  			type: this.array.constructor.name,
  			array: Array.prototype.slice.call( this.array ),
  			normalized: this.normalized
  		};

  	}

  } );

  //

  function Int8BufferAttribute( array, itemSize, normalized ) {

  	BufferAttribute.call( this, new Int8Array( array ), itemSize, normalized );

  }

  Int8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
  Int8BufferAttribute.prototype.constructor = Int8BufferAttribute;


  function Uint8BufferAttribute( array, itemSize, normalized ) {

  	BufferAttribute.call( this, new Uint8Array( array ), itemSize, normalized );

  }

  Uint8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
  Uint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;


  function Uint8ClampedBufferAttribute( array, itemSize, normalized ) {

  	BufferAttribute.call( this, new Uint8ClampedArray( array ), itemSize, normalized );

  }

  Uint8ClampedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );
  Uint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;


  function Int16BufferAttribute( array, itemSize, normalized ) {

  	BufferAttribute.call( this, new Int16Array( array ), itemSize, normalized );

  }

  Int16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
  Int16BufferAttribute.prototype.constructor = Int16BufferAttribute;


  function Uint16BufferAttribute( array, itemSize, normalized ) {

  	BufferAttribute.call( this, new Uint16Array( array ), itemSize, normalized );

  }

  Uint16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
  Uint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;


  function Int32BufferAttribute( array, itemSize, normalized ) {

  	BufferAttribute.call( this, new Int32Array( array ), itemSize, normalized );

  }

  Int32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
  Int32BufferAttribute.prototype.constructor = Int32BufferAttribute;


  function Uint32BufferAttribute( array, itemSize, normalized ) {

  	BufferAttribute.call( this, new Uint32Array( array ), itemSize, normalized );

  }

  Uint32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
  Uint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;


  function Float32BufferAttribute( array, itemSize, normalized ) {

  	BufferAttribute.call( this, new Float32Array( array ), itemSize, normalized );

  }

  Float32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
  Float32BufferAttribute.prototype.constructor = Float32BufferAttribute;


  function Float64BufferAttribute( array, itemSize, normalized ) {

  	BufferAttribute.call( this, new Float64Array( array ), itemSize, normalized );

  }

  Float64BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
  Float64BufferAttribute.prototype.constructor = Float64BufferAttribute;

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function DirectGeometry() {

  	this.vertices = [];
  	this.normals = [];
  	this.colors = [];
  	this.uvs = [];
  	this.uvs2 = [];

  	this.groups = [];

  	this.morphTargets = {};

  	this.skinWeights = [];
  	this.skinIndices = [];

  	// this.lineDistances = [];

  	this.boundingBox = null;
  	this.boundingSphere = null;

  	// update flags

  	this.verticesNeedUpdate = false;
  	this.normalsNeedUpdate = false;
  	this.colorsNeedUpdate = false;
  	this.uvsNeedUpdate = false;
  	this.groupsNeedUpdate = false;

  }

  Object.assign( DirectGeometry.prototype, {

  	computeGroups: function ( geometry ) {

  		var groups = [];

  		var group, i;
  		var materialIndex = undefined;

  		var faces = geometry.faces;

  		for ( i = 0; i < faces.length; i ++ ) {

  			var face = faces[ i ];

  			// materials

  			if ( face.materialIndex !== materialIndex ) {

  				materialIndex = face.materialIndex;

  				if ( group !== undefined ) {

  					group.count = ( i * 3 ) - group.start;
  					groups.push( group );

  				}

  				group = {
  					start: i * 3,
  					materialIndex: materialIndex
  				};

  			}

  		}

  		if ( group !== undefined ) {

  			group.count = ( i * 3 ) - group.start;
  			groups.push( group );

  		}

  		this.groups = groups;

  	},

  	fromGeometry: function ( geometry ) {

  		var faces = geometry.faces;
  		var vertices = geometry.vertices;
  		var faceVertexUvs = geometry.faceVertexUvs;

  		var hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;
  		var hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;

  		// morphs

  		var morphTargets = geometry.morphTargets;
  		var morphTargetsLength = morphTargets.length;

  		var morphTargetsPosition;

  		if ( morphTargetsLength > 0 ) {

  			morphTargetsPosition = [];

  			for ( var i = 0; i < morphTargetsLength; i ++ ) {

  				morphTargetsPosition[ i ] = {
  					name: morphTargets[ i ].name,
  				 	data: []
  				};

  			}

  			this.morphTargets.position = morphTargetsPosition;

  		}

  		var morphNormals = geometry.morphNormals;
  		var morphNormalsLength = morphNormals.length;

  		var morphTargetsNormal;

  		if ( morphNormalsLength > 0 ) {

  			morphTargetsNormal = [];

  			for ( var i$1 = 0; i$1 < morphNormalsLength; i$1 ++ ) {

  				morphTargetsNormal[ i$1 ] = {
  					name: morphNormals[ i$1 ].name,
  				 	data: []
  				};

  			}

  			this.morphTargets.normal = morphTargetsNormal;

  		}

  		// skins

  		var skinIndices = geometry.skinIndices;
  		var skinWeights = geometry.skinWeights;

  		var hasSkinIndices = skinIndices.length === vertices.length;
  		var hasSkinWeights = skinWeights.length === vertices.length;

  		//

  		if ( vertices.length > 0 && faces.length === 0 ) {

  			console.error( 'THREE.DirectGeometry: Faceless geometries are not supported.' );

  		}

  		for ( var i$2 = 0; i$2 < faces.length; i$2 ++ ) {

  			var face = faces[ i$2 ];

  			this.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );

  			var vertexNormals = face.vertexNormals;

  			if ( vertexNormals.length === 3 ) {

  				this.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );

  			} else {

  				var normal = face.normal;

  				this.normals.push( normal, normal, normal );

  			}

  			var vertexColors = face.vertexColors;

  			if ( vertexColors.length === 3 ) {

  				this.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );

  			} else {

  				var color = face.color;

  				this.colors.push( color, color, color );

  			}

  			if ( hasFaceVertexUv === true ) {

  				var vertexUvs = faceVertexUvs[ 0 ][ i$2 ];

  				if ( vertexUvs !== undefined ) {

  					this.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );

  				} else {

  					console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i$2 );

  					this.uvs.push( new Vector2(), new Vector2(), new Vector2() );

  				}

  			}

  			if ( hasFaceVertexUv2 === true ) {

  				var vertexUvs$1 = faceVertexUvs[ 1 ][ i$2 ];

  				if ( vertexUvs$1 !== undefined ) {

  					this.uvs2.push( vertexUvs$1[ 0 ], vertexUvs$1[ 1 ], vertexUvs$1[ 2 ] );

  				} else {

  					console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i$2 );

  					this.uvs2.push( new Vector2(), new Vector2(), new Vector2() );

  				}

  			}

  			// morphs

  			for ( var j = 0; j < morphTargetsLength; j ++ ) {

  				var morphTarget = morphTargets[ j ].vertices;

  				morphTargetsPosition[ j ].data.push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );

  			}

  			for ( var j$1 = 0; j$1 < morphNormalsLength; j$1 ++ ) {

  				var morphNormal = morphNormals[ j$1 ].vertexNormals[ i$2 ];

  				morphTargetsNormal[ j$1 ].data.push( morphNormal.a, morphNormal.b, morphNormal.c );

  			}

  			// skins

  			if ( hasSkinIndices ) {

  				this.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );

  			}

  			if ( hasSkinWeights ) {

  				this.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );

  			}

  		}

  		this.computeGroups( geometry );

  		this.verticesNeedUpdate = geometry.verticesNeedUpdate;
  		this.normalsNeedUpdate = geometry.normalsNeedUpdate;
  		this.colorsNeedUpdate = geometry.colorsNeedUpdate;
  		this.uvsNeedUpdate = geometry.uvsNeedUpdate;
  		this.groupsNeedUpdate = geometry.groupsNeedUpdate;

  		if ( geometry.boundingSphere !== null ) {

  			this.boundingSphere = geometry.boundingSphere.clone();

  		}

  		if ( geometry.boundingBox !== null ) {

  			this.boundingBox = geometry.boundingBox.clone();

  		}

  		return this;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function arrayMax$1( array ) {

  	if ( array.length === 0 ) { return - Infinity; }

  	var max = array[ 0 ];

  	for ( var i = 1, l = array.length; i < l; ++ i ) {

  		if ( array[ i ] > max ) { max = array[ i ]; }

  	}

  	return max;

  }

  /**
   * @author alteredq / http://alteredqualia.com/
   * @author mrdoob / http://mrdoob.com/
   */

  var _bufferGeometryId = 1; // BufferGeometry uses odd numbers as Id

  var _m1$2 = new Matrix4();
  var _obj = new Object3D();
  var _offset = new Vector3();
  var _box$2 = new Box3();
  var _boxMorphTargets = new Box3();
  var _vector$4 = new Vector3();

  function BufferGeometry() {

  	Object.defineProperty( this, 'id', { value: _bufferGeometryId += 2 } );

  	this.uuid = MathUtils.generateUUID();

  	this.name = '';
  	this.type = 'BufferGeometry';

  	this.index = null;
  	this.attributes = {};

  	this.morphAttributes = {};
  	this.morphTargetsRelative = false;

  	this.groups = [];

  	this.boundingBox = null;
  	this.boundingSphere = null;

  	this.drawRange = { start: 0, count: Infinity };

  	this.userData = {};

  }

  BufferGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

  	constructor: BufferGeometry,

  	isBufferGeometry: true,

  	getIndex: function () {

  		return this.index;

  	},

  	setIndex: function ( index ) {

  		if ( Array.isArray( index ) ) {

  			this.index = new ( arrayMax$1( index ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );

  		} else {

  			this.index = index;

  		}

  	},

  	getAttribute: function ( name ) {

  		return this.attributes[ name ];

  	},

  	setAttribute: function ( name, attribute ) {

  		this.attributes[ name ] = attribute;

  		return this;

  	},

  	deleteAttribute: function ( name ) {

  		delete this.attributes[ name ];

  		return this;

  	},

  	addGroup: function ( start, count, materialIndex ) {

  		this.groups.push( {

  			start: start,
  			count: count,
  			materialIndex: materialIndex !== undefined ? materialIndex : 0

  		} );

  	},

  	clearGroups: function () {

  		this.groups = [];

  	},

  	setDrawRange: function ( start, count ) {

  		this.drawRange.start = start;
  		this.drawRange.count = count;

  	},

  	applyMatrix4: function ( matrix ) {

  		var position = this.attributes.position;

  		if ( position !== undefined ) {

  			position.applyMatrix4( matrix );

  			position.needsUpdate = true;

  		}

  		var normal = this.attributes.normal;

  		if ( normal !== undefined ) {

  			var normalMatrix = new Matrix3().getNormalMatrix( matrix );

  			normal.applyNormalMatrix( normalMatrix );

  			normal.needsUpdate = true;

  		}

  		var tangent = this.attributes.tangent;

  		if ( tangent !== undefined ) {

  			tangent.transformDirection( matrix );

  			tangent.needsUpdate = true;

  		}

  		if ( this.boundingBox !== null ) {

  			this.computeBoundingBox();

  		}

  		if ( this.boundingSphere !== null ) {

  			this.computeBoundingSphere();

  		}

  		return this;

  	},

  	rotateX: function ( angle ) {

  		// rotate geometry around world x-axis

  		_m1$2.makeRotationX( angle );

  		this.applyMatrix4( _m1$2 );

  		return this;

  	},

  	rotateY: function ( angle ) {

  		// rotate geometry around world y-axis

  		_m1$2.makeRotationY( angle );

  		this.applyMatrix4( _m1$2 );

  		return this;

  	},

  	rotateZ: function ( angle ) {

  		// rotate geometry around world z-axis

  		_m1$2.makeRotationZ( angle );

  		this.applyMatrix4( _m1$2 );

  		return this;

  	},

  	translate: function ( x, y, z ) {

  		// translate geometry

  		_m1$2.makeTranslation( x, y, z );

  		this.applyMatrix4( _m1$2 );

  		return this;

  	},

  	scale: function ( x, y, z ) {

  		// scale geometry

  		_m1$2.makeScale( x, y, z );

  		this.applyMatrix4( _m1$2 );

  		return this;

  	},

  	lookAt: function ( vector ) {

  		_obj.lookAt( vector );

  		_obj.updateMatrix();

  		this.applyMatrix4( _obj.matrix );

  		return this;

  	},

  	center: function () {

  		this.computeBoundingBox();

  		this.boundingBox.getCenter( _offset ).negate();

  		this.translate( _offset.x, _offset.y, _offset.z );

  		return this;

  	},

  	setFromObject: function ( object ) {

  		// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );

  		var geometry = object.geometry;

  		if ( object.isPoints || object.isLine ) {

  			var positions = new Float32BufferAttribute( geometry.vertices.length * 3, 3 );
  			var colors = new Float32BufferAttribute( geometry.colors.length * 3, 3 );

  			this.setAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );
  			this.setAttribute( 'color', colors.copyColorsArray( geometry.colors ) );

  			if ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {

  				var lineDistances = new Float32BufferAttribute( geometry.lineDistances.length, 1 );

  				this.setAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );

  			}

  			if ( geometry.boundingSphere !== null ) {

  				this.boundingSphere = geometry.boundingSphere.clone();

  			}

  			if ( geometry.boundingBox !== null ) {

  				this.boundingBox = geometry.boundingBox.clone();

  			}

  		} else if ( object.isMesh ) {

  			if ( geometry && geometry.isGeometry ) {

  				this.fromGeometry( geometry );

  			}

  		}

  		return this;

  	},

  	setFromPoints: function ( points ) {

  		var position = [];

  		for ( var i = 0, l = points.length; i < l; i ++ ) {

  			var point = points[ i ];
  			position.push( point.x, point.y, point.z || 0 );

  		}

  		this.setAttribute( 'position', new Float32BufferAttribute( position, 3 ) );

  		return this;

  	},

  	updateFromObject: function ( object ) {

  		var geometry = object.geometry;

  		if ( object.isMesh ) {

  			var direct = geometry.__directGeometry;

  			if ( geometry.elementsNeedUpdate === true ) {

  				direct = undefined;
  				geometry.elementsNeedUpdate = false;

  			}

  			if ( direct === undefined ) {

  				return this.fromGeometry( geometry );

  			}

  			direct.verticesNeedUpdate = geometry.verticesNeedUpdate;
  			direct.normalsNeedUpdate = geometry.normalsNeedUpdate;
  			direct.colorsNeedUpdate = geometry.colorsNeedUpdate;
  			direct.uvsNeedUpdate = geometry.uvsNeedUpdate;
  			direct.groupsNeedUpdate = geometry.groupsNeedUpdate;

  			geometry.verticesNeedUpdate = false;
  			geometry.normalsNeedUpdate = false;
  			geometry.colorsNeedUpdate = false;
  			geometry.uvsNeedUpdate = false;
  			geometry.groupsNeedUpdate = false;

  			geometry = direct;

  		}

  		if ( geometry.verticesNeedUpdate === true ) {

  			var attribute = this.attributes.position;

  			if ( attribute !== undefined ) {

  				attribute.copyVector3sArray( geometry.vertices );
  				attribute.needsUpdate = true;

  			}

  			geometry.verticesNeedUpdate = false;

  		}

  		if ( geometry.normalsNeedUpdate === true ) {

  			var attribute$1 = this.attributes.normal;

  			if ( attribute$1 !== undefined ) {

  				attribute$1.copyVector3sArray( geometry.normals );
  				attribute$1.needsUpdate = true;

  			}

  			geometry.normalsNeedUpdate = false;

  		}

  		if ( geometry.colorsNeedUpdate === true ) {

  			var attribute$2 = this.attributes.color;

  			if ( attribute$2 !== undefined ) {

  				attribute$2.copyColorsArray( geometry.colors );
  				attribute$2.needsUpdate = true;

  			}

  			geometry.colorsNeedUpdate = false;

  		}

  		if ( geometry.uvsNeedUpdate ) {

  			var attribute$3 = this.attributes.uv;

  			if ( attribute$3 !== undefined ) {

  				attribute$3.copyVector2sArray( geometry.uvs );
  				attribute$3.needsUpdate = true;

  			}

  			geometry.uvsNeedUpdate = false;

  		}

  		if ( geometry.lineDistancesNeedUpdate ) {

  			var attribute$4 = this.attributes.lineDistance;

  			if ( attribute$4 !== undefined ) {

  				attribute$4.copyArray( geometry.lineDistances );
  				attribute$4.needsUpdate = true;

  			}

  			geometry.lineDistancesNeedUpdate = false;

  		}

  		if ( geometry.groupsNeedUpdate ) {

  			geometry.computeGroups( object.geometry );
  			this.groups = geometry.groups;

  			geometry.groupsNeedUpdate = false;

  		}

  		return this;

  	},

  	fromGeometry: function ( geometry ) {

  		geometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );

  		return this.fromDirectGeometry( geometry.__directGeometry );

  	},

  	fromDirectGeometry: function ( geometry ) {

  		var positions = new Float32Array( geometry.vertices.length * 3 );
  		this.setAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );

  		if ( geometry.normals.length > 0 ) {

  			var normals = new Float32Array( geometry.normals.length * 3 );
  			this.setAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );

  		}

  		if ( geometry.colors.length > 0 ) {

  			var colors = new Float32Array( geometry.colors.length * 3 );
  			this.setAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );

  		}

  		if ( geometry.uvs.length > 0 ) {

  			var uvs = new Float32Array( geometry.uvs.length * 2 );
  			this.setAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );

  		}

  		if ( geometry.uvs2.length > 0 ) {

  			var uvs2 = new Float32Array( geometry.uvs2.length * 2 );
  			this.setAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );

  		}

  		// groups

  		this.groups = geometry.groups;

  		// morphs

  		for ( var name in geometry.morphTargets ) {

  			var array = [];
  			var morphTargets = geometry.morphTargets[ name ];

  			for ( var i = 0, l = morphTargets.length; i < l; i ++ ) {

  				var morphTarget = morphTargets[ i ];

  				var attribute = new Float32BufferAttribute( morphTarget.data.length * 3, 3 );
  				attribute.name = morphTarget.name;

  				array.push( attribute.copyVector3sArray( morphTarget.data ) );

  			}

  			this.morphAttributes[ name ] = array;

  		}

  		// skinning

  		if ( geometry.skinIndices.length > 0 ) {

  			var skinIndices = new Float32BufferAttribute( geometry.skinIndices.length * 4, 4 );
  			this.setAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );

  		}

  		if ( geometry.skinWeights.length > 0 ) {

  			var skinWeights = new Float32BufferAttribute( geometry.skinWeights.length * 4, 4 );
  			this.setAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );

  		}

  		//

  		if ( geometry.boundingSphere !== null ) {

  			this.boundingSphere = geometry.boundingSphere.clone();

  		}

  		if ( geometry.boundingBox !== null ) {

  			this.boundingBox = geometry.boundingBox.clone();

  		}

  		return this;

  	},

  	computeBoundingBox: function () {

  		if ( this.boundingBox === null ) {

  			this.boundingBox = new Box3();

  		}

  		var position = this.attributes.position;
  		var morphAttributesPosition = this.morphAttributes.position;

  		if ( position !== undefined ) {

  			this.boundingBox.setFromBufferAttribute( position );

  			// process morph attributes if present

  			if ( morphAttributesPosition ) {

  				for ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {

  					var morphAttribute = morphAttributesPosition[ i ];
  					_box$2.setFromBufferAttribute( morphAttribute );

  					if ( this.morphTargetsRelative ) {

  						_vector$4.addVectors( this.boundingBox.min, _box$2.min );
  						this.boundingBox.expandByPoint( _vector$4 );

  						_vector$4.addVectors( this.boundingBox.max, _box$2.max );
  						this.boundingBox.expandByPoint( _vector$4 );

  					} else {

  						this.boundingBox.expandByPoint( _box$2.min );
  						this.boundingBox.expandByPoint( _box$2.max );

  					}

  				}

  			}

  		} else {

  			this.boundingBox.makeEmpty();

  		}

  		if ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {

  			console.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this );

  		}

  	},

  	computeBoundingSphere: function () {

  		if ( this.boundingSphere === null ) {

  			this.boundingSphere = new Sphere();

  		}

  		var position = this.attributes.position;
  		var morphAttributesPosition = this.morphAttributes.position;

  		if ( position ) {

  			// first, find the center of the bounding sphere

  			var center = this.boundingSphere.center;

  			_box$2.setFromBufferAttribute( position );

  			// process morph attributes if present

  			if ( morphAttributesPosition ) {

  				for ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {

  					var morphAttribute = morphAttributesPosition[ i ];
  					_boxMorphTargets.setFromBufferAttribute( morphAttribute );

  					if ( this.morphTargetsRelative ) {

  						_vector$4.addVectors( _box$2.min, _boxMorphTargets.min );
  						_box$2.expandByPoint( _vector$4 );

  						_vector$4.addVectors( _box$2.max, _boxMorphTargets.max );
  						_box$2.expandByPoint( _vector$4 );

  					} else {

  						_box$2.expandByPoint( _boxMorphTargets.min );
  						_box$2.expandByPoint( _boxMorphTargets.max );

  					}

  				}

  			}

  			_box$2.getCenter( center );

  			// second, try to find a boundingSphere with a radius smaller than the
  			// boundingSphere of the boundingBox: sqrt(3) smaller in the best case

  			var maxRadiusSq = 0;

  			for ( var i$1 = 0, il$1 = position.count; i$1 < il$1; i$1 ++ ) {

  				_vector$4.fromBufferAttribute( position, i$1 );

  				maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$4 ) );

  			}

  			// process morph attributes if present

  			if ( morphAttributesPosition ) {

  				for ( var i$2 = 0, il$2 = morphAttributesPosition.length; i$2 < il$2; i$2 ++ ) {

  					var morphAttribute$1 = morphAttributesPosition[ i$2 ];
  					var morphTargetsRelative = this.morphTargetsRelative;

  					for ( var j = 0, jl = morphAttribute$1.count; j < jl; j ++ ) {

  						_vector$4.fromBufferAttribute( morphAttribute$1, j );

  						if ( morphTargetsRelative ) {

  							_offset.fromBufferAttribute( position, j );
  							_vector$4.add( _offset );

  						}

  						maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$4 ) );

  					}

  				}

  			}

  			this.boundingSphere.radius = Math.sqrt( maxRadiusSq );

  			if ( isNaN( this.boundingSphere.radius ) ) {

  				console.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this );

  			}

  		}

  	},

  	computeFaceNormals: function () {

  		// backwards compatibility

  	},

  	computeVertexNormals: function () {

  		var index = this.index;
  		var positionAttribute = this.getAttribute( 'position' );

  		if ( positionAttribute !== undefined ) {

  			var normalAttribute = this.getAttribute( 'normal' );

  			if ( normalAttribute === undefined ) {

  				normalAttribute = new BufferAttribute( new Float32Array( positionAttribute.count * 3 ), 3 );
  				this.setAttribute( 'normal', normalAttribute );

  			} else {

  				// reset existing normals to zero

  				for ( var i = 0, il = normalAttribute.count; i < il; i ++ ) {

  					normalAttribute.setXYZ( i, 0, 0, 0 );

  				}

  			}

  			var pA = new Vector3(), pB = new Vector3(), pC = new Vector3();
  			var nA = new Vector3(), nB = new Vector3(), nC = new Vector3();
  			var cb = new Vector3(), ab = new Vector3();

  			// indexed elements

  			if ( index ) {

  				for ( var i$1 = 0, il$1 = index.count; i$1 < il$1; i$1 += 3 ) {

  					var vA = index.getX( i$1 + 0 );
  					var vB = index.getX( i$1 + 1 );
  					var vC = index.getX( i$1 + 2 );

  					pA.fromBufferAttribute( positionAttribute, vA );
  					pB.fromBufferAttribute( positionAttribute, vB );
  					pC.fromBufferAttribute( positionAttribute, vC );

  					cb.subVectors( pC, pB );
  					ab.subVectors( pA, pB );
  					cb.cross( ab );

  					nA.fromBufferAttribute( normalAttribute, vA );
  					nB.fromBufferAttribute( normalAttribute, vB );
  					nC.fromBufferAttribute( normalAttribute, vC );

  					nA.add( cb );
  					nB.add( cb );
  					nC.add( cb );

  					normalAttribute.setXYZ( vA, nA.x, nA.y, nA.z );
  					normalAttribute.setXYZ( vB, nB.x, nB.y, nB.z );
  					normalAttribute.setXYZ( vC, nC.x, nC.y, nC.z );

  				}

  			} else {

  				// non-indexed elements (unconnected triangle soup)

  				for ( var i$2 = 0, il$2 = positionAttribute.count; i$2 < il$2; i$2 += 3 ) {

  					pA.fromBufferAttribute( positionAttribute, i$2 + 0 );
  					pB.fromBufferAttribute( positionAttribute, i$2 + 1 );
  					pC.fromBufferAttribute( positionAttribute, i$2 + 2 );

  					cb.subVectors( pC, pB );
  					ab.subVectors( pA, pB );
  					cb.cross( ab );

  					normalAttribute.setXYZ( i$2 + 0, cb.x, cb.y, cb.z );
  					normalAttribute.setXYZ( i$2 + 1, cb.x, cb.y, cb.z );
  					normalAttribute.setXYZ( i$2 + 2, cb.x, cb.y, cb.z );

  				}

  			}

  			this.normalizeNormals();

  			normalAttribute.needsUpdate = true;

  		}

  	},

  	merge: function ( geometry, offset ) {

  		if ( ! ( geometry && geometry.isBufferGeometry ) ) {

  			console.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );
  			return;

  		}

  		if ( offset === undefined ) {

  			offset = 0;

  			console.warn(
  				'THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. '
  				+ 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.'
  			);

  		}

  		var attributes = this.attributes;

  		for ( var key in attributes ) {

  			if ( geometry.attributes[ key ] === undefined ) { continue; }

  			var attribute1 = attributes[ key ];
  			var attributeArray1 = attribute1.array;

  			var attribute2 = geometry.attributes[ key ];
  			var attributeArray2 = attribute2.array;

  			var attributeOffset = attribute2.itemSize * offset;
  			var length = Math.min( attributeArray2.length, attributeArray1.length - attributeOffset );

  			for ( var i = 0, j = attributeOffset; i < length; i ++, j ++ ) {

  				attributeArray1[ j ] = attributeArray2[ i ];

  			}

  		}

  		return this;

  	},

  	normalizeNormals: function () {

  		var normals = this.attributes.normal;

  		for ( var i = 0, il = normals.count; i < il; i ++ ) {

  			_vector$4.fromBufferAttribute( normals, i );

  			_vector$4.normalize();

  			normals.setXYZ( i, _vector$4.x, _vector$4.y, _vector$4.z );

  		}

  	},

  	toNonIndexed: function () {

  		function convertBufferAttribute( attribute, indices ) {

  			var array = attribute.array;
  			var itemSize = attribute.itemSize;
  			var normalized = attribute.normalized;

  			var array2 = new array.constructor( indices.length * itemSize );

  			var index = 0, index2 = 0;

  			for ( var i = 0, l = indices.length; i < l; i ++ ) {

  				index = indices[ i ] * itemSize;

  				for ( var j = 0; j < itemSize; j ++ ) {

  					array2[ index2 ++ ] = array[ index ++ ];

  				}

  			}

  			return new BufferAttribute( array2, itemSize, normalized );

  		}

  		//

  		if ( this.index === null ) {

  			console.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );
  			return this;

  		}

  		var geometry2 = new BufferGeometry();

  		var indices = this.index.array;
  		var attributes = this.attributes;

  		// attributes

  		for ( var name in attributes ) {

  			var attribute = attributes[ name ];

  			var newAttribute = convertBufferAttribute( attribute, indices );

  			geometry2.setAttribute( name, newAttribute );

  		}

  		// morph attributes

  		var morphAttributes = this.morphAttributes;

  		for ( var name$1 in morphAttributes ) {

  			var morphArray = [];
  			var morphAttribute = morphAttributes[ name$1 ]; // morphAttribute: array of Float32BufferAttributes

  			for ( var i = 0, il = morphAttribute.length; i < il; i ++ ) {

  				var attribute$1 = morphAttribute[ i ];

  				var newAttribute$1 = convertBufferAttribute( attribute$1, indices );

  				morphArray.push( newAttribute$1 );

  			}

  			geometry2.morphAttributes[ name$1 ] = morphArray;

  		}

  		geometry2.morphTargetsRelative = this.morphTargetsRelative;

  		// groups

  		var groups = this.groups;

  		for ( var i$1 = 0, l = groups.length; i$1 < l; i$1 ++ ) {

  			var group = groups[ i$1 ];
  			geometry2.addGroup( group.start, group.count, group.materialIndex );

  		}

  		return geometry2;

  	},

  	toJSON: function () {

  		var data = {
  			metadata: {
  				version: 4.5,
  				type: 'BufferGeometry',
  				generator: 'BufferGeometry.toJSON'
  			}
  		};

  		// standard BufferGeometry serialization

  		data.uuid = this.uuid;
  		data.type = this.type;
  		if ( this.name !== '' ) { data.name = this.name; }
  		if ( Object.keys( this.userData ).length > 0 ) { data.userData = this.userData; }

  		if ( this.parameters !== undefined ) {

  			var parameters = this.parameters;

  			for ( var key in parameters ) {

  				if ( parameters[ key ] !== undefined ) { data[ key ] = parameters[ key ]; }

  			}

  			return data;

  		}

  		data.data = { attributes: {} };

  		var index = this.index;

  		if ( index !== null ) {

  			data.data.index = {
  				type: index.array.constructor.name,
  				array: Array.prototype.slice.call( index.array )
  			};

  		}

  		var attributes = this.attributes;

  		for ( var key$1 in attributes ) {

  			var attribute = attributes[ key$1 ];

  			var attributeData = attribute.toJSON( data.data );

  			if ( attribute.name !== '' ) { attributeData.name = attribute.name; }

  			data.data.attributes[ key$1 ] = attributeData;

  		}

  		var morphAttributes = {};
  		var hasMorphAttributes = false;

  		for ( var key$2 in this.morphAttributes ) {

  			var attributeArray = this.morphAttributes[ key$2 ];

  			var array = [];

  			for ( var i = 0, il = attributeArray.length; i < il; i ++ ) {

  				var attribute$1 = attributeArray[ i ];

  				var attributeData$1 = attribute$1.toJSON( data.data );

  				if ( attribute$1.name !== '' ) { attributeData$1.name = attribute$1.name; }

  				array.push( attributeData$1 );

  			}

  			if ( array.length > 0 ) {

  				morphAttributes[ key$2 ] = array;

  				hasMorphAttributes = true;

  			}

  		}

  		if ( hasMorphAttributes ) {

  			data.data.morphAttributes = morphAttributes;
  			data.data.morphTargetsRelative = this.morphTargetsRelative;

  		}

  		var groups = this.groups;

  		if ( groups.length > 0 ) {

  			data.data.groups = JSON.parse( JSON.stringify( groups ) );

  		}

  		var boundingSphere = this.boundingSphere;

  		if ( boundingSphere !== null ) {

  			data.data.boundingSphere = {
  				center: boundingSphere.center.toArray(),
  				radius: boundingSphere.radius
  			};

  		}

  		return data;

  	},

  	clone: function () {

  		/*
  		 // Handle primitives

  		 const parameters = this.parameters;

  		 if ( parameters !== undefined ) {

  		 const values = [];

  		 for ( const key in parameters ) {

  		 values.push( parameters[ key ] );

  		 }

  		 const geometry = Object.create( this.constructor.prototype );
  		 this.constructor.apply( geometry, values );
  		 return geometry;

  		 }

  		 return new this.constructor().copy( this );
  		 */

  		return new BufferGeometry().copy( this );

  	},

  	copy: function ( source ) {

  		// reset

  		this.index = null;
  		this.attributes = {};
  		this.morphAttributes = {};
  		this.groups = [];
  		this.boundingBox = null;
  		this.boundingSphere = null;

  		// used for storing cloned, shared data

  		var data = {};

  		// name

  		this.name = source.name;

  		// index

  		var index = source.index;

  		if ( index !== null ) {

  			this.setIndex( index.clone( data ) );

  		}

  		// attributes

  		var attributes = source.attributes;

  		for ( var name in attributes ) {

  			var attribute = attributes[ name ];
  			this.setAttribute( name, attribute.clone( data ) );

  		}

  		// morph attributes

  		var morphAttributes = source.morphAttributes;

  		for ( var name$1 in morphAttributes ) {

  			var array = [];
  			var morphAttribute = morphAttributes[ name$1 ]; // morphAttribute: array of Float32BufferAttributes

  			for ( var i = 0, l = morphAttribute.length; i < l; i ++ ) {

  				array.push( morphAttribute[ i ].clone( data ) );

  			}

  			this.morphAttributes[ name$1 ] = array;

  		}

  		this.morphTargetsRelative = source.morphTargetsRelative;

  		// groups

  		var groups = source.groups;

  		for ( var i$1 = 0, l$1 = groups.length; i$1 < l$1; i$1 ++ ) {

  			var group = groups[ i$1 ];
  			this.addGroup( group.start, group.count, group.materialIndex );

  		}

  		// bounding box

  		var boundingBox = source.boundingBox;

  		if ( boundingBox !== null ) {

  			this.boundingBox = boundingBox.clone();

  		}

  		// bounding sphere

  		var boundingSphere = source.boundingSphere;

  		if ( boundingSphere !== null ) {

  			this.boundingSphere = boundingSphere.clone();

  		}

  		// draw range

  		this.drawRange.start = source.drawRange.start;
  		this.drawRange.count = source.drawRange.count;

  		// user data

  		this.userData = source.userData;

  		return this;

  	},

  	dispose: function () {

  		this.dispatchEvent( { type: 'dispose' } );

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author alteredq / http://alteredqualia.com/
   * @author mikael emtinger / http://gomo.se/
   * @author jonobr1 / http://jonobr1.com/
   */

  var _inverseMatrix = new Matrix4();
  var _ray = new Ray();
  var _sphere = new Sphere();

  var _vA = new Vector3();
  var _vB = new Vector3();
  var _vC = new Vector3();

  var _tempA = new Vector3();
  var _tempB = new Vector3();
  var _tempC = new Vector3();

  var _morphA = new Vector3();
  var _morphB = new Vector3();
  var _morphC = new Vector3();

  var _uvA = new Vector2();
  var _uvB = new Vector2();
  var _uvC = new Vector2();

  var _intersectionPoint = new Vector3();
  var _intersectionPointWorld = new Vector3();

  function Mesh( geometry, material ) {

  	Object3D.call( this );

  	this.type = 'Mesh';

  	this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
  	this.material = material !== undefined ? material : new MeshBasicMaterial();

  	this.updateMorphTargets();

  }

  Mesh.prototype = Object.assign( Object.create( Object3D.prototype ), {

  	constructor: Mesh,

  	isMesh: true,

  	copy: function ( source ) {

  		Object3D.prototype.copy.call( this, source );

  		if ( source.morphTargetInfluences !== undefined ) {

  			this.morphTargetInfluences = source.morphTargetInfluences.slice();

  		}

  		if ( source.morphTargetDictionary !== undefined ) {

  			this.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );

  		}

  		this.material = source.material;
  		this.geometry = source.geometry;

  		return this;

  	},

  	updateMorphTargets: function () {

  		var geometry = this.geometry;

  		if ( geometry.isBufferGeometry ) {

  			var morphAttributes = geometry.morphAttributes;
  			var keys = Object.keys( morphAttributes );

  			if ( keys.length > 0 ) {

  				var morphAttribute = morphAttributes[ keys[ 0 ] ];

  				if ( morphAttribute !== undefined ) {

  					this.morphTargetInfluences = [];
  					this.morphTargetDictionary = {};

  					for ( var m = 0, ml = morphAttribute.length; m < ml; m ++ ) {

  						var name = morphAttribute[ m ].name || String( m );

  						this.morphTargetInfluences.push( 0 );
  						this.morphTargetDictionary[ name ] = m;

  					}

  				}

  			}

  		} else {

  			var morphTargets = geometry.morphTargets;

  			if ( morphTargets !== undefined && morphTargets.length > 0 ) {

  				console.error( 'THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );

  			}

  		}

  	},

  	raycast: function ( raycaster, intersects ) {

  		var geometry = this.geometry;
  		var material = this.material;
  		var matrixWorld = this.matrixWorld;

  		if ( material === undefined ) { return; }

  		// Checking boundingSphere distance to ray

  		if ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }

  		_sphere.copy( geometry.boundingSphere );
  		_sphere.applyMatrix4( matrixWorld );

  		if ( raycaster.ray.intersectsSphere( _sphere ) === false ) { return; }

  		//

  		_inverseMatrix.getInverse( matrixWorld );
  		_ray.copy( raycaster.ray ).applyMatrix4( _inverseMatrix );

  		// Check boundingBox before continuing

  		if ( geometry.boundingBox !== null ) {

  			if ( _ray.intersectsBox( geometry.boundingBox ) === false ) { return; }

  		}

  		var intersection;

  		if ( geometry.isBufferGeometry ) {

  			var index = geometry.index;
  			var position = geometry.attributes.position;
  			var morphPosition = geometry.morphAttributes.position;
  			var morphTargetsRelative = geometry.morphTargetsRelative;
  			var uv = geometry.attributes.uv;
  			var uv2 = geometry.attributes.uv2;
  			var groups = geometry.groups;
  			var drawRange = geometry.drawRange;

  			if ( index !== null ) {

  				// indexed buffer geometry

  				if ( Array.isArray( material ) ) {

  					for ( var i = 0, il = groups.length; i < il; i ++ ) {

  						var group = groups[ i ];
  						var groupMaterial = material[ group.materialIndex ];

  						var start = Math.max( group.start, drawRange.start );
  						var end = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );

  						for ( var j = start, jl = end; j < jl; j += 3 ) {

  							var a = index.getX( j );
  							var b = index.getX( j + 1 );
  							var c = index.getX( j + 2 );

  							intersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );

  							if ( intersection ) {

  								intersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics
  								intersection.face.materialIndex = group.materialIndex;
  								intersects.push( intersection );

  							}

  						}

  					}

  				} else {

  					var start$1 = Math.max( 0, drawRange.start );
  					var end$1 = Math.min( index.count, ( drawRange.start + drawRange.count ) );

  					for ( var i$1 = start$1, il$1 = end$1; i$1 < il$1; i$1 += 3 ) {

  						var a$1 = index.getX( i$1 );
  						var b$1 = index.getX( i$1 + 1 );
  						var c$1 = index.getX( i$1 + 2 );

  						intersection = checkBufferGeometryIntersection( this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a$1, b$1, c$1 );

  						if ( intersection ) {

  							intersection.faceIndex = Math.floor( i$1 / 3 ); // triangle number in indexed buffer semantics
  							intersects.push( intersection );

  						}

  					}

  				}

  			} else if ( position !== undefined ) {

  				// non-indexed buffer geometry

  				if ( Array.isArray( material ) ) {

  					for ( var i$2 = 0, il$2 = groups.length; i$2 < il$2; i$2 ++ ) {

  						var group$1 = groups[ i$2 ];
  						var groupMaterial$1 = material[ group$1.materialIndex ];

  						var start$2 = Math.max( group$1.start, drawRange.start );
  						var end$2 = Math.min( ( group$1.start + group$1.count ), ( drawRange.start + drawRange.count ) );

  						for ( var j$1 = start$2, jl$1 = end$2; j$1 < jl$1; j$1 += 3 ) {

  							var a$2 = j$1;
  							var b$2 = j$1 + 1;
  							var c$2 = j$1 + 2;

  							intersection = checkBufferGeometryIntersection( this, groupMaterial$1, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a$2, b$2, c$2 );

  							if ( intersection ) {

  								intersection.faceIndex = Math.floor( j$1 / 3 ); // triangle number in non-indexed buffer semantics
  								intersection.face.materialIndex = group$1.materialIndex;
  								intersects.push( intersection );

  							}

  						}

  					}

  				} else {

  					var start$3 = Math.max( 0, drawRange.start );
  					var end$3 = Math.min( position.count, ( drawRange.start + drawRange.count ) );

  					for ( var i$3 = start$3, il$3 = end$3; i$3 < il$3; i$3 += 3 ) {

  						var a$3 = i$3;
  						var b$3 = i$3 + 1;
  						var c$3 = i$3 + 2;

  						intersection = checkBufferGeometryIntersection( this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a$3, b$3, c$3 );

  						if ( intersection ) {

  							intersection.faceIndex = Math.floor( i$3 / 3 ); // triangle number in non-indexed buffer semantics
  							intersects.push( intersection );

  						}

  					}

  				}

  			}

  		} else if ( geometry.isGeometry ) {

  			var isMultiMaterial = Array.isArray( material );

  			var vertices = geometry.vertices;
  			var faces = geometry.faces;
  			var uvs;

  			var faceVertexUvs = geometry.faceVertexUvs[ 0 ];
  			if ( faceVertexUvs.length > 0 ) { uvs = faceVertexUvs; }

  			for ( var f = 0, fl = faces.length; f < fl; f ++ ) {

  				var face = faces[ f ];
  				var faceMaterial = isMultiMaterial ? material[ face.materialIndex ] : material;

  				if ( faceMaterial === undefined ) { continue; }

  				var fvA = vertices[ face.a ];
  				var fvB = vertices[ face.b ];
  				var fvC = vertices[ face.c ];

  				intersection = checkIntersection( this, faceMaterial, raycaster, _ray, fvA, fvB, fvC, _intersectionPoint );

  				if ( intersection ) {

  					if ( uvs && uvs[ f ] ) {

  						var uvs_f = uvs[ f ];
  						_uvA.copy( uvs_f[ 0 ] );
  						_uvB.copy( uvs_f[ 1 ] );
  						_uvC.copy( uvs_f[ 2 ] );

  						intersection.uv = Triangle.getUV( _intersectionPoint, fvA, fvB, fvC, _uvA, _uvB, _uvC, new Vector2() );

  					}

  					intersection.face = face;
  					intersection.faceIndex = f;
  					intersects.push( intersection );

  				}

  			}

  		}

  	}

  } );

  function checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {

  	var intersect;

  	if ( material.side === BackSide ) {

  		intersect = ray.intersectTriangle( pC, pB, pA, true, point );

  	} else {

  		intersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );

  	}

  	if ( intersect === null ) { return null; }

  	_intersectionPointWorld.copy( point );
  	_intersectionPointWorld.applyMatrix4( object.matrixWorld );

  	var distance = raycaster.ray.origin.distanceTo( _intersectionPointWorld );

  	if ( distance < raycaster.near || distance > raycaster.far ) { return null; }

  	return {
  		distance: distance,
  		point: _intersectionPointWorld.clone(),
  		object: object
  	};

  }

  function checkBufferGeometryIntersection( object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c ) {

  	_vA.fromBufferAttribute( position, a );
  	_vB.fromBufferAttribute( position, b );
  	_vC.fromBufferAttribute( position, c );

  	var morphInfluences = object.morphTargetInfluences;

  	if ( material.morphTargets && morphPosition && morphInfluences ) {

  		_morphA.set( 0, 0, 0 );
  		_morphB.set( 0, 0, 0 );
  		_morphC.set( 0, 0, 0 );

  		for ( var i = 0, il = morphPosition.length; i < il; i ++ ) {

  			var influence = morphInfluences[ i ];
  			var morphAttribute = morphPosition[ i ];

  			if ( influence === 0 ) { continue; }

  			_tempA.fromBufferAttribute( morphAttribute, a );
  			_tempB.fromBufferAttribute( morphAttribute, b );
  			_tempC.fromBufferAttribute( morphAttribute, c );

  			if ( morphTargetsRelative ) {

  				_morphA.addScaledVector( _tempA, influence );
  				_morphB.addScaledVector( _tempB, influence );
  				_morphC.addScaledVector( _tempC, influence );

  			} else {

  				_morphA.addScaledVector( _tempA.sub( _vA ), influence );
  				_morphB.addScaledVector( _tempB.sub( _vB ), influence );
  				_morphC.addScaledVector( _tempC.sub( _vC ), influence );

  			}

  		}

  		_vA.add( _morphA );
  		_vB.add( _morphB );
  		_vC.add( _morphC );

  	}

  	if ( object.isSkinnedMesh ) {

  		object.boneTransform( a, _vA );
  		object.boneTransform( b, _vB );
  		object.boneTransform( c, _vC );

  	}

  	var intersection = checkIntersection( object, material, raycaster, ray, _vA, _vB, _vC, _intersectionPoint );

  	if ( intersection ) {

  		if ( uv ) {

  			_uvA.fromBufferAttribute( uv, a );
  			_uvB.fromBufferAttribute( uv, b );
  			_uvC.fromBufferAttribute( uv, c );

  			intersection.uv = Triangle.getUV( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );

  		}

  		if ( uv2 ) {

  			_uvA.fromBufferAttribute( uv2, a );
  			_uvB.fromBufferAttribute( uv2, b );
  			_uvC.fromBufferAttribute( uv2, c );

  			intersection.uv2 = Triangle.getUV( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );

  		}

  		var face = new Face3( a, b, c );
  		Triangle.getNormal( _vA, _vB, _vC, face.normal );

  		intersection.face = face;

  	}

  	return intersection;

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author kile / http://kile.stravaganza.org/
   * @author alteredq / http://alteredqualia.com/
   * @author mikael emtinger / http://gomo.se/
   * @author zz85 / http://www.lab4games.net/zz85/blog
   * @author bhouston / http://clara.io
   */

  var _geometryId = 0; // Geometry uses even numbers as Id
  var _m1$3 = new Matrix4();
  var _obj$1 = new Object3D();
  var _offset$1 = new Vector3();

  function Geometry() {

  	Object.defineProperty( this, 'id', { value: _geometryId += 2 } );

  	this.uuid = MathUtils.generateUUID();

  	this.name = '';
  	this.type = 'Geometry';

  	this.vertices = [];
  	this.colors = [];
  	this.faces = [];
  	this.faceVertexUvs = [[]];

  	this.morphTargets = [];
  	this.morphNormals = [];

  	this.skinWeights = [];
  	this.skinIndices = [];

  	this.lineDistances = [];

  	this.boundingBox = null;
  	this.boundingSphere = null;

  	// update flags

  	this.elementsNeedUpdate = false;
  	this.verticesNeedUpdate = false;
  	this.uvsNeedUpdate = false;
  	this.normalsNeedUpdate = false;
  	this.colorsNeedUpdate = false;
  	this.lineDistancesNeedUpdate = false;
  	this.groupsNeedUpdate = false;

  }

  Geometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

  	constructor: Geometry,

  	isGeometry: true,

  	applyMatrix4: function ( matrix ) {

  		var normalMatrix = new Matrix3().getNormalMatrix( matrix );

  		for ( var i = 0, il = this.vertices.length; i < il; i ++ ) {

  			var vertex = this.vertices[ i ];
  			vertex.applyMatrix4( matrix );

  		}

  		for ( var i$1 = 0, il$1 = this.faces.length; i$1 < il$1; i$1 ++ ) {

  			var face = this.faces[ i$1 ];
  			face.normal.applyMatrix3( normalMatrix ).normalize();

  			for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {

  				face.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();

  			}

  		}

  		if ( this.boundingBox !== null ) {

  			this.computeBoundingBox();

  		}

  		if ( this.boundingSphere !== null ) {

  			this.computeBoundingSphere();

  		}

  		this.verticesNeedUpdate = true;
  		this.normalsNeedUpdate = true;

  		return this;

  	},

  	rotateX: function ( angle ) {

  		// rotate geometry around world x-axis

  		_m1$3.makeRotationX( angle );

  		this.applyMatrix4( _m1$3 );

  		return this;

  	},

  	rotateY: function ( angle ) {

  		// rotate geometry around world y-axis

  		_m1$3.makeRotationY( angle );

  		this.applyMatrix4( _m1$3 );

  		return this;

  	},

  	rotateZ: function ( angle ) {

  		// rotate geometry around world z-axis

  		_m1$3.makeRotationZ( angle );

  		this.applyMatrix4( _m1$3 );

  		return this;

  	},

  	translate: function ( x, y, z ) {

  		// translate geometry

  		_m1$3.makeTranslation( x, y, z );

  		this.applyMatrix4( _m1$3 );

  		return this;

  	},

  	scale: function ( x, y, z ) {

  		// scale geometry

  		_m1$3.makeScale( x, y, z );

  		this.applyMatrix4( _m1$3 );

  		return this;

  	},

  	lookAt: function ( vector ) {

  		_obj$1.lookAt( vector );

  		_obj$1.updateMatrix();

  		this.applyMatrix4( _obj$1.matrix );

  		return this;

  	},

  	fromBufferGeometry: function ( geometry ) {

  		var scope = this;

  		var index = geometry.index !== null ? geometry.index : undefined;
  		var attributes = geometry.attributes;

  		if ( attributes.position === undefined ) {

  			console.error( 'THREE.Geometry.fromBufferGeometry(): Position attribute required for conversion.' );
  			return this;

  		}

  		var position = attributes.position;
  		var normal = attributes.normal;
  		var color = attributes.color;
  		var uv = attributes.uv;
  		var uv2 = attributes.uv2;

  		if ( uv2 !== undefined ) { this.faceVertexUvs[ 1 ] = []; }

  		for ( var i = 0; i < position.count; i ++ ) {

  			scope.vertices.push( new Vector3().fromBufferAttribute( position, i ) );

  			if ( color !== undefined ) {

  				scope.colors.push( new Color().fromBufferAttribute( color, i ) );

  			}

  		}

  		function addFace( a, b, c, materialIndex ) {

  			var vertexColors = ( color === undefined ) ? [] : [
  				scope.colors[ a ].clone(),
  				scope.colors[ b ].clone(),
  				scope.colors[ c ].clone()
  			];

  			var vertexNormals = ( normal === undefined ) ? [] : [
  				new Vector3().fromBufferAttribute( normal, a ),
  				new Vector3().fromBufferAttribute( normal, b ),
  				new Vector3().fromBufferAttribute( normal, c )
  			];

  			var face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );

  			scope.faces.push( face );

  			if ( uv !== undefined ) {

  				scope.faceVertexUvs[ 0 ].push( [
  					new Vector2().fromBufferAttribute( uv, a ),
  					new Vector2().fromBufferAttribute( uv, b ),
  					new Vector2().fromBufferAttribute( uv, c )
  				] );

  			}

  			if ( uv2 !== undefined ) {

  				scope.faceVertexUvs[ 1 ].push( [
  					new Vector2().fromBufferAttribute( uv2, a ),
  					new Vector2().fromBufferAttribute( uv2, b ),
  					new Vector2().fromBufferAttribute( uv2, c )
  				] );

  			}

  		}

  		var groups = geometry.groups;

  		if ( groups.length > 0 ) {

  			for ( var i$1 = 0; i$1 < groups.length; i$1 ++ ) {

  				var group = groups[ i$1 ];

  				var start = group.start;
  				var count = group.count;

  				for ( var j = start, jl = start + count; j < jl; j += 3 ) {

  					if ( index !== undefined ) {

  						addFace( index.getX( j ), index.getX( j + 1 ), index.getX( j + 2 ), group.materialIndex );

  					} else {

  						addFace( j, j + 1, j + 2, group.materialIndex );

  					}

  				}

  			}

  		} else {

  			if ( index !== undefined ) {

  				for ( var i$2 = 0; i$2 < index.count; i$2 += 3 ) {

  					addFace( index.getX( i$2 ), index.getX( i$2 + 1 ), index.getX( i$2 + 2 ) );

  				}

  			} else {

  				for ( var i$3 = 0; i$3 < position.count; i$3 += 3 ) {

  					addFace( i$3, i$3 + 1, i$3 + 2 );

  				}

  			}

  		}

  		this.computeFaceNormals();

  		if ( geometry.boundingBox !== null ) {

  			this.boundingBox = geometry.boundingBox.clone();

  		}

  		if ( geometry.boundingSphere !== null ) {

  			this.boundingSphere = geometry.boundingSphere.clone();

  		}

  		return this;

  	},

  	center: function () {

  		this.computeBoundingBox();

  		this.boundingBox.getCenter( _offset$1 ).negate();

  		this.translate( _offset$1.x, _offset$1.y, _offset$1.z );

  		return this;

  	},

  	normalize: function () {

  		this.computeBoundingSphere();

  		var center = this.boundingSphere.center;
  		var radius = this.boundingSphere.radius;

  		var s = radius === 0 ? 1 : 1.0 / radius;

  		var matrix = new Matrix4();
  		matrix.set(
  			s, 0, 0, - s * center.x,
  			0, s, 0, - s * center.y,
  			0, 0, s, - s * center.z,
  			0, 0, 0, 1
  		);

  		this.applyMatrix4( matrix );

  		return this;

  	},

  	computeFaceNormals: function () {

  		var cb = new Vector3(), ab = new Vector3();

  		for ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {

  			var face = this.faces[ f ];

  			var vA = this.vertices[ face.a ];
  			var vB = this.vertices[ face.b ];
  			var vC = this.vertices[ face.c ];

  			cb.subVectors( vC, vB );
  			ab.subVectors( vA, vB );
  			cb.cross( ab );

  			cb.normalize();

  			face.normal.copy( cb );

  		}

  	},

  	computeVertexNormals: function ( areaWeighted ) {

  		if ( areaWeighted === undefined ) { areaWeighted = true; }

  		var vertices = new Array( this.vertices.length );

  		for ( var v = 0, vl = this.vertices.length; v < vl; v ++ ) {

  			vertices[ v ] = new Vector3();

  		}

  		if ( areaWeighted ) {

  			// vertex normals weighted by triangle areas
  			// http://www.iquilezles.org/www/articles/normals/normals.htm

  			var cb = new Vector3(), ab = new Vector3();

  			for ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {

  				var face = this.faces[ f ];

  				var vA = this.vertices[ face.a ];
  				var vB = this.vertices[ face.b ];
  				var vC = this.vertices[ face.c ];

  				cb.subVectors( vC, vB );
  				ab.subVectors( vA, vB );
  				cb.cross( ab );

  				vertices[ face.a ].add( cb );
  				vertices[ face.b ].add( cb );
  				vertices[ face.c ].add( cb );

  			}

  		} else {

  			this.computeFaceNormals();

  			for ( var f$1 = 0, fl$1 = this.faces.length; f$1 < fl$1; f$1 ++ ) {

  				var face$1 = this.faces[ f$1 ];

  				vertices[ face$1.a ].add( face$1.normal );
  				vertices[ face$1.b ].add( face$1.normal );
  				vertices[ face$1.c ].add( face$1.normal );

  			}

  		}

  		for ( var v$1 = 0, vl$1 = this.vertices.length; v$1 < vl$1; v$1 ++ ) {

  			vertices[ v$1 ].normalize();

  		}

  		for ( var f$2 = 0, fl$2 = this.faces.length; f$2 < fl$2; f$2 ++ ) {

  			var face$2 = this.faces[ f$2 ];

  			var vertexNormals = face$2.vertexNormals;

  			if ( vertexNormals.length === 3 ) {

  				vertexNormals[ 0 ].copy( vertices[ face$2.a ] );
  				vertexNormals[ 1 ].copy( vertices[ face$2.b ] );
  				vertexNormals[ 2 ].copy( vertices[ face$2.c ] );

  			} else {

  				vertexNormals[ 0 ] = vertices[ face$2.a ].clone();
  				vertexNormals[ 1 ] = vertices[ face$2.b ].clone();
  				vertexNormals[ 2 ] = vertices[ face$2.c ].clone();

  			}

  		}

  		if ( this.faces.length > 0 ) {

  			this.normalsNeedUpdate = true;

  		}

  	},

  	computeFlatVertexNormals: function () {

  		this.computeFaceNormals();

  		for ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {

  			var face = this.faces[ f ];

  			var vertexNormals = face.vertexNormals;

  			if ( vertexNormals.length === 3 ) {

  				vertexNormals[ 0 ].copy( face.normal );
  				vertexNormals[ 1 ].copy( face.normal );
  				vertexNormals[ 2 ].copy( face.normal );

  			} else {

  				vertexNormals[ 0 ] = face.normal.clone();
  				vertexNormals[ 1 ] = face.normal.clone();
  				vertexNormals[ 2 ] = face.normal.clone();

  			}

  		}

  		if ( this.faces.length > 0 ) {

  			this.normalsNeedUpdate = true;

  		}

  	},

  	computeMorphNormals: function () {

  		// save original normals
  		// - create temp variables on first access
  		//   otherwise just copy (for faster repeated calls)

  		for ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {

  			var face = this.faces[ f ];

  			if ( ! face.__originalFaceNormal ) {

  				face.__originalFaceNormal = face.normal.clone();

  			} else {

  				face.__originalFaceNormal.copy( face.normal );

  			}

  			if ( ! face.__originalVertexNormals ) { face.__originalVertexNormals = []; }

  			for ( var i = 0, il = face.vertexNormals.length; i < il; i ++ ) {

  				if ( ! face.__originalVertexNormals[ i ] ) {

  					face.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();

  				} else {

  					face.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );

  				}

  			}

  		}

  		// use temp geometry to compute face and vertex normals for each morph

  		var tmpGeo = new Geometry();
  		tmpGeo.faces = this.faces;

  		for ( var i$1 = 0, il$1 = this.morphTargets.length; i$1 < il$1; i$1 ++ ) {

  			// create on first access

  			if ( ! this.morphNormals[ i$1 ] ) {

  				this.morphNormals[ i$1 ] = {};
  				this.morphNormals[ i$1 ].faceNormals = [];
  				this.morphNormals[ i$1 ].vertexNormals = [];

  				var dstNormalsFace = this.morphNormals[ i$1 ].faceNormals;
  				var dstNormalsVertex = this.morphNormals[ i$1 ].vertexNormals;

  				for ( var f$1 = 0, fl$1 = this.faces.length; f$1 < fl$1; f$1 ++ ) {

  					var faceNormal = new Vector3();
  					var vertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };

  					dstNormalsFace.push( faceNormal );
  					dstNormalsVertex.push( vertexNormals );

  				}

  			}

  			var morphNormals = this.morphNormals[ i$1 ];

  			// set vertices to morph target

  			tmpGeo.vertices = this.morphTargets[ i$1 ].vertices;

  			// compute morph normals

  			tmpGeo.computeFaceNormals();
  			tmpGeo.computeVertexNormals();

  			// store morph normals

  			for ( var f$2 = 0, fl$2 = this.faces.length; f$2 < fl$2; f$2 ++ ) {

  				var face$1 = this.faces[ f$2 ];

  				var faceNormal$1 = morphNormals.faceNormals[ f$2 ];
  				var vertexNormals$1 = morphNormals.vertexNormals[ f$2 ];

  				faceNormal$1.copy( face$1.normal );

  				vertexNormals$1.a.copy( face$1.vertexNormals[ 0 ] );
  				vertexNormals$1.b.copy( face$1.vertexNormals[ 1 ] );
  				vertexNormals$1.c.copy( face$1.vertexNormals[ 2 ] );

  			}

  		}

  		// restore original normals

  		for ( var f$3 = 0, fl$3 = this.faces.length; f$3 < fl$3; f$3 ++ ) {

  			var face$2 = this.faces[ f$3 ];

  			face$2.normal = face$2.__originalFaceNormal;
  			face$2.vertexNormals = face$2.__originalVertexNormals;

  		}

  	},

  	computeBoundingBox: function () {

  		if ( this.boundingBox === null ) {

  			this.boundingBox = new Box3();

  		}

  		this.boundingBox.setFromPoints( this.vertices );

  	},

  	computeBoundingSphere: function () {

  		if ( this.boundingSphere === null ) {

  			this.boundingSphere = new Sphere();

  		}

  		this.boundingSphere.setFromPoints( this.vertices );

  	},

  	merge: function ( geometry, matrix, materialIndexOffset ) {

  		if ( ! ( geometry && geometry.isGeometry ) ) {

  			console.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );
  			return;

  		}

  		var normalMatrix,
  			vertexOffset = this.vertices.length,
  			vertices1 = this.vertices,
  			vertices2 = geometry.vertices,
  			faces1 = this.faces,
  			faces2 = geometry.faces,
  			colors1 = this.colors,
  			colors2 = geometry.colors;

  		if ( materialIndexOffset === undefined ) { materialIndexOffset = 0; }

  		if ( matrix !== undefined ) {

  			normalMatrix = new Matrix3().getNormalMatrix( matrix );

  		}

  		// vertices

  		for ( var i = 0, il = vertices2.length; i < il; i ++ ) {

  			var vertex = vertices2[ i ];

  			var vertexCopy = vertex.clone();

  			if ( matrix !== undefined ) { vertexCopy.applyMatrix4( matrix ); }

  			vertices1.push( vertexCopy );

  		}

  		// colors

  		for ( var i$1 = 0, il$1 = colors2.length; i$1 < il$1; i$1 ++ ) {

  			colors1.push( colors2[ i$1 ].clone() );

  		}

  		// faces

  		for ( var i$2 = 0, il$2 = faces2.length; i$2 < il$2; i$2 ++ ) {

  			var face = faces2[ i$2 ], faceCopy = (void 0), normal = (void 0), color = (void 0),
  				faceVertexNormals = face.vertexNormals,
  				faceVertexColors = face.vertexColors;

  			faceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );
  			faceCopy.normal.copy( face.normal );

  			if ( normalMatrix !== undefined ) {

  				faceCopy.normal.applyMatrix3( normalMatrix ).normalize();

  			}

  			for ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {

  				normal = faceVertexNormals[ j ].clone();

  				if ( normalMatrix !== undefined ) {

  					normal.applyMatrix3( normalMatrix ).normalize();

  				}

  				faceCopy.vertexNormals.push( normal );

  			}

  			faceCopy.color.copy( face.color );

  			for ( var j$1 = 0, jl$1 = faceVertexColors.length; j$1 < jl$1; j$1 ++ ) {

  				color = faceVertexColors[ j$1 ];
  				faceCopy.vertexColors.push( color.clone() );

  			}

  			faceCopy.materialIndex = face.materialIndex + materialIndexOffset;

  			faces1.push( faceCopy );

  		}

  		// uvs

  		for ( var i$3 = 0, il$3 = geometry.faceVertexUvs.length; i$3 < il$3; i$3 ++ ) {

  			var faceVertexUvs2 = geometry.faceVertexUvs[ i$3 ];

  			if ( this.faceVertexUvs[ i$3 ] === undefined ) { this.faceVertexUvs[ i$3 ] = []; }

  			for ( var j$2 = 0, jl$2 = faceVertexUvs2.length; j$2 < jl$2; j$2 ++ ) {

  				var uvs2 = faceVertexUvs2[ j$2 ], uvsCopy = [];

  				for ( var k = 0, kl = uvs2.length; k < kl; k ++ ) {

  					uvsCopy.push( uvs2[ k ].clone() );

  				}

  				this.faceVertexUvs[ i$3 ].push( uvsCopy );

  			}

  		}

  	},

  	mergeMesh: function ( mesh ) {

  		if ( ! ( mesh && mesh.isMesh ) ) {

  			console.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );
  			return;

  		}

  		if ( mesh.matrixAutoUpdate ) { mesh.updateMatrix(); }

  		this.merge( mesh.geometry, mesh.matrix );

  	},

  	/*
  	 * Checks for duplicate vertices with hashmap.
  	 * Duplicated vertices are removed
  	 * and faces' vertices are updated.
  	 */

  	mergeVertices: function () {

  		var verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)
  		var unique = [], changes = [];

  		var precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001
  		var precision = Math.pow( 10, precisionPoints );

  		for ( var i = 0, il = this.vertices.length; i < il; i ++ ) {

  			var v = this.vertices[ i ];
  			var key = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );

  			if ( verticesMap[ key ] === undefined ) {

  				verticesMap[ key ] = i;
  				unique.push( this.vertices[ i ] );
  				changes[ i ] = unique.length - 1;

  			} else {

  				//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);
  				changes[ i ] = changes[ verticesMap[ key ] ];

  			}

  		}


  		// if faces are completely degenerate after merging vertices, we
  		// have to remove them from the geometry.
  		var faceIndicesToRemove = [];

  		for ( var i$1 = 0, il$1 = this.faces.length; i$1 < il$1; i$1 ++ ) {

  			var face = this.faces[ i$1 ];

  			face.a = changes[ face.a ];
  			face.b = changes[ face.b ];
  			face.c = changes[ face.c ];

  			var indices = [ face.a, face.b, face.c ];

  			// if any duplicate vertices are found in a Face3
  			// we have to remove the face as nothing can be saved
  			for ( var n = 0; n < 3; n ++ ) {

  				if ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {

  					faceIndicesToRemove.push( i$1 );
  					break;

  				}

  			}

  		}

  		for ( var i$2 = faceIndicesToRemove.length - 1; i$2 >= 0; i$2 -- ) {

  			var idx = faceIndicesToRemove[ i$2 ];

  			this.faces.splice( idx, 1 );

  			for ( var j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {

  				this.faceVertexUvs[ j ].splice( idx, 1 );

  			}

  		}

  		// Use unique set of vertices

  		var diff = this.vertices.length - unique.length;
  		this.vertices = unique;
  		return diff;

  	},

  	setFromPoints: function ( points ) {

  		this.vertices = [];

  		for ( var i = 0, l = points.length; i < l; i ++ ) {

  			var point = points[ i ];
  			this.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );

  		}

  		return this;

  	},

  	sortFacesByMaterialIndex: function () {

  		var faces = this.faces;
  		var length = faces.length;

  		// tag faces

  		for ( var i = 0; i < length; i ++ ) {

  			faces[ i ]._id = i;

  		}

  		// sort faces

  		function materialIndexSort( a, b ) {

  			return a.materialIndex - b.materialIndex;

  		}

  		faces.sort( materialIndexSort );

  		// sort uvs

  		var uvs1 = this.faceVertexUvs[ 0 ];
  		var uvs2 = this.faceVertexUvs[ 1 ];

  		var newUvs1, newUvs2;

  		if ( uvs1 && uvs1.length === length ) { newUvs1 = []; }
  		if ( uvs2 && uvs2.length === length ) { newUvs2 = []; }

  		for ( var i$1 = 0; i$1 < length; i$1 ++ ) {

  			var id = faces[ i$1 ]._id;

  			if ( newUvs1 ) { newUvs1.push( uvs1[ id ] ); }
  			if ( newUvs2 ) { newUvs2.push( uvs2[ id ] ); }

  		}

  		if ( newUvs1 ) { this.faceVertexUvs[ 0 ] = newUvs1; }
  		if ( newUvs2 ) { this.faceVertexUvs[ 1 ] = newUvs2; }

  	},

  	toJSON: function () {

  		var data = {
  			metadata: {
  				version: 4.5,
  				type: 'Geometry',
  				generator: 'Geometry.toJSON'
  			}
  		};

  		// standard Geometry serialization

  		data.uuid = this.uuid;
  		data.type = this.type;
  		if ( this.name !== '' ) { data.name = this.name; }

  		if ( this.parameters !== undefined ) {

  			var parameters = this.parameters;

  			for ( var key in parameters ) {

  				if ( parameters[ key ] !== undefined ) { data[ key ] = parameters[ key ]; }

  			}

  			return data;

  		}

  		var vertices = [];

  		for ( var i = 0; i < this.vertices.length; i ++ ) {

  			var vertex = this.vertices[ i ];
  			vertices.push( vertex.x, vertex.y, vertex.z );

  		}

  		var faces = [];
  		var normals = [];
  		var normalsHash = {};
  		var colors = [];
  		var colorsHash = {};
  		var uvs = [];
  		var uvsHash = {};

  		for ( var i$1 = 0; i$1 < this.faces.length; i$1 ++ ) {

  			var face = this.faces[ i$1 ];

  			var hasMaterial = true;
  			var hasFaceUv = false; // deprecated
  			var hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i$1 ] !== undefined;
  			var hasFaceNormal = face.normal.length() > 0;
  			var hasFaceVertexNormal = face.vertexNormals.length > 0;
  			var hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;
  			var hasFaceVertexColor = face.vertexColors.length > 0;

  			var faceType = 0;

  			faceType = setBit( faceType, 0, 0 ); // isQuad
  			faceType = setBit( faceType, 1, hasMaterial );
  			faceType = setBit( faceType, 2, hasFaceUv );
  			faceType = setBit( faceType, 3, hasFaceVertexUv );
  			faceType = setBit( faceType, 4, hasFaceNormal );
  			faceType = setBit( faceType, 5, hasFaceVertexNormal );
  			faceType = setBit( faceType, 6, hasFaceColor );
  			faceType = setBit( faceType, 7, hasFaceVertexColor );

  			faces.push( faceType );
  			faces.push( face.a, face.b, face.c );
  			faces.push( face.materialIndex );

  			if ( hasFaceVertexUv ) {

  				var faceVertexUvs = this.faceVertexUvs[ 0 ][ i$1 ];

  				faces.push(
  					getUvIndex( faceVertexUvs[ 0 ] ),
  					getUvIndex( faceVertexUvs[ 1 ] ),
  					getUvIndex( faceVertexUvs[ 2 ] )
  				);

  			}

  			if ( hasFaceNormal ) {

  				faces.push( getNormalIndex( face.normal ) );

  			}

  			if ( hasFaceVertexNormal ) {

  				var vertexNormals = face.vertexNormals;

  				faces.push(
  					getNormalIndex( vertexNormals[ 0 ] ),
  					getNormalIndex( vertexNormals[ 1 ] ),
  					getNormalIndex( vertexNormals[ 2 ] )
  				);

  			}

  			if ( hasFaceColor ) {

  				faces.push( getColorIndex( face.color ) );

  			}

  			if ( hasFaceVertexColor ) {

  				var vertexColors = face.vertexColors;

  				faces.push(
  					getColorIndex( vertexColors[ 0 ] ),
  					getColorIndex( vertexColors[ 1 ] ),
  					getColorIndex( vertexColors[ 2 ] )
  				);

  			}

  		}

  		function setBit( value, position, enabled ) {

  			return enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );

  		}

  		function getNormalIndex( normal ) {

  			var hash = normal.x.toString() + normal.y.toString() + normal.z.toString();

  			if ( normalsHash[ hash ] !== undefined ) {

  				return normalsHash[ hash ];

  			}

  			normalsHash[ hash ] = normals.length / 3;
  			normals.push( normal.x, normal.y, normal.z );

  			return normalsHash[ hash ];

  		}

  		function getColorIndex( color ) {

  			var hash = color.r.toString() + color.g.toString() + color.b.toString();

  			if ( colorsHash[ hash ] !== undefined ) {

  				return colorsHash[ hash ];

  			}

  			colorsHash[ hash ] = colors.length;
  			colors.push( color.getHex() );

  			return colorsHash[ hash ];

  		}

  		function getUvIndex( uv ) {

  			var hash = uv.x.toString() + uv.y.toString();

  			if ( uvsHash[ hash ] !== undefined ) {

  				return uvsHash[ hash ];

  			}

  			uvsHash[ hash ] = uvs.length / 2;
  			uvs.push( uv.x, uv.y );

  			return uvsHash[ hash ];

  		}

  		data.data = {};

  		data.data.vertices = vertices;
  		data.data.normals = normals;
  		if ( colors.length > 0 ) { data.data.colors = colors; }
  		if ( uvs.length > 0 ) { data.data.uvs = [ uvs ]; } // temporal backward compatibility
  		data.data.faces = faces;

  		return data;

  	},

  	clone: function () {

  		/*
  		 // Handle primitives

  		 const parameters = this.parameters;

  		 if ( parameters !== undefined ) {

  		 const values = [];

  		 for ( const key in parameters ) {

  		 values.push( parameters[ key ] );

  		 }

  		 const geometry = Object.create( this.constructor.prototype );
  		 this.constructor.apply( geometry, values );
  		 return geometry;

  		 }

  		 return new this.constructor().copy( this );
  		 */

  		return new Geometry().copy( this );

  	},

  	copy: function ( source ) {

  		// reset

  		this.vertices = [];
  		this.colors = [];
  		this.faces = [];
  		this.faceVertexUvs = [[]];
  		this.morphTargets = [];
  		this.morphNormals = [];
  		this.skinWeights = [];
  		this.skinIndices = [];
  		this.lineDistances = [];
  		this.boundingBox = null;
  		this.boundingSphere = null;

  		// name

  		this.name = source.name;

  		// vertices

  		var vertices = source.vertices;

  		for ( var i = 0, il = vertices.length; i < il; i ++ ) {

  			this.vertices.push( vertices[ i ].clone() );

  		}

  		// colors

  		var colors = source.colors;

  		for ( var i$1 = 0, il$1 = colors.length; i$1 < il$1; i$1 ++ ) {

  			this.colors.push( colors[ i$1 ].clone() );

  		}

  		// faces

  		var faces = source.faces;

  		for ( var i$2 = 0, il$2 = faces.length; i$2 < il$2; i$2 ++ ) {

  			this.faces.push( faces[ i$2 ].clone() );

  		}

  		// face vertex uvs

  		for ( var i$3 = 0, il$3 = source.faceVertexUvs.length; i$3 < il$3; i$3 ++ ) {

  			var faceVertexUvs = source.faceVertexUvs[ i$3 ];

  			if ( this.faceVertexUvs[ i$3 ] === undefined ) {

  				this.faceVertexUvs[ i$3 ] = [];

  			}

  			for ( var j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {

  				var uvs = faceVertexUvs[ j ], uvsCopy = [];

  				for ( var k = 0, kl = uvs.length; k < kl; k ++ ) {

  					var uv = uvs[ k ];

  					uvsCopy.push( uv.clone() );

  				}

  				this.faceVertexUvs[ i$3 ].push( uvsCopy );

  			}

  		}

  		// morph targets

  		var morphTargets = source.morphTargets;

  		for ( var i$4 = 0, il$4 = morphTargets.length; i$4 < il$4; i$4 ++ ) {

  			var morphTarget = {};
  			morphTarget.name = morphTargets[ i$4 ].name;

  			// vertices

  			if ( morphTargets[ i$4 ].vertices !== undefined ) {

  				morphTarget.vertices = [];

  				for ( var j$1 = 0, jl$1 = morphTargets[ i$4 ].vertices.length; j$1 < jl$1; j$1 ++ ) {

  					morphTarget.vertices.push( morphTargets[ i$4 ].vertices[ j$1 ].clone() );

  				}

  			}

  			// normals

  			if ( morphTargets[ i$4 ].normals !== undefined ) {

  				morphTarget.normals = [];

  				for ( var j$2 = 0, jl$2 = morphTargets[ i$4 ].normals.length; j$2 < jl$2; j$2 ++ ) {

  					morphTarget.normals.push( morphTargets[ i$4 ].normals[ j$2 ].clone() );

  				}

  			}

  			this.morphTargets.push( morphTarget );

  		}

  		// morph normals

  		var morphNormals = source.morphNormals;

  		for ( var i$5 = 0, il$5 = morphNormals.length; i$5 < il$5; i$5 ++ ) {

  			var morphNormal = {};

  			// vertex normals

  			if ( morphNormals[ i$5 ].vertexNormals !== undefined ) {

  				morphNormal.vertexNormals = [];

  				for ( var j$3 = 0, jl$3 = morphNormals[ i$5 ].vertexNormals.length; j$3 < jl$3; j$3 ++ ) {

  					var srcVertexNormal = morphNormals[ i$5 ].vertexNormals[ j$3 ];
  					var destVertexNormal = {};

  					destVertexNormal.a = srcVertexNormal.a.clone();
  					destVertexNormal.b = srcVertexNormal.b.clone();
  					destVertexNormal.c = srcVertexNormal.c.clone();

  					morphNormal.vertexNormals.push( destVertexNormal );

  				}

  			}

  			// face normals

  			if ( morphNormals[ i$5 ].faceNormals !== undefined ) {

  				morphNormal.faceNormals = [];

  				for ( var j$4 = 0, jl$4 = morphNormals[ i$5 ].faceNormals.length; j$4 < jl$4; j$4 ++ ) {

  					morphNormal.faceNormals.push( morphNormals[ i$5 ].faceNormals[ j$4 ].clone() );

  				}

  			}

  			this.morphNormals.push( morphNormal );

  		}

  		// skin weights

  		var skinWeights = source.skinWeights;

  		for ( var i$6 = 0, il$6 = skinWeights.length; i$6 < il$6; i$6 ++ ) {

  			this.skinWeights.push( skinWeights[ i$6 ].clone() );

  		}

  		// skin indices

  		var skinIndices = source.skinIndices;

  		for ( var i$7 = 0, il$7 = skinIndices.length; i$7 < il$7; i$7 ++ ) {

  			this.skinIndices.push( skinIndices[ i$7 ].clone() );

  		}

  		// line distances

  		var lineDistances = source.lineDistances;

  		for ( var i$8 = 0, il$8 = lineDistances.length; i$8 < il$8; i$8 ++ ) {

  			this.lineDistances.push( lineDistances[ i$8 ] );

  		}

  		// bounding box

  		var boundingBox = source.boundingBox;

  		if ( boundingBox !== null ) {

  			this.boundingBox = boundingBox.clone();

  		}

  		// bounding sphere

  		var boundingSphere = source.boundingSphere;

  		if ( boundingSphere !== null ) {

  			this.boundingSphere = boundingSphere.clone();

  		}

  		// update flags

  		this.elementsNeedUpdate = source.elementsNeedUpdate;
  		this.verticesNeedUpdate = source.verticesNeedUpdate;
  		this.uvsNeedUpdate = source.uvsNeedUpdate;
  		this.normalsNeedUpdate = source.normalsNeedUpdate;
  		this.colorsNeedUpdate = source.colorsNeedUpdate;
  		this.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;
  		this.groupsNeedUpdate = source.groupsNeedUpdate;

  		return this;

  	},

  	dispose: function () {

  		this.dispatchEvent( { type: 'dispose' } );

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author Mugen87 / https://github.com/Mugen87
   */

  // BoxGeometry

  var BoxGeometry = /*@__PURE__*/(function (Geometry) {
  	function BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {

  		Geometry.call(this);

  		this.type = 'BoxGeometry';

  		this.parameters = {
  			width: width,
  			height: height,
  			depth: depth,
  			widthSegments: widthSegments,
  			heightSegments: heightSegments,
  			depthSegments: depthSegments
  		};

  		this.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );
  		this.mergeVertices();

  	}

  	if ( Geometry ) BoxGeometry.__proto__ = Geometry;
  	BoxGeometry.prototype = Object.create( Geometry && Geometry.prototype );
  	BoxGeometry.prototype.constructor = BoxGeometry;

  	return BoxGeometry;
  }(Geometry));

  // BoxBufferGeometry

  var BoxBufferGeometry = /*@__PURE__*/(function (BufferGeometry) {
  	function BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {

  		BufferGeometry.call(this);

  		this.type = 'BoxBufferGeometry';

  		this.parameters = {
  			width: width,
  			height: height,
  			depth: depth,
  			widthSegments: widthSegments,
  			heightSegments: heightSegments,
  			depthSegments: depthSegments
  		};

  		var scope = this;

  		width = width || 1;
  		height = height || 1;
  		depth = depth || 1;

  		// segments

  		widthSegments = Math.floor( widthSegments ) || 1;
  		heightSegments = Math.floor( heightSegments ) || 1;
  		depthSegments = Math.floor( depthSegments ) || 1;

  		// buffers

  		var indices = [];
  		var vertices = [];
  		var normals = [];
  		var uvs = [];

  		// helper variables

  		var numberOfVertices = 0;
  		var groupStart = 0;

  		// build each side of the box geometry

  		buildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px
  		buildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx
  		buildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py
  		buildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny
  		buildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz
  		buildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz

  		// build geometry

  		this.setIndex( indices );
  		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
  		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
  		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

  		function buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {

  			var segmentWidth = width / gridX;
  			var segmentHeight = height / gridY;

  			var widthHalf = width / 2;
  			var heightHalf = height / 2;
  			var depthHalf = depth / 2;

  			var gridX1 = gridX + 1;
  			var gridY1 = gridY + 1;

  			var vertexCounter = 0;
  			var groupCount = 0;

  			var vector = new Vector3();

  			// generate vertices, normals and uvs

  			for ( var iy = 0; iy < gridY1; iy ++ ) {

  				var y = iy * segmentHeight - heightHalf;

  				for ( var ix = 0; ix < gridX1; ix ++ ) {

  					var x = ix * segmentWidth - widthHalf;

  					// set values to correct vector component

  					vector[ u ] = x * udir;
  					vector[ v ] = y * vdir;
  					vector[ w ] = depthHalf;

  					// now apply vector to vertex buffer

  					vertices.push( vector.x, vector.y, vector.z );

  					// set values to correct vector component

  					vector[ u ] = 0;
  					vector[ v ] = 0;
  					vector[ w ] = depth > 0 ? 1 : - 1;

  					// now apply vector to normal buffer

  					normals.push( vector.x, vector.y, vector.z );

  					// uvs

  					uvs.push( ix / gridX );
  					uvs.push( 1 - ( iy / gridY ) );

  					// counters

  					vertexCounter += 1;

  				}

  			}

  			// indices

  			// 1. you need three indices to draw a single face
  			// 2. a single segment consists of two faces
  			// 3. so we need to generate six (2*3) indices per segment

  			for ( var iy$1 = 0; iy$1 < gridY; iy$1 ++ ) {

  				for ( var ix$1 = 0; ix$1 < gridX; ix$1 ++ ) {

  					var a = numberOfVertices + ix$1 + gridX1 * iy$1;
  					var b = numberOfVertices + ix$1 + gridX1 * ( iy$1 + 1 );
  					var c = numberOfVertices + ( ix$1 + 1 ) + gridX1 * ( iy$1 + 1 );
  					var d = numberOfVertices + ( ix$1 + 1 ) + gridX1 * iy$1;

  					// faces

  					indices.push( a, b, d );
  					indices.push( b, c, d );

  					// increase counter

  					groupCount += 6;

  				}

  			}

  			// add a group to the geometry. this will ensure multi material support

  			scope.addGroup( groupStart, groupCount, materialIndex );

  			// calculate new start value for groups

  			groupStart += groupCount;

  			// update total number of vertices

  			numberOfVertices += vertexCounter;

  		}

  	}

  	if ( BufferGeometry ) BoxBufferGeometry.__proto__ = BufferGeometry;
  	BoxBufferGeometry.prototype = Object.create( BufferGeometry && BufferGeometry.prototype );
  	BoxBufferGeometry.prototype.constructor = BoxBufferGeometry;

  	return BoxBufferGeometry;
  }(BufferGeometry));

  /**
   * Uniform Utilities
   */

  function cloneUniforms( src ) {

  	var dst = {};

  	for ( var u in src ) {

  		dst[ u ] = {};

  		for ( var p in src[ u ] ) {

  			var property = src[ u ][ p ];

  			if ( property && ( property.isColor ||
  				property.isMatrix3 || property.isMatrix4 ||
  				property.isVector2 || property.isVector3 || property.isVector4 ||
  				property.isTexture ) ) {

  				dst[ u ][ p ] = property.clone();

  			} else if ( Array.isArray( property ) ) {

  				dst[ u ][ p ] = property.slice();

  			} else {

  				dst[ u ][ p ] = property;

  			}

  		}

  	}

  	return dst;

  }

  function mergeUniforms( uniforms ) {

  	var merged = {};

  	for ( var u = 0; u < uniforms.length; u ++ ) {

  		var tmp = cloneUniforms( uniforms[ u ] );

  		for ( var p in tmp ) {

  			merged[ p ] = tmp[ p ];

  		}

  	}

  	return merged;

  }

  // Legacy

  var UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };

  var default_vertex = "void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";

  var default_fragment = "void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";

  /**
   * @author alteredq / http://alteredqualia.com/
   *
   * parameters = {
   *  defines: { "label" : "value" },
   *  uniforms: { "parameter1": { value: 1.0 }, "parameter2": { value2: 2 } },
   *
   *  fragmentShader: <string>,
   *  vertexShader: <string>,
   *
   *  wireframe: <boolean>,
   *  wireframeLinewidth: <float>,
   *
   *  lights: <bool>,
   *
   *  skinning: <bool>,
   *  morphTargets: <bool>,
   *  morphNormals: <bool>
   * }
   */

  function ShaderMaterial( parameters ) {

  	Material.call( this );

  	this.type = 'ShaderMaterial';

  	this.defines = {};
  	this.uniforms = {};

  	this.vertexShader = default_vertex;
  	this.fragmentShader = default_fragment;

  	this.linewidth = 1;

  	this.wireframe = false;
  	this.wireframeLinewidth = 1;

  	this.fog = false; // set to use scene fog
  	this.lights = false; // set to use scene lights
  	this.clipping = false; // set to use user-defined clipping planes

  	this.skinning = false; // set to use skinning attribute streams
  	this.morphTargets = false; // set to use morph targets
  	this.morphNormals = false; // set to use morph normals

  	this.extensions = {
  		derivatives: false, // set to use derivatives
  		fragDepth: false, // set to use fragment depth values
  		drawBuffers: false, // set to use draw buffers
  		shaderTextureLOD: false // set to use shader texture LOD
  	};

  	// When rendered geometry doesn't include these attributes but the material does,
  	// use these default values in WebGL. This avoids errors when buffer data is missing.
  	this.defaultAttributeValues = {
  		'color': [ 1, 1, 1 ],
  		'uv': [ 0, 0 ],
  		'uv2': [ 0, 0 ]
  	};

  	this.index0AttributeName = undefined;
  	this.uniformsNeedUpdate = false;

  	if ( parameters !== undefined ) {

  		if ( parameters.attributes !== undefined ) {

  			console.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );

  		}

  		this.setValues( parameters );

  	}

  }

  ShaderMaterial.prototype = Object.create( Material.prototype );
  ShaderMaterial.prototype.constructor = ShaderMaterial;

  ShaderMaterial.prototype.isShaderMaterial = true;

  ShaderMaterial.prototype.copy = function ( source ) {

  	Material.prototype.copy.call( this, source );

  	this.fragmentShader = source.fragmentShader;
  	this.vertexShader = source.vertexShader;

  	this.uniforms = cloneUniforms( source.uniforms );

  	this.defines = Object.assign( {}, source.defines );

  	this.wireframe = source.wireframe;
  	this.wireframeLinewidth = source.wireframeLinewidth;

  	this.lights = source.lights;
  	this.clipping = source.clipping;

  	this.skinning = source.skinning;

  	this.morphTargets = source.morphTargets;
  	this.morphNormals = source.morphNormals;

  	this.extensions = Object.assign( {}, source.extensions );

  	return this;

  };

  ShaderMaterial.prototype.toJSON = function ( meta ) {

  	var data = Material.prototype.toJSON.call( this, meta );

  	data.uniforms = {};

  	for ( var name in this.uniforms ) {

  		var uniform = this.uniforms[ name ];
  		var value = uniform.value;

  		if ( value && value.isTexture ) {

  			data.uniforms[ name ] = {
  				type: 't',
  				value: value.toJSON( meta ).uuid
  			};

  		} else if ( value && value.isColor ) {

  			data.uniforms[ name ] = {
  				type: 'c',
  				value: value.getHex()
  			};

  		} else if ( value && value.isVector2 ) {

  			data.uniforms[ name ] = {
  				type: 'v2',
  				value: value.toArray()
  			};

  		} else if ( value && value.isVector3 ) {

  			data.uniforms[ name ] = {
  				type: 'v3',
  				value: value.toArray()
  			};

  		} else if ( value && value.isVector4 ) {

  			data.uniforms[ name ] = {
  				type: 'v4',
  				value: value.toArray()
  			};

  		} else if ( value && value.isMatrix3 ) {

  			data.uniforms[ name ] = {
  				type: 'm3',
  				value: value.toArray()
  			};

  		} else if ( value && value.isMatrix4 ) {

  			data.uniforms[ name ] = {
  				type: 'm4',
  				value: value.toArray()
  			};

  		} else {

  			data.uniforms[ name ] = {
  				value: value
  			};

  			// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far

  		}

  	}

  	if ( Object.keys( this.defines ).length > 0 ) { data.defines = this.defines; }

  	data.vertexShader = this.vertexShader;
  	data.fragmentShader = this.fragmentShader;

  	var extensions = {};

  	for ( var key in this.extensions ) {

  		if ( this.extensions[ key ] === true ) { extensions[ key ] = true; }

  	}

  	if ( Object.keys( extensions ).length > 0 ) { data.extensions = extensions; }

  	return data;

  };

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author mikael emtinger / http://gomo.se/
   * @author WestLangley / http://github.com/WestLangley
  */

  function Camera() {

  	Object3D.call( this );

  	this.type = 'Camera';

  	this.matrixWorldInverse = new Matrix4();

  	this.projectionMatrix = new Matrix4();
  	this.projectionMatrixInverse = new Matrix4();

  }

  Camera.prototype = Object.assign( Object.create( Object3D.prototype ), {

  	constructor: Camera,

  	isCamera: true,

  	copy: function ( source, recursive ) {

  		Object3D.prototype.copy.call( this, source, recursive );

  		this.matrixWorldInverse.copy( source.matrixWorldInverse );

  		this.projectionMatrix.copy( source.projectionMatrix );
  		this.projectionMatrixInverse.copy( source.projectionMatrixInverse );

  		return this;

  	},

  	getWorldDirection: function ( target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Camera: .getWorldDirection() target is now required' );
  			target = new Vector3();

  		}

  		this.updateMatrixWorld( true );

  		var e = this.matrixWorld.elements;

  		return target.set( - e[ 8 ], - e[ 9 ], - e[ 10 ] ).normalize();

  	},

  	updateMatrixWorld: function ( force ) {

  		Object3D.prototype.updateMatrixWorld.call( this, force );

  		this.matrixWorldInverse.getInverse( this.matrixWorld );

  	},

  	updateWorldMatrix: function ( updateParents, updateChildren ) {

  		Object3D.prototype.updateWorldMatrix.call( this, updateParents, updateChildren );

  		this.matrixWorldInverse.getInverse( this.matrixWorld );

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author greggman / http://games.greggman.com/
   * @author zz85 / http://www.lab4games.net/zz85/blog
   * @author tschw
   */

  function PerspectiveCamera( fov, aspect, near, far ) {

  	Camera.call( this );

  	this.type = 'PerspectiveCamera';

  	this.fov = fov !== undefined ? fov : 50;
  	this.zoom = 1;

  	this.near = near !== undefined ? near : 0.1;
  	this.far = far !== undefined ? far : 2000;
  	this.focus = 10;

  	this.aspect = aspect !== undefined ? aspect : 1;
  	this.view = null;

  	this.filmGauge = 35;	// width of the film (default in millimeters)
  	this.filmOffset = 0;	// horizontal film offset (same unit as gauge)

  	this.updateProjectionMatrix();

  }

  PerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {

  	constructor: PerspectiveCamera,

  	isPerspectiveCamera: true,

  	copy: function ( source, recursive ) {

  		Camera.prototype.copy.call( this, source, recursive );

  		this.fov = source.fov;
  		this.zoom = source.zoom;

  		this.near = source.near;
  		this.far = source.far;
  		this.focus = source.focus;

  		this.aspect = source.aspect;
  		this.view = source.view === null ? null : Object.assign( {}, source.view );

  		this.filmGauge = source.filmGauge;
  		this.filmOffset = source.filmOffset;

  		return this;

  	},

  	/**
  	 * Sets the FOV by focal length in respect to the current .filmGauge.
  	 *
  	 * The default film gauge is 35, so that the focal length can be specified for
  	 * a 35mm (full frame) camera.
  	 *
  	 * Values for focal length and film gauge must have the same unit.
  	 */
  	setFocalLength: function ( focalLength ) {

  		// see http://www.bobatkins.com/photography/technical/field_of_view.html
  		var vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;

  		this.fov = MathUtils.RAD2DEG * 2 * Math.atan( vExtentSlope );
  		this.updateProjectionMatrix();

  	},

  	/**
  	 * Calculates the focal length from the current .fov and .filmGauge.
  	 */
  	getFocalLength: function () {

  		var vExtentSlope = Math.tan( MathUtils.DEG2RAD * 0.5 * this.fov );

  		return 0.5 * this.getFilmHeight() / vExtentSlope;

  	},

  	getEffectiveFOV: function () {

  		return MathUtils.RAD2DEG * 2 * Math.atan(
  			Math.tan( MathUtils.DEG2RAD * 0.5 * this.fov ) / this.zoom );

  	},

  	getFilmWidth: function () {

  		// film not completely covered in portrait format (aspect < 1)
  		return this.filmGauge * Math.min( this.aspect, 1 );

  	},

  	getFilmHeight: function () {

  		// film not completely covered in landscape format (aspect > 1)
  		return this.filmGauge / Math.max( this.aspect, 1 );

  	},

  	/**
  	 * Sets an offset in a larger frustum. This is useful for multi-window or
  	 * multi-monitor/multi-machine setups.
  	 *
  	 * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
  	 * the monitors are in grid like this
  	 *
  	 *   +---+---+---+
  	 *   | A | B | C |
  	 *   +---+---+---+
  	 *   | D | E | F |
  	 *   +---+---+---+
  	 *
  	 * then for each monitor you would call it like this
  	 *
  	 *   const w = 1920;
  	 *   const h = 1080;
  	 *   const fullWidth = w * 3;
  	 *   const fullHeight = h * 2;
  	 *
  	 *   --A--
  	 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
  	 *   --B--
  	 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
  	 *   --C--
  	 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
  	 *   --D--
  	 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
  	 *   --E--
  	 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
  	 *   --F--
  	 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
  	 *
  	 *   Note there is no reason monitors have to be the same size or in a grid.
  	 */
  	setViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {

  		this.aspect = fullWidth / fullHeight;

  		if ( this.view === null ) {

  			this.view = {
  				enabled: true,
  				fullWidth: 1,
  				fullHeight: 1,
  				offsetX: 0,
  				offsetY: 0,
  				width: 1,
  				height: 1
  			};

  		}

  		this.view.enabled = true;
  		this.view.fullWidth = fullWidth;
  		this.view.fullHeight = fullHeight;
  		this.view.offsetX = x;
  		this.view.offsetY = y;
  		this.view.width = width;
  		this.view.height = height;

  		this.updateProjectionMatrix();

  	},

  	clearViewOffset: function () {

  		if ( this.view !== null ) {

  			this.view.enabled = false;

  		}

  		this.updateProjectionMatrix();

  	},

  	updateProjectionMatrix: function () {

  		var near = this.near,
  			top = near * Math.tan( MathUtils.DEG2RAD * 0.5 * this.fov ) / this.zoom,
  			height = 2 * top,
  			width = this.aspect * height,
  			left = - 0.5 * width,
  			view = this.view;

  		if ( this.view !== null && this.view.enabled ) {

  			var fullWidth = view.fullWidth,
  				fullHeight = view.fullHeight;

  			left += view.offsetX * width / fullWidth;
  			top -= view.offsetY * height / fullHeight;
  			width *= view.width / fullWidth;
  			height *= view.height / fullHeight;

  		}

  		var skew = this.filmOffset;
  		if ( skew !== 0 ) { left += near * skew / this.getFilmWidth(); }

  		this.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );

  		this.projectionMatrixInverse.getInverse( this.projectionMatrix );

  	},

  	toJSON: function ( meta ) {

  		var data = Object3D.prototype.toJSON.call( this, meta );

  		data.object.fov = this.fov;
  		data.object.zoom = this.zoom;

  		data.object.near = this.near;
  		data.object.far = this.far;
  		data.object.focus = this.focus;

  		data.object.aspect = this.aspect;

  		if ( this.view !== null ) { data.object.view = Object.assign( {}, this.view ); }

  		data.object.filmGauge = this.filmGauge;
  		data.object.filmOffset = this.filmOffset;

  		return data;

  	}

  } );

  /**
   * Camera for rendering cube maps
   *	- renders scene into axis-aligned cube
   *
   * @author alteredq / http://alteredqualia.com/
   */

  var fov = 90, aspect = 1;

  function CubeCamera( near, far, renderTarget ) {

  	Object3D.call( this );

  	this.type = 'CubeCamera';

  	if ( renderTarget.isWebGLCubeRenderTarget !== true ) {

  		console.error( 'THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.' );
  		return;

  	}

  	this.renderTarget = renderTarget;

  	var cameraPX = new PerspectiveCamera( fov, aspect, near, far );
  	cameraPX.layers = this.layers;
  	cameraPX.up.set( 0, - 1, 0 );
  	cameraPX.lookAt( new Vector3( 1, 0, 0 ) );
  	this.add( cameraPX );

  	var cameraNX = new PerspectiveCamera( fov, aspect, near, far );
  	cameraNX.layers = this.layers;
  	cameraNX.up.set( 0, - 1, 0 );
  	cameraNX.lookAt( new Vector3( - 1, 0, 0 ) );
  	this.add( cameraNX );

  	var cameraPY = new PerspectiveCamera( fov, aspect, near, far );
  	cameraPY.layers = this.layers;
  	cameraPY.up.set( 0, 0, 1 );
  	cameraPY.lookAt( new Vector3( 0, 1, 0 ) );
  	this.add( cameraPY );

  	var cameraNY = new PerspectiveCamera( fov, aspect, near, far );
  	cameraNY.layers = this.layers;
  	cameraNY.up.set( 0, 0, - 1 );
  	cameraNY.lookAt( new Vector3( 0, - 1, 0 ) );
  	this.add( cameraNY );

  	var cameraPZ = new PerspectiveCamera( fov, aspect, near, far );
  	cameraPZ.layers = this.layers;
  	cameraPZ.up.set( 0, - 1, 0 );
  	cameraPZ.lookAt( new Vector3( 0, 0, 1 ) );
  	this.add( cameraPZ );

  	var cameraNZ = new PerspectiveCamera( fov, aspect, near, far );
  	cameraNZ.layers = this.layers;
  	cameraNZ.up.set( 0, - 1, 0 );
  	cameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );
  	this.add( cameraNZ );

  	this.update = function ( renderer, scene ) {

  		if ( this.parent === null ) { this.updateMatrixWorld(); }

  		var currentXrEnabled = renderer.xr.enabled;
  		var currentRenderTarget = renderer.getRenderTarget();

  		renderer.xr.enabled = false;

  		var generateMipmaps = renderTarget.texture.generateMipmaps;

  		renderTarget.texture.generateMipmaps = false;

  		renderer.setRenderTarget( renderTarget, 0 );
  		renderer.render( scene, cameraPX );

  		renderer.setRenderTarget( renderTarget, 1 );
  		renderer.render( scene, cameraNX );

  		renderer.setRenderTarget( renderTarget, 2 );
  		renderer.render( scene, cameraPY );

  		renderer.setRenderTarget( renderTarget, 3 );
  		renderer.render( scene, cameraNY );

  		renderer.setRenderTarget( renderTarget, 4 );
  		renderer.render( scene, cameraPZ );

  		renderTarget.texture.generateMipmaps = generateMipmaps;

  		renderer.setRenderTarget( renderTarget, 5 );
  		renderer.render( scene, cameraNZ );

  		renderer.setRenderTarget( currentRenderTarget );

  		renderer.xr.enabled = currentXrEnabled;

  	};

  	this.clear = function ( renderer, color, depth, stencil ) {

  		var currentRenderTarget = renderer.getRenderTarget();

  		for ( var i = 0; i < 6; i ++ ) {

  			renderer.setRenderTarget( renderTarget, i );

  			renderer.clear( color, depth, stencil );

  		}

  		renderer.setRenderTarget( currentRenderTarget );

  	};

  }

  CubeCamera.prototype = Object.create( Object3D.prototype );
  CubeCamera.prototype.constructor = CubeCamera;

  /**
   * @author alteredq / http://alteredqualia.com
   * @author WestLangley / http://github.com/WestLangley
   */

  function WebGLCubeRenderTarget( size, options, dummy ) {

  	if ( Number.isInteger( options ) ) {

  		console.warn( 'THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )' );

  		options = dummy;

  	}

  	WebGLRenderTarget.call( this, size, size, options );

  }

  WebGLCubeRenderTarget.prototype = Object.create( WebGLRenderTarget.prototype );
  WebGLCubeRenderTarget.prototype.constructor = WebGLCubeRenderTarget;

  WebGLCubeRenderTarget.prototype.isWebGLCubeRenderTarget = true;

  WebGLCubeRenderTarget.prototype.fromEquirectangularTexture = function ( renderer, texture ) {

  	this.texture.type = texture.type;
  	this.texture.format = texture.format;
  	this.texture.encoding = texture.encoding;

  	var scene = new Scene();

  	var shader = {

  		uniforms: {
  			tEquirect: { value: null },
  		},

  		vertexShader: [

  			"varying vec3 vWorldDirection;",

  			"vec3 transformDirection( in vec3 dir, in mat4 matrix ) {",

  			"	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );",

  			"}",

  			"void main() {",

  			"	vWorldDirection = transformDirection( position, modelMatrix );",

  			"	#include <begin_vertex>",
  			"	#include <project_vertex>",

  			"}"

  		].join( '\n' ),

  		fragmentShader: [

  			"uniform sampler2D tEquirect;",

  			"varying vec3 vWorldDirection;",

  			"#include <common>",

  			"void main() {",

  			"	vec3 direction = normalize( vWorldDirection );",

  			"	vec2 sampleUV = equirectUv( direction );",

  			"	gl_FragColor = texture2D( tEquirect, sampleUV );",

  			"}"

  		].join( '\n' ),
  	};

  	var material = new ShaderMaterial( {

  		name: 'CubemapFromEquirect',

  		uniforms: cloneUniforms( shader.uniforms ),
  		vertexShader: shader.vertexShader,
  		fragmentShader: shader.fragmentShader,
  		side: BackSide,
  		blending: NoBlending

  	} );

  	material.uniforms.tEquirect.value = texture;

  	var mesh = new Mesh( new BoxBufferGeometry( 5, 5, 5 ), material );

  	scene.add( mesh );

  	var camera = new CubeCamera( 1, 10, this );
  	camera.update( renderer, scene );

  	mesh.geometry.dispose();
  	mesh.material.dispose();

  	return this;

  };

  /**
   * @author alteredq / http://alteredqualia.com/
   */

  function DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {

  	Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

  	this.image = { data: data || null, width: width || 1, height: height || 1 };

  	this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
  	this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;

  	this.generateMipmaps = false;
  	this.flipY = false;
  	this.unpackAlignment = 1;

  	this.needsUpdate = true;

  }

  DataTexture.prototype = Object.create( Texture.prototype );
  DataTexture.prototype.constructor = DataTexture;

  DataTexture.prototype.isDataTexture = true;

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author alteredq / http://alteredqualia.com/
   * @author bhouston / http://clara.io
   */

  var _sphere$1 = new Sphere();
  var _vector$5 = new Vector3();

  function Frustum( p0, p1, p2, p3, p4, p5 ) {

  	this.planes = [

  		( p0 !== undefined ) ? p0 : new Plane(),
  		( p1 !== undefined ) ? p1 : new Plane(),
  		( p2 !== undefined ) ? p2 : new Plane(),
  		( p3 !== undefined ) ? p3 : new Plane(),
  		( p4 !== undefined ) ? p4 : new Plane(),
  		( p5 !== undefined ) ? p5 : new Plane()

  	];

  }

  Object.assign( Frustum.prototype, {

  	set: function ( p0, p1, p2, p3, p4, p5 ) {

  		var planes = this.planes;

  		planes[ 0 ].copy( p0 );
  		planes[ 1 ].copy( p1 );
  		planes[ 2 ].copy( p2 );
  		planes[ 3 ].copy( p3 );
  		planes[ 4 ].copy( p4 );
  		planes[ 5 ].copy( p5 );

  		return this;

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	copy: function ( frustum ) {

  		var planes = this.planes;

  		for ( var i = 0; i < 6; i ++ ) {

  			planes[ i ].copy( frustum.planes[ i ] );

  		}

  		return this;

  	},

  	setFromProjectionMatrix: function ( m ) {

  		var planes = this.planes;
  		var me = m.elements;
  		var me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];
  		var me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];
  		var me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];
  		var me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];

  		planes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();
  		planes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();
  		planes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();
  		planes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();
  		planes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();
  		planes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();

  		return this;

  	},

  	intersectsObject: function ( object ) {

  		var geometry = object.geometry;

  		if ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }

  		_sphere$1.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );

  		return this.intersectsSphere( _sphere$1 );

  	},

  	intersectsSprite: function ( sprite ) {

  		_sphere$1.center.set( 0, 0, 0 );
  		_sphere$1.radius = 0.7071067811865476;
  		_sphere$1.applyMatrix4( sprite.matrixWorld );

  		return this.intersectsSphere( _sphere$1 );

  	},

  	intersectsSphere: function ( sphere ) {

  		var planes = this.planes;
  		var center = sphere.center;
  		var negRadius = - sphere.radius;

  		for ( var i = 0; i < 6; i ++ ) {

  			var distance = planes[ i ].distanceToPoint( center );

  			if ( distance < negRadius ) {

  				return false;

  			}

  		}

  		return true;

  	},

  	intersectsBox: function ( box ) {

  		var planes = this.planes;

  		for ( var i = 0; i < 6; i ++ ) {

  			var plane = planes[ i ];

  			// corner at max distance

  			_vector$5.x = plane.normal.x > 0 ? box.max.x : box.min.x;
  			_vector$5.y = plane.normal.y > 0 ? box.max.y : box.min.y;
  			_vector$5.z = plane.normal.z > 0 ? box.max.z : box.min.z;

  			if ( plane.distanceToPoint( _vector$5 ) < 0 ) {

  				return false;

  			}

  		}

  		return true;

  	},

  	containsPoint: function ( point ) {

  		var planes = this.planes;

  		for ( var i = 0; i < 6; i ++ ) {

  			if ( planes[ i ].distanceToPoint( point ) < 0 ) {

  				return false;

  			}

  		}

  		return true;

  	}

  } );

  /**
   * Uniforms library for shared webgl shaders
   */

  var UniformsLib = {

  	common: {

  		diffuse: { value: new Color( 0xeeeeee ) },
  		opacity: { value: 1.0 },

  		map: { value: null },
  		uvTransform: { value: new Matrix3() },
  		uv2Transform: { value: new Matrix3() },

  		alphaMap: { value: null },

  	},

  	specularmap: {

  		specularMap: { value: null },

  	},

  	envmap: {

  		envMap: { value: null },
  		flipEnvMap: { value: - 1 },
  		reflectivity: { value: 1.0 },
  		refractionRatio: { value: 0.98 },
  		maxMipLevel: { value: 0 }

  	},

  	aomap: {

  		aoMap: { value: null },
  		aoMapIntensity: { value: 1 }

  	},

  	lightmap: {

  		lightMap: { value: null },
  		lightMapIntensity: { value: 1 }

  	},

  	emissivemap: {

  		emissiveMap: { value: null }

  	},

  	bumpmap: {

  		bumpMap: { value: null },
  		bumpScale: { value: 1 }

  	},

  	normalmap: {

  		normalMap: { value: null },
  		normalScale: { value: new Vector2( 1, 1 ) }

  	},

  	displacementmap: {

  		displacementMap: { value: null },
  		displacementScale: { value: 1 },
  		displacementBias: { value: 0 }

  	},

  	roughnessmap: {

  		roughnessMap: { value: null }

  	},

  	metalnessmap: {

  		metalnessMap: { value: null }

  	},

  	gradientmap: {

  		gradientMap: { value: null }

  	},

  	fog: {

  		fogDensity: { value: 0.00025 },
  		fogNear: { value: 1 },
  		fogFar: { value: 2000 },
  		fogColor: { value: new Color( 0xffffff ) }

  	},

  	lights: {

  		ambientLightColor: { value: [] },

  		lightProbe: { value: [] },

  		directionalLights: { value: [], properties: {
  			direction: {},
  			color: {}
  		} },

  		directionalLightShadows: { value: [], properties: {
  			shadowBias: {},
  			shadowNormalBias: {},
  			shadowRadius: {},
  			shadowMapSize: {}
  		} },

  		directionalShadowMap: { value: [] },
  		directionalShadowMatrix: { value: [] },

  		spotLights: { value: [], properties: {
  			color: {},
  			position: {},
  			direction: {},
  			distance: {},
  			coneCos: {},
  			penumbraCos: {},
  			decay: {}
  		} },

  		spotLightShadows: { value: [], properties: {
  			shadowBias: {},
  			shadowNormalBias: {},
  			shadowRadius: {},
  			shadowMapSize: {}
  		} },

  		spotShadowMap: { value: [] },
  		spotShadowMatrix: { value: [] },

  		pointLights: { value: [], properties: {
  			color: {},
  			position: {},
  			decay: {},
  			distance: {}
  		} },

  		pointLightShadows: { value: [], properties: {
  			shadowBias: {},
  			shadowNormalBias: {},
  			shadowRadius: {},
  			shadowMapSize: {},
  			shadowCameraNear: {},
  			shadowCameraFar: {}
  		} },

  		pointShadowMap: { value: [] },
  		pointShadowMatrix: { value: [] },

  		hemisphereLights: { value: [], properties: {
  			direction: {},
  			skyColor: {},
  			groundColor: {}
  		} },

  		// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
  		rectAreaLights: { value: [], properties: {
  			color: {},
  			position: {},
  			width: {},
  			height: {}
  		} }

  	},

  	points: {

  		diffuse: { value: new Color( 0xeeeeee ) },
  		opacity: { value: 1.0 },
  		size: { value: 1.0 },
  		scale: { value: 1.0 },
  		map: { value: null },
  		alphaMap: { value: null },
  		uvTransform: { value: new Matrix3() }

  	},

  	sprite: {

  		diffuse: { value: new Color( 0xeeeeee ) },
  		opacity: { value: 1.0 },
  		center: { value: new Vector2( 0.5, 0.5 ) },
  		rotation: { value: 0.0 },
  		map: { value: null },
  		alphaMap: { value: null },
  		uvTransform: { value: new Matrix3() }

  	}

  };

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function WebGLAnimation() {

  	var context = null;
  	var isAnimating = false;
  	var animationLoop = null;
  	var requestId = null;

  	function onAnimationFrame( time, frame ) {

  		animationLoop( time, frame );

  		requestId = context.requestAnimationFrame( onAnimationFrame );

  	}

  	return {

  		start: function () {

  			if ( isAnimating === true ) { return; }
  			if ( animationLoop === null ) { return; }

  			requestId = context.requestAnimationFrame( onAnimationFrame );

  			isAnimating = true;

  		},

  		stop: function () {

  			context.cancelAnimationFrame( requestId );

  			isAnimating = false;

  		},

  		setAnimationLoop: function ( callback ) {

  			animationLoop = callback;

  		},

  		setContext: function ( value ) {

  			context = value;

  		}

  	};

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function WebGLAttributes( gl, capabilities ) {

  	var isWebGL2 = capabilities.isWebGL2;

  	var buffers = new WeakMap();

  	function createBuffer( attribute, bufferType ) {

  		var array = attribute.array;
  		var usage = attribute.usage;

  		var buffer = gl.createBuffer();

  		gl.bindBuffer( bufferType, buffer );
  		gl.bufferData( bufferType, array, usage );

  		attribute.onUploadCallback();

  		var type = 5126;

  		if ( array instanceof Float32Array ) {

  			type = 5126;

  		} else if ( array instanceof Float64Array ) {

  			console.warn( 'THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.' );

  		} else if ( array instanceof Uint16Array ) {

  			type = 5123;

  		} else if ( array instanceof Int16Array ) {

  			type = 5122;

  		} else if ( array instanceof Uint32Array ) {

  			type = 5125;

  		} else if ( array instanceof Int32Array ) {

  			type = 5124;

  		} else if ( array instanceof Int8Array ) {

  			type = 5120;

  		} else if ( array instanceof Uint8Array ) {

  			type = 5121;

  		}

  		return {
  			buffer: buffer,
  			type: type,
  			bytesPerElement: array.BYTES_PER_ELEMENT,
  			version: attribute.version
  		};

  	}

  	function updateBuffer( buffer, attribute, bufferType ) {

  		var array = attribute.array;
  		var updateRange = attribute.updateRange;

  		gl.bindBuffer( bufferType, buffer );

  		if ( updateRange.count === - 1 ) {

  			// Not using update ranges

  			gl.bufferSubData( bufferType, 0, array );

  		} else {

  			if ( isWebGL2 ) {

  				gl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,
  					array, updateRange.offset, updateRange.count );

  			} else {

  				gl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,
  					array.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );

  			}

  			updateRange.count = - 1; // reset range

  		}

  	}

  	//

  	function get( attribute ) {

  		if ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }

  		return buffers.get( attribute );

  	}

  	function remove( attribute ) {

  		if ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }

  		var data = buffers.get( attribute );

  		if ( data ) {

  			gl.deleteBuffer( data.buffer );

  			buffers.delete( attribute );

  		}

  	}

  	function update( attribute, bufferType ) {

  		if ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }

  		var data = buffers.get( attribute );

  		if ( data === undefined ) {

  			buffers.set( attribute, createBuffer( attribute, bufferType ) );

  		} else if ( data.version < attribute.version ) {

  			updateBuffer( data.buffer, attribute, bufferType );

  			data.version = attribute.version;

  		}

  	}

  	return {

  		get: get,
  		remove: remove,
  		update: update

  	};

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author Mugen87 / https://github.com/Mugen87
   */

  // PlaneGeometry

  function PlaneGeometry( width, height, widthSegments, heightSegments ) {

  	Geometry.call( this );

  	this.type = 'PlaneGeometry';

  	this.parameters = {
  		width: width,
  		height: height,
  		widthSegments: widthSegments,
  		heightSegments: heightSegments
  	};

  	this.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );
  	this.mergeVertices();

  }

  PlaneGeometry.prototype = Object.create( Geometry.prototype );
  PlaneGeometry.prototype.constructor = PlaneGeometry;

  // PlaneBufferGeometry

  function PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {

  	BufferGeometry.call( this );

  	this.type = 'PlaneBufferGeometry';

  	this.parameters = {
  		width: width,
  		height: height,
  		widthSegments: widthSegments,
  		heightSegments: heightSegments
  	};

  	width = width || 1;
  	height = height || 1;

  	var width_half = width / 2;
  	var height_half = height / 2;

  	var gridX = Math.floor( widthSegments ) || 1;
  	var gridY = Math.floor( heightSegments ) || 1;

  	var gridX1 = gridX + 1;
  	var gridY1 = gridY + 1;

  	var segment_width = width / gridX;
  	var segment_height = height / gridY;

  	// buffers

  	var indices = [];
  	var vertices = [];
  	var normals = [];
  	var uvs = [];

  	// generate vertices, normals and uvs

  	for ( var iy = 0; iy < gridY1; iy ++ ) {

  		var y = iy * segment_height - height_half;

  		for ( var ix = 0; ix < gridX1; ix ++ ) {

  			var x = ix * segment_width - width_half;

  			vertices.push( x, - y, 0 );

  			normals.push( 0, 0, 1 );

  			uvs.push( ix / gridX );
  			uvs.push( 1 - ( iy / gridY ) );

  		}

  	}

  	// indices

  	for ( var iy$1 = 0; iy$1 < gridY; iy$1 ++ ) {

  		for ( var ix$1 = 0; ix$1 < gridX; ix$1 ++ ) {

  			var a = ix$1 + gridX1 * iy$1;
  			var b = ix$1 + gridX1 * ( iy$1 + 1 );
  			var c = ( ix$1 + 1 ) + gridX1 * ( iy$1 + 1 );
  			var d = ( ix$1 + 1 ) + gridX1 * iy$1;

  			// faces

  			indices.push( a, b, d );
  			indices.push( b, c, d );

  		}

  	}

  	// build geometry

  	this.setIndex( indices );
  	this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
  	this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
  	this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

  }

  PlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
  PlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;

  var alphamap_fragment = "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif";

  var alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";

  var alphatest_fragment = "#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif";

  var aomap_fragment = "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif";

  var aomap_pars_fragment = "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif";

  var begin_vertex = "vec3 transformed = vec3( position );";

  var beginnormal_vertex = "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif";

  var bsdfs = "vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\tif( cutoffDistance > 0.0 ) {\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n#else\n\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t}\n\treturn 1.0;\n#endif\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\n\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\n\treturn Fr * fresnel + F0;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\n\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\treturn specularColor * brdf.x + brdf.y;\n}\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\tvec3 FssEss = F * brdf.x + brdf.y;\n\tfloat Ess = brdf.x + brdf.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie(float roughness, float NoH) {\n\tfloat invAlpha  = 1.0 / roughness;\n\tfloat cos2h = NoH * NoH;\n\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\n}\nfloat V_Neubelt(float NoV, float NoL) {\n\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\n}\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\n\tvec3 N = geometry.normal;\n\tvec3 V = geometry.viewDir;\n\tvec3 H = normalize( V + L );\n\tfloat dotNH = saturate( dot( N, H ) );\n\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\n}\n#endif";

  var bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif";

  var clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif";

  var clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";

  var clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif";

  var clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif";

  var color_fragment = "#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif";

  var color_pars_fragment = "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif";

  var color_pars_vertex = "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif";

  var color_vertex = "#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif";

  var common = "#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n  return m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}";

  var cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_maxMipLevel 8.0\n#define cubeUV_minMipLevel 4.0\n#define cubeUV_maxTileSize 256.0\n#define cubeUV_minTileSize 16.0\nfloat getFace(vec3 direction) {\n    vec3 absDirection = abs(direction);\n    float face = -1.0;\n    if (absDirection.x > absDirection.z) {\n      if (absDirection.x > absDirection.y)\n        face = direction.x > 0.0 ? 0.0 : 3.0;\n      else\n        face = direction.y > 0.0 ? 1.0 : 4.0;\n    } else {\n      if (absDirection.z > absDirection.y)\n        face = direction.z > 0.0 ? 2.0 : 5.0;\n      else\n        face = direction.y > 0.0 ? 1.0 : 4.0;\n    }\n    return face;\n}\nvec2 getUV(vec3 direction, float face) {\n    vec2 uv;\n    if (face == 0.0) {\n      uv = vec2(direction.z, direction.y) / abs(direction.x);    } else if (face == 1.0) {\n      uv = vec2(-direction.x, -direction.z) / abs(direction.y);    } else if (face == 2.0) {\n      uv = vec2(-direction.x, direction.y) / abs(direction.z);    } else if (face == 3.0) {\n      uv = vec2(-direction.z, direction.y) / abs(direction.x);    } else if (face == 4.0) {\n      uv = vec2(-direction.x, direction.z) / abs(direction.y);    } else {\n      uv = vec2(direction.x, direction.y) / abs(direction.z);    }\n    return 0.5 * (uv + 1.0);\n}\nvec3 bilinearCubeUV(sampler2D envMap, vec3 direction, float mipInt) {\n  float face = getFace(direction);\n  float filterInt = max(cubeUV_minMipLevel - mipInt, 0.0);\n  mipInt = max(mipInt, cubeUV_minMipLevel);\n  float faceSize = exp2(mipInt);\n  float texelSize = 1.0 / (3.0 * cubeUV_maxTileSize);\n  vec2 uv = getUV(direction, face) * (faceSize - 1.0);\n  vec2 f = fract(uv);\n  uv += 0.5 - f;\n  if (face > 2.0) {\n    uv.y += faceSize;\n    face -= 3.0;\n  }\n  uv.x += face * faceSize;\n  if(mipInt < cubeUV_maxMipLevel){\n    uv.y += 2.0 * cubeUV_maxTileSize;\n  }\n  uv.y += filterInt * 2.0 * cubeUV_minTileSize;\n  uv.x += 3.0 * max(0.0, cubeUV_maxTileSize - 2.0 * faceSize);\n  uv *= texelSize;\n  vec3 tl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n  uv.x += texelSize;\n  vec3 tr = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n  uv.y += texelSize;\n  vec3 br = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n  uv.x -= texelSize;\n  vec3 bl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n  vec3 tm = mix(tl, tr, f.x);\n  vec3 bm = mix(bl, br, f.x);\n  return mix(tm, bm, f.y);\n}\n#define r0 1.0\n#define v0 0.339\n#define m0 -2.0\n#define r1 0.8\n#define v1 0.276\n#define m1 -1.0\n#define r4 0.4\n#define v4 0.046\n#define m4 2.0\n#define r5 0.305\n#define v5 0.016\n#define m5 3.0\n#define r6 0.21\n#define v6 0.0038\n#define m6 4.0\nfloat roughnessToMip(float roughness) {\n  float mip = 0.0;\n  if (roughness >= r1) {\n    mip = (r0 - roughness) * (m1 - m0) / (r0 - r1) + m0;\n  } else if (roughness >= r4) {\n    mip = (r1 - roughness) * (m4 - m1) / (r1 - r4) + m1;\n  } else if (roughness >= r5) {\n    mip = (r4 - roughness) * (m5 - m4) / (r4 - r5) + m4;\n  } else if (roughness >= r6) {\n    mip = (r5 - roughness) * (m6 - m5) / (r5 - r6) + m5;\n  } else {\n    mip = -2.0 * log2(1.16 * roughness);  }\n  return mip;\n}\nvec4 textureCubeUV(sampler2D envMap, vec3 sampleDir, float roughness) {\n  float mip = clamp(roughnessToMip(roughness), m0, cubeUV_maxMipLevel);\n  float mipF = fract(mip);\n  float mipInt = floor(mip);\n  vec3 color0 = bilinearCubeUV(envMap, sampleDir, mipInt);\n  if (mipF == 0.0) {\n    return vec4(color0, 1.0);\n  } else {\n    vec3 color1 = bilinearCubeUV(envMap, sampleDir, mipInt + 1.0);\n    return vec4(mix(color0, color1, mipF), 1.0);\n  }\n}\n#endif";

  var defaultnormal_vertex = "vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif";

  var displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif";

  var displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif";

  var emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif";

  var emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif";

  var encodings_fragment = "gl_FragColor = linearToOutputTexel( gl_FragColor );";

  var encodings_pars_fragment = "\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat D = max( maxRange / maxRGB, 1.0 );\n\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\n\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract( Le );\n\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\n\treturn vec4( max( vRGB, 0.0 ), 1.0 );\n}";

  var envmap_fragment = "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\t\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t}  else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\treflectVec = normalize( reflectVec );\n\t\tvec2 sampleUV = equirectUv( reflectVec );\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifndef ENVMAP_TYPE_CUBE_UV\n\t\tenvColor = envMapTexelToLinear( envColor );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif";

  var envmap_common_pars_fragment = "#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif";

  var envmap_pars_fragment = "#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif";

  var envmap_pars_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif";

  var envmap_vertex = "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) { \n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif";

  var fog_vertex = "#ifdef USE_FOG\n\tfogDepth = -mvPosition.z;\n#endif";

  var fog_pars_vertex = "#ifdef USE_FOG\n\tvarying float fogDepth;\n#endif";

  var fog_fragment = "#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";

  var fog_pars_fragment = "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif";

  var gradientmap_pars_fragment = "#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn texture2D( gradientMap, coord ).rgb;\n\t#else\n\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t#endif\n}";

  var lightmap_fragment = "#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\treflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n#endif";

  var lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif";

  var lights_lambert_vertex = "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry );\n#ifdef DOUBLE_SIDED\n\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\n\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry );\n#endif\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif";

  var lights_pars_begin = "uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\n\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif";

  var envmap_physical_pars_fragment = "#if defined( USE_ENVMAP )\n\t#ifdef ENVMAP_MODE_REFRACTION\n\t\tuniform float refractionRatio;\n\t#endif\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t  vec3 reflectVec = reflect( -viewDir, normal );\n\t\t  reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t#else\n\t\t  vec3 reflectVec = refract( -viewDir, normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV = equirectUv( reflectVec );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif";

  var lights_toon_fragment = "ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;";

  var lights_toon_pars_fragment = "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct ToonMaterial {\n\tvec3\tdiffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )\t(0)";

  var lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";

  var lights_phong_pars_fragment = "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)";

  var lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.specularRoughness = max( roughnessFactor, 0.0525 );material.specularRoughness += geometryRoughness;\nmaterial.specularRoughness = min( material.specularRoughness, 1.0 );\n#ifdef REFLECTIVITY\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#endif\n#ifdef CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheen;\n#endif";

  var lights_physical_pars_fragment = "struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n#ifdef CLEARCOAT\n\tfloat clearcoat;\n\tfloat clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tvec3 sheenColor;\n#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = ccDotNL * directLight.color;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tccIrradiance *= PI;\n\t\t#endif\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\n\t\t\tmaterial.specularRoughness,\n\t\t\tdirectLight.direction,\n\t\t\tgeometry,\n\t\t\tmaterial.sheenColor\n\t\t);\n\t#else\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\n\t#endif\n\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t\tfloat ccDotNL = ccDotNV;\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\tfloat clearcoatInv = 1.0 - clearcoatDHR;\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";

  var lights_fragment_begin = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif";

  var lights_fragment_maps = "#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\n\t#ifdef CLEARCOAT\n\t\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\n\t#endif\n#endif";

  var lights_fragment_end = "#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif";

  var logdepthbuf_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";

  var logdepthbuf_pars_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif";

  var logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif";

  var logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif";

  var map_fragment = "#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif";

  var map_pars_fragment = "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif";

  var map_particle_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";

  var map_particle_pars_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";

  var metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif";

  var metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif";

  var morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n#endif";

  var morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif";

  var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t#endif\n#endif";

  var normal_fragment_begin = "#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t\tbitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;";

  var normal_fragment_maps = "#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif";

  var normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\n\t\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\n\t\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\n\t\tvec3 N = normalize( surf_norm );\n\t\tmat3 tsn = mat3( S, T, N );\n\t\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\treturn normalize( tsn * mapN );\n\t}\n#endif";

  var clearcoat_normal_fragment_begin = "#ifdef CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif";

  var clearcoat_normal_fragment_maps = "#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\t#ifdef USE_TANGENT\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN );\n\t#endif\n#endif";

  var clearcoat_pars_fragment = "#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif";

  var packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}";

  var premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif";

  var project_vertex = "vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;";

  var dithering_fragment = "#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";

  var dithering_pars_fragment = "#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif";

  var roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif";

  var roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif";

  var shadowmap_pars_fragment = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif";

  var shadowmap_pars_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif";

  var shadowmap_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\n\t\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\tvec4 shadowWorldPosition;\n\t#endif\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n#endif";

  var shadowmask_pars_fragment = "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}";

  var skinbase_vertex = "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";

  var skinning_pars_vertex = "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform highp sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif";

  var skinning_vertex = "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";

  var skinnormal_vertex = "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif";

  var specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif";

  var specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif";

  var tonemapping_fragment = "#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";

  var tonemapping_pars_fragment = "#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }";

  var uv_pars_fragment = "#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif";

  var uv_pars_vertex = "#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif";

  var uv_vertex = "#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif";

  var uv2_pars_fragment = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif";

  var uv2_pars_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\tuniform mat3 uv2Transform;\n#endif";

  var uv2_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif";

  var worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif";

  var background_frag = "uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";

  var background_vert = "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}";

  var cube_frag = "#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\tvec3 vReflect = vWorldDirection;\n\t#include <envmap_fragment>\n\tgl_FragColor = envColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";

  var cube_vert = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}";

  var depth_frag = "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}";

  var depth_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}";

  var distanceRGBA_frag = "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}";

  var distanceRGBA_vert = "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}";

  var equirect_frag = "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tvec4 texColor = texture2D( tEquirect, sampleUV );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";

  var equirect_vert = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}";

  var linedashed_frag = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";

  var linedashed_vert = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";

  var meshbasic_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

  var meshbasic_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}";

  var meshlambert_frag = "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

  var meshlambert_vert = "#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

  var meshmatcap_frag = "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t\tmatcapColor = matcapTexelToLinear( matcapColor );\n\t#else\n\t\tvec4 matcapColor = vec4( 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

  var meshmatcap_vert = "#define MATCAP\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#ifndef FLAT_SHADED\n\t\tvNormal = normalize( transformedNormal );\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}";

  var meshtoon_frag = "#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

  var meshtoon_vert = "#define TOON\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

  var meshphong_frag = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

  var meshphong_vert = "#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

  var meshphysical_frag = "#define STANDARD\n#ifdef PHYSICAL\n\t#define REFLECTIVITY\n\t#define CLEARCOAT\n\t#define TRANSPARENCY\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef TRANSPARENCY\n\tuniform float transparency;\n#endif\n#ifdef REFLECTIVITY\n\tuniform float reflectivity;\n#endif\n#ifdef CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheen;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#ifdef TRANSPARENCY\n\t\tdiffuseColor.a *= saturate( 1. - transparency + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) );\n\t#endif\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

  var meshphysical_vert = "#define STANDARD\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

  var normal_frag = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}";

  var normal_vert = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}";

  var points_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";

  var points_vert = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}";

  var shadow_frag = "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";

  var shadow_vert = "#include <common>\n#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

  var sprite_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";

  var sprite_vert = "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";

  var ShaderChunk = {
  	alphamap_fragment: alphamap_fragment,
  	alphamap_pars_fragment: alphamap_pars_fragment,
  	alphatest_fragment: alphatest_fragment,
  	aomap_fragment: aomap_fragment,
  	aomap_pars_fragment: aomap_pars_fragment,
  	begin_vertex: begin_vertex,
  	beginnormal_vertex: beginnormal_vertex,
  	bsdfs: bsdfs,
  	bumpmap_pars_fragment: bumpmap_pars_fragment,
  	clipping_planes_fragment: clipping_planes_fragment,
  	clipping_planes_pars_fragment: clipping_planes_pars_fragment,
  	clipping_planes_pars_vertex: clipping_planes_pars_vertex,
  	clipping_planes_vertex: clipping_planes_vertex,
  	color_fragment: color_fragment,
  	color_pars_fragment: color_pars_fragment,
  	color_pars_vertex: color_pars_vertex,
  	color_vertex: color_vertex,
  	common: common,
  	cube_uv_reflection_fragment: cube_uv_reflection_fragment,
  	defaultnormal_vertex: defaultnormal_vertex,
  	displacementmap_pars_vertex: displacementmap_pars_vertex,
  	displacementmap_vertex: displacementmap_vertex,
  	emissivemap_fragment: emissivemap_fragment,
  	emissivemap_pars_fragment: emissivemap_pars_fragment,
  	encodings_fragment: encodings_fragment,
  	encodings_pars_fragment: encodings_pars_fragment,
  	envmap_fragment: envmap_fragment,
  	envmap_common_pars_fragment: envmap_common_pars_fragment,
  	envmap_pars_fragment: envmap_pars_fragment,
  	envmap_pars_vertex: envmap_pars_vertex,
  	envmap_physical_pars_fragment: envmap_physical_pars_fragment,
  	envmap_vertex: envmap_vertex,
  	fog_vertex: fog_vertex,
  	fog_pars_vertex: fog_pars_vertex,
  	fog_fragment: fog_fragment,
  	fog_pars_fragment: fog_pars_fragment,
  	gradientmap_pars_fragment: gradientmap_pars_fragment,
  	lightmap_fragment: lightmap_fragment,
  	lightmap_pars_fragment: lightmap_pars_fragment,
  	lights_lambert_vertex: lights_lambert_vertex,
  	lights_pars_begin: lights_pars_begin,
  	lights_toon_fragment: lights_toon_fragment,
  	lights_toon_pars_fragment: lights_toon_pars_fragment,
  	lights_phong_fragment: lights_phong_fragment,
  	lights_phong_pars_fragment: lights_phong_pars_fragment,
  	lights_physical_fragment: lights_physical_fragment,
  	lights_physical_pars_fragment: lights_physical_pars_fragment,
  	lights_fragment_begin: lights_fragment_begin,
  	lights_fragment_maps: lights_fragment_maps,
  	lights_fragment_end: lights_fragment_end,
  	logdepthbuf_fragment: logdepthbuf_fragment,
  	logdepthbuf_pars_fragment: logdepthbuf_pars_fragment,
  	logdepthbuf_pars_vertex: logdepthbuf_pars_vertex,
  	logdepthbuf_vertex: logdepthbuf_vertex,
  	map_fragment: map_fragment,
  	map_pars_fragment: map_pars_fragment,
  	map_particle_fragment: map_particle_fragment,
  	map_particle_pars_fragment: map_particle_pars_fragment,
  	metalnessmap_fragment: metalnessmap_fragment,
  	metalnessmap_pars_fragment: metalnessmap_pars_fragment,
  	morphnormal_vertex: morphnormal_vertex,
  	morphtarget_pars_vertex: morphtarget_pars_vertex,
  	morphtarget_vertex: morphtarget_vertex,
  	normal_fragment_begin: normal_fragment_begin,
  	normal_fragment_maps: normal_fragment_maps,
  	normalmap_pars_fragment: normalmap_pars_fragment,
  	clearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,
  	clearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,
  	clearcoat_pars_fragment: clearcoat_pars_fragment,
  	packing: packing,
  	premultiplied_alpha_fragment: premultiplied_alpha_fragment,
  	project_vertex: project_vertex,
  	dithering_fragment: dithering_fragment,
  	dithering_pars_fragment: dithering_pars_fragment,
  	roughnessmap_fragment: roughnessmap_fragment,
  	roughnessmap_pars_fragment: roughnessmap_pars_fragment,
  	shadowmap_pars_fragment: shadowmap_pars_fragment,
  	shadowmap_pars_vertex: shadowmap_pars_vertex,
  	shadowmap_vertex: shadowmap_vertex,
  	shadowmask_pars_fragment: shadowmask_pars_fragment,
  	skinbase_vertex: skinbase_vertex,
  	skinning_pars_vertex: skinning_pars_vertex,
  	skinning_vertex: skinning_vertex,
  	skinnormal_vertex: skinnormal_vertex,
  	specularmap_fragment: specularmap_fragment,
  	specularmap_pars_fragment: specularmap_pars_fragment,
  	tonemapping_fragment: tonemapping_fragment,
  	tonemapping_pars_fragment: tonemapping_pars_fragment,
  	uv_pars_fragment: uv_pars_fragment,
  	uv_pars_vertex: uv_pars_vertex,
  	uv_vertex: uv_vertex,
  	uv2_pars_fragment: uv2_pars_fragment,
  	uv2_pars_vertex: uv2_pars_vertex,
  	uv2_vertex: uv2_vertex,
  	worldpos_vertex: worldpos_vertex,

  	background_frag: background_frag,
  	background_vert: background_vert,
  	cube_frag: cube_frag,
  	cube_vert: cube_vert,
  	depth_frag: depth_frag,
  	depth_vert: depth_vert,
  	distanceRGBA_frag: distanceRGBA_frag,
  	distanceRGBA_vert: distanceRGBA_vert,
  	equirect_frag: equirect_frag,
  	equirect_vert: equirect_vert,
  	linedashed_frag: linedashed_frag,
  	linedashed_vert: linedashed_vert,
  	meshbasic_frag: meshbasic_frag,
  	meshbasic_vert: meshbasic_vert,
  	meshlambert_frag: meshlambert_frag,
  	meshlambert_vert: meshlambert_vert,
  	meshmatcap_frag: meshmatcap_frag,
  	meshmatcap_vert: meshmatcap_vert,
  	meshtoon_frag: meshtoon_frag,
  	meshtoon_vert: meshtoon_vert,
  	meshphong_frag: meshphong_frag,
  	meshphong_vert: meshphong_vert,
  	meshphysical_frag: meshphysical_frag,
  	meshphysical_vert: meshphysical_vert,
  	normal_frag: normal_frag,
  	normal_vert: normal_vert,
  	points_frag: points_frag,
  	points_vert: points_vert,
  	shadow_frag: shadow_frag,
  	shadow_vert: shadow_vert,
  	sprite_frag: sprite_frag,
  	sprite_vert: sprite_vert
  };

  /**
   * @author alteredq / http://alteredqualia.com/
   * @author mrdoob / http://mrdoob.com/
   * @author mikael emtinger / http://gomo.se/
   */

  var ShaderLib = {

  	basic: {

  		uniforms: mergeUniforms( [
  			UniformsLib.common,
  			UniformsLib.specularmap,
  			UniformsLib.envmap,
  			UniformsLib.aomap,
  			UniformsLib.lightmap,
  			UniformsLib.fog
  		] ),

  		vertexShader: ShaderChunk.meshbasic_vert,
  		fragmentShader: ShaderChunk.meshbasic_frag

  	},

  	lambert: {

  		uniforms: mergeUniforms( [
  			UniformsLib.common,
  			UniformsLib.specularmap,
  			UniformsLib.envmap,
  			UniformsLib.aomap,
  			UniformsLib.lightmap,
  			UniformsLib.emissivemap,
  			UniformsLib.fog,
  			UniformsLib.lights,
  			{
  				emissive: { value: new Color( 0x000000 ) }
  			}
  		] ),

  		vertexShader: ShaderChunk.meshlambert_vert,
  		fragmentShader: ShaderChunk.meshlambert_frag

  	},

  	phong: {

  		uniforms: mergeUniforms( [
  			UniformsLib.common,
  			UniformsLib.specularmap,
  			UniformsLib.envmap,
  			UniformsLib.aomap,
  			UniformsLib.lightmap,
  			UniformsLib.emissivemap,
  			UniformsLib.bumpmap,
  			UniformsLib.normalmap,
  			UniformsLib.displacementmap,
  			UniformsLib.fog,
  			UniformsLib.lights,
  			{
  				emissive: { value: new Color( 0x000000 ) },
  				specular: { value: new Color( 0x111111 ) },
  				shininess: { value: 30 }
  			}
  		] ),

  		vertexShader: ShaderChunk.meshphong_vert,
  		fragmentShader: ShaderChunk.meshphong_frag

  	},

  	standard: {

  		uniforms: mergeUniforms( [
  			UniformsLib.common,
  			UniformsLib.envmap,
  			UniformsLib.aomap,
  			UniformsLib.lightmap,
  			UniformsLib.emissivemap,
  			UniformsLib.bumpmap,
  			UniformsLib.normalmap,
  			UniformsLib.displacementmap,
  			UniformsLib.roughnessmap,
  			UniformsLib.metalnessmap,
  			UniformsLib.fog,
  			UniformsLib.lights,
  			{
  				emissive: { value: new Color( 0x000000 ) },
  				roughness: { value: 1.0 },
  				metalness: { value: 0.0 },
  				envMapIntensity: { value: 1 } // temporary
  			}
  		] ),

  		vertexShader: ShaderChunk.meshphysical_vert,
  		fragmentShader: ShaderChunk.meshphysical_frag

  	},

  	toon: {

  		uniforms: mergeUniforms( [
  			UniformsLib.common,
  			UniformsLib.aomap,
  			UniformsLib.lightmap,
  			UniformsLib.emissivemap,
  			UniformsLib.bumpmap,
  			UniformsLib.normalmap,
  			UniformsLib.displacementmap,
  			UniformsLib.gradientmap,
  			UniformsLib.fog,
  			UniformsLib.lights,
  			{
  				emissive: { value: new Color( 0x000000 ) }
  			}
  		] ),

  		vertexShader: ShaderChunk.meshtoon_vert,
  		fragmentShader: ShaderChunk.meshtoon_frag

  	},

  	matcap: {

  		uniforms: mergeUniforms( [
  			UniformsLib.common,
  			UniformsLib.bumpmap,
  			UniformsLib.normalmap,
  			UniformsLib.displacementmap,
  			UniformsLib.fog,
  			{
  				matcap: { value: null }
  			}
  		] ),

  		vertexShader: ShaderChunk.meshmatcap_vert,
  		fragmentShader: ShaderChunk.meshmatcap_frag

  	},

  	points: {

  		uniforms: mergeUniforms( [
  			UniformsLib.points,
  			UniformsLib.fog
  		] ),

  		vertexShader: ShaderChunk.points_vert,
  		fragmentShader: ShaderChunk.points_frag

  	},

  	dashed: {

  		uniforms: mergeUniforms( [
  			UniformsLib.common,
  			UniformsLib.fog,
  			{
  				scale: { value: 1 },
  				dashSize: { value: 1 },
  				totalSize: { value: 2 }
  			}
  		] ),

  		vertexShader: ShaderChunk.linedashed_vert,
  		fragmentShader: ShaderChunk.linedashed_frag

  	},

  	depth: {

  		uniforms: mergeUniforms( [
  			UniformsLib.common,
  			UniformsLib.displacementmap
  		] ),

  		vertexShader: ShaderChunk.depth_vert,
  		fragmentShader: ShaderChunk.depth_frag

  	},

  	normal: {

  		uniforms: mergeUniforms( [
  			UniformsLib.common,
  			UniformsLib.bumpmap,
  			UniformsLib.normalmap,
  			UniformsLib.displacementmap,
  			{
  				opacity: { value: 1.0 }
  			}
  		] ),

  		vertexShader: ShaderChunk.normal_vert,
  		fragmentShader: ShaderChunk.normal_frag

  	},

  	sprite: {

  		uniforms: mergeUniforms( [
  			UniformsLib.sprite,
  			UniformsLib.fog
  		] ),

  		vertexShader: ShaderChunk.sprite_vert,
  		fragmentShader: ShaderChunk.sprite_frag

  	},

  	background: {

  		uniforms: {
  			uvTransform: { value: new Matrix3() },
  			t2D: { value: null },
  		},

  		vertexShader: ShaderChunk.background_vert,
  		fragmentShader: ShaderChunk.background_frag

  	},
  	/* -------------------------------------------------------------------------
  	//	Cube map shader
  	 ------------------------------------------------------------------------- */

  	cube: {

  		uniforms: mergeUniforms( [
  			UniformsLib.envmap,
  			{
  				opacity: { value: 1.0 }
  			}
  		] ),

  		vertexShader: ShaderChunk.cube_vert,
  		fragmentShader: ShaderChunk.cube_frag

  	},

  	equirect: {

  		uniforms: {
  			tEquirect: { value: null },
  		},

  		vertexShader: ShaderChunk.equirect_vert,
  		fragmentShader: ShaderChunk.equirect_frag

  	},

  	distanceRGBA: {

  		uniforms: mergeUniforms( [
  			UniformsLib.common,
  			UniformsLib.displacementmap,
  			{
  				referencePosition: { value: new Vector3() },
  				nearDistance: { value: 1 },
  				farDistance: { value: 1000 }
  			}
  		] ),

  		vertexShader: ShaderChunk.distanceRGBA_vert,
  		fragmentShader: ShaderChunk.distanceRGBA_frag

  	},

  	shadow: {

  		uniforms: mergeUniforms( [
  			UniformsLib.lights,
  			UniformsLib.fog,
  			{
  				color: { value: new Color( 0x00000 ) },
  				opacity: { value: 1.0 }
  			} ] ),

  		vertexShader: ShaderChunk.shadow_vert,
  		fragmentShader: ShaderChunk.shadow_frag

  	}

  };

  ShaderLib.physical = {

  	uniforms: mergeUniforms( [
  		ShaderLib.standard.uniforms,
  		{
  			clearcoat: { value: 0 },
  			clearcoatMap: { value: null },
  			clearcoatRoughness: { value: 0 },
  			clearcoatRoughnessMap: { value: null },
  			clearcoatNormalScale: { value: new Vector2( 1, 1 ) },
  			clearcoatNormalMap: { value: null },
  			sheen: { value: new Color( 0x000000 ) },
  			transparency: { value: 0 },
  		}
  	] ),

  	vertexShader: ShaderChunk.meshphysical_vert,
  	fragmentShader: ShaderChunk.meshphysical_frag

  };

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function WebGLBackground( renderer, state, objects, premultipliedAlpha ) {

  	var clearColor = new Color( 0x000000 );
  	var clearAlpha = 0;

  	var planeMesh;
  	var boxMesh;

  	var currentBackground = null;
  	var currentBackgroundVersion = 0;
  	var currentTonemapping = null;

  	function render( renderList, scene, camera, forceClear ) {

  		var background = scene.isScene === true ? scene.background : null;

  		// Ignore background in AR
  		// TODO: Reconsider this.

  		var xr = renderer.xr;
  		var session = xr.getSession && xr.getSession();

  		if ( session && session.environmentBlendMode === 'additive' ) {

  			background = null;

  		}

  		if ( background === null ) {

  			setClear( clearColor, clearAlpha );

  		} else if ( background && background.isColor ) {

  			setClear( background, 1 );
  			forceClear = true;

  		}

  		if ( renderer.autoClear || forceClear ) {

  			renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );

  		}

  		if ( background && ( background.isCubeTexture || background.isWebGLCubeRenderTarget || background.mapping === CubeUVReflectionMapping ) ) {

  			if ( boxMesh === undefined ) {

  				boxMesh = new Mesh(
  					new BoxBufferGeometry( 1, 1, 1 ),
  					new ShaderMaterial( {
  						name: 'BackgroundCubeMaterial',
  						uniforms: cloneUniforms( ShaderLib.cube.uniforms ),
  						vertexShader: ShaderLib.cube.vertexShader,
  						fragmentShader: ShaderLib.cube.fragmentShader,
  						side: BackSide,
  						depthTest: false,
  						depthWrite: false,
  						fog: false
  					} )
  				);

  				boxMesh.geometry.deleteAttribute( 'normal' );
  				boxMesh.geometry.deleteAttribute( 'uv' );

  				boxMesh.onBeforeRender = function ( renderer, scene, camera ) {

  					this.matrixWorld.copyPosition( camera.matrixWorld );

  				};

  				// enable code injection for non-built-in material
  				Object.defineProperty( boxMesh.material, 'envMap', {

  					get: function () {

  						return this.uniforms.envMap.value;

  					}

  				} );

  				objects.update( boxMesh );

  			}

  			var texture = background.isWebGLCubeRenderTarget ? background.texture : background;

  			boxMesh.material.uniforms.envMap.value = texture;
  			boxMesh.material.uniforms.flipEnvMap.value = texture.isCubeTexture ? - 1 : 1;

  			if ( currentBackground !== background ||
  				currentBackgroundVersion !== texture.version ||
  				currentTonemapping !== renderer.toneMapping ) {

  				boxMesh.material.needsUpdate = true;

  				currentBackground = background;
  				currentBackgroundVersion = texture.version;
  				currentTonemapping = renderer.toneMapping;

  			}

  			// push to the pre-sorted opaque render list
  			renderList.unshift( boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null );

  		} else if ( background && background.isTexture ) {

  			if ( planeMesh === undefined ) {

  				planeMesh = new Mesh(
  					new PlaneBufferGeometry( 2, 2 ),
  					new ShaderMaterial( {
  						name: 'BackgroundMaterial',
  						uniforms: cloneUniforms( ShaderLib.background.uniforms ),
  						vertexShader: ShaderLib.background.vertexShader,
  						fragmentShader: ShaderLib.background.fragmentShader,
  						side: FrontSide,
  						depthTest: false,
  						depthWrite: false,
  						fog: false
  					} )
  				);

  				planeMesh.geometry.deleteAttribute( 'normal' );

  				// enable code injection for non-built-in material
  				Object.defineProperty( planeMesh.material, 'map', {

  					get: function () {

  						return this.uniforms.t2D.value;

  					}

  				} );

  				objects.update( planeMesh );

  			}

  			planeMesh.material.uniforms.t2D.value = background;

  			if ( background.matrixAutoUpdate === true ) {

  				background.updateMatrix();

  			}

  			planeMesh.material.uniforms.uvTransform.value.copy( background.matrix );

  			if ( currentBackground !== background ||
  				currentBackgroundVersion !== background.version ||
  				currentTonemapping !== renderer.toneMapping ) {

  				planeMesh.material.needsUpdate = true;

  				currentBackground = background;
  				currentBackgroundVersion = background.version;
  				currentTonemapping = renderer.toneMapping;

  			}


  			// push to the pre-sorted opaque render list
  			renderList.unshift( planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null );

  		}

  	}

  	function setClear( color, alpha ) {

  		state.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );

  	}

  	return {

  		getClearColor: function () {

  			return clearColor;

  		},
  		setClearColor: function ( color, alpha ) {

  			clearColor.set( color );
  			clearAlpha = alpha !== undefined ? alpha : 1;
  			setClear( clearColor, clearAlpha );

  		},
  		getClearAlpha: function () {

  			return clearAlpha;

  		},
  		setClearAlpha: function ( alpha ) {

  			clearAlpha = alpha;
  			setClear( clearColor, clearAlpha );

  		},
  		render: render

  	};

  }

  /**
   * @author Mugen87 / https://github.com/Mugen87
   * @author Takahiro / https://github.com/takahirox
   */

  function WebGLBindingStates( gl, extensions, attributes, capabilities ) {

  	var maxVertexAttributes = gl.getParameter( 34921 );

  	var extension = capabilities.isWebGL2 ? null : extensions.get( 'OES_vertex_array_object' );
  	var vaoAvailable = capabilities.isWebGL2 || extension !== null;

  	var bindingStates = {};

  	var defaultState = createBindingState( null );
  	var currentState = defaultState;

  	function setup( object, material, program, geometry, index ) {

  		var updateBuffers = false;

  		if ( vaoAvailable ) {

  			var state = getBindingState( geometry, program, material );

  			if ( currentState !== state ) {

  				currentState = state;
  				bindVertexArrayObject( currentState.object );

  			}

  			updateBuffers = needsUpdate( geometry );

  			if ( updateBuffers ) { saveCache( geometry ); }

  		} else {

  			var wireframe = ( material.wireframe === true );

  			if ( currentState.geometry !== geometry.id ||
  				currentState.program !== program.id ||
  				currentState.wireframe !== wireframe ) {

  				currentState.geometry = geometry.id;
  				currentState.program = program.id;
  				currentState.wireframe = wireframe;

  				updateBuffers = true;

  			}

  		}

  		if ( object.isInstancedMesh === true ) {

  			updateBuffers = true;

  		}

  		if ( index !== null ) {

  			attributes.update( index, 34963 );

  		}

  		if ( updateBuffers ) {

  			setupVertexAttributes( object, material, program, geometry );

  			if ( index !== null ) {

  				gl.bindBuffer( 34963, attributes.get( index ).buffer );

  			}

  		}

  	}

  	function createVertexArrayObject() {

  		if ( capabilities.isWebGL2 ) { return gl.createVertexArray(); }

  		return extension.createVertexArrayOES();

  	}

  	function bindVertexArrayObject( vao ) {

  		if ( capabilities.isWebGL2 ) { return gl.bindVertexArray( vao ); }

  		return extension.bindVertexArrayOES( vao );

  	}

  	function deleteVertexArrayObject( vao ) {

  		if ( capabilities.isWebGL2 ) { return gl.deleteVertexArray( vao ); }

  		return extension.deleteVertexArrayOES( vao );

  	}

  	function getBindingState( geometry, program, material ) {

  		var wireframe = ( material.wireframe === true );

  		var programMap = bindingStates[ geometry.id ];

  		if ( programMap === undefined ) {

  			programMap = {};
  			bindingStates[ geometry.id ] = programMap;

  		}

  		var stateMap = programMap[ program.id ];

  		if ( stateMap === undefined ) {

  			stateMap = {};
  			programMap[ program.id ] = stateMap;

  		}

  		var state = stateMap[ wireframe ];

  		if ( state === undefined ) {

  			state = createBindingState( createVertexArrayObject() );
  			stateMap[ wireframe ] = state;

  		}

  		return state;

  	}

  	function createBindingState( vao ) {

  		var newAttributes = [];
  		var enabledAttributes = [];
  		var attributeDivisors = [];

  		for ( var i = 0; i < maxVertexAttributes; i ++ ) {

  			newAttributes[ i ] = 0;
  			enabledAttributes[ i ] = 0;
  			attributeDivisors[ i ] = 0;

  		}

  		return {

  			// for backward compatibility on non-VAO support browser
  			geometry: null,
  			program: null,
  			wireframe: false,

  			newAttributes: newAttributes,
  			enabledAttributes: enabledAttributes,
  			attributeDivisors: attributeDivisors,
  			object: vao,
  			attributes: {}

  		};

  	}

  	function needsUpdate( geometry ) {

  		var cachedAttributes = currentState.attributes;
  		var geometryAttributes = geometry.attributes;

  		if ( Object.keys( cachedAttributes ).length !== Object.keys( geometryAttributes ).length ) { return true; }

  		for ( var key in geometryAttributes ) {

  			var cachedAttribute = cachedAttributes[ key ];
  			var geometryAttribute = geometryAttributes[ key ];

  			if ( cachedAttribute.attribute !== geometryAttribute ) { return true; }

  			if ( cachedAttribute.data !== geometryAttribute.data ) { return true; }

  		}

  		return false;

  	}

  	function saveCache( geometry ) {

  		var cache = {};
  		var attributes = geometry.attributes;

  		for ( var key in attributes ) {

  			var attribute = attributes[ key ];

  			var data = {};
  			data.attribute = attribute;

  			if ( attribute.data ) {

  				data.data = attribute.data;

  			}

  			cache[ key ] = data;

  		}

  		currentState.attributes = cache;

  	}

  	function initAttributes() {

  		var newAttributes = currentState.newAttributes;

  		for ( var i = 0, il = newAttributes.length; i < il; i ++ ) {

  			newAttributes[ i ] = 0;

  		}

  	}

  	function enableAttribute( attribute ) {

  		enableAttributeAndDivisor( attribute, 0 );

  	}

  	function enableAttributeAndDivisor( attribute, meshPerAttribute ) {

  		var newAttributes = currentState.newAttributes;
  		var enabledAttributes = currentState.enabledAttributes;
  		var attributeDivisors = currentState.attributeDivisors;

  		newAttributes[ attribute ] = 1;

  		if ( enabledAttributes[ attribute ] === 0 ) {

  			gl.enableVertexAttribArray( attribute );
  			enabledAttributes[ attribute ] = 1;

  		}

  		if ( attributeDivisors[ attribute ] !== meshPerAttribute ) {

  			var extension = capabilities.isWebGL2 ? gl : extensions.get( 'ANGLE_instanced_arrays' );

  			extension[ capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE' ]( attribute, meshPerAttribute );
  			attributeDivisors[ attribute ] = meshPerAttribute;

  		}

  	}

  	function disableUnusedAttributes() {

  		var newAttributes = currentState.newAttributes;
  		var enabledAttributes = currentState.enabledAttributes;

  		for ( var i = 0, il = enabledAttributes.length; i < il; i ++ ) {

  			if ( enabledAttributes[ i ] !== newAttributes[ i ] ) {

  				gl.disableVertexAttribArray( i );
  				enabledAttributes[ i ] = 0;

  			}

  		}

  	}

  	function vertexAttribPointer( index, size, type, normalized, stride, offset ) {

  		if ( capabilities.isWebGL2 === true && ( type === 5124 || type === 5125 ) ) {

  			gl.vertexAttribIPointer( index, size, type, normalized, stride, offset );

  		} else {

  			gl.vertexAttribPointer( index, size, type, normalized, stride, offset );

  		}

  	}

  	function setupVertexAttributes( object, material, program, geometry ) {

  		if ( capabilities.isWebGL2 === false && ( object.isInstancedMesh || geometry.isInstancedBufferGeometry ) ) {

  			if ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) { return; }

  		}

  		initAttributes();

  		var geometryAttributes = geometry.attributes;

  		var programAttributes = program.getAttributes();

  		var materialDefaultAttributeValues = material.defaultAttributeValues;

  		for ( var name in programAttributes ) {

  			var programAttribute = programAttributes[ name ];

  			if ( programAttribute >= 0 ) {

  				var geometryAttribute = geometryAttributes[ name ];

  				if ( geometryAttribute !== undefined ) {

  					var normalized = geometryAttribute.normalized;
  					var size = geometryAttribute.itemSize;

  					var attribute = attributes.get( geometryAttribute );

  					// TODO Attribute may not be available on context restore

  					if ( attribute === undefined ) { continue; }

  					var buffer = attribute.buffer;
  					var type = attribute.type;
  					var bytesPerElement = attribute.bytesPerElement;

  					if ( geometryAttribute.isInterleavedBufferAttribute ) {

  						var data = geometryAttribute.data;
  						var stride = data.stride;
  						var offset = geometryAttribute.offset;

  						if ( data && data.isInstancedInterleavedBuffer ) {

  							enableAttributeAndDivisor( programAttribute, data.meshPerAttribute );

  							if ( geometry._maxInstanceCount === undefined ) {

  								geometry._maxInstanceCount = data.meshPerAttribute * data.count;

  							}

  						} else {

  							enableAttribute( programAttribute );

  						}

  						gl.bindBuffer( 34962, buffer );
  						vertexAttribPointer( programAttribute, size, type, normalized, stride * bytesPerElement, offset * bytesPerElement );

  					} else {

  						if ( geometryAttribute.isInstancedBufferAttribute ) {

  							enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute );

  							if ( geometry._maxInstanceCount === undefined ) {

  								geometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;

  							}

  						} else {

  							enableAttribute( programAttribute );

  						}

  						gl.bindBuffer( 34962, buffer );
  						vertexAttribPointer( programAttribute, size, type, normalized, 0, 0 );

  					}

  				} else if ( name === 'instanceMatrix' ) {

  					var attribute$1 = attributes.get( object.instanceMatrix );

  					// TODO Attribute may not be available on context restore

  					if ( attribute$1 === undefined ) { continue; }

  					var buffer$1 = attribute$1.buffer;
  					var type$1 = attribute$1.type;

  					enableAttributeAndDivisor( programAttribute + 0, 1 );
  					enableAttributeAndDivisor( programAttribute + 1, 1 );
  					enableAttributeAndDivisor( programAttribute + 2, 1 );
  					enableAttributeAndDivisor( programAttribute + 3, 1 );

  					gl.bindBuffer( 34962, buffer$1 );

  					gl.vertexAttribPointer( programAttribute + 0, 4, type$1, false, 64, 0 );
  					gl.vertexAttribPointer( programAttribute + 1, 4, type$1, false, 64, 16 );
  					gl.vertexAttribPointer( programAttribute + 2, 4, type$1, false, 64, 32 );
  					gl.vertexAttribPointer( programAttribute + 3, 4, type$1, false, 64, 48 );

  				} else if ( materialDefaultAttributeValues !== undefined ) {

  					var value = materialDefaultAttributeValues[ name ];

  					if ( value !== undefined ) {

  						switch ( value.length ) {

  							case 2:
  								gl.vertexAttrib2fv( programAttribute, value );
  								break;

  							case 3:
  								gl.vertexAttrib3fv( programAttribute, value );
  								break;

  							case 4:
  								gl.vertexAttrib4fv( programAttribute, value );
  								break;

  							default:
  								gl.vertexAttrib1fv( programAttribute, value );

  						}

  					}

  				}

  			}

  		}

  		disableUnusedAttributes();

  	}

  	function dispose() {

  		reset();

  		for ( var geometryId in bindingStates ) {

  			var programMap = bindingStates[ geometryId ];

  			for ( var programId in programMap ) {

  				var stateMap = programMap[ programId ];

  				for ( var wireframe in stateMap ) {

  					deleteVertexArrayObject( stateMap[ wireframe ].object );

  					delete stateMap[ wireframe ];

  				}

  				delete programMap[ programId ];

  			}

  			delete bindingStates[ geometryId ];

  		}

  	}

  	function releaseStatesOfGeometry( geometry ) {

  		if ( bindingStates[ geometry.id ] === undefined ) { return; }

  		var programMap = bindingStates[ geometry.id ];

  		for ( var programId in programMap ) {

  			var stateMap = programMap[ programId ];

  			for ( var wireframe in stateMap ) {

  				deleteVertexArrayObject( stateMap[ wireframe ].object );

  				delete stateMap[ wireframe ];

  			}

  			delete programMap[ programId ];

  		}

  		delete bindingStates[ geometry.id ];

  	}

  	function releaseStatesOfProgram( program ) {

  		for ( var geometryId in bindingStates ) {

  			var programMap = bindingStates[ geometryId ];

  			if ( programMap[ program.id ] === undefined ) { continue; }

  			var stateMap = programMap[ program.id ];

  			for ( var wireframe in stateMap ) {

  				deleteVertexArrayObject( stateMap[ wireframe ].object );

  				delete stateMap[ wireframe ];

  			}

  			delete programMap[ program.id ];

  		}

  	}

  	function reset() {

  		resetDefaultState();

  		if ( currentState === defaultState ) { return; }

  		currentState = defaultState;
  		bindVertexArrayObject( currentState.object );

  	}

  	// for backward-compatilibity

  	function resetDefaultState() {

  		defaultState.geometry = null;
  		defaultState.program = null;
  		defaultState.wireframe = false;

  	}

  	return {

  		setup: setup,
  		reset: reset,
  		resetDefaultState: resetDefaultState,
  		dispose: dispose,
  		releaseStatesOfGeometry: releaseStatesOfGeometry,
  		releaseStatesOfProgram: releaseStatesOfProgram,

  		initAttributes: initAttributes,
  		enableAttribute: enableAttribute,
  		disableUnusedAttributes: disableUnusedAttributes

  	};

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function WebGLBufferRenderer( gl, extensions, info, capabilities ) {

  	var isWebGL2 = capabilities.isWebGL2;

  	var mode;

  	function setMode( value ) {

  		mode = value;

  	}

  	function render( start, count ) {

  		gl.drawArrays( mode, start, count );

  		info.update( count, mode );

  	}

  	function renderInstances( geometry, start, count, primcount ) {

  		if ( primcount === 0 ) { return; }

  		var extension, methodName;

  		if ( isWebGL2 ) {

  			extension = gl;
  			methodName = 'drawArraysInstanced';

  		} else {

  			extension = extensions.get( 'ANGLE_instanced_arrays' );
  			methodName = 'drawArraysInstancedANGLE';

  			if ( extension === null ) {

  				console.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
  				return;

  			}

  		}

  		extension[ methodName ]( mode, start, count, primcount );

  		info.update( count, mode, primcount );

  	}

  	//

  	this.setMode = setMode;
  	this.render = render;
  	this.renderInstances = renderInstances;

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function WebGLCapabilities( gl, extensions, parameters ) {

  	var maxAnisotropy;

  	function getMaxAnisotropy() {

  		if ( maxAnisotropy !== undefined ) { return maxAnisotropy; }

  		var extension = extensions.get( 'EXT_texture_filter_anisotropic' );

  		if ( extension !== null ) {

  			maxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );

  		} else {

  			maxAnisotropy = 0;

  		}

  		return maxAnisotropy;

  	}

  	function getMaxPrecision( precision ) {

  		if ( precision === 'highp' ) {

  			if ( gl.getShaderPrecisionFormat( 35633, 36338 ).precision > 0 &&
  				gl.getShaderPrecisionFormat( 35632, 36338 ).precision > 0 ) {

  				return 'highp';

  			}

  			precision = 'mediump';

  		}

  		if ( precision === 'mediump' ) {

  			if ( gl.getShaderPrecisionFormat( 35633, 36337 ).precision > 0 &&
  				gl.getShaderPrecisionFormat( 35632, 36337 ).precision > 0 ) {

  				return 'mediump';

  			}

  		}

  		return 'lowp';

  	}

  	/* eslint-disable no-undef */
  	var isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext ) ||
  		( typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext );
  	/* eslint-enable no-undef */

  	var precision = parameters.precision !== undefined ? parameters.precision : 'highp';
  	var maxPrecision = getMaxPrecision( precision );

  	if ( maxPrecision !== precision ) {

  		console.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );
  		precision = maxPrecision;

  	}

  	var logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;

  	var maxTextures = gl.getParameter( 34930 );
  	var maxVertexTextures = gl.getParameter( 35660 );
  	var maxTextureSize = gl.getParameter( 3379 );
  	var maxCubemapSize = gl.getParameter( 34076 );

  	var maxAttributes = gl.getParameter( 34921 );
  	var maxVertexUniforms = gl.getParameter( 36347 );
  	var maxVaryings = gl.getParameter( 36348 );
  	var maxFragmentUniforms = gl.getParameter( 36349 );

  	var vertexTextures = maxVertexTextures > 0;
  	var floatFragmentTextures = isWebGL2 || !! extensions.get( 'OES_texture_float' );
  	var floatVertexTextures = vertexTextures && floatFragmentTextures;

  	var maxSamples = isWebGL2 ? gl.getParameter( 36183 ) : 0;

  	return {

  		isWebGL2: isWebGL2,

  		getMaxAnisotropy: getMaxAnisotropy,
  		getMaxPrecision: getMaxPrecision,

  		precision: precision,
  		logarithmicDepthBuffer: logarithmicDepthBuffer,

  		maxTextures: maxTextures,
  		maxVertexTextures: maxVertexTextures,
  		maxTextureSize: maxTextureSize,
  		maxCubemapSize: maxCubemapSize,

  		maxAttributes: maxAttributes,
  		maxVertexUniforms: maxVertexUniforms,
  		maxVaryings: maxVaryings,
  		maxFragmentUniforms: maxFragmentUniforms,

  		vertexTextures: vertexTextures,
  		floatFragmentTextures: floatFragmentTextures,
  		floatVertexTextures: floatVertexTextures,

  		maxSamples: maxSamples

  	};

  }

  /**
   * @author tschw
   */

  function WebGLClipping() {

  	var scope = this;

  	var globalState = null,
  		numGlobalPlanes = 0,
  		localClippingEnabled = false,
  		renderingShadows = false;

  	var plane = new Plane(),
  		viewNormalMatrix = new Matrix3(),

  		uniform = { value: null, needsUpdate: false };

  	this.uniform = uniform;
  	this.numPlanes = 0;
  	this.numIntersection = 0;

  	this.init = function ( planes, enableLocalClipping, camera ) {

  		var enabled =
  			planes.length !== 0 ||
  			enableLocalClipping ||
  			// enable state of previous frame - the clipping code has to
  			// run another frame in order to reset the state:
  			numGlobalPlanes !== 0 ||
  			localClippingEnabled;

  		localClippingEnabled = enableLocalClipping;

  		globalState = projectPlanes( planes, camera, 0 );
  		numGlobalPlanes = planes.length;

  		return enabled;

  	};

  	this.beginShadows = function () {

  		renderingShadows = true;
  		projectPlanes( null );

  	};

  	this.endShadows = function () {

  		renderingShadows = false;
  		resetGlobalState();

  	};

  	this.setState = function ( planes, clipIntersection, clipShadows, camera, cache, fromCache ) {

  		if ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {

  			// there's no local clipping

  			if ( renderingShadows ) {

  				// there's no global clipping

  				projectPlanes( null );

  			} else {

  				resetGlobalState();

  			}

  		} else {

  			var nGlobal = renderingShadows ? 0 : numGlobalPlanes,
  				lGlobal = nGlobal * 4;

  			var dstArray = cache.clippingState || null;

  			uniform.value = dstArray; // ensure unique state

  			dstArray = projectPlanes( planes, camera, lGlobal, fromCache );

  			for ( var i = 0; i !== lGlobal; ++ i ) {

  				dstArray[ i ] = globalState[ i ];

  			}

  			cache.clippingState = dstArray;
  			this.numIntersection = clipIntersection ? this.numPlanes : 0;
  			this.numPlanes += nGlobal;

  		}


  	};

  	function resetGlobalState() {

  		if ( uniform.value !== globalState ) {

  			uniform.value = globalState;
  			uniform.needsUpdate = numGlobalPlanes > 0;

  		}

  		scope.numPlanes = numGlobalPlanes;
  		scope.numIntersection = 0;

  	}

  	function projectPlanes( planes, camera, dstOffset, skipTransform ) {

  		var nPlanes = planes !== null ? planes.length : 0,
  			dstArray = null;

  		if ( nPlanes !== 0 ) {

  			dstArray = uniform.value;

  			if ( skipTransform !== true || dstArray === null ) {

  				var flatSize = dstOffset + nPlanes * 4,
  					viewMatrix = camera.matrixWorldInverse;

  				viewNormalMatrix.getNormalMatrix( viewMatrix );

  				if ( dstArray === null || dstArray.length < flatSize ) {

  					dstArray = new Float32Array( flatSize );

  				}

  				for ( var i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {

  					plane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );

  					plane.normal.toArray( dstArray, i4 );
  					dstArray[ i4 + 3 ] = plane.constant;

  				}

  			}

  			uniform.value = dstArray;
  			uniform.needsUpdate = true;

  		}

  		scope.numPlanes = nPlanes;
  		scope.numIntersection = 0;

  		return dstArray;

  	}

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function WebGLExtensions( gl ) {

  	var extensions = {};

  	return {

  		get: function ( name ) {

  			if ( extensions[ name ] !== undefined ) {

  				return extensions[ name ];

  			}

  			var extension;

  			switch ( name ) {

  				case 'WEBGL_depth_texture':
  					extension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );
  					break;

  				case 'EXT_texture_filter_anisotropic':
  					extension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );
  					break;

  				case 'WEBGL_compressed_texture_s3tc':
  					extension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );
  					break;

  				case 'WEBGL_compressed_texture_pvrtc':
  					extension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );
  					break;

  				default:
  					extension = gl.getExtension( name );

  			}

  			if ( extension === null ) {

  				console.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );

  			}

  			extensions[ name ] = extension;

  			return extension;

  		}

  	};

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function WebGLGeometries( gl, attributes, info, bindingStates ) {

  	var geometries = new WeakMap();
  	var wireframeAttributes = new WeakMap();

  	function onGeometryDispose( event ) {

  		var geometry = event.target;
  		var buffergeometry = geometries.get( geometry );

  		if ( buffergeometry.index !== null ) {

  			attributes.remove( buffergeometry.index );

  		}

  		for ( var name in buffergeometry.attributes ) {

  			attributes.remove( buffergeometry.attributes[ name ] );

  		}

  		geometry.removeEventListener( 'dispose', onGeometryDispose );

  		geometries.delete( geometry );

  		var attribute = wireframeAttributes.get( buffergeometry );

  		if ( attribute ) {

  			attributes.remove( attribute );
  			wireframeAttributes.delete( buffergeometry );

  		}

  		bindingStates.releaseStatesOfGeometry( geometry );

  		if ( geometry.isInstancedBufferGeometry === true ) {

  			delete geometry._maxInstanceCount;

  		}

  		//

  		info.memory.geometries --;

  	}

  	function get( object, geometry ) {

  		var buffergeometry = geometries.get( geometry );

  		if ( buffergeometry ) { return buffergeometry; }

  		geometry.addEventListener( 'dispose', onGeometryDispose );

  		if ( geometry.isBufferGeometry ) {

  			buffergeometry = geometry;

  		} else if ( geometry.isGeometry ) {

  			if ( geometry._bufferGeometry === undefined ) {

  				geometry._bufferGeometry = new BufferGeometry().setFromObject( object );

  			}

  			buffergeometry = geometry._bufferGeometry;

  		}

  		geometries.set( geometry, buffergeometry );

  		info.memory.geometries ++;

  		return buffergeometry;

  	}

  	function update( geometry ) {

  		var geometryAttributes = geometry.attributes;

  		// Updating index buffer in VAO now. See WebGLBindingStates.

  		for ( var name in geometryAttributes ) {

  			attributes.update( geometryAttributes[ name ], 34962 );

  		}

  		// morph targets

  		var morphAttributes = geometry.morphAttributes;

  		for ( var name$1 in morphAttributes ) {

  			var array = morphAttributes[ name$1 ];

  			for ( var i = 0, l = array.length; i < l; i ++ ) {

  				attributes.update( array[ i ], 34962 );

  			}

  		}

  	}

  	function updateWireframeAttribute( geometry ) {

  		var indices = [];

  		var geometryIndex = geometry.index;
  		var geometryPosition = geometry.attributes.position;
  		var version = 0;

  		if ( geometryIndex !== null ) {

  			var array = geometryIndex.array;
  			version = geometryIndex.version;

  			for ( var i = 0, l = array.length; i < l; i += 3 ) {

  				var a = array[ i + 0 ];
  				var b = array[ i + 1 ];
  				var c = array[ i + 2 ];

  				indices.push( a, b, b, c, c, a );

  			}

  		} else {

  			var array$1 = geometryPosition.array;
  			version = geometryPosition.version;

  			for ( var i$1 = 0, l$1 = ( array$1.length / 3 ) - 1; i$1 < l$1; i$1 += 3 ) {

  				var a$1 = i$1 + 0;
  				var b$1 = i$1 + 1;
  				var c$1 = i$1 + 2;

  				indices.push( a$1, b$1, b$1, c$1, c$1, a$1 );

  			}

  		}

  		var attribute = new ( arrayMax$1( indices ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );
  		attribute.version = version;

  		// Updating index buffer in VAO now. See WebGLBindingStates

  		//

  		var previousAttribute = wireframeAttributes.get( geometry );

  		if ( previousAttribute ) { attributes.remove( previousAttribute ); }

  		//

  		wireframeAttributes.set( geometry, attribute );

  	}

  	function getWireframeAttribute( geometry ) {

  		var currentAttribute = wireframeAttributes.get( geometry );

  		if ( currentAttribute ) {

  			var geometryIndex = geometry.index;

  			if ( geometryIndex !== null ) {

  				// if the attribute is obsolete, create a new one

  				if ( currentAttribute.version < geometryIndex.version ) {

  					updateWireframeAttribute( geometry );

  				}

  			}

  		} else {

  			updateWireframeAttribute( geometry );

  		}

  		return wireframeAttributes.get( geometry );

  	}

  	return {

  		get: get,
  		update: update,

  		getWireframeAttribute: getWireframeAttribute

  	};

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function WebGLIndexedBufferRenderer( gl, extensions, info, capabilities ) {

  	var isWebGL2 = capabilities.isWebGL2;

  	var mode;

  	function setMode( value ) {

  		mode = value;

  	}

  	var type, bytesPerElement;

  	function setIndex( value ) {

  		type = value.type;
  		bytesPerElement = value.bytesPerElement;

  	}

  	function render( start, count ) {

  		gl.drawElements( mode, count, type, start * bytesPerElement );

  		info.update( count, mode );

  	}

  	function renderInstances( geometry, start, count, primcount ) {

  		if ( primcount === 0 ) { return; }

  		var extension, methodName;

  		if ( isWebGL2 ) {

  			extension = gl;
  			methodName = 'drawElementsInstanced';

  		} else {

  			extension = extensions.get( 'ANGLE_instanced_arrays' );
  			methodName = 'drawElementsInstancedANGLE';

  			if ( extension === null ) {

  				console.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
  				return;

  			}

  		}

  		extension[ methodName ]( mode, count, type, start * bytesPerElement, primcount );

  		info.update( count, mode, primcount );

  	}

  	//

  	this.setMode = setMode;
  	this.setIndex = setIndex;
  	this.render = render;
  	this.renderInstances = renderInstances;

  }

  /**
   * @author Mugen87 / https://github.com/Mugen87
   */

  function WebGLInfo( gl ) {

  	var memory = {
  		geometries: 0,
  		textures: 0
  	};

  	var render = {
  		frame: 0,
  		calls: 0,
  		triangles: 0,
  		points: 0,
  		lines: 0
  	};

  	function update( count, mode, instanceCount ) {

  		instanceCount = instanceCount || 1;

  		render.calls ++;

  		switch ( mode ) {

  			case 4:
  				render.triangles += instanceCount * ( count / 3 );
  				break;

  			case 1:
  				render.lines += instanceCount * ( count / 2 );
  				break;

  			case 3:
  				render.lines += instanceCount * ( count - 1 );
  				break;

  			case 2:
  				render.lines += instanceCount * count;
  				break;

  			case 0:
  				render.points += instanceCount * count;
  				break;

  			default:
  				console.error( 'THREE.WebGLInfo: Unknown draw mode:', mode );
  				break;

  		}

  	}

  	function reset() {

  		render.frame ++;
  		render.calls = 0;
  		render.triangles = 0;
  		render.points = 0;
  		render.lines = 0;

  	}

  	return {
  		memory: memory,
  		render: render,
  		programs: null,
  		autoReset: true,
  		reset: reset,
  		update: update
  	};

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function numericalSort( a, b ) {

  	return a[ 0 ] - b[ 0 ];

  }

  function absNumericalSort( a, b ) {

  	return Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );

  }

  function WebGLMorphtargets( gl ) {

  	var influencesList = {};
  	var morphInfluences = new Float32Array( 8 );

  	var workInfluences = [];

  	for ( var i = 0; i < 8; i ++ ) {

  		workInfluences[ i ] = [ i, 0 ];

  	}

  	function update( object, geometry, material, program ) {

  		var objectInfluences = object.morphTargetInfluences;

  		// When object doesn't have morph target influences defined, we treat it as a 0-length array
  		// This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences

  		var length = objectInfluences === undefined ? 0 : objectInfluences.length;

  		var influences = influencesList[ geometry.id ];

  		if ( influences === undefined ) {

  			// initialise list

  			influences = [];

  			for ( var i = 0; i < length; i ++ ) {

  				influences[ i ] = [ i, 0 ];

  			}

  			influencesList[ geometry.id ] = influences;

  		}

  		// Collect influences

  		for ( var i$1 = 0; i$1 < length; i$1 ++ ) {

  			var influence = influences[ i$1 ];

  			influence[ 0 ] = i$1;
  			influence[ 1 ] = objectInfluences[ i$1 ];

  		}

  		influences.sort( absNumericalSort );

  		for ( var i$2 = 0; i$2 < 8; i$2 ++ ) {

  			if ( i$2 < length && influences[ i$2 ][ 1 ] ) {

  				workInfluences[ i$2 ][ 0 ] = influences[ i$2 ][ 0 ];
  				workInfluences[ i$2 ][ 1 ] = influences[ i$2 ][ 1 ];

  			} else {

  				workInfluences[ i$2 ][ 0 ] = Number.MAX_SAFE_INTEGER;
  				workInfluences[ i$2 ][ 1 ] = 0;

  			}

  		}

  		workInfluences.sort( numericalSort );

  		var morphTargets = material.morphTargets && geometry.morphAttributes.position;
  		var morphNormals = material.morphNormals && geometry.morphAttributes.normal;

  		var morphInfluencesSum = 0;

  		for ( var i$3 = 0; i$3 < 8; i$3 ++ ) {

  			var influence$1 = workInfluences[ i$3 ];
  			var index = influence$1[ 0 ];
  			var value = influence$1[ 1 ];

  			if ( index !== Number.MAX_SAFE_INTEGER && value ) {

  				if ( morphTargets && geometry.getAttribute( 'morphTarget' + i$3 ) !== morphTargets[ index ] ) {

  					geometry.setAttribute( 'morphTarget' + i$3, morphTargets[ index ] );

  				}

  				if ( morphNormals && geometry.getAttribute( 'morphNormal' + i$3 ) !== morphNormals[ index ] ) {

  					geometry.setAttribute( 'morphNormal' + i$3, morphNormals[ index ] );

  				}

  				morphInfluences[ i$3 ] = value;
  				morphInfluencesSum += value;

  			} else {

  				if ( morphTargets && geometry.getAttribute( 'morphTarget' + i$3 ) !== undefined ) {

  					geometry.deleteAttribute( 'morphTarget' + i$3 );

  				}

  				if ( morphNormals && geometry.getAttribute( 'morphNormal' + i$3 ) !== undefined ) {

  					geometry.deleteAttribute( 'morphNormal' + i$3 );

  				}

  				morphInfluences[ i$3 ] = 0;

  			}

  		}

  		// GLSL shader uses formula baseinfluence * base + sum(target * influence)
  		// This allows us to switch between absolute morphs and relative morphs without changing shader code
  		// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)
  		var morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;

  		program.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );
  		program.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );

  	}

  	return {

  		update: update

  	};

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function WebGLObjects( gl, geometries, attributes, info ) {

  	var updateMap = new WeakMap();

  	function update( object ) {

  		var frame = info.render.frame;

  		var geometry = object.geometry;
  		var buffergeometry = geometries.get( object, geometry );

  		// Update once per frame

  		if ( updateMap.get( buffergeometry ) !== frame ) {

  			if ( geometry.isGeometry ) {

  				buffergeometry.updateFromObject( object );

  			}

  			geometries.update( buffergeometry );

  			updateMap.set( buffergeometry, frame );

  		}

  		if ( object.isInstancedMesh ) {

  			attributes.update( object.instanceMatrix, 34962 );

  		}

  		return buffergeometry;

  	}

  	function dispose() {

  		updateMap = new WeakMap();

  	}

  	return {

  		update: update,
  		dispose: dispose

  	};

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {

  	images = images !== undefined ? images : [];
  	mapping = mapping !== undefined ? mapping : CubeReflectionMapping;
  	format = format !== undefined ? format : RGBFormat;

  	Texture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

  	this.flipY = false;

  }

  CubeTexture.prototype = Object.create( Texture.prototype );
  CubeTexture.prototype.constructor = CubeTexture;

  CubeTexture.prototype.isCubeTexture = true;

  Object.defineProperty( CubeTexture.prototype, 'images', {

  	get: function () {

  		return this.image;

  	},

  	set: function ( value ) {

  		this.image = value;

  	}

  } );

  /**
   * @author Takahiro https://github.com/takahirox
   */

  function DataTexture2DArray( data, width, height, depth ) {

  	Texture.call( this, null );

  	this.image = { data: data || null, width: width || 1, height: height || 1, depth: depth || 1 };

  	this.magFilter = NearestFilter;
  	this.minFilter = NearestFilter;

  	this.wrapR = ClampToEdgeWrapping;

  	this.generateMipmaps = false;
  	this.flipY = false;

  	this.needsUpdate = true;

  }

  DataTexture2DArray.prototype = Object.create( Texture.prototype );
  DataTexture2DArray.prototype.constructor = DataTexture2DArray;
  DataTexture2DArray.prototype.isDataTexture2DArray = true;

  /**
   * @author Artur Trzesiok
   */

  function DataTexture3D( data, width, height, depth ) {

  	// We're going to add .setXXX() methods for setting properties later.
  	// Users can still set in DataTexture3D directly.
  	//
  	//	const texture = new THREE.DataTexture3D( data, width, height, depth );
  	// 	texture.anisotropy = 16;
  	//
  	// See #14839

  	Texture.call( this, null );

  	this.image = { data: data || null, width: width || 1, height: height || 1, depth: depth || 1 };

  	this.magFilter = NearestFilter;
  	this.minFilter = NearestFilter;

  	this.wrapR = ClampToEdgeWrapping;

  	this.generateMipmaps = false;
  	this.flipY = false;

  	this.needsUpdate = true;


  }

  DataTexture3D.prototype = Object.create( Texture.prototype );
  DataTexture3D.prototype.constructor = DataTexture3D;
  DataTexture3D.prototype.isDataTexture3D = true;

  /**
   * @author tschw
   * @author Mugen87 / https://github.com/Mugen87
   * @author mrdoob / http://mrdoob.com/
   *
   * Uniforms of a program.
   * Those form a tree structure with a special top-level container for the root,
   * which you get by calling 'new WebGLUniforms( gl, program )'.
   *
   *
   * Properties of inner nodes including the top-level container:
   *
   * .seq - array of nested uniforms
   * .map - nested uniforms by name
   *
   *
   * Methods of all nodes except the top-level container:
   *
   * .setValue( gl, value, [textures] )
   *
   * 		uploads a uniform value(s)
   *  	the 'textures' parameter is needed for sampler uniforms
   *
   *
   * Static methods of the top-level container (textures factorizations):
   *
   * .upload( gl, seq, values, textures )
   *
   * 		sets uniforms in 'seq' to 'values[id].value'
   *
   * .seqWithValue( seq, values ) : filteredSeq
   *
   * 		filters 'seq' entries with corresponding entry in values
   *
   *
   * Methods of the top-level container (textures factorizations):
   *
   * .setValue( gl, name, value, textures )
   *
   * 		sets uniform with  name 'name' to 'value'
   *
   * .setOptional( gl, obj, prop )
   *
   * 		like .set for an optional property of the object
   *
   */

  var emptyTexture = new Texture();
  var emptyTexture2dArray = new DataTexture2DArray();
  var emptyTexture3d = new DataTexture3D();
  var emptyCubeTexture = new CubeTexture();

  // --- Utilities ---

  // Array Caches (provide typed arrays for temporary by size)

  var arrayCacheF32 = [];
  var arrayCacheI32 = [];

  // Float32Array caches used for uploading Matrix uniforms

  var mat4array = new Float32Array( 16 );
  var mat3array = new Float32Array( 9 );
  var mat2array = new Float32Array( 4 );

  // Flattening for arrays of vectors and matrices

  function flatten$1( array, nBlocks, blockSize ) {

  	var firstElem = array[ 0 ];

  	if ( firstElem <= 0 || firstElem > 0 ) { return array; }
  	// unoptimized: ! isNaN( firstElem )
  	// see http://jacksondunstan.com/articles/983

  	var n = nBlocks * blockSize,
  		r = arrayCacheF32[ n ];

  	if ( r === undefined ) {

  		r = new Float32Array( n );
  		arrayCacheF32[ n ] = r;

  	}

  	if ( nBlocks !== 0 ) {

  		firstElem.toArray( r, 0 );

  		for ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {

  			offset += blockSize;
  			array[ i ].toArray( r, offset );

  		}

  	}

  	return r;

  }

  function arraysEqual( a, b ) {

  	if ( a.length !== b.length ) { return false; }

  	for ( var i = 0, l = a.length; i < l; i ++ ) {

  		if ( a[ i ] !== b[ i ] ) { return false; }

  	}

  	return true;

  }

  function copyArray$1( a, b ) {

  	for ( var i = 0, l = b.length; i < l; i ++ ) {

  		a[ i ] = b[ i ];

  	}

  }

  // Texture unit allocation

  function allocTexUnits( textures, n ) {

  	var r = arrayCacheI32[ n ];

  	if ( r === undefined ) {

  		r = new Int32Array( n );
  		arrayCacheI32[ n ] = r;

  	}

  	for ( var i = 0; i !== n; ++ i ) {

  		r[ i ] = textures.allocateTextureUnit();

  	}

  	return r;

  }

  // --- Setters ---

  // Note: Defining these methods externally, because they come in a bunch
  // and this way their names minify.

  // Single scalar

  function setValueV1f( gl, v ) {

  	var cache = this.cache;

  	if ( cache[ 0 ] === v ) { return; }

  	gl.uniform1f( this.addr, v );

  	cache[ 0 ] = v;

  }

  // Single float vector (from flat array or THREE.VectorN)

  function setValueV2f( gl, v ) {

  	var cache = this.cache;

  	if ( v.x !== undefined ) {

  		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {

  			gl.uniform2f( this.addr, v.x, v.y );

  			cache[ 0 ] = v.x;
  			cache[ 1 ] = v.y;

  		}

  	} else {

  		if ( arraysEqual( cache, v ) ) { return; }

  		gl.uniform2fv( this.addr, v );

  		copyArray$1( cache, v );

  	}

  }

  function setValueV3f( gl, v ) {

  	var cache = this.cache;

  	if ( v.x !== undefined ) {

  		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {

  			gl.uniform3f( this.addr, v.x, v.y, v.z );

  			cache[ 0 ] = v.x;
  			cache[ 1 ] = v.y;
  			cache[ 2 ] = v.z;

  		}

  	} else if ( v.r !== undefined ) {

  		if ( cache[ 0 ] !== v.r || cache[ 1 ] !== v.g || cache[ 2 ] !== v.b ) {

  			gl.uniform3f( this.addr, v.r, v.g, v.b );

  			cache[ 0 ] = v.r;
  			cache[ 1 ] = v.g;
  			cache[ 2 ] = v.b;

  		}

  	} else {

  		if ( arraysEqual( cache, v ) ) { return; }

  		gl.uniform3fv( this.addr, v );

  		copyArray$1( cache, v );

  	}

  }

  function setValueV4f( gl, v ) {

  	var cache = this.cache;

  	if ( v.x !== undefined ) {

  		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {

  			gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );

  			cache[ 0 ] = v.x;
  			cache[ 1 ] = v.y;
  			cache[ 2 ] = v.z;
  			cache[ 3 ] = v.w;

  		}

  	} else {

  		if ( arraysEqual( cache, v ) ) { return; }

  		gl.uniform4fv( this.addr, v );

  		copyArray$1( cache, v );

  	}

  }

  // Single matrix (from flat array or MatrixN)

  function setValueM2( gl, v ) {

  	var cache = this.cache;
  	var elements = v.elements;

  	if ( elements === undefined ) {

  		if ( arraysEqual( cache, v ) ) { return; }

  		gl.uniformMatrix2fv( this.addr, false, v );

  		copyArray$1( cache, v );

  	} else {

  		if ( arraysEqual( cache, elements ) ) { return; }

  		mat2array.set( elements );

  		gl.uniformMatrix2fv( this.addr, false, mat2array );

  		copyArray$1( cache, elements );

  	}

  }

  function setValueM3( gl, v ) {

  	var cache = this.cache;
  	var elements = v.elements;

  	if ( elements === undefined ) {

  		if ( arraysEqual( cache, v ) ) { return; }

  		gl.uniformMatrix3fv( this.addr, false, v );

  		copyArray$1( cache, v );

  	} else {

  		if ( arraysEqual( cache, elements ) ) { return; }

  		mat3array.set( elements );

  		gl.uniformMatrix3fv( this.addr, false, mat3array );

  		copyArray$1( cache, elements );

  	}

  }

  function setValueM4( gl, v ) {

  	var cache = this.cache;
  	var elements = v.elements;

  	if ( elements === undefined ) {

  		if ( arraysEqual( cache, v ) ) { return; }

  		gl.uniformMatrix4fv( this.addr, false, v );

  		copyArray$1( cache, v );

  	} else {

  		if ( arraysEqual( cache, elements ) ) { return; }

  		mat4array.set( elements );

  		gl.uniformMatrix4fv( this.addr, false, mat4array );

  		copyArray$1( cache, elements );

  	}

  }

  // Single texture (2D / Cube)

  function setValueT1( gl, v, textures ) {

  	var cache = this.cache;
  	var unit = textures.allocateTextureUnit();

  	if ( cache[ 0 ] !== unit ) {

  		gl.uniform1i( this.addr, unit );
  		cache[ 0 ] = unit;

  	}

  	textures.safeSetTexture2D( v || emptyTexture, unit );

  }

  function setValueT2DArray1( gl, v, textures ) {

  	var cache = this.cache;
  	var unit = textures.allocateTextureUnit();

  	if ( cache[ 0 ] !== unit ) {

  		gl.uniform1i( this.addr, unit );
  		cache[ 0 ] = unit;

  	}

  	textures.setTexture2DArray( v || emptyTexture2dArray, unit );

  }

  function setValueT3D1( gl, v, textures ) {

  	var cache = this.cache;
  	var unit = textures.allocateTextureUnit();

  	if ( cache[ 0 ] !== unit ) {

  		gl.uniform1i( this.addr, unit );
  		cache[ 0 ] = unit;

  	}

  	textures.setTexture3D( v || emptyTexture3d, unit );

  }

  function setValueT6( gl, v, textures ) {

  	var cache = this.cache;
  	var unit = textures.allocateTextureUnit();

  	if ( cache[ 0 ] !== unit ) {

  		gl.uniform1i( this.addr, unit );
  		cache[ 0 ] = unit;

  	}

  	textures.safeSetTextureCube( v || emptyCubeTexture, unit );

  }

  // Integer / Boolean vectors or arrays thereof (always flat arrays)

  function setValueV1i( gl, v ) {

  	var cache = this.cache;

  	if ( cache[ 0 ] === v ) { return; }

  	gl.uniform1i( this.addr, v );

  	cache[ 0 ] = v;

  }

  function setValueV2i( gl, v ) {

  	var cache = this.cache;

  	if ( arraysEqual( cache, v ) ) { return; }

  	gl.uniform2iv( this.addr, v );

  	copyArray$1( cache, v );

  }

  function setValueV3i( gl, v ) {

  	var cache = this.cache;

  	if ( arraysEqual( cache, v ) ) { return; }

  	gl.uniform3iv( this.addr, v );

  	copyArray$1( cache, v );

  }

  function setValueV4i( gl, v ) {

  	var cache = this.cache;

  	if ( arraysEqual( cache, v ) ) { return; }

  	gl.uniform4iv( this.addr, v );

  	copyArray$1( cache, v );

  }

  // uint

  function setValueV1ui( gl, v ) {

  	var cache = this.cache;

  	if ( cache[ 0 ] === v ) { return; }

  	gl.uniform1ui( this.addr, v );

  	cache[ 0 ] = v;

  }

  // Helper to pick the right setter for the singular case

  function getSingularSetter( type ) {

  	switch ( type ) {

  		case 0x1406: return setValueV1f; // FLOAT
  		case 0x8b50: return setValueV2f; // _VEC2
  		case 0x8b51: return setValueV3f; // _VEC3
  		case 0x8b52: return setValueV4f; // _VEC4

  		case 0x8b5a: return setValueM2; // _MAT2
  		case 0x8b5b: return setValueM3; // _MAT3
  		case 0x8b5c: return setValueM4; // _MAT4

  		case 0x1404: case 0x8b56: return setValueV1i; // INT, BOOL
  		case 0x8b53: case 0x8b57: return setValueV2i; // _VEC2
  		case 0x8b54: case 0x8b58: return setValueV3i; // _VEC3
  		case 0x8b55: case 0x8b59: return setValueV4i; // _VEC4

  		case 0x1405: return setValueV1ui; // UINT

  		case 0x8b5e: // SAMPLER_2D
  		case 0x8d66: // SAMPLER_EXTERNAL_OES
  		case 0x8dca: // INT_SAMPLER_2D
  		case 0x8dd2: // UNSIGNED_INT_SAMPLER_2D
  		case 0x8b62: // SAMPLER_2D_SHADOW
  			return setValueT1;

  		case 0x8b5f: // SAMPLER_3D
  		case 0x8dcb: // INT_SAMPLER_3D
  		case 0x8dd3: // UNSIGNED_INT_SAMPLER_3D
  			return setValueT3D1;

  		case 0x8b60: // SAMPLER_CUBE
  		case 0x8dcc: // INT_SAMPLER_CUBE
  		case 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE
  		case 0x8dc5: // SAMPLER_CUBE_SHADOW
  			return setValueT6;

  		case 0x8dc1: // SAMPLER_2D_ARRAY
  		case 0x8dcf: // INT_SAMPLER_2D_ARRAY
  		case 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY
  		case 0x8dc4: // SAMPLER_2D_ARRAY_SHADOW
  			return setValueT2DArray1;

  	}

  }

  // Array of scalars
  function setValueV1fArray( gl, v ) {

  	gl.uniform1fv( this.addr, v );

  }

  // Integer / Boolean vectors or arrays thereof (always flat arrays)
  function setValueV1iArray( gl, v ) {

  	gl.uniform1iv( this.addr, v );

  }

  function setValueV2iArray( gl, v ) {

  	gl.uniform2iv( this.addr, v );

  }

  function setValueV3iArray( gl, v ) {

  	gl.uniform3iv( this.addr, v );

  }

  function setValueV4iArray( gl, v ) {

  	gl.uniform4iv( this.addr, v );

  }


  // Array of vectors (flat or from THREE classes)

  function setValueV2fArray( gl, v ) {

  	var data = flatten$1( v, this.size, 2 );

  	gl.uniform2fv( this.addr, data );

  }

  function setValueV3fArray( gl, v ) {

  	var data = flatten$1( v, this.size, 3 );

  	gl.uniform3fv( this.addr, data );

  }

  function setValueV4fArray( gl, v ) {

  	var data = flatten$1( v, this.size, 4 );

  	gl.uniform4fv( this.addr, data );

  }

  // Array of matrices (flat or from THREE clases)

  function setValueM2Array( gl, v ) {

  	var data = flatten$1( v, this.size, 4 );

  	gl.uniformMatrix2fv( this.addr, false, data );

  }

  function setValueM3Array( gl, v ) {

  	var data = flatten$1( v, this.size, 9 );

  	gl.uniformMatrix3fv( this.addr, false, data );

  }

  function setValueM4Array( gl, v ) {

  	var data = flatten$1( v, this.size, 16 );

  	gl.uniformMatrix4fv( this.addr, false, data );

  }

  // Array of textures (2D / Cube)

  function setValueT1Array( gl, v, textures ) {

  	var n = v.length;

  	var units = allocTexUnits( textures, n );

  	gl.uniform1iv( this.addr, units );

  	for ( var i = 0; i !== n; ++ i ) {

  		textures.safeSetTexture2D( v[ i ] || emptyTexture, units[ i ] );

  	}

  }

  function setValueT6Array( gl, v, textures ) {

  	var n = v.length;

  	var units = allocTexUnits( textures, n );

  	gl.uniform1iv( this.addr, units );

  	for ( var i = 0; i !== n; ++ i ) {

  		textures.safeSetTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );

  	}

  }

  // Helper to pick the right setter for a pure (bottom-level) array

  function getPureArraySetter( type ) {

  	switch ( type ) {

  		case 0x1406: return setValueV1fArray; // FLOAT
  		case 0x8b50: return setValueV2fArray; // _VEC2
  		case 0x8b51: return setValueV3fArray; // _VEC3
  		case 0x8b52: return setValueV4fArray; // _VEC4

  		case 0x8b5a: return setValueM2Array; // _MAT2
  		case 0x8b5b: return setValueM3Array; // _MAT3
  		case 0x8b5c: return setValueM4Array; // _MAT4

  		case 0x1404: case 0x8b56: return setValueV1iArray; // INT, BOOL
  		case 0x8b53: case 0x8b57: return setValueV2iArray; // _VEC2
  		case 0x8b54: case 0x8b58: return setValueV3iArray; // _VEC3
  		case 0x8b55: case 0x8b59: return setValueV4iArray; // _VEC4

  		case 0x8b5e: // SAMPLER_2D
  		case 0x8d66: // SAMPLER_EXTERNAL_OES
  		case 0x8dca: // INT_SAMPLER_2D
  		case 0x8dd2: // UNSIGNED_INT_SAMPLER_2D
  		case 0x8b62: // SAMPLER_2D_SHADOW
  			return setValueT1Array;

  		case 0x8b60: // SAMPLER_CUBE
  		case 0x8dcc: // INT_SAMPLER_CUBE
  		case 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE
  		case 0x8dc5: // SAMPLER_CUBE_SHADOW
  			return setValueT6Array;

  	}

  }

  // --- Uniform Classes ---

  function SingleUniform( id, activeInfo, addr ) {

  	this.id = id;
  	this.addr = addr;
  	this.cache = [];
  	this.setValue = getSingularSetter( activeInfo.type );

  	// this.path = activeInfo.name; // DEBUG

  }

  function PureArrayUniform( id, activeInfo, addr ) {

  	this.id = id;
  	this.addr = addr;
  	this.cache = [];
  	this.size = activeInfo.size;
  	this.setValue = getPureArraySetter( activeInfo.type );

  	// this.path = activeInfo.name; // DEBUG

  }

  PureArrayUniform.prototype.updateCache = function ( data ) {

  	var cache = this.cache;

  	if ( data instanceof Float32Array && cache.length !== data.length ) {

  		this.cache = new Float32Array( data.length );

  	}

  	copyArray$1( cache, data );

  };

  function StructuredUniform( id ) {

  	this.id = id;

  	this.seq = [];
  	this.map = {};

  }

  StructuredUniform.prototype.setValue = function ( gl, value, textures ) {

  	var seq = this.seq;

  	for ( var i = 0, n = seq.length; i !== n; ++ i ) {

  		var u = seq[ i ];
  		u.setValue( gl, value[ u.id ], textures );

  	}

  };

  // --- Top-level ---

  // Parser - builds up the property tree from the path strings

  var RePathPart = /([\w\d_]+)(\])?(\[|\.)?/g;

  // extracts
  // 	- the identifier (member name or array index)
  //  - followed by an optional right bracket (found when array index)
  //  - followed by an optional left bracket or dot (type of subscript)
  //
  // Note: These portions can be read in a non-overlapping fashion and
  // allow straightforward parsing of the hierarchy that WebGL encodes
  // in the uniform names.

  function addUniform( container, uniformObject ) {

  	container.seq.push( uniformObject );
  	container.map[ uniformObject.id ] = uniformObject;

  }

  function parseUniform( activeInfo, addr, container ) {

  	var path = activeInfo.name,
  		pathLength = path.length;

  	// reset RegExp object, because of the early exit of a previous run
  	RePathPart.lastIndex = 0;

  	while ( true ) {

  		var match = RePathPart.exec( path ),
  			matchEnd = RePathPart.lastIndex;

  		var id = match[ 1 ],
  			idIsIndex = match[ 2 ] === ']',
  			subscript = match[ 3 ];

  		if ( idIsIndex ) { id = id | 0; } // convert to integer

  		if ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {

  			// bare name or "pure" bottom-level array "[0]" suffix

  			addUniform( container, subscript === undefined ?
  				new SingleUniform( id, activeInfo, addr ) :
  				new PureArrayUniform( id, activeInfo, addr ) );

  			break;

  		} else {

  			// step into inner node / create it in case it doesn't exist

  			var map = container.map;
  			var next = map[ id ];

  			if ( next === undefined ) {

  				next = new StructuredUniform( id );
  				addUniform( container, next );

  			}

  			container = next;

  		}

  	}

  }

  // Root Container

  function WebGLUniforms( gl, program ) {

  	this.seq = [];
  	this.map = {};

  	var n = gl.getProgramParameter( program, 35718 );

  	for ( var i = 0; i < n; ++ i ) {

  		var info = gl.getActiveUniform( program, i ),
  			addr = gl.getUniformLocation( program, info.name );

  		parseUniform( info, addr, this );

  	}

  }

  WebGLUniforms.prototype.setValue = function ( gl, name, value, textures ) {

  	var u = this.map[ name ];

  	if ( u !== undefined ) { u.setValue( gl, value, textures ); }

  };

  WebGLUniforms.prototype.setOptional = function ( gl, object, name ) {

  	var v = object[ name ];

  	if ( v !== undefined ) { this.setValue( gl, name, v ); }

  };


  // Static interface

  WebGLUniforms.upload = function ( gl, seq, values, textures ) {

  	for ( var i = 0, n = seq.length; i !== n; ++ i ) {

  		var u = seq[ i ],
  			v = values[ u.id ];

  		if ( v.needsUpdate !== false ) {

  			// note: always updating when .needsUpdate is undefined
  			u.setValue( gl, v.value, textures );

  		}

  	}

  };

  WebGLUniforms.seqWithValue = function ( seq, values ) {

  	var r = [];

  	for ( var i = 0, n = seq.length; i !== n; ++ i ) {

  		var u = seq[ i ];
  		if ( u.id in values ) { r.push( u ); }

  	}

  	return r;

  };

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function WebGLShader( gl, type, string ) {

  	var shader = gl.createShader( type );

  	gl.shaderSource( shader, string );
  	gl.compileShader( shader );

  	return shader;

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  var programIdCount = 0;

  function addLineNumbers( string ) {

  	var lines = string.split( '\n' );

  	for ( var i = 0; i < lines.length; i ++ ) {

  		lines[ i ] = ( i + 1 ) + ': ' + lines[ i ];

  	}

  	return lines.join( '\n' );

  }

  function getEncodingComponents( encoding ) {

  	switch ( encoding ) {

  		case LinearEncoding:
  			return [ 'Linear', '( value )' ];
  		case sRGBEncoding:
  			return [ 'sRGB', '( value )' ];
  		case RGBEEncoding:
  			return [ 'RGBE', '( value )' ];
  		case RGBM7Encoding:
  			return [ 'RGBM', '( value, 7.0 )' ];
  		case RGBM16Encoding:
  			return [ 'RGBM', '( value, 16.0 )' ];
  		case RGBDEncoding:
  			return [ 'RGBD', '( value, 256.0 )' ];
  		case GammaEncoding:
  			return [ 'Gamma', '( value, float( GAMMA_FACTOR ) )' ];
  		case LogLuvEncoding:
  			return [ 'LogLuv', '( value )' ];
  		default:
  			console.warn( 'THREE.WebGLProgram: Unsupported encoding:', encoding );
  			return [ 'Linear', '( value )' ];

  	}

  }

  function getShaderErrors( gl, shader, type ) {

  	var status = gl.getShaderParameter( shader, 35713 );
  	var log = gl.getShaderInfoLog( shader ).trim();

  	if ( status && log === '' ) { return ''; }

  	// --enable-privileged-webgl-extension
  	// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );

  	var source = gl.getShaderSource( shader );

  	return 'THREE.WebGLShader: gl.getShaderInfoLog() ' + type + '\n' + log + addLineNumbers( source );

  }

  function getTexelDecodingFunction( functionName, encoding ) {

  	var components = getEncodingComponents( encoding );
  	return 'vec4 ' + functionName + '( vec4 value ) { return ' + components[ 0 ] + 'ToLinear' + components[ 1 ] + '; }';

  }

  function getTexelEncodingFunction( functionName, encoding ) {

  	var components = getEncodingComponents( encoding );
  	return 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[ 0 ] + components[ 1 ] + '; }';

  }

  function getToneMappingFunction( functionName, toneMapping ) {

  	var toneMappingName;

  	switch ( toneMapping ) {

  		case LinearToneMapping:
  			toneMappingName = 'Linear';
  			break;

  		case ReinhardToneMapping:
  			toneMappingName = 'Reinhard';
  			break;

  		case CineonToneMapping:
  			toneMappingName = 'OptimizedCineon';
  			break;

  		case ACESFilmicToneMapping:
  			toneMappingName = 'ACESFilmic';
  			break;

  		case CustomToneMapping:
  			toneMappingName = 'Custom';
  			break;

  		default:
  			console.warn( 'THREE.WebGLProgram: Unsupported toneMapping:', toneMapping );
  			toneMappingName = 'Linear';

  	}

  	return 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';

  }

  function generateExtensions( parameters ) {

  	var chunks = [
  		( parameters.extensionDerivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === 'physical' ) ? '#extension GL_OES_standard_derivatives : enable' : '',
  		( parameters.extensionFragDepth || parameters.logarithmicDepthBuffer ) && parameters.rendererExtensionFragDepth ? '#extension GL_EXT_frag_depth : enable' : '',
  		( parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ) ? '#extension GL_EXT_draw_buffers : require' : '',
  		( parameters.extensionShaderTextureLOD || parameters.envMap ) && parameters.rendererExtensionShaderTextureLod ? '#extension GL_EXT_shader_texture_lod : enable' : ''
  	];

  	return chunks.filter( filterEmptyLine ).join( '\n' );

  }

  function generateDefines( defines ) {

  	var chunks = [];

  	for ( var name in defines ) {

  		var value = defines[ name ];

  		if ( value === false ) { continue; }

  		chunks.push( '#define ' + name + ' ' + value );

  	}

  	return chunks.join( '\n' );

  }

  function fetchAttributeLocations( gl, program ) {

  	var attributes = {};

  	var n = gl.getProgramParameter( program, 35721 );

  	for ( var i = 0; i < n; i ++ ) {

  		var info = gl.getActiveAttrib( program, i );
  		var name = info.name;

  		// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );

  		attributes[ name ] = gl.getAttribLocation( program, name );

  	}

  	return attributes;

  }

  function filterEmptyLine( string ) {

  	return string !== '';

  }

  function replaceLightNums( string, parameters ) {

  	return string
  		.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )
  		.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )
  		.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )
  		.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )
  		.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights )
  		.replace( /NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows )
  		.replace( /NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows )
  		.replace( /NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows );

  }

  function replaceClippingPlaneNums( string, parameters ) {

  	return string
  		.replace( /NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes )
  		.replace( /UNION_CLIPPING_PLANES/g, ( parameters.numClippingPlanes - parameters.numClipIntersection ) );

  }

  // Resolve Includes

  var includePattern = /^[ \t]*#include +<([\w\d./]+)>/gm;

  function resolveIncludes( string ) {

  	return string.replace( includePattern, includeReplacer );

  }

  function includeReplacer( match, include ) {

  	var string = ShaderChunk[ include ];

  	if ( string === undefined ) {

  		throw new Error( 'Can not resolve #include <' + include + '>' );

  	}

  	return resolveIncludes( string );

  }

  // Unroll Loops

  var deprecatedUnrollLoopPattern = /#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;
  var unrollLoopPattern = /#pragma unroll_loop_start[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}[\s]+?#pragma unroll_loop_end/g;

  function unrollLoops( string ) {

  	return string
  		.replace( unrollLoopPattern, loopReplacer )
  		.replace( deprecatedUnrollLoopPattern, deprecatedLoopReplacer );

  }

  function deprecatedLoopReplacer( match, start, end, snippet ) {

  	console.warn( 'WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.' );
  	return loopReplacer( match, start, end, snippet );

  }

  function loopReplacer( match, start, end, snippet ) {

  	var string = '';

  	for ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {

  		string += snippet
  			.replace( /\[ i \]/g, '[ ' + i + ' ]' )
  			.replace( /UNROLLED_LOOP_INDEX/g, i );

  	}

  	return string;

  }

  //

  function generatePrecision( parameters ) {

  	var precisionstring = "precision " + parameters.precision + " float;\nprecision " + parameters.precision + " int;";

  	if ( parameters.precision === "highp" ) {

  		precisionstring += "\n#define HIGH_PRECISION";

  	} else if ( parameters.precision === "mediump" ) {

  		precisionstring += "\n#define MEDIUM_PRECISION";

  	} else if ( parameters.precision === "lowp" ) {

  		precisionstring += "\n#define LOW_PRECISION";

  	}

  	return precisionstring;

  }

  function generateShadowMapTypeDefine( parameters ) {

  	var shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';

  	if ( parameters.shadowMapType === PCFShadowMap ) {

  		shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';

  	} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {

  		shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';

  	} else if ( parameters.shadowMapType === VSMShadowMap ) {

  		shadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';

  	}

  	return shadowMapTypeDefine;

  }

  function generateEnvMapTypeDefine( parameters ) {

  	var envMapTypeDefine = 'ENVMAP_TYPE_CUBE';

  	if ( parameters.envMap ) {

  		switch ( parameters.envMapMode ) {

  			case CubeReflectionMapping:
  			case CubeRefractionMapping:
  				envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
  				break;

  			case CubeUVReflectionMapping:
  			case CubeUVRefractionMapping:
  				envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';
  				break;

  			case EquirectangularReflectionMapping:
  			case EquirectangularRefractionMapping:
  				envMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';
  				break;

  		}

  	}

  	return envMapTypeDefine;

  }

  function generateEnvMapModeDefine( parameters ) {

  	var envMapModeDefine = 'ENVMAP_MODE_REFLECTION';

  	if ( parameters.envMap ) {

  		switch ( parameters.envMapMode ) {

  			case CubeRefractionMapping:
  			case EquirectangularRefractionMapping:
  				envMapModeDefine = 'ENVMAP_MODE_REFRACTION';
  				break;

  		}

  	}

  	return envMapModeDefine;

  }

  function generateEnvMapBlendingDefine( parameters ) {

  	var envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';

  	if ( parameters.envMap ) {

  		switch ( parameters.combine ) {

  			case MultiplyOperation:
  				envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
  				break;

  			case MixOperation:
  				envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';
  				break;

  			case AddOperation:
  				envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';
  				break;

  		}

  	}

  	return envMapBlendingDefine;

  }

  function WebGLProgram( renderer, cacheKey, parameters, bindingStates ) {

  	var gl = renderer.getContext();

  	var defines = parameters.defines;

  	var vertexShader = parameters.vertexShader;
  	var fragmentShader = parameters.fragmentShader;

  	var shadowMapTypeDefine = generateShadowMapTypeDefine( parameters );
  	var envMapTypeDefine = generateEnvMapTypeDefine( parameters );
  	var envMapModeDefine = generateEnvMapModeDefine( parameters );
  	var envMapBlendingDefine = generateEnvMapBlendingDefine( parameters );


  	var gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;

  	var customExtensions = parameters.isWebGL2 ? '' : generateExtensions( parameters );

  	var customDefines = generateDefines( defines );

  	var program = gl.createProgram();

  	var prefixVertex, prefixFragment;

  	if ( parameters.isRawShaderMaterial ) {

  		prefixVertex = [

  			customDefines

  		].filter( filterEmptyLine ).join( '\n' );

  		if ( prefixVertex.length > 0 ) {

  			prefixVertex += '\n';

  		}

  		prefixFragment = [

  			customExtensions,
  			customDefines

  		].filter( filterEmptyLine ).join( '\n' );

  		if ( prefixFragment.length > 0 ) {

  			prefixFragment += '\n';

  		}

  	} else {

  		prefixVertex = [

  			generatePrecision( parameters ),

  			'#define SHADER_NAME ' + parameters.shaderName,

  			customDefines,

  			parameters.instancing ? '#define USE_INSTANCING' : '',
  			parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',

  			'#define GAMMA_FACTOR ' + gammaFactorDefine,

  			'#define MAX_BONES ' + parameters.maxBones,
  			( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
  			( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',

  			parameters.map ? '#define USE_MAP' : '',
  			parameters.envMap ? '#define USE_ENVMAP' : '',
  			parameters.envMap ? '#define ' + envMapModeDefine : '',
  			parameters.lightMap ? '#define USE_LIGHTMAP' : '',
  			parameters.aoMap ? '#define USE_AOMAP' : '',
  			parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
  			parameters.bumpMap ? '#define USE_BUMPMAP' : '',
  			parameters.normalMap ? '#define USE_NORMALMAP' : '',
  			( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',
  			( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',

  			parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',
  			parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',
  			parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',
  			parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',
  			parameters.specularMap ? '#define USE_SPECULARMAP' : '',
  			parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
  			parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
  			parameters.alphaMap ? '#define USE_ALPHAMAP' : '',

  			parameters.vertexTangents ? '#define USE_TANGENT' : '',
  			parameters.vertexColors ? '#define USE_COLOR' : '',
  			parameters.vertexUvs ? '#define USE_UV' : '',
  			parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',

  			parameters.flatShading ? '#define FLAT_SHADED' : '',

  			parameters.skinning ? '#define USE_SKINNING' : '',
  			parameters.useVertexTexture ? '#define BONE_TEXTURE' : '',

  			parameters.morphTargets ? '#define USE_MORPHTARGETS' : '',
  			parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',
  			parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
  			parameters.flipSided ? '#define FLIP_SIDED' : '',

  			parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
  			parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

  			parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',

  			parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
  			( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',

  			'uniform mat4 modelMatrix;',
  			'uniform mat4 modelViewMatrix;',
  			'uniform mat4 projectionMatrix;',
  			'uniform mat4 viewMatrix;',
  			'uniform mat3 normalMatrix;',
  			'uniform vec3 cameraPosition;',
  			'uniform bool isOrthographic;',

  			'#ifdef USE_INSTANCING',

  			' attribute mat4 instanceMatrix;',

  			'#endif',

  			'attribute vec3 position;',
  			'attribute vec3 normal;',
  			'attribute vec2 uv;',

  			'#ifdef USE_TANGENT',

  			'	attribute vec4 tangent;',

  			'#endif',

  			'#ifdef USE_COLOR',

  			'	attribute vec3 color;',

  			'#endif',

  			'#ifdef USE_MORPHTARGETS',

  			'	attribute vec3 morphTarget0;',
  			'	attribute vec3 morphTarget1;',
  			'	attribute vec3 morphTarget2;',
  			'	attribute vec3 morphTarget3;',

  			'	#ifdef USE_MORPHNORMALS',

  			'		attribute vec3 morphNormal0;',
  			'		attribute vec3 morphNormal1;',
  			'		attribute vec3 morphNormal2;',
  			'		attribute vec3 morphNormal3;',

  			'	#else',

  			'		attribute vec3 morphTarget4;',
  			'		attribute vec3 morphTarget5;',
  			'		attribute vec3 morphTarget6;',
  			'		attribute vec3 morphTarget7;',

  			'	#endif',

  			'#endif',

  			'#ifdef USE_SKINNING',

  			'	attribute vec4 skinIndex;',
  			'	attribute vec4 skinWeight;',

  			'#endif',

  			'\n'

  		].filter( filterEmptyLine ).join( '\n' );

  		prefixFragment = [

  			customExtensions,

  			generatePrecision( parameters ),

  			'#define SHADER_NAME ' + parameters.shaderName,

  			customDefines,

  			parameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest + ( parameters.alphaTest % 1 ? '' : '.0' ) : '', // add '.0' if integer

  			'#define GAMMA_FACTOR ' + gammaFactorDefine,

  			( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
  			( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',

  			parameters.map ? '#define USE_MAP' : '',
  			parameters.matcap ? '#define USE_MATCAP' : '',
  			parameters.envMap ? '#define USE_ENVMAP' : '',
  			parameters.envMap ? '#define ' + envMapTypeDefine : '',
  			parameters.envMap ? '#define ' + envMapModeDefine : '',
  			parameters.envMap ? '#define ' + envMapBlendingDefine : '',
  			parameters.lightMap ? '#define USE_LIGHTMAP' : '',
  			parameters.aoMap ? '#define USE_AOMAP' : '',
  			parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
  			parameters.bumpMap ? '#define USE_BUMPMAP' : '',
  			parameters.normalMap ? '#define USE_NORMALMAP' : '',
  			( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',
  			( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',
  			parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',
  			parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',
  			parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',
  			parameters.specularMap ? '#define USE_SPECULARMAP' : '',
  			parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
  			parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
  			parameters.alphaMap ? '#define USE_ALPHAMAP' : '',

  			parameters.sheen ? '#define USE_SHEEN' : '',

  			parameters.vertexTangents ? '#define USE_TANGENT' : '',
  			parameters.vertexColors ? '#define USE_COLOR' : '',
  			parameters.vertexUvs ? '#define USE_UV' : '',
  			parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',

  			parameters.gradientMap ? '#define USE_GRADIENTMAP' : '',

  			parameters.flatShading ? '#define FLAT_SHADED' : '',

  			parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
  			parameters.flipSided ? '#define FLIP_SIDED' : '',

  			parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
  			parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

  			parameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',

  			parameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '',

  			parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
  			( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',

  			( ( parameters.extensionShaderTextureLOD || parameters.envMap ) && parameters.rendererExtensionShaderTextureLod ) ? '#define TEXTURE_LOD_EXT' : '',

  			'uniform mat4 viewMatrix;',
  			'uniform vec3 cameraPosition;',
  			'uniform bool isOrthographic;',

  			( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',
  			( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below
  			( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',

  			parameters.dithering ? '#define DITHERING' : '',

  			ShaderChunk[ 'encodings_pars_fragment' ], // this code is required here because it is used by the various encoding/decoding function defined below
  			parameters.map ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',
  			parameters.matcap ? getTexelDecodingFunction( 'matcapTexelToLinear', parameters.matcapEncoding ) : '',
  			parameters.envMap ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',
  			parameters.emissiveMap ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',
  			parameters.lightMap ? getTexelDecodingFunction( 'lightMapTexelToLinear', parameters.lightMapEncoding ) : '',
  			getTexelEncodingFunction( 'linearToOutputTexel', parameters.outputEncoding ),

  			parameters.depthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '',

  			'\n'

  		].filter( filterEmptyLine ).join( '\n' );

  	}

  	vertexShader = resolveIncludes( vertexShader );
  	vertexShader = replaceLightNums( vertexShader, parameters );
  	vertexShader = replaceClippingPlaneNums( vertexShader, parameters );

  	fragmentShader = resolveIncludes( fragmentShader );
  	fragmentShader = replaceLightNums( fragmentShader, parameters );
  	fragmentShader = replaceClippingPlaneNums( fragmentShader, parameters );

  	vertexShader = unrollLoops( vertexShader );
  	fragmentShader = unrollLoops( fragmentShader );

  	if ( parameters.isWebGL2 && ! parameters.isRawShaderMaterial ) {

  		var isGLSL3ShaderMaterial = false;

  		var versionRegex = /^\s*#version\s+300\s+es\s*\n/;

  		if ( parameters.isShaderMaterial &&
  			vertexShader.match( versionRegex ) !== null &&
  			fragmentShader.match( versionRegex ) !== null ) {

  			isGLSL3ShaderMaterial = true;

  			vertexShader = vertexShader.replace( versionRegex, '' );
  			fragmentShader = fragmentShader.replace( versionRegex, '' );

  		}

  		// GLSL 3.0 conversion

  		prefixVertex = [
  			'#version 300 es\n',
  			'#define attribute in',
  			'#define varying out',
  			'#define texture2D texture'
  		].join( '\n' ) + '\n' + prefixVertex;

  		prefixFragment = [
  			'#version 300 es\n',
  			'#define varying in',
  			isGLSL3ShaderMaterial ? '' : 'out highp vec4 pc_fragColor;',
  			isGLSL3ShaderMaterial ? '' : '#define gl_FragColor pc_fragColor',
  			'#define gl_FragDepthEXT gl_FragDepth',
  			'#define texture2D texture',
  			'#define textureCube texture',
  			'#define texture2DProj textureProj',
  			'#define texture2DLodEXT textureLod',
  			'#define texture2DProjLodEXT textureProjLod',
  			'#define textureCubeLodEXT textureLod',
  			'#define texture2DGradEXT textureGrad',
  			'#define texture2DProjGradEXT textureProjGrad',
  			'#define textureCubeGradEXT textureGrad'
  		].join( '\n' ) + '\n' + prefixFragment;

  	}

  	var vertexGlsl = prefixVertex + vertexShader;
  	var fragmentGlsl = prefixFragment + fragmentShader;

  	// console.log( '*VERTEX*', vertexGlsl );
  	// console.log( '*FRAGMENT*', fragmentGlsl );

  	var glVertexShader = WebGLShader( gl, 35633, vertexGlsl );
  	var glFragmentShader = WebGLShader( gl, 35632, fragmentGlsl );

  	gl.attachShader( program, glVertexShader );
  	gl.attachShader( program, glFragmentShader );

  	// Force a particular attribute to index 0.

  	if ( parameters.index0AttributeName !== undefined ) {

  		gl.bindAttribLocation( program, 0, parameters.index0AttributeName );

  	} else if ( parameters.morphTargets === true ) {

  		// programs with morphTargets displace position out of attribute 0
  		gl.bindAttribLocation( program, 0, 'position' );

  	}

  	gl.linkProgram( program );

  	// check for link errors
  	if ( renderer.debug.checkShaderErrors ) {

  		var programLog = gl.getProgramInfoLog( program ).trim();
  		var vertexLog = gl.getShaderInfoLog( glVertexShader ).trim();
  		var fragmentLog = gl.getShaderInfoLog( glFragmentShader ).trim();

  		var runnable = true;
  		var haveDiagnostics = true;

  		if ( gl.getProgramParameter( program, 35714 ) === false ) {

  			runnable = false;

  			var vertexErrors = getShaderErrors( gl, glVertexShader, 'vertex' );
  			var fragmentErrors = getShaderErrors( gl, glFragmentShader, 'fragment' );

  			console.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), '35715', gl.getProgramParameter( program, 35715 ), 'gl.getProgramInfoLog', programLog, vertexErrors, fragmentErrors );

  		} else if ( programLog !== '' ) {

  			console.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );

  		} else if ( vertexLog === '' || fragmentLog === '' ) {

  			haveDiagnostics = false;

  		}

  		if ( haveDiagnostics ) {

  			this.diagnostics = {

  				runnable: runnable,

  				programLog: programLog,

  				vertexShader: {

  					log: vertexLog,
  					prefix: prefixVertex

  				},

  				fragmentShader: {

  					log: fragmentLog,
  					prefix: prefixFragment

  				}

  			};

  		}

  	}

  	// Clean up

  	// Crashes in iOS9 and iOS10. #18402
  	// gl.detachShader( program, glVertexShader );
  	// gl.detachShader( program, glFragmentShader );

  	gl.deleteShader( glVertexShader );
  	gl.deleteShader( glFragmentShader );

  	// set up caching for uniform locations

  	var cachedUniforms;

  	this.getUniforms = function () {

  		if ( cachedUniforms === undefined ) {

  			cachedUniforms = new WebGLUniforms( gl, program );

  		}

  		return cachedUniforms;

  	};

  	// set up caching for attribute locations

  	var cachedAttributes;

  	this.getAttributes = function () {

  		if ( cachedAttributes === undefined ) {

  			cachedAttributes = fetchAttributeLocations( gl, program );

  		}

  		return cachedAttributes;

  	};

  	// free resource

  	this.destroy = function () {

  		bindingStates.releaseStatesOfProgram( this );

  		gl.deleteProgram( program );
  		this.program = undefined;

  	};

  	//

  	this.name = parameters.shaderName;
  	this.id = programIdCount ++;
  	this.cacheKey = cacheKey;
  	this.usedTimes = 1;
  	this.program = program;
  	this.vertexShader = glVertexShader;
  	this.fragmentShader = glFragmentShader;

  	return this;

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function WebGLPrograms( renderer, extensions, capabilities, bindingStates ) {

  	var programs = [];

  	var isWebGL2 = capabilities.isWebGL2;
  	var logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;
  	var floatVertexTextures = capabilities.floatVertexTextures;
  	var maxVertexUniforms = capabilities.maxVertexUniforms;
  	var vertexTextures = capabilities.vertexTextures;

  	var precision = capabilities.precision;

  	var shaderIDs = {
  		MeshDepthMaterial: 'depth',
  		MeshDistanceMaterial: 'distanceRGBA',
  		MeshNormalMaterial: 'normal',
  		MeshBasicMaterial: 'basic',
  		MeshLambertMaterial: 'lambert',
  		MeshPhongMaterial: 'phong',
  		MeshToonMaterial: 'toon',
  		MeshStandardMaterial: 'physical',
  		MeshPhysicalMaterial: 'physical',
  		MeshMatcapMaterial: 'matcap',
  		LineBasicMaterial: 'basic',
  		LineDashedMaterial: 'dashed',
  		PointsMaterial: 'points',
  		ShadowMaterial: 'shadow',
  		SpriteMaterial: 'sprite'
  	};

  	var parameterNames = [
  		"precision", "isWebGL2", "supportsVertexTextures", "outputEncoding", "instancing",
  		"map", "mapEncoding", "matcap", "matcapEncoding", "envMap", "envMapMode", "envMapEncoding", "envMapCubeUV",
  		"lightMap", "lightMapEncoding", "aoMap", "emissiveMap", "emissiveMapEncoding", "bumpMap", "normalMap", "objectSpaceNormalMap", "tangentSpaceNormalMap", "clearcoatMap", "clearcoatRoughnessMap", "clearcoatNormalMap", "displacementMap", "specularMap",
  		"roughnessMap", "metalnessMap", "gradientMap",
  		"alphaMap", "combine", "vertexColors", "vertexTangents", "vertexUvs", "uvsVertexOnly", "fog", "useFog", "fogExp2",
  		"flatShading", "sizeAttenuation", "logarithmicDepthBuffer", "skinning",
  		"maxBones", "useVertexTexture", "morphTargets", "morphNormals",
  		"maxMorphTargets", "maxMorphNormals", "premultipliedAlpha",
  		"numDirLights", "numPointLights", "numSpotLights", "numHemiLights", "numRectAreaLights",
  		"numDirLightShadows", "numPointLightShadows", "numSpotLightShadows",
  		"shadowMapEnabled", "shadowMapType", "toneMapping", 'physicallyCorrectLights',
  		"alphaTest", "doubleSided", "flipSided", "numClippingPlanes", "numClipIntersection", "depthPacking", "dithering",
  		"sheen"
  	];

  	function getShaderObject( material, shaderID ) {

  		var shaderobject;

  		if ( shaderID ) {

  			var shader = ShaderLib[ shaderID ];

  			shaderobject = {
  				name: material.name || material.type,
  				uniforms: UniformsUtils.clone( shader.uniforms ),
  				vertexShader: shader.vertexShader,
  				fragmentShader: shader.fragmentShader
  			};

  		} else {

  			shaderobject = {
  				name: material.name || material.type,
  				uniforms: material.uniforms,
  				vertexShader: material.vertexShader,
  				fragmentShader: material.fragmentShader
  			};

  		}

  		return shaderobject;

  	}

  	function allocateBones( object ) {

  		var skeleton = object.skeleton;
  		var bones = skeleton.bones;

  		if ( floatVertexTextures ) {

  			return 1024;

  		} else {

  			// default for when object is not specified
  			// ( for example when prebuilding shader to be used with multiple objects )
  			//
  			//  - leave some extra space for other uniforms
  			//  - limit here is ANGLE's 254 max uniform vectors
  			//    (up to 54 should be safe)

  			var nVertexUniforms = maxVertexUniforms;
  			var nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );

  			var maxBones = Math.min( nVertexMatrices, bones.length );

  			if ( maxBones < bones.length ) {

  				console.warn( 'THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.' );
  				return 0;

  			}

  			return maxBones;

  		}

  	}

  	function getTextureEncodingFromMap( map ) {

  		var encoding;

  		if ( ! map ) {

  			encoding = LinearEncoding;

  		} else if ( map.isTexture ) {

  			encoding = map.encoding;

  		} else if ( map.isWebGLRenderTarget ) {

  			console.warn( "THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead." );
  			encoding = map.texture.encoding;

  		}

  		return encoding;

  	}

  	function getParameters( material, lights, shadows, scene, nClipPlanes, nClipIntersection, object ) {

  		var fog = scene.fog;
  		var environment = material.isMeshStandardMaterial ? scene.environment : null;

  		var envMap = material.envMap || environment;

  		var shaderID = shaderIDs[ material.type ];

  		// heuristics to create shader parameters according to lights in the scene
  		// (not to blow over maxLights budget)

  		var maxBones = object.isSkinnedMesh ? allocateBones( object ) : 0;

  		if ( material.precision !== null ) {

  			precision = capabilities.getMaxPrecision( material.precision );

  			if ( precision !== material.precision ) {

  				console.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );

  			}

  		}

  		var shaderobject = getShaderObject( material, shaderID );
  		material.onBeforeCompile( shaderobject, renderer );

  		var currentRenderTarget = renderer.getRenderTarget();

  		var parameters = {

  			isWebGL2: isWebGL2,

  			shaderID: shaderID,
  			shaderName: shaderobject.name,

  			uniforms: shaderobject.uniforms,
  			vertexShader: shaderobject.vertexShader,
  			fragmentShader: shaderobject.fragmentShader,
  			defines: material.defines,

  			isRawShaderMaterial: material.isRawShaderMaterial,
  			isShaderMaterial: material.isShaderMaterial,

  			precision: precision,

  			instancing: object.isInstancedMesh === true,

  			supportsVertexTextures: vertexTextures,
  			outputEncoding: ( currentRenderTarget !== null ) ? getTextureEncodingFromMap( currentRenderTarget.texture ) : renderer.outputEncoding,
  			map: !! material.map,
  			mapEncoding: getTextureEncodingFromMap( material.map ),
  			matcap: !! material.matcap,
  			matcapEncoding: getTextureEncodingFromMap( material.matcap ),
  			envMap: !! envMap,
  			envMapMode: envMap && envMap.mapping,
  			envMapEncoding: getTextureEncodingFromMap( envMap ),
  			envMapCubeUV: ( !! envMap ) && ( ( envMap.mapping === CubeUVReflectionMapping ) || ( envMap.mapping === CubeUVRefractionMapping ) ),
  			lightMap: !! material.lightMap,
  			lightMapEncoding: getTextureEncodingFromMap( material.lightMap ),
  			aoMap: !! material.aoMap,
  			emissiveMap: !! material.emissiveMap,
  			emissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap ),
  			bumpMap: !! material.bumpMap,
  			normalMap: !! material.normalMap,
  			objectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,
  			tangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,
  			clearcoatMap: !! material.clearcoatMap,
  			clearcoatRoughnessMap: !! material.clearcoatRoughnessMap,
  			clearcoatNormalMap: !! material.clearcoatNormalMap,
  			displacementMap: !! material.displacementMap,
  			roughnessMap: !! material.roughnessMap,
  			metalnessMap: !! material.metalnessMap,
  			specularMap: !! material.specularMap,
  			alphaMap: !! material.alphaMap,

  			gradientMap: !! material.gradientMap,

  			sheen: !! material.sheen,

  			combine: material.combine,

  			vertexTangents: ( material.normalMap && material.vertexTangents ),
  			vertexColors: material.vertexColors,
  			vertexUvs: !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatMap || !! material.clearcoatRoughnessMap || !! material.clearcoatNormalMap || !! material.displacementMap,
  			uvsVertexOnly: ! ( !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatNormalMap ) && !! material.displacementMap,

  			fog: !! fog,
  			useFog: material.fog,
  			fogExp2: ( fog && fog.isFogExp2 ),

  			flatShading: material.flatShading,

  			sizeAttenuation: material.sizeAttenuation,
  			logarithmicDepthBuffer: logarithmicDepthBuffer,

  			skinning: material.skinning && maxBones > 0,
  			maxBones: maxBones,
  			useVertexTexture: floatVertexTextures,

  			morphTargets: material.morphTargets,
  			morphNormals: material.morphNormals,
  			maxMorphTargets: renderer.maxMorphTargets,
  			maxMorphNormals: renderer.maxMorphNormals,

  			numDirLights: lights.directional.length,
  			numPointLights: lights.point.length,
  			numSpotLights: lights.spot.length,
  			numRectAreaLights: lights.rectArea.length,
  			numHemiLights: lights.hemi.length,

  			numDirLightShadows: lights.directionalShadowMap.length,
  			numPointLightShadows: lights.pointShadowMap.length,
  			numSpotLightShadows: lights.spotShadowMap.length,

  			numClippingPlanes: nClipPlanes,
  			numClipIntersection: nClipIntersection,

  			dithering: material.dithering,

  			shadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,
  			shadowMapType: renderer.shadowMap.type,

  			toneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,
  			physicallyCorrectLights: renderer.physicallyCorrectLights,

  			premultipliedAlpha: material.premultipliedAlpha,

  			alphaTest: material.alphaTest,
  			doubleSided: material.side === DoubleSide,
  			flipSided: material.side === BackSide,

  			depthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false,

  			index0AttributeName: material.index0AttributeName,

  			extensionDerivatives: material.extensions && material.extensions.derivatives,
  			extensionFragDepth: material.extensions && material.extensions.fragDepth,
  			extensionDrawBuffers: material.extensions && material.extensions.drawBuffers,
  			extensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,

  			rendererExtensionFragDepth: isWebGL2 || extensions.get( 'EXT_frag_depth' ) !== null,
  			rendererExtensionDrawBuffers: isWebGL2 || extensions.get( 'WEBGL_draw_buffers' ) !== null,
  			rendererExtensionShaderTextureLod: isWebGL2 || extensions.get( 'EXT_shader_texture_lod' ) !== null,

  			customProgramCacheKey: material.customProgramCacheKey()

  		};

  		return parameters;

  	}

  	function getProgramCacheKey( parameters ) {

  		var array = [];

  		if ( parameters.shaderID ) {

  			array.push( parameters.shaderID );

  		} else {

  			array.push( parameters.fragmentShader );
  			array.push( parameters.vertexShader );

  		}

  		if ( parameters.defines !== undefined ) {

  			for ( var name in parameters.defines ) {

  				array.push( name );
  				array.push( parameters.defines[ name ] );

  			}

  		}

  		if ( parameters.isRawShaderMaterial === undefined ) {

  			for ( var i = 0; i < parameterNames.length; i ++ ) {

  				array.push( parameters[ parameterNames[ i ] ] );

  			}

  			array.push( renderer.outputEncoding );
  			array.push( renderer.gammaFactor );

  		}

  		array.push( parameters.customProgramCacheKey );

  		return array.join();

  	}

  	function acquireProgram( parameters, cacheKey ) {

  		var program;

  		// Check if code has been already compiled
  		for ( var p = 0, pl = programs.length; p < pl; p ++ ) {

  			var preexistingProgram = programs[ p ];

  			if ( preexistingProgram.cacheKey === cacheKey ) {

  				program = preexistingProgram;
  				++ program.usedTimes;

  				break;

  			}

  		}

  		if ( program === undefined ) {

  			program = new WebGLProgram( renderer, cacheKey, parameters, bindingStates );
  			programs.push( program );

  		}

  		return program;

  	}

  	function releaseProgram( program ) {

  		if ( -- program.usedTimes === 0 ) {

  			// Remove from unordered set
  			var i = programs.indexOf( program );
  			programs[ i ] = programs[ programs.length - 1 ];
  			programs.pop();

  			// Free WebGL resources
  			program.destroy();

  		}

  	}

  	return {
  		getParameters: getParameters,
  		getProgramCacheKey: getProgramCacheKey,
  		acquireProgram: acquireProgram,
  		releaseProgram: releaseProgram,
  		// Exposed for resource monitoring & error feedback via renderer.info:
  		programs: programs
  	};

  }

  /**
   * @author fordacious / fordacious.github.io
   */

  function WebGLProperties() {

  	var properties = new WeakMap();

  	function get( object ) {

  		var map = properties.get( object );

  		if ( map === undefined ) {

  			map = {};
  			properties.set( object, map );

  		}

  		return map;

  	}

  	function remove( object ) {

  		properties.delete( object );

  	}

  	function update( object, key, value ) {

  		properties.get( object )[ key ] = value;

  	}

  	function dispose() {

  		properties = new WeakMap();

  	}

  	return {
  		get: get,
  		remove: remove,
  		update: update,
  		dispose: dispose
  	};

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function painterSortStable( a, b ) {

  	if ( a.groupOrder !== b.groupOrder ) {

  		return a.groupOrder - b.groupOrder;

  	} else if ( a.renderOrder !== b.renderOrder ) {

  		return a.renderOrder - b.renderOrder;

  	} else if ( a.program !== b.program ) {

  		return a.program.id - b.program.id;

  	} else if ( a.material.id !== b.material.id ) {

  		return a.material.id - b.material.id;

  	} else if ( a.z !== b.z ) {

  		return a.z - b.z;

  	} else {

  		return a.id - b.id;

  	}

  }

  function reversePainterSortStable( a, b ) {

  	if ( a.groupOrder !== b.groupOrder ) {

  		return a.groupOrder - b.groupOrder;

  	} else if ( a.renderOrder !== b.renderOrder ) {

  		return a.renderOrder - b.renderOrder;

  	} else if ( a.z !== b.z ) {

  		return b.z - a.z;

  	} else {

  		return a.id - b.id;

  	}

  }


  function WebGLRenderList() {

  	var renderItems = [];
  	var renderItemsIndex = 0;

  	var opaque = [];
  	var transparent = [];

  	var defaultProgram = { id: - 1 };

  	function init() {

  		renderItemsIndex = 0;

  		opaque.length = 0;
  		transparent.length = 0;

  	}

  	function getNextRenderItem( object, geometry, material, groupOrder, z, group ) {

  		var renderItem = renderItems[ renderItemsIndex ];

  		if ( renderItem === undefined ) {

  			renderItem = {
  				id: object.id,
  				object: object,
  				geometry: geometry,
  				material: material,
  				program: material.program || defaultProgram,
  				groupOrder: groupOrder,
  				renderOrder: object.renderOrder,
  				z: z,
  				group: group
  			};

  			renderItems[ renderItemsIndex ] = renderItem;

  		} else {

  			renderItem.id = object.id;
  			renderItem.object = object;
  			renderItem.geometry = geometry;
  			renderItem.material = material;
  			renderItem.program = material.program || defaultProgram;
  			renderItem.groupOrder = groupOrder;
  			renderItem.renderOrder = object.renderOrder;
  			renderItem.z = z;
  			renderItem.group = group;

  		}

  		renderItemsIndex ++;

  		return renderItem;

  	}

  	function push( object, geometry, material, groupOrder, z, group ) {

  		var renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );

  		( material.transparent === true ? transparent : opaque ).push( renderItem );

  	}

  	function unshift( object, geometry, material, groupOrder, z, group ) {

  		var renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );

  		( material.transparent === true ? transparent : opaque ).unshift( renderItem );

  	}

  	function sort( customOpaqueSort, customTransparentSort ) {

  		if ( opaque.length > 1 ) { opaque.sort( customOpaqueSort || painterSortStable ); }
  		if ( transparent.length > 1 ) { transparent.sort( customTransparentSort || reversePainterSortStable ); }

  	}

  	function finish() {

  		// Clear references from inactive renderItems in the list

  		for ( var i = renderItemsIndex, il = renderItems.length; i < il; i ++ ) {

  			var renderItem = renderItems[ i ];

  			if ( renderItem.id === null ) { break; }

  			renderItem.id = null;
  			renderItem.object = null;
  			renderItem.geometry = null;
  			renderItem.material = null;
  			renderItem.program = null;
  			renderItem.group = null;

  		}

  	}

  	return {
  		opaque: opaque,
  		transparent: transparent,

  		init: init,
  		push: push,
  		unshift: unshift,
  		finish: finish,

  		sort: sort
  	};

  }

  function WebGLRenderLists() {

  	var lists = new WeakMap();

  	function onSceneDispose( event ) {

  		var scene = event.target;

  		scene.removeEventListener( 'dispose', onSceneDispose );

  		lists.delete( scene );

  	}

  	function get( scene, camera ) {

  		var cameras = lists.get( scene );
  		var list;

  		if ( cameras === undefined ) {

  			list = new WebGLRenderList();
  			lists.set( scene, new WeakMap() );
  			lists.get( scene ).set( camera, list );

  			scene.addEventListener( 'dispose', onSceneDispose );

  		} else {

  			list = cameras.get( camera );
  			if ( list === undefined ) {

  				list = new WebGLRenderList();
  				cameras.set( camera, list );

  			}

  		}

  		return list;

  	}

  	function dispose() {

  		lists = new WeakMap();

  	}

  	return {
  		get: get,
  		dispose: dispose
  	};

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function UniformsCache() {

  	var lights = {};

  	return {

  		get: function ( light ) {

  			if ( lights[ light.id ] !== undefined ) {

  				return lights[ light.id ];

  			}

  			var uniforms;

  			switch ( light.type ) {

  				case 'DirectionalLight':
  					uniforms = {
  						direction: new Vector3(),
  						color: new Color()
  					};
  					break;

  				case 'SpotLight':
  					uniforms = {
  						position: new Vector3(),
  						direction: new Vector3(),
  						color: new Color(),
  						distance: 0,
  						coneCos: 0,
  						penumbraCos: 0,
  						decay: 0
  					};
  					break;

  				case 'PointLight':
  					uniforms = {
  						position: new Vector3(),
  						color: new Color(),
  						distance: 0,
  						decay: 0
  					};
  					break;

  				case 'HemisphereLight':
  					uniforms = {
  						direction: new Vector3(),
  						skyColor: new Color(),
  						groundColor: new Color()
  					};
  					break;

  				case 'RectAreaLight':
  					uniforms = {
  						color: new Color(),
  						position: new Vector3(),
  						halfWidth: new Vector3(),
  						halfHeight: new Vector3()
  					};
  					break;

  			}

  			lights[ light.id ] = uniforms;

  			return uniforms;

  		}

  	};

  }

  function ShadowUniformsCache() {

  	var lights = {};

  	return {

  		get: function ( light ) {

  			if ( lights[ light.id ] !== undefined ) {

  				return lights[ light.id ];

  			}

  			var uniforms;

  			switch ( light.type ) {

  				case 'DirectionalLight':
  					uniforms = {
  						shadowBias: 0,
  						shadowNormalBias: 0,
  						shadowRadius: 1,
  						shadowMapSize: new Vector2()
  					};
  					break;

  				case 'SpotLight':
  					uniforms = {
  						shadowBias: 0,
  						shadowNormalBias: 0,
  						shadowRadius: 1,
  						shadowMapSize: new Vector2()
  					};
  					break;

  				case 'PointLight':
  					uniforms = {
  						shadowBias: 0,
  						shadowNormalBias: 0,
  						shadowRadius: 1,
  						shadowMapSize: new Vector2(),
  						shadowCameraNear: 1,
  						shadowCameraFar: 1000
  					};
  					break;

  				// TODO (abelnation): set RectAreaLight shadow uniforms

  			}

  			lights[ light.id ] = uniforms;

  			return uniforms;

  		}

  	};

  }



  var nextVersion = 0;

  function shadowCastingLightsFirst( lightA, lightB ) {

  	return ( lightB.castShadow ? 1 : 0 ) - ( lightA.castShadow ? 1 : 0 );

  }

  function WebGLLights() {

  	var cache = new UniformsCache();

  	var shadowCache = ShadowUniformsCache();

  	var state = {

  		version: 0,

  		hash: {
  			directionalLength: - 1,
  			pointLength: - 1,
  			spotLength: - 1,
  			rectAreaLength: - 1,
  			hemiLength: - 1,

  			numDirectionalShadows: - 1,
  			numPointShadows: - 1,
  			numSpotShadows: - 1
  		},

  		ambient: [ 0, 0, 0 ],
  		probe: [],
  		directional: [],
  		directionalShadow: [],
  		directionalShadowMap: [],
  		directionalShadowMatrix: [],
  		spot: [],
  		spotShadow: [],
  		spotShadowMap: [],
  		spotShadowMatrix: [],
  		rectArea: [],
  		point: [],
  		pointShadow: [],
  		pointShadowMap: [],
  		pointShadowMatrix: [],
  		hemi: []

  	};

  	for ( var i = 0; i < 9; i ++ ) { state.probe.push( new Vector3() ); }

  	var vector3 = new Vector3();
  	var matrix4 = new Matrix4();
  	var matrix42 = new Matrix4();

  	function setup( lights, shadows, camera ) {

  		var r = 0, g = 0, b = 0;

  		for ( var i = 0; i < 9; i ++ ) { state.probe[ i ].set( 0, 0, 0 ); }

  		var directionalLength = 0;
  		var pointLength = 0;
  		var spotLength = 0;
  		var rectAreaLength = 0;
  		var hemiLength = 0;

  		var numDirectionalShadows = 0;
  		var numPointShadows = 0;
  		var numSpotShadows = 0;

  		var viewMatrix = camera.matrixWorldInverse;

  		lights.sort( shadowCastingLightsFirst );

  		for ( var i$1 = 0, l = lights.length; i$1 < l; i$1 ++ ) {

  			var light = lights[ i$1 ];

  			var color = light.color;
  			var intensity = light.intensity;
  			var distance = light.distance;

  			var shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;

  			if ( light.isAmbientLight ) {

  				r += color.r * intensity;
  				g += color.g * intensity;
  				b += color.b * intensity;

  			} else if ( light.isLightProbe ) {

  				for ( var j = 0; j < 9; j ++ ) {

  					state.probe[ j ].addScaledVector( light.sh.coefficients[ j ], intensity );

  				}

  			} else if ( light.isDirectionalLight ) {

  				var uniforms = cache.get( light );

  				uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
  				uniforms.direction.setFromMatrixPosition( light.matrixWorld );
  				vector3.setFromMatrixPosition( light.target.matrixWorld );
  				uniforms.direction.sub( vector3 );
  				uniforms.direction.transformDirection( viewMatrix );

  				if ( light.castShadow ) {

  					var shadow = light.shadow;

  					var shadowUniforms = shadowCache.get( light );

  					shadowUniforms.shadowBias = shadow.bias;
  					shadowUniforms.shadowNormalBias = shadow.normalBias;
  					shadowUniforms.shadowRadius = shadow.radius;
  					shadowUniforms.shadowMapSize = shadow.mapSize;

  					state.directionalShadow[ directionalLength ] = shadowUniforms;
  					state.directionalShadowMap[ directionalLength ] = shadowMap;
  					state.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;

  					numDirectionalShadows ++;

  				}

  				state.directional[ directionalLength ] = uniforms;

  				directionalLength ++;

  			} else if ( light.isSpotLight ) {

  				var uniforms$1 = cache.get( light );

  				uniforms$1.position.setFromMatrixPosition( light.matrixWorld );
  				uniforms$1.position.applyMatrix4( viewMatrix );

  				uniforms$1.color.copy( color ).multiplyScalar( intensity );
  				uniforms$1.distance = distance;

  				uniforms$1.direction.setFromMatrixPosition( light.matrixWorld );
  				vector3.setFromMatrixPosition( light.target.matrixWorld );
  				uniforms$1.direction.sub( vector3 );
  				uniforms$1.direction.transformDirection( viewMatrix );

  				uniforms$1.coneCos = Math.cos( light.angle );
  				uniforms$1.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );
  				uniforms$1.decay = light.decay;

  				if ( light.castShadow ) {

  					var shadow$1 = light.shadow;

  					var shadowUniforms$1 = shadowCache.get( light );

  					shadowUniforms$1.shadowBias = shadow$1.bias;
  					shadowUniforms$1.shadowNormalBias = shadow$1.normalBias;
  					shadowUniforms$1.shadowRadius = shadow$1.radius;
  					shadowUniforms$1.shadowMapSize = shadow$1.mapSize;

  					state.spotShadow[ spotLength ] = shadowUniforms$1;
  					state.spotShadowMap[ spotLength ] = shadowMap;
  					state.spotShadowMatrix[ spotLength ] = light.shadow.matrix;

  					numSpotShadows ++;

  				}

  				state.spot[ spotLength ] = uniforms$1;

  				spotLength ++;

  			} else if ( light.isRectAreaLight ) {

  				var uniforms$2 = cache.get( light );

  				// (a) intensity is the total visible light emitted
  				//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );

  				// (b) intensity is the brightness of the light
  				uniforms$2.color.copy( color ).multiplyScalar( intensity );

  				uniforms$2.position.setFromMatrixPosition( light.matrixWorld );
  				uniforms$2.position.applyMatrix4( viewMatrix );

  				// extract local rotation of light to derive width/height half vectors
  				matrix42.identity();
  				matrix4.copy( light.matrixWorld );
  				matrix4.premultiply( viewMatrix );
  				matrix42.extractRotation( matrix4 );

  				uniforms$2.halfWidth.set( light.width * 0.5, 0.0, 0.0 );
  				uniforms$2.halfHeight.set( 0.0, light.height * 0.5, 0.0 );

  				uniforms$2.halfWidth.applyMatrix4( matrix42 );
  				uniforms$2.halfHeight.applyMatrix4( matrix42 );

  				// TODO (abelnation): RectAreaLight distance?
  				// uniforms.distance = distance;

  				state.rectArea[ rectAreaLength ] = uniforms$2;

  				rectAreaLength ++;

  			} else if ( light.isPointLight ) {

  				var uniforms$3 = cache.get( light );

  				uniforms$3.position.setFromMatrixPosition( light.matrixWorld );
  				uniforms$3.position.applyMatrix4( viewMatrix );

  				uniforms$3.color.copy( light.color ).multiplyScalar( light.intensity );
  				uniforms$3.distance = light.distance;
  				uniforms$3.decay = light.decay;

  				if ( light.castShadow ) {

  					var shadow$2 = light.shadow;

  					var shadowUniforms$2 = shadowCache.get( light );

  					shadowUniforms$2.shadowBias = shadow$2.bias;
  					shadowUniforms$2.shadowNormalBias = shadow$2.normalBias;
  					shadowUniforms$2.shadowRadius = shadow$2.radius;
  					shadowUniforms$2.shadowMapSize = shadow$2.mapSize;
  					shadowUniforms$2.shadowCameraNear = shadow$2.camera.near;
  					shadowUniforms$2.shadowCameraFar = shadow$2.camera.far;

  					state.pointShadow[ pointLength ] = shadowUniforms$2;
  					state.pointShadowMap[ pointLength ] = shadowMap;
  					state.pointShadowMatrix[ pointLength ] = light.shadow.matrix;

  					numPointShadows ++;

  				}

  				state.point[ pointLength ] = uniforms$3;

  				pointLength ++;

  			} else if ( light.isHemisphereLight ) {

  				var uniforms$4 = cache.get( light );

  				uniforms$4.direction.setFromMatrixPosition( light.matrixWorld );
  				uniforms$4.direction.transformDirection( viewMatrix );
  				uniforms$4.direction.normalize();

  				uniforms$4.skyColor.copy( light.color ).multiplyScalar( intensity );
  				uniforms$4.groundColor.copy( light.groundColor ).multiplyScalar( intensity );

  				state.hemi[ hemiLength ] = uniforms$4;

  				hemiLength ++;

  			}

  		}

  		state.ambient[ 0 ] = r;
  		state.ambient[ 1 ] = g;
  		state.ambient[ 2 ] = b;

  		var hash = state.hash;

  		if ( hash.directionalLength !== directionalLength ||
  			hash.pointLength !== pointLength ||
  			hash.spotLength !== spotLength ||
  			hash.rectAreaLength !== rectAreaLength ||
  			hash.hemiLength !== hemiLength ||
  			hash.numDirectionalShadows !== numDirectionalShadows ||
  			hash.numPointShadows !== numPointShadows ||
  			hash.numSpotShadows !== numSpotShadows ) {

  			state.directional.length = directionalLength;
  			state.spot.length = spotLength;
  			state.rectArea.length = rectAreaLength;
  			state.point.length = pointLength;
  			state.hemi.length = hemiLength;

  			state.directionalShadow.length = numDirectionalShadows;
  			state.directionalShadowMap.length = numDirectionalShadows;
  			state.pointShadow.length = numPointShadows;
  			state.pointShadowMap.length = numPointShadows;
  			state.spotShadow.length = numSpotShadows;
  			state.spotShadowMap.length = numSpotShadows;
  			state.directionalShadowMatrix.length = numDirectionalShadows;
  			state.pointShadowMatrix.length = numPointShadows;
  			state.spotShadowMatrix.length = numSpotShadows;

  			hash.directionalLength = directionalLength;
  			hash.pointLength = pointLength;
  			hash.spotLength = spotLength;
  			hash.rectAreaLength = rectAreaLength;
  			hash.hemiLength = hemiLength;

  			hash.numDirectionalShadows = numDirectionalShadows;
  			hash.numPointShadows = numPointShadows;
  			hash.numSpotShadows = numSpotShadows;

  			state.version = nextVersion ++;

  		}

  	}

  	return {
  		setup: setup,
  		state: state
  	};

  }

  /**
   * @author Mugen87 / https://github.com/Mugen87
   */

  function WebGLRenderState() {

  	var lights = new WebGLLights();

  	var lightsArray = [];
  	var shadowsArray = [];

  	function init() {

  		lightsArray.length = 0;
  		shadowsArray.length = 0;

  	}

  	function pushLight( light ) {

  		lightsArray.push( light );

  	}

  	function pushShadow( shadowLight ) {

  		shadowsArray.push( shadowLight );

  	}

  	function setupLights( camera ) {

  		lights.setup( lightsArray, shadowsArray, camera );

  	}

  	var state = {
  		lightsArray: lightsArray,
  		shadowsArray: shadowsArray,

  		lights: lights
  	};

  	return {
  		init: init,
  		state: state,
  		setupLights: setupLights,

  		pushLight: pushLight,
  		pushShadow: pushShadow
  	};

  }

  function WebGLRenderStates() {

  	var renderStates = new WeakMap();

  	function onSceneDispose( event ) {

  		var scene = event.target;

  		scene.removeEventListener( 'dispose', onSceneDispose );

  		renderStates.delete( scene );

  	}

  	function get( scene, camera ) {

  		var renderState;

  		if ( renderStates.has( scene ) === false ) {

  			renderState = new WebGLRenderState();
  			renderStates.set( scene, new WeakMap() );
  			renderStates.get( scene ).set( camera, renderState );

  			scene.addEventListener( 'dispose', onSceneDispose );

  		} else {

  			if ( renderStates.get( scene ).has( camera ) === false ) {

  				renderState = new WebGLRenderState();
  				renderStates.get( scene ).set( camera, renderState );

  			} else {

  				renderState = renderStates.get( scene ).get( camera );

  			}

  		}

  		return renderState;

  	}

  	function dispose() {

  		renderStates = new WeakMap();

  	}

  	return {
  		get: get,
  		dispose: dispose
  	};

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author alteredq / http://alteredqualia.com/
   * @author bhouston / https://clara.io
   * @author WestLangley / http://github.com/WestLangley
   *
   * parameters = {
   *
   *  opacity: <float>,
   *
   *  map: new THREE.Texture( <Image> ),
   *
   *  alphaMap: new THREE.Texture( <Image> ),
   *
   *  displacementMap: new THREE.Texture( <Image> ),
   *  displacementScale: <float>,
   *  displacementBias: <float>,
   *
   *  wireframe: <boolean>,
   *  wireframeLinewidth: <float>
   * }
   */

  function MeshDepthMaterial( parameters ) {

  	Material.call( this );

  	this.type = 'MeshDepthMaterial';

  	this.depthPacking = BasicDepthPacking;

  	this.skinning = false;
  	this.morphTargets = false;

  	this.map = null;

  	this.alphaMap = null;

  	this.displacementMap = null;
  	this.displacementScale = 1;
  	this.displacementBias = 0;

  	this.wireframe = false;
  	this.wireframeLinewidth = 1;

  	this.fog = false;

  	this.setValues( parameters );

  }

  MeshDepthMaterial.prototype = Object.create( Material.prototype );
  MeshDepthMaterial.prototype.constructor = MeshDepthMaterial;

  MeshDepthMaterial.prototype.isMeshDepthMaterial = true;

  MeshDepthMaterial.prototype.copy = function ( source ) {

  	Material.prototype.copy.call( this, source );

  	this.depthPacking = source.depthPacking;

  	this.skinning = source.skinning;
  	this.morphTargets = source.morphTargets;

  	this.map = source.map;

  	this.alphaMap = source.alphaMap;

  	this.displacementMap = source.displacementMap;
  	this.displacementScale = source.displacementScale;
  	this.displacementBias = source.displacementBias;

  	this.wireframe = source.wireframe;
  	this.wireframeLinewidth = source.wireframeLinewidth;

  	return this;

  };

  /**
   * @author WestLangley / http://github.com/WestLangley
   *
   * parameters = {
   *
   *  referencePosition: <float>,
   *  nearDistance: <float>,
   *  farDistance: <float>,
   *
   *  skinning: <bool>,
   *  morphTargets: <bool>,
   *
   *  map: new THREE.Texture( <Image> ),
   *
   *  alphaMap: new THREE.Texture( <Image> ),
   *
   *  displacementMap: new THREE.Texture( <Image> ),
   *  displacementScale: <float>,
   *  displacementBias: <float>
   *
   * }
   */

  function MeshDistanceMaterial( parameters ) {

  	Material.call( this );

  	this.type = 'MeshDistanceMaterial';

  	this.referencePosition = new Vector3();
  	this.nearDistance = 1;
  	this.farDistance = 1000;

  	this.skinning = false;
  	this.morphTargets = false;

  	this.map = null;

  	this.alphaMap = null;

  	this.displacementMap = null;
  	this.displacementScale = 1;
  	this.displacementBias = 0;

  	this.fog = false;

  	this.setValues( parameters );

  }

  MeshDistanceMaterial.prototype = Object.create( Material.prototype );
  MeshDistanceMaterial.prototype.constructor = MeshDistanceMaterial;

  MeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;

  MeshDistanceMaterial.prototype.copy = function ( source ) {

  	Material.prototype.copy.call( this, source );

  	this.referencePosition.copy( source.referencePosition );
  	this.nearDistance = source.nearDistance;
  	this.farDistance = source.farDistance;

  	this.skinning = source.skinning;
  	this.morphTargets = source.morphTargets;

  	this.map = source.map;

  	this.alphaMap = source.alphaMap;

  	this.displacementMap = source.displacementMap;
  	this.displacementScale = source.displacementScale;
  	this.displacementBias = source.displacementBias;

  	return this;

  };

  var vsm_frag = "uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n  float mean = 0.0;\n  float squared_mean = 0.0;\n\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy  ) / resolution ) );\n  for ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\n    #ifdef HORIZONAL_PASS\n      vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\n      mean += distribution.x;\n      squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n    #else\n      float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0,  i )  * radius ) / resolution ) );\n      mean += depth;\n      squared_mean += depth * depth;\n    #endif\n  }\n  mean = mean * HALF_SAMPLE_RATE;\n  squared_mean = squared_mean * HALF_SAMPLE_RATE;\n  float std_dev = sqrt( squared_mean - mean * mean );\n  gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";

  var vsm_vert = "void main() {\n\tgl_Position = vec4( position, 1.0 );\n}";

  /**
   * @author alteredq / http://alteredqualia.com/
   * @author mrdoob / http://mrdoob.com/
   */

  function WebGLShadowMap( _renderer, _objects, maxTextureSize ) {

  	var _frustum = new Frustum();

  	var _shadowMapSize = new Vector2(),
  		_viewportSize = new Vector2(),

  		_viewport = new Vector4(),

  		_depthMaterials = [],
  		_distanceMaterials = [],

  		_materialCache = {};

  	var shadowSide = { 0: BackSide, 1: FrontSide, 2: DoubleSide };

  	var shadowMaterialVertical = new ShaderMaterial( {

  		defines: {
  			SAMPLE_RATE: 2.0 / 8.0,
  			HALF_SAMPLE_RATE: 1.0 / 8.0
  		},

  		uniforms: {
  			shadow_pass: { value: null },
  			resolution: { value: new Vector2() },
  			radius: { value: 4.0 }
  		},

  		vertexShader: vsm_vert,

  		fragmentShader: vsm_frag

  	} );

  	var shadowMaterialHorizonal = shadowMaterialVertical.clone();
  	shadowMaterialHorizonal.defines.HORIZONAL_PASS = 1;

  	var fullScreenTri = new BufferGeometry();
  	fullScreenTri.setAttribute(
  		"position",
  		new BufferAttribute(
  			new Float32Array( [ - 1, - 1, 0.5, 3, - 1, 0.5, - 1, 3, 0.5 ] ),
  			3
  		)
  	);

  	var fullScreenMesh = new Mesh( fullScreenTri, shadowMaterialVertical );

  	var scope = this;

  	this.enabled = false;

  	this.autoUpdate = true;
  	this.needsUpdate = false;

  	this.type = PCFShadowMap;

  	this.render = function ( lights, scene, camera ) {

  		if ( scope.enabled === false ) { return; }
  		if ( scope.autoUpdate === false && scope.needsUpdate === false ) { return; }

  		if ( lights.length === 0 ) { return; }

  		var currentRenderTarget = _renderer.getRenderTarget();
  		var activeCubeFace = _renderer.getActiveCubeFace();
  		var activeMipmapLevel = _renderer.getActiveMipmapLevel();

  		var _state = _renderer.state;

  		// Set GL state for depth map.
  		_state.setBlending( NoBlending );
  		_state.buffers.color.setClear( 1, 1, 1, 1 );
  		_state.buffers.depth.setTest( true );
  		_state.setScissorTest( false );

  		// render depth map

  		for ( var i = 0, il = lights.length; i < il; i ++ ) {

  			var light = lights[ i ];
  			var shadow = light.shadow;

  			if ( shadow.autoUpdate === false && shadow.needsUpdate === false ) { continue; }

  			if ( shadow === undefined ) {

  				console.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );
  				continue;

  			}

  			_shadowMapSize.copy( shadow.mapSize );

  			var shadowFrameExtents = shadow.getFrameExtents();

  			_shadowMapSize.multiply( shadowFrameExtents );

  			_viewportSize.copy( shadow.mapSize );

  			if ( _shadowMapSize.x > maxTextureSize || _shadowMapSize.y > maxTextureSize ) {

  				if ( _shadowMapSize.x > maxTextureSize ) {

  					_viewportSize.x = Math.floor( maxTextureSize / shadowFrameExtents.x );
  					_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;
  					shadow.mapSize.x = _viewportSize.x;

  				}

  				if ( _shadowMapSize.y > maxTextureSize ) {

  					_viewportSize.y = Math.floor( maxTextureSize / shadowFrameExtents.y );
  					_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;
  					shadow.mapSize.y = _viewportSize.y;

  				}

  			}

  			if ( shadow.map === null && ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {

  				var pars = { minFilter: LinearFilter, magFilter: LinearFilter, format: RGBAFormat };

  				shadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );
  				shadow.map.texture.name = light.name + ".shadowMap";

  				shadow.mapPass = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );

  				shadow.camera.updateProjectionMatrix();

  			}

  			if ( shadow.map === null ) {

  				var pars$1 = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };

  				shadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars$1 );
  				shadow.map.texture.name = light.name + ".shadowMap";

  				shadow.camera.updateProjectionMatrix();

  			}

  			_renderer.setRenderTarget( shadow.map );
  			_renderer.clear();

  			var viewportCount = shadow.getViewportCount();

  			for ( var vp = 0; vp < viewportCount; vp ++ ) {

  				var viewport = shadow.getViewport( vp );

  				_viewport.set(
  					_viewportSize.x * viewport.x,
  					_viewportSize.y * viewport.y,
  					_viewportSize.x * viewport.z,
  					_viewportSize.y * viewport.w
  				);

  				_state.viewport( _viewport );

  				shadow.updateMatrices( light, vp );

  				_frustum = shadow.getFrustum();

  				renderObject( scene, camera, shadow.camera, light, this.type );

  			}

  			// do blur pass for VSM

  			if ( ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {

  				VSMPass( shadow, camera );

  			}

  			shadow.needsUpdate = false;

  		}

  		scope.needsUpdate = false;

  		_renderer.setRenderTarget( currentRenderTarget, activeCubeFace, activeMipmapLevel );

  	};

  	function VSMPass( shadow, camera ) {

  		var geometry = _objects.update( fullScreenMesh );

  		// vertical pass

  		shadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;
  		shadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;
  		shadowMaterialVertical.uniforms.radius.value = shadow.radius;
  		_renderer.setRenderTarget( shadow.mapPass );
  		_renderer.clear();
  		_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null );

  		// horizonal pass

  		shadowMaterialHorizonal.uniforms.shadow_pass.value = shadow.mapPass.texture;
  		shadowMaterialHorizonal.uniforms.resolution.value = shadow.mapSize;
  		shadowMaterialHorizonal.uniforms.radius.value = shadow.radius;
  		_renderer.setRenderTarget( shadow.map );
  		_renderer.clear();
  		_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialHorizonal, fullScreenMesh, null );

  	}

  	function getDepthMaterialVariant( useMorphing, useSkinning, useInstancing ) {

  		var index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;

  		var material = _depthMaterials[ index ];

  		if ( material === undefined ) {

  			material = new MeshDepthMaterial( {

  				depthPacking: RGBADepthPacking,

  				morphTargets: useMorphing,
  				skinning: useSkinning

  			} );

  			_depthMaterials[ index ] = material;

  		}

  		return material;

  	}

  	function getDistanceMaterialVariant( useMorphing, useSkinning, useInstancing ) {

  		var index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;

  		var material = _distanceMaterials[ index ];

  		if ( material === undefined ) {

  			material = new MeshDistanceMaterial( {

  				morphTargets: useMorphing,
  				skinning: useSkinning

  			} );

  			_distanceMaterials[ index ] = material;

  		}

  		return material;

  	}

  	function getDepthMaterial( object, geometry, material, light, shadowCameraNear, shadowCameraFar, type ) {

  		var result = null;

  		var getMaterialVariant = getDepthMaterialVariant;
  		var customMaterial = object.customDepthMaterial;

  		if ( light.isPointLight === true ) {

  			getMaterialVariant = getDistanceMaterialVariant;
  			customMaterial = object.customDistanceMaterial;

  		}

  		if ( customMaterial === undefined ) {

  			var useMorphing = false;

  			if ( material.morphTargets === true ) {

  				useMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;

  			}

  			var useSkinning = false;

  			if ( object.isSkinnedMesh === true ) {

  				if ( material.skinning === true ) {

  					useSkinning = true;

  				} else {

  					console.warn( 'THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object );

  				}

  			}

  			var useInstancing = object.isInstancedMesh === true;

  			result = getMaterialVariant( useMorphing, useSkinning, useInstancing );

  		} else {

  			result = customMaterial;

  		}

  		if ( _renderer.localClippingEnabled &&
  				material.clipShadows === true &&
  				material.clippingPlanes.length !== 0 ) {

  			// in this case we need a unique material instance reflecting the
  			// appropriate state

  			var keyA = result.uuid, keyB = material.uuid;

  			var materialsForVariant = _materialCache[ keyA ];

  			if ( materialsForVariant === undefined ) {

  				materialsForVariant = {};
  				_materialCache[ keyA ] = materialsForVariant;

  			}

  			var cachedMaterial = materialsForVariant[ keyB ];

  			if ( cachedMaterial === undefined ) {

  				cachedMaterial = result.clone();
  				materialsForVariant[ keyB ] = cachedMaterial;

  			}

  			result = cachedMaterial;

  		}

  		result.visible = material.visible;
  		result.wireframe = material.wireframe;

  		if ( type === VSMShadowMap ) {

  			result.side = ( material.shadowSide !== null ) ? material.shadowSide : material.side;

  		} else {

  			result.side = ( material.shadowSide !== null ) ? material.shadowSide : shadowSide[ material.side ];

  		}

  		result.clipShadows = material.clipShadows;
  		result.clippingPlanes = material.clippingPlanes;
  		result.clipIntersection = material.clipIntersection;

  		result.wireframeLinewidth = material.wireframeLinewidth;
  		result.linewidth = material.linewidth;

  		if ( light.isPointLight === true && result.isMeshDistanceMaterial === true ) {

  			result.referencePosition.setFromMatrixPosition( light.matrixWorld );
  			result.nearDistance = shadowCameraNear;
  			result.farDistance = shadowCameraFar;

  		}

  		return result;

  	}

  	function renderObject( object, camera, shadowCamera, light, type ) {

  		if ( object.visible === false ) { return; }

  		var visible = object.layers.test( camera.layers );

  		if ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {

  			if ( ( object.castShadow || ( object.receiveShadow && type === VSMShadowMap ) ) && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {

  				object.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );

  				var geometry = _objects.update( object );
  				var material = object.material;

  				if ( Array.isArray( material ) ) {

  					var groups = geometry.groups;

  					for ( var k = 0, kl = groups.length; k < kl; k ++ ) {

  						var group = groups[ k ];
  						var groupMaterial = material[ group.materialIndex ];

  						if ( groupMaterial && groupMaterial.visible ) {

  							var depthMaterial = getDepthMaterial( object, geometry, groupMaterial, light, shadowCamera.near, shadowCamera.far, type );

  							_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );

  						}

  					}

  				} else if ( material.visible ) {

  					var depthMaterial$1 = getDepthMaterial( object, geometry, material, light, shadowCamera.near, shadowCamera.far, type );

  					_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial$1, object, null );

  				}

  			}

  		}

  		var children = object.children;

  		for ( var i = 0, l = children.length; i < l; i ++ ) {

  			renderObject( children[ i ], camera, shadowCamera, light, type );

  		}

  	}

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function WebGLState( gl, extensions, capabilities ) {

  	var isWebGL2 = capabilities.isWebGL2;

  	function ColorBuffer() {

  		var locked = false;

  		var color = new Vector4();
  		var currentColorMask = null;
  		var currentColorClear = new Vector4( 0, 0, 0, 0 );

  		return {

  			setMask: function ( colorMask ) {

  				if ( currentColorMask !== colorMask && ! locked ) {

  					gl.colorMask( colorMask, colorMask, colorMask, colorMask );
  					currentColorMask = colorMask;

  				}

  			},

  			setLocked: function ( lock ) {

  				locked = lock;

  			},

  			setClear: function ( r, g, b, a, premultipliedAlpha ) {

  				if ( premultipliedAlpha === true ) {

  					r *= a; g *= a; b *= a;

  				}

  				color.set( r, g, b, a );

  				if ( currentColorClear.equals( color ) === false ) {

  					gl.clearColor( r, g, b, a );
  					currentColorClear.copy( color );

  				}

  			},

  			reset: function () {

  				locked = false;

  				currentColorMask = null;
  				currentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state

  			}

  		};

  	}

  	function DepthBuffer() {

  		var locked = false;

  		var currentDepthMask = null;
  		var currentDepthFunc = null;
  		var currentDepthClear = null;

  		return {

  			setTest: function ( depthTest ) {

  				if ( depthTest ) {

  					enable( 2929 );

  				} else {

  					disable( 2929 );

  				}

  			},

  			setMask: function ( depthMask ) {

  				if ( currentDepthMask !== depthMask && ! locked ) {

  					gl.depthMask( depthMask );
  					currentDepthMask = depthMask;

  				}

  			},

  			setFunc: function ( depthFunc ) {

  				if ( currentDepthFunc !== depthFunc ) {

  					if ( depthFunc ) {

  						switch ( depthFunc ) {

  							case NeverDepth:

  								gl.depthFunc( 512 );
  								break;

  							case AlwaysDepth:

  								gl.depthFunc( 519 );
  								break;

  							case LessDepth:

  								gl.depthFunc( 513 );
  								break;

  							case LessEqualDepth:

  								gl.depthFunc( 515 );
  								break;

  							case EqualDepth:

  								gl.depthFunc( 514 );
  								break;

  							case GreaterEqualDepth:

  								gl.depthFunc( 518 );
  								break;

  							case GreaterDepth:

  								gl.depthFunc( 516 );
  								break;

  							case NotEqualDepth:

  								gl.depthFunc( 517 );
  								break;

  							default:

  								gl.depthFunc( 515 );

  						}

  					} else {

  						gl.depthFunc( 515 );

  					}

  					currentDepthFunc = depthFunc;

  				}

  			},

  			setLocked: function ( lock ) {

  				locked = lock;

  			},

  			setClear: function ( depth ) {

  				if ( currentDepthClear !== depth ) {

  					gl.clearDepth( depth );
  					currentDepthClear = depth;

  				}

  			},

  			reset: function () {

  				locked = false;

  				currentDepthMask = null;
  				currentDepthFunc = null;
  				currentDepthClear = null;

  			}

  		};

  	}

  	function StencilBuffer() {

  		var locked = false;

  		var currentStencilMask = null;
  		var currentStencilFunc = null;
  		var currentStencilRef = null;
  		var currentStencilFuncMask = null;
  		var currentStencilFail = null;
  		var currentStencilZFail = null;
  		var currentStencilZPass = null;
  		var currentStencilClear = null;

  		return {

  			setTest: function ( stencilTest ) {

  				if ( ! locked ) {

  					if ( stencilTest ) {

  						enable( 2960 );

  					} else {

  						disable( 2960 );

  					}

  				}

  			},

  			setMask: function ( stencilMask ) {

  				if ( currentStencilMask !== stencilMask && ! locked ) {

  					gl.stencilMask( stencilMask );
  					currentStencilMask = stencilMask;

  				}

  			},

  			setFunc: function ( stencilFunc, stencilRef, stencilMask ) {

  				if ( currentStencilFunc !== stencilFunc ||
  				     currentStencilRef 	!== stencilRef 	||
  				     currentStencilFuncMask !== stencilMask ) {

  					gl.stencilFunc( stencilFunc, stencilRef, stencilMask );

  					currentStencilFunc = stencilFunc;
  					currentStencilRef = stencilRef;
  					currentStencilFuncMask = stencilMask;

  				}

  			},

  			setOp: function ( stencilFail, stencilZFail, stencilZPass ) {

  				if ( currentStencilFail	 !== stencilFail 	||
  				     currentStencilZFail !== stencilZFail ||
  				     currentStencilZPass !== stencilZPass ) {

  					gl.stencilOp( stencilFail, stencilZFail, stencilZPass );

  					currentStencilFail = stencilFail;
  					currentStencilZFail = stencilZFail;
  					currentStencilZPass = stencilZPass;

  				}

  			},

  			setLocked: function ( lock ) {

  				locked = lock;

  			},

  			setClear: function ( stencil ) {

  				if ( currentStencilClear !== stencil ) {

  					gl.clearStencil( stencil );
  					currentStencilClear = stencil;

  				}

  			},

  			reset: function () {

  				locked = false;

  				currentStencilMask = null;
  				currentStencilFunc = null;
  				currentStencilRef = null;
  				currentStencilFuncMask = null;
  				currentStencilFail = null;
  				currentStencilZFail = null;
  				currentStencilZPass = null;
  				currentStencilClear = null;

  			}

  		};

  	}

  	//

  	var colorBuffer = new ColorBuffer();
  	var depthBuffer = new DepthBuffer();
  	var stencilBuffer = new StencilBuffer();

  	var enabledCapabilities = {};

  	var currentProgram = null;

  	var currentBlendingEnabled = null;
  	var currentBlending = null;
  	var currentBlendEquation = null;
  	var currentBlendSrc = null;
  	var currentBlendDst = null;
  	var currentBlendEquationAlpha = null;
  	var currentBlendSrcAlpha = null;
  	var currentBlendDstAlpha = null;
  	var currentPremultipledAlpha = false;

  	var currentFlipSided = null;
  	var currentCullFace = null;

  	var currentLineWidth = null;

  	var currentPolygonOffsetFactor = null;
  	var currentPolygonOffsetUnits = null;

  	var maxTextures = gl.getParameter( 35661 );

  	var lineWidthAvailable = false;
  	var version = 0;
  	var glVersion = gl.getParameter( 7938 );

  	if ( glVersion.indexOf( 'WebGL' ) !== - 1 ) {

  		version = parseFloat( /^WebGL\ ([0-9])/.exec( glVersion )[ 1 ] );
  		lineWidthAvailable = ( version >= 1.0 );

  	} else if ( glVersion.indexOf( 'OpenGL ES' ) !== - 1 ) {

  		version = parseFloat( /^OpenGL\ ES\ ([0-9])/.exec( glVersion )[ 1 ] );
  		lineWidthAvailable = ( version >= 2.0 );

  	}

  	var currentTextureSlot = null;
  	var currentBoundTextures = {};

  	var currentScissor = new Vector4();
  	var currentViewport = new Vector4();

  	function createTexture( type, target, count ) {

  		var data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.
  		var texture = gl.createTexture();

  		gl.bindTexture( type, texture );
  		gl.texParameteri( type, 10241, 9728 );
  		gl.texParameteri( type, 10240, 9728 );

  		for ( var i = 0; i < count; i ++ ) {

  			gl.texImage2D( target + i, 0, 6408, 1, 1, 0, 6408, 5121, data );

  		}

  		return texture;

  	}

  	var emptyTextures = {};
  	emptyTextures[ 3553 ] = createTexture( 3553, 3553, 1 );
  	emptyTextures[ 34067 ] = createTexture( 34067, 34069, 6 );

  	// init

  	colorBuffer.setClear( 0, 0, 0, 1 );
  	depthBuffer.setClear( 1 );
  	stencilBuffer.setClear( 0 );

  	enable( 2929 );
  	depthBuffer.setFunc( LessEqualDepth );

  	setFlipSided( false );
  	setCullFace( CullFaceBack );
  	enable( 2884 );

  	setBlending( NoBlending );

  	//

  	function enable( id ) {

  		if ( enabledCapabilities[ id ] !== true ) {

  			gl.enable( id );
  			enabledCapabilities[ id ] = true;

  		}

  	}

  	function disable( id ) {

  		if ( enabledCapabilities[ id ] !== false ) {

  			gl.disable( id );
  			enabledCapabilities[ id ] = false;

  		}

  	}

  	function useProgram( program ) {

  		if ( currentProgram !== program ) {

  			gl.useProgram( program );

  			currentProgram = program;

  			return true;

  		}

  		return false;

  	}

  	var equationToGL = {};
  	equationToGL[ AddEquation ] = 32774;
  	equationToGL[ SubtractEquation ] = 32778;
  	equationToGL[ ReverseSubtractEquation ] = 32779;

  	if ( isWebGL2 ) {

  		equationToGL[ MinEquation ] = 32775;
  		equationToGL[ MaxEquation ] = 32776;

  	} else {

  		var extension = extensions.get( 'EXT_blend_minmax' );

  		if ( extension !== null ) {

  			equationToGL[ MinEquation ] = extension.MIN_EXT;
  			equationToGL[ MaxEquation ] = extension.MAX_EXT;

  		}

  	}

  	var factorToGL = {};
  	factorToGL[ ZeroFactor ] = 0;
  	factorToGL[ OneFactor ] = 1;
  	factorToGL[ SrcColorFactor ] = 768;
  	factorToGL[ SrcAlphaFactor ] = 770;
  	factorToGL[ SrcAlphaSaturateFactor ] = 776;
  	factorToGL[ DstColorFactor ] = 774;
  	factorToGL[ DstAlphaFactor ] = 772;
  	factorToGL[ OneMinusSrcColorFactor ] = 769;
  	factorToGL[ OneMinusSrcAlphaFactor ] = 771;
  	factorToGL[ OneMinusDstColorFactor ] = 775;
  	factorToGL[ OneMinusDstAlphaFactor ] = 773;

  	function setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {

  		if ( blending === NoBlending ) {

  			if ( currentBlendingEnabled ) {

  				disable( 3042 );
  				currentBlendingEnabled = false;

  			}

  			return;

  		}

  		if ( ! currentBlendingEnabled ) {

  			enable( 3042 );
  			currentBlendingEnabled = true;

  		}

  		if ( blending !== CustomBlending ) {

  			if ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {

  				if ( currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation ) {

  					gl.blendEquation( 32774 );

  					currentBlendEquation = AddEquation;
  					currentBlendEquationAlpha = AddEquation;

  				}

  				if ( premultipliedAlpha ) {

  					switch ( blending ) {

  						case NormalBlending:
  							gl.blendFuncSeparate( 1, 771, 1, 771 );
  							break;

  						case AdditiveBlending:
  							gl.blendFunc( 1, 1 );
  							break;

  						case SubtractiveBlending:
  							gl.blendFuncSeparate( 0, 0, 769, 771 );
  							break;

  						case MultiplyBlending:
  							gl.blendFuncSeparate( 0, 768, 0, 770 );
  							break;

  						default:
  							console.error( 'THREE.WebGLState: Invalid blending: ', blending );
  							break;

  					}

  				} else {

  					switch ( blending ) {

  						case NormalBlending:
  							gl.blendFuncSeparate( 770, 771, 1, 771 );
  							break;

  						case AdditiveBlending:
  							gl.blendFunc( 770, 1 );
  							break;

  						case SubtractiveBlending:
  							gl.blendFunc( 0, 769 );
  							break;

  						case MultiplyBlending:
  							gl.blendFunc( 0, 768 );
  							break;

  						default:
  							console.error( 'THREE.WebGLState: Invalid blending: ', blending );
  							break;

  					}

  				}

  				currentBlendSrc = null;
  				currentBlendDst = null;
  				currentBlendSrcAlpha = null;
  				currentBlendDstAlpha = null;

  				currentBlending = blending;
  				currentPremultipledAlpha = premultipliedAlpha;

  			}

  			return;

  		}

  		// custom blending

  		blendEquationAlpha = blendEquationAlpha || blendEquation;
  		blendSrcAlpha = blendSrcAlpha || blendSrc;
  		blendDstAlpha = blendDstAlpha || blendDst;

  		if ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {

  			gl.blendEquationSeparate( equationToGL[ blendEquation ], equationToGL[ blendEquationAlpha ] );

  			currentBlendEquation = blendEquation;
  			currentBlendEquationAlpha = blendEquationAlpha;

  		}

  		if ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {

  			gl.blendFuncSeparate( factorToGL[ blendSrc ], factorToGL[ blendDst ], factorToGL[ blendSrcAlpha ], factorToGL[ blendDstAlpha ] );

  			currentBlendSrc = blendSrc;
  			currentBlendDst = blendDst;
  			currentBlendSrcAlpha = blendSrcAlpha;
  			currentBlendDstAlpha = blendDstAlpha;

  		}

  		currentBlending = blending;
  		currentPremultipledAlpha = null;

  	}

  	function setMaterial( material, frontFaceCW ) {

  		material.side === DoubleSide
  			? disable( 2884 )
  			: enable( 2884 );

  		var flipSided = ( material.side === BackSide );
  		if ( frontFaceCW ) { flipSided = ! flipSided; }

  		setFlipSided( flipSided );

  		( material.blending === NormalBlending && material.transparent === false )
  			? setBlending( NoBlending )
  			: setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );

  		depthBuffer.setFunc( material.depthFunc );
  		depthBuffer.setTest( material.depthTest );
  		depthBuffer.setMask( material.depthWrite );
  		colorBuffer.setMask( material.colorWrite );

  		var stencilWrite = material.stencilWrite;
  		stencilBuffer.setTest( stencilWrite );
  		if ( stencilWrite ) {

  			stencilBuffer.setMask( material.stencilWriteMask );
  			stencilBuffer.setFunc( material.stencilFunc, material.stencilRef, material.stencilFuncMask );
  			stencilBuffer.setOp( material.stencilFail, material.stencilZFail, material.stencilZPass );

  		}

  		setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );

  	}

  	//

  	function setFlipSided( flipSided ) {

  		if ( currentFlipSided !== flipSided ) {

  			if ( flipSided ) {

  				gl.frontFace( 2304 );

  			} else {

  				gl.frontFace( 2305 );

  			}

  			currentFlipSided = flipSided;

  		}

  	}

  	function setCullFace( cullFace ) {

  		if ( cullFace !== CullFaceNone ) {

  			enable( 2884 );

  			if ( cullFace !== currentCullFace ) {

  				if ( cullFace === CullFaceBack ) {

  					gl.cullFace( 1029 );

  				} else if ( cullFace === CullFaceFront ) {

  					gl.cullFace( 1028 );

  				} else {

  					gl.cullFace( 1032 );

  				}

  			}

  		} else {

  			disable( 2884 );

  		}

  		currentCullFace = cullFace;

  	}

  	function setLineWidth( width ) {

  		if ( width !== currentLineWidth ) {

  			if ( lineWidthAvailable ) { gl.lineWidth( width ); }

  			currentLineWidth = width;

  		}

  	}

  	function setPolygonOffset( polygonOffset, factor, units ) {

  		if ( polygonOffset ) {

  			enable( 32823 );

  			if ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {

  				gl.polygonOffset( factor, units );

  				currentPolygonOffsetFactor = factor;
  				currentPolygonOffsetUnits = units;

  			}

  		} else {

  			disable( 32823 );

  		}

  	}

  	function setScissorTest( scissorTest ) {

  		if ( scissorTest ) {

  			enable( 3089 );

  		} else {

  			disable( 3089 );

  		}

  	}

  	// texture

  	function activeTexture( webglSlot ) {

  		if ( webglSlot === undefined ) { webglSlot = 33984 + maxTextures - 1; }

  		if ( currentTextureSlot !== webglSlot ) {

  			gl.activeTexture( webglSlot );
  			currentTextureSlot = webglSlot;

  		}

  	}

  	function bindTexture( webglType, webglTexture ) {

  		if ( currentTextureSlot === null ) {

  			activeTexture();

  		}

  		var boundTexture = currentBoundTextures[ currentTextureSlot ];

  		if ( boundTexture === undefined ) {

  			boundTexture = { type: undefined, texture: undefined };
  			currentBoundTextures[ currentTextureSlot ] = boundTexture;

  		}

  		if ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {

  			gl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );

  			boundTexture.type = webglType;
  			boundTexture.texture = webglTexture;

  		}

  	}

  	function unbindTexture() {

  		var boundTexture = currentBoundTextures[ currentTextureSlot ];

  		if ( boundTexture !== undefined && boundTexture.type !== undefined ) {

  			gl.bindTexture( boundTexture.type, null );

  			boundTexture.type = undefined;
  			boundTexture.texture = undefined;

  		}

  	}

  	function compressedTexImage2D() {

  		try {

  			gl.compressedTexImage2D.apply( gl, arguments );

  		} catch ( error ) {

  			console.error( 'THREE.WebGLState:', error );

  		}

  	}

  	function texImage2D() {

  		try {

  			gl.texImage2D.apply( gl, arguments );

  		} catch ( error ) {

  			console.error( 'THREE.WebGLState:', error );

  		}

  	}

  	function texImage3D() {

  		try {

  			gl.texImage3D.apply( gl, arguments );

  		} catch ( error ) {

  			console.error( 'THREE.WebGLState:', error );

  		}

  	}

  	//

  	function scissor( scissor ) {

  		if ( currentScissor.equals( scissor ) === false ) {

  			gl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );
  			currentScissor.copy( scissor );

  		}

  	}

  	function viewport( viewport ) {

  		if ( currentViewport.equals( viewport ) === false ) {

  			gl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );
  			currentViewport.copy( viewport );

  		}

  	}

  	//

  	function reset() {

  		enabledCapabilities = {};

  		currentTextureSlot = null;
  		currentBoundTextures = {};

  		currentProgram = null;

  		currentBlending = null;

  		currentFlipSided = null;
  		currentCullFace = null;

  		colorBuffer.reset();
  		depthBuffer.reset();
  		stencilBuffer.reset();

  	}

  	return {

  		buffers: {
  			color: colorBuffer,
  			depth: depthBuffer,
  			stencil: stencilBuffer
  		},

  		enable: enable,
  		disable: disable,

  		useProgram: useProgram,

  		setBlending: setBlending,
  		setMaterial: setMaterial,

  		setFlipSided: setFlipSided,
  		setCullFace: setCullFace,

  		setLineWidth: setLineWidth,
  		setPolygonOffset: setPolygonOffset,

  		setScissorTest: setScissorTest,

  		activeTexture: activeTexture,
  		bindTexture: bindTexture,
  		unbindTexture: unbindTexture,
  		compressedTexImage2D: compressedTexImage2D,
  		texImage2D: texImage2D,
  		texImage3D: texImage3D,

  		scissor: scissor,
  		viewport: viewport,

  		reset: reset

  	};

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {

  	var isWebGL2 = capabilities.isWebGL2;
  	var maxTextures = capabilities.maxTextures;
  	var maxCubemapSize = capabilities.maxCubemapSize;
  	var maxTextureSize = capabilities.maxTextureSize;
  	var maxSamples = capabilities.maxSamples;

  	var _videoTextures = new WeakMap();
  	var _canvas;

  	// cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,
  	// also OffscreenCanvas.getContext("webgl"), but not OffscreenCanvas.getContext("2d")!
  	// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).

  	var useOffscreenCanvas = false;

  	try {

  		useOffscreenCanvas = typeof OffscreenCanvas !== 'undefined'
  			&& ( new OffscreenCanvas( 1, 1 ).getContext( "2d" ) ) !== null;

  	} catch ( err ) {

  		// Ignore any errors

  	}

  	function createCanvas( width, height ) {

  		// Use OffscreenCanvas when available. Specially needed in web workers

  		return useOffscreenCanvas ?
  			new OffscreenCanvas( width, height ) :
  			document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );

  	}

  	function resizeImage( image, needsPowerOfTwo, needsNewCanvas, maxSize ) {

  		var scale = 1;

  		// handle case if texture exceeds max size

  		if ( image.width > maxSize || image.height > maxSize ) {

  			scale = maxSize / Math.max( image.width, image.height );

  		}

  		// only perform resize if necessary

  		if ( scale < 1 || needsPowerOfTwo === true ) {

  			// only perform resize for certain image types

  			if ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||
  				( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||
  				( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {

  				var floor = needsPowerOfTwo ? MathUtils.floorPowerOfTwo : Math.floor;

  				var width = floor( scale * image.width );
  				var height = floor( scale * image.height );

  				if ( _canvas === undefined ) { _canvas = createCanvas( width, height ); }

  				// cube textures can't reuse the same canvas

  				var canvas = needsNewCanvas ? createCanvas( width, height ) : _canvas;

  				canvas.width = width;
  				canvas.height = height;

  				var context = canvas.getContext( '2d' );
  				context.drawImage( image, 0, 0, width, height );

  				console.warn( 'THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').' );

  				return canvas;

  			} else {

  				if ( 'data' in image ) {

  					console.warn( 'THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').' );

  				}

  				return image;

  			}

  		}

  		return image;

  	}

  	function isPowerOfTwo( image ) {

  		return MathUtils.isPowerOfTwo( image.width ) && MathUtils.isPowerOfTwo( image.height );

  	}

  	function textureNeedsPowerOfTwo( texture ) {

  		if ( isWebGL2 ) { return false; }

  		return ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||
  			( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );

  	}

  	function textureNeedsGenerateMipmaps( texture, supportsMips ) {

  		return texture.generateMipmaps && supportsMips &&
  			texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;

  	}

  	function generateMipmap( target, texture, width, height ) {

  		_gl.generateMipmap( target );

  		var textureProperties = properties.get( texture );

  		// Note: Math.log( x ) * Math.LOG2E used instead of Math.log2( x ) which is not supported by IE11
  		textureProperties.__maxMipLevel = Math.log( Math.max( width, height ) ) * Math.LOG2E;

  	}

  	function getInternalFormat( internalFormatName, glFormat, glType ) {

  		if ( isWebGL2 === false ) { return glFormat; }

  		if ( internalFormatName !== null ) {

  			if ( _gl[ internalFormatName ] !== undefined ) { return _gl[ internalFormatName ]; }

  			console.warn( 'THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \'' + internalFormatName + '\'' );

  		}

  		var internalFormat = glFormat;

  		if ( glFormat === 6403 ) {

  			if ( glType === 5126 ) { internalFormat = 33326; }
  			if ( glType === 5131 ) { internalFormat = 33325; }
  			if ( glType === 5121 ) { internalFormat = 33321; }

  		}

  		if ( glFormat === 6407 ) {

  			if ( glType === 5126 ) { internalFormat = 34837; }
  			if ( glType === 5131 ) { internalFormat = 34843; }
  			if ( glType === 5121 ) { internalFormat = 32849; }

  		}

  		if ( glFormat === 6408 ) {

  			if ( glType === 5126 ) { internalFormat = 34836; }
  			if ( glType === 5131 ) { internalFormat = 34842; }
  			if ( glType === 5121 ) { internalFormat = 32856; }

  		}

  		if ( internalFormat === 33325 || internalFormat === 33326 ||
  			internalFormat === 34842 || internalFormat === 34836 ) {

  			extensions.get( 'EXT_color_buffer_float' );

  		}

  		return internalFormat;

  	}

  	// Fallback filters for non-power-of-2 textures

  	function filterFallback( f ) {

  		if ( f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter ) {

  			return 9728;

  		}

  		return 9729;

  	}

  	//

  	function onTextureDispose( event ) {

  		var texture = event.target;

  		texture.removeEventListener( 'dispose', onTextureDispose );

  		deallocateTexture( texture );

  		if ( texture.isVideoTexture ) {

  			_videoTextures.delete( texture );

  		}

  		info.memory.textures --;

  	}

  	function onRenderTargetDispose( event ) {

  		var renderTarget = event.target;

  		renderTarget.removeEventListener( 'dispose', onRenderTargetDispose );

  		deallocateRenderTarget( renderTarget );

  		info.memory.textures --;

  	}

  	//

  	function deallocateTexture( texture ) {

  		var textureProperties = properties.get( texture );

  		if ( textureProperties.__webglInit === undefined ) { return; }

  		_gl.deleteTexture( textureProperties.__webglTexture );

  		properties.remove( texture );

  	}

  	function deallocateRenderTarget( renderTarget ) {

  		var renderTargetProperties = properties.get( renderTarget );
  		var textureProperties = properties.get( renderTarget.texture );

  		if ( ! renderTarget ) { return; }

  		if ( textureProperties.__webglTexture !== undefined ) {

  			_gl.deleteTexture( textureProperties.__webglTexture );

  		}

  		if ( renderTarget.depthTexture ) {

  			renderTarget.depthTexture.dispose();

  		}

  		if ( renderTarget.isWebGLCubeRenderTarget ) {

  			for ( var i = 0; i < 6; i ++ ) {

  				_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );
  				if ( renderTargetProperties.__webglDepthbuffer ) { _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] ); }

  			}

  		} else {

  			_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );
  			if ( renderTargetProperties.__webglDepthbuffer ) { _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer ); }
  			if ( renderTargetProperties.__webglMultisampledFramebuffer ) { _gl.deleteFramebuffer( renderTargetProperties.__webglMultisampledFramebuffer ); }
  			if ( renderTargetProperties.__webglColorRenderbuffer ) { _gl.deleteRenderbuffer( renderTargetProperties.__webglColorRenderbuffer ); }
  			if ( renderTargetProperties.__webglDepthRenderbuffer ) { _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthRenderbuffer ); }

  		}

  		properties.remove( renderTarget.texture );
  		properties.remove( renderTarget );

  	}

  	//

  	var textureUnits = 0;

  	function resetTextureUnits() {

  		textureUnits = 0;

  	}

  	function allocateTextureUnit() {

  		var textureUnit = textureUnits;

  		if ( textureUnit >= maxTextures ) {

  			console.warn( 'THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures );

  		}

  		textureUnits += 1;

  		return textureUnit;

  	}

  	//

  	function setTexture2D( texture, slot ) {

  		var textureProperties = properties.get( texture );

  		if ( texture.isVideoTexture ) { updateVideoTexture( texture ); }

  		if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

  			var image = texture.image;

  			if ( image === undefined ) {

  				console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined' );

  			} else if ( image.complete === false ) {

  				console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete' );

  			} else {

  				uploadTexture( textureProperties, texture, slot );
  				return;

  			}

  		}

  		state.activeTexture( 33984 + slot );
  		state.bindTexture( 3553, textureProperties.__webglTexture );

  	}

  	function setTexture2DArray( texture, slot ) {

  		var textureProperties = properties.get( texture );

  		if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

  			uploadTexture( textureProperties, texture, slot );
  			return;

  		}

  		state.activeTexture( 33984 + slot );
  		state.bindTexture( 35866, textureProperties.__webglTexture );

  	}

  	function setTexture3D( texture, slot ) {

  		var textureProperties = properties.get( texture );

  		if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

  			uploadTexture( textureProperties, texture, slot );
  			return;

  		}

  		state.activeTexture( 33984 + slot );
  		state.bindTexture( 32879, textureProperties.__webglTexture );

  	}

  	function setTextureCube( texture, slot ) {

  		if ( texture.image.length !== 6 ) { return; }

  		var textureProperties = properties.get( texture );

  		if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

  			initTexture( textureProperties, texture );

  			state.activeTexture( 33984 + slot );
  			state.bindTexture( 34067, textureProperties.__webglTexture );

  			_gl.pixelStorei( 37440, texture.flipY );

  			var isCompressed = ( texture && ( texture.isCompressedTexture || texture.image[ 0 ].isCompressedTexture ) );
  			var isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );

  			var cubeImage = [];

  			for ( var i = 0; i < 6; i ++ ) {

  				if ( ! isCompressed && ! isDataTexture ) {

  					cubeImage[ i ] = resizeImage( texture.image[ i ], false, true, maxCubemapSize );

  				} else {

  					cubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];

  				}

  			}

  			var image = cubeImage[ 0 ],
  				supportsMips = isPowerOfTwo( image ) || isWebGL2,
  				glFormat = utils.convert( texture.format ),
  				glType = utils.convert( texture.type ),
  				glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType );

  			setTextureParameters( 34067, texture, supportsMips );

  			var mipmaps;

  			if ( isCompressed ) {

  				for ( var i$1 = 0; i$1 < 6; i$1 ++ ) {

  					mipmaps = cubeImage[ i$1 ].mipmaps;

  					for ( var j = 0; j < mipmaps.length; j ++ ) {

  						var mipmap = mipmaps[ j ];

  						if ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {

  							if ( glFormat !== null ) {

  								state.compressedTexImage2D( 34069 + i$1, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );

  							} else {

  								console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );

  							}

  						} else {

  							state.texImage2D( 34069 + i$1, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

  						}

  					}

  				}

  				textureProperties.__maxMipLevel = mipmaps.length - 1;

  			} else {

  				mipmaps = texture.mipmaps;

  				for ( var i$2 = 0; i$2 < 6; i$2 ++ ) {

  					if ( isDataTexture ) {

  						state.texImage2D( 34069 + i$2, 0, glInternalFormat, cubeImage[ i$2 ].width, cubeImage[ i$2 ].height, 0, glFormat, glType, cubeImage[ i$2 ].data );

  						for ( var j$1 = 0; j$1 < mipmaps.length; j$1 ++ ) {

  							var mipmap$1 = mipmaps[ j$1 ];
  							var mipmapImage = mipmap$1.image[ i$2 ].image;

  							state.texImage2D( 34069 + i$2, j$1 + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data );

  						}

  					} else {

  						state.texImage2D( 34069 + i$2, 0, glInternalFormat, glFormat, glType, cubeImage[ i$2 ] );

  						for ( var j$2 = 0; j$2 < mipmaps.length; j$2 ++ ) {

  							var mipmap$2 = mipmaps[ j$2 ];

  							state.texImage2D( 34069 + i$2, j$2 + 1, glInternalFormat, glFormat, glType, mipmap$2.image[ i$2 ] );

  						}

  					}

  				}

  				textureProperties.__maxMipLevel = mipmaps.length;

  			}

  			if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {

  				// We assume images for cube map have the same size.
  				generateMipmap( 34067, texture, image.width, image.height );

  			}

  			textureProperties.__version = texture.version;

  			if ( texture.onUpdate ) { texture.onUpdate( texture ); }

  		} else {

  			state.activeTexture( 33984 + slot );
  			state.bindTexture( 34067, textureProperties.__webglTexture );

  		}

  	}

  	function setTextureCubeDynamic( texture, slot ) {

  		state.activeTexture( 33984 + slot );
  		state.bindTexture( 34067, properties.get( texture ).__webglTexture );

  	}

  	var wrappingToGL = {};
  	wrappingToGL[ RepeatWrapping ] = 10497;
  	wrappingToGL[ ClampToEdgeWrapping ] = 33071;
  	wrappingToGL[ MirroredRepeatWrapping ] = 33648;

  	var filterToGL = {};
  	filterToGL[ NearestFilter ] = 9728;
  	filterToGL[ NearestMipmapNearestFilter ] = 9984;
  	filterToGL[ NearestMipmapLinearFilter ] = 9986;
  	filterToGL[ LinearFilter ] = 9729;
  	filterToGL[ LinearMipmapNearestFilter ] = 9985;
  	filterToGL[ LinearMipmapLinearFilter ] = 9987;

  	function setTextureParameters( textureType, texture, supportsMips ) {

  		if ( supportsMips ) {

  			_gl.texParameteri( textureType, 10242, wrappingToGL[ texture.wrapS ] );
  			_gl.texParameteri( textureType, 10243, wrappingToGL[ texture.wrapT ] );

  			if ( textureType === 32879 || textureType === 35866 ) {

  				_gl.texParameteri( textureType, 32882, wrappingToGL[ texture.wrapR ] );

  			}

  			_gl.texParameteri( textureType, 10240, filterToGL[ texture.magFilter ] );
  			_gl.texParameteri( textureType, 10241, filterToGL[ texture.minFilter ] );

  		} else {

  			_gl.texParameteri( textureType, 10242, 33071 );
  			_gl.texParameteri( textureType, 10243, 33071 );

  			if ( textureType === 32879 || textureType === 35866 ) {

  				_gl.texParameteri( textureType, 32882, 33071 );

  			}

  			if ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {

  				console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.' );

  			}

  			_gl.texParameteri( textureType, 10240, filterFallback( texture.magFilter ) );
  			_gl.texParameteri( textureType, 10241, filterFallback( texture.minFilter ) );

  			if ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {

  				console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.' );

  			}

  		}

  		var extension = extensions.get( 'EXT_texture_filter_anisotropic' );

  		if ( extension ) {

  			if ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) { return; }
  			if ( texture.type === HalfFloatType && ( isWebGL2 || extensions.get( 'OES_texture_half_float_linear' ) ) === null ) { return; }

  			if ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {

  				_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );
  				properties.get( texture ).__currentAnisotropy = texture.anisotropy;

  			}

  		}

  	}

  	function initTexture( textureProperties, texture ) {

  		if ( textureProperties.__webglInit === undefined ) {

  			textureProperties.__webglInit = true;

  			texture.addEventListener( 'dispose', onTextureDispose );

  			textureProperties.__webglTexture = _gl.createTexture();

  			info.memory.textures ++;

  		}

  	}

  	function uploadTexture( textureProperties, texture, slot ) {

  		var textureType = 3553;

  		if ( texture.isDataTexture2DArray ) { textureType = 35866; }
  		if ( texture.isDataTexture3D ) { textureType = 32879; }

  		initTexture( textureProperties, texture );

  		state.activeTexture( 33984 + slot );
  		state.bindTexture( textureType, textureProperties.__webglTexture );

  		_gl.pixelStorei( 37440, texture.flipY );
  		_gl.pixelStorei( 37441, texture.premultiplyAlpha );
  		_gl.pixelStorei( 3317, texture.unpackAlignment );

  		var needsPowerOfTwo = textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( texture.image ) === false;
  		var image = resizeImage( texture.image, needsPowerOfTwo, false, maxTextureSize );

  		var supportsMips = isPowerOfTwo( image ) || isWebGL2,
  			glFormat = utils.convert( texture.format );

  		var glType = utils.convert( texture.type ),
  			glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType );

  		setTextureParameters( textureType, texture, supportsMips );

  		var mipmap;
  		var mipmaps = texture.mipmaps;

  		if ( texture.isDepthTexture ) {

  			// populate depth texture with dummy data

  			glInternalFormat = 6402;

  			if ( isWebGL2 ) {

  				if ( texture.type === FloatType ) {

  					glInternalFormat = 36012;

  				} else if ( texture.type === UnsignedIntType ) {

  					glInternalFormat = 33190;

  				} else if ( texture.type === UnsignedInt248Type ) {

  					glInternalFormat = 35056;

  				} else {

  					glInternalFormat = 33189; // WebGL2 requires sized internalformat for glTexImage2D

  				}

  			} else {

  				if ( texture.type === FloatType ) {

  					console.error( 'WebGLRenderer: Floating point depth texture requires WebGL2.' );

  				}

  			}

  			// validation checks for WebGL 1

  			if ( texture.format === DepthFormat && glInternalFormat === 6402 ) {

  				// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
  				// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT
  				// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
  				if ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {

  					console.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );

  					texture.type = UnsignedShortType;
  					glType = utils.convert( texture.type );

  				}

  			}

  			if ( texture.format === DepthStencilFormat && glInternalFormat === 6402 ) {

  				// Depth stencil textures need the DEPTH_STENCIL internal format
  				// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
  				glInternalFormat = 34041;

  				// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
  				// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.
  				// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
  				if ( texture.type !== UnsignedInt248Type ) {

  					console.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );

  					texture.type = UnsignedInt248Type;
  					glType = utils.convert( texture.type );

  				}

  			}

  			//

  			state.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );

  		} else if ( texture.isDataTexture ) {

  			// use manually created mipmaps if available
  			// if there are no manual mipmaps
  			// set 0 level mipmap and then use GL to generate other mipmap levels

  			if ( mipmaps.length > 0 && supportsMips ) {

  				for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

  					mipmap = mipmaps[ i ];
  					state.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

  				}

  				texture.generateMipmaps = false;
  				textureProperties.__maxMipLevel = mipmaps.length - 1;

  			} else {

  				state.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );
  				textureProperties.__maxMipLevel = 0;

  			}

  		} else if ( texture.isCompressedTexture ) {

  			for ( var i$1 = 0, il$1 = mipmaps.length; i$1 < il$1; i$1 ++ ) {

  				mipmap = mipmaps[ i$1 ];

  				if ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {

  					if ( glFormat !== null ) {

  						state.compressedTexImage2D( 3553, i$1, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );

  					} else {

  						console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );

  					}

  				} else {

  					state.texImage2D( 3553, i$1, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

  				}

  			}

  			textureProperties.__maxMipLevel = mipmaps.length - 1;

  		} else if ( texture.isDataTexture2DArray ) {

  			state.texImage3D( 35866, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );
  			textureProperties.__maxMipLevel = 0;

  		} else if ( texture.isDataTexture3D ) {

  			state.texImage3D( 32879, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );
  			textureProperties.__maxMipLevel = 0;

  		} else {

  			// regular Texture (image, video, canvas)

  			// use manually created mipmaps if available
  			// if there are no manual mipmaps
  			// set 0 level mipmap and then use GL to generate other mipmap levels

  			if ( mipmaps.length > 0 && supportsMips ) {

  				for ( var i$2 = 0, il$2 = mipmaps.length; i$2 < il$2; i$2 ++ ) {

  					mipmap = mipmaps[ i$2 ];
  					state.texImage2D( 3553, i$2, glInternalFormat, glFormat, glType, mipmap );

  				}

  				texture.generateMipmaps = false;
  				textureProperties.__maxMipLevel = mipmaps.length - 1;

  			} else {

  				state.texImage2D( 3553, 0, glInternalFormat, glFormat, glType, image );
  				textureProperties.__maxMipLevel = 0;

  			}

  		}

  		if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {

  			generateMipmap( textureType, texture, image.width, image.height );

  		}

  		textureProperties.__version = texture.version;

  		if ( texture.onUpdate ) { texture.onUpdate( texture ); }

  	}

  	// Render targets

  	// Setup storage for target texture and bind it to correct framebuffer
  	function setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {

  		var glFormat = utils.convert( renderTarget.texture.format );
  		var glType = utils.convert( renderTarget.texture.type );
  		var glInternalFormat = getInternalFormat( renderTarget.texture.internalFormat, glFormat, glType );
  		state.texImage2D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );
  		_gl.bindFramebuffer( 36160, framebuffer );
  		_gl.framebufferTexture2D( 36160, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );
  		_gl.bindFramebuffer( 36160, null );

  	}

  	// Setup storage for internal depth/stencil buffers and bind to correct framebuffer
  	function setupRenderBufferStorage( renderbuffer, renderTarget, isMultisample ) {

  		_gl.bindRenderbuffer( 36161, renderbuffer );

  		if ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {

  			var glInternalFormat = 33189;

  			if ( isMultisample ) {

  				var depthTexture = renderTarget.depthTexture;

  				if ( depthTexture && depthTexture.isDepthTexture ) {

  					if ( depthTexture.type === FloatType ) {

  						glInternalFormat = 36012;

  					} else if ( depthTexture.type === UnsignedIntType ) {

  						glInternalFormat = 33190;

  					}

  				}

  				var samples = getRenderTargetSamples( renderTarget );

  				_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );

  			} else {

  				_gl.renderbufferStorage( 36161, glInternalFormat, renderTarget.width, renderTarget.height );

  			}

  			_gl.framebufferRenderbuffer( 36160, 36096, 36161, renderbuffer );

  		} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {

  			if ( isMultisample ) {

  				var samples$1 = getRenderTargetSamples( renderTarget );

  				_gl.renderbufferStorageMultisample( 36161, samples$1, 35056, renderTarget.width, renderTarget.height );

  			} else {

  				_gl.renderbufferStorage( 36161, 34041, renderTarget.width, renderTarget.height );

  			}


  			_gl.framebufferRenderbuffer( 36160, 33306, 36161, renderbuffer );

  		} else {

  			var glFormat = utils.convert( renderTarget.texture.format );
  			var glType = utils.convert( renderTarget.texture.type );
  			var glInternalFormat$1 = getInternalFormat( renderTarget.texture.internalFormat, glFormat, glType );

  			if ( isMultisample ) {

  				var samples$2 = getRenderTargetSamples( renderTarget );

  				_gl.renderbufferStorageMultisample( 36161, samples$2, glInternalFormat$1, renderTarget.width, renderTarget.height );

  			} else {

  				_gl.renderbufferStorage( 36161, glInternalFormat$1, renderTarget.width, renderTarget.height );

  			}

  		}

  		_gl.bindRenderbuffer( 36161, null );

  	}

  	// Setup resources for a Depth Texture for a FBO (needs an extension)
  	function setupDepthTexture( framebuffer, renderTarget ) {

  		var isCube = ( renderTarget && renderTarget.isWebGLCubeRenderTarget );
  		if ( isCube ) { throw new Error( 'Depth Texture with cube render targets is not supported' ); }

  		_gl.bindFramebuffer( 36160, framebuffer );

  		if ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {

  			throw new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );

  		}

  		// upload an empty depth texture with framebuffer size
  		if ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||
  				renderTarget.depthTexture.image.width !== renderTarget.width ||
  				renderTarget.depthTexture.image.height !== renderTarget.height ) {

  			renderTarget.depthTexture.image.width = renderTarget.width;
  			renderTarget.depthTexture.image.height = renderTarget.height;
  			renderTarget.depthTexture.needsUpdate = true;

  		}

  		setTexture2D( renderTarget.depthTexture, 0 );

  		var webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;

  		if ( renderTarget.depthTexture.format === DepthFormat ) {

  			_gl.framebufferTexture2D( 36160, 36096, 3553, webglDepthTexture, 0 );

  		} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {

  			_gl.framebufferTexture2D( 36160, 33306, 3553, webglDepthTexture, 0 );

  		} else {

  			throw new Error( 'Unknown depthTexture format' );

  		}

  	}

  	// Setup GL resources for a non-texture depth buffer
  	function setupDepthRenderbuffer( renderTarget ) {

  		var renderTargetProperties = properties.get( renderTarget );

  		var isCube = ( renderTarget.isWebGLCubeRenderTarget === true );

  		if ( renderTarget.depthTexture ) {

  			if ( isCube ) { throw new Error( 'target.depthTexture not supported in Cube render targets' ); }

  			setupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );

  		} else {

  			if ( isCube ) {

  				renderTargetProperties.__webglDepthbuffer = [];

  				for ( var i = 0; i < 6; i ++ ) {

  					_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer[ i ] );
  					renderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();
  					setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget, false );

  				}

  			} else {

  				_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );
  				renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
  				setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget, false );

  			}

  		}

  		_gl.bindFramebuffer( 36160, null );

  	}

  	// Set up GL resources for the render target
  	function setupRenderTarget( renderTarget ) {

  		var renderTargetProperties = properties.get( renderTarget );
  		var textureProperties = properties.get( renderTarget.texture );

  		renderTarget.addEventListener( 'dispose', onRenderTargetDispose );

  		textureProperties.__webglTexture = _gl.createTexture();

  		info.memory.textures ++;

  		var isCube = ( renderTarget.isWebGLCubeRenderTarget === true );
  		var isMultisample = ( renderTarget.isWebGLMultisampleRenderTarget === true );
  		var supportsMips = isPowerOfTwo( renderTarget ) || isWebGL2;

  		// Handles WebGL2 RGBFormat fallback - #18858

  		if ( isWebGL2 && renderTarget.texture.format === RGBFormat && ( renderTarget.texture.type === FloatType || renderTarget.texture.type === HalfFloatType ) ) {

  			renderTarget.texture.format = RGBAFormat;

  			console.warn( 'THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.' );

  		}

  		// Setup framebuffer

  		if ( isCube ) {

  			renderTargetProperties.__webglFramebuffer = [];

  			for ( var i = 0; i < 6; i ++ ) {

  				renderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();

  			}

  		} else {

  			renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();

  			if ( isMultisample ) {

  				if ( isWebGL2 ) {

  					renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();
  					renderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();

  					_gl.bindRenderbuffer( 36161, renderTargetProperties.__webglColorRenderbuffer );

  					var glFormat = utils.convert( renderTarget.texture.format );
  					var glType = utils.convert( renderTarget.texture.type );
  					var glInternalFormat = getInternalFormat( renderTarget.texture.internalFormat, glFormat, glType );
  					var samples = getRenderTargetSamples( renderTarget );
  					_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );

  					_gl.bindFramebuffer( 36160, renderTargetProperties.__webglMultisampledFramebuffer );
  					_gl.framebufferRenderbuffer( 36160, 36064, 36161, renderTargetProperties.__webglColorRenderbuffer );
  					_gl.bindRenderbuffer( 36161, null );

  					if ( renderTarget.depthBuffer ) {

  						renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();
  						setupRenderBufferStorage( renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true );

  					}

  					_gl.bindFramebuffer( 36160, null );


  				} else {

  					console.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );

  				}

  			}

  		}

  		// Setup color buffer

  		if ( isCube ) {

  			state.bindTexture( 34067, textureProperties.__webglTexture );
  			setTextureParameters( 34067, renderTarget.texture, supportsMips );

  			for ( var i$1 = 0; i$1 < 6; i$1 ++ ) {

  				setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i$1 ], renderTarget, 36064, 34069 + i$1 );

  			}

  			if ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {

  				generateMipmap( 34067, renderTarget.texture, renderTarget.width, renderTarget.height );

  			}

  			state.bindTexture( 34067, null );

  		} else {

  			state.bindTexture( 3553, textureProperties.__webglTexture );
  			setTextureParameters( 3553, renderTarget.texture, supportsMips );
  			setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, 36064, 3553 );

  			if ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {

  				generateMipmap( 3553, renderTarget.texture, renderTarget.width, renderTarget.height );

  			}

  			state.bindTexture( 3553, null );

  		}

  		// Setup depth and stencil buffers

  		if ( renderTarget.depthBuffer ) {

  			setupDepthRenderbuffer( renderTarget );

  		}

  	}

  	function updateRenderTargetMipmap( renderTarget ) {

  		var texture = renderTarget.texture;
  		var supportsMips = isPowerOfTwo( renderTarget ) || isWebGL2;

  		if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {

  			var target = renderTarget.isWebGLCubeRenderTarget ? 34067 : 3553;
  			var webglTexture = properties.get( texture ).__webglTexture;

  			state.bindTexture( target, webglTexture );
  			generateMipmap( target, texture, renderTarget.width, renderTarget.height );
  			state.bindTexture( target, null );

  		}

  	}

  	function updateMultisampleRenderTarget( renderTarget ) {

  		if ( renderTarget.isWebGLMultisampleRenderTarget ) {

  			if ( isWebGL2 ) {

  				var renderTargetProperties = properties.get( renderTarget );

  				_gl.bindFramebuffer( 36008, renderTargetProperties.__webglMultisampledFramebuffer );
  				_gl.bindFramebuffer( 36009, renderTargetProperties.__webglFramebuffer );

  				var width = renderTarget.width;
  				var height = renderTarget.height;
  				var mask = 16384;

  				if ( renderTarget.depthBuffer ) { mask |= 256; }
  				if ( renderTarget.stencilBuffer ) { mask |= 1024; }

  				_gl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, 9728 );

  				_gl.bindFramebuffer( 36160, renderTargetProperties.__webglMultisampledFramebuffer ); // see #18905

  			} else {

  				console.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );

  			}

  		}

  	}

  	function getRenderTargetSamples( renderTarget ) {

  		return ( isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ) ?
  			Math.min( maxSamples, renderTarget.samples ) : 0;

  	}

  	function updateVideoTexture( texture ) {

  		var frame = info.render.frame;

  		// Check the last frame we updated the VideoTexture

  		if ( _videoTextures.get( texture ) !== frame ) {

  			_videoTextures.set( texture, frame );
  			texture.update();

  		}

  	}

  	// backwards compatibility

  	var warnedTexture2D = false;
  	var warnedTextureCube = false;

  	function safeSetTexture2D( texture, slot ) {

  		if ( texture && texture.isWebGLRenderTarget ) {

  			if ( warnedTexture2D === false ) {

  				console.warn( "THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead." );
  				warnedTexture2D = true;

  			}

  			texture = texture.texture;

  		}

  		setTexture2D( texture, slot );

  	}

  	function safeSetTextureCube( texture, slot ) {

  		if ( texture && texture.isWebGLCubeRenderTarget ) {

  			if ( warnedTextureCube === false ) {

  				console.warn( "THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead." );
  				warnedTextureCube = true;

  			}

  			texture = texture.texture;

  		}

  		// currently relying on the fact that WebGLCubeRenderTarget.texture is a Texture and NOT a CubeTexture
  		// TODO: unify these code paths
  		if ( ( texture && texture.isCubeTexture ) ||
  			( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {

  			// CompressedTexture can have Array in image :/

  			// this function alone should take care of cube textures
  			setTextureCube( texture, slot );

  		} else {

  			// assumed: texture property of THREE.WebGLCubeRenderTarget
  			setTextureCubeDynamic( texture, slot );

  		}

  	}

  	//

  	this.allocateTextureUnit = allocateTextureUnit;
  	this.resetTextureUnits = resetTextureUnits;

  	this.setTexture2D = setTexture2D;
  	this.setTexture2DArray = setTexture2DArray;
  	this.setTexture3D = setTexture3D;
  	this.setTextureCube = setTextureCube;
  	this.setTextureCubeDynamic = setTextureCubeDynamic;
  	this.setupRenderTarget = setupRenderTarget;
  	this.updateRenderTargetMipmap = updateRenderTargetMipmap;
  	this.updateMultisampleRenderTarget = updateMultisampleRenderTarget;

  	this.safeSetTexture2D = safeSetTexture2D;
  	this.safeSetTextureCube = safeSetTextureCube;

  }

  /**
   * @author thespite / http://www.twitter.com/thespite
   */

  function WebGLUtils( gl, extensions, capabilities ) {

  	var isWebGL2 = capabilities.isWebGL2;

  	function convert( p ) {

  		var extension;

  		if ( p === UnsignedByteType ) { return 5121; }
  		if ( p === UnsignedShort4444Type ) { return 32819; }
  		if ( p === UnsignedShort5551Type ) { return 32820; }
  		if ( p === UnsignedShort565Type ) { return 33635; }

  		if ( p === ByteType ) { return 5120; }
  		if ( p === ShortType ) { return 5122; }
  		if ( p === UnsignedShortType ) { return 5123; }
  		if ( p === IntType ) { return 5124; }
  		if ( p === UnsignedIntType ) { return 5125; }
  		if ( p === FloatType ) { return 5126; }

  		if ( p === HalfFloatType ) {

  			if ( isWebGL2 ) { return 5131; }

  			extension = extensions.get( 'OES_texture_half_float' );

  			if ( extension !== null ) {

  				return extension.HALF_FLOAT_OES;

  			} else {

  				return null;

  			}

  		}

  		if ( p === AlphaFormat ) { return 6406; }
  		if ( p === RGBFormat ) { return 6407; }
  		if ( p === RGBAFormat ) { return 6408; }
  		if ( p === LuminanceFormat ) { return 6409; }
  		if ( p === LuminanceAlphaFormat ) { return 6410; }
  		if ( p === DepthFormat ) { return 6402; }
  		if ( p === DepthStencilFormat ) { return 34041; }
  		if ( p === RedFormat ) { return 6403; }

  		// WebGL2 formats.

  		if ( p === RedIntegerFormat ) { return 36244; }
  		if ( p === RGFormat ) { return 33319; }
  		if ( p === RGIntegerFormat ) { return 33320; }
  		if ( p === RGBIntegerFormat ) { return 36248; }
  		if ( p === RGBAIntegerFormat ) { return 36249; }

  		if ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||
  			p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {

  			extension = extensions.get( 'WEBGL_compressed_texture_s3tc' );

  			if ( extension !== null ) {

  				if ( p === RGB_S3TC_DXT1_Format ) { return extension.COMPRESSED_RGB_S3TC_DXT1_EXT; }
  				if ( p === RGBA_S3TC_DXT1_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT; }
  				if ( p === RGBA_S3TC_DXT3_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT; }
  				if ( p === RGBA_S3TC_DXT5_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT; }

  			} else {

  				return null;

  			}

  		}

  		if ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||
  			p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {

  			extension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );

  			if ( extension !== null ) {

  				if ( p === RGB_PVRTC_4BPPV1_Format ) { return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG; }
  				if ( p === RGB_PVRTC_2BPPV1_Format ) { return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG; }
  				if ( p === RGBA_PVRTC_4BPPV1_Format ) { return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG; }
  				if ( p === RGBA_PVRTC_2BPPV1_Format ) { return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG; }

  			} else {

  				return null;

  			}

  		}

  		if ( p === RGB_ETC1_Format ) {

  			extension = extensions.get( 'WEBGL_compressed_texture_etc1' );

  			if ( extension !== null ) {

  				return extension.COMPRESSED_RGB_ETC1_WEBGL;

  			} else {

  				return null;

  			}

  		}

  		if ( p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format ) {

  			extension = extensions.get( 'WEBGL_compressed_texture_etc' );

  			if ( extension !== null ) {

  				if ( p === RGB_ETC2_Format ) { return extension.COMPRESSED_RGB8_ETC2; }
  				if ( p === RGBA_ETC2_EAC_Format ) { return extension.COMPRESSED_RGBA8_ETC2_EAC; }

  			}

  		}

  		if ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||
  			p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||
  			p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||
  			p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||
  			p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ||
  			p === SRGB8_ALPHA8_ASTC_4x4_Format || p === SRGB8_ALPHA8_ASTC_5x4_Format || p === SRGB8_ALPHA8_ASTC_5x5_Format ||
  			p === SRGB8_ALPHA8_ASTC_6x5_Format || p === SRGB8_ALPHA8_ASTC_6x6_Format || p === SRGB8_ALPHA8_ASTC_8x5_Format ||
  			p === SRGB8_ALPHA8_ASTC_8x6_Format || p === SRGB8_ALPHA8_ASTC_8x8_Format || p === SRGB8_ALPHA8_ASTC_10x5_Format ||
  			p === SRGB8_ALPHA8_ASTC_10x6_Format || p === SRGB8_ALPHA8_ASTC_10x8_Format || p === SRGB8_ALPHA8_ASTC_10x10_Format ||
  			p === SRGB8_ALPHA8_ASTC_12x10_Format || p === SRGB8_ALPHA8_ASTC_12x12_Format ) {

  			extension = extensions.get( 'WEBGL_compressed_texture_astc' );

  			if ( extension !== null ) {

  				// TODO Complete?

  				return p;

  			} else {

  				return null;

  			}

  		}

  		if ( p === RGBA_BPTC_Format ) {

  			extension = extensions.get( 'EXT_texture_compression_bptc' );

  			if ( extension !== null ) {

  				// TODO Complete?

  				return p;

  			} else {

  				return null;

  			}

  		}

  		if ( p === UnsignedInt248Type ) {

  			if ( isWebGL2 ) { return 34042; }

  			extension = extensions.get( 'WEBGL_depth_texture' );

  			if ( extension !== null ) {

  				return extension.UNSIGNED_INT_24_8_WEBGL;

  			} else {

  				return null;

  			}

  		}

  	}

  	return { convert: convert };

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function ArrayCamera( array ) {

  	PerspectiveCamera.call( this );

  	this.cameras = array || [];

  }

  ArrayCamera.prototype = Object.assign( Object.create( PerspectiveCamera.prototype ), {

  	constructor: ArrayCamera,

  	isArrayCamera: true

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function Group() {

  	Object3D.call( this );

  	this.type = 'Group';

  }

  Group.prototype = Object.assign( Object.create( Object3D.prototype ), {

  	constructor: Group,

  	isGroup: true

  } );

  /**
   * @author Mugen87 / https://github.com/Mugen87
   */

  function WebXRController() {

  	this._targetRay = null;
  	this._grip = null;

  }

  Object.assign( WebXRController.prototype, {

  	constructor: WebXRController,

  	getTargetRaySpace: function () {

  		if ( this._targetRay === null ) {

  			this._targetRay = new Group();
  			this._targetRay.matrixAutoUpdate = false;
  			this._targetRay.visible = false;

  		}

  		return this._targetRay;

  	},

  	getGripSpace: function () {

  		if ( this._grip === null ) {

  			this._grip = new Group();
  			this._grip.matrixAutoUpdate = false;
  			this._grip.visible = false;

  		}

  		return this._grip;

  	},

  	dispatchEvent: function ( event ) {

  		if ( this._targetRay !== null ) {

  			this._targetRay.dispatchEvent( event );

  		}

  		if ( this._grip !== null ) {

  			this._grip.dispatchEvent( event );

  		}

  		return this;

  	},

  	disconnect: function ( inputSource ) {

  		this.dispatchEvent( { type: 'disconnected', data: inputSource } );

  		if ( this._targetRay !== null ) {

  			this._targetRay.visible = false;

  		}

  		if ( this._grip !== null ) {

  			this._grip.visible = false;

  		}

  		return this;

  	},

  	update: function ( inputSource, frame, referenceSpace ) {

  		var inputPose = null;
  		var gripPose = null;

  		var targetRay = this._targetRay;
  		var grip = this._grip;

  		if ( inputSource ) {

  			if ( targetRay !== null ) {

  				inputPose = frame.getPose( inputSource.targetRaySpace, referenceSpace );

  				if ( inputPose !== null ) {

  					targetRay.matrix.fromArray( inputPose.transform.matrix );
  					targetRay.matrix.decompose( targetRay.position, targetRay.rotation, targetRay.scale );

  				}

  			}

  			if ( grip !== null && inputSource.gripSpace ) {

  				gripPose = frame.getPose( inputSource.gripSpace, referenceSpace );

  				if ( gripPose !== null ) {

  					grip.matrix.fromArray( gripPose.transform.matrix );
  					grip.matrix.decompose( grip.position, grip.rotation, grip.scale );

  				}

  			}

  		}

  		if ( targetRay !== null ) {

  			targetRay.visible = ( inputPose !== null );

  		}

  		if ( grip !== null ) {

  			grip.visible = ( gripPose !== null );

  		}

  		return this;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function WebXRManager( renderer, gl ) {

  	var scope = this;

  	var session = null;

  	var framebufferScaleFactor = 1.0;

  	var referenceSpace = null;
  	var referenceSpaceType = 'local-floor';

  	var pose = null;

  	var controllers = [];
  	var inputSourcesMap = new Map();

  	//

  	var cameraL = new PerspectiveCamera();
  	cameraL.layers.enable( 1 );
  	cameraL.viewport = new Vector4();

  	var cameraR = new PerspectiveCamera();
  	cameraR.layers.enable( 2 );
  	cameraR.viewport = new Vector4();

  	var cameras = [ cameraL, cameraR ];

  	var cameraVR = new ArrayCamera();
  	cameraVR.layers.enable( 1 );
  	cameraVR.layers.enable( 2 );

  	var _currentDepthNear = null;
  	var _currentDepthFar = null;

  	//

  	this.enabled = false;

  	this.isPresenting = false;

  	this.getController = function ( index ) {

  		var controller = controllers[ index ];

  		if ( controller === undefined ) {

  			controller = new WebXRController();
  			controllers[ index ] = controller;

  		}

  		return controller.getTargetRaySpace();

  	};

  	this.getControllerGrip = function ( index ) {

  		var controller = controllers[ index ];

  		if ( controller === undefined ) {

  			controller = new WebXRController();
  			controllers[ index ] = controller;

  		}

  		return controller.getGripSpace();

  	};

  	//

  	function onSessionEvent( event ) {

  		var controller = inputSourcesMap.get( event.inputSource );

  		if ( controller ) {

  			controller.dispatchEvent( { type: event.type } );

  		}

  	}

  	function onSessionEnd() {

  		inputSourcesMap.forEach( function ( controller, inputSource ) {

  			controller.disconnect( inputSource );

  		} );

  		inputSourcesMap.clear();

  		//

  		renderer.setFramebuffer( null );
  		renderer.setRenderTarget( renderer.getRenderTarget() ); // Hack #15830
  		animation.stop();

  		scope.isPresenting = false;

  		scope.dispatchEvent( { type: 'sessionend' } );

  	}

  	function onRequestReferenceSpace( value ) {

  		referenceSpace = value;

  		animation.setContext( session );
  		animation.start();

  		scope.isPresenting = true;

  		scope.dispatchEvent( { type: 'sessionstart' } );

  	}

  	this.setFramebufferScaleFactor = function ( value ) {

  		framebufferScaleFactor = value;

  		if ( scope.isPresenting === true ) {

  			console.warn( 'THREE.WebXRManager: Cannot change framebuffer scale while presenting.' );

  		}

  	};

  	this.setReferenceSpaceType = function ( value ) {

  		referenceSpaceType = value;

  		if ( scope.isPresenting === true ) {

  			console.warn( 'THREE.WebXRManager: Cannot change reference space type while presenting.' );

  		}

  	};

  	this.getReferenceSpace = function () {

  		return referenceSpace;

  	};

  	this.getSession = function () {

  		return session;

  	};

  	this.setSession = function ( value ) {

  		session = value;

  		if ( session !== null ) {

  			session.addEventListener( 'select', onSessionEvent );
  			session.addEventListener( 'selectstart', onSessionEvent );
  			session.addEventListener( 'selectend', onSessionEvent );
  			session.addEventListener( 'squeeze', onSessionEvent );
  			session.addEventListener( 'squeezestart', onSessionEvent );
  			session.addEventListener( 'squeezeend', onSessionEvent );
  			session.addEventListener( 'end', onSessionEnd );

  			var attributes = gl.getContextAttributes();

  			if ( attributes.xrCompatible !== true ) {

  				gl.makeXRCompatible();

  			}

  			var layerInit = {
  				antialias: attributes.antialias,
  				alpha: attributes.alpha,
  				depth: attributes.depth,
  				stencil: attributes.stencil,
  				framebufferScaleFactor: framebufferScaleFactor
  			};

  			// eslint-disable-next-line no-undef
  			var baseLayer = new XRWebGLLayer( session, gl, layerInit );

  			session.updateRenderState( { baseLayer: baseLayer } );

  			session.requestReferenceSpace( referenceSpaceType ).then( onRequestReferenceSpace );

  			//

  			session.addEventListener( 'inputsourceschange', updateInputSources );

  		}

  	};

  	function updateInputSources( event ) {

  		var inputSources = session.inputSources;

  		// Assign inputSources to available controllers

  		for ( var i = 0; i < controllers.length; i ++ ) {

  			inputSourcesMap.set( inputSources[ i ], controllers[ i ] );

  		}

  		// Notify disconnected

  		for ( var i$1 = 0; i$1 < event.removed.length; i$1 ++ ) {

  			var inputSource = event.removed[ i$1 ];
  			var controller = inputSourcesMap.get( inputSource );

  			if ( controller ) {

  				controller.dispatchEvent( { type: 'disconnected', data: inputSource } );
  				inputSourcesMap.delete( inputSource );

  			}

  		}

  		// Notify connected

  		for ( var i$2 = 0; i$2 < event.added.length; i$2 ++ ) {

  			var inputSource$1 = event.added[ i$2 ];
  			var controller$1 = inputSourcesMap.get( inputSource$1 );

  			if ( controller$1 ) {

  				controller$1.dispatchEvent( { type: 'connected', data: inputSource$1 } );

  			}

  		}

  	}

  	//

  	var cameraLPos = new Vector3();
  	var cameraRPos = new Vector3();

  	/**
  	 * @author jsantell / https://www.jsantell.com/
  	 *
  	 * Assumes 2 cameras that are parallel and share an X-axis, and that
  	 * the cameras' projection and world matrices have already been set.
  	 * And that near and far planes are identical for both cameras.
  	 * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765
  	 */
  	function setProjectionFromUnion( camera, cameraL, cameraR ) {

  		cameraLPos.setFromMatrixPosition( cameraL.matrixWorld );
  		cameraRPos.setFromMatrixPosition( cameraR.matrixWorld );

  		var ipd = cameraLPos.distanceTo( cameraRPos );

  		var projL = cameraL.projectionMatrix.elements;
  		var projR = cameraR.projectionMatrix.elements;

  		// VR systems will have identical far and near planes, and
  		// most likely identical top and bottom frustum extents.
  		// Use the left camera for these values.
  		var near = projL[ 14 ] / ( projL[ 10 ] - 1 );
  		var far = projL[ 14 ] / ( projL[ 10 ] + 1 );
  		var topFov = ( projL[ 9 ] + 1 ) / projL[ 5 ];
  		var bottomFov = ( projL[ 9 ] - 1 ) / projL[ 5 ];

  		var leftFov = ( projL[ 8 ] - 1 ) / projL[ 0 ];
  		var rightFov = ( projR[ 8 ] + 1 ) / projR[ 0 ];
  		var left = near * leftFov;
  		var right = near * rightFov;

  		// Calculate the new camera's position offset from the
  		// left camera. xOffset should be roughly half `ipd`.
  		var zOffset = ipd / ( - leftFov + rightFov );
  		var xOffset = zOffset * - leftFov;

  		// TODO: Better way to apply this offset?
  		cameraL.matrixWorld.decompose( camera.position, camera.quaternion, camera.scale );
  		camera.translateX( xOffset );
  		camera.translateZ( zOffset );
  		camera.matrixWorld.compose( camera.position, camera.quaternion, camera.scale );
  		camera.matrixWorldInverse.getInverse( camera.matrixWorld );

  		// Find the union of the frustum values of the cameras and scale
  		// the values so that the near plane's position does not change in world space,
  		// although must now be relative to the new union camera.
  		var near2 = near + zOffset;
  		var far2 = far + zOffset;
  		var left2 = left - xOffset;
  		var right2 = right + ( ipd - xOffset );
  		var top2 = topFov * far / far2 * near2;
  		var bottom2 = bottomFov * far / far2 * near2;

  		camera.projectionMatrix.makePerspective( left2, right2, top2, bottom2, near2, far2 );

  	}

  	function updateCamera( camera, parent ) {

  		if ( parent === null ) {

  			camera.matrixWorld.copy( camera.matrix );

  		} else {

  			camera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );

  		}

  		camera.matrixWorldInverse.getInverse( camera.matrixWorld );

  	}

  	this.getCamera = function ( camera ) {

  		cameraVR.near = cameraR.near = cameraL.near = camera.near;
  		cameraVR.far = cameraR.far = cameraL.far = camera.far;

  		if ( _currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far ) {

  			// Note that the new renderState won't apply until the next frame. See #18320

  			session.updateRenderState( {
  				depthNear: cameraVR.near,
  				depthFar: cameraVR.far
  			} );

  			_currentDepthNear = cameraVR.near;
  			_currentDepthFar = cameraVR.far;

  		}

  		var parent = camera.parent;
  		var cameras = cameraVR.cameras;

  		updateCamera( cameraVR, parent );

  		for ( var i = 0; i < cameras.length; i ++ ) {

  			updateCamera( cameras[ i ], parent );

  		}

  		// update camera and its children

  		camera.matrixWorld.copy( cameraVR.matrixWorld );

  		var children = camera.children;

  		for ( var i$1 = 0, l = children.length; i$1 < l; i$1 ++ ) {

  			children[ i$1 ].updateMatrixWorld( true );

  		}

  		// update projection matrix for proper view frustum culling

  		if ( cameras.length === 2 ) {

  			setProjectionFromUnion( cameraVR, cameraL, cameraR );

  		} else {

  			// assume single camera setup (AR)

  			cameraVR.projectionMatrix.copy( cameraL.projectionMatrix );

  		}

  		return cameraVR;

  	};

  	// Animation Loop

  	var onAnimationFrameCallback = null;

  	function onAnimationFrame( time, frame ) {

  		pose = frame.getViewerPose( referenceSpace );

  		if ( pose !== null ) {

  			var views = pose.views;
  			var baseLayer = session.renderState.baseLayer;

  			renderer.setFramebuffer( baseLayer.framebuffer );

  			var cameraVRNeedsUpdate = false;

  			// check if it's necessary to rebuild cameraVR's camera list

  			if ( views.length !== cameraVR.cameras.length ) {

  				cameraVR.cameras.length = 0;
  				cameraVRNeedsUpdate = true;

  			}

  			for ( var i = 0; i < views.length; i ++ ) {

  				var view = views[ i ];
  				var viewport = baseLayer.getViewport( view );

  				var camera = cameras[ i ];
  				camera.matrix.fromArray( view.transform.matrix );
  				camera.projectionMatrix.fromArray( view.projectionMatrix );
  				camera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );

  				if ( i === 0 ) {

  					cameraVR.matrix.copy( camera.matrix );

  				}

  				if ( cameraVRNeedsUpdate === true ) {

  					cameraVR.cameras.push( camera );

  				}

  			}

  		}

  		//

  		var inputSources = session.inputSources;

  		for ( var i$1 = 0; i$1 < controllers.length; i$1 ++ ) {

  			var controller = controllers[ i$1 ];
  			var inputSource = inputSources[ i$1 ];

  			controller.update( inputSource, frame, referenceSpace );

  		}

  		if ( onAnimationFrameCallback ) { onAnimationFrameCallback( time, frame ); }

  	}

  	var animation = new WebGLAnimation();
  	animation.setAnimationLoop( onAnimationFrame );

  	this.setAnimationLoop = function ( callback ) {

  		onAnimationFrameCallback = callback;

  	};

  	this.dispose = function () {};

  }

  Object.assign( WebXRManager.prototype, EventDispatcher.prototype );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function WebGLMaterials( properties ) {

  	function refreshFogUniforms( uniforms, fog ) {

  		uniforms.fogColor.value.copy( fog.color );

  		if ( fog.isFog ) {

  			uniforms.fogNear.value = fog.near;
  			uniforms.fogFar.value = fog.far;

  		} else if ( fog.isFogExp2 ) {

  			uniforms.fogDensity.value = fog.density;

  		}

  	}

  	function refreshMaterialUniforms( uniforms, material, environment, pixelRatio, height ) {

  		if ( material.isMeshBasicMaterial ) {

  			refreshUniformsCommon( uniforms, material );

  		} else if ( material.isMeshLambertMaterial ) {

  			refreshUniformsCommon( uniforms, material );
  			refreshUniformsLambert( uniforms, material );

  		} else if ( material.isMeshToonMaterial ) {

  			refreshUniformsCommon( uniforms, material );
  			refreshUniformsToon( uniforms, material );

  		} else if ( material.isMeshPhongMaterial ) {

  			refreshUniformsCommon( uniforms, material );
  			refreshUniformsPhong( uniforms, material );

  		} else if ( material.isMeshStandardMaterial ) {

  			refreshUniformsCommon( uniforms, material, environment );

  			if ( material.isMeshPhysicalMaterial ) {

  				refreshUniformsPhysical( uniforms, material, environment );

  			} else {

  				refreshUniformsStandard( uniforms, material, environment );

  			}

  		} else if ( material.isMeshMatcapMaterial ) {

  			refreshUniformsCommon( uniforms, material );
  			refreshUniformsMatcap( uniforms, material );

  		} else if ( material.isMeshDepthMaterial ) {

  			refreshUniformsCommon( uniforms, material );
  			refreshUniformsDepth( uniforms, material );

  		} else if ( material.isMeshDistanceMaterial ) {

  			refreshUniformsCommon( uniforms, material );
  			refreshUniformsDistance( uniforms, material );

  		} else if ( material.isMeshNormalMaterial ) {

  			refreshUniformsCommon( uniforms, material );
  			refreshUniformsNormal( uniforms, material );

  		} else if ( material.isLineBasicMaterial ) {

  			refreshUniformsLine( uniforms, material );

  			if ( material.isLineDashedMaterial ) {

  				refreshUniformsDash( uniforms, material );

  			}

  		} else if ( material.isPointsMaterial ) {

  			refreshUniformsPoints( uniforms, material, pixelRatio, height );

  		} else if ( material.isSpriteMaterial ) {

  			refreshUniformsSprites( uniforms, material );

  		} else if ( material.isShadowMaterial ) {

  			uniforms.color.value.copy( material.color );
  			uniforms.opacity.value = material.opacity;

  		} else if ( material.isShaderMaterial ) {

  			material.uniformsNeedUpdate = false; // #15581

  		}

  	}

  	function refreshUniformsCommon( uniforms, material, environment ) {

  		uniforms.opacity.value = material.opacity;

  		if ( material.color ) {

  			uniforms.diffuse.value.copy( material.color );

  		}

  		if ( material.emissive ) {

  			uniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );

  		}

  		if ( material.map ) {

  			uniforms.map.value = material.map;

  		}

  		if ( material.alphaMap ) {

  			uniforms.alphaMap.value = material.alphaMap;

  		}

  		if ( material.specularMap ) {

  			uniforms.specularMap.value = material.specularMap;

  		}

  		var envMap = material.envMap || environment;

  		if ( envMap ) {

  			uniforms.envMap.value = envMap;

  			uniforms.flipEnvMap.value = envMap.isCubeTexture ? - 1 : 1;

  			uniforms.reflectivity.value = material.reflectivity;
  			uniforms.refractionRatio.value = material.refractionRatio;

  			uniforms.maxMipLevel.value = properties.get( envMap ).__maxMipLevel;

  		}

  		if ( material.lightMap ) {

  			uniforms.lightMap.value = material.lightMap;
  			uniforms.lightMapIntensity.value = material.lightMapIntensity;

  		}

  		if ( material.aoMap ) {

  			uniforms.aoMap.value = material.aoMap;
  			uniforms.aoMapIntensity.value = material.aoMapIntensity;

  		}

  		// uv repeat and offset setting priorities
  		// 1. color map
  		// 2. specular map
  		// 3. normal map
  		// 4. bump map
  		// 5. alpha map
  		// 6. emissive map

  		var uvScaleMap;

  		if ( material.map ) {

  			uvScaleMap = material.map;

  		} else if ( material.specularMap ) {

  			uvScaleMap = material.specularMap;

  		} else if ( material.displacementMap ) {

  			uvScaleMap = material.displacementMap;

  		} else if ( material.normalMap ) {

  			uvScaleMap = material.normalMap;

  		} else if ( material.bumpMap ) {

  			uvScaleMap = material.bumpMap;

  		} else if ( material.roughnessMap ) {

  			uvScaleMap = material.roughnessMap;

  		} else if ( material.metalnessMap ) {

  			uvScaleMap = material.metalnessMap;

  		} else if ( material.alphaMap ) {

  			uvScaleMap = material.alphaMap;

  		} else if ( material.emissiveMap ) {

  			uvScaleMap = material.emissiveMap;

  		}

  		if ( uvScaleMap !== undefined ) {

  			// backwards compatibility
  			if ( uvScaleMap.isWebGLRenderTarget ) {

  				uvScaleMap = uvScaleMap.texture;

  			}

  			if ( uvScaleMap.matrixAutoUpdate === true ) {

  				uvScaleMap.updateMatrix();

  			}

  			uniforms.uvTransform.value.copy( uvScaleMap.matrix );

  		}

  		// uv repeat and offset setting priorities for uv2
  		// 1. ao map
  		// 2. light map

  		var uv2ScaleMap;

  		if ( material.aoMap ) {

  			uv2ScaleMap = material.aoMap;

  		} else if ( material.lightMap ) {

  			uv2ScaleMap = material.lightMap;

  		}

  		if ( uv2ScaleMap !== undefined ) {

  			// backwards compatibility
  			if ( uv2ScaleMap.isWebGLRenderTarget ) {

  				uv2ScaleMap = uv2ScaleMap.texture;

  			}

  			if ( uv2ScaleMap.matrixAutoUpdate === true ) {

  				uv2ScaleMap.updateMatrix();

  			}

  			uniforms.uv2Transform.value.copy( uv2ScaleMap.matrix );

  		}

  	}

  	function refreshUniformsLine( uniforms, material ) {

  		uniforms.diffuse.value.copy( material.color );
  		uniforms.opacity.value = material.opacity;

  	}

  	function refreshUniformsDash( uniforms, material ) {

  		uniforms.dashSize.value = material.dashSize;
  		uniforms.totalSize.value = material.dashSize + material.gapSize;
  		uniforms.scale.value = material.scale;

  	}

  	function refreshUniformsPoints( uniforms, material, pixelRatio, height ) {

  		uniforms.diffuse.value.copy( material.color );
  		uniforms.opacity.value = material.opacity;
  		uniforms.size.value = material.size * pixelRatio;
  		uniforms.scale.value = height * 0.5;

  		if ( material.map ) {

  			uniforms.map.value = material.map;

  		}

  		if ( material.alphaMap ) {

  			uniforms.alphaMap.value = material.alphaMap;

  		}

  		// uv repeat and offset setting priorities
  		// 1. color map
  		// 2. alpha map

  		var uvScaleMap;

  		if ( material.map ) {

  			uvScaleMap = material.map;

  		} else if ( material.alphaMap ) {

  			uvScaleMap = material.alphaMap;

  		}

  		if ( uvScaleMap !== undefined ) {

  			if ( uvScaleMap.matrixAutoUpdate === true ) {

  				uvScaleMap.updateMatrix();

  			}

  			uniforms.uvTransform.value.copy( uvScaleMap.matrix );

  		}

  	}

  	function refreshUniformsSprites( uniforms, material ) {

  		uniforms.diffuse.value.copy( material.color );
  		uniforms.opacity.value = material.opacity;
  		uniforms.rotation.value = material.rotation;

  		if ( material.map ) {

  			uniforms.map.value = material.map;

  		}

  		if ( material.alphaMap ) {

  			uniforms.alphaMap.value = material.alphaMap;

  		}

  		// uv repeat and offset setting priorities
  		// 1. color map
  		// 2. alpha map

  		var uvScaleMap;

  		if ( material.map ) {

  			uvScaleMap = material.map;

  		} else if ( material.alphaMap ) {

  			uvScaleMap = material.alphaMap;

  		}

  		if ( uvScaleMap !== undefined ) {

  			if ( uvScaleMap.matrixAutoUpdate === true ) {

  				uvScaleMap.updateMatrix();

  			}

  			uniforms.uvTransform.value.copy( uvScaleMap.matrix );

  		}

  	}

  	function refreshUniformsLambert( uniforms, material ) {

  		if ( material.emissiveMap ) {

  			uniforms.emissiveMap.value = material.emissiveMap;

  		}

  	}

  	function refreshUniformsPhong( uniforms, material ) {

  		uniforms.specular.value.copy( material.specular );
  		uniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )

  		if ( material.emissiveMap ) {

  			uniforms.emissiveMap.value = material.emissiveMap;

  		}

  		if ( material.bumpMap ) {

  			uniforms.bumpMap.value = material.bumpMap;
  			uniforms.bumpScale.value = material.bumpScale;
  			if ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }

  		}

  		if ( material.normalMap ) {

  			uniforms.normalMap.value = material.normalMap;
  			uniforms.normalScale.value.copy( material.normalScale );
  			if ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }

  		}

  		if ( material.displacementMap ) {

  			uniforms.displacementMap.value = material.displacementMap;
  			uniforms.displacementScale.value = material.displacementScale;
  			uniforms.displacementBias.value = material.displacementBias;

  		}

  	}

  	function refreshUniformsToon( uniforms, material ) {

  		if ( material.gradientMap ) {

  			uniforms.gradientMap.value = material.gradientMap;

  		}

  		if ( material.emissiveMap ) {

  			uniforms.emissiveMap.value = material.emissiveMap;

  		}

  		if ( material.bumpMap ) {

  			uniforms.bumpMap.value = material.bumpMap;
  			uniforms.bumpScale.value = material.bumpScale;
  			if ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }

  		}

  		if ( material.normalMap ) {

  			uniforms.normalMap.value = material.normalMap;
  			uniforms.normalScale.value.copy( material.normalScale );
  			if ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }

  		}

  		if ( material.displacementMap ) {

  			uniforms.displacementMap.value = material.displacementMap;
  			uniforms.displacementScale.value = material.displacementScale;
  			uniforms.displacementBias.value = material.displacementBias;

  		}

  	}

  	function refreshUniformsStandard( uniforms, material, environment ) {

  		uniforms.roughness.value = material.roughness;
  		uniforms.metalness.value = material.metalness;

  		if ( material.roughnessMap ) {

  			uniforms.roughnessMap.value = material.roughnessMap;

  		}

  		if ( material.metalnessMap ) {

  			uniforms.metalnessMap.value = material.metalnessMap;

  		}

  		if ( material.emissiveMap ) {

  			uniforms.emissiveMap.value = material.emissiveMap;

  		}

  		if ( material.bumpMap ) {

  			uniforms.bumpMap.value = material.bumpMap;
  			uniforms.bumpScale.value = material.bumpScale;
  			if ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }

  		}

  		if ( material.normalMap ) {

  			uniforms.normalMap.value = material.normalMap;
  			uniforms.normalScale.value.copy( material.normalScale );
  			if ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }

  		}

  		if ( material.displacementMap ) {

  			uniforms.displacementMap.value = material.displacementMap;
  			uniforms.displacementScale.value = material.displacementScale;
  			uniforms.displacementBias.value = material.displacementBias;

  		}

  		if ( material.envMap || environment ) {

  			//uniforms.envMap.value = material.envMap; // part of uniforms common
  			uniforms.envMapIntensity.value = material.envMapIntensity;

  		}

  	}

  	function refreshUniformsPhysical( uniforms, material, environment ) {

  		refreshUniformsStandard( uniforms, material, environment );

  		uniforms.reflectivity.value = material.reflectivity; // also part of uniforms common

  		uniforms.clearcoat.value = material.clearcoat;
  		uniforms.clearcoatRoughness.value = material.clearcoatRoughness;
  		if ( material.sheen ) { uniforms.sheen.value.copy( material.sheen ); }

  		if ( material.clearcoatMap ) {

  			uniforms.clearcoatMap.value = material.clearcoatMap;

  		}

  		if ( material.clearcoatRoughnessMap ) {

  			uniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;

  		}

  		if ( material.clearcoatNormalMap ) {

  			uniforms.clearcoatNormalScale.value.copy( material.clearcoatNormalScale );
  			uniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;

  			if ( material.side === BackSide ) {

  				uniforms.clearcoatNormalScale.value.negate();

  			}

  		}

  		uniforms.transparency.value = material.transparency;

  	}

  	function refreshUniformsMatcap( uniforms, material ) {

  		if ( material.matcap ) {

  			uniforms.matcap.value = material.matcap;

  		}

  		if ( material.bumpMap ) {

  			uniforms.bumpMap.value = material.bumpMap;
  			uniforms.bumpScale.value = material.bumpScale;
  			if ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }

  		}

  		if ( material.normalMap ) {

  			uniforms.normalMap.value = material.normalMap;
  			uniforms.normalScale.value.copy( material.normalScale );
  			if ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }

  		}

  		if ( material.displacementMap ) {

  			uniforms.displacementMap.value = material.displacementMap;
  			uniforms.displacementScale.value = material.displacementScale;
  			uniforms.displacementBias.value = material.displacementBias;

  		}

  	}

  	function refreshUniformsDepth( uniforms, material ) {

  		if ( material.displacementMap ) {

  			uniforms.displacementMap.value = material.displacementMap;
  			uniforms.displacementScale.value = material.displacementScale;
  			uniforms.displacementBias.value = material.displacementBias;

  		}

  	}

  	function refreshUniformsDistance( uniforms, material ) {

  		if ( material.displacementMap ) {

  			uniforms.displacementMap.value = material.displacementMap;
  			uniforms.displacementScale.value = material.displacementScale;
  			uniforms.displacementBias.value = material.displacementBias;

  		}

  		uniforms.referencePosition.value.copy( material.referencePosition );
  		uniforms.nearDistance.value = material.nearDistance;
  		uniforms.farDistance.value = material.farDistance;

  	}

  	function refreshUniformsNormal( uniforms, material ) {

  		if ( material.bumpMap ) {

  			uniforms.bumpMap.value = material.bumpMap;
  			uniforms.bumpScale.value = material.bumpScale;
  			if ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }

  		}

  		if ( material.normalMap ) {

  			uniforms.normalMap.value = material.normalMap;
  			uniforms.normalScale.value.copy( material.normalScale );
  			if ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }

  		}

  		if ( material.displacementMap ) {

  			uniforms.displacementMap.value = material.displacementMap;
  			uniforms.displacementScale.value = material.displacementScale;
  			uniforms.displacementBias.value = material.displacementBias;

  		}

  	}

  	return {
  		refreshFogUniforms: refreshFogUniforms,
  		refreshMaterialUniforms: refreshMaterialUniforms
  	};

  }

  /**
   * @author supereggbert / http://www.paulbrunt.co.uk/
   * @author mrdoob / http://mrdoob.com/
   * @author alteredq / http://alteredqualia.com/
   * @author szimek / https://github.com/szimek/
   * @author tschw
   */

  function WebGLRenderer( parameters ) {

  	parameters = parameters || {};

  	var _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),
  		_context = parameters.context !== undefined ? parameters.context : null,

  		_alpha = parameters.alpha !== undefined ? parameters.alpha : false,
  		_depth = parameters.depth !== undefined ? parameters.depth : true,
  		_stencil = parameters.stencil !== undefined ? parameters.stencil : true,
  		_antialias = parameters.antialias !== undefined ? parameters.antialias : false,
  		_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,
  		_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,
  		_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',
  		_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;

  	var currentRenderList = null;
  	var currentRenderState = null;

  	// public properties

  	this.domElement = _canvas;

  	// Debug configuration container
  	this.debug = {

  		/**
  		 * Enables error checking and reporting when shader programs are being compiled
  		 * @type {boolean}
  		 */
  		checkShaderErrors: true
  	};

  	// clearing

  	this.autoClear = true;
  	this.autoClearColor = true;
  	this.autoClearDepth = true;
  	this.autoClearStencil = true;

  	// scene graph

  	this.sortObjects = true;

  	// user-defined clipping

  	this.clippingPlanes = [];
  	this.localClippingEnabled = false;

  	// physically based shading

  	this.gammaFactor = 2.0;	// for backwards compatibility
  	this.outputEncoding = LinearEncoding;

  	// physical lights

  	this.physicallyCorrectLights = false;

  	// tone mapping

  	this.toneMapping = NoToneMapping;
  	this.toneMappingExposure = 1.0;

  	// morphs

  	this.maxMorphTargets = 8;
  	this.maxMorphNormals = 4;

  	// internal properties

  	var _this = this;

  	var _isContextLost = false;

  	// internal state cache

  	var _framebuffer = null;

  	var _currentActiveCubeFace = 0;
  	var _currentActiveMipmapLevel = 0;
  	var _currentRenderTarget = null;
  	var _currentFramebuffer = null;
  	var _currentMaterialId = - 1;

  	var _currentCamera = null;
  	var _currentArrayCamera = null;

  	var _currentViewport = new Vector4();
  	var _currentScissor = new Vector4();
  	var _currentScissorTest = null;

  	//

  	var _width = _canvas.width;
  	var _height = _canvas.height;

  	var _pixelRatio = 1;
  	var _opaqueSort = null;
  	var _transparentSort = null;

  	var _viewport = new Vector4( 0, 0, _width, _height );
  	var _scissor = new Vector4( 0, 0, _width, _height );
  	var _scissorTest = false;

  	// frustum

  	var _frustum = new Frustum();

  	// clipping

  	var _clipping = new WebGLClipping();
  	var _clippingEnabled = false;
  	var _localClippingEnabled = false;

  	// camera matrices cache

  	var _projScreenMatrix = new Matrix4();

  	var _vector3 = new Vector3();

  	var _emptyScene = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: true };

  	function getTargetPixelRatio() {

  		return _currentRenderTarget === null ? _pixelRatio : 1;

  	}

  	// initialize

  	var _gl = _context;

  	function getContext( contextNames, contextAttributes ) {

  		for ( var i = 0; i < contextNames.length; i ++ ) {

  			var contextName = contextNames[ i ];
  			var context = _canvas.getContext( contextName, contextAttributes );
  			if ( context !== null ) { return context; }

  		}

  		return null;

  	}

  	try {

  		var contextAttributes = {
  			alpha: _alpha,
  			depth: _depth,
  			stencil: _stencil,
  			antialias: _antialias,
  			premultipliedAlpha: _premultipliedAlpha,
  			preserveDrawingBuffer: _preserveDrawingBuffer,
  			powerPreference: _powerPreference,
  			failIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat
  		};

  		// event listeners must be registered before WebGL context is created, see #12753

  		_canvas.addEventListener( 'webglcontextlost', onContextLost, false );
  		_canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );

  		if ( _gl === null ) {

  			var contextNames = [ 'webgl2', 'webgl', 'experimental-webgl' ];

  			if ( _this.isWebGL1Renderer === true ) {

  				contextNames.shift();

  			}

  			_gl = getContext( contextNames, contextAttributes );

  			if ( _gl === null ) {

  				if ( getContext( contextNames ) ) {

  					throw new Error( 'Error creating WebGL context with your selected attributes.' );

  				} else {

  					throw new Error( 'Error creating WebGL context.' );

  				}

  			}

  		}

  		// Some experimental-webgl implementations do not have getShaderPrecisionFormat

  		if ( _gl.getShaderPrecisionFormat === undefined ) {

  			_gl.getShaderPrecisionFormat = function () {

  				return { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };

  			};

  		}

  	} catch ( error ) {

  		console.error( 'THREE.WebGLRenderer: ' + error.message );
  		throw error;

  	}

  	var extensions, capabilities, state, info;
  	var properties, textures, attributes, geometries, objects;
  	var programCache, materials, renderLists, renderStates;

  	var background, morphtargets, bufferRenderer, indexedBufferRenderer;

  	var utils, bindingStates;

  	function initGLContext() {

  		extensions = new WebGLExtensions( _gl );

  		capabilities = new WebGLCapabilities( _gl, extensions, parameters );

  		if ( capabilities.isWebGL2 === false ) {

  			extensions.get( 'WEBGL_depth_texture' );
  			extensions.get( 'OES_texture_float' );
  			extensions.get( 'OES_texture_half_float' );
  			extensions.get( 'OES_texture_half_float_linear' );
  			extensions.get( 'OES_standard_derivatives' );
  			extensions.get( 'OES_element_index_uint' );
  			extensions.get( 'OES_vertex_array_object' );
  			extensions.get( 'ANGLE_instanced_arrays' );

  		}

  		extensions.get( 'OES_texture_float_linear' );

  		utils = new WebGLUtils( _gl, extensions, capabilities );

  		state = new WebGLState( _gl, extensions, capabilities );
  		state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );
  		state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );

  		info = new WebGLInfo( _gl );
  		properties = new WebGLProperties();
  		textures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );
  		attributes = new WebGLAttributes( _gl, capabilities );
  		bindingStates = new WebGLBindingStates( _gl, extensions, attributes, capabilities );
  		geometries = new WebGLGeometries( _gl, attributes, info, bindingStates );
  		objects = new WebGLObjects( _gl, geometries, attributes, info );
  		morphtargets = new WebGLMorphtargets( _gl );
  		programCache = new WebGLPrograms( _this, extensions, capabilities, bindingStates );
  		materials = new WebGLMaterials( properties );
  		renderLists = new WebGLRenderLists();
  		renderStates = new WebGLRenderStates();

  		background = new WebGLBackground( _this, state, objects, _premultipliedAlpha );

  		bufferRenderer = new WebGLBufferRenderer( _gl, extensions, info, capabilities );
  		indexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, info, capabilities );

  		info.programs = programCache.programs;

  		_this.capabilities = capabilities;
  		_this.extensions = extensions;
  		_this.properties = properties;
  		_this.renderLists = renderLists;
  		_this.state = state;
  		_this.info = info;

  	}

  	initGLContext();

  	// xr

  	var xr = new WebXRManager( _this, _gl );

  	this.xr = xr;

  	// shadow map

  	var shadowMap = new WebGLShadowMap( _this, objects, capabilities.maxTextureSize );

  	this.shadowMap = shadowMap;

  	// API

  	this.getContext = function () {

  		return _gl;

  	};

  	this.getContextAttributes = function () {

  		return _gl.getContextAttributes();

  	};

  	this.forceContextLoss = function () {

  		var extension = extensions.get( 'WEBGL_lose_context' );
  		if ( extension ) { extension.loseContext(); }

  	};

  	this.forceContextRestore = function () {

  		var extension = extensions.get( 'WEBGL_lose_context' );
  		if ( extension ) { extension.restoreContext(); }

  	};

  	this.getPixelRatio = function () {

  		return _pixelRatio;

  	};

  	this.setPixelRatio = function ( value ) {

  		if ( value === undefined ) { return; }

  		_pixelRatio = value;

  		this.setSize( _width, _height, false );

  	};

  	this.getSize = function ( target ) {

  		if ( target === undefined ) {

  			console.warn( 'WebGLRenderer: .getsize() now requires a Vector2 as an argument' );

  			target = new Vector2();

  		}

  		return target.set( _width, _height );

  	};

  	this.setSize = function ( width, height, updateStyle ) {

  		if ( xr.isPresenting ) {

  			console.warn( 'THREE.WebGLRenderer: Can\'t change size while VR device is presenting.' );
  			return;

  		}

  		_width = width;
  		_height = height;

  		_canvas.width = Math.floor( width * _pixelRatio );
  		_canvas.height = Math.floor( height * _pixelRatio );

  		if ( updateStyle !== false ) {

  			_canvas.style.width = width + 'px';
  			_canvas.style.height = height + 'px';

  		}

  		this.setViewport( 0, 0, width, height );

  	};

  	this.getDrawingBufferSize = function ( target ) {

  		if ( target === undefined ) {

  			console.warn( 'WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument' );

  			target = new Vector2();

  		}

  		return target.set( _width * _pixelRatio, _height * _pixelRatio ).floor();

  	};

  	this.setDrawingBufferSize = function ( width, height, pixelRatio ) {

  		_width = width;
  		_height = height;

  		_pixelRatio = pixelRatio;

  		_canvas.width = Math.floor( width * pixelRatio );
  		_canvas.height = Math.floor( height * pixelRatio );

  		this.setViewport( 0, 0, width, height );

  	};

  	this.getCurrentViewport = function ( target ) {

  		if ( target === undefined ) {

  			console.warn( 'WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument' );

  			target = new Vector4();

  		}

  		return target.copy( _currentViewport );

  	};

  	this.getViewport = function ( target ) {

  		return target.copy( _viewport );

  	};

  	this.setViewport = function ( x, y, width, height ) {

  		if ( x.isVector4 ) {

  			_viewport.set( x.x, x.y, x.z, x.w );

  		} else {

  			_viewport.set( x, y, width, height );

  		}

  		state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );

  	};

  	this.getScissor = function ( target ) {

  		return target.copy( _scissor );

  	};

  	this.setScissor = function ( x, y, width, height ) {

  		if ( x.isVector4 ) {

  			_scissor.set( x.x, x.y, x.z, x.w );

  		} else {

  			_scissor.set( x, y, width, height );

  		}

  		state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );

  	};

  	this.getScissorTest = function () {

  		return _scissorTest;

  	};

  	this.setScissorTest = function ( boolean ) {

  		state.setScissorTest( _scissorTest = boolean );

  	};

  	this.setOpaqueSort = function ( method ) {

  		_opaqueSort = method;

  	};

  	this.setTransparentSort = function ( method ) {

  		_transparentSort = method;

  	};

  	// Clearing

  	this.getClearColor = function () {

  		return background.getClearColor();

  	};

  	this.setClearColor = function () {

  		background.setClearColor.apply( background, arguments );

  	};

  	this.getClearAlpha = function () {

  		return background.getClearAlpha();

  	};

  	this.setClearAlpha = function () {

  		background.setClearAlpha.apply( background, arguments );

  	};

  	this.clear = function ( color, depth, stencil ) {

  		var bits = 0;

  		if ( color === undefined || color ) { bits |= 16384; }
  		if ( depth === undefined || depth ) { bits |= 256; }
  		if ( stencil === undefined || stencil ) { bits |= 1024; }

  		_gl.clear( bits );

  	};

  	this.clearColor = function () {

  		this.clear( true, false, false );

  	};

  	this.clearDepth = function () {

  		this.clear( false, true, false );

  	};

  	this.clearStencil = function () {

  		this.clear( false, false, true );

  	};

  	//

  	this.dispose = function () {

  		_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );
  		_canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );

  		renderLists.dispose();
  		renderStates.dispose();
  		properties.dispose();
  		objects.dispose();
  		bindingStates.dispose();

  		xr.dispose();

  		animation.stop();

  	};

  	// Events

  	function onContextLost( event ) {

  		event.preventDefault();

  		console.log( 'THREE.WebGLRenderer: Context Lost.' );

  		_isContextLost = true;

  	}

  	function onContextRestore( /* event */ ) {

  		console.log( 'THREE.WebGLRenderer: Context Restored.' );

  		_isContextLost = false;

  		initGLContext();

  	}

  	function onMaterialDispose( event ) {

  		var material = event.target;

  		material.removeEventListener( 'dispose', onMaterialDispose );

  		deallocateMaterial( material );

  	}

  	// Buffer deallocation

  	function deallocateMaterial( material ) {

  		releaseMaterialProgramReference( material );

  		properties.remove( material );

  	}


  	function releaseMaterialProgramReference( material ) {

  		var programInfo = properties.get( material ).program;

  		material.program = undefined;

  		if ( programInfo !== undefined ) {

  			programCache.releaseProgram( programInfo );

  		}

  	}

  	// Buffer rendering

  	function renderObjectImmediate( object, program ) {

  		object.render( function ( object ) {

  			_this.renderBufferImmediate( object, program );

  		} );

  	}

  	this.renderBufferImmediate = function ( object, program ) {

  		bindingStates.initAttributes();

  		var buffers = properties.get( object );

  		if ( object.hasPositions && ! buffers.position ) { buffers.position = _gl.createBuffer(); }
  		if ( object.hasNormals && ! buffers.normal ) { buffers.normal = _gl.createBuffer(); }
  		if ( object.hasUvs && ! buffers.uv ) { buffers.uv = _gl.createBuffer(); }
  		if ( object.hasColors && ! buffers.color ) { buffers.color = _gl.createBuffer(); }

  		var programAttributes = program.getAttributes();

  		if ( object.hasPositions ) {

  			_gl.bindBuffer( 34962, buffers.position );
  			_gl.bufferData( 34962, object.positionArray, 35048 );

  			bindingStates.enableAttribute( programAttributes.position );
  			_gl.vertexAttribPointer( programAttributes.position, 3, 5126, false, 0, 0 );

  		}

  		if ( object.hasNormals ) {

  			_gl.bindBuffer( 34962, buffers.normal );
  			_gl.bufferData( 34962, object.normalArray, 35048 );

  			bindingStates.enableAttribute( programAttributes.normal );
  			_gl.vertexAttribPointer( programAttributes.normal, 3, 5126, false, 0, 0 );

  		}

  		if ( object.hasUvs ) {

  			_gl.bindBuffer( 34962, buffers.uv );
  			_gl.bufferData( 34962, object.uvArray, 35048 );

  			bindingStates.enableAttribute( programAttributes.uv );
  			_gl.vertexAttribPointer( programAttributes.uv, 2, 5126, false, 0, 0 );

  		}

  		if ( object.hasColors ) {

  			_gl.bindBuffer( 34962, buffers.color );
  			_gl.bufferData( 34962, object.colorArray, 35048 );

  			bindingStates.enableAttribute( programAttributes.color );
  			_gl.vertexAttribPointer( programAttributes.color, 3, 5126, false, 0, 0 );

  		}

  		bindingStates.disableUnusedAttributes();

  		_gl.drawArrays( 4, 0, object.count );

  		object.count = 0;

  	};

  	this.renderBufferDirect = function ( camera, scene, geometry, material, object, group ) {

  		if ( scene === null ) { scene = _emptyScene; } // renderBufferDirect second parameter used to be fog (could be null)

  		var frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );

  		var program = setProgram( camera, scene, material, object );

  		state.setMaterial( material, frontFaceCW );

  		//

  		var index = geometry.index;
  		var position = geometry.attributes.position;

  		//

  		if ( index === null ) {

  			if ( position === undefined || position.count === 0 ) { return; }

  		} else if ( index.count === 0 ) {

  			return;

  		}

  		//

  		var rangeFactor = 1;

  		if ( material.wireframe === true ) {

  			index = geometries.getWireframeAttribute( geometry );
  			rangeFactor = 2;

  		}

  		if ( material.morphTargets || material.morphNormals ) {

  			morphtargets.update( object, geometry, material, program );

  		}

  		bindingStates.setup( object, material, program, geometry, index );

  		var attribute;
  		var renderer = bufferRenderer;

  		if ( index !== null ) {

  			attribute = attributes.get( index );

  			renderer = indexedBufferRenderer;
  			renderer.setIndex( attribute );

  		}

  		//

  		var dataCount = ( index !== null ) ? index.count : position.count;

  		var rangeStart = geometry.drawRange.start * rangeFactor;
  		var rangeCount = geometry.drawRange.count * rangeFactor;

  		var groupStart = group !== null ? group.start * rangeFactor : 0;
  		var groupCount = group !== null ? group.count * rangeFactor : Infinity;

  		var drawStart = Math.max( rangeStart, groupStart );
  		var drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;

  		var drawCount = Math.max( 0, drawEnd - drawStart + 1 );

  		if ( drawCount === 0 ) { return; }

  		//

  		if ( object.isMesh ) {

  			if ( material.wireframe === true ) {

  				state.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );
  				renderer.setMode( 1 );

  			} else {

  				renderer.setMode( 4 );

  			}

  		} else if ( object.isLine ) {

  			var lineWidth = material.linewidth;

  			if ( lineWidth === undefined ) { lineWidth = 1; } // Not using Line*Material

  			state.setLineWidth( lineWidth * getTargetPixelRatio() );

  			if ( object.isLineSegments ) {

  				renderer.setMode( 1 );

  			} else if ( object.isLineLoop ) {

  				renderer.setMode( 2 );

  			} else {

  				renderer.setMode( 3 );

  			}

  		} else if ( object.isPoints ) {

  			renderer.setMode( 0 );

  		} else if ( object.isSprite ) {

  			renderer.setMode( 4 );

  		}

  		if ( object.isInstancedMesh ) {

  			renderer.renderInstances( geometry, drawStart, drawCount, object.count );

  		} else if ( geometry.isInstancedBufferGeometry ) {

  			var instanceCount = Math.min( geometry.instanceCount, geometry._maxInstanceCount );

  			renderer.renderInstances( geometry, drawStart, drawCount, instanceCount );

  		} else {

  			renderer.render( drawStart, drawCount );

  		}

  	};

  	// Compile

  	this.compile = function ( scene, camera ) {

  		currentRenderState = renderStates.get( scene, camera );
  		currentRenderState.init();

  		scene.traverse( function ( object ) {

  			if ( object.isLight ) {

  				currentRenderState.pushLight( object );

  				if ( object.castShadow ) {

  					currentRenderState.pushShadow( object );

  				}

  			}

  		} );

  		currentRenderState.setupLights( camera );

  		var compiled = new WeakMap();

  		scene.traverse( function ( object ) {

  			var material = object.material;

  			if ( material ) {

  				if ( Array.isArray( material ) ) {

  					for ( var i = 0; i < material.length; i ++ ) {

  						var material2 = material[ i ];

  						if ( compiled.has( material2 ) === false ) {

  							initMaterial( material2, scene, object );
  							compiled.set( material2 );

  						}

  					}

  				} else if ( compiled.has( material ) === false ) {

  					initMaterial( material, scene, object );
  					compiled.set( material );

  				}

  			}

  		} );

  	};

  	// Animation Loop

  	var onAnimationFrameCallback = null;

  	function onAnimationFrame( time ) {

  		if ( xr.isPresenting ) { return; }
  		if ( onAnimationFrameCallback ) { onAnimationFrameCallback( time ); }

  	}

  	var animation = new WebGLAnimation();
  	animation.setAnimationLoop( onAnimationFrame );

  	if ( typeof window !== 'undefined' ) { animation.setContext( window ); }

  	this.setAnimationLoop = function ( callback ) {

  		onAnimationFrameCallback = callback;
  		xr.setAnimationLoop( callback );

  		( callback === null ) ? animation.stop() : animation.start();

  	};

  	// Rendering

  	this.render = function ( scene, camera ) {

  		var renderTarget, forceClear;

  		if ( arguments[ 2 ] !== undefined ) {

  			console.warn( 'THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.' );
  			renderTarget = arguments[ 2 ];

  		}

  		if ( arguments[ 3 ] !== undefined ) {

  			console.warn( 'THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead.' );
  			forceClear = arguments[ 3 ];

  		}

  		if ( camera !== undefined && camera.isCamera !== true ) {

  			console.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );
  			return;

  		}

  		if ( _isContextLost === true ) { return; }

  		// reset caching for this frame

  		bindingStates.resetDefaultState();
  		_currentMaterialId = - 1;
  		_currentCamera = null;

  		// update scene graph

  		if ( scene.autoUpdate === true ) { scene.updateMatrixWorld(); }

  		// update camera matrices and frustum

  		if ( camera.parent === null ) { camera.updateMatrixWorld(); }

  		if ( xr.enabled === true && xr.isPresenting === true ) {

  			camera = xr.getCamera( camera );

  		}

  		//
  		if ( scene.isScene === true ) { scene.onBeforeRender( _this, scene, camera, renderTarget || _currentRenderTarget ); }

  		currentRenderState = renderStates.get( scene, camera );
  		currentRenderState.init();

  		_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
  		_frustum.setFromProjectionMatrix( _projScreenMatrix );

  		_localClippingEnabled = this.localClippingEnabled;
  		_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );

  		currentRenderList = renderLists.get( scene, camera );
  		currentRenderList.init();

  		projectObject( scene, camera, 0, _this.sortObjects );

  		currentRenderList.finish();

  		if ( _this.sortObjects === true ) {

  			currentRenderList.sort( _opaqueSort, _transparentSort );

  		}

  		//

  		if ( _clippingEnabled === true ) { _clipping.beginShadows(); }

  		var shadowsArray = currentRenderState.state.shadowsArray;

  		shadowMap.render( shadowsArray, scene, camera );

  		currentRenderState.setupLights( camera );

  		if ( _clippingEnabled === true ) { _clipping.endShadows(); }

  		//

  		if ( this.info.autoReset === true ) { this.info.reset(); }

  		if ( renderTarget !== undefined ) {

  			this.setRenderTarget( renderTarget );

  		}

  		//

  		background.render( currentRenderList, scene, camera, forceClear );

  		// render scene

  		var opaqueObjects = currentRenderList.opaque;
  		var transparentObjects = currentRenderList.transparent;

  		if ( opaqueObjects.length > 0 ) { renderObjects( opaqueObjects, scene, camera ); }
  		if ( transparentObjects.length > 0 ) { renderObjects( transparentObjects, scene, camera ); }

  		//

  		if ( scene.isScene === true ) { scene.onAfterRender( _this, scene, camera ); }

  		//

  		if ( _currentRenderTarget !== null ) {

  			// Generate mipmap if we're using any kind of mipmap filtering

  			textures.updateRenderTargetMipmap( _currentRenderTarget );

  			// resolve multisample renderbuffers to a single-sample texture if necessary

  			textures.updateMultisampleRenderTarget( _currentRenderTarget );

  		}

  		// Ensure depth buffer writing is enabled so it can be cleared on next render

  		state.buffers.depth.setTest( true );
  		state.buffers.depth.setMask( true );
  		state.buffers.color.setMask( true );

  		state.setPolygonOffset( false );

  		// _gl.finish();

  		currentRenderList = null;
  		currentRenderState = null;

  	};

  	function projectObject( object, camera, groupOrder, sortObjects ) {

  		if ( object.visible === false ) { return; }

  		var visible = object.layers.test( camera.layers );

  		if ( visible ) {

  			if ( object.isGroup ) {

  				groupOrder = object.renderOrder;

  			} else if ( object.isLOD ) {

  				if ( object.autoUpdate === true ) { object.update( camera ); }

  			} else if ( object.isLight ) {

  				currentRenderState.pushLight( object );

  				if ( object.castShadow ) {

  					currentRenderState.pushShadow( object );

  				}

  			} else if ( object.isSprite ) {

  				if ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {

  					if ( sortObjects ) {

  						_vector3.setFromMatrixPosition( object.matrixWorld )
  							.applyMatrix4( _projScreenMatrix );

  					}

  					var geometry = objects.update( object );
  					var material = object.material;

  					if ( material.visible ) {

  						currentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );

  					}

  				}

  			} else if ( object.isImmediateRenderObject ) {

  				if ( sortObjects ) {

  					_vector3.setFromMatrixPosition( object.matrixWorld )
  						.applyMatrix4( _projScreenMatrix );

  				}

  				currentRenderList.push( object, null, object.material, groupOrder, _vector3.z, null );

  			} else if ( object.isMesh || object.isLine || object.isPoints ) {

  				if ( object.isSkinnedMesh ) {

  					// update skeleton only once in a frame

  					if ( object.skeleton.frame !== info.render.frame ) {

  						object.skeleton.update();
  						object.skeleton.frame = info.render.frame;

  					}

  				}

  				if ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {

  					if ( sortObjects ) {

  						_vector3.setFromMatrixPosition( object.matrixWorld )
  							.applyMatrix4( _projScreenMatrix );

  					}

  					var geometry$1 = objects.update( object );
  					var material$1 = object.material;

  					if ( Array.isArray( material$1 ) ) {

  						var groups = geometry$1.groups;

  						for ( var i = 0, l = groups.length; i < l; i ++ ) {

  							var group = groups[ i ];
  							var groupMaterial = material$1[ group.materialIndex ];

  							if ( groupMaterial && groupMaterial.visible ) {

  								currentRenderList.push( object, geometry$1, groupMaterial, groupOrder, _vector3.z, group );

  							}

  						}

  					} else if ( material$1.visible ) {

  						currentRenderList.push( object, geometry$1, material$1, groupOrder, _vector3.z, null );

  					}

  				}

  			}

  		}

  		var children = object.children;

  		for ( var i$1 = 0, l$1 = children.length; i$1 < l$1; i$1 ++ ) {

  			projectObject( children[ i$1 ], camera, groupOrder, sortObjects );

  		}

  	}

  	function renderObjects( renderList, scene, camera ) {

  		var overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;

  		for ( var i = 0, l = renderList.length; i < l; i ++ ) {

  			var renderItem = renderList[ i ];

  			var object = renderItem.object;
  			var geometry = renderItem.geometry;
  			var material = overrideMaterial === null ? renderItem.material : overrideMaterial;
  			var group = renderItem.group;

  			if ( camera.isArrayCamera ) {

  				_currentArrayCamera = camera;

  				var cameras = camera.cameras;

  				for ( var j = 0, jl = cameras.length; j < jl; j ++ ) {

  					var camera2 = cameras[ j ];

  					if ( object.layers.test( camera2.layers ) ) {

  						state.viewport( _currentViewport.copy( camera2.viewport ) );

  						currentRenderState.setupLights( camera2 );

  						renderObject( object, scene, camera2, geometry, material, group );

  					}

  				}

  			} else {

  				_currentArrayCamera = null;

  				renderObject( object, scene, camera, geometry, material, group );

  			}

  		}

  	}

  	function renderObject( object, scene, camera, geometry, material, group ) {

  		object.onBeforeRender( _this, scene, camera, geometry, material, group );
  		currentRenderState = renderStates.get( scene, _currentArrayCamera || camera );

  		object.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );
  		object.normalMatrix.getNormalMatrix( object.modelViewMatrix );

  		if ( object.isImmediateRenderObject ) {

  			var program = setProgram( camera, scene, material, object );

  			state.setMaterial( material );

  			bindingStates.reset();

  			renderObjectImmediate( object, program );

  		} else {

  			_this.renderBufferDirect( camera, scene, geometry, material, object, group );

  		}

  		object.onAfterRender( _this, scene, camera, geometry, material, group );
  		currentRenderState = renderStates.get( scene, _currentArrayCamera || camera );

  	}

  	function initMaterial( material, scene, object ) {

  		if ( scene.isScene !== true ) { scene = _emptyScene; } // scene could be a Mesh, Line, Points, ...

  		var materialProperties = properties.get( material );

  		var lights = currentRenderState.state.lights;
  		var shadowsArray = currentRenderState.state.shadowsArray;

  		var lightsStateVersion = lights.state.version;

  		var parameters = programCache.getParameters( material, lights.state, shadowsArray, scene, _clipping.numPlanes, _clipping.numIntersection, object );
  		var programCacheKey = programCache.getProgramCacheKey( parameters );

  		var program = materialProperties.program;
  		var programChange = true;

  		if ( program === undefined ) {

  			// new material
  			material.addEventListener( 'dispose', onMaterialDispose );

  		} else if ( program.cacheKey !== programCacheKey ) {

  			// changed glsl or parameters
  			releaseMaterialProgramReference( material );

  		} else if ( materialProperties.lightsStateVersion !== lightsStateVersion ) {

  			materialProperties.lightsStateVersion = lightsStateVersion;

  			programChange = false;

  		} else if ( parameters.shaderID !== undefined ) {

  			// same glsl and uniform list
  			return;

  		} else {

  			// only rebuild uniform list
  			programChange = false;

  		}

  		if ( programChange ) {

  			program = programCache.acquireProgram( parameters, programCacheKey );

  			materialProperties.program = program;
  			materialProperties.uniforms = parameters.uniforms;
  			materialProperties.outputEncoding = parameters.outputEncoding;
  			material.program = program;

  		}

  		var programAttributes = program.getAttributes();

  		if ( material.morphTargets ) {

  			material.numSupportedMorphTargets = 0;

  			for ( var i = 0; i < _this.maxMorphTargets; i ++ ) {

  				if ( programAttributes[ 'morphTarget' + i ] >= 0 ) {

  					material.numSupportedMorphTargets ++;

  				}

  			}

  		}

  		if ( material.morphNormals ) {

  			material.numSupportedMorphNormals = 0;

  			for ( var i$1 = 0; i$1 < _this.maxMorphNormals; i$1 ++ ) {

  				if ( programAttributes[ 'morphNormal' + i$1 ] >= 0 ) {

  					material.numSupportedMorphNormals ++;

  				}

  			}

  		}

  		var uniforms = materialProperties.uniforms;

  		if ( ! material.isShaderMaterial &&
  			! material.isRawShaderMaterial ||
  			material.clipping === true ) {

  			materialProperties.numClippingPlanes = _clipping.numPlanes;
  			materialProperties.numIntersection = _clipping.numIntersection;
  			uniforms.clippingPlanes = _clipping.uniform;

  		}

  		materialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;
  		materialProperties.fog = scene.fog;

  		// store the light setup it was created for

  		materialProperties.needsLights = materialNeedsLights( material );
  		materialProperties.lightsStateVersion = lightsStateVersion;

  		if ( materialProperties.needsLights ) {

  			// wire up the material to this renderer's lighting state

  			uniforms.ambientLightColor.value = lights.state.ambient;
  			uniforms.lightProbe.value = lights.state.probe;
  			uniforms.directionalLights.value = lights.state.directional;
  			uniforms.directionalLightShadows.value = lights.state.directionalShadow;
  			uniforms.spotLights.value = lights.state.spot;
  			uniforms.spotLightShadows.value = lights.state.spotShadow;
  			uniforms.rectAreaLights.value = lights.state.rectArea;
  			uniforms.pointLights.value = lights.state.point;
  			uniforms.pointLightShadows.value = lights.state.pointShadow;
  			uniforms.hemisphereLights.value = lights.state.hemi;

  			uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;
  			uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;
  			uniforms.spotShadowMap.value = lights.state.spotShadowMap;
  			uniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;
  			uniforms.pointShadowMap.value = lights.state.pointShadowMap;
  			uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;
  			// TODO (abelnation): add area lights shadow info to uniforms

  		}

  		var progUniforms = materialProperties.program.getUniforms(),
  			uniformsList =
  				WebGLUniforms.seqWithValue( progUniforms.seq, uniforms );

  		materialProperties.uniformsList = uniformsList;

  	}

  	function setProgram( camera, scene, material, object ) {

  		if ( scene.isScene !== true ) { scene = _emptyScene; } // scene could be a Mesh, Line, Points, ...

  		textures.resetTextureUnits();

  		var fog = scene.fog;
  		var environment = material.isMeshStandardMaterial ? scene.environment : null;
  		var encoding = ( _currentRenderTarget === null ) ? _this.outputEncoding : _currentRenderTarget.texture.encoding;

  		var materialProperties = properties.get( material );
  		var lights = currentRenderState.state.lights;

  		if ( _clippingEnabled === true ) {

  			if ( _localClippingEnabled === true || camera !== _currentCamera ) {

  				var useCache =
  					camera === _currentCamera &&
  					material.id === _currentMaterialId;

  				// we might want to call this function with some ClippingGroup
  				// object instead of the material, once it becomes feasible
  				// (#8465, #8379)
  				_clipping.setState(
  					material.clippingPlanes, material.clipIntersection, material.clipShadows,
  					camera, materialProperties, useCache );

  			}

  		}

  		if ( material.version === materialProperties.__version ) {

  			if ( materialProperties.program === undefined ) {

  				initMaterial( material, scene, object );

  			} else if ( material.fog && materialProperties.fog !== fog ) {

  				initMaterial( material, scene, object );

  			} else if ( materialProperties.environment !== environment ) {

  				initMaterial( material, scene, object );

  			} else if ( materialProperties.needsLights && ( materialProperties.lightsStateVersion !== lights.state.version ) ) {

  				initMaterial( material, scene, object );

  			} else if ( materialProperties.numClippingPlanes !== undefined &&
  				( materialProperties.numClippingPlanes !== _clipping.numPlanes ||
  				materialProperties.numIntersection !== _clipping.numIntersection ) ) {

  				initMaterial( material, scene, object );

  			} else if ( materialProperties.outputEncoding !== encoding ) {

  				initMaterial( material, scene, object );

  			}

  		} else {

  			initMaterial( material, scene, object );
  			materialProperties.__version = material.version;

  		}

  		var refreshProgram = false;
  		var refreshMaterial = false;
  		var refreshLights = false;

  		var program = materialProperties.program,
  			p_uniforms = program.getUniforms(),
  			m_uniforms = materialProperties.uniforms;

  		if ( state.useProgram( program.program ) ) {

  			refreshProgram = true;
  			refreshMaterial = true;
  			refreshLights = true;

  		}

  		if ( material.id !== _currentMaterialId ) {

  			_currentMaterialId = material.id;

  			refreshMaterial = true;

  		}

  		if ( refreshProgram || _currentCamera !== camera ) {

  			p_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );

  			if ( capabilities.logarithmicDepthBuffer ) {

  				p_uniforms.setValue( _gl, 'logDepthBufFC',
  					2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );

  			}

  			if ( _currentCamera !== camera ) {

  				_currentCamera = camera;

  				// lighting uniforms depend on the camera so enforce an update
  				// now, in case this material supports lights - or later, when
  				// the next material that does gets activated:

  				refreshMaterial = true;		// set to true on material change
  				refreshLights = true;		// remains set until update done

  			}

  			// load material specific uniforms
  			// (shader material also gets them for the sake of genericity)

  			if ( material.isShaderMaterial ||
  				material.isMeshPhongMaterial ||
  				material.isMeshToonMaterial ||
  				material.isMeshStandardMaterial ||
  				material.envMap ) {

  				var uCamPos = p_uniforms.map.cameraPosition;

  				if ( uCamPos !== undefined ) {

  					uCamPos.setValue( _gl,
  						_vector3.setFromMatrixPosition( camera.matrixWorld ) );

  				}

  			}

  			if ( material.isMeshPhongMaterial ||
  				material.isMeshToonMaterial ||
  				material.isMeshLambertMaterial ||
  				material.isMeshBasicMaterial ||
  				material.isMeshStandardMaterial ||
  				material.isShaderMaterial ) {

  				p_uniforms.setValue( _gl, 'isOrthographic', camera.isOrthographicCamera === true );

  			}

  			if ( material.isMeshPhongMaterial ||
  				material.isMeshToonMaterial ||
  				material.isMeshLambertMaterial ||
  				material.isMeshBasicMaterial ||
  				material.isMeshStandardMaterial ||
  				material.isShaderMaterial ||
  				material.isShadowMaterial ||
  				material.skinning ) {

  				p_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );

  			}

  		}

  		// skinning uniforms must be set even if material didn't change
  		// auto-setting of texture unit for bone texture must go before other textures
  		// otherwise textures used for skinning can take over texture units reserved for other material textures

  		if ( material.skinning ) {

  			p_uniforms.setOptional( _gl, object, 'bindMatrix' );
  			p_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );

  			var skeleton = object.skeleton;

  			if ( skeleton ) {

  				var bones = skeleton.bones;

  				if ( capabilities.floatVertexTextures ) {

  					if ( skeleton.boneTexture === undefined ) {

  						// layout (1 matrix = 4 pixels)
  						//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)
  						//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)
  						//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)
  						//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)
  						//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)


  						var size = Math.sqrt( bones.length * 4 ); // 4 pixels needed for 1 matrix
  						size = MathUtils.ceilPowerOfTwo( size );
  						size = Math.max( size, 4 );

  						var boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel
  						boneMatrices.set( skeleton.boneMatrices ); // copy current values

  						var boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );

  						skeleton.boneMatrices = boneMatrices;
  						skeleton.boneTexture = boneTexture;
  						skeleton.boneTextureSize = size;

  					}

  					p_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture, textures );
  					p_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );

  				} else {

  					p_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );

  				}

  			}

  		}

  		if ( refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow ) {

  			materialProperties.receiveShadow = object.receiveShadow;
  			p_uniforms.setValue( _gl, 'receiveShadow', object.receiveShadow );

  		}

  		if ( refreshMaterial ) {

  			p_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );

  			if ( materialProperties.needsLights ) {

  				// the current material requires lighting info

  				// note: all lighting uniforms are always set correctly
  				// they simply reference the renderer's state for their
  				// values
  				//
  				// use the current material's .needsUpdate flags to set
  				// the GL state when required

  				markUniformsLightsNeedsUpdate( m_uniforms, refreshLights );

  			}

  			// refresh uniforms common to several materials

  			if ( fog && material.fog ) {

  				materials.refreshFogUniforms( m_uniforms, fog );

  			}

  			materials.refreshMaterialUniforms( m_uniforms, material, environment, _pixelRatio, _height );

  			// RectAreaLight Texture
  			// TODO (mrdoob): Find a nicer implementation

  			if ( m_uniforms.ltc_1 !== undefined ) { m_uniforms.ltc_1.value = UniformsLib.LTC_1; }
  			if ( m_uniforms.ltc_2 !== undefined ) { m_uniforms.ltc_2.value = UniformsLib.LTC_2; }

  			WebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );

  		}

  		if ( material.isShaderMaterial && material.uniformsNeedUpdate === true ) {

  			WebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );
  			material.uniformsNeedUpdate = false;

  		}

  		if ( material.isSpriteMaterial ) {

  			p_uniforms.setValue( _gl, 'center', object.center );

  		}

  		// common matrices

  		p_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );
  		p_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );
  		p_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );

  		return program;

  	}

  	// If uniforms are marked as clean, they don't need to be loaded to the GPU.

  	function markUniformsLightsNeedsUpdate( uniforms, value ) {

  		uniforms.ambientLightColor.needsUpdate = value;
  		uniforms.lightProbe.needsUpdate = value;

  		uniforms.directionalLights.needsUpdate = value;
  		uniforms.directionalLightShadows.needsUpdate = value;
  		uniforms.pointLights.needsUpdate = value;
  		uniforms.pointLightShadows.needsUpdate = value;
  		uniforms.spotLights.needsUpdate = value;
  		uniforms.spotLightShadows.needsUpdate = value;
  		uniforms.rectAreaLights.needsUpdate = value;
  		uniforms.hemisphereLights.needsUpdate = value;

  	}

  	function materialNeedsLights( material ) {

  		return material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial ||
  			material.isMeshStandardMaterial || material.isShadowMaterial ||
  			( material.isShaderMaterial && material.lights === true );

  	}

  	//
  	this.setFramebuffer = function ( value ) {

  		if ( _framebuffer !== value && _currentRenderTarget === null ) { _gl.bindFramebuffer( 36160, value ); }

  		_framebuffer = value;

  	};

  	this.getActiveCubeFace = function () {

  		return _currentActiveCubeFace;

  	};

  	this.getActiveMipmapLevel = function () {

  		return _currentActiveMipmapLevel;

  	};

  	this.getRenderTarget = function () {

  		return _currentRenderTarget;

  	};

  	this.setRenderTarget = function ( renderTarget, activeCubeFace, activeMipmapLevel ) {

  		_currentRenderTarget = renderTarget;
  		_currentActiveCubeFace = activeCubeFace;
  		_currentActiveMipmapLevel = activeMipmapLevel;

  		if ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {

  			textures.setupRenderTarget( renderTarget );

  		}

  		var framebuffer = _framebuffer;
  		var isCube = false;

  		if ( renderTarget ) {

  			var _webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;

  			if ( renderTarget.isWebGLCubeRenderTarget ) {

  				framebuffer = _webglFramebuffer[ activeCubeFace || 0 ];
  				isCube = true;

  			} else if ( renderTarget.isWebGLMultisampleRenderTarget ) {

  				framebuffer = properties.get( renderTarget ).__webglMultisampledFramebuffer;

  			} else {

  				framebuffer = _webglFramebuffer;

  			}

  			_currentViewport.copy( renderTarget.viewport );
  			_currentScissor.copy( renderTarget.scissor );
  			_currentScissorTest = renderTarget.scissorTest;

  		} else {

  			_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor();
  			_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor();
  			_currentScissorTest = _scissorTest;

  		}

  		if ( _currentFramebuffer !== framebuffer ) {

  			_gl.bindFramebuffer( 36160, framebuffer );
  			_currentFramebuffer = framebuffer;

  		}

  		state.viewport( _currentViewport );
  		state.scissor( _currentScissor );
  		state.setScissorTest( _currentScissorTest );

  		if ( isCube ) {

  			var textureProperties = properties.get( renderTarget.texture );
  			_gl.framebufferTexture2D( 36160, 36064, 34069 + ( activeCubeFace || 0 ), textureProperties.__webglTexture, activeMipmapLevel || 0 );

  		}

  	};

  	this.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer, activeCubeFaceIndex ) {

  		if ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {

  			console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );
  			return;

  		}

  		var framebuffer = properties.get( renderTarget ).__webglFramebuffer;

  		if ( renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined ) {

  			framebuffer = framebuffer[ activeCubeFaceIndex ];

  		}

  		if ( framebuffer ) {

  			var restore = false;

  			if ( framebuffer !== _currentFramebuffer ) {

  				_gl.bindFramebuffer( 36160, framebuffer );

  				restore = true;

  			}

  			try {

  				var texture = renderTarget.texture;
  				var textureFormat = texture.format;
  				var textureType = texture.type;

  				if ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( 35739 ) ) {

  					console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );
  					return;

  				}

  				if ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( 35738 ) && // IE11, Edge and Chrome Mac < 52 (#9513)
  					! ( textureType === FloatType && ( capabilities.isWebGL2 || extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox
  					! ( textureType === HalfFloatType && ( capabilities.isWebGL2 ? extensions.get( 'EXT_color_buffer_float' ) : extensions.get( 'EXT_color_buffer_half_float' ) ) ) ) {

  					console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );
  					return;

  				}

  				if ( _gl.checkFramebufferStatus( 36160 ) === 36053 ) {

  					// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)

  					if ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {

  						_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );

  					}

  				} else {

  					console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );

  				}

  			} finally {

  				if ( restore ) {

  					_gl.bindFramebuffer( 36160, _currentFramebuffer );

  				}

  			}

  		}

  	};

  	this.copyFramebufferToTexture = function ( position, texture, level ) {

  		if ( level === undefined ) { level = 0; }

  		var levelScale = Math.pow( 2, - level );
  		var width = Math.floor( texture.image.width * levelScale );
  		var height = Math.floor( texture.image.height * levelScale );
  		var glFormat = utils.convert( texture.format );

  		textures.setTexture2D( texture, 0 );

  		_gl.copyTexImage2D( 3553, level, glFormat, position.x, position.y, width, height, 0 );

  		state.unbindTexture();

  	};

  	this.copyTextureToTexture = function ( position, srcTexture, dstTexture, level ) {

  		if ( level === undefined ) { level = 0; }

  		var width = srcTexture.image.width;
  		var height = srcTexture.image.height;
  		var glFormat = utils.convert( dstTexture.format );
  		var glType = utils.convert( dstTexture.type );

  		textures.setTexture2D( dstTexture, 0 );

  		// As another texture upload may have changed pixelStorei
  		// parameters, make sure they are correct for the dstTexture
  		_gl.pixelStorei( 37440, dstTexture.flipY );
  		_gl.pixelStorei( 37441, dstTexture.premultiplyAlpha );
  		_gl.pixelStorei( 3317, dstTexture.unpackAlignment );

  		if ( srcTexture.isDataTexture ) {

  			_gl.texSubImage2D( 3553, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data );

  		} else {

  			if ( srcTexture.isCompressedTexture ) {

  				_gl.compressedTexSubImage2D( 3553, level, position.x, position.y, srcTexture.mipmaps[ 0 ].width, srcTexture.mipmaps[ 0 ].height, glFormat, srcTexture.mipmaps[ 0 ].data );

  			} else {

  				_gl.texSubImage2D( 3553, level, position.x, position.y, glFormat, glType, srcTexture.image );

  			}

  		}

  		// Generate mipmaps only when copying level 0
  		if ( level === 0 && dstTexture.generateMipmaps ) { _gl.generateMipmap( 3553 ); }

  		state.unbindTexture();

  	};

  	this.initTexture = function ( texture ) {

  		textures.setTexture2D( texture, 0 );

  		state.unbindTexture();

  	};

  	if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {

  		__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef

  	}

  }

  /**
   * @author Mugen87 / https://github.com/Mugen87
   */

  function WebGL1Renderer( parameters ) {

  	WebGLRenderer.call( this, parameters );

  }

  WebGL1Renderer.prototype = Object.assign( Object.create( WebGLRenderer.prototype ), {

  	constructor: WebGL1Renderer,

  	isWebGL1Renderer: true

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author alteredq / http://alteredqualia.com/
   */

  function FogExp2( color, density ) {

  	this.name = '';

  	this.color = new Color( color );
  	this.density = ( density !== undefined ) ? density : 0.00025;

  }

  Object.assign( FogExp2.prototype, {

  	isFogExp2: true,

  	clone: function () {

  		return new FogExp2( this.color, this.density );

  	},

  	toJSON: function ( /* meta */ ) {

  		return {
  			type: 'FogExp2',
  			color: this.color.getHex(),
  			density: this.density
  		};

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author alteredq / http://alteredqualia.com/
   */

  function Fog( color, near, far ) {

  	this.name = '';

  	this.color = new Color( color );

  	this.near = ( near !== undefined ) ? near : 1;
  	this.far = ( far !== undefined ) ? far : 1000;

  }

  Object.assign( Fog.prototype, {

  	isFog: true,

  	clone: function () {

  		return new Fog( this.color, this.near, this.far );

  	},

  	toJSON: function ( /* meta */ ) {

  		return {
  			type: 'Fog',
  			color: this.color.getHex(),
  			near: this.near,
  			far: this.far
  		};

  	}

  } );

  /**
   * @author benaadams / https://twitter.com/ben_a_adams
   */

  function InterleavedBuffer( array, stride ) {

  	this.array = array;
  	this.stride = stride;
  	this.count = array !== undefined ? array.length / stride : 0;

  	this.usage = StaticDrawUsage;
  	this.updateRange = { offset: 0, count: - 1 };

  	this.version = 0;

  	this.uuid = MathUtils.generateUUID();

  }

  Object.defineProperty( InterleavedBuffer.prototype, 'needsUpdate', {

  	set: function ( value ) {

  		if ( value === true ) { this.version ++; }

  	}

  } );

  Object.assign( InterleavedBuffer.prototype, {

  	isInterleavedBuffer: true,

  	onUploadCallback: function () {},

  	setUsage: function ( value ) {

  		this.usage = value;

  		return this;

  	},

  	copy: function ( source ) {

  		this.array = new source.array.constructor( source.array );
  		this.count = source.count;
  		this.stride = source.stride;
  		this.usage = source.usage;

  		return this;

  	},

  	copyAt: function ( index1, attribute, index2 ) {

  		index1 *= this.stride;
  		index2 *= attribute.stride;

  		for ( var i = 0, l = this.stride; i < l; i ++ ) {

  			this.array[ index1 + i ] = attribute.array[ index2 + i ];

  		}

  		return this;

  	},

  	set: function ( value, offset ) {

  		if ( offset === undefined ) { offset = 0; }

  		this.array.set( value, offset );

  		return this;

  	},

  	clone: function ( data ) {

  		if ( data.arrayBuffers === undefined ) {

  			data.arrayBuffers = {};

  		}

  		if ( this.array.buffer._uuid === undefined ) {

  			this.array.buffer._uuid = MathUtils.generateUUID();

  		}

  		if ( data.arrayBuffers[ this.array.buffer._uuid ] === undefined ) {

  			data.arrayBuffers[ this.array.buffer._uuid ] = this.array.slice( 0 ).buffer;

  		}

  		var array = new this.array.constructor( data.arrayBuffers[ this.array.buffer._uuid ] );

  		var ib = new InterleavedBuffer( array, this.stride );
  		ib.setUsage( this.usage );

  		return ib;

  	},

  	onUpload: function ( callback ) {

  		this.onUploadCallback = callback;

  		return this;

  	},

  	toJSON: function ( data ) {

  		if ( data.arrayBuffers === undefined ) {

  			data.arrayBuffers = {};

  		}

  		// generate UUID for array buffer if necessary

  		if ( this.array.buffer._uuid === undefined ) {

  			this.array.buffer._uuid = MathUtils.generateUUID();

  		}

  		if ( data.arrayBuffers[ this.array.buffer._uuid ] === undefined ) {

  			data.arrayBuffers[ this.array.buffer._uuid ] = Array.prototype.slice.call( new Uint32Array( this.array.buffer ) );

  		}

  		//

  		return {
  			uuid: this.uuid,
  			buffer: this.array.buffer._uuid,
  			type: this.array.constructor.name,
  			stride: this.stride
  		};

  	}

  } );

  /**
   * @author benaadams / https://twitter.com/ben_a_adams
   */

  var _vector$6 = new Vector3();

  function InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {

  	this.name = '';

  	this.data = interleavedBuffer;
  	this.itemSize = itemSize;
  	this.offset = offset;

  	this.normalized = normalized === true;

  }

  Object.defineProperties( InterleavedBufferAttribute.prototype, {

  	count: {

  		get: function () {

  			return this.data.count;

  		}

  	},

  	array: {

  		get: function () {

  			return this.data.array;

  		}

  	}

  } );

  Object.assign( InterleavedBufferAttribute.prototype, {

  	isInterleavedBufferAttribute: true,

  	applyMatrix4: function ( m ) {

  		for ( var i = 0, l = this.data.count; i < l; i ++ ) {

  			_vector$6.x = this.getX( i );
  			_vector$6.y = this.getY( i );
  			_vector$6.z = this.getZ( i );

  			_vector$6.applyMatrix4( m );

  			this.setXYZ( i, _vector$6.x, _vector$6.y, _vector$6.z );

  		}

  		return this;

  	},

  	setX: function ( index, x ) {

  		this.data.array[ index * this.data.stride + this.offset ] = x;

  		return this;

  	},

  	setY: function ( index, y ) {

  		this.data.array[ index * this.data.stride + this.offset + 1 ] = y;

  		return this;

  	},

  	setZ: function ( index, z ) {

  		this.data.array[ index * this.data.stride + this.offset + 2 ] = z;

  		return this;

  	},

  	setW: function ( index, w ) {

  		this.data.array[ index * this.data.stride + this.offset + 3 ] = w;

  		return this;

  	},

  	getX: function ( index ) {

  		return this.data.array[ index * this.data.stride + this.offset ];

  	},

  	getY: function ( index ) {

  		return this.data.array[ index * this.data.stride + this.offset + 1 ];

  	},

  	getZ: function ( index ) {

  		return this.data.array[ index * this.data.stride + this.offset + 2 ];

  	},

  	getW: function ( index ) {

  		return this.data.array[ index * this.data.stride + this.offset + 3 ];

  	},

  	setXY: function ( index, x, y ) {

  		index = index * this.data.stride + this.offset;

  		this.data.array[ index + 0 ] = x;
  		this.data.array[ index + 1 ] = y;

  		return this;

  	},

  	setXYZ: function ( index, x, y, z ) {

  		index = index * this.data.stride + this.offset;

  		this.data.array[ index + 0 ] = x;
  		this.data.array[ index + 1 ] = y;
  		this.data.array[ index + 2 ] = z;

  		return this;

  	},

  	setXYZW: function ( index, x, y, z, w ) {

  		index = index * this.data.stride + this.offset;

  		this.data.array[ index + 0 ] = x;
  		this.data.array[ index + 1 ] = y;
  		this.data.array[ index + 2 ] = z;
  		this.data.array[ index + 3 ] = w;

  		return this;

  	},

  	clone: function ( data ) {

  		if ( data === undefined ) {

  			console.log( 'THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.' );

  			var array = [];

  			for ( var i = 0; i < this.count; i ++ ) {

  				var index = i * this.data.stride + this.offset;

  				for ( var j = 0; j < this.itemSize; j ++ ) {

  					array.push( this.data.array[ index + j ] );

  				}

  			}

  			return new BufferAttribute( new this.array.constructor( array ), this.itemSize, this.normalized );

  		} else {

  			if ( data.interleavedBuffers === undefined ) {

  				data.interleavedBuffers = {};

  			}

  			if ( data.interleavedBuffers[ this.data.uuid ] === undefined ) {

  				data.interleavedBuffers[ this.data.uuid ] = this.data.clone( data );

  			}

  			return new InterleavedBufferAttribute( data.interleavedBuffers[ this.data.uuid ], this.itemSize, this.offset, this.normalized );

  		}

  	},

  	toJSON: function ( data ) {

  		if ( data === undefined ) {

  			console.log( 'THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.' );

  			var array = [];

  			for ( var i = 0; i < this.count; i ++ ) {

  				var index = i * this.data.stride + this.offset;

  				for ( var j = 0; j < this.itemSize; j ++ ) {

  					array.push( this.data.array[ index + j ] );

  				}

  			}

  			// deinterleave data and save it as an ordinary buffer attribute for now

  			return {
  				itemSize: this.itemSize,
  				type: this.array.constructor.name,
  				array: array,
  				normalized: this.normalized
  			};

  		} else {

  			// save as true interlaved attribtue

  			if ( data.interleavedBuffers === undefined ) {

  				data.interleavedBuffers = {};

  			}

  			if ( data.interleavedBuffers[ this.data.uuid ] === undefined ) {

  				data.interleavedBuffers[ this.data.uuid ] = this.data.toJSON( data );

  			}

  			return {
  				isInterleavedBufferAttribute: true,
  				itemSize: this.itemSize,
  				data: this.data.uuid,
  				offset: this.offset,
  				normalized: this.normalized
  			};

  		}

  	}

  } );

  /**
   * @author alteredq / http://alteredqualia.com/
   *
   * parameters = {
   *  color: <hex>,
   *  map: new THREE.Texture( <Image> ),
   *  alphaMap: new THREE.Texture( <Image> ),
   *  rotation: <float>,
   *  sizeAttenuation: <bool>
   * }
   */

  function SpriteMaterial( parameters ) {

  	Material.call( this );

  	this.type = 'SpriteMaterial';

  	this.color = new Color( 0xffffff );

  	this.map = null;

  	this.alphaMap = null;

  	this.rotation = 0;

  	this.sizeAttenuation = true;

  	this.transparent = true;

  	this.setValues( parameters );

  }

  SpriteMaterial.prototype = Object.create( Material.prototype );
  SpriteMaterial.prototype.constructor = SpriteMaterial;
  SpriteMaterial.prototype.isSpriteMaterial = true;

  SpriteMaterial.prototype.copy = function ( source ) {

  	Material.prototype.copy.call( this, source );

  	this.color.copy( source.color );

  	this.map = source.map;

  	this.alphaMap = source.alphaMap;

  	this.rotation = source.rotation;

  	this.sizeAttenuation = source.sizeAttenuation;

  	return this;

  };

  /**
   * @author mikael emtinger / http://gomo.se/
   * @author alteredq / http://alteredqualia.com/
   */

  var _geometry;

  var _intersectPoint = new Vector3();
  var _worldScale = new Vector3();
  var _mvPosition = new Vector3();

  var _alignedPosition = new Vector2();
  var _rotatedPosition = new Vector2();
  var _viewWorldMatrix = new Matrix4();

  var _vA$1 = new Vector3();
  var _vB$1 = new Vector3();
  var _vC$1 = new Vector3();

  var _uvA$1 = new Vector2();
  var _uvB$1 = new Vector2();
  var _uvC$1 = new Vector2();

  function Sprite( material ) {

  	Object3D.call( this );

  	this.type = 'Sprite';

  	if ( _geometry === undefined ) {

  		_geometry = new BufferGeometry();

  		var float32Array = new Float32Array( [
  			- 0.5, - 0.5, 0, 0, 0,
  			0.5, - 0.5, 0, 1, 0,
  			0.5, 0.5, 0, 1, 1,
  			- 0.5, 0.5, 0, 0, 1
  		] );

  		var interleavedBuffer = new InterleavedBuffer( float32Array, 5 );

  		_geometry.setIndex( [ 0, 1, 2,	0, 2, 3 ] );
  		_geometry.setAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );
  		_geometry.setAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );

  	}

  	this.geometry = _geometry;
  	this.material = ( material !== undefined ) ? material : new SpriteMaterial();

  	this.center = new Vector2( 0.5, 0.5 );

  }

  Sprite.prototype = Object.assign( Object.create( Object3D.prototype ), {

  	constructor: Sprite,

  	isSprite: true,

  	raycast: function ( raycaster, intersects ) {

  		if ( raycaster.camera === null ) {

  			console.error( 'THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.' );

  		}

  		_worldScale.setFromMatrixScale( this.matrixWorld );

  		_viewWorldMatrix.copy( raycaster.camera.matrixWorld );
  		this.modelViewMatrix.multiplyMatrices( raycaster.camera.matrixWorldInverse, this.matrixWorld );

  		_mvPosition.setFromMatrixPosition( this.modelViewMatrix );

  		if ( raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false ) {

  			_worldScale.multiplyScalar( - _mvPosition.z );

  		}

  		var rotation = this.material.rotation;
  		var sin, cos;

  		if ( rotation !== 0 ) {

  			cos = Math.cos( rotation );
  			sin = Math.sin( rotation );

  		}

  		var center = this.center;

  		transformVertex( _vA$1.set( - 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );
  		transformVertex( _vB$1.set( 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );
  		transformVertex( _vC$1.set( 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );

  		_uvA$1.set( 0, 0 );
  		_uvB$1.set( 1, 0 );
  		_uvC$1.set( 1, 1 );

  		// check first triangle
  		var intersect = raycaster.ray.intersectTriangle( _vA$1, _vB$1, _vC$1, false, _intersectPoint );

  		if ( intersect === null ) {

  			// check second triangle
  			transformVertex( _vB$1.set( - 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );
  			_uvB$1.set( 0, 1 );

  			intersect = raycaster.ray.intersectTriangle( _vA$1, _vC$1, _vB$1, false, _intersectPoint );
  			if ( intersect === null ) {

  				return;

  			}

  		}

  		var distance = raycaster.ray.origin.distanceTo( _intersectPoint );

  		if ( distance < raycaster.near || distance > raycaster.far ) { return; }

  		intersects.push( {

  			distance: distance,
  			point: _intersectPoint.clone(),
  			uv: Triangle.getUV( _intersectPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2() ),
  			face: null,
  			object: this

  		} );

  	},

  	copy: function ( source ) {

  		Object3D.prototype.copy.call( this, source );

  		if ( source.center !== undefined ) { this.center.copy( source.center ); }

  		this.material = source.material;

  		return this;

  	}

  } );

  function transformVertex( vertexPosition, mvPosition, center, scale, sin, cos ) {

  	// compute position in camera space
  	_alignedPosition.subVectors( vertexPosition, center ).addScalar( 0.5 ).multiply( scale );

  	// to check if rotation is not zero
  	if ( sin !== undefined ) {

  		_rotatedPosition.x = ( cos * _alignedPosition.x ) - ( sin * _alignedPosition.y );
  		_rotatedPosition.y = ( sin * _alignedPosition.x ) + ( cos * _alignedPosition.y );

  	} else {

  		_rotatedPosition.copy( _alignedPosition );

  	}


  	vertexPosition.copy( mvPosition );
  	vertexPosition.x += _rotatedPosition.x;
  	vertexPosition.y += _rotatedPosition.y;

  	// transform to world space
  	vertexPosition.applyMatrix4( _viewWorldMatrix );

  }

  /**
   * @author mikael emtinger / http://gomo.se/
   * @author alteredq / http://alteredqualia.com/
   * @author mrdoob / http://mrdoob.com/
   */

  var _v1$4 = new Vector3();
  var _v2$2 = new Vector3();

  function LOD() {

  	Object3D.call( this );

  	this._currentLevel = 0;

  	this.type = 'LOD';

  	Object.defineProperties( this, {
  		levels: {
  			enumerable: true,
  			value: []
  		}
  	} );

  	this.autoUpdate = true;

  }

  LOD.prototype = Object.assign( Object.create( Object3D.prototype ), {

  	constructor: LOD,

  	isLOD: true,

  	copy: function ( source ) {

  		Object3D.prototype.copy.call( this, source, false );

  		var levels = source.levels;

  		for ( var i = 0, l = levels.length; i < l; i ++ ) {

  			var level = levels[ i ];

  			this.addLevel( level.object.clone(), level.distance );

  		}

  		this.autoUpdate = source.autoUpdate;

  		return this;

  	},

  	addLevel: function ( object, distance ) {

  		if ( distance === undefined ) { distance = 0; }

  		distance = Math.abs( distance );

  		var levels = this.levels;

  		var l;

  		for ( l = 0; l < levels.length; l ++ ) {

  			if ( distance < levels[ l ].distance ) {

  				break;

  			}

  		}

  		levels.splice( l, 0, { distance: distance, object: object } );

  		this.add( object );

  		return this;

  	},

  	getCurrentLevel: function () {

  		return this._currentLevel;

  	},

  	getObjectForDistance: function ( distance ) {

  		var levels = this.levels;

  		if ( levels.length > 0 ) {

  			var i, l;

  			for ( i = 1, l = levels.length; i < l; i ++ ) {

  				if ( distance < levels[ i ].distance ) {

  					break;

  				}

  			}

  			return levels[ i - 1 ].object;

  		}

  		return null;

  	},

  	raycast: function ( raycaster, intersects ) {

  		var levels = this.levels;

  		if ( levels.length > 0 ) {

  			_v1$4.setFromMatrixPosition( this.matrixWorld );

  			var distance = raycaster.ray.origin.distanceTo( _v1$4 );

  			this.getObjectForDistance( distance ).raycast( raycaster, intersects );

  		}

  	},

  	update: function ( camera ) {

  		var levels = this.levels;

  		if ( levels.length > 1 ) {

  			_v1$4.setFromMatrixPosition( camera.matrixWorld );
  			_v2$2.setFromMatrixPosition( this.matrixWorld );

  			var distance = _v1$4.distanceTo( _v2$2 ) / camera.zoom;

  			levels[ 0 ].object.visible = true;

  			var i, l;

  			for ( i = 1, l = levels.length; i < l; i ++ ) {

  				if ( distance >= levels[ i ].distance ) {

  					levels[ i - 1 ].object.visible = false;
  					levels[ i ].object.visible = true;

  				} else {

  					break;

  				}

  			}

  			this._currentLevel = i - 1;

  			for ( ; i < l; i ++ ) {

  				levels[ i ].object.visible = false;

  			}

  		}

  	},

  	toJSON: function ( meta ) {

  		var data = Object3D.prototype.toJSON.call( this, meta );

  		if ( this.autoUpdate === false ) { data.object.autoUpdate = false; }

  		data.object.levels = [];

  		var levels = this.levels;

  		for ( var i = 0, l = levels.length; i < l; i ++ ) {

  			var level = levels[ i ];

  			data.object.levels.push( {
  				object: level.object.uuid,
  				distance: level.distance
  			} );

  		}

  		return data;

  	}

  } );

  /**
   * @author mikael emtinger / http://gomo.se/
   * @author alteredq / http://alteredqualia.com/
   * @author ikerr / http://verold.com
   */

  function SkinnedMesh( geometry, material ) {

  	if ( geometry && geometry.isGeometry ) {

  		console.error( 'THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );

  	}

  	Mesh.call( this, geometry, material );

  	this.type = 'SkinnedMesh';

  	this.bindMode = 'attached';
  	this.bindMatrix = new Matrix4();
  	this.bindMatrixInverse = new Matrix4();

  }

  SkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {

  	constructor: SkinnedMesh,

  	isSkinnedMesh: true,

  	copy: function ( source ) {

  		Mesh.prototype.copy.call( this, source );

  		this.bindMode = source.bindMode;
  		this.bindMatrix.copy( source.bindMatrix );
  		this.bindMatrixInverse.copy( source.bindMatrixInverse );

  		this.skeleton = source.skeleton;

  		return this;

  	},

  	bind: function ( skeleton, bindMatrix ) {

  		this.skeleton = skeleton;

  		if ( bindMatrix === undefined ) {

  			this.updateMatrixWorld( true );

  			this.skeleton.calculateInverses();

  			bindMatrix = this.matrixWorld;

  		}

  		this.bindMatrix.copy( bindMatrix );
  		this.bindMatrixInverse.getInverse( bindMatrix );

  	},

  	pose: function () {

  		this.skeleton.pose();

  	},

  	normalizeSkinWeights: function () {

  		var vector = new Vector4();

  		var skinWeight = this.geometry.attributes.skinWeight;

  		for ( var i = 0, l = skinWeight.count; i < l; i ++ ) {

  			vector.x = skinWeight.getX( i );
  			vector.y = skinWeight.getY( i );
  			vector.z = skinWeight.getZ( i );
  			vector.w = skinWeight.getW( i );

  			var scale = 1.0 / vector.manhattanLength();

  			if ( scale !== Infinity ) {

  				vector.multiplyScalar( scale );

  			} else {

  				vector.set( 1, 0, 0, 0 ); // do something reasonable

  			}

  			skinWeight.setXYZW( i, vector.x, vector.y, vector.z, vector.w );

  		}

  	},

  	updateMatrixWorld: function ( force ) {

  		Mesh.prototype.updateMatrixWorld.call( this, force );

  		if ( this.bindMode === 'attached' ) {

  			this.bindMatrixInverse.getInverse( this.matrixWorld );

  		} else if ( this.bindMode === 'detached' ) {

  			this.bindMatrixInverse.getInverse( this.bindMatrix );

  		} else {

  			console.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );

  		}

  	},

  	boneTransform: ( function () {

  		var basePosition = new Vector3();

  		var skinIndex = new Vector4();
  		var skinWeight = new Vector4();

  		var vector = new Vector3();
  		var matrix = new Matrix4();

  		return function ( index, target ) {

  			var skeleton = this.skeleton;
  			var geometry = this.geometry;

  			skinIndex.fromBufferAttribute( geometry.attributes.skinIndex, index );
  			skinWeight.fromBufferAttribute( geometry.attributes.skinWeight, index );

  			basePosition.fromBufferAttribute( geometry.attributes.position, index ).applyMatrix4( this.bindMatrix );

  			target.set( 0, 0, 0 );

  			for ( var i = 0; i < 4; i ++ ) {

  				var weight = skinWeight.getComponent( i );

  				if ( weight !== 0 ) {

  					var boneIndex = skinIndex.getComponent( i );

  					matrix.multiplyMatrices( skeleton.bones[ boneIndex ].matrixWorld, skeleton.boneInverses[ boneIndex ] );

  					target.addScaledVector( vector.copy( basePosition ).applyMatrix4( matrix ), weight );

  				}

  			}

  			return target.applyMatrix4( this.bindMatrixInverse );

  		};

  	}() )

  } );

  /**
   * @author mikael emtinger / http://gomo.se/
   * @author alteredq / http://alteredqualia.com/
   * @author michael guerrero / http://realitymeltdown.com
   * @author ikerr / http://verold.com
   */

  var _offsetMatrix = new Matrix4();
  var _identityMatrix = new Matrix4();

  function Skeleton( bones, boneInverses ) {

  	// copy the bone array

  	bones = bones || [];

  	this.bones = bones.slice( 0 );
  	this.boneMatrices = new Float32Array( this.bones.length * 16 );

  	this.frame = - 1;

  	// use the supplied bone inverses or calculate the inverses

  	if ( boneInverses === undefined ) {

  		this.calculateInverses();

  	} else {

  		if ( this.bones.length === boneInverses.length ) {

  			this.boneInverses = boneInverses.slice( 0 );

  		} else {

  			console.warn( 'THREE.Skeleton boneInverses is the wrong length.' );

  			this.boneInverses = [];

  			for ( var i = 0, il = this.bones.length; i < il; i ++ ) {

  				this.boneInverses.push( new Matrix4() );

  			}

  		}

  	}

  }

  Object.assign( Skeleton.prototype, {

  	calculateInverses: function () {

  		this.boneInverses = [];

  		for ( var i = 0, il = this.bones.length; i < il; i ++ ) {

  			var inverse = new Matrix4();

  			if ( this.bones[ i ] ) {

  				inverse.getInverse( this.bones[ i ].matrixWorld );

  			}

  			this.boneInverses.push( inverse );

  		}

  	},

  	pose: function () {

  		// recover the bind-time world matrices

  		for ( var i = 0, il = this.bones.length; i < il; i ++ ) {

  			var bone = this.bones[ i ];

  			if ( bone ) {

  				bone.matrixWorld.getInverse( this.boneInverses[ i ] );

  			}

  		}

  		// compute the local matrices, positions, rotations and scales

  		for ( var i$1 = 0, il$1 = this.bones.length; i$1 < il$1; i$1 ++ ) {

  			var bone$1 = this.bones[ i$1 ];

  			if ( bone$1 ) {

  				if ( bone$1.parent && bone$1.parent.isBone ) {

  					bone$1.matrix.getInverse( bone$1.parent.matrixWorld );
  					bone$1.matrix.multiply( bone$1.matrixWorld );

  				} else {

  					bone$1.matrix.copy( bone$1.matrixWorld );

  				}

  				bone$1.matrix.decompose( bone$1.position, bone$1.quaternion, bone$1.scale );

  			}

  		}

  	},

  	update: function () {

  		var bones = this.bones;
  		var boneInverses = this.boneInverses;
  		var boneMatrices = this.boneMatrices;
  		var boneTexture = this.boneTexture;

  		// flatten bone matrices to array

  		for ( var i = 0, il = bones.length; i < il; i ++ ) {

  			// compute the offset between the current and the original transform

  			var matrix = bones[ i ] ? bones[ i ].matrixWorld : _identityMatrix;

  			_offsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );
  			_offsetMatrix.toArray( boneMatrices, i * 16 );

  		}

  		if ( boneTexture !== undefined ) {

  			boneTexture.needsUpdate = true;

  		}

  	},

  	clone: function () {

  		return new Skeleton( this.bones, this.boneInverses );

  	},

  	getBoneByName: function ( name ) {

  		for ( var i = 0, il = this.bones.length; i < il; i ++ ) {

  			var bone = this.bones[ i ];

  			if ( bone.name === name ) {

  				return bone;

  			}

  		}

  		return undefined;

  	},

  	dispose: function ( ) {

  		if ( this.boneTexture ) {

  			this.boneTexture.dispose();

  			this.boneTexture = undefined;

  		}

  	}

  } );

  /**
   * @author mikael emtinger / http://gomo.se/
   * @author alteredq / http://alteredqualia.com/
   * @author ikerr / http://verold.com
   */

  function Bone() {

  	Object3D.call( this );

  	this.type = 'Bone';

  }

  Bone.prototype = Object.assign( Object.create( Object3D.prototype ), {

  	constructor: Bone,

  	isBone: true

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  var _instanceLocalMatrix = new Matrix4();
  var _instanceWorldMatrix = new Matrix4();

  var _instanceIntersects = [];

  var _mesh = new Mesh();

  function InstancedMesh( geometry, material, count ) {

  	Mesh.call( this, geometry, material );

  	this.instanceMatrix = new BufferAttribute( new Float32Array( count * 16 ), 16 );

  	this.count = count;

  	this.frustumCulled = false;

  }

  InstancedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {

  	constructor: InstancedMesh,

  	isInstancedMesh: true,

  	copy: function ( source ) {

  		Mesh.prototype.copy.call( this, source );

  		this.instanceMatrix.copy( source.instanceMatrix );
  		this.count = source.count;

  		return this;

  	},

  	getMatrixAt: function ( index, matrix ) {

  		matrix.fromArray( this.instanceMatrix.array, index * 16 );

  	},

  	raycast: function ( raycaster, intersects ) {

  		var matrixWorld = this.matrixWorld;
  		var raycastTimes = this.count;

  		_mesh.geometry = this.geometry;
  		_mesh.material = this.material;

  		if ( _mesh.material === undefined ) { return; }

  		for ( var instanceId = 0; instanceId < raycastTimes; instanceId ++ ) {

  			// calculate the world matrix for each instance

  			this.getMatrixAt( instanceId, _instanceLocalMatrix );

  			_instanceWorldMatrix.multiplyMatrices( matrixWorld, _instanceLocalMatrix );

  			// the mesh represents this single instance

  			_mesh.matrixWorld = _instanceWorldMatrix;

  			_mesh.raycast( raycaster, _instanceIntersects );

  			// process the result of raycast

  			for ( var i = 0, l = _instanceIntersects.length; i < l; i ++ ) {

  				var intersect = _instanceIntersects[ i ];
  				intersect.instanceId = instanceId;
  				intersect.object = this;
  				intersects.push( intersect );

  			}

  			_instanceIntersects.length = 0;

  		}

  	},

  	setMatrixAt: function ( index, matrix ) {

  		matrix.toArray( this.instanceMatrix.array, index * 16 );

  	},

  	updateMorphTargets: function () {

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author alteredq / http://alteredqualia.com/
   *
   * parameters = {
   *  color: <hex>,
   *  opacity: <float>,
   *
   *  linewidth: <float>,
   *  linecap: "round",
   *  linejoin: "round"
   * }
   */

  function LineBasicMaterial( parameters ) {

  	Material.call( this );

  	this.type = 'LineBasicMaterial';

  	this.color = new Color( 0xffffff );

  	this.linewidth = 1;
  	this.linecap = 'round';
  	this.linejoin = 'round';

  	this.morphTargets = false;

  	this.setValues( parameters );

  }

  LineBasicMaterial.prototype = Object.create( Material.prototype );
  LineBasicMaterial.prototype.constructor = LineBasicMaterial;

  LineBasicMaterial.prototype.isLineBasicMaterial = true;

  LineBasicMaterial.prototype.copy = function ( source ) {

  	Material.prototype.copy.call( this, source );

  	this.color.copy( source.color );

  	this.linewidth = source.linewidth;
  	this.linecap = source.linecap;
  	this.linejoin = source.linejoin;

  	this.morphTargets = source.morphTargets;

  	return this;

  };

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  var _start = new Vector3();
  var _end = new Vector3();
  var _inverseMatrix$1 = new Matrix4();
  var _ray$1 = new Ray();
  var _sphere$2 = new Sphere();

  function Line( geometry, material, mode ) {

  	if ( mode === 1 ) {

  		console.error( 'THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead.' );

  	}

  	Object3D.call( this );

  	this.type = 'Line';

  	this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
  	this.material = material !== undefined ? material : new LineBasicMaterial();

  	this.updateMorphTargets();

  }

  Line.prototype = Object.assign( Object.create( Object3D.prototype ), {

  	constructor: Line,

  	isLine: true,

  	copy: function ( source ) {

  		Object3D.prototype.copy.call( this, source );

  		this.material = source.material;
  		this.geometry = source.geometry;

  		return this;

  	},

  	computeLineDistances: function () {

  		var geometry = this.geometry;

  		if ( geometry.isBufferGeometry ) {

  			// we assume non-indexed geometry

  			if ( geometry.index === null ) {

  				var positionAttribute = geometry.attributes.position;
  				var lineDistances = [ 0 ];

  				for ( var i = 1, l = positionAttribute.count; i < l; i ++ ) {

  					_start.fromBufferAttribute( positionAttribute, i - 1 );
  					_end.fromBufferAttribute( positionAttribute, i );

  					lineDistances[ i ] = lineDistances[ i - 1 ];
  					lineDistances[ i ] += _start.distanceTo( _end );

  				}

  				geometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );

  			} else {

  				console.warn( 'THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );

  			}

  		} else if ( geometry.isGeometry ) {

  			var vertices = geometry.vertices;
  			var lineDistances$1 = geometry.lineDistances;

  			lineDistances$1[ 0 ] = 0;

  			for ( var i$1 = 1, l$1 = vertices.length; i$1 < l$1; i$1 ++ ) {

  				lineDistances$1[ i$1 ] = lineDistances$1[ i$1 - 1 ];
  				lineDistances$1[ i$1 ] += vertices[ i$1 - 1 ].distanceTo( vertices[ i$1 ] );

  			}

  		}

  		return this;

  	},

  	raycast: function ( raycaster, intersects ) {

  		var geometry = this.geometry;
  		var matrixWorld = this.matrixWorld;
  		var threshold = raycaster.params.Line.threshold;

  		// Checking boundingSphere distance to ray

  		if ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }

  		_sphere$2.copy( geometry.boundingSphere );
  		_sphere$2.applyMatrix4( matrixWorld );
  		_sphere$2.radius += threshold;

  		if ( raycaster.ray.intersectsSphere( _sphere$2 ) === false ) { return; }

  		//

  		_inverseMatrix$1.getInverse( matrixWorld );
  		_ray$1.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$1 );

  		var localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );
  		var localThresholdSq = localThreshold * localThreshold;

  		var vStart = new Vector3();
  		var vEnd = new Vector3();
  		var interSegment = new Vector3();
  		var interRay = new Vector3();
  		var step = ( this && this.isLineSegments ) ? 2 : 1;

  		if ( geometry.isBufferGeometry ) {

  			var index = geometry.index;
  			var attributes = geometry.attributes;
  			var positions = attributes.position.array;

  			if ( index !== null ) {

  				var indices = index.array;

  				for ( var i = 0, l = indices.length - 1; i < l; i += step ) {

  					var a = indices[ i ];
  					var b = indices[ i + 1 ];

  					vStart.fromArray( positions, a * 3 );
  					vEnd.fromArray( positions, b * 3 );

  					var distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );

  					if ( distSq > localThresholdSq ) { continue; }

  					interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

  					var distance = raycaster.ray.origin.distanceTo( interRay );

  					if ( distance < raycaster.near || distance > raycaster.far ) { continue; }

  					intersects.push( {

  						distance: distance,
  						// What do we want? intersection point on the ray or on the segment??
  						// point: raycaster.ray.at( distance ),
  						point: interSegment.clone().applyMatrix4( this.matrixWorld ),
  						index: i,
  						face: null,
  						faceIndex: null,
  						object: this

  					} );

  				}

  			} else {

  				for ( var i$1 = 0, l$1 = positions.length / 3 - 1; i$1 < l$1; i$1 += step ) {

  					vStart.fromArray( positions, 3 * i$1 );
  					vEnd.fromArray( positions, 3 * i$1 + 3 );

  					var distSq$1 = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );

  					if ( distSq$1 > localThresholdSq ) { continue; }

  					interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

  					var distance$1 = raycaster.ray.origin.distanceTo( interRay );

  					if ( distance$1 < raycaster.near || distance$1 > raycaster.far ) { continue; }

  					intersects.push( {

  						distance: distance$1,
  						// What do we want? intersection point on the ray or on the segment??
  						// point: raycaster.ray.at( distance ),
  						point: interSegment.clone().applyMatrix4( this.matrixWorld ),
  						index: i$1,
  						face: null,
  						faceIndex: null,
  						object: this

  					} );

  				}

  			}

  		} else if ( geometry.isGeometry ) {

  			var vertices = geometry.vertices;
  			var nbVertices = vertices.length;

  			for ( var i$2 = 0; i$2 < nbVertices - 1; i$2 += step ) {

  				var distSq$2 = _ray$1.distanceSqToSegment( vertices[ i$2 ], vertices[ i$2 + 1 ], interRay, interSegment );

  				if ( distSq$2 > localThresholdSq ) { continue; }

  				interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

  				var distance$2 = raycaster.ray.origin.distanceTo( interRay );

  				if ( distance$2 < raycaster.near || distance$2 > raycaster.far ) { continue; }

  				intersects.push( {

  					distance: distance$2,
  					// What do we want? intersection point on the ray or on the segment??
  					// point: raycaster.ray.at( distance ),
  					point: interSegment.clone().applyMatrix4( this.matrixWorld ),
  					index: i$2,
  					face: null,
  					faceIndex: null,
  					object: this

  				} );

  			}

  		}

  	},

  	updateMorphTargets: function () {

  		var geometry = this.geometry;

  		if ( geometry.isBufferGeometry ) {

  			var morphAttributes = geometry.morphAttributes;
  			var keys = Object.keys( morphAttributes );

  			if ( keys.length > 0 ) {

  				var morphAttribute = morphAttributes[ keys[ 0 ] ];

  				if ( morphAttribute !== undefined ) {

  					this.morphTargetInfluences = [];
  					this.morphTargetDictionary = {};

  					for ( var m = 0, ml = morphAttribute.length; m < ml; m ++ ) {

  						var name = morphAttribute[ m ].name || String( m );

  						this.morphTargetInfluences.push( 0 );
  						this.morphTargetDictionary[ name ] = m;

  					}

  				}

  			}

  		} else {

  			var morphTargets = geometry.morphTargets;

  			if ( morphTargets !== undefined && morphTargets.length > 0 ) {

  				console.error( 'THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.' );

  			}

  		}

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  var _start$1 = new Vector3();
  var _end$1 = new Vector3();

  function LineSegments( geometry, material ) {

  	Line.call( this, geometry, material );

  	this.type = 'LineSegments';

  }

  LineSegments.prototype = Object.assign( Object.create( Line.prototype ), {

  	constructor: LineSegments,

  	isLineSegments: true,

  	computeLineDistances: function () {

  		var geometry = this.geometry;

  		if ( geometry.isBufferGeometry ) {

  			// we assume non-indexed geometry

  			if ( geometry.index === null ) {

  				var positionAttribute = geometry.attributes.position;
  				var lineDistances = [];

  				for ( var i = 0, l = positionAttribute.count; i < l; i += 2 ) {

  					_start$1.fromBufferAttribute( positionAttribute, i );
  					_end$1.fromBufferAttribute( positionAttribute, i + 1 );

  					lineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];
  					lineDistances[ i + 1 ] = lineDistances[ i ] + _start$1.distanceTo( _end$1 );

  				}

  				geometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );

  			} else {

  				console.warn( 'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );

  			}

  		} else if ( geometry.isGeometry ) {

  			var vertices = geometry.vertices;
  			var lineDistances$1 = geometry.lineDistances;

  			for ( var i$1 = 0, l$1 = vertices.length; i$1 < l$1; i$1 += 2 ) {

  				_start$1.copy( vertices[ i$1 ] );
  				_end$1.copy( vertices[ i$1 + 1 ] );

  				lineDistances$1[ i$1 ] = ( i$1 === 0 ) ? 0 : lineDistances$1[ i$1 - 1 ];
  				lineDistances$1[ i$1 + 1 ] = lineDistances$1[ i$1 ] + _start$1.distanceTo( _end$1 );

  			}

  		}

  		return this;

  	}

  } );

  /**
   * @author mgreter / http://github.com/mgreter
   */

  function LineLoop( geometry, material ) {

  	Line.call( this, geometry, material );

  	this.type = 'LineLoop';

  }

  LineLoop.prototype = Object.assign( Object.create( Line.prototype ), {

  	constructor: LineLoop,

  	isLineLoop: true,

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author alteredq / http://alteredqualia.com/
   *
   * parameters = {
   *  color: <hex>,
   *  opacity: <float>,
   *  map: new THREE.Texture( <Image> ),
   *  alphaMap: new THREE.Texture( <Image> ),
   *
   *  size: <float>,
   *  sizeAttenuation: <bool>
   *
   *  morphTargets: <bool>
   * }
   */

  function PointsMaterial( parameters ) {

  	Material.call( this );

  	this.type = 'PointsMaterial';

  	this.color = new Color( 0xffffff );

  	this.map = null;

  	this.alphaMap = null;

  	this.size = 1;
  	this.sizeAttenuation = true;

  	this.morphTargets = false;

  	this.setValues( parameters );

  }

  PointsMaterial.prototype = Object.create( Material.prototype );
  PointsMaterial.prototype.constructor = PointsMaterial;

  PointsMaterial.prototype.isPointsMaterial = true;

  PointsMaterial.prototype.copy = function ( source ) {

  	Material.prototype.copy.call( this, source );

  	this.color.copy( source.color );

  	this.map = source.map;

  	this.alphaMap = source.alphaMap;

  	this.size = source.size;
  	this.sizeAttenuation = source.sizeAttenuation;

  	this.morphTargets = source.morphTargets;

  	return this;

  };

  /**
   * @author alteredq / http://alteredqualia.com/
   */

  var _inverseMatrix$2 = new Matrix4();
  var _ray$2 = new Ray();
  var _sphere$3 = new Sphere();
  var _position$1 = new Vector3();

  function Points( geometry, material ) {

  	Object3D.call( this );

  	this.type = 'Points';

  	this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
  	this.material = material !== undefined ? material : new PointsMaterial();

  	this.updateMorphTargets();

  }

  Points.prototype = Object.assign( Object.create( Object3D.prototype ), {

  	constructor: Points,

  	isPoints: true,

  	copy: function ( source ) {

  		Object3D.prototype.copy.call( this, source );

  		this.material = source.material;
  		this.geometry = source.geometry;

  		return this;

  	},

  	raycast: function ( raycaster, intersects ) {

  		var geometry = this.geometry;
  		var matrixWorld = this.matrixWorld;
  		var threshold = raycaster.params.Points.threshold;

  		// Checking boundingSphere distance to ray

  		if ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }

  		_sphere$3.copy( geometry.boundingSphere );
  		_sphere$3.applyMatrix4( matrixWorld );
  		_sphere$3.radius += threshold;

  		if ( raycaster.ray.intersectsSphere( _sphere$3 ) === false ) { return; }

  		//

  		_inverseMatrix$2.getInverse( matrixWorld );
  		_ray$2.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$2 );

  		var localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );
  		var localThresholdSq = localThreshold * localThreshold;

  		if ( geometry.isBufferGeometry ) {

  			var index = geometry.index;
  			var attributes = geometry.attributes;
  			var positions = attributes.position.array;

  			if ( index !== null ) {

  				var indices = index.array;

  				for ( var i = 0, il = indices.length; i < il; i ++ ) {

  					var a = indices[ i ];

  					_position$1.fromArray( positions, a * 3 );

  					testPoint( _position$1, a, localThresholdSq, matrixWorld, raycaster, intersects, this );

  				}

  			} else {

  				for ( var i$1 = 0, l = positions.length / 3; i$1 < l; i$1 ++ ) {

  					_position$1.fromArray( positions, i$1 * 3 );

  					testPoint( _position$1, i$1, localThresholdSq, matrixWorld, raycaster, intersects, this );

  				}

  			}

  		} else {

  			var vertices = geometry.vertices;

  			for ( var i$2 = 0, l$1 = vertices.length; i$2 < l$1; i$2 ++ ) {

  				testPoint( vertices[ i$2 ], i$2, localThresholdSq, matrixWorld, raycaster, intersects, this );

  			}

  		}

  	},

  	updateMorphTargets: function () {

  		var geometry = this.geometry;

  		if ( geometry.isBufferGeometry ) {

  			var morphAttributes = geometry.morphAttributes;
  			var keys = Object.keys( morphAttributes );

  			if ( keys.length > 0 ) {

  				var morphAttribute = morphAttributes[ keys[ 0 ] ];

  				if ( morphAttribute !== undefined ) {

  					this.morphTargetInfluences = [];
  					this.morphTargetDictionary = {};

  					for ( var m = 0, ml = morphAttribute.length; m < ml; m ++ ) {

  						var name = morphAttribute[ m ].name || String( m );

  						this.morphTargetInfluences.push( 0 );
  						this.morphTargetDictionary[ name ] = m;

  					}

  				}

  			}

  		} else {

  			var morphTargets = geometry.morphTargets;

  			if ( morphTargets !== undefined && morphTargets.length > 0 ) {

  				console.error( 'THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.' );

  			}

  		}

  	}

  } );

  function testPoint( point, index, localThresholdSq, matrixWorld, raycaster, intersects, object ) {

  	var rayPointDistanceSq = _ray$2.distanceSqToPoint( point );

  	if ( rayPointDistanceSq < localThresholdSq ) {

  		var intersectPoint = new Vector3();

  		_ray$2.closestPointToPoint( point, intersectPoint );
  		intersectPoint.applyMatrix4( matrixWorld );

  		var distance = raycaster.ray.origin.distanceTo( intersectPoint );

  		if ( distance < raycaster.near || distance > raycaster.far ) { return; }

  		intersects.push( {

  			distance: distance,
  			distanceToRay: Math.sqrt( rayPointDistanceSq ),
  			point: intersectPoint,
  			index: index,
  			face: null,
  			object: object

  		} );

  	}

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

  	Texture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

  	this.format = format !== undefined ? format : RGBFormat;

  	this.minFilter = minFilter !== undefined ? minFilter : LinearFilter;
  	this.magFilter = magFilter !== undefined ? magFilter : LinearFilter;

  	this.generateMipmaps = false;

  }

  VideoTexture.prototype = Object.assign( Object.create( Texture.prototype ), {

  	constructor: VideoTexture,

  	isVideoTexture: true,

  	update: function () {

  		var video = this.image;

  		if ( video.readyState >= video.HAVE_CURRENT_DATA ) {

  			this.needsUpdate = true;

  		}

  	}

  } );

  /**
   * @author alteredq / http://alteredqualia.com/
   */

  function CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {

  	Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

  	this.image = { width: width, height: height };
  	this.mipmaps = mipmaps;

  	// no flipping for cube textures
  	// (also flipping doesn't work for compressed textures )

  	this.flipY = false;

  	// can't generate mipmaps for compressed textures
  	// mips must be embedded in DDS files

  	this.generateMipmaps = false;

  }

  CompressedTexture.prototype = Object.create( Texture.prototype );
  CompressedTexture.prototype.constructor = CompressedTexture;

  CompressedTexture.prototype.isCompressedTexture = true;

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

  	Texture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

  	this.needsUpdate = true;

  }

  CanvasTexture.prototype = Object.create( Texture.prototype );
  CanvasTexture.prototype.constructor = CanvasTexture;
  CanvasTexture.prototype.isCanvasTexture = true;

  /**
   * @author Matt DesLauriers / @mattdesl
   * @author atix / arthursilber.de
   */

  function DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {

  	format = format !== undefined ? format : DepthFormat;

  	if ( format !== DepthFormat && format !== DepthStencilFormat ) {

  		throw new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );

  	}

  	if ( type === undefined && format === DepthFormat ) { type = UnsignedShortType; }
  	if ( type === undefined && format === DepthStencilFormat ) { type = UnsignedInt248Type; }

  	Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

  	this.image = { width: width, height: height };

  	this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
  	this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;

  	this.flipY = false;
  	this.generateMipmaps	= false;

  }

  DepthTexture.prototype = Object.create( Texture.prototype );
  DepthTexture.prototype.constructor = DepthTexture;
  DepthTexture.prototype.isDepthTexture = true;

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author Mugen87 / https://github.com/Mugen87
   */

  function WireframeGeometry( geometry ) {

  	BufferGeometry.call( this );

  	this.type = 'WireframeGeometry';

  	// buffer

  	var vertices = [];

  	// helper variables

  	var edge = [ 0, 0 ], edges = {};
  	var keys = [ 'a', 'b', 'c' ];

  	// different logic for Geometry and BufferGeometry

  	if ( geometry && geometry.isGeometry ) {

  		// create a data structure that contains all edges without duplicates

  		var faces = geometry.faces;

  		for ( var i = 0, l = faces.length; i < l; i ++ ) {

  			var face = faces[ i ];

  			for ( var j = 0; j < 3; j ++ ) {

  				var edge1 = face[ keys[ j ] ];
  				var edge2 = face[ keys[ ( j + 1 ) % 3 ] ];
  				edge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates
  				edge[ 1 ] = Math.max( edge1, edge2 );

  				var key = edge[ 0 ] + ',' + edge[ 1 ];

  				if ( edges[ key ] === undefined ) {

  					edges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };

  				}

  			}

  		}

  		// generate vertices

  		for ( var key$1 in edges ) {

  			var e = edges[ key$1 ];

  			var vertex = geometry.vertices[ e.index1 ];
  			vertices.push( vertex.x, vertex.y, vertex.z );

  			vertex = geometry.vertices[ e.index2 ];
  			vertices.push( vertex.x, vertex.y, vertex.z );

  		}

  	} else if ( geometry && geometry.isBufferGeometry ) {

  		var vertex$1 = new Vector3();

  		if ( geometry.index !== null ) {

  			// indexed BufferGeometry

  			var position = geometry.attributes.position;
  			var indices = geometry.index;
  			var groups = geometry.groups;

  			if ( groups.length === 0 ) {

  				groups = [ { start: 0, count: indices.count, materialIndex: 0 } ];

  			}

  			// create a data structure that contains all eges without duplicates

  			for ( var o = 0, ol = groups.length; o < ol; ++ o ) {

  				var group = groups[ o ];

  				var start = group.start;
  				var count = group.count;

  				for ( var i$1 = start, l$1 = ( start + count ); i$1 < l$1; i$1 += 3 ) {

  					for ( var j$1 = 0; j$1 < 3; j$1 ++ ) {

  						var edge1$1 = indices.getX( i$1 + j$1 );
  						var edge2$1 = indices.getX( i$1 + ( j$1 + 1 ) % 3 );
  						edge[ 0 ] = Math.min( edge1$1, edge2$1 ); // sorting prevents duplicates
  						edge[ 1 ] = Math.max( edge1$1, edge2$1 );

  						var key$2 = edge[ 0 ] + ',' + edge[ 1 ];

  						if ( edges[ key$2 ] === undefined ) {

  							edges[ key$2 ] = { index1: edge[ 0 ], index2: edge[ 1 ] };

  						}

  					}

  				}

  			}

  			// generate vertices

  			for ( var key$3 in edges ) {

  				var e$1 = edges[ key$3 ];

  				vertex$1.fromBufferAttribute( position, e$1.index1 );
  				vertices.push( vertex$1.x, vertex$1.y, vertex$1.z );

  				vertex$1.fromBufferAttribute( position, e$1.index2 );
  				vertices.push( vertex$1.x, vertex$1.y, vertex$1.z );

  			}

  		} else {

  			// non-indexed BufferGeometry

  			var position$1 = geometry.attributes.position;

  			for ( var i$2 = 0, l$2 = ( position$1.count / 3 ); i$2 < l$2; i$2 ++ ) {

  				for ( var j$2 = 0; j$2 < 3; j$2 ++ ) {

  					// three edges per triangle, an edge is represented as (index1, index2)
  					// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)

  					var index1 = 3 * i$2 + j$2;
  					vertex$1.fromBufferAttribute( position$1, index1 );
  					vertices.push( vertex$1.x, vertex$1.y, vertex$1.z );

  					var index2 = 3 * i$2 + ( ( j$2 + 1 ) % 3 );
  					vertex$1.fromBufferAttribute( position$1, index2 );
  					vertices.push( vertex$1.x, vertex$1.y, vertex$1.z );

  				}

  			}

  		}

  	}

  	// build geometry

  	this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );

  }

  WireframeGeometry.prototype = Object.create( BufferGeometry.prototype );
  WireframeGeometry.prototype.constructor = WireframeGeometry;

  /**
   * @author zz85 / https://github.com/zz85
   * @author Mugen87 / https://github.com/Mugen87
   *
   * Parametric Surfaces Geometry
   * based on the brilliant article by @prideout https://prideout.net/blog/old/blog/index.html@p=44.html
   */

  // ParametricGeometry

  function ParametricGeometry( func, slices, stacks ) {

  	Geometry.call( this );

  	this.type = 'ParametricGeometry';

  	this.parameters = {
  		func: func,
  		slices: slices,
  		stacks: stacks
  	};

  	this.fromBufferGeometry( new ParametricBufferGeometry( func, slices, stacks ) );
  	this.mergeVertices();

  }

  ParametricGeometry.prototype = Object.create( Geometry.prototype );
  ParametricGeometry.prototype.constructor = ParametricGeometry;

  // ParametricBufferGeometry

  function ParametricBufferGeometry( func, slices, stacks ) {

  	BufferGeometry.call( this );

  	this.type = 'ParametricBufferGeometry';

  	this.parameters = {
  		func: func,
  		slices: slices,
  		stacks: stacks
  	};

  	// buffers

  	var indices = [];
  	var vertices = [];
  	var normals = [];
  	var uvs = [];

  	var EPS = 0.00001;

  	var normal = new Vector3();

  	var p0 = new Vector3(), p1 = new Vector3();
  	var pu = new Vector3(), pv = new Vector3();

  	if ( func.length < 3 ) {

  		console.error( 'THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.' );

  	}

  	// generate vertices, normals and uvs

  	var sliceCount = slices + 1;

  	for ( var i = 0; i <= stacks; i ++ ) {

  		var v = i / stacks;

  		for ( var j = 0; j <= slices; j ++ ) {

  			var u = j / slices;

  			// vertex

  			func( u, v, p0 );
  			vertices.push( p0.x, p0.y, p0.z );

  			// normal

  			// approximate tangent vectors via finite differences

  			if ( u - EPS >= 0 ) {

  				func( u - EPS, v, p1 );
  				pu.subVectors( p0, p1 );

  			} else {

  				func( u + EPS, v, p1 );
  				pu.subVectors( p1, p0 );

  			}

  			if ( v - EPS >= 0 ) {

  				func( u, v - EPS, p1 );
  				pv.subVectors( p0, p1 );

  			} else {

  				func( u, v + EPS, p1 );
  				pv.subVectors( p1, p0 );

  			}

  			// cross product of tangent vectors returns surface normal

  			normal.crossVectors( pu, pv ).normalize();
  			normals.push( normal.x, normal.y, normal.z );

  			// uv

  			uvs.push( u, v );

  		}

  	}

  	// generate indices

  	for ( var i$1 = 0; i$1 < stacks; i$1 ++ ) {

  		for ( var j$1 = 0; j$1 < slices; j$1 ++ ) {

  			var a = i$1 * sliceCount + j$1;
  			var b = i$1 * sliceCount + j$1 + 1;
  			var c = ( i$1 + 1 ) * sliceCount + j$1 + 1;
  			var d = ( i$1 + 1 ) * sliceCount + j$1;

  			// faces one and two

  			indices.push( a, b, d );
  			indices.push( b, c, d );

  		}

  	}

  	// build geometry

  	this.setIndex( indices );
  	this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
  	this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
  	this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

  }

  ParametricBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
  ParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;

  /**
   * @author clockworkgeek / https://github.com/clockworkgeek
   * @author timothypratley / https://github.com/timothypratley
   * @author WestLangley / http://github.com/WestLangley
   * @author Mugen87 / https://github.com/Mugen87
   */

  // PolyhedronGeometry

  function PolyhedronGeometry( vertices, indices, radius, detail ) {

  	Geometry.call( this );

  	this.type = 'PolyhedronGeometry';

  	this.parameters = {
  		vertices: vertices,
  		indices: indices,
  		radius: radius,
  		detail: detail
  	};

  	this.fromBufferGeometry( new PolyhedronBufferGeometry( vertices, indices, radius, detail ) );
  	this.mergeVertices();

  }

  PolyhedronGeometry.prototype = Object.create( Geometry.prototype );
  PolyhedronGeometry.prototype.constructor = PolyhedronGeometry;

  // PolyhedronBufferGeometry

  function PolyhedronBufferGeometry( vertices, indices, radius, detail ) {

  	BufferGeometry.call( this );

  	this.type = 'PolyhedronBufferGeometry';

  	this.parameters = {
  		vertices: vertices,
  		indices: indices,
  		radius: radius,
  		detail: detail
  	};

  	radius = radius || 1;
  	detail = detail || 0;

  	// default buffer data

  	var vertexBuffer = [];
  	var uvBuffer = [];

  	// the subdivision creates the vertex buffer data

  	subdivide( detail );

  	// all vertices should lie on a conceptual sphere with a given radius

  	applyRadius( radius );

  	// finally, create the uv data

  	generateUVs();

  	// build non-indexed geometry

  	this.setAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );
  	this.setAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );
  	this.setAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );

  	if ( detail === 0 ) {

  		this.computeVertexNormals(); // flat normals

  	} else {

  		this.normalizeNormals(); // smooth normals

  	}

  	// helper functions

  	function subdivide( detail ) {

  		var a = new Vector3();
  		var b = new Vector3();
  		var c = new Vector3();

  		// iterate over all faces and apply a subdivison with the given detail value

  		for ( var i = 0; i < indices.length; i += 3 ) {

  			// get the vertices of the face

  			getVertexByIndex( indices[ i + 0 ], a );
  			getVertexByIndex( indices[ i + 1 ], b );
  			getVertexByIndex( indices[ i + 2 ], c );

  			// perform subdivision

  			subdivideFace( a, b, c, detail );

  		}

  	}

  	function subdivideFace( a, b, c, detail ) {

  		var cols = Math.pow( 2, detail );

  		// we use this multidimensional array as a data structure for creating the subdivision

  		var v = [];

  		// construct all of the vertices for this subdivision

  		for ( var i = 0; i <= cols; i ++ ) {

  			v[ i ] = [];

  			var aj = a.clone().lerp( c, i / cols );
  			var bj = b.clone().lerp( c, i / cols );

  			var rows = cols - i;

  			for ( var j = 0; j <= rows; j ++ ) {

  				if ( j === 0 && i === cols ) {

  					v[ i ][ j ] = aj;

  				} else {

  					v[ i ][ j ] = aj.clone().lerp( bj, j / rows );

  				}

  			}

  		}

  		// construct all of the faces

  		for ( var i$1 = 0; i$1 < cols; i$1 ++ ) {

  			for ( var j$1 = 0; j$1 < 2 * ( cols - i$1 ) - 1; j$1 ++ ) {

  				var k = Math.floor( j$1 / 2 );

  				if ( j$1 % 2 === 0 ) {

  					pushVertex( v[ i$1 ][ k + 1 ] );
  					pushVertex( v[ i$1 + 1 ][ k ] );
  					pushVertex( v[ i$1 ][ k ] );

  				} else {

  					pushVertex( v[ i$1 ][ k + 1 ] );
  					pushVertex( v[ i$1 + 1 ][ k + 1 ] );
  					pushVertex( v[ i$1 + 1 ][ k ] );

  				}

  			}

  		}

  	}

  	function applyRadius( radius ) {

  		var vertex = new Vector3();

  		// iterate over the entire buffer and apply the radius to each vertex

  		for ( var i = 0; i < vertexBuffer.length; i += 3 ) {

  			vertex.x = vertexBuffer[ i + 0 ];
  			vertex.y = vertexBuffer[ i + 1 ];
  			vertex.z = vertexBuffer[ i + 2 ];

  			vertex.normalize().multiplyScalar( radius );

  			vertexBuffer[ i + 0 ] = vertex.x;
  			vertexBuffer[ i + 1 ] = vertex.y;
  			vertexBuffer[ i + 2 ] = vertex.z;

  		}

  	}

  	function generateUVs() {

  		var vertex = new Vector3();

  		for ( var i = 0; i < vertexBuffer.length; i += 3 ) {

  			vertex.x = vertexBuffer[ i + 0 ];
  			vertex.y = vertexBuffer[ i + 1 ];
  			vertex.z = vertexBuffer[ i + 2 ];

  			var u = azimuth( vertex ) / 2 / Math.PI + 0.5;
  			var v = inclination( vertex ) / Math.PI + 0.5;
  			uvBuffer.push( u, 1 - v );

  		}

  		correctUVs();

  		correctSeam();

  	}

  	function correctSeam() {

  		// handle case when face straddles the seam, see #3269

  		for ( var i = 0; i < uvBuffer.length; i += 6 ) {

  			// uv data of a single face

  			var x0 = uvBuffer[ i + 0 ];
  			var x1 = uvBuffer[ i + 2 ];
  			var x2 = uvBuffer[ i + 4 ];

  			var max = Math.max( x0, x1, x2 );
  			var min = Math.min( x0, x1, x2 );

  			// 0.9 is somewhat arbitrary

  			if ( max > 0.9 && min < 0.1 ) {

  				if ( x0 < 0.2 ) { uvBuffer[ i + 0 ] += 1; }
  				if ( x1 < 0.2 ) { uvBuffer[ i + 2 ] += 1; }
  				if ( x2 < 0.2 ) { uvBuffer[ i + 4 ] += 1; }

  			}

  		}

  	}

  	function pushVertex( vertex ) {

  		vertexBuffer.push( vertex.x, vertex.y, vertex.z );

  	}

  	function getVertexByIndex( index, vertex ) {

  		var stride = index * 3;

  		vertex.x = vertices[ stride + 0 ];
  		vertex.y = vertices[ stride + 1 ];
  		vertex.z = vertices[ stride + 2 ];

  	}

  	function correctUVs() {

  		var a = new Vector3();
  		var b = new Vector3();
  		var c = new Vector3();

  		var centroid = new Vector3();

  		var uvA = new Vector2();
  		var uvB = new Vector2();
  		var uvC = new Vector2();

  		for ( var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {

  			a.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );
  			b.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );
  			c.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );

  			uvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );
  			uvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );
  			uvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );

  			centroid.copy( a ).add( b ).add( c ).divideScalar( 3 );

  			var azi = azimuth( centroid );

  			correctUV( uvA, j + 0, a, azi );
  			correctUV( uvB, j + 2, b, azi );
  			correctUV( uvC, j + 4, c, azi );

  		}

  	}

  	function correctUV( uv, stride, vector, azimuth ) {

  		if ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {

  			uvBuffer[ stride ] = uv.x - 1;

  		}

  		if ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {

  			uvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;

  		}

  	}

  	// Angle around the Y axis, counter-clockwise when looking from above.

  	function azimuth( vector ) {

  		return Math.atan2( vector.z, - vector.x );

  	}


  	// Angle above the XZ plane.

  	function inclination( vector ) {

  		return Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );

  	}

  }

  PolyhedronBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
  PolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;

  /**
   * @author timothypratley / https://github.com/timothypratley
   * @author Mugen87 / https://github.com/Mugen87
   */

  // TetrahedronGeometry

  function TetrahedronGeometry( radius, detail ) {

  	Geometry.call( this );

  	this.type = 'TetrahedronGeometry';

  	this.parameters = {
  		radius: radius,
  		detail: detail
  	};

  	this.fromBufferGeometry( new TetrahedronBufferGeometry( radius, detail ) );
  	this.mergeVertices();

  }

  TetrahedronGeometry.prototype = Object.create( Geometry.prototype );
  TetrahedronGeometry.prototype.constructor = TetrahedronGeometry;

  // TetrahedronBufferGeometry

  function TetrahedronBufferGeometry( radius, detail ) {

  	var vertices = [
  		1, 1, 1, 	- 1, - 1, 1, 	- 1, 1, - 1, 	1, - 1, - 1
  	];

  	var indices = [
  		2, 1, 0, 	0, 3, 2,	1, 3, 0,	2, 3, 1
  	];

  	PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

  	this.type = 'TetrahedronBufferGeometry';

  	this.parameters = {
  		radius: radius,
  		detail: detail
  	};

  }

  TetrahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
  TetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;

  /**
   * @author timothypratley / https://github.com/timothypratley
   * @author Mugen87 / https://github.com/Mugen87
   */

  // OctahedronGeometry

  function OctahedronGeometry( radius, detail ) {

  	Geometry.call( this );

  	this.type = 'OctahedronGeometry';

  	this.parameters = {
  		radius: radius,
  		detail: detail
  	};

  	this.fromBufferGeometry( new OctahedronBufferGeometry( radius, detail ) );
  	this.mergeVertices();

  }

  OctahedronGeometry.prototype = Object.create( Geometry.prototype );
  OctahedronGeometry.prototype.constructor = OctahedronGeometry;

  // OctahedronBufferGeometry

  function OctahedronBufferGeometry( radius, detail ) {

  	var vertices = [
  		1, 0, 0, 	- 1, 0, 0,	0, 1, 0,
  		0, - 1, 0, 	0, 0, 1,	0, 0, - 1
  	];

  	var indices = [
  		0, 2, 4,	0, 4, 3,	0, 3, 5,
  		0, 5, 2,	1, 2, 5,	1, 5, 3,
  		1, 3, 4,	1, 4, 2
  	];

  	PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

  	this.type = 'OctahedronBufferGeometry';

  	this.parameters = {
  		radius: radius,
  		detail: detail
  	};

  }

  OctahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
  OctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;

  /**
   * @author timothypratley / https://github.com/timothypratley
   * @author Mugen87 / https://github.com/Mugen87
   */

  // IcosahedronGeometry

  function IcosahedronGeometry( radius, detail ) {

  	Geometry.call( this );

  	this.type = 'IcosahedronGeometry';

  	this.parameters = {
  		radius: radius,
  		detail: detail
  	};

  	this.fromBufferGeometry( new IcosahedronBufferGeometry( radius, detail ) );
  	this.mergeVertices();

  }

  IcosahedronGeometry.prototype = Object.create( Geometry.prototype );
  IcosahedronGeometry.prototype.constructor = IcosahedronGeometry;

  // IcosahedronBufferGeometry

  function IcosahedronBufferGeometry( radius, detail ) {

  	var t = ( 1 + Math.sqrt( 5 ) ) / 2;

  	var vertices = [
  		- 1, t, 0, 	1, t, 0, 	- 1, - t, 0, 	1, - t, 0,
  		 0, - 1, t, 	0, 1, t,	0, - 1, - t, 	0, 1, - t,
  		 t, 0, - 1, 	t, 0, 1, 	- t, 0, - 1, 	- t, 0, 1
  	];

  	var indices = [
  		 0, 11, 5, 	0, 5, 1, 	0, 1, 7, 	0, 7, 10, 	0, 10, 11,
  		 1, 5, 9, 	5, 11, 4,	11, 10, 2,	10, 7, 6,	7, 1, 8,
  		 3, 9, 4, 	3, 4, 2,	3, 2, 6,	3, 6, 8,	3, 8, 9,
  		 4, 9, 5, 	2, 4, 11,	6, 2, 10,	8, 6, 7,	9, 8, 1
  	];

  	PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

  	this.type = 'IcosahedronBufferGeometry';

  	this.parameters = {
  		radius: radius,
  		detail: detail
  	};

  }

  IcosahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
  IcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;

  /**
   * @author Abe Pazos / https://hamoid.com
   * @author Mugen87 / https://github.com/Mugen87
   */

  // DodecahedronGeometry

  function DodecahedronGeometry( radius, detail ) {

  	Geometry.call( this );

  	this.type = 'DodecahedronGeometry';

  	this.parameters = {
  		radius: radius,
  		detail: detail
  	};

  	this.fromBufferGeometry( new DodecahedronBufferGeometry( radius, detail ) );
  	this.mergeVertices();

  }

  DodecahedronGeometry.prototype = Object.create( Geometry.prototype );
  DodecahedronGeometry.prototype.constructor = DodecahedronGeometry;

  // DodecahedronBufferGeometry

  function DodecahedronBufferGeometry( radius, detail ) {

  	var t = ( 1 + Math.sqrt( 5 ) ) / 2;
  	var r = 1 / t;

  	var vertices = [

  		// (±1, ±1, ±1)
  		- 1, - 1, - 1,	- 1, - 1, 1,
  		- 1, 1, - 1, - 1, 1, 1,
  		1, - 1, - 1, 1, - 1, 1,
  		1, 1, - 1, 1, 1, 1,

  		// (0, ±1/φ, ±φ)
  		 0, - r, - t, 0, - r, t,
  		 0, r, - t, 0, r, t,

  		// (±1/φ, ±φ, 0)
  		- r, - t, 0, - r, t, 0,
  		 r, - t, 0, r, t, 0,

  		// (±φ, 0, ±1/φ)
  		- t, 0, - r, t, 0, - r,
  		- t, 0, r, t, 0, r
  	];

  	var indices = [
  		3, 11, 7, 	3, 7, 15, 	3, 15, 13,
  		7, 19, 17, 	7, 17, 6, 	7, 6, 15,
  		17, 4, 8, 	17, 8, 10, 	17, 10, 6,
  		8, 0, 16, 	8, 16, 2, 	8, 2, 10,
  		0, 12, 1, 	0, 1, 18, 	0, 18, 16,
  		6, 10, 2, 	6, 2, 13, 	6, 13, 15,
  		2, 16, 18, 	2, 18, 3, 	2, 3, 13,
  		18, 1, 9, 	18, 9, 11, 	18, 11, 3,
  		4, 14, 12, 	4, 12, 0, 	4, 0, 8,
  		11, 9, 5, 	11, 5, 19, 	11, 19, 7,
  		19, 5, 14, 	19, 14, 4, 	19, 4, 17,
  		1, 12, 14, 	1, 14, 5, 	1, 5, 9
  	];

  	PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

  	this.type = 'DodecahedronBufferGeometry';

  	this.parameters = {
  		radius: radius,
  		detail: detail
  	};

  }

  DodecahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
  DodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;

  /**
   * @author oosmoxiecode / https://github.com/oosmoxiecode
   * @author WestLangley / https://github.com/WestLangley
   * @author zz85 / https://github.com/zz85
   * @author miningold / https://github.com/miningold
   * @author jonobr1 / https://github.com/jonobr1
   * @author Mugen87 / https://github.com/Mugen87
   *
   */

  // TubeGeometry

  function TubeGeometry( path, tubularSegments, radius, radialSegments, closed, taper ) {

  	Geometry.call( this );

  	this.type = 'TubeGeometry';

  	this.parameters = {
  		path: path,
  		tubularSegments: tubularSegments,
  		radius: radius,
  		radialSegments: radialSegments,
  		closed: closed
  	};

  	if ( taper !== undefined ) { console.warn( 'THREE.TubeGeometry: taper has been removed.' ); }

  	var bufferGeometry = new TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed );

  	// expose internals

  	this.tangents = bufferGeometry.tangents;
  	this.normals = bufferGeometry.normals;
  	this.binormals = bufferGeometry.binormals;

  	// create geometry

  	this.fromBufferGeometry( bufferGeometry );
  	this.mergeVertices();

  }

  TubeGeometry.prototype = Object.create( Geometry.prototype );
  TubeGeometry.prototype.constructor = TubeGeometry;

  // TubeBufferGeometry

  function TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed ) {

  	BufferGeometry.call( this );

  	this.type = 'TubeBufferGeometry';

  	this.parameters = {
  		path: path,
  		tubularSegments: tubularSegments,
  		radius: radius,
  		radialSegments: radialSegments,
  		closed: closed
  	};

  	tubularSegments = tubularSegments || 64;
  	radius = radius || 1;
  	radialSegments = radialSegments || 8;
  	closed = closed || false;

  	var frames = path.computeFrenetFrames( tubularSegments, closed );

  	// expose internals

  	this.tangents = frames.tangents;
  	this.normals = frames.normals;
  	this.binormals = frames.binormals;

  	// helper variables

  	var vertex = new Vector3();
  	var normal = new Vector3();
  	var uv = new Vector2();
  	var P = new Vector3();

  	// buffer

  	var vertices = [];
  	var normals = [];
  	var uvs = [];
  	var indices = [];

  	// create buffer data

  	generateBufferData();

  	// build geometry

  	this.setIndex( indices );
  	this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
  	this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
  	this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

  	// functions

  	function generateBufferData() {

  		for ( var i = 0; i < tubularSegments; i ++ ) {

  			generateSegment( i );

  		}

  		// if the geometry is not closed, generate the last row of vertices and normals
  		// at the regular position on the given path
  		//
  		// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)

  		generateSegment( ( closed === false ) ? tubularSegments : 0 );

  		// uvs are generated in a separate function.
  		// this makes it easy compute correct values for closed geometries

  		generateUVs();

  		// finally create faces

  		generateIndices();

  	}

  	function generateSegment( i ) {

  		// we use getPointAt to sample evenly distributed points from the given path

  		P = path.getPointAt( i / tubularSegments, P );

  		// retrieve corresponding normal and binormal

  		var N = frames.normals[ i ];
  		var B = frames.binormals[ i ];

  		// generate normals and vertices for the current segment

  		for ( var j = 0; j <= radialSegments; j ++ ) {

  			var v = j / radialSegments * Math.PI * 2;

  			var sin = Math.sin( v );
  			var cos = - Math.cos( v );

  			// normal

  			normal.x = ( cos * N.x + sin * B.x );
  			normal.y = ( cos * N.y + sin * B.y );
  			normal.z = ( cos * N.z + sin * B.z );
  			normal.normalize();

  			normals.push( normal.x, normal.y, normal.z );

  			// vertex

  			vertex.x = P.x + radius * normal.x;
  			vertex.y = P.y + radius * normal.y;
  			vertex.z = P.z + radius * normal.z;

  			vertices.push( vertex.x, vertex.y, vertex.z );

  		}

  	}

  	function generateIndices() {

  		for ( var j = 1; j <= tubularSegments; j ++ ) {

  			for ( var i = 1; i <= radialSegments; i ++ ) {

  				var a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );
  				var b = ( radialSegments + 1 ) * j + ( i - 1 );
  				var c = ( radialSegments + 1 ) * j + i;
  				var d = ( radialSegments + 1 ) * ( j - 1 ) + i;

  				// faces

  				indices.push( a, b, d );
  				indices.push( b, c, d );

  			}

  		}

  	}

  	function generateUVs() {

  		for ( var i = 0; i <= tubularSegments; i ++ ) {

  			for ( var j = 0; j <= radialSegments; j ++ ) {

  				uv.x = i / tubularSegments;
  				uv.y = j / radialSegments;

  				uvs.push( uv.x, uv.y );

  			}

  		}

  	}

  }

  TubeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
  TubeBufferGeometry.prototype.constructor = TubeBufferGeometry;

  TubeBufferGeometry.prototype.toJSON = function () {

  	var data = BufferGeometry.prototype.toJSON.call( this );

  	data.path = this.parameters.path.toJSON();

  	return data;

  };

  /**
   * @author oosmoxiecode
   * @author Mugen87 / https://github.com/Mugen87
   *
   * based on http://www.blackpawn.com/texts/pqtorus/
   */

  // TorusKnotGeometry

  function TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {

  	Geometry.call( this );

  	this.type = 'TorusKnotGeometry';

  	this.parameters = {
  		radius: radius,
  		tube: tube,
  		tubularSegments: tubularSegments,
  		radialSegments: radialSegments,
  		p: p,
  		q: q
  	};

  	if ( heightScale !== undefined ) { console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' ); }

  	this.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );
  	this.mergeVertices();

  }

  TorusKnotGeometry.prototype = Object.create( Geometry.prototype );
  TorusKnotGeometry.prototype.constructor = TorusKnotGeometry;

  // TorusKnotBufferGeometry

  function TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {

  	BufferGeometry.call( this );

  	this.type = 'TorusKnotBufferGeometry';

  	this.parameters = {
  		radius: radius,
  		tube: tube,
  		tubularSegments: tubularSegments,
  		radialSegments: radialSegments,
  		p: p,
  		q: q
  	};

  	radius = radius || 1;
  	tube = tube || 0.4;
  	tubularSegments = Math.floor( tubularSegments ) || 64;
  	radialSegments = Math.floor( radialSegments ) || 8;
  	p = p || 2;
  	q = q || 3;

  	// buffers

  	var indices = [];
  	var vertices = [];
  	var normals = [];
  	var uvs = [];

  	// helper variables

  	var vertex = new Vector3();
  	var normal = new Vector3();

  	var P1 = new Vector3();
  	var P2 = new Vector3();

  	var B = new Vector3();
  	var T = new Vector3();
  	var N = new Vector3();

  	// generate vertices, normals and uvs

  	for ( var i = 0; i <= tubularSegments; ++ i ) {

  		// the radian "u" is used to calculate the position on the torus curve of the current tubular segement

  		var u = i / tubularSegments * p * Math.PI * 2;

  		// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.
  		// these points are used to create a special "coordinate space", which is necessary to calculate the correct vertex positions

  		calculatePositionOnCurve( u, p, q, radius, P1 );
  		calculatePositionOnCurve( u + 0.01, p, q, radius, P2 );

  		// calculate orthonormal basis

  		T.subVectors( P2, P1 );
  		N.addVectors( P2, P1 );
  		B.crossVectors( T, N );
  		N.crossVectors( B, T );

  		// normalize B, N. T can be ignored, we don't use it

  		B.normalize();
  		N.normalize();

  		for ( var j = 0; j <= radialSegments; ++ j ) {

  			// now calculate the vertices. they are nothing more than an extrusion of the torus curve.
  			// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.

  			var v = j / radialSegments * Math.PI * 2;
  			var cx = - tube * Math.cos( v );
  			var cy = tube * Math.sin( v );

  			// now calculate the final vertex position.
  			// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve

  			vertex.x = P1.x + ( cx * N.x + cy * B.x );
  			vertex.y = P1.y + ( cx * N.y + cy * B.y );
  			vertex.z = P1.z + ( cx * N.z + cy * B.z );

  			vertices.push( vertex.x, vertex.y, vertex.z );

  			// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)

  			normal.subVectors( vertex, P1 ).normalize();

  			normals.push( normal.x, normal.y, normal.z );

  			// uv

  			uvs.push( i / tubularSegments );
  			uvs.push( j / radialSegments );

  		}

  	}

  	// generate indices

  	for ( var j$1 = 1; j$1 <= tubularSegments; j$1 ++ ) {

  		for ( var i$1 = 1; i$1 <= radialSegments; i$1 ++ ) {

  			// indices

  			var a = ( radialSegments + 1 ) * ( j$1 - 1 ) + ( i$1 - 1 );
  			var b = ( radialSegments + 1 ) * j$1 + ( i$1 - 1 );
  			var c = ( radialSegments + 1 ) * j$1 + i$1;
  			var d = ( radialSegments + 1 ) * ( j$1 - 1 ) + i$1;

  			// faces

  			indices.push( a, b, d );
  			indices.push( b, c, d );

  		}

  	}

  	// build geometry

  	this.setIndex( indices );
  	this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
  	this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
  	this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

  	// this function calculates the current position on the torus curve

  	function calculatePositionOnCurve( u, p, q, radius, position ) {

  		var cu = Math.cos( u );
  		var su = Math.sin( u );
  		var quOverP = q / p * u;
  		var cs = Math.cos( quOverP );

  		position.x = radius * ( 2 + cs ) * 0.5 * cu;
  		position.y = radius * ( 2 + cs ) * su * 0.5;
  		position.z = radius * Math.sin( quOverP ) * 0.5;

  	}

  }

  TorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
  TorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;

  /**
   * @author oosmoxiecode
   * @author mrdoob / http://mrdoob.com/
   * @author Mugen87 / https://github.com/Mugen87
   */

  // TorusGeometry

  function TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {

  	Geometry.call( this );

  	this.type = 'TorusGeometry';

  	this.parameters = {
  		radius: radius,
  		tube: tube,
  		radialSegments: radialSegments,
  		tubularSegments: tubularSegments,
  		arc: arc
  	};

  	this.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );
  	this.mergeVertices();

  }

  TorusGeometry.prototype = Object.create( Geometry.prototype );
  TorusGeometry.prototype.constructor = TorusGeometry;

  // TorusBufferGeometry

  function TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {

  	BufferGeometry.call( this );

  	this.type = 'TorusBufferGeometry';

  	this.parameters = {
  		radius: radius,
  		tube: tube,
  		radialSegments: radialSegments,
  		tubularSegments: tubularSegments,
  		arc: arc
  	};

  	radius = radius || 1;
  	tube = tube || 0.4;
  	radialSegments = Math.floor( radialSegments ) || 8;
  	tubularSegments = Math.floor( tubularSegments ) || 6;
  	arc = arc || Math.PI * 2;

  	// buffers

  	var indices = [];
  	var vertices = [];
  	var normals = [];
  	var uvs = [];

  	// helper variables

  	var center = new Vector3();
  	var vertex = new Vector3();
  	var normal = new Vector3();

  	// generate vertices, normals and uvs

  	for ( var j = 0; j <= radialSegments; j ++ ) {

  		for ( var i = 0; i <= tubularSegments; i ++ ) {

  			var u = i / tubularSegments * arc;
  			var v = j / radialSegments * Math.PI * 2;

  			// vertex

  			vertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );
  			vertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );
  			vertex.z = tube * Math.sin( v );

  			vertices.push( vertex.x, vertex.y, vertex.z );

  			// normal

  			center.x = radius * Math.cos( u );
  			center.y = radius * Math.sin( u );
  			normal.subVectors( vertex, center ).normalize();

  			normals.push( normal.x, normal.y, normal.z );

  			// uv

  			uvs.push( i / tubularSegments );
  			uvs.push( j / radialSegments );

  		}

  	}

  	// generate indices

  	for ( var j$1 = 1; j$1 <= radialSegments; j$1 ++ ) {

  		for ( var i$1 = 1; i$1 <= tubularSegments; i$1 ++ ) {

  			// indices

  			var a = ( tubularSegments + 1 ) * j$1 + i$1 - 1;
  			var b = ( tubularSegments + 1 ) * ( j$1 - 1 ) + i$1 - 1;
  			var c = ( tubularSegments + 1 ) * ( j$1 - 1 ) + i$1;
  			var d = ( tubularSegments + 1 ) * j$1 + i$1;

  			// faces

  			indices.push( a, b, d );
  			indices.push( b, c, d );

  		}

  	}

  	// build geometry

  	this.setIndex( indices );
  	this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
  	this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
  	this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

  }

  TorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
  TorusBufferGeometry.prototype.constructor = TorusBufferGeometry;

  /**
   * @author Mugen87 / https://github.com/Mugen87
   * Port from https://github.com/mapbox/earcut (v2.2.2)
   */

  var Earcut = {

  	triangulate: function ( data, holeIndices, dim ) {

  		dim = dim || 2;

  		var hasHoles = holeIndices && holeIndices.length,
  			outerLen = hasHoles ? holeIndices[ 0 ] * dim : data.length,
  			outerNode = linkedList( data, 0, outerLen, dim, true ),
  			triangles = [];

  		if ( ! outerNode || outerNode.next === outerNode.prev ) { return triangles; }

  		var minX, minY, maxX, maxY, x, y, invSize;

  		if ( hasHoles ) { outerNode = eliminateHoles( data, holeIndices, outerNode, dim ); }

  		// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox
  		if ( data.length > 80 * dim ) {

  			minX = maxX = data[ 0 ];
  			minY = maxY = data[ 1 ];

  			for ( var i = dim; i < outerLen; i += dim ) {

  				x = data[ i ];
  				y = data[ i + 1 ];
  				if ( x < minX ) { minX = x; }
  				if ( y < minY ) { minY = y; }
  				if ( x > maxX ) { maxX = x; }
  				if ( y > maxY ) { maxY = y; }

  			}

  			// minX, minY and invSize are later used to transform coords into integers for z-order calculation
  			invSize = Math.max( maxX - minX, maxY - minY );
  			invSize = invSize !== 0 ? 1 / invSize : 0;

  		}

  		earcutLinked( outerNode, triangles, dim, minX, minY, invSize );

  		return triangles;

  	}

  };

  // create a circular doubly linked list from polygon points in the specified winding order
  function linkedList( data, start, end, dim, clockwise ) {

  	var i, last;

  	if ( clockwise === ( signedArea( data, start, end, dim ) > 0 ) ) {

  		for ( i = start; i < end; i += dim ) { last = insertNode( i, data[ i ], data[ i + 1 ], last ); }

  	} else {

  		for ( i = end - dim; i >= start; i -= dim ) { last = insertNode( i, data[ i ], data[ i + 1 ], last ); }

  	}

  	if ( last && equals( last, last.next ) ) {

  		removeNode( last );
  		last = last.next;

  	}

  	return last;

  }

  // eliminate colinear or duplicate points
  function filterPoints( start, end ) {

  	if ( ! start ) { return start; }
  	if ( ! end ) { end = start; }

  	var p = start,
  		again;
  	do {

  		again = false;

  		if ( ! p.steiner && ( equals( p, p.next ) || area( p.prev, p, p.next ) === 0 ) ) {

  			removeNode( p );
  			p = end = p.prev;
  			if ( p === p.next ) { break; }
  			again = true;

  		} else {

  			p = p.next;

  		}

  	} while ( again || p !== end );

  	return end;

  }

  // main ear slicing loop which triangulates a polygon (given as a linked list)
  function earcutLinked( ear, triangles, dim, minX, minY, invSize, pass ) {

  	if ( ! ear ) { return; }

  	// interlink polygon nodes in z-order
  	if ( ! pass && invSize ) { indexCurve( ear, minX, minY, invSize ); }

  	var stop = ear,
  		prev, next;

  	// iterate through ears, slicing them one by one
  	while ( ear.prev !== ear.next ) {

  		prev = ear.prev;
  		next = ear.next;

  		if ( invSize ? isEarHashed( ear, minX, minY, invSize ) : isEar( ear ) ) {

  			// cut off the triangle
  			triangles.push( prev.i / dim );
  			triangles.push( ear.i / dim );
  			triangles.push( next.i / dim );

  			removeNode( ear );

  			// skipping the next vertex leads to less sliver triangles
  			ear = next.next;
  			stop = next.next;

  			continue;

  		}

  		ear = next;

  		// if we looped through the whole remaining polygon and can't find any more ears
  		if ( ear === stop ) {

  			// try filtering points and slicing again
  			if ( ! pass ) {

  				earcutLinked( filterPoints( ear ), triangles, dim, minX, minY, invSize, 1 );

  				// if this didn't work, try curing all small self-intersections locally

  			} else if ( pass === 1 ) {

  				ear = cureLocalIntersections( filterPoints( ear ), triangles, dim );
  				earcutLinked( ear, triangles, dim, minX, minY, invSize, 2 );

  				// as a last resort, try splitting the remaining polygon into two

  			} else if ( pass === 2 ) {

  				splitEarcut( ear, triangles, dim, minX, minY, invSize );

  			}

  			break;

  		}

  	}

  }

  // check whether a polygon node forms a valid ear with adjacent nodes
  function isEar( ear ) {

  	var a = ear.prev,
  		b = ear,
  		c = ear.next;

  	if ( area( a, b, c ) >= 0 ) { return false; } // reflex, can't be an ear

  	// now make sure we don't have other points inside the potential ear
  	var p = ear.next.next;

  	while ( p !== ear.prev ) {

  		if ( pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&
  			area( p.prev, p, p.next ) >= 0 ) { return false; }
  		p = p.next;

  	}

  	return true;

  }

  function isEarHashed( ear, minX, minY, invSize ) {

  	var a = ear.prev,
  		b = ear,
  		c = ear.next;

  	if ( area( a, b, c ) >= 0 ) { return false; } // reflex, can't be an ear

  	// triangle bbox; min & max are calculated like this for speed
  	var minTX = a.x < b.x ? ( a.x < c.x ? a.x : c.x ) : ( b.x < c.x ? b.x : c.x ),
  		minTY = a.y < b.y ? ( a.y < c.y ? a.y : c.y ) : ( b.y < c.y ? b.y : c.y ),
  		maxTX = a.x > b.x ? ( a.x > c.x ? a.x : c.x ) : ( b.x > c.x ? b.x : c.x ),
  		maxTY = a.y > b.y ? ( a.y > c.y ? a.y : c.y ) : ( b.y > c.y ? b.y : c.y );

  	// z-order range for the current triangle bbox;
  	var minZ = zOrder( minTX, minTY, minX, minY, invSize ),
  		maxZ = zOrder( maxTX, maxTY, minX, minY, invSize );

  	var p = ear.prevZ,
  		n = ear.nextZ;

  	// look for points inside the triangle in both directions
  	while ( p && p.z >= minZ && n && n.z <= maxZ ) {

  		if ( p !== ear.prev && p !== ear.next &&
  			pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&
  			area( p.prev, p, p.next ) >= 0 ) { return false; }
  		p = p.prevZ;

  		if ( n !== ear.prev && n !== ear.next &&
  			pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&
  			area( n.prev, n, n.next ) >= 0 ) { return false; }
  		n = n.nextZ;

  	}

  	// look for remaining points in decreasing z-order
  	while ( p && p.z >= minZ ) {

  		if ( p !== ear.prev && p !== ear.next &&
  			pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&
  			area( p.prev, p, p.next ) >= 0 ) { return false; }
  		p = p.prevZ;

  	}

  	// look for remaining points in increasing z-order
  	while ( n && n.z <= maxZ ) {

  		if ( n !== ear.prev && n !== ear.next &&
  			pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&
  			area( n.prev, n, n.next ) >= 0 ) { return false; }
  		n = n.nextZ;

  	}

  	return true;

  }

  // go through all polygon nodes and cure small local self-intersections
  function cureLocalIntersections( start, triangles, dim ) {

  	var p = start;
  	do {

  		var a = p.prev,
  			b = p.next.next;

  		if ( ! equals( a, b ) && intersects( a, p, p.next, b ) && locallyInside( a, b ) && locallyInside( b, a ) ) {

  			triangles.push( a.i / dim );
  			triangles.push( p.i / dim );
  			triangles.push( b.i / dim );

  			// remove two nodes involved
  			removeNode( p );
  			removeNode( p.next );

  			p = start = b;

  		}

  		p = p.next;

  	} while ( p !== start );

  	return filterPoints( p );

  }

  // try splitting polygon into two and triangulate them independently
  function splitEarcut( start, triangles, dim, minX, minY, invSize ) {

  	// look for a valid diagonal that divides the polygon into two
  	var a = start;
  	do {

  		var b = a.next.next;
  		while ( b !== a.prev ) {

  			if ( a.i !== b.i && isValidDiagonal( a, b ) ) {

  				// split the polygon in two by the diagonal
  				var c = splitPolygon( a, b );

  				// filter colinear points around the cuts
  				a = filterPoints( a, a.next );
  				c = filterPoints( c, c.next );

  				// run earcut on each half
  				earcutLinked( a, triangles, dim, minX, minY, invSize );
  				earcutLinked( c, triangles, dim, minX, minY, invSize );
  				return;

  			}

  			b = b.next;

  		}

  		a = a.next;

  	} while ( a !== start );

  }

  // link every hole into the outer loop, producing a single-ring polygon without holes
  function eliminateHoles( data, holeIndices, outerNode, dim ) {

  	var queue = [],
  		i, len, start, end, list;

  	for ( i = 0, len = holeIndices.length; i < len; i ++ ) {

  		start = holeIndices[ i ] * dim;
  		end = i < len - 1 ? holeIndices[ i + 1 ] * dim : data.length;
  		list = linkedList( data, start, end, dim, false );
  		if ( list === list.next ) { list.steiner = true; }
  		queue.push( getLeftmost( list ) );

  	}

  	queue.sort( compareX );

  	// process holes from left to right
  	for ( i = 0; i < queue.length; i ++ ) {

  		eliminateHole( queue[ i ], outerNode );
  		outerNode = filterPoints( outerNode, outerNode.next );

  	}

  	return outerNode;

  }

  function compareX( a, b ) {

  	return a.x - b.x;

  }

  // find a bridge between vertices that connects hole with an outer ring and and link it
  function eliminateHole( hole, outerNode ) {

  	outerNode = findHoleBridge( hole, outerNode );
  	if ( outerNode ) {

  		var b = splitPolygon( outerNode, hole );

  		// filter collinear points around the cuts
  		filterPoints( outerNode, outerNode.next );
  		filterPoints( b, b.next );

  	}

  }

  // David Eberly's algorithm for finding a bridge between hole and outer polygon
  function findHoleBridge( hole, outerNode ) {

  	var p = outerNode,
  		hx = hole.x,
  		hy = hole.y,
  		qx = - Infinity,
  		m;

  	// find a segment intersected by a ray from the hole's leftmost point to the left;
  	// segment's endpoint with lesser x will be potential connection point
  	do {

  		if ( hy <= p.y && hy >= p.next.y && p.next.y !== p.y ) {

  			var x = p.x + ( hy - p.y ) * ( p.next.x - p.x ) / ( p.next.y - p.y );
  			if ( x <= hx && x > qx ) {

  				qx = x;
  				if ( x === hx ) {

  					if ( hy === p.y ) { return p; }
  					if ( hy === p.next.y ) { return p.next; }

  				}

  				m = p.x < p.next.x ? p : p.next;

  			}

  		}

  		p = p.next;

  	} while ( p !== outerNode );

  	if ( ! m ) { return null; }

  	if ( hx === qx ) { return m; } // hole touches outer segment; pick leftmost endpoint

  	// look for points inside the triangle of hole point, segment intersection and endpoint;
  	// if there are no points found, we have a valid connection;
  	// otherwise choose the point of the minimum angle with the ray as connection point

  	var stop = m,
  		mx = m.x,
  		my = m.y,
  		tanMin = Infinity,
  		tan;

  	p = m;

  	do {

  		if ( hx >= p.x && p.x >= mx && hx !== p.x &&
  				pointInTriangle( hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y ) ) {

  			tan = Math.abs( hy - p.y ) / ( hx - p.x ); // tangential

  			if ( locallyInside( p, hole ) && ( tan < tanMin || ( tan === tanMin && ( p.x > m.x || ( p.x === m.x && sectorContainsSector( m, p ) ) ) ) ) ) {

  				m = p;
  				tanMin = tan;

  			}

  		}

  		p = p.next;

  	} while ( p !== stop );

  	return m;

  }

  // whether sector in vertex m contains sector in vertex p in the same coordinates
  function sectorContainsSector( m, p ) {

  	return area( m.prev, m, p.prev ) < 0 && area( p.next, m, m.next ) < 0;

  }

  // interlink polygon nodes in z-order
  function indexCurve( start, minX, minY, invSize ) {

  	var p = start;
  	do {

  		if ( p.z === null ) { p.z = zOrder( p.x, p.y, minX, minY, invSize ); }
  		p.prevZ = p.prev;
  		p.nextZ = p.next;
  		p = p.next;

  	} while ( p !== start );

  	p.prevZ.nextZ = null;
  	p.prevZ = null;

  	sortLinked( p );

  }

  // Simon Tatham's linked list merge sort algorithm
  // http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
  function sortLinked( list ) {

  	var i, p, q, e, tail, numMerges, pSize, qSize,
  		inSize = 1;

  	do {

  		p = list;
  		list = null;
  		tail = null;
  		numMerges = 0;

  		while ( p ) {

  			numMerges ++;
  			q = p;
  			pSize = 0;
  			for ( i = 0; i < inSize; i ++ ) {

  				pSize ++;
  				q = q.nextZ;
  				if ( ! q ) { break; }

  			}

  			qSize = inSize;

  			while ( pSize > 0 || ( qSize > 0 && q ) ) {

  				if ( pSize !== 0 && ( qSize === 0 || ! q || p.z <= q.z ) ) {

  					e = p;
  					p = p.nextZ;
  					pSize --;

  				} else {

  					e = q;
  					q = q.nextZ;
  					qSize --;

  				}

  				if ( tail ) { tail.nextZ = e; }
  				else { list = e; }

  				e.prevZ = tail;
  				tail = e;

  			}

  			p = q;

  		}

  		tail.nextZ = null;
  		inSize *= 2;

  	} while ( numMerges > 1 );

  	return list;

  }

  // z-order of a point given coords and inverse of the longer side of data bbox
  function zOrder( x, y, minX, minY, invSize ) {

  	// coords are transformed into non-negative 15-bit integer range
  	x = 32767 * ( x - minX ) * invSize;
  	y = 32767 * ( y - minY ) * invSize;

  	x = ( x | ( x << 8 ) ) & 0x00FF00FF;
  	x = ( x | ( x << 4 ) ) & 0x0F0F0F0F;
  	x = ( x | ( x << 2 ) ) & 0x33333333;
  	x = ( x | ( x << 1 ) ) & 0x55555555;

  	y = ( y | ( y << 8 ) ) & 0x00FF00FF;
  	y = ( y | ( y << 4 ) ) & 0x0F0F0F0F;
  	y = ( y | ( y << 2 ) ) & 0x33333333;
  	y = ( y | ( y << 1 ) ) & 0x55555555;

  	return x | ( y << 1 );

  }

  // find the leftmost node of a polygon ring
  function getLeftmost( start ) {

  	var p = start,
  		leftmost = start;
  	do {

  		if ( p.x < leftmost.x || ( p.x === leftmost.x && p.y < leftmost.y ) ) { leftmost = p; }
  		p = p.next;

  	} while ( p !== start );

  	return leftmost;

  }

  // check if a point lies within a convex triangle
  function pointInTriangle( ax, ay, bx, by, cx, cy, px, py ) {

  	return ( cx - px ) * ( ay - py ) - ( ax - px ) * ( cy - py ) >= 0 &&
  			( ax - px ) * ( by - py ) - ( bx - px ) * ( ay - py ) >= 0 &&
  			( bx - px ) * ( cy - py ) - ( cx - px ) * ( by - py ) >= 0;

  }

  // check if a diagonal between two polygon nodes is valid (lies in polygon interior)
  function isValidDiagonal( a, b ) {

  	return a.next.i !== b.i && a.prev.i !== b.i && ! intersectsPolygon( a, b ) && // dones't intersect other edges
  		( locallyInside( a, b ) && locallyInside( b, a ) && middleInside( a, b ) && // locally visible
  		( area( a.prev, a, b.prev ) || area( a, b.prev, b ) ) || // does not create opposite-facing sectors
  		equals( a, b ) && area( a.prev, a, a.next ) > 0 && area( b.prev, b, b.next ) > 0 ); // special zero-length case

  }

  // signed area of a triangle
  function area( p, q, r ) {

  	return ( q.y - p.y ) * ( r.x - q.x ) - ( q.x - p.x ) * ( r.y - q.y );

  }

  // check if two points are equal
  function equals( p1, p2 ) {

  	return p1.x === p2.x && p1.y === p2.y;

  }

  // check if two segments intersect
  function intersects( p1, q1, p2, q2 ) {

  	var o1 = sign( area( p1, q1, p2 ) );
  	var o2 = sign( area( p1, q1, q2 ) );
  	var o3 = sign( area( p2, q2, p1 ) );
  	var o4 = sign( area( p2, q2, q1 ) );

  	if ( o1 !== o2 && o3 !== o4 ) { return true; } // general case

  	if ( o1 === 0 && onSegment( p1, p2, q1 ) ) { return true; } // p1, q1 and p2 are collinear and p2 lies on p1q1
  	if ( o2 === 0 && onSegment( p1, q2, q1 ) ) { return true; } // p1, q1 and q2 are collinear and q2 lies on p1q1
  	if ( o3 === 0 && onSegment( p2, p1, q2 ) ) { return true; } // p2, q2 and p1 are collinear and p1 lies on p2q2
  	if ( o4 === 0 && onSegment( p2, q1, q2 ) ) { return true; } // p2, q2 and q1 are collinear and q1 lies on p2q2

  	return false;

  }

  // for collinear points p, q, r, check if point q lies on segment pr
  function onSegment( p, q, r ) {

  	return q.x <= Math.max( p.x, r.x ) && q.x >= Math.min( p.x, r.x ) && q.y <= Math.max( p.y, r.y ) && q.y >= Math.min( p.y, r.y );

  }

  function sign( num ) {

  	return num > 0 ? 1 : num < 0 ? - 1 : 0;

  }

  // check if a polygon diagonal intersects any polygon segments
  function intersectsPolygon( a, b ) {

  	var p = a;
  	do {

  		if ( p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&
  				intersects( p, p.next, a, b ) ) { return true; }
  		p = p.next;

  	} while ( p !== a );

  	return false;

  }

  // check if a polygon diagonal is locally inside the polygon
  function locallyInside( a, b ) {

  	return area( a.prev, a, a.next ) < 0 ?
  		area( a, b, a.next ) >= 0 && area( a, a.prev, b ) >= 0 :
  		area( a, b, a.prev ) < 0 || area( a, a.next, b ) < 0;

  }

  // check if the middle point of a polygon diagonal is inside the polygon
  function middleInside( a, b ) {

  	var p = a,
  		inside = false,
  		px = ( a.x + b.x ) / 2,
  		py = ( a.y + b.y ) / 2;
  	do {

  		if ( ( ( p.y > py ) !== ( p.next.y > py ) ) && p.next.y !== p.y &&
  				( px < ( p.next.x - p.x ) * ( py - p.y ) / ( p.next.y - p.y ) + p.x ) )
  			{ inside = ! inside; }
  		p = p.next;

  	} while ( p !== a );

  	return inside;

  }

  // link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
  // if one belongs to the outer ring and another to a hole, it merges it into a single ring
  function splitPolygon( a, b ) {

  	var a2 = new Node( a.i, a.x, a.y ),
  		b2 = new Node( b.i, b.x, b.y ),
  		an = a.next,
  		bp = b.prev;

  	a.next = b;
  	b.prev = a;

  	a2.next = an;
  	an.prev = a2;

  	b2.next = a2;
  	a2.prev = b2;

  	bp.next = b2;
  	b2.prev = bp;

  	return b2;

  }

  // create a node and optionally link it with previous one (in a circular doubly linked list)
  function insertNode( i, x, y, last ) {

  	var p = new Node( i, x, y );

  	if ( ! last ) {

  		p.prev = p;
  		p.next = p;

  	} else {

  		p.next = last.next;
  		p.prev = last;
  		last.next.prev = p;
  		last.next = p;

  	}

  	return p;

  }

  function removeNode( p ) {

  	p.next.prev = p.prev;
  	p.prev.next = p.next;

  	if ( p.prevZ ) { p.prevZ.nextZ = p.nextZ; }
  	if ( p.nextZ ) { p.nextZ.prevZ = p.prevZ; }

  }

  function Node( i, x, y ) {

  	// vertex index in coordinates array
  	this.i = i;

  	// vertex coordinates
  	this.x = x;
  	this.y = y;

  	// previous and next vertex nodes in a polygon ring
  	this.prev = null;
  	this.next = null;

  	// z-order curve value
  	this.z = null;

  	// previous and next nodes in z-order
  	this.prevZ = null;
  	this.nextZ = null;

  	// indicates whether this is a steiner point
  	this.steiner = false;

  }

  function signedArea( data, start, end, dim ) {

  	var sum = 0;
  	for ( var i = start, j = end - dim; i < end; i += dim ) {

  		sum += ( data[ j ] - data[ i ] ) * ( data[ i + 1 ] + data[ j + 1 ] );
  		j = i;

  	}

  	return sum;

  }

  /**
   * @author zz85 / http://www.lab4games.net/zz85/blog
   */

  var ShapeUtils = {

  	// calculate area of the contour polygon

  	area: function ( contour ) {

  		var n = contour.length;
  		var a = 0.0;

  		for ( var p = n - 1, q = 0; q < n; p = q ++ ) {

  			a += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;

  		}

  		return a * 0.5;

  	},

  	isClockWise: function ( pts ) {

  		return ShapeUtils.area( pts ) < 0;

  	},

  	triangulateShape: function ( contour, holes ) {

  		var vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]
  		var holeIndices = []; // array of hole indices
  		var faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]

  		removeDupEndPts( contour );
  		addContour( vertices, contour );

  		//

  		var holeIndex = contour.length;

  		holes.forEach( removeDupEndPts );

  		for ( var i = 0; i < holes.length; i ++ ) {

  			holeIndices.push( holeIndex );
  			holeIndex += holes[ i ].length;
  			addContour( vertices, holes[ i ] );

  		}

  		//

  		var triangles = Earcut.triangulate( vertices, holeIndices );

  		//

  		for ( var i$1 = 0; i$1 < triangles.length; i$1 += 3 ) {

  			faces.push( triangles.slice( i$1, i$1 + 3 ) );

  		}

  		return faces;

  	}

  };

  function removeDupEndPts( points ) {

  	var l = points.length;

  	if ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {

  		points.pop();

  	}

  }

  function addContour( vertices, contour ) {

  	for ( var i = 0; i < contour.length; i ++ ) {

  		vertices.push( contour[ i ].x );
  		vertices.push( contour[ i ].y );

  	}

  }

  /**
   * @author zz85 / http://www.lab4games.net/zz85/blog
   *
   * Creates extruded geometry from a path shape.
   *
   * parameters = {
   *
   *  curveSegments: <int>, // number of points on the curves
   *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too
   *  depth: <float>, // Depth to extrude the shape
   *
   *  bevelEnabled: <bool>, // turn on bevel
   *  bevelThickness: <float>, // how deep into the original shape bevel goes
   *  bevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel
   *  bevelOffset: <float>, // how far from shape outline does bevel start
   *  bevelSegments: <int>, // number of bevel layers
   *
   *  extrudePath: <THREE.Curve> // curve to extrude shape along
   *
   *  UVGenerator: <Object> // object that provides UV generator functions
   *
   * }
   */

  // ExtrudeGeometry

  function ExtrudeGeometry( shapes, options ) {

  	Geometry.call( this );

  	this.type = 'ExtrudeGeometry';

  	this.parameters = {
  		shapes: shapes,
  		options: options
  	};

  	this.fromBufferGeometry( new ExtrudeBufferGeometry( shapes, options ) );
  	this.mergeVertices();

  }

  ExtrudeGeometry.prototype = Object.create( Geometry.prototype );
  ExtrudeGeometry.prototype.constructor = ExtrudeGeometry;

  ExtrudeGeometry.prototype.toJSON = function () {

  	var data = Geometry.prototype.toJSON.call( this );

  	var shapes = this.parameters.shapes;
  	var options = this.parameters.options;

  	return toJSON( shapes, options, data );

  };

  // ExtrudeBufferGeometry

  function ExtrudeBufferGeometry( shapes, options ) {

  	BufferGeometry.call( this );

  	this.type = 'ExtrudeBufferGeometry';

  	this.parameters = {
  		shapes: shapes,
  		options: options
  	};

  	shapes = Array.isArray( shapes ) ? shapes : [ shapes ];

  	var scope = this;

  	var verticesArray = [];
  	var uvArray = [];

  	for ( var i = 0, l = shapes.length; i < l; i ++ ) {

  		var shape = shapes[ i ];
  		addShape( shape );

  	}

  	// build geometry

  	this.setAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );
  	this.setAttribute( 'uv', new Float32BufferAttribute( uvArray, 2 ) );

  	this.computeVertexNormals();

  	// functions

  	function addShape( shape ) {

  		var placeholder = [];

  		// options

  		var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;
  		var steps = options.steps !== undefined ? options.steps : 1;
  		var depth = options.depth !== undefined ? options.depth : 100;

  		var bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;
  		var bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6;
  		var bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2;
  		var bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;
  		var bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;

  		var extrudePath = options.extrudePath;

  		var uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;

  		// deprecated options

  		if ( options.amount !== undefined ) {

  			console.warn( 'THREE.ExtrudeBufferGeometry: amount has been renamed to depth.' );
  			depth = options.amount;

  		}

  		//

  		var extrudePts, extrudeByPath = false;
  		var splineTube, binormal, normal, position2;

  		if ( extrudePath ) {

  			extrudePts = extrudePath.getSpacedPoints( steps );

  			extrudeByPath = true;
  			bevelEnabled = false; // bevels not supported for path extrusion

  			// SETUP TNB variables

  			// TODO1 - have a .isClosed in spline?

  			splineTube = extrudePath.computeFrenetFrames( steps, false );

  			// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);

  			binormal = new Vector3();
  			normal = new Vector3();
  			position2 = new Vector3();

  		}

  		// Safeguards if bevels are not enabled

  		if ( ! bevelEnabled ) {

  			bevelSegments = 0;
  			bevelThickness = 0;
  			bevelSize = 0;
  			bevelOffset = 0;

  		}

  		// Variables initialization

  		var shapePoints = shape.extractPoints( curveSegments );

  		var vertices = shapePoints.shape;
  		var holes = shapePoints.holes;

  		var reverse = ! ShapeUtils.isClockWise( vertices );

  		if ( reverse ) {

  			vertices = vertices.reverse();

  			// Maybe we should also check if holes are in the opposite direction, just to be safe ...

  			for ( var h = 0, hl = holes.length; h < hl; h ++ ) {

  				var ahole = holes[ h ];

  				if ( ShapeUtils.isClockWise( ahole ) ) {

  					holes[ h ] = ahole.reverse();

  				}

  			}

  		}


  		var faces = ShapeUtils.triangulateShape( vertices, holes );

  		/* Vertices */

  		var contour = vertices; // vertices has all points but contour has only points of circumference

  		for ( var h$1 = 0, hl$1 = holes.length; h$1 < hl$1; h$1 ++ ) {

  			var ahole$1 = holes[ h$1 ];

  			vertices = vertices.concat( ahole$1 );

  		}


  		function scalePt2( pt, vec, size ) {

  			if ( ! vec ) { console.error( "THREE.ExtrudeGeometry: vec does not exist" ); }

  			return vec.clone().multiplyScalar( size ).add( pt );

  		}

  		var vlen = vertices.length, flen = faces.length;


  		// Find directions for point movement


  		function getBevelVec( inPt, inPrev, inNext ) {

  			// computes for inPt the corresponding point inPt' on a new contour
  			//   shifted by 1 unit (length of normalized vector) to the left
  			// if we walk along contour clockwise, this new contour is outside the old one
  			//
  			// inPt' is the intersection of the two lines parallel to the two
  			//  adjacent edges of inPt at a distance of 1 unit on the left side.

  			var v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt

  			// good reading for geometry algorithms (here: line-line intersection)
  			// http://geomalgorithms.com/a05-_intersect-1.html

  			var v_prev_x = inPt.x - inPrev.x,
  				v_prev_y = inPt.y - inPrev.y;
  			var v_next_x = inNext.x - inPt.x,
  				v_next_y = inNext.y - inPt.y;

  			var v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );

  			// check for collinear edges
  			var collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );

  			if ( Math.abs( collinear0 ) > Number.EPSILON ) {

  				// not collinear

  				// length of vectors for normalizing

  				var v_prev_len = Math.sqrt( v_prev_lensq );
  				var v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );

  				// shift adjacent points by unit vectors to the left

  				var ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );
  				var ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );

  				var ptNextShift_x = ( inNext.x - v_next_y / v_next_len );
  				var ptNextShift_y = ( inNext.y + v_next_x / v_next_len );

  				// scaling factor for v_prev to intersection point

  				var sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -
  						( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /
  					( v_prev_x * v_next_y - v_prev_y * v_next_x );

  				// vector from inPt to intersection point

  				v_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );
  				v_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );

  				// Don't normalize!, otherwise sharp corners become ugly
  				//  but prevent crazy spikes
  				var v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );
  				if ( v_trans_lensq <= 2 ) {

  					return new Vector2( v_trans_x, v_trans_y );

  				} else {

  					shrink_by = Math.sqrt( v_trans_lensq / 2 );

  				}

  			} else {

  				// handle special case of collinear edges

  				var direction_eq = false; // assumes: opposite

  				if ( v_prev_x > Number.EPSILON ) {

  					if ( v_next_x > Number.EPSILON ) {

  						direction_eq = true;

  					}

  				} else {

  					if ( v_prev_x < - Number.EPSILON ) {

  						if ( v_next_x < - Number.EPSILON ) {

  							direction_eq = true;

  						}

  					} else {

  						if ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {

  							direction_eq = true;

  						}

  					}

  				}

  				if ( direction_eq ) {

  					// console.log("Warning: lines are a straight sequence");
  					v_trans_x = - v_prev_y;
  					v_trans_y = v_prev_x;
  					shrink_by = Math.sqrt( v_prev_lensq );

  				} else {

  					// console.log("Warning: lines are a straight spike");
  					v_trans_x = v_prev_x;
  					v_trans_y = v_prev_y;
  					shrink_by = Math.sqrt( v_prev_lensq / 2 );

  				}

  			}

  			return new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );

  		}


  		var contourMovements = [];

  		for ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {

  			if ( j === il ) { j = 0; }
  			if ( k === il ) { k = 0; }

  			//  (j)---(i)---(k)
  			// console.log('i,j,k', i, j , k)

  			contourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );

  		}

  		var holesMovements = [];
  		var oneHoleMovements, verticesMovements = contourMovements.concat();

  		for ( var h$2 = 0, hl$2 = holes.length; h$2 < hl$2; h$2 ++ ) {

  			var ahole$2 = holes[ h$2 ];

  			oneHoleMovements = [];

  			for ( var i$1 = 0, il$1 = ahole$2.length, j$1 = il$1 - 1, k$1 = i$1 + 1; i$1 < il$1; i$1 ++, j$1 ++, k$1 ++ ) {

  				if ( j$1 === il$1 ) { j$1 = 0; }
  				if ( k$1 === il$1 ) { k$1 = 0; }

  				//  (j)---(i)---(k)
  				oneHoleMovements[ i$1 ] = getBevelVec( ahole$2[ i$1 ], ahole$2[ j$1 ], ahole$2[ k$1 ] );

  			}

  			holesMovements.push( oneHoleMovements );
  			verticesMovements = verticesMovements.concat( oneHoleMovements );

  		}


  		// Loop bevelSegments, 1 for the front, 1 for the back

  		for ( var b = 0; b < bevelSegments; b ++ ) {

  			//for ( b = bevelSegments; b > 0; b -- ) {

  			var t = b / bevelSegments;
  			var z = bevelThickness * Math.cos( t * Math.PI / 2 );
  			var bs$1 = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;

  			// contract shape

  			for ( var i$2 = 0, il$2 = contour.length; i$2 < il$2; i$2 ++ ) {

  				var vert = scalePt2( contour[ i$2 ], contourMovements[ i$2 ], bs$1 );

  				v( vert.x, vert.y, - z );

  			}

  			// expand holes

  			for ( var h$3 = 0, hl$3 = holes.length; h$3 < hl$3; h$3 ++ ) {

  				var ahole$3 = holes[ h$3 ];
  				oneHoleMovements = holesMovements[ h$3 ];

  				for ( var i$3 = 0, il$3 = ahole$3.length; i$3 < il$3; i$3 ++ ) {

  					var vert$1 = scalePt2( ahole$3[ i$3 ], oneHoleMovements[ i$3 ], bs$1 );

  					v( vert$1.x, vert$1.y, - z );

  				}

  			}

  		}

  		var bs = bevelSize + bevelOffset;

  		// Back facing vertices

  		for ( var i$4 = 0; i$4 < vlen; i$4 ++ ) {

  			var vert$2 = bevelEnabled ? scalePt2( vertices[ i$4 ], verticesMovements[ i$4 ], bs ) : vertices[ i$4 ];

  			if ( ! extrudeByPath ) {

  				v( vert$2.x, vert$2.y, 0 );

  			} else {

  				// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );

  				normal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert$2.x );
  				binormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert$2.y );

  				position2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );

  				v( position2.x, position2.y, position2.z );

  			}

  		}

  		// Add stepped vertices...
  		// Including front facing vertices

  		for ( var s = 1; s <= steps; s ++ ) {

  			for ( var i$5 = 0; i$5 < vlen; i$5 ++ ) {

  				var vert$3 = bevelEnabled ? scalePt2( vertices[ i$5 ], verticesMovements[ i$5 ], bs ) : vertices[ i$5 ];

  				if ( ! extrudeByPath ) {

  					v( vert$3.x, vert$3.y, depth / steps * s );

  				} else {

  					// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );

  					normal.copy( splineTube.normals[ s ] ).multiplyScalar( vert$3.x );
  					binormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert$3.y );

  					position2.copy( extrudePts[ s ] ).add( normal ).add( binormal );

  					v( position2.x, position2.y, position2.z );

  				}

  			}

  		}


  		// Add bevel segments planes

  		//for ( b = 1; b <= bevelSegments; b ++ ) {
  		for ( var b$1 = bevelSegments - 1; b$1 >= 0; b$1 -- ) {

  			var t$1 = b$1 / bevelSegments;
  			var z$1 = bevelThickness * Math.cos( t$1 * Math.PI / 2 );
  			var bs$2 = bevelSize * Math.sin( t$1 * Math.PI / 2 ) + bevelOffset;

  			// contract shape

  			for ( var i$6 = 0, il$4 = contour.length; i$6 < il$4; i$6 ++ ) {

  				var vert$4 = scalePt2( contour[ i$6 ], contourMovements[ i$6 ], bs$2 );
  				v( vert$4.x, vert$4.y, depth + z$1 );

  			}

  			// expand holes

  			for ( var h$4 = 0, hl$4 = holes.length; h$4 < hl$4; h$4 ++ ) {

  				var ahole$4 = holes[ h$4 ];
  				oneHoleMovements = holesMovements[ h$4 ];

  				for ( var i$7 = 0, il$5 = ahole$4.length; i$7 < il$5; i$7 ++ ) {

  					var vert$5 = scalePt2( ahole$4[ i$7 ], oneHoleMovements[ i$7 ], bs$2 );

  					if ( ! extrudeByPath ) {

  						v( vert$5.x, vert$5.y, depth + z$1 );

  					} else {

  						v( vert$5.x, vert$5.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z$1 );

  					}

  				}

  			}

  		}

  		/* Faces */

  		// Top and bottom faces

  		buildLidFaces();

  		// Sides faces

  		buildSideFaces();


  		/////  Internal functions

  		function buildLidFaces() {

  			var start = verticesArray.length / 3;

  			if ( bevelEnabled ) {

  				var layer = 0; // steps + 1
  				var offset = vlen * layer;

  				// Bottom faces

  				for ( var i = 0; i < flen; i ++ ) {

  					var face = faces[ i ];
  					f3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );

  				}

  				layer = steps + bevelSegments * 2;
  				offset = vlen * layer;

  				// Top faces

  				for ( var i$1 = 0; i$1 < flen; i$1 ++ ) {

  					var face$1 = faces[ i$1 ];
  					f3( face$1[ 0 ] + offset, face$1[ 1 ] + offset, face$1[ 2 ] + offset );

  				}

  			} else {

  				// Bottom faces

  				for ( var i$2 = 0; i$2 < flen; i$2 ++ ) {

  					var face$2 = faces[ i$2 ];
  					f3( face$2[ 2 ], face$2[ 1 ], face$2[ 0 ] );

  				}

  				// Top faces

  				for ( var i$3 = 0; i$3 < flen; i$3 ++ ) {

  					var face$3 = faces[ i$3 ];
  					f3( face$3[ 0 ] + vlen * steps, face$3[ 1 ] + vlen * steps, face$3[ 2 ] + vlen * steps );

  				}

  			}

  			scope.addGroup( start, verticesArray.length / 3 - start, 0 );

  		}

  		// Create faces for the z-sides of the shape

  		function buildSideFaces() {

  			var start = verticesArray.length / 3;
  			var layeroffset = 0;
  			sidewalls( contour, layeroffset );
  			layeroffset += contour.length;

  			for ( var h = 0, hl = holes.length; h < hl; h ++ ) {

  				var ahole = holes[ h ];
  				sidewalls( ahole, layeroffset );

  				//, true
  				layeroffset += ahole.length;

  			}


  			scope.addGroup( start, verticesArray.length / 3 - start, 1 );


  		}

  		function sidewalls( contour, layeroffset ) {

  			var i = contour.length;

  			while ( -- i >= 0 ) {

  				var j = i;
  				var k = i - 1;
  				if ( k < 0 ) { k = contour.length - 1; }

  				//console.log('b', i,j, i-1, k,vertices.length);

  				for ( var s = 0, sl = ( steps + bevelSegments * 2 ); s < sl; s ++ ) {

  					var slen1 = vlen * s;
  					var slen2 = vlen * ( s + 1 );

  					var a = layeroffset + j + slen1,
  						b = layeroffset + k + slen1,
  						c = layeroffset + k + slen2,
  						d = layeroffset + j + slen2;

  					f4( a, b, c, d );

  				}

  			}

  		}

  		function v( x, y, z ) {

  			placeholder.push( x );
  			placeholder.push( y );
  			placeholder.push( z );

  		}


  		function f3( a, b, c ) {

  			addVertex( a );
  			addVertex( b );
  			addVertex( c );

  			var nextIndex = verticesArray.length / 3;
  			var uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );

  			addUV( uvs[ 0 ] );
  			addUV( uvs[ 1 ] );
  			addUV( uvs[ 2 ] );

  		}

  		function f4( a, b, c, d ) {

  			addVertex( a );
  			addVertex( b );
  			addVertex( d );

  			addVertex( b );
  			addVertex( c );
  			addVertex( d );


  			var nextIndex = verticesArray.length / 3;
  			var uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );

  			addUV( uvs[ 0 ] );
  			addUV( uvs[ 1 ] );
  			addUV( uvs[ 3 ] );

  			addUV( uvs[ 1 ] );
  			addUV( uvs[ 2 ] );
  			addUV( uvs[ 3 ] );

  		}

  		function addVertex( index ) {

  			verticesArray.push( placeholder[ index * 3 + 0 ] );
  			verticesArray.push( placeholder[ index * 3 + 1 ] );
  			verticesArray.push( placeholder[ index * 3 + 2 ] );

  		}


  		function addUV( vector2 ) {

  			uvArray.push( vector2.x );
  			uvArray.push( vector2.y );

  		}

  	}

  }

  ExtrudeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
  ExtrudeBufferGeometry.prototype.constructor = ExtrudeBufferGeometry;

  ExtrudeBufferGeometry.prototype.toJSON = function () {

  	var data = BufferGeometry.prototype.toJSON.call( this );

  	var shapes = this.parameters.shapes;
  	var options = this.parameters.options;

  	return toJSON( shapes, options, data );

  };

  //

  var WorldUVGenerator = {

  	generateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {

  		var a_x = vertices[ indexA * 3 ];
  		var a_y = vertices[ indexA * 3 + 1 ];
  		var b_x = vertices[ indexB * 3 ];
  		var b_y = vertices[ indexB * 3 + 1 ];
  		var c_x = vertices[ indexC * 3 ];
  		var c_y = vertices[ indexC * 3 + 1 ];

  		return [
  			new Vector2( a_x, a_y ),
  			new Vector2( b_x, b_y ),
  			new Vector2( c_x, c_y )
  		];

  	},

  	generateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {

  		var a_x = vertices[ indexA * 3 ];
  		var a_y = vertices[ indexA * 3 + 1 ];
  		var a_z = vertices[ indexA * 3 + 2 ];
  		var b_x = vertices[ indexB * 3 ];
  		var b_y = vertices[ indexB * 3 + 1 ];
  		var b_z = vertices[ indexB * 3 + 2 ];
  		var c_x = vertices[ indexC * 3 ];
  		var c_y = vertices[ indexC * 3 + 1 ];
  		var c_z = vertices[ indexC * 3 + 2 ];
  		var d_x = vertices[ indexD * 3 ];
  		var d_y = vertices[ indexD * 3 + 1 ];
  		var d_z = vertices[ indexD * 3 + 2 ];

  		if ( Math.abs( a_y - b_y ) < 0.01 ) {

  			return [
  				new Vector2( a_x, 1 - a_z ),
  				new Vector2( b_x, 1 - b_z ),
  				new Vector2( c_x, 1 - c_z ),
  				new Vector2( d_x, 1 - d_z )
  			];

  		} else {

  			return [
  				new Vector2( a_y, 1 - a_z ),
  				new Vector2( b_y, 1 - b_z ),
  				new Vector2( c_y, 1 - c_z ),
  				new Vector2( d_y, 1 - d_z )
  			];

  		}

  	}
  };

  function toJSON( shapes, options, data ) {

  	//

  	data.shapes = [];

  	if ( Array.isArray( shapes ) ) {

  		for ( var i = 0, l = shapes.length; i < l; i ++ ) {

  			var shape = shapes[ i ];

  			data.shapes.push( shape.uuid );

  		}

  	} else {

  		data.shapes.push( shapes.uuid );

  	}

  	//

  	if ( options.extrudePath !== undefined ) { data.options.extrudePath = options.extrudePath.toJSON(); }

  	return data;

  }

  /**
   * @author zz85 / http://www.lab4games.net/zz85/blog
   * @author alteredq / http://alteredqualia.com/
   *
   * Text = 3D Text
   *
   * parameters = {
   *  font: <THREE.Font>, // font
   *
   *  size: <float>, // size of the text
   *  height: <float>, // thickness to extrude text
   *  curveSegments: <int>, // number of points on the curves
   *
   *  bevelEnabled: <bool>, // turn on bevel
   *  bevelThickness: <float>, // how deep into text bevel goes
   *  bevelSize: <float>, // how far from text outline (including bevelOffset) is bevel
   *  bevelOffset: <float> // how far from text outline does bevel start
   * }
   */

  // TextGeometry

  function TextGeometry( text, parameters ) {

  	Geometry.call( this );

  	this.type = 'TextGeometry';

  	this.parameters = {
  		text: text,
  		parameters: parameters
  	};

  	this.fromBufferGeometry( new TextBufferGeometry( text, parameters ) );
  	this.mergeVertices();

  }

  TextGeometry.prototype = Object.create( Geometry.prototype );
  TextGeometry.prototype.constructor = TextGeometry;

  // TextBufferGeometry

  function TextBufferGeometry( text, parameters ) {

  	parameters = parameters || {};

  	var font = parameters.font;

  	if ( ! ( font && font.isFont ) ) {

  		console.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );
  		return new Geometry();

  	}

  	var shapes = font.generateShapes( text, parameters.size );

  	// translate parameters to ExtrudeGeometry API

  	parameters.depth = parameters.height !== undefined ? parameters.height : 50;

  	// defaults

  	if ( parameters.bevelThickness === undefined ) { parameters.bevelThickness = 10; }
  	if ( parameters.bevelSize === undefined ) { parameters.bevelSize = 8; }
  	if ( parameters.bevelEnabled === undefined ) { parameters.bevelEnabled = false; }

  	ExtrudeBufferGeometry.call( this, shapes, parameters );

  	this.type = 'TextBufferGeometry';

  }

  TextBufferGeometry.prototype = Object.create( ExtrudeBufferGeometry.prototype );
  TextBufferGeometry.prototype.constructor = TextBufferGeometry;

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author benaadams / https://twitter.com/ben_a_adams
   * @author Mugen87 / https://github.com/Mugen87
   */

  // SphereGeometry

  function SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {

  	Geometry.call( this );

  	this.type = 'SphereGeometry';

  	this.parameters = {
  		radius: radius,
  		widthSegments: widthSegments,
  		heightSegments: heightSegments,
  		phiStart: phiStart,
  		phiLength: phiLength,
  		thetaStart: thetaStart,
  		thetaLength: thetaLength
  	};

  	this.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );
  	this.mergeVertices();

  }

  SphereGeometry.prototype = Object.create( Geometry.prototype );
  SphereGeometry.prototype.constructor = SphereGeometry;

  // SphereBufferGeometry

  function SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {

  	BufferGeometry.call( this );

  	this.type = 'SphereBufferGeometry';

  	this.parameters = {
  		radius: radius,
  		widthSegments: widthSegments,
  		heightSegments: heightSegments,
  		phiStart: phiStart,
  		phiLength: phiLength,
  		thetaStart: thetaStart,
  		thetaLength: thetaLength
  	};

  	radius = radius || 1;

  	widthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );
  	heightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );

  	phiStart = phiStart !== undefined ? phiStart : 0;
  	phiLength = phiLength !== undefined ? phiLength : Math.PI * 2;

  	thetaStart = thetaStart !== undefined ? thetaStart : 0;
  	thetaLength = thetaLength !== undefined ? thetaLength : Math.PI;

  	var thetaEnd = Math.min( thetaStart + thetaLength, Math.PI );

  	var index = 0;
  	var grid = [];

  	var vertex = new Vector3();
  	var normal = new Vector3();

  	// buffers

  	var indices = [];
  	var vertices = [];
  	var normals = [];
  	var uvs = [];

  	// generate vertices, normals and uvs

  	for ( var iy = 0; iy <= heightSegments; iy ++ ) {

  		var verticesRow = [];

  		var v = iy / heightSegments;

  		// special case for the poles

  		var uOffset = 0;

  		if ( iy == 0 && thetaStart == 0 ) {

  			uOffset = 0.5 / widthSegments;

  		} else if ( iy == heightSegments && thetaEnd == Math.PI ) {

  			uOffset = - 0.5 / widthSegments;

  		}

  		for ( var ix = 0; ix <= widthSegments; ix ++ ) {

  			var u = ix / widthSegments;

  			// vertex

  			vertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );
  			vertex.y = radius * Math.cos( thetaStart + v * thetaLength );
  			vertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );

  			vertices.push( vertex.x, vertex.y, vertex.z );

  			// normal

  			normal.copy( vertex ).normalize();
  			normals.push( normal.x, normal.y, normal.z );

  			// uv

  			uvs.push( u + uOffset, 1 - v );

  			verticesRow.push( index ++ );

  		}

  		grid.push( verticesRow );

  	}

  	// indices

  	for ( var iy$1 = 0; iy$1 < heightSegments; iy$1 ++ ) {

  		for ( var ix$1 = 0; ix$1 < widthSegments; ix$1 ++ ) {

  			var a = grid[ iy$1 ][ ix$1 + 1 ];
  			var b = grid[ iy$1 ][ ix$1 ];
  			var c = grid[ iy$1 + 1 ][ ix$1 ];
  			var d = grid[ iy$1 + 1 ][ ix$1 + 1 ];

  			if ( iy$1 !== 0 || thetaStart > 0 ) { indices.push( a, b, d ); }
  			if ( iy$1 !== heightSegments - 1 || thetaEnd < Math.PI ) { indices.push( b, c, d ); }

  		}

  	}

  	// build geometry

  	this.setIndex( indices );
  	this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
  	this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
  	this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

  }

  SphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
  SphereBufferGeometry.prototype.constructor = SphereBufferGeometry;

  /**
   * @author Kaleb Murphy
   * @author Mugen87 / https://github.com/Mugen87
   */

  // RingGeometry

  function RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {

  	Geometry.call( this );

  	this.type = 'RingGeometry';

  	this.parameters = {
  		innerRadius: innerRadius,
  		outerRadius: outerRadius,
  		thetaSegments: thetaSegments,
  		phiSegments: phiSegments,
  		thetaStart: thetaStart,
  		thetaLength: thetaLength
  	};

  	this.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );
  	this.mergeVertices();

  }

  RingGeometry.prototype = Object.create( Geometry.prototype );
  RingGeometry.prototype.constructor = RingGeometry;

  // RingBufferGeometry

  function RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {

  	BufferGeometry.call( this );

  	this.type = 'RingBufferGeometry';

  	this.parameters = {
  		innerRadius: innerRadius,
  		outerRadius: outerRadius,
  		thetaSegments: thetaSegments,
  		phiSegments: phiSegments,
  		thetaStart: thetaStart,
  		thetaLength: thetaLength
  	};

  	innerRadius = innerRadius || 0.5;
  	outerRadius = outerRadius || 1;

  	thetaStart = thetaStart !== undefined ? thetaStart : 0;
  	thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

  	thetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;
  	phiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;

  	// buffers

  	var indices = [];
  	var vertices = [];
  	var normals = [];
  	var uvs = [];

  	// some helper variables

  	var radius = innerRadius;
  	var radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );
  	var vertex = new Vector3();
  	var uv = new Vector2();

  	// generate vertices, normals and uvs

  	for ( var j = 0; j <= phiSegments; j ++ ) {

  		for ( var i = 0; i <= thetaSegments; i ++ ) {

  			// values are generate from the inside of the ring to the outside

  			var segment = thetaStart + i / thetaSegments * thetaLength;

  			// vertex

  			vertex.x = radius * Math.cos( segment );
  			vertex.y = radius * Math.sin( segment );

  			vertices.push( vertex.x, vertex.y, vertex.z );

  			// normal

  			normals.push( 0, 0, 1 );

  			// uv

  			uv.x = ( vertex.x / outerRadius + 1 ) / 2;
  			uv.y = ( vertex.y / outerRadius + 1 ) / 2;

  			uvs.push( uv.x, uv.y );

  		}

  		// increase the radius for next row of vertices

  		radius += radiusStep;

  	}

  	// indices

  	for ( var j$1 = 0; j$1 < phiSegments; j$1 ++ ) {

  		var thetaSegmentLevel = j$1 * ( thetaSegments + 1 );

  		for ( var i$1 = 0; i$1 < thetaSegments; i$1 ++ ) {

  			var segment$1 = i$1 + thetaSegmentLevel;

  			var a = segment$1;
  			var b = segment$1 + thetaSegments + 1;
  			var c = segment$1 + thetaSegments + 2;
  			var d = segment$1 + 1;

  			// faces

  			indices.push( a, b, d );
  			indices.push( b, c, d );

  		}

  	}

  	// build geometry

  	this.setIndex( indices );
  	this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
  	this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
  	this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

  }

  RingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
  RingBufferGeometry.prototype.constructor = RingBufferGeometry;

  /**
   * @author zz85 / https://github.com/zz85
   * @author bhouston / http://clara.io
   * @author Mugen87 / https://github.com/Mugen87
   */

  // LatheGeometry

  function LatheGeometry( points, segments, phiStart, phiLength ) {

  	Geometry.call( this );

  	this.type = 'LatheGeometry';

  	this.parameters = {
  		points: points,
  		segments: segments,
  		phiStart: phiStart,
  		phiLength: phiLength
  	};

  	this.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );
  	this.mergeVertices();

  }

  LatheGeometry.prototype = Object.create( Geometry.prototype );
  LatheGeometry.prototype.constructor = LatheGeometry;

  // LatheBufferGeometry

  function LatheBufferGeometry( points, segments, phiStart, phiLength ) {

  	BufferGeometry.call( this );

  	this.type = 'LatheBufferGeometry';

  	this.parameters = {
  		points: points,
  		segments: segments,
  		phiStart: phiStart,
  		phiLength: phiLength
  	};

  	segments = Math.floor( segments ) || 12;
  	phiStart = phiStart || 0;
  	phiLength = phiLength || Math.PI * 2;

  	// clamp phiLength so it's in range of [ 0, 2PI ]

  	phiLength = MathUtils.clamp( phiLength, 0, Math.PI * 2 );


  	// buffers

  	var indices = [];
  	var vertices = [];
  	var uvs = [];

  	// helper variables

  	var inverseSegments = 1.0 / segments;
  	var vertex = new Vector3();
  	var uv = new Vector2();

  	// generate vertices and uvs

  	for ( var i = 0; i <= segments; i ++ ) {

  		var phi = phiStart + i * inverseSegments * phiLength;

  		var sin = Math.sin( phi );
  		var cos = Math.cos( phi );

  		for ( var j = 0; j <= ( points.length - 1 ); j ++ ) {

  			// vertex

  			vertex.x = points[ j ].x * sin;
  			vertex.y = points[ j ].y;
  			vertex.z = points[ j ].x * cos;

  			vertices.push( vertex.x, vertex.y, vertex.z );

  			// uv

  			uv.x = i / segments;
  			uv.y = j / ( points.length - 1 );

  			uvs.push( uv.x, uv.y );


  		}

  	}

  	// indices

  	for ( var i$1 = 0; i$1 < segments; i$1 ++ ) {

  		for ( var j$1 = 0; j$1 < ( points.length - 1 ); j$1 ++ ) {

  			var base = j$1 + i$1 * points.length;

  			var a = base;
  			var b = base + points.length;
  			var c = base + points.length + 1;
  			var d = base + 1;

  			// faces

  			indices.push( a, b, d );
  			indices.push( b, c, d );

  		}

  	}

  	// build geometry

  	this.setIndex( indices );
  	this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
  	this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

  	// generate normals

  	this.computeVertexNormals();

  	// if the geometry is closed, we need to average the normals along the seam.
  	// because the corresponding vertices are identical (but still have different UVs).

  	if ( phiLength === Math.PI * 2 ) {

  		var normals = this.attributes.normal.array;
  		var n1 = new Vector3();
  		var n2 = new Vector3();
  		var n = new Vector3();

  		// this is the buffer offset for the last line of vertices

  		var base$1 = segments * points.length * 3;

  		for ( var i$2 = 0, j$2 = 0; i$2 < points.length; i$2 ++, j$2 += 3 ) {

  			// select the normal of the vertex in the first line

  			n1.x = normals[ j$2 + 0 ];
  			n1.y = normals[ j$2 + 1 ];
  			n1.z = normals[ j$2 + 2 ];

  			// select the normal of the vertex in the last line

  			n2.x = normals[ base$1 + j$2 + 0 ];
  			n2.y = normals[ base$1 + j$2 + 1 ];
  			n2.z = normals[ base$1 + j$2 + 2 ];

  			// average normals

  			n.addVectors( n1, n2 ).normalize();

  			// assign the new values to both normals

  			normals[ j$2 + 0 ] = normals[ base$1 + j$2 + 0 ] = n.x;
  			normals[ j$2 + 1 ] = normals[ base$1 + j$2 + 1 ] = n.y;
  			normals[ j$2 + 2 ] = normals[ base$1 + j$2 + 2 ] = n.z;

  		}

  	}

  }

  LatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
  LatheBufferGeometry.prototype.constructor = LatheBufferGeometry;

  /**
   * @author jonobr1 / http://jonobr1.com
   * @author Mugen87 / https://github.com/Mugen87
   */

  // ShapeGeometry

  function ShapeGeometry( shapes, curveSegments ) {

  	Geometry.call( this );

  	this.type = 'ShapeGeometry';

  	if ( typeof curveSegments === 'object' ) {

  		console.warn( 'THREE.ShapeGeometry: Options parameter has been removed.' );

  		curveSegments = curveSegments.curveSegments;

  	}

  	this.parameters = {
  		shapes: shapes,
  		curveSegments: curveSegments
  	};

  	this.fromBufferGeometry( new ShapeBufferGeometry( shapes, curveSegments ) );
  	this.mergeVertices();

  }

  ShapeGeometry.prototype = Object.create( Geometry.prototype );
  ShapeGeometry.prototype.constructor = ShapeGeometry;

  ShapeGeometry.prototype.toJSON = function () {

  	var data = Geometry.prototype.toJSON.call( this );

  	var shapes = this.parameters.shapes;

  	return toJSON$1( shapes, data );

  };

  // ShapeBufferGeometry

  function ShapeBufferGeometry( shapes, curveSegments ) {

  	BufferGeometry.call( this );

  	this.type = 'ShapeBufferGeometry';

  	this.parameters = {
  		shapes: shapes,
  		curveSegments: curveSegments
  	};

  	curveSegments = curveSegments || 12;

  	// buffers

  	var indices = [];
  	var vertices = [];
  	var normals = [];
  	var uvs = [];

  	// helper variables

  	var groupStart = 0;
  	var groupCount = 0;

  	// allow single and array values for "shapes" parameter

  	if ( Array.isArray( shapes ) === false ) {

  		addShape( shapes );

  	} else {

  		for ( var i = 0; i < shapes.length; i ++ ) {

  			addShape( shapes[ i ] );

  			this.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support

  			groupStart += groupCount;
  			groupCount = 0;

  		}

  	}

  	// build geometry

  	this.setIndex( indices );
  	this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
  	this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
  	this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );


  	// helper functions

  	function addShape( shape ) {

  		var indexOffset = vertices.length / 3;
  		var points = shape.extractPoints( curveSegments );

  		var shapeVertices = points.shape;
  		var shapeHoles = points.holes;

  		// check direction of vertices

  		if ( ShapeUtils.isClockWise( shapeVertices ) === false ) {

  			shapeVertices = shapeVertices.reverse();

  		}

  		for ( var i = 0, l = shapeHoles.length; i < l; i ++ ) {

  			var shapeHole = shapeHoles[ i ];

  			if ( ShapeUtils.isClockWise( shapeHole ) === true ) {

  				shapeHoles[ i ] = shapeHole.reverse();

  			}

  		}

  		var faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );

  		// join vertices of inner and outer paths to a single array

  		for ( var i$1 = 0, l$1 = shapeHoles.length; i$1 < l$1; i$1 ++ ) {

  			var shapeHole$1 = shapeHoles[ i$1 ];
  			shapeVertices = shapeVertices.concat( shapeHole$1 );

  		}

  		// vertices, normals, uvs

  		for ( var i$2 = 0, l$2 = shapeVertices.length; i$2 < l$2; i$2 ++ ) {

  			var vertex = shapeVertices[ i$2 ];

  			vertices.push( vertex.x, vertex.y, 0 );
  			normals.push( 0, 0, 1 );
  			uvs.push( vertex.x, vertex.y ); // world uvs

  		}

  		// incides

  		for ( var i$3 = 0, l$3 = faces.length; i$3 < l$3; i$3 ++ ) {

  			var face = faces[ i$3 ];

  			var a = face[ 0 ] + indexOffset;
  			var b = face[ 1 ] + indexOffset;
  			var c = face[ 2 ] + indexOffset;

  			indices.push( a, b, c );
  			groupCount += 3;

  		}

  	}

  }

  ShapeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
  ShapeBufferGeometry.prototype.constructor = ShapeBufferGeometry;

  ShapeBufferGeometry.prototype.toJSON = function () {

  	var data = BufferGeometry.prototype.toJSON.call( this );

  	var shapes = this.parameters.shapes;

  	return toJSON$1( shapes, data );

  };

  //

  function toJSON$1( shapes, data ) {

  	data.shapes = [];

  	if ( Array.isArray( shapes ) ) {

  		for ( var i = 0, l = shapes.length; i < l; i ++ ) {

  			var shape = shapes[ i ];

  			data.shapes.push( shape.uuid );

  		}

  	} else {

  		data.shapes.push( shapes.uuid );

  	}

  	return data;

  }

  /**
   * @author WestLangley / http://github.com/WestLangley
   * @author Mugen87 / https://github.com/Mugen87
   */

  function EdgesGeometry( geometry, thresholdAngle ) {

  	BufferGeometry.call( this );

  	this.type = 'EdgesGeometry';

  	this.parameters = {
  		thresholdAngle: thresholdAngle
  	};

  	thresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;

  	// buffer

  	var vertices = [];

  	// helper variables

  	var thresholdDot = Math.cos( MathUtils.DEG2RAD * thresholdAngle );
  	var edge = [ 0, 0 ], edges = {};
  	var edge1, edge2, key;
  	var keys = [ 'a', 'b', 'c' ];

  	// prepare source geometry

  	var geometry2;

  	if ( geometry.isBufferGeometry ) {

  		geometry2 = new Geometry();
  		geometry2.fromBufferGeometry( geometry );

  	} else {

  		geometry2 = geometry.clone();

  	}

  	geometry2.mergeVertices();
  	geometry2.computeFaceNormals();

  	var sourceVertices = geometry2.vertices;
  	var faces = geometry2.faces;

  	// now create a data structure where each entry represents an edge with its adjoining faces

  	for ( var i = 0, l = faces.length; i < l; i ++ ) {

  		var face = faces[ i ];

  		for ( var j = 0; j < 3; j ++ ) {

  			edge1 = face[ keys[ j ] ];
  			edge2 = face[ keys[ ( j + 1 ) % 3 ] ];
  			edge[ 0 ] = Math.min( edge1, edge2 );
  			edge[ 1 ] = Math.max( edge1, edge2 );

  			key = edge[ 0 ] + ',' + edge[ 1 ];

  			if ( edges[ key ] === undefined ) {

  				edges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ], face1: i, face2: undefined };

  			} else {

  				edges[ key ].face2 = i;

  			}

  		}

  	}

  	// generate vertices

  	for ( key in edges ) {

  		var e = edges[ key ];

  		// an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.

  		if ( e.face2 === undefined || faces[ e.face1 ].normal.dot( faces[ e.face2 ].normal ) <= thresholdDot ) {

  			var vertex = sourceVertices[ e.index1 ];
  			vertices.push( vertex.x, vertex.y, vertex.z );

  			vertex = sourceVertices[ e.index2 ];
  			vertices.push( vertex.x, vertex.y, vertex.z );

  		}

  	}

  	// build geometry

  	this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );

  }

  EdgesGeometry.prototype = Object.create( BufferGeometry.prototype );
  EdgesGeometry.prototype.constructor = EdgesGeometry;

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author Mugen87 / https://github.com/Mugen87
   */

  // CylinderGeometry

  function CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

  	Geometry.call( this );

  	this.type = 'CylinderGeometry';

  	this.parameters = {
  		radiusTop: radiusTop,
  		radiusBottom: radiusBottom,
  		height: height,
  		radialSegments: radialSegments,
  		heightSegments: heightSegments,
  		openEnded: openEnded,
  		thetaStart: thetaStart,
  		thetaLength: thetaLength
  	};

  	this.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );
  	this.mergeVertices();

  }

  CylinderGeometry.prototype = Object.create( Geometry.prototype );
  CylinderGeometry.prototype.constructor = CylinderGeometry;

  // CylinderBufferGeometry

  function CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

  	BufferGeometry.call( this );

  	this.type = 'CylinderBufferGeometry';

  	this.parameters = {
  		radiusTop: radiusTop,
  		radiusBottom: radiusBottom,
  		height: height,
  		radialSegments: radialSegments,
  		heightSegments: heightSegments,
  		openEnded: openEnded,
  		thetaStart: thetaStart,
  		thetaLength: thetaLength
  	};

  	var scope = this;

  	radiusTop = radiusTop !== undefined ? radiusTop : 1;
  	radiusBottom = radiusBottom !== undefined ? radiusBottom : 1;
  	height = height || 1;

  	radialSegments = Math.floor( radialSegments ) || 8;
  	heightSegments = Math.floor( heightSegments ) || 1;

  	openEnded = openEnded !== undefined ? openEnded : false;
  	thetaStart = thetaStart !== undefined ? thetaStart : 0.0;
  	thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

  	// buffers

  	var indices = [];
  	var vertices = [];
  	var normals = [];
  	var uvs = [];

  	// helper variables

  	var index = 0;
  	var indexArray = [];
  	var halfHeight = height / 2;
  	var groupStart = 0;

  	// generate geometry

  	generateTorso();

  	if ( openEnded === false ) {

  		if ( radiusTop > 0 ) { generateCap( true ); }
  		if ( radiusBottom > 0 ) { generateCap( false ); }

  	}

  	// build geometry

  	this.setIndex( indices );
  	this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
  	this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
  	this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

  	function generateTorso() {

  		var normal = new Vector3();
  		var vertex = new Vector3();

  		var groupCount = 0;

  		// this will be used to calculate the normal
  		var slope = ( radiusBottom - radiusTop ) / height;

  		// generate vertices, normals and uvs

  		for ( var y = 0; y <= heightSegments; y ++ ) {

  			var indexRow = [];

  			var v = y / heightSegments;

  			// calculate the radius of the current row

  			var radius = v * ( radiusBottom - radiusTop ) + radiusTop;

  			for ( var x = 0; x <= radialSegments; x ++ ) {

  				var u = x / radialSegments;

  				var theta = u * thetaLength + thetaStart;

  				var sinTheta = Math.sin( theta );
  				var cosTheta = Math.cos( theta );

  				// vertex

  				vertex.x = radius * sinTheta;
  				vertex.y = - v * height + halfHeight;
  				vertex.z = radius * cosTheta;
  				vertices.push( vertex.x, vertex.y, vertex.z );

  				// normal

  				normal.set( sinTheta, slope, cosTheta ).normalize();
  				normals.push( normal.x, normal.y, normal.z );

  				// uv

  				uvs.push( u, 1 - v );

  				// save index of vertex in respective row

  				indexRow.push( index ++ );

  			}

  			// now save vertices of the row in our index array

  			indexArray.push( indexRow );

  		}

  		// generate indices

  		for ( var x$1 = 0; x$1 < radialSegments; x$1 ++ ) {

  			for ( var y$1 = 0; y$1 < heightSegments; y$1 ++ ) {

  				// we use the index array to access the correct indices

  				var a = indexArray[ y$1 ][ x$1 ];
  				var b = indexArray[ y$1 + 1 ][ x$1 ];
  				var c = indexArray[ y$1 + 1 ][ x$1 + 1 ];
  				var d = indexArray[ y$1 ][ x$1 + 1 ];

  				// faces

  				indices.push( a, b, d );
  				indices.push( b, c, d );

  				// update group counter

  				groupCount += 6;

  			}

  		}

  		// add a group to the geometry. this will ensure multi material support

  		scope.addGroup( groupStart, groupCount, 0 );

  		// calculate new start value for groups

  		groupStart += groupCount;

  	}

  	function generateCap( top ) {

  		var centerIndexStart, centerIndexEnd;

  		var uv = new Vector2();
  		var vertex = new Vector3();

  		var groupCount = 0;

  		var radius = ( top === true ) ? radiusTop : radiusBottom;
  		var sign = ( top === true ) ? 1 : - 1;

  		// save the index of the first center vertex
  		centerIndexStart = index;

  		// first we generate the center vertex data of the cap.
  		// because the geometry needs one set of uvs per face,
  		// we must generate a center vertex per face/segment

  		for ( var x = 1; x <= radialSegments; x ++ ) {

  			// vertex

  			vertices.push( 0, halfHeight * sign, 0 );

  			// normal

  			normals.push( 0, sign, 0 );

  			// uv

  			uvs.push( 0.5, 0.5 );

  			// increase index

  			index ++;

  		}

  		// save the index of the last center vertex

  		centerIndexEnd = index;

  		// now we generate the surrounding vertices, normals and uvs

  		for ( var x$1 = 0; x$1 <= radialSegments; x$1 ++ ) {

  			var u = x$1 / radialSegments;
  			var theta = u * thetaLength + thetaStart;

  			var cosTheta = Math.cos( theta );
  			var sinTheta = Math.sin( theta );

  			// vertex

  			vertex.x = radius * sinTheta;
  			vertex.y = halfHeight * sign;
  			vertex.z = radius * cosTheta;
  			vertices.push( vertex.x, vertex.y, vertex.z );

  			// normal

  			normals.push( 0, sign, 0 );

  			// uv

  			uv.x = ( cosTheta * 0.5 ) + 0.5;
  			uv.y = ( sinTheta * 0.5 * sign ) + 0.5;
  			uvs.push( uv.x, uv.y );

  			// increase index

  			index ++;

  		}

  		// generate indices

  		for ( var x$2 = 0; x$2 < radialSegments; x$2 ++ ) {

  			var c = centerIndexStart + x$2;
  			var i = centerIndexEnd + x$2;

  			if ( top === true ) {

  				// face top

  				indices.push( i, i + 1, c );

  			} else {

  				// face bottom

  				indices.push( i + 1, i, c );

  			}

  			groupCount += 3;

  		}

  		// add a group to the geometry. this will ensure multi material support

  		scope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );

  		// calculate new start value for groups

  		groupStart += groupCount;

  	}

  }

  CylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
  CylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;

  /**
   * @author abelnation / http://github.com/abelnation
   */

  // ConeGeometry

  function ConeGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

  	CylinderGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );

  	this.type = 'ConeGeometry';

  	this.parameters = {
  		radius: radius,
  		height: height,
  		radialSegments: radialSegments,
  		heightSegments: heightSegments,
  		openEnded: openEnded,
  		thetaStart: thetaStart,
  		thetaLength: thetaLength
  	};

  }

  ConeGeometry.prototype = Object.create( CylinderGeometry.prototype );
  ConeGeometry.prototype.constructor = ConeGeometry;

  // ConeBufferGeometry

  function ConeBufferGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

  	CylinderBufferGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );

  	this.type = 'ConeBufferGeometry';

  	this.parameters = {
  		radius: radius,
  		height: height,
  		radialSegments: radialSegments,
  		heightSegments: heightSegments,
  		openEnded: openEnded,
  		thetaStart: thetaStart,
  		thetaLength: thetaLength
  	};

  }

  ConeBufferGeometry.prototype = Object.create( CylinderBufferGeometry.prototype );
  ConeBufferGeometry.prototype.constructor = ConeBufferGeometry;

  /**
   * @author benaadams / https://twitter.com/ben_a_adams
   * @author Mugen87 / https://github.com/Mugen87
   * @author hughes
   */

  // CircleGeometry

  function CircleGeometry( radius, segments, thetaStart, thetaLength ) {

  	Geometry.call( this );

  	this.type = 'CircleGeometry';

  	this.parameters = {
  		radius: radius,
  		segments: segments,
  		thetaStart: thetaStart,
  		thetaLength: thetaLength
  	};

  	this.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );
  	this.mergeVertices();

  }

  CircleGeometry.prototype = Object.create( Geometry.prototype );
  CircleGeometry.prototype.constructor = CircleGeometry;

  // CircleBufferGeometry

  function CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {

  	BufferGeometry.call( this );

  	this.type = 'CircleBufferGeometry';

  	this.parameters = {
  		radius: radius,
  		segments: segments,
  		thetaStart: thetaStart,
  		thetaLength: thetaLength
  	};

  	radius = radius || 1;
  	segments = segments !== undefined ? Math.max( 3, segments ) : 8;

  	thetaStart = thetaStart !== undefined ? thetaStart : 0;
  	thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

  	// buffers

  	var indices = [];
  	var vertices = [];
  	var normals = [];
  	var uvs = [];

  	// helper variables

  	var vertex = new Vector3();
  	var uv = new Vector2();

  	// center point

  	vertices.push( 0, 0, 0 );
  	normals.push( 0, 0, 1 );
  	uvs.push( 0.5, 0.5 );

  	for ( var s = 0, i = 3; s <= segments; s ++, i += 3 ) {

  		var segment = thetaStart + s / segments * thetaLength;

  		// vertex

  		vertex.x = radius * Math.cos( segment );
  		vertex.y = radius * Math.sin( segment );

  		vertices.push( vertex.x, vertex.y, vertex.z );

  		// normal

  		normals.push( 0, 0, 1 );

  		// uvs

  		uv.x = ( vertices[ i ] / radius + 1 ) / 2;
  		uv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;

  		uvs.push( uv.x, uv.y );

  	}

  	// indices

  	for ( var i$1 = 1; i$1 <= segments; i$1 ++ ) {

  		indices.push( i$1, i$1 + 1, 0 );

  	}

  	// build geometry

  	this.setIndex( indices );
  	this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
  	this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
  	this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

  }

  CircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
  CircleBufferGeometry.prototype.constructor = CircleBufferGeometry;

  var Geometries = /*#__PURE__*/Object.freeze({
  	__proto__: null,
  	WireframeGeometry: WireframeGeometry,
  	ParametricGeometry: ParametricGeometry,
  	ParametricBufferGeometry: ParametricBufferGeometry,
  	TetrahedronGeometry: TetrahedronGeometry,
  	TetrahedronBufferGeometry: TetrahedronBufferGeometry,
  	OctahedronGeometry: OctahedronGeometry,
  	OctahedronBufferGeometry: OctahedronBufferGeometry,
  	IcosahedronGeometry: IcosahedronGeometry,
  	IcosahedronBufferGeometry: IcosahedronBufferGeometry,
  	DodecahedronGeometry: DodecahedronGeometry,
  	DodecahedronBufferGeometry: DodecahedronBufferGeometry,
  	PolyhedronGeometry: PolyhedronGeometry,
  	PolyhedronBufferGeometry: PolyhedronBufferGeometry,
  	TubeGeometry: TubeGeometry,
  	TubeBufferGeometry: TubeBufferGeometry,
  	TorusKnotGeometry: TorusKnotGeometry,
  	TorusKnotBufferGeometry: TorusKnotBufferGeometry,
  	TorusGeometry: TorusGeometry,
  	TorusBufferGeometry: TorusBufferGeometry,
  	TextGeometry: TextGeometry,
  	TextBufferGeometry: TextBufferGeometry,
  	SphereGeometry: SphereGeometry,
  	SphereBufferGeometry: SphereBufferGeometry,
  	RingGeometry: RingGeometry,
  	RingBufferGeometry: RingBufferGeometry,
  	PlaneGeometry: PlaneGeometry,
  	PlaneBufferGeometry: PlaneBufferGeometry,
  	LatheGeometry: LatheGeometry,
  	LatheBufferGeometry: LatheBufferGeometry,
  	ShapeGeometry: ShapeGeometry,
  	ShapeBufferGeometry: ShapeBufferGeometry,
  	ExtrudeGeometry: ExtrudeGeometry,
  	ExtrudeBufferGeometry: ExtrudeBufferGeometry,
  	EdgesGeometry: EdgesGeometry,
  	ConeGeometry: ConeGeometry,
  	ConeBufferGeometry: ConeBufferGeometry,
  	CylinderGeometry: CylinderGeometry,
  	CylinderBufferGeometry: CylinderBufferGeometry,
  	CircleGeometry: CircleGeometry,
  	CircleBufferGeometry: CircleBufferGeometry,
  	BoxGeometry: BoxGeometry,
  	BoxBufferGeometry: BoxBufferGeometry
  });

  /**
   * @author mrdoob / http://mrdoob.com/
   *
   * parameters = {
   *  color: <THREE.Color>
   * }
   */

  function ShadowMaterial( parameters ) {

  	Material.call( this );

  	this.type = 'ShadowMaterial';

  	this.color = new Color( 0x000000 );
  	this.transparent = true;

  	this.setValues( parameters );

  }

  ShadowMaterial.prototype = Object.create( Material.prototype );
  ShadowMaterial.prototype.constructor = ShadowMaterial;

  ShadowMaterial.prototype.isShadowMaterial = true;

  ShadowMaterial.prototype.copy = function ( source ) {

  	Material.prototype.copy.call( this, source );

  	this.color.copy( source.color );

  	return this;

  };

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function RawShaderMaterial( parameters ) {

  	ShaderMaterial.call( this, parameters );

  	this.type = 'RawShaderMaterial';

  }

  RawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );
  RawShaderMaterial.prototype.constructor = RawShaderMaterial;

  RawShaderMaterial.prototype.isRawShaderMaterial = true;

  /**
   * @author WestLangley / http://github.com/WestLangley
   *
   * parameters = {
   *  color: <hex>,
   *  roughness: <float>,
   *  metalness: <float>,
   *  opacity: <float>,
   *
   *  map: new THREE.Texture( <Image> ),
   *
   *  lightMap: new THREE.Texture( <Image> ),
   *  lightMapIntensity: <float>
   *
   *  aoMap: new THREE.Texture( <Image> ),
   *  aoMapIntensity: <float>
   *
   *  emissive: <hex>,
   *  emissiveIntensity: <float>
   *  emissiveMap: new THREE.Texture( <Image> ),
   *
   *  bumpMap: new THREE.Texture( <Image> ),
   *  bumpScale: <float>,
   *
   *  normalMap: new THREE.Texture( <Image> ),
   *  normalMapType: THREE.TangentSpaceNormalMap,
   *  normalScale: <Vector2>,
   *
   *  displacementMap: new THREE.Texture( <Image> ),
   *  displacementScale: <float>,
   *  displacementBias: <float>,
   *
   *  roughnessMap: new THREE.Texture( <Image> ),
   *
   *  metalnessMap: new THREE.Texture( <Image> ),
   *
   *  alphaMap: new THREE.Texture( <Image> ),
   *
   *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
   *  envMapIntensity: <float>
   *
   *  refractionRatio: <float>,
   *
   *  wireframe: <boolean>,
   *  wireframeLinewidth: <float>,
   *
   *  skinning: <bool>,
   *  morphTargets: <bool>,
   *  morphNormals: <bool>
   * }
   */

  function MeshStandardMaterial( parameters ) {

  	Material.call( this );

  	this.defines = { 'STANDARD': '' };

  	this.type = 'MeshStandardMaterial';

  	this.color = new Color( 0xffffff ); // diffuse
  	this.roughness = 1.0;
  	this.metalness = 0.0;

  	this.map = null;

  	this.lightMap = null;
  	this.lightMapIntensity = 1.0;

  	this.aoMap = null;
  	this.aoMapIntensity = 1.0;

  	this.emissive = new Color( 0x000000 );
  	this.emissiveIntensity = 1.0;
  	this.emissiveMap = null;

  	this.bumpMap = null;
  	this.bumpScale = 1;

  	this.normalMap = null;
  	this.normalMapType = TangentSpaceNormalMap;
  	this.normalScale = new Vector2( 1, 1 );

  	this.displacementMap = null;
  	this.displacementScale = 1;
  	this.displacementBias = 0;

  	this.roughnessMap = null;

  	this.metalnessMap = null;

  	this.alphaMap = null;

  	this.envMap = null;
  	this.envMapIntensity = 1.0;

  	this.refractionRatio = 0.98;

  	this.wireframe = false;
  	this.wireframeLinewidth = 1;
  	this.wireframeLinecap = 'round';
  	this.wireframeLinejoin = 'round';

  	this.skinning = false;
  	this.morphTargets = false;
  	this.morphNormals = false;

  	this.vertexTangents = false;

  	this.setValues( parameters );

  }

  MeshStandardMaterial.prototype = Object.create( Material.prototype );
  MeshStandardMaterial.prototype.constructor = MeshStandardMaterial;

  MeshStandardMaterial.prototype.isMeshStandardMaterial = true;

  MeshStandardMaterial.prototype.copy = function ( source ) {

  	Material.prototype.copy.call( this, source );

  	this.defines = { 'STANDARD': '' };

  	this.color.copy( source.color );
  	this.roughness = source.roughness;
  	this.metalness = source.metalness;

  	this.map = source.map;

  	this.lightMap = source.lightMap;
  	this.lightMapIntensity = source.lightMapIntensity;

  	this.aoMap = source.aoMap;
  	this.aoMapIntensity = source.aoMapIntensity;

  	this.emissive.copy( source.emissive );
  	this.emissiveMap = source.emissiveMap;
  	this.emissiveIntensity = source.emissiveIntensity;

  	this.bumpMap = source.bumpMap;
  	this.bumpScale = source.bumpScale;

  	this.normalMap = source.normalMap;
  	this.normalMapType = source.normalMapType;
  	this.normalScale.copy( source.normalScale );

  	this.displacementMap = source.displacementMap;
  	this.displacementScale = source.displacementScale;
  	this.displacementBias = source.displacementBias;

  	this.roughnessMap = source.roughnessMap;

  	this.metalnessMap = source.metalnessMap;

  	this.alphaMap = source.alphaMap;

  	this.envMap = source.envMap;
  	this.envMapIntensity = source.envMapIntensity;

  	this.refractionRatio = source.refractionRatio;

  	this.wireframe = source.wireframe;
  	this.wireframeLinewidth = source.wireframeLinewidth;
  	this.wireframeLinecap = source.wireframeLinecap;
  	this.wireframeLinejoin = source.wireframeLinejoin;

  	this.skinning = source.skinning;
  	this.morphTargets = source.morphTargets;
  	this.morphNormals = source.morphNormals;

  	this.vertexTangents = source.vertexTangents;

  	return this;

  };

  /**
   * @author WestLangley / http://github.com/WestLangley
   *
   * parameters = {
   *  clearcoat: <float>,
   *  clearcoatMap: new THREE.Texture( <Image> ),
   *  clearcoatRoughness: <float>,
   *  clearcoatRoughnessMap: new THREE.Texture( <Image> ),
   *  clearcoatNormalScale: <Vector2>,
   *  clearcoatNormalMap: new THREE.Texture( <Image> ),
   *
   *  reflectivity: <float>,
   *
   *  sheen: <Color>,
   *
   *  transparency: <float>
   * }
   */

  function MeshPhysicalMaterial( parameters ) {

  	MeshStandardMaterial.call( this );

  	this.defines = {

  		'STANDARD': '',
  		'PHYSICAL': ''

  	};

  	this.type = 'MeshPhysicalMaterial';

  	this.clearcoat = 0.0;
  	this.clearcoatMap = null;
  	this.clearcoatRoughness = 0.0;
  	this.clearcoatRoughnessMap = null;
  	this.clearcoatNormalScale = new Vector2( 1, 1 );
  	this.clearcoatNormalMap = null;

  	this.reflectivity = 0.5; // maps to F0 = 0.04

  	this.sheen = null; // null will disable sheen bsdf

  	this.transparency = 0.0;

  	this.setValues( parameters );

  }

  MeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );
  MeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;

  MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;

  MeshPhysicalMaterial.prototype.copy = function ( source ) {

  	MeshStandardMaterial.prototype.copy.call( this, source );

  	this.defines = {

  		'STANDARD': '',
  		'PHYSICAL': ''

  	};

  	this.clearcoat = source.clearcoat;
  	this.clearcoatMap = source.clearcoatMap;
  	this.clearcoatRoughness = source.clearcoatRoughness;
  	this.clearcoatRoughnessMap = source.clearcoatRoughnessMap;
  	this.clearcoatNormalMap = source.clearcoatNormalMap;
  	this.clearcoatNormalScale.copy( source.clearcoatNormalScale );

  	this.reflectivity = source.reflectivity;

  	if ( source.sheen ) {

  		this.sheen = ( this.sheen || new Color() ).copy( source.sheen );

  	} else {

  		this.sheen = null;

  	}

  	this.transparency = source.transparency;

  	return this;

  };

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author alteredq / http://alteredqualia.com/
   *
   * parameters = {
   *  color: <hex>,
   *  specular: <hex>,
   *  shininess: <float>,
   *  opacity: <float>,
   *
   *  map: new THREE.Texture( <Image> ),
   *
   *  lightMap: new THREE.Texture( <Image> ),
   *  lightMapIntensity: <float>
   *
   *  aoMap: new THREE.Texture( <Image> ),
   *  aoMapIntensity: <float>
   *
   *  emissive: <hex>,
   *  emissiveIntensity: <float>
   *  emissiveMap: new THREE.Texture( <Image> ),
   *
   *  bumpMap: new THREE.Texture( <Image> ),
   *  bumpScale: <float>,
   *
   *  normalMap: new THREE.Texture( <Image> ),
   *  normalMapType: THREE.TangentSpaceNormalMap,
   *  normalScale: <Vector2>,
   *
   *  displacementMap: new THREE.Texture( <Image> ),
   *  displacementScale: <float>,
   *  displacementBias: <float>,
   *
   *  specularMap: new THREE.Texture( <Image> ),
   *
   *  alphaMap: new THREE.Texture( <Image> ),
   *
   *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
   *  combine: THREE.MultiplyOperation,
   *  reflectivity: <float>,
   *  refractionRatio: <float>,
   *
   *  wireframe: <boolean>,
   *  wireframeLinewidth: <float>,
   *
   *  skinning: <bool>,
   *  morphTargets: <bool>,
   *  morphNormals: <bool>
   * }
   */

  function MeshPhongMaterial( parameters ) {

  	Material.call( this );

  	this.type = 'MeshPhongMaterial';

  	this.color = new Color( 0xffffff ); // diffuse
  	this.specular = new Color( 0x111111 );
  	this.shininess = 30;

  	this.map = null;

  	this.lightMap = null;
  	this.lightMapIntensity = 1.0;

  	this.aoMap = null;
  	this.aoMapIntensity = 1.0;

  	this.emissive = new Color( 0x000000 );
  	this.emissiveIntensity = 1.0;
  	this.emissiveMap = null;

  	this.bumpMap = null;
  	this.bumpScale = 1;

  	this.normalMap = null;
  	this.normalMapType = TangentSpaceNormalMap;
  	this.normalScale = new Vector2( 1, 1 );

  	this.displacementMap = null;
  	this.displacementScale = 1;
  	this.displacementBias = 0;

  	this.specularMap = null;

  	this.alphaMap = null;

  	this.envMap = null;
  	this.combine = MultiplyOperation;
  	this.reflectivity = 1;
  	this.refractionRatio = 0.98;

  	this.wireframe = false;
  	this.wireframeLinewidth = 1;
  	this.wireframeLinecap = 'round';
  	this.wireframeLinejoin = 'round';

  	this.skinning = false;
  	this.morphTargets = false;
  	this.morphNormals = false;

  	this.setValues( parameters );

  }

  MeshPhongMaterial.prototype = Object.create( Material.prototype );
  MeshPhongMaterial.prototype.constructor = MeshPhongMaterial;

  MeshPhongMaterial.prototype.isMeshPhongMaterial = true;

  MeshPhongMaterial.prototype.copy = function ( source ) {

  	Material.prototype.copy.call( this, source );

  	this.color.copy( source.color );
  	this.specular.copy( source.specular );
  	this.shininess = source.shininess;

  	this.map = source.map;

  	this.lightMap = source.lightMap;
  	this.lightMapIntensity = source.lightMapIntensity;

  	this.aoMap = source.aoMap;
  	this.aoMapIntensity = source.aoMapIntensity;

  	this.emissive.copy( source.emissive );
  	this.emissiveMap = source.emissiveMap;
  	this.emissiveIntensity = source.emissiveIntensity;

  	this.bumpMap = source.bumpMap;
  	this.bumpScale = source.bumpScale;

  	this.normalMap = source.normalMap;
  	this.normalMapType = source.normalMapType;
  	this.normalScale.copy( source.normalScale );

  	this.displacementMap = source.displacementMap;
  	this.displacementScale = source.displacementScale;
  	this.displacementBias = source.displacementBias;

  	this.specularMap = source.specularMap;

  	this.alphaMap = source.alphaMap;

  	this.envMap = source.envMap;
  	this.combine = source.combine;
  	this.reflectivity = source.reflectivity;
  	this.refractionRatio = source.refractionRatio;

  	this.wireframe = source.wireframe;
  	this.wireframeLinewidth = source.wireframeLinewidth;
  	this.wireframeLinecap = source.wireframeLinecap;
  	this.wireframeLinejoin = source.wireframeLinejoin;

  	this.skinning = source.skinning;
  	this.morphTargets = source.morphTargets;
  	this.morphNormals = source.morphNormals;

  	return this;

  };

  /**
   * @author takahirox / http://github.com/takahirox
   *
   * parameters = {
   *  color: <hex>,
   *
   *  map: new THREE.Texture( <Image> ),
   *  gradientMap: new THREE.Texture( <Image> ),
   *
   *  lightMap: new THREE.Texture( <Image> ),
   *  lightMapIntensity: <float>
   *
   *  aoMap: new THREE.Texture( <Image> ),
   *  aoMapIntensity: <float>
   *
   *  emissive: <hex>,
   *  emissiveIntensity: <float>
   *  emissiveMap: new THREE.Texture( <Image> ),
   *
   *  bumpMap: new THREE.Texture( <Image> ),
   *  bumpScale: <float>,
   *
   *  normalMap: new THREE.Texture( <Image> ),
   *  normalMapType: THREE.TangentSpaceNormalMap,
   *  normalScale: <Vector2>,
   *
   *  displacementMap: new THREE.Texture( <Image> ),
   *  displacementScale: <float>,
   *  displacementBias: <float>,
   *
   *  alphaMap: new THREE.Texture( <Image> ),
   *
   *  wireframe: <boolean>,
   *  wireframeLinewidth: <float>,
   *
   *  skinning: <bool>,
   *  morphTargets: <bool>,
   *  morphNormals: <bool>
   * }
   */

  function MeshToonMaterial( parameters ) {

  	Material.call( this );

  	this.defines = { 'TOON': '' };

  	this.type = 'MeshToonMaterial';

  	this.color = new Color( 0xffffff );

  	this.map = null;
  	this.gradientMap = null;

  	this.lightMap = null;
  	this.lightMapIntensity = 1.0;

  	this.aoMap = null;
  	this.aoMapIntensity = 1.0;

  	this.emissive = new Color( 0x000000 );
  	this.emissiveIntensity = 1.0;
  	this.emissiveMap = null;

  	this.bumpMap = null;
  	this.bumpScale = 1;

  	this.normalMap = null;
  	this.normalMapType = TangentSpaceNormalMap;
  	this.normalScale = new Vector2( 1, 1 );

  	this.displacementMap = null;
  	this.displacementScale = 1;
  	this.displacementBias = 0;

  	this.alphaMap = null;

  	this.wireframe = false;
  	this.wireframeLinewidth = 1;
  	this.wireframeLinecap = 'round';
  	this.wireframeLinejoin = 'round';

  	this.skinning = false;
  	this.morphTargets = false;
  	this.morphNormals = false;

  	this.setValues( parameters );

  }

  MeshToonMaterial.prototype = Object.create( Material.prototype );
  MeshToonMaterial.prototype.constructor = MeshToonMaterial;

  MeshToonMaterial.prototype.isMeshToonMaterial = true;

  MeshToonMaterial.prototype.copy = function ( source ) {

  	Material.prototype.copy.call( this, source );

  	this.color.copy( source.color );

  	this.map = source.map;
  	this.gradientMap = source.gradientMap;

  	this.lightMap = source.lightMap;
  	this.lightMapIntensity = source.lightMapIntensity;

  	this.aoMap = source.aoMap;
  	this.aoMapIntensity = source.aoMapIntensity;

  	this.emissive.copy( source.emissive );
  	this.emissiveMap = source.emissiveMap;
  	this.emissiveIntensity = source.emissiveIntensity;

  	this.bumpMap = source.bumpMap;
  	this.bumpScale = source.bumpScale;

  	this.normalMap = source.normalMap;
  	this.normalMapType = source.normalMapType;
  	this.normalScale.copy( source.normalScale );

  	this.displacementMap = source.displacementMap;
  	this.displacementScale = source.displacementScale;
  	this.displacementBias = source.displacementBias;

  	this.alphaMap = source.alphaMap;

  	this.wireframe = source.wireframe;
  	this.wireframeLinewidth = source.wireframeLinewidth;
  	this.wireframeLinecap = source.wireframeLinecap;
  	this.wireframeLinejoin = source.wireframeLinejoin;

  	this.skinning = source.skinning;
  	this.morphTargets = source.morphTargets;
  	this.morphNormals = source.morphNormals;

  	return this;

  };

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author WestLangley / http://github.com/WestLangley
   *
   * parameters = {
   *  opacity: <float>,
   *
   *  bumpMap: new THREE.Texture( <Image> ),
   *  bumpScale: <float>,
   *
   *  normalMap: new THREE.Texture( <Image> ),
   *  normalMapType: THREE.TangentSpaceNormalMap,
   *  normalScale: <Vector2>,
   *
   *  displacementMap: new THREE.Texture( <Image> ),
   *  displacementScale: <float>,
   *  displacementBias: <float>,
   *
   *  wireframe: <boolean>,
   *  wireframeLinewidth: <float>
   *
   *  skinning: <bool>,
   *  morphTargets: <bool>,
   *  morphNormals: <bool>
   * }
   */

  function MeshNormalMaterial( parameters ) {

  	Material.call( this );

  	this.type = 'MeshNormalMaterial';

  	this.bumpMap = null;
  	this.bumpScale = 1;

  	this.normalMap = null;
  	this.normalMapType = TangentSpaceNormalMap;
  	this.normalScale = new Vector2( 1, 1 );

  	this.displacementMap = null;
  	this.displacementScale = 1;
  	this.displacementBias = 0;

  	this.wireframe = false;
  	this.wireframeLinewidth = 1;

  	this.fog = false;

  	this.skinning = false;
  	this.morphTargets = false;
  	this.morphNormals = false;

  	this.setValues( parameters );

  }

  MeshNormalMaterial.prototype = Object.create( Material.prototype );
  MeshNormalMaterial.prototype.constructor = MeshNormalMaterial;

  MeshNormalMaterial.prototype.isMeshNormalMaterial = true;

  MeshNormalMaterial.prototype.copy = function ( source ) {

  	Material.prototype.copy.call( this, source );

  	this.bumpMap = source.bumpMap;
  	this.bumpScale = source.bumpScale;

  	this.normalMap = source.normalMap;
  	this.normalMapType = source.normalMapType;
  	this.normalScale.copy( source.normalScale );

  	this.displacementMap = source.displacementMap;
  	this.displacementScale = source.displacementScale;
  	this.displacementBias = source.displacementBias;

  	this.wireframe = source.wireframe;
  	this.wireframeLinewidth = source.wireframeLinewidth;

  	this.skinning = source.skinning;
  	this.morphTargets = source.morphTargets;
  	this.morphNormals = source.morphNormals;

  	return this;

  };

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author alteredq / http://alteredqualia.com/
   *
   * parameters = {
   *  color: <hex>,
   *  opacity: <float>,
   *
   *  map: new THREE.Texture( <Image> ),
   *
   *  lightMap: new THREE.Texture( <Image> ),
   *  lightMapIntensity: <float>
   *
   *  aoMap: new THREE.Texture( <Image> ),
   *  aoMapIntensity: <float>
   *
   *  emissive: <hex>,
   *  emissiveIntensity: <float>
   *  emissiveMap: new THREE.Texture( <Image> ),
   *
   *  specularMap: new THREE.Texture( <Image> ),
   *
   *  alphaMap: new THREE.Texture( <Image> ),
   *
   *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
   *  combine: THREE.Multiply,
   *  reflectivity: <float>,
   *  refractionRatio: <float>,
   *
   *  wireframe: <boolean>,
   *  wireframeLinewidth: <float>,
   *
   *  skinning: <bool>,
   *  morphTargets: <bool>,
   *  morphNormals: <bool>
   * }
   */

  function MeshLambertMaterial( parameters ) {

  	Material.call( this );

  	this.type = 'MeshLambertMaterial';

  	this.color = new Color( 0xffffff ); // diffuse

  	this.map = null;

  	this.lightMap = null;
  	this.lightMapIntensity = 1.0;

  	this.aoMap = null;
  	this.aoMapIntensity = 1.0;

  	this.emissive = new Color( 0x000000 );
  	this.emissiveIntensity = 1.0;
  	this.emissiveMap = null;

  	this.specularMap = null;

  	this.alphaMap = null;

  	this.envMap = null;
  	this.combine = MultiplyOperation;
  	this.reflectivity = 1;
  	this.refractionRatio = 0.98;

  	this.wireframe = false;
  	this.wireframeLinewidth = 1;
  	this.wireframeLinecap = 'round';
  	this.wireframeLinejoin = 'round';

  	this.skinning = false;
  	this.morphTargets = false;
  	this.morphNormals = false;

  	this.setValues( parameters );

  }

  MeshLambertMaterial.prototype = Object.create( Material.prototype );
  MeshLambertMaterial.prototype.constructor = MeshLambertMaterial;

  MeshLambertMaterial.prototype.isMeshLambertMaterial = true;

  MeshLambertMaterial.prototype.copy = function ( source ) {

  	Material.prototype.copy.call( this, source );

  	this.color.copy( source.color );

  	this.map = source.map;

  	this.lightMap = source.lightMap;
  	this.lightMapIntensity = source.lightMapIntensity;

  	this.aoMap = source.aoMap;
  	this.aoMapIntensity = source.aoMapIntensity;

  	this.emissive.copy( source.emissive );
  	this.emissiveMap = source.emissiveMap;
  	this.emissiveIntensity = source.emissiveIntensity;

  	this.specularMap = source.specularMap;

  	this.alphaMap = source.alphaMap;

  	this.envMap = source.envMap;
  	this.combine = source.combine;
  	this.reflectivity = source.reflectivity;
  	this.refractionRatio = source.refractionRatio;

  	this.wireframe = source.wireframe;
  	this.wireframeLinewidth = source.wireframeLinewidth;
  	this.wireframeLinecap = source.wireframeLinecap;
  	this.wireframeLinejoin = source.wireframeLinejoin;

  	this.skinning = source.skinning;
  	this.morphTargets = source.morphTargets;
  	this.morphNormals = source.morphNormals;

  	return this;

  };

  /**
   * @author WestLangley / http://github.com/WestLangley
   *
   * parameters = {
   *  color: <hex>,
   *  opacity: <float>,
   *
   *  matcap: new THREE.Texture( <Image> ),
   *
   *  map: new THREE.Texture( <Image> ),
   *
   *  bumpMap: new THREE.Texture( <Image> ),
   *  bumpScale: <float>,
   *
   *  normalMap: new THREE.Texture( <Image> ),
   *  normalMapType: THREE.TangentSpaceNormalMap,
   *  normalScale: <Vector2>,
   *
   *  displacementMap: new THREE.Texture( <Image> ),
   *  displacementScale: <float>,
   *  displacementBias: <float>,
   *
   *  alphaMap: new THREE.Texture( <Image> ),
   *
   *  skinning: <bool>,
   *  morphTargets: <bool>,
   *  morphNormals: <bool>
   * }
   */

  function MeshMatcapMaterial( parameters ) {

  	Material.call( this );

  	this.defines = { 'MATCAP': '' };

  	this.type = 'MeshMatcapMaterial';

  	this.color = new Color( 0xffffff ); // diffuse

  	this.matcap = null;

  	this.map = null;

  	this.bumpMap = null;
  	this.bumpScale = 1;

  	this.normalMap = null;
  	this.normalMapType = TangentSpaceNormalMap;
  	this.normalScale = new Vector2( 1, 1 );

  	this.displacementMap = null;
  	this.displacementScale = 1;
  	this.displacementBias = 0;

  	this.alphaMap = null;

  	this.skinning = false;
  	this.morphTargets = false;
  	this.morphNormals = false;

  	this.setValues( parameters );

  }

  MeshMatcapMaterial.prototype = Object.create( Material.prototype );
  MeshMatcapMaterial.prototype.constructor = MeshMatcapMaterial;

  MeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;

  MeshMatcapMaterial.prototype.copy = function ( source ) {

  	Material.prototype.copy.call( this, source );

  	this.defines = { 'MATCAP': '' };

  	this.color.copy( source.color );

  	this.matcap = source.matcap;

  	this.map = source.map;

  	this.bumpMap = source.bumpMap;
  	this.bumpScale = source.bumpScale;

  	this.normalMap = source.normalMap;
  	this.normalMapType = source.normalMapType;
  	this.normalScale.copy( source.normalScale );

  	this.displacementMap = source.displacementMap;
  	this.displacementScale = source.displacementScale;
  	this.displacementBias = source.displacementBias;

  	this.alphaMap = source.alphaMap;

  	this.skinning = source.skinning;
  	this.morphTargets = source.morphTargets;
  	this.morphNormals = source.morphNormals;

  	return this;

  };

  /**
   * @author alteredq / http://alteredqualia.com/
   *
   * parameters = {
   *  color: <hex>,
   *  opacity: <float>,
   *
   *  linewidth: <float>,
   *
   *  scale: <float>,
   *  dashSize: <float>,
   *  gapSize: <float>
   * }
   */

  function LineDashedMaterial( parameters ) {

  	LineBasicMaterial.call( this );

  	this.type = 'LineDashedMaterial';

  	this.scale = 1;
  	this.dashSize = 3;
  	this.gapSize = 1;

  	this.setValues( parameters );

  }

  LineDashedMaterial.prototype = Object.create( LineBasicMaterial.prototype );
  LineDashedMaterial.prototype.constructor = LineDashedMaterial;

  LineDashedMaterial.prototype.isLineDashedMaterial = true;

  LineDashedMaterial.prototype.copy = function ( source ) {

  	LineBasicMaterial.prototype.copy.call( this, source );

  	this.scale = source.scale;
  	this.dashSize = source.dashSize;
  	this.gapSize = source.gapSize;

  	return this;

  };

  var Materials = /*#__PURE__*/Object.freeze({
  	__proto__: null,
  	ShadowMaterial: ShadowMaterial,
  	SpriteMaterial: SpriteMaterial,
  	RawShaderMaterial: RawShaderMaterial,
  	ShaderMaterial: ShaderMaterial,
  	PointsMaterial: PointsMaterial,
  	MeshPhysicalMaterial: MeshPhysicalMaterial,
  	MeshStandardMaterial: MeshStandardMaterial,
  	MeshPhongMaterial: MeshPhongMaterial,
  	MeshToonMaterial: MeshToonMaterial,
  	MeshNormalMaterial: MeshNormalMaterial,
  	MeshLambertMaterial: MeshLambertMaterial,
  	MeshDepthMaterial: MeshDepthMaterial,
  	MeshDistanceMaterial: MeshDistanceMaterial,
  	MeshBasicMaterial: MeshBasicMaterial,
  	MeshMatcapMaterial: MeshMatcapMaterial,
  	LineDashedMaterial: LineDashedMaterial,
  	LineBasicMaterial: LineBasicMaterial,
  	Material: Material
  });

  /**
   * @author tschw
   * @author Ben Houston / http://clara.io/
   * @author David Sarno / http://lighthaus.us/
   */

  var AnimationUtils = {

  	// same as Array.prototype.slice, but also works on typed arrays
  	arraySlice: function ( array, from, to ) {

  		if ( AnimationUtils.isTypedArray( array ) ) {

  			// in ios9 array.subarray(from, undefined) will return empty array
  			// but array.subarray(from) or array.subarray(from, len) is correct
  			return new array.constructor( array.subarray( from, to !== undefined ? to : array.length ) );

  		}

  		return array.slice( from, to );

  	},

  	// converts an array to a specific type
  	convertArray: function ( array, type, forceClone ) {

  		if ( ! array || // let 'undefined' and 'null' pass
  			! forceClone && array.constructor === type ) { return array; }

  		if ( typeof type.BYTES_PER_ELEMENT === 'number' ) {

  			return new type( array ); // create typed array

  		}

  		return Array.prototype.slice.call( array ); // create Array

  	},

  	isTypedArray: function ( object ) {

  		return ArrayBuffer.isView( object ) &&
  			! ( object instanceof DataView );

  	},

  	// returns an array by which times and values can be sorted
  	getKeyframeOrder: function ( times ) {

  		function compareTime( i, j ) {

  			return times[ i ] - times[ j ];

  		}

  		var n = times.length;
  		var result = new Array( n );
  		for ( var i = 0; i !== n; ++ i ) { result[ i ] = i; }

  		result.sort( compareTime );

  		return result;

  	},

  	// uses the array previously returned by 'getKeyframeOrder' to sort data
  	sortedArray: function ( values, stride, order ) {

  		var nValues = values.length;
  		var result = new values.constructor( nValues );

  		for ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {

  			var srcOffset = order[ i ] * stride;

  			for ( var j = 0; j !== stride; ++ j ) {

  				result[ dstOffset ++ ] = values[ srcOffset + j ];

  			}

  		}

  		return result;

  	},

  	// function for parsing AOS keyframe formats
  	flattenJSON: function ( jsonKeys, times, values, valuePropertyName ) {

  		var i = 1, key = jsonKeys[ 0 ];

  		while ( key !== undefined && key[ valuePropertyName ] === undefined ) {

  			key = jsonKeys[ i ++ ];

  		}

  		if ( key === undefined ) { return; } // no data

  		var value = key[ valuePropertyName ];
  		if ( value === undefined ) { return; } // no data

  		if ( Array.isArray( value ) ) {

  			do {

  				value = key[ valuePropertyName ];

  				if ( value !== undefined ) {

  					times.push( key.time );
  					values.push.apply( values, value ); // push all elements

  				}

  				key = jsonKeys[ i ++ ];

  			} while ( key !== undefined );

  		} else if ( value.toArray !== undefined ) {

  			// ...assume THREE.Math-ish

  			do {

  				value = key[ valuePropertyName ];

  				if ( value !== undefined ) {

  					times.push( key.time );
  					value.toArray( values, values.length );

  				}

  				key = jsonKeys[ i ++ ];

  			} while ( key !== undefined );

  		} else {

  			// otherwise push as-is

  			do {

  				value = key[ valuePropertyName ];

  				if ( value !== undefined ) {

  					times.push( key.time );
  					values.push( value );

  				}

  				key = jsonKeys[ i ++ ];

  			} while ( key !== undefined );

  		}

  	},

  	subclip: function ( sourceClip, name, startFrame, endFrame, fps ) {

  		fps = fps || 30;

  		var clip = sourceClip.clone();

  		clip.name = name;

  		var tracks = [];

  		for ( var i = 0; i < clip.tracks.length; ++ i ) {

  			var track = clip.tracks[ i ];
  			var valueSize = track.getValueSize();

  			var times = [];
  			var values = [];

  			for ( var j = 0; j < track.times.length; ++ j ) {

  				var frame = track.times[ j ] * fps;

  				if ( frame < startFrame || frame >= endFrame ) { continue; }

  				times.push( track.times[ j ] );

  				for ( var k = 0; k < valueSize; ++ k ) {

  					values.push( track.values[ j * valueSize + k ] );

  				}

  			}

  			if ( times.length === 0 ) { continue; }

  			track.times = AnimationUtils.convertArray( times, track.times.constructor );
  			track.values = AnimationUtils.convertArray( values, track.values.constructor );

  			tracks.push( track );

  		}

  		clip.tracks = tracks;

  		// find minimum .times value across all tracks in the trimmed clip

  		var minStartTime = Infinity;

  		for ( var i$1 = 0; i$1 < clip.tracks.length; ++ i$1 ) {

  			if ( minStartTime > clip.tracks[ i$1 ].times[ 0 ] ) {

  				minStartTime = clip.tracks[ i$1 ].times[ 0 ];

  			}

  		}

  		// shift all tracks such that clip begins at t=0

  		for ( var i$2 = 0; i$2 < clip.tracks.length; ++ i$2 ) {

  			clip.tracks[ i$2 ].shift( - 1 * minStartTime );

  		}

  		clip.resetDuration();

  		return clip;

  	},

  	makeClipAdditive: function ( targetClip, referenceFrame, referenceClip, fps ) {

  		if ( referenceFrame === undefined ) { referenceFrame = 0; }
  		if ( referenceClip === undefined ) { referenceClip = targetClip; }
  		if ( fps === undefined || fps <= 0 ) { fps = 30; }

  		var numTracks = targetClip.tracks.length;
  		var referenceTime = referenceFrame / fps;

  		// Make each track's values relative to the values at the reference frame
  		var loop = function ( i ) {

  			var referenceTrack = referenceClip.tracks[ i ];
  			var referenceTrackType = referenceTrack.ValueTypeName;

  			// Skip this track if it's non-numeric
  			if ( referenceTrackType === 'bool' || referenceTrackType === 'string' ) { return; }

  			// Find the track in the target clip whose name and type matches the reference track
  			var targetTrack = targetClip.tracks.find( function ( track ) {

  				return track.name === referenceTrack.name
  				&& track.ValueTypeName === referenceTrackType;

  			} );

  			if ( targetTrack === undefined ) { return; }

  			var valueSize = referenceTrack.getValueSize();
  			var lastIndex = referenceTrack.times.length - 1;
  			var referenceValue = (void 0);

  			// Find the value to subtract out of the track
  			if ( referenceTime <= referenceTrack.times[ 0 ] ) {

  				// Reference frame is earlier than the first keyframe, so just use the first keyframe
  				referenceValue = AnimationUtils.arraySlice( referenceTrack.values, 0, referenceTrack.valueSize );

  			} else if ( referenceTime >= referenceTrack.times[ lastIndex ] ) {

  				// Reference frame is after the last keyframe, so just use the last keyframe
  				var startIndex = lastIndex * valueSize;
  				referenceValue = AnimationUtils.arraySlice( referenceTrack.values, startIndex );

  			} else {

  				// Interpolate to the reference value
  				var interpolant = referenceTrack.createInterpolant();
  				interpolant.evaluate( referenceTime );
  				referenceValue = interpolant.resultBuffer;

  			}

  			// Conjugate the quaternion
  			if ( referenceTrackType === 'quaternion' ) {

  				var referenceQuat = new Quaternion(
  					referenceValue[ 0 ],
  					referenceValue[ 1 ],
  					referenceValue[ 2 ],
  					referenceValue[ 3 ]
  				).normalize().conjugate();
  				referenceQuat.toArray( referenceValue );

  			}

  			// Subtract the reference value from all of the track values

  			var numTimes = targetTrack.times.length;
  			for ( var j = 0; j < numTimes; ++ j ) {

  				var valueStart = j * valueSize;

  				if ( referenceTrackType === 'quaternion' ) {

  					// Multiply the conjugate for quaternion track types
  					Quaternion.multiplyQuaternionsFlat(
  						targetTrack.values,
  						valueStart,
  						referenceValue,
  						0,
  						targetTrack.values,
  						valueStart
  					);

  				} else {

  					// Subtract each value for all other numeric track types
  					for ( var k = 0; k < valueSize; ++ k ) {

  						targetTrack.values[ valueStart + k ] -= referenceValue[ k ];

  					}

  				}

  			}

  		};

  		for ( var i = 0; i < numTracks; ++ i ) loop( i );

  		targetClip.blendMode = AdditiveAnimationBlendMode;

  		return targetClip;

  	}

  };

  /**
   * Abstract base class of interpolants over parametric samples.
   *
   * The parameter domain is one dimensional, typically the time or a path
   * along a curve defined by the data.
   *
   * The sample values can have any dimensionality and derived classes may
   * apply special interpretations to the data.
   *
   * This class provides the interval seek in a Template Method, deferring
   * the actual interpolation to derived classes.
   *
   * Time complexity is O(1) for linear access crossing at most two points
   * and O(log N) for random access, where N is the number of positions.
   *
   * References:
   *
   * 		http://www.oodesign.com/template-method-pattern.html
   *
   * @author tschw
   */

  function Interpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

  	this.parameterPositions = parameterPositions;
  	this._cachedIndex = 0;

  	this.resultBuffer = resultBuffer !== undefined ?
  		resultBuffer : new sampleValues.constructor( sampleSize );
  	this.sampleValues = sampleValues;
  	this.valueSize = sampleSize;

  }

  Object.assign( Interpolant.prototype, {

  	evaluate: function ( t ) {

  		var pp = this.parameterPositions,
  			i1 = this._cachedIndex,

  			t1 = pp[ i1 ],
  			t0 = pp[ i1 - 1 ];

  		validate_interval: {

  			seek: {

  				var right;

  				linear_scan: {

  					//- See http://jsperf.com/comparison-to-undefined/3
  					//- slower code:
  					//-
  					//- 				if ( t >= t1 || t1 === undefined ) {
  					forward_scan: if ( ! ( t < t1 ) ) {

  						for ( var giveUpAt = i1 + 2; ; ) {

  							if ( t1 === undefined ) {

  								if ( t < t0 ) { break forward_scan; }

  								// after end

  								i1 = pp.length;
  								this._cachedIndex = i1;
  								return this.afterEnd_( i1 - 1, t, t0 );

  							}

  							if ( i1 === giveUpAt ) { break; } // this loop

  							t0 = t1;
  							t1 = pp[ ++ i1 ];

  							if ( t < t1 ) {

  								// we have arrived at the sought interval
  								break seek;

  							}

  						}

  						// prepare binary search on the right side of the index
  						right = pp.length;
  						break linear_scan;

  					}

  					//- slower code:
  					//-					if ( t < t0 || t0 === undefined ) {
  					if ( ! ( t >= t0 ) ) {

  						// looping?

  						var t1global = pp[ 1 ];

  						if ( t < t1global ) {

  							i1 = 2; // + 1, using the scan for the details
  							t0 = t1global;

  						}

  						// linear reverse scan

  						for ( var giveUpAt$1 = i1 - 2; ; ) {

  							if ( t0 === undefined ) {

  								// before start

  								this._cachedIndex = 0;
  								return this.beforeStart_( 0, t, t1 );

  							}

  							if ( i1 === giveUpAt$1 ) { break; } // this loop

  							t1 = t0;
  							t0 = pp[ -- i1 - 1 ];

  							if ( t >= t0 ) {

  								// we have arrived at the sought interval
  								break seek;

  							}

  						}

  						// prepare binary search on the left side of the index
  						right = i1;
  						i1 = 0;
  						break linear_scan;

  					}

  					// the interval is valid

  					break validate_interval;

  				} // linear scan

  				// binary search

  				while ( i1 < right ) {

  					var mid = ( i1 + right ) >>> 1;

  					if ( t < pp[ mid ] ) {

  						right = mid;

  					} else {

  						i1 = mid + 1;

  					}

  				}

  				t1 = pp[ i1 ];
  				t0 = pp[ i1 - 1 ];

  				// check boundary cases, again

  				if ( t0 === undefined ) {

  					this._cachedIndex = 0;
  					return this.beforeStart_( 0, t, t1 );

  				}

  				if ( t1 === undefined ) {

  					i1 = pp.length;
  					this._cachedIndex = i1;
  					return this.afterEnd_( i1 - 1, t0, t );

  				}

  			} // seek

  			this._cachedIndex = i1;

  			this.intervalChanged_( i1, t0, t1 );

  		} // validate_interval

  		return this.interpolate_( i1, t0, t, t1 );

  	},

  	settings: null, // optional, subclass-specific settings structure
  	// Note: The indirection allows central control of many interpolants.

  	// --- Protected interface

  	DefaultSettings_: {},

  	getSettings_: function () {

  		return this.settings || this.DefaultSettings_;

  	},

  	copySampleValue_: function ( index ) {

  		// copies a sample value to the result buffer

  		var result = this.resultBuffer,
  			values = this.sampleValues,
  			stride = this.valueSize,
  			offset = index * stride;

  		for ( var i = 0; i !== stride; ++ i ) {

  			result[ i ] = values[ offset + i ];

  		}

  		return result;

  	},

  	// Template methods for derived classes:

  	interpolate_: function ( /* i1, t0, t, t1 */ ) {

  		throw new Error( 'call to abstract method' );
  		// implementations shall return this.resultBuffer

  	},

  	intervalChanged_: function ( /* i1, t0, t1 */ ) {

  		// empty

  	}

  } );

  // DECLARE ALIAS AFTER assign prototype
  Object.assign( Interpolant.prototype, {

  	//( 0, t, t0 ), returns this.resultBuffer
  	beforeStart_: Interpolant.prototype.copySampleValue_,

  	//( N-1, tN-1, t ), returns this.resultBuffer
  	afterEnd_: Interpolant.prototype.copySampleValue_,

  } );

  /**
   * Fast and simple cubic spline interpolant.
   *
   * It was derived from a Hermitian construction setting the first derivative
   * at each sample position to the linear slope between neighboring positions
   * over their parameter interval.
   *
   * @author tschw
   */

  function CubicInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

  	Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );

  	this._weightPrev = - 0;
  	this._offsetPrev = - 0;
  	this._weightNext = - 0;
  	this._offsetNext = - 0;

  }

  CubicInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {

  	constructor: CubicInterpolant,

  	DefaultSettings_: {

  		endingStart: ZeroCurvatureEnding,
  		endingEnd: ZeroCurvatureEnding

  	},

  	intervalChanged_: function ( i1, t0, t1 ) {

  		var pp = this.parameterPositions,
  			iPrev = i1 - 2,
  			iNext = i1 + 1,

  			tPrev = pp[ iPrev ],
  			tNext = pp[ iNext ];

  		if ( tPrev === undefined ) {

  			switch ( this.getSettings_().endingStart ) {

  				case ZeroSlopeEnding:

  					// f'(t0) = 0
  					iPrev = i1;
  					tPrev = 2 * t0 - t1;

  					break;

  				case WrapAroundEnding:

  					// use the other end of the curve
  					iPrev = pp.length - 2;
  					tPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];

  					break;

  				default: // ZeroCurvatureEnding

  					// f''(t0) = 0 a.k.a. Natural Spline
  					iPrev = i1;
  					tPrev = t1;

  			}

  		}

  		if ( tNext === undefined ) {

  			switch ( this.getSettings_().endingEnd ) {

  				case ZeroSlopeEnding:

  					// f'(tN) = 0
  					iNext = i1;
  					tNext = 2 * t1 - t0;

  					break;

  				case WrapAroundEnding:

  					// use the other end of the curve
  					iNext = 1;
  					tNext = t1 + pp[ 1 ] - pp[ 0 ];

  					break;

  				default: // ZeroCurvatureEnding

  					// f''(tN) = 0, a.k.a. Natural Spline
  					iNext = i1 - 1;
  					tNext = t0;

  			}

  		}

  		var halfDt = ( t1 - t0 ) * 0.5,
  			stride = this.valueSize;

  		this._weightPrev = halfDt / ( t0 - tPrev );
  		this._weightNext = halfDt / ( tNext - t1 );
  		this._offsetPrev = iPrev * stride;
  		this._offsetNext = iNext * stride;

  	},

  	interpolate_: function ( i1, t0, t, t1 ) {

  		var result = this.resultBuffer,
  			values = this.sampleValues,
  			stride = this.valueSize,

  			o1 = i1 * stride,		o0 = o1 - stride,
  			oP = this._offsetPrev, 	oN = this._offsetNext,
  			wP = this._weightPrev,	wN = this._weightNext,

  			p = ( t - t0 ) / ( t1 - t0 ),
  			pp = p * p,
  			ppp = pp * p;

  		// evaluate polynomials

  		var sP = - wP * ppp + 2 * wP * pp - wP * p;
  		var s0 = ( 1 + wP ) * ppp + ( - 1.5 - 2 * wP ) * pp + ( - 0.5 + wP ) * p + 1;
  		var s1 = ( - 1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;
  		var sN = wN * ppp - wN * pp;

  		// combine data linearly

  		for ( var i = 0; i !== stride; ++ i ) {

  			result[ i ] =
  					sP * values[ oP + i ] +
  					s0 * values[ o0 + i ] +
  					s1 * values[ o1 + i ] +
  					sN * values[ oN + i ];

  		}

  		return result;

  	}

  } );

  /**
   * @author tschw
   */

  function LinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

  	Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );

  }

  LinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {

  	constructor: LinearInterpolant,

  	interpolate_: function ( i1, t0, t, t1 ) {

  		var result = this.resultBuffer,
  			values = this.sampleValues,
  			stride = this.valueSize,

  			offset1 = i1 * stride,
  			offset0 = offset1 - stride,

  			weight1 = ( t - t0 ) / ( t1 - t0 ),
  			weight0 = 1 - weight1;

  		for ( var i = 0; i !== stride; ++ i ) {

  			result[ i ] =
  					values[ offset0 + i ] * weight0 +
  					values[ offset1 + i ] * weight1;

  		}

  		return result;

  	}

  } );

  /**
   *
   * Interpolant that evaluates to the sample value at the position preceeding
   * the parameter.
   *
   * @author tschw
   */

  function DiscreteInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

  	Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );

  }

  DiscreteInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {

  	constructor: DiscreteInterpolant,

  	interpolate_: function ( i1 /*, t0, t, t1 */ ) {

  		return this.copySampleValue_( i1 - 1 );

  	}

  } );

  /**
   *
   * A timed sequence of keyframes for a specific property.
   *
   *
   * @author Ben Houston / http://clara.io/
   * @author David Sarno / http://lighthaus.us/
   * @author tschw
   */

  function KeyframeTrack( name, times, values, interpolation ) {

  	if ( name === undefined ) { throw new Error( 'THREE.KeyframeTrack: track name is undefined' ); }
  	if ( times === undefined || times.length === 0 ) { throw new Error( 'THREE.KeyframeTrack: no keyframes in track named ' + name ); }

  	this.name = name;

  	this.times = AnimationUtils.convertArray( times, this.TimeBufferType );
  	this.values = AnimationUtils.convertArray( values, this.ValueBufferType );

  	this.setInterpolation( interpolation || this.DefaultInterpolation );

  }

  // Static methods

  Object.assign( KeyframeTrack, {

  	// Serialization (in static context, because of constructor invocation
  	// and automatic invocation of .toJSON):

  	toJSON: function ( track ) {

  		var trackType = track.constructor;

  		var json;

  		// derived classes can define a static toJSON method
  		if ( trackType.toJSON !== undefined ) {

  			json = trackType.toJSON( track );

  		} else {

  			// by default, we assume the data can be serialized as-is
  			json = {

  				'name': track.name,
  				'times': AnimationUtils.convertArray( track.times, Array ),
  				'values': AnimationUtils.convertArray( track.values, Array )

  			};

  			var interpolation = track.getInterpolation();

  			if ( interpolation !== track.DefaultInterpolation ) {

  				json.interpolation = interpolation;

  			}

  		}

  		json.type = track.ValueTypeName; // mandatory

  		return json;

  	}

  } );

  Object.assign( KeyframeTrack.prototype, {

  	constructor: KeyframeTrack,

  	TimeBufferType: Float32Array,

  	ValueBufferType: Float32Array,

  	DefaultInterpolation: InterpolateLinear,

  	InterpolantFactoryMethodDiscrete: function ( result ) {

  		return new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );

  	},

  	InterpolantFactoryMethodLinear: function ( result ) {

  		return new LinearInterpolant( this.times, this.values, this.getValueSize(), result );

  	},

  	InterpolantFactoryMethodSmooth: function ( result ) {

  		return new CubicInterpolant( this.times, this.values, this.getValueSize(), result );

  	},

  	setInterpolation: function ( interpolation ) {

  		var factoryMethod;

  		switch ( interpolation ) {

  			case InterpolateDiscrete:

  				factoryMethod = this.InterpolantFactoryMethodDiscrete;

  				break;

  			case InterpolateLinear:

  				factoryMethod = this.InterpolantFactoryMethodLinear;

  				break;

  			case InterpolateSmooth:

  				factoryMethod = this.InterpolantFactoryMethodSmooth;

  				break;

  		}

  		if ( factoryMethod === undefined ) {

  			var message = "unsupported interpolation for " +
  				this.ValueTypeName + " keyframe track named " + this.name;

  			if ( this.createInterpolant === undefined ) {

  				// fall back to default, unless the default itself is messed up
  				if ( interpolation !== this.DefaultInterpolation ) {

  					this.setInterpolation( this.DefaultInterpolation );

  				} else {

  					throw new Error( message ); // fatal, in this case

  				}

  			}

  			console.warn( 'THREE.KeyframeTrack:', message );
  			return this;

  		}

  		this.createInterpolant = factoryMethod;

  		return this;

  	},

  	getInterpolation: function () {

  		switch ( this.createInterpolant ) {

  			case this.InterpolantFactoryMethodDiscrete:

  				return InterpolateDiscrete;

  			case this.InterpolantFactoryMethodLinear:

  				return InterpolateLinear;

  			case this.InterpolantFactoryMethodSmooth:

  				return InterpolateSmooth;

  		}

  	},

  	getValueSize: function () {

  		return this.values.length / this.times.length;

  	},

  	// move all keyframes either forwards or backwards in time
  	shift: function ( timeOffset ) {

  		if ( timeOffset !== 0.0 ) {

  			var times = this.times;

  			for ( var i = 0, n = times.length; i !== n; ++ i ) {

  				times[ i ] += timeOffset;

  			}

  		}

  		return this;

  	},

  	// scale all keyframe times by a factor (useful for frame <-> seconds conversions)
  	scale: function ( timeScale ) {

  		if ( timeScale !== 1.0 ) {

  			var times = this.times;

  			for ( var i = 0, n = times.length; i !== n; ++ i ) {

  				times[ i ] *= timeScale;

  			}

  		}

  		return this;

  	},

  	// removes keyframes before and after animation without changing any values within the range [startTime, endTime].
  	// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
  	trim: function ( startTime, endTime ) {

  		var times = this.times,
  			nKeys = times.length;

  		var from = 0,
  			to = nKeys - 1;

  		while ( from !== nKeys && times[ from ] < startTime ) {

  			++ from;

  		}

  		while ( to !== - 1 && times[ to ] > endTime ) {

  			-- to;

  		}

  		++ to; // inclusive -> exclusive bound

  		if ( from !== 0 || to !== nKeys ) {

  			// empty tracks are forbidden, so keep at least one keyframe
  			if ( from >= to ) {

  				to = Math.max( to, 1 );
  				from = to - 1;

  			}

  			var stride = this.getValueSize();
  			this.times = AnimationUtils.arraySlice( times, from, to );
  			this.values = AnimationUtils.arraySlice( this.values, from * stride, to * stride );

  		}

  		return this;

  	},

  	// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
  	validate: function () {

  		var valid = true;

  		var valueSize = this.getValueSize();
  		if ( valueSize - Math.floor( valueSize ) !== 0 ) {

  			console.error( 'THREE.KeyframeTrack: Invalid value size in track.', this );
  			valid = false;

  		}

  		var times = this.times,
  			values = this.values,

  			nKeys = times.length;

  		if ( nKeys === 0 ) {

  			console.error( 'THREE.KeyframeTrack: Track is empty.', this );
  			valid = false;

  		}

  		var prevTime = null;

  		for ( var i = 0; i !== nKeys; i ++ ) {

  			var currTime = times[ i ];

  			if ( typeof currTime === 'number' && isNaN( currTime ) ) {

  				console.error( 'THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime );
  				valid = false;
  				break;

  			}

  			if ( prevTime !== null && prevTime > currTime ) {

  				console.error( 'THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime );
  				valid = false;
  				break;

  			}

  			prevTime = currTime;

  		}

  		if ( values !== undefined ) {

  			if ( AnimationUtils.isTypedArray( values ) ) {

  				for ( var i$1 = 0, n = values.length; i$1 !== n; ++ i$1 ) {

  					var value = values[ i$1 ];

  					if ( isNaN( value ) ) {

  						console.error( 'THREE.KeyframeTrack: Value is not a valid number.', this, i$1, value );
  						valid = false;
  						break;

  					}

  				}

  			}

  		}

  		return valid;

  	},

  	// removes equivalent sequential keys as common in morph target sequences
  	// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
  	optimize: function () {

  		// times or values may be shared with other tracks, so overwriting is unsafe
  		var times = AnimationUtils.arraySlice( this.times ),
  			values = AnimationUtils.arraySlice( this.values ),
  			stride = this.getValueSize(),

  			smoothInterpolation = this.getInterpolation() === InterpolateSmooth,

  			lastIndex = times.length - 1;

  		var writeIndex = 1;

  		for ( var i = 1; i < lastIndex; ++ i ) {

  			var keep = false;

  			var time = times[ i ];
  			var timeNext = times[ i + 1 ];

  			// remove adjacent keyframes scheduled at the same time

  			if ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {

  				if ( ! smoothInterpolation ) {

  					// remove unnecessary keyframes same as their neighbors

  					var offset = i * stride,
  						offsetP = offset - stride,
  						offsetN = offset + stride;

  					for ( var j = 0; j !== stride; ++ j ) {

  						var value = values[ offset + j ];

  						if ( value !== values[ offsetP + j ] ||
  							value !== values[ offsetN + j ] ) {

  							keep = true;
  							break;

  						}

  					}

  				} else {

  					keep = true;

  				}

  			}

  			// in-place compaction

  			if ( keep ) {

  				if ( i !== writeIndex ) {

  					times[ writeIndex ] = times[ i ];

  					var readOffset = i * stride,
  						writeOffset = writeIndex * stride;

  					for ( var j$1 = 0; j$1 !== stride; ++ j$1 ) {

  						values[ writeOffset + j$1 ] = values[ readOffset + j$1 ];

  					}

  				}

  				++ writeIndex;

  			}

  		}

  		// flush last keyframe (compaction looks ahead)

  		if ( lastIndex > 0 ) {

  			times[ writeIndex ] = times[ lastIndex ];

  			for ( var readOffset$1 = lastIndex * stride, writeOffset$1 = writeIndex * stride, j$2 = 0; j$2 !== stride; ++ j$2 ) {

  				values[ writeOffset$1 + j$2 ] = values[ readOffset$1 + j$2 ];

  			}

  			++ writeIndex;

  		}

  		if ( writeIndex !== times.length ) {

  			this.times = AnimationUtils.arraySlice( times, 0, writeIndex );
  			this.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );

  		} else {

  			this.times = times;
  			this.values = values;

  		}

  		return this;

  	},

  	clone: function () {

  		var times = AnimationUtils.arraySlice( this.times, 0 );
  		var values = AnimationUtils.arraySlice( this.values, 0 );

  		var TypedKeyframeTrack = this.constructor;
  		var track = new TypedKeyframeTrack( this.name, times, values );

  		// Interpolant argument to constructor is not saved, so copy the factory method directly.
  		track.createInterpolant = this.createInterpolant;

  		return track;

  	}

  } );

  /**
   *
   * A Track of Boolean keyframe values.
   *
   *
   * @author Ben Houston / http://clara.io/
   * @author David Sarno / http://lighthaus.us/
   * @author tschw
   */

  function BooleanKeyframeTrack( name, times, values ) {

  	KeyframeTrack.call( this, name, times, values );

  }

  BooleanKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

  	constructor: BooleanKeyframeTrack,

  	ValueTypeName: 'bool',
  	ValueBufferType: Array,

  	DefaultInterpolation: InterpolateDiscrete,

  	InterpolantFactoryMethodLinear: undefined,
  	InterpolantFactoryMethodSmooth: undefined

  	// Note: Actually this track could have a optimized / compressed
  	// representation of a single value and a custom interpolant that
  	// computes "firstValue ^ isOdd( index )".

  } );

  /**
   *
   * A Track of keyframe values that represent color.
   *
   *
   * @author Ben Houston / http://clara.io/
   * @author David Sarno / http://lighthaus.us/
   * @author tschw
   */

  function ColorKeyframeTrack( name, times, values, interpolation ) {

  	KeyframeTrack.call( this, name, times, values, interpolation );

  }

  ColorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

  	constructor: ColorKeyframeTrack,

  	ValueTypeName: 'color'

  	// ValueBufferType is inherited

  	// DefaultInterpolation is inherited

  	// Note: Very basic implementation and nothing special yet.
  	// However, this is the place for color space parameterization.

  } );

  /**
   *
   * A Track of numeric keyframe values.
   *
   * @author Ben Houston / http://clara.io/
   * @author David Sarno / http://lighthaus.us/
   * @author tschw
   */

  function NumberKeyframeTrack( name, times, values, interpolation ) {

  	KeyframeTrack.call( this, name, times, values, interpolation );

  }

  NumberKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

  	constructor: NumberKeyframeTrack,

  	ValueTypeName: 'number'

  	// ValueBufferType is inherited

  	// DefaultInterpolation is inherited

  } );

  /**
   * Spherical linear unit quaternion interpolant.
   *
   * @author tschw
   */

  function QuaternionLinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

  	Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );

  }

  QuaternionLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {

  	constructor: QuaternionLinearInterpolant,

  	interpolate_: function ( i1, t0, t, t1 ) {

  		var result = this.resultBuffer,
  			values = this.sampleValues,
  			stride = this.valueSize,

  			alpha = ( t - t0 ) / ( t1 - t0 );

  		var offset = i1 * stride;

  		for ( var end = offset + stride; offset !== end; offset += 4 ) {

  			Quaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );

  		}

  		return result;

  	}

  } );

  /**
   *
   * A Track of quaternion keyframe values.
   *
   * @author Ben Houston / http://clara.io/
   * @author David Sarno / http://lighthaus.us/
   * @author tschw
   */

  function QuaternionKeyframeTrack( name, times, values, interpolation ) {

  	KeyframeTrack.call( this, name, times, values, interpolation );

  }

  QuaternionKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

  	constructor: QuaternionKeyframeTrack,

  	ValueTypeName: 'quaternion',

  	// ValueBufferType is inherited

  	DefaultInterpolation: InterpolateLinear,

  	InterpolantFactoryMethodLinear: function ( result ) {

  		return new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );

  	},

  	InterpolantFactoryMethodSmooth: undefined // not yet implemented

  } );

  /**
   *
   * A Track that interpolates Strings
   *
   *
   * @author Ben Houston / http://clara.io/
   * @author David Sarno / http://lighthaus.us/
   * @author tschw
   */

  function StringKeyframeTrack( name, times, values, interpolation ) {

  	KeyframeTrack.call( this, name, times, values, interpolation );

  }

  StringKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

  	constructor: StringKeyframeTrack,

  	ValueTypeName: 'string',
  	ValueBufferType: Array,

  	DefaultInterpolation: InterpolateDiscrete,

  	InterpolantFactoryMethodLinear: undefined,

  	InterpolantFactoryMethodSmooth: undefined

  } );

  /**
   *
   * A Track of vectored keyframe values.
   *
   *
   * @author Ben Houston / http://clara.io/
   * @author David Sarno / http://lighthaus.us/
   * @author tschw
   */

  function VectorKeyframeTrack( name, times, values, interpolation ) {

  	KeyframeTrack.call( this, name, times, values, interpolation );

  }

  VectorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

  	constructor: VectorKeyframeTrack,

  	ValueTypeName: 'vector'

  	// ValueBufferType is inherited

  	// DefaultInterpolation is inherited

  } );

  /**
   *
   * Reusable set of Tracks that represent an animation.
   *
   * @author Ben Houston / http://clara.io/
   * @author David Sarno / http://lighthaus.us/
   */

  function AnimationClip( name, duration, tracks, blendMode ) {

  	this.name = name;
  	this.tracks = tracks;
  	this.duration = ( duration !== undefined ) ? duration : - 1;
  	this.blendMode = ( blendMode !== undefined ) ? blendMode : NormalAnimationBlendMode;

  	this.uuid = MathUtils.generateUUID();

  	// this means it should figure out its duration by scanning the tracks
  	if ( this.duration < 0 ) {

  		this.resetDuration();

  	}

  }

  function getTrackTypeForValueTypeName( typeName ) {

  	switch ( typeName.toLowerCase() ) {

  		case 'scalar':
  		case 'double':
  		case 'float':
  		case 'number':
  		case 'integer':

  			return NumberKeyframeTrack;

  		case 'vector':
  		case 'vector2':
  		case 'vector3':
  		case 'vector4':

  			return VectorKeyframeTrack;

  		case 'color':

  			return ColorKeyframeTrack;

  		case 'quaternion':

  			return QuaternionKeyframeTrack;

  		case 'bool':
  		case 'boolean':

  			return BooleanKeyframeTrack;

  		case 'string':

  			return StringKeyframeTrack;

  	}

  	throw new Error( 'THREE.KeyframeTrack: Unsupported typeName: ' + typeName );

  }

  function parseKeyframeTrack( json ) {

  	if ( json.type === undefined ) {

  		throw new Error( 'THREE.KeyframeTrack: track type undefined, can not parse' );

  	}

  	var trackType = getTrackTypeForValueTypeName( json.type );

  	if ( json.times === undefined ) {

  		var times = [], values = [];

  		AnimationUtils.flattenJSON( json.keys, times, values, 'value' );

  		json.times = times;
  		json.values = values;

  	}

  	// derived classes can define a static parse method
  	if ( trackType.parse !== undefined ) {

  		return trackType.parse( json );

  	} else {

  		// by default, we assume a constructor compatible with the base
  		return new trackType( json.name, json.times, json.values, json.interpolation );

  	}

  }

  Object.assign( AnimationClip, {

  	parse: function ( json ) {

  		var tracks = [],
  			jsonTracks = json.tracks,
  			frameTime = 1.0 / ( json.fps || 1.0 );

  		for ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {

  			tracks.push( parseKeyframeTrack( jsonTracks[ i ] ).scale( frameTime ) );

  		}

  		return new AnimationClip( json.name, json.duration, tracks, json.blendMode );

  	},

  	toJSON: function ( clip ) {

  		var tracks = [],
  			clipTracks = clip.tracks;

  		var json = {

  			'name': clip.name,
  			'duration': clip.duration,
  			'tracks': tracks,
  			'uuid': clip.uuid,
  			'blendMode': clip.blendMode

  		};

  		for ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {

  			tracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );

  		}

  		return json;

  	},

  	CreateFromMorphTargetSequence: function ( name, morphTargetSequence, fps, noLoop ) {

  		var numMorphTargets = morphTargetSequence.length;
  		var tracks = [];

  		for ( var i = 0; i < numMorphTargets; i ++ ) {

  			var times = [];
  			var values = [];

  			times.push(
  				( i + numMorphTargets - 1 ) % numMorphTargets,
  				i,
  				( i + 1 ) % numMorphTargets );

  			values.push( 0, 1, 0 );

  			var order = AnimationUtils.getKeyframeOrder( times );
  			times = AnimationUtils.sortedArray( times, 1, order );
  			values = AnimationUtils.sortedArray( values, 1, order );

  			// if there is a key at the first frame, duplicate it as the
  			// last frame as well for perfect loop.
  			if ( ! noLoop && times[ 0 ] === 0 ) {

  				times.push( numMorphTargets );
  				values.push( values[ 0 ] );

  			}

  			tracks.push(
  				new NumberKeyframeTrack(
  					'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',
  					times, values
  				).scale( 1.0 / fps ) );

  		}

  		return new AnimationClip( name, - 1, tracks );

  	},

  	findByName: function ( objectOrClipArray, name ) {

  		var clipArray = objectOrClipArray;

  		if ( ! Array.isArray( objectOrClipArray ) ) {

  			var o = objectOrClipArray;
  			clipArray = o.geometry && o.geometry.animations || o.animations;

  		}

  		for ( var i = 0; i < clipArray.length; i ++ ) {

  			if ( clipArray[ i ].name === name ) {

  				return clipArray[ i ];

  			}

  		}

  		return null;

  	},

  	CreateClipsFromMorphTargetSequences: function ( morphTargets, fps, noLoop ) {

  		var animationToMorphTargets = {};

  		// tested with https://regex101.com/ on trick sequences
  		// such flamingo_flyA_003, flamingo_run1_003, crdeath0059
  		var pattern = /^([\w-]*?)([\d]+)$/;

  		// sort morph target names into animation groups based
  		// patterns like Walk_001, Walk_002, Run_001, Run_002
  		for ( var i = 0, il = morphTargets.length; i < il; i ++ ) {

  			var morphTarget = morphTargets[ i ];
  			var parts = morphTarget.name.match( pattern );

  			if ( parts && parts.length > 1 ) {

  				var name = parts[ 1 ];

  				var animationMorphTargets = animationToMorphTargets[ name ];

  				if ( ! animationMorphTargets ) {

  					animationToMorphTargets[ name ] = animationMorphTargets = [];

  				}

  				animationMorphTargets.push( morphTarget );

  			}

  		}

  		var clips = [];

  		for ( var name$1 in animationToMorphTargets ) {

  			clips.push( AnimationClip.CreateFromMorphTargetSequence( name$1, animationToMorphTargets[ name$1 ], fps, noLoop ) );

  		}

  		return clips;

  	},

  	// parse the animation.hierarchy format
  	parseAnimation: function ( animation, bones ) {

  		if ( ! animation ) {

  			console.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );
  			return null;

  		}

  		var addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {

  			// only return track if there are actually keys.
  			if ( animationKeys.length !== 0 ) {

  				var times = [];
  				var values = [];

  				AnimationUtils.flattenJSON( animationKeys, times, values, propertyName );

  				// empty keys are filtered out, so check again
  				if ( times.length !== 0 ) {

  					destTracks.push( new trackType( trackName, times, values ) );

  				}

  			}

  		};

  		var tracks = [];

  		var clipName = animation.name || 'default';
  		var fps = animation.fps || 30;
  		var blendMode = animation.blendMode;

  		// automatic length determination in AnimationClip.
  		var duration = animation.length || - 1;

  		var hierarchyTracks = animation.hierarchy || [];

  		for ( var h = 0; h < hierarchyTracks.length; h ++ ) {

  			var animationKeys = hierarchyTracks[ h ].keys;

  			// skip empty tracks
  			if ( ! animationKeys || animationKeys.length === 0 ) { continue; }

  			// process morph targets
  			if ( animationKeys[ 0 ].morphTargets ) {

  				// figure out all morph targets used in this track
  				var morphTargetNames = {};

  				var k = (void 0);

  				for ( k = 0; k < animationKeys.length; k ++ ) {

  					if ( animationKeys[ k ].morphTargets ) {

  						for ( var m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {

  							morphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;

  						}

  					}

  				}

  				// create a track for each morph target with all zero
  				// morphTargetInfluences except for the keys in which
  				// the morphTarget is named.
  				for ( var morphTargetName in morphTargetNames ) {

  					var times = [];
  					var values = [];

  					for ( var m$1 = 0; m$1 !== animationKeys[ k ].morphTargets.length; ++ m$1 ) {

  						var animationKey = animationKeys[ k ];

  						times.push( animationKey.time );
  						values.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );

  					}

  					tracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );

  				}

  				duration = morphTargetNames.length * ( fps || 1.0 );

  			} else {

  				// ...assume skeletal animation

  				var boneName = '.bones[' + bones[ h ].name + ']';

  				addNonemptyTrack(
  					VectorKeyframeTrack, boneName + '.position',
  					animationKeys, 'pos', tracks );

  				addNonemptyTrack(
  					QuaternionKeyframeTrack, boneName + '.quaternion',
  					animationKeys, 'rot', tracks );

  				addNonemptyTrack(
  					VectorKeyframeTrack, boneName + '.scale',
  					animationKeys, 'scl', tracks );

  			}

  		}

  		if ( tracks.length === 0 ) {

  			return null;

  		}

  		var clip = new AnimationClip( clipName, duration, tracks, blendMode );

  		return clip;

  	}

  } );

  Object.assign( AnimationClip.prototype, {

  	resetDuration: function () {

  		var tracks = this.tracks;
  		var duration = 0;

  		for ( var i = 0, n = tracks.length; i !== n; ++ i ) {

  			var track = this.tracks[ i ];

  			duration = Math.max( duration, track.times[ track.times.length - 1 ] );

  		}

  		this.duration = duration;

  		return this;

  	},

  	trim: function () {

  		for ( var i = 0; i < this.tracks.length; i ++ ) {

  			this.tracks[ i ].trim( 0, this.duration );

  		}

  		return this;

  	},

  	validate: function () {

  		var valid = true;

  		for ( var i = 0; i < this.tracks.length; i ++ ) {

  			valid = valid && this.tracks[ i ].validate();

  		}

  		return valid;

  	},

  	optimize: function () {

  		for ( var i = 0; i < this.tracks.length; i ++ ) {

  			this.tracks[ i ].optimize();

  		}

  		return this;

  	},

  	clone: function () {

  		var tracks = [];

  		for ( var i = 0; i < this.tracks.length; i ++ ) {

  			tracks.push( this.tracks[ i ].clone() );

  		}

  		return new AnimationClip( this.name, this.duration, tracks, this.blendMode );

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  var Cache = {

  	enabled: false,

  	files: {},

  	add: function ( key, file ) {

  		if ( this.enabled === false ) { return; }

  		// console.log( 'THREE.Cache', 'Adding key:', key );

  		this.files[ key ] = file;

  	},

  	get: function ( key ) {

  		if ( this.enabled === false ) { return; }

  		// console.log( 'THREE.Cache', 'Checking key:', key );

  		return this.files[ key ];

  	},

  	remove: function ( key ) {

  		delete this.files[ key ];

  	},

  	clear: function () {

  		this.files = {};

  	}

  };

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function LoadingManager( onLoad, onProgress, onError ) {

  	var scope = this;

  	var isLoading = false;
  	var itemsLoaded = 0;
  	var itemsTotal = 0;
  	var urlModifier = undefined;
  	var handlers = [];

  	// Refer to #5689 for the reason why we don't set .onStart
  	// in the constructor

  	this.onStart = undefined;
  	this.onLoad = onLoad;
  	this.onProgress = onProgress;
  	this.onError = onError;

  	this.itemStart = function ( url ) {

  		itemsTotal ++;

  		if ( isLoading === false ) {

  			if ( scope.onStart !== undefined ) {

  				scope.onStart( url, itemsLoaded, itemsTotal );

  			}

  		}

  		isLoading = true;

  	};

  	this.itemEnd = function ( url ) {

  		itemsLoaded ++;

  		if ( scope.onProgress !== undefined ) {

  			scope.onProgress( url, itemsLoaded, itemsTotal );

  		}

  		if ( itemsLoaded === itemsTotal ) {

  			isLoading = false;

  			if ( scope.onLoad !== undefined ) {

  				scope.onLoad();

  			}

  		}

  	};

  	this.itemError = function ( url ) {

  		if ( scope.onError !== undefined ) {

  			scope.onError( url );

  		}

  	};

  	this.resolveURL = function ( url ) {

  		if ( urlModifier ) {

  			return urlModifier( url );

  		}

  		return url;

  	};

  	this.setURLModifier = function ( transform ) {

  		urlModifier = transform;

  		return this;

  	};

  	this.addHandler = function ( regex, loader ) {

  		handlers.push( regex, loader );

  		return this;

  	};

  	this.removeHandler = function ( regex ) {

  		var index = handlers.indexOf( regex );

  		if ( index !== - 1 ) {

  			handlers.splice( index, 2 );

  		}

  		return this;

  	};

  	this.getHandler = function ( file ) {

  		for ( var i = 0, l = handlers.length; i < l; i += 2 ) {

  			var regex = handlers[ i ];
  			var loader = handlers[ i + 1 ];

  			if ( regex.global ) { regex.lastIndex = 0; } // see #17920

  			if ( regex.test( file ) ) {

  				return loader;

  			}

  		}

  		return null;

  	};

  }

  var DefaultLoadingManager = new LoadingManager();

  /**
   * @author alteredq / http://alteredqualia.com/
   */

  function Loader$1( manager ) {

  	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

  	this.crossOrigin = 'anonymous';
  	this.path = '';
  	this.resourcePath = '';
  	this.requestHeader = {};

  }

  Object.assign( Loader$1.prototype, {

  	load: function ( /* url, onLoad, onProgress, onError */ ) {},

  	loadAsync: function ( url, onProgress ) {

  		var scope = this;

  		return new Promise( function ( resolve, reject ) {

  			scope.load( url, resolve, onProgress, reject );

  		} );

  	},

  	parse: function ( /* data */ ) {},

  	setCrossOrigin: function ( crossOrigin ) {

  		this.crossOrigin = crossOrigin;
  		return this;

  	},

  	setPath: function ( path ) {

  		this.path = path;
  		return this;

  	},

  	setResourcePath: function ( resourcePath ) {

  		this.resourcePath = resourcePath;
  		return this;

  	},

  	setRequestHeader: function ( requestHeader ) {

  		this.requestHeader = requestHeader;
  		return this;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  var loading = {};

  function FileLoader( manager ) {

  	Loader$1.call( this, manager );

  }

  FileLoader.prototype = Object.assign( Object.create( Loader$1.prototype ), {

  	constructor: FileLoader,

  	load: function ( url, onLoad, onProgress, onError ) {

  		if ( url === undefined ) { url = ''; }

  		if ( this.path !== undefined ) { url = this.path + url; }

  		url = this.manager.resolveURL( url );

  		var scope = this;

  		var cached = Cache.get( url );

  		if ( cached !== undefined ) {

  			scope.manager.itemStart( url );

  			setTimeout( function () {

  				if ( onLoad ) { onLoad( cached ); }

  				scope.manager.itemEnd( url );

  			}, 0 );

  			return cached;

  		}

  		// Check if request is duplicate

  		if ( loading[ url ] !== undefined ) {

  			loading[ url ].push( {

  				onLoad: onLoad,
  				onProgress: onProgress,
  				onError: onError

  			} );

  			return;

  		}

  		// Check for data: URI
  		var dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;
  		var dataUriRegexResult = url.match( dataUriRegex );
  		var request;

  		// Safari can not handle Data URIs through XMLHttpRequest so process manually
  		if ( dataUriRegexResult ) {

  			var mimeType = dataUriRegexResult[ 1 ];
  			var isBase64 = !! dataUriRegexResult[ 2 ];

  			var data = dataUriRegexResult[ 3 ];
  			data = decodeURIComponent( data );

  			if ( isBase64 ) { data = atob( data ); }

  			try {

  				var response;
  				var responseType = ( this.responseType || '' ).toLowerCase();

  				switch ( responseType ) {

  					case 'arraybuffer':
  					case 'blob':

  						var view = new Uint8Array( data.length );

  						for ( var i = 0; i < data.length; i ++ ) {

  							view[ i ] = data.charCodeAt( i );

  						}

  						if ( responseType === 'blob' ) {

  							response = new Blob( [ view.buffer ], { type: mimeType } );

  						} else {

  							response = view.buffer;

  						}

  						break;

  					case 'document':

  						var parser = new DOMParser();
  						response = parser.parseFromString( data, mimeType );

  						break;

  					case 'json':

  						response = JSON.parse( data );

  						break;

  					default: // 'text' or other

  						response = data;

  						break;

  				}

  				// Wait for next browser tick like standard XMLHttpRequest event dispatching does
  				setTimeout( function () {

  					if ( onLoad ) { onLoad( response ); }

  					scope.manager.itemEnd( url );

  				}, 0 );

  			} catch ( error ) {

  				// Wait for next browser tick like standard XMLHttpRequest event dispatching does
  				setTimeout( function () {

  					if ( onError ) { onError( error ); }

  					scope.manager.itemError( url );
  					scope.manager.itemEnd( url );

  				}, 0 );

  			}

  		} else {

  			// Initialise array for duplicate requests

  			loading[ url ] = [];

  			loading[ url ].push( {

  				onLoad: onLoad,
  				onProgress: onProgress,
  				onError: onError

  			} );

  			request = new XMLHttpRequest();

  			request.open( 'GET', url, true );

  			request.addEventListener( 'load', function ( event ) {

  				var response = this.response;

  				var callbacks = loading[ url ];

  				delete loading[ url ];

  				if ( this.status === 200 || this.status === 0 ) {

  					// Some browsers return HTTP Status 0 when using non-http protocol
  					// e.g. 'file://' or 'data://'. Handle as success.

  					if ( this.status === 0 ) { console.warn( 'THREE.FileLoader: HTTP Status 0 received.' ); }

  					// Add to cache only on HTTP success, so that we do not cache
  					// error response bodies as proper responses to requests.
  					Cache.add( url, response );

  					for ( var i = 0, il = callbacks.length; i < il; i ++ ) {

  						var callback = callbacks[ i ];
  						if ( callback.onLoad ) { callback.onLoad( response ); }

  					}

  					scope.manager.itemEnd( url );

  				} else {

  					for ( var i$1 = 0, il$1 = callbacks.length; i$1 < il$1; i$1 ++ ) {

  						var callback$1 = callbacks[ i$1 ];
  						if ( callback$1.onError ) { callback$1.onError( event ); }

  					}

  					scope.manager.itemError( url );
  					scope.manager.itemEnd( url );

  				}

  			}, false );

  			request.addEventListener( 'progress', function ( event ) {

  				var callbacks = loading[ url ];

  				for ( var i = 0, il = callbacks.length; i < il; i ++ ) {

  					var callback = callbacks[ i ];
  					if ( callback.onProgress ) { callback.onProgress( event ); }

  				}

  			}, false );

  			request.addEventListener( 'error', function ( event ) {

  				var callbacks = loading[ url ];

  				delete loading[ url ];

  				for ( var i = 0, il = callbacks.length; i < il; i ++ ) {

  					var callback = callbacks[ i ];
  					if ( callback.onError ) { callback.onError( event ); }

  				}

  				scope.manager.itemError( url );
  				scope.manager.itemEnd( url );

  			}, false );

  			request.addEventListener( 'abort', function ( event ) {

  				var callbacks = loading[ url ];

  				delete loading[ url ];

  				for ( var i = 0, il = callbacks.length; i < il; i ++ ) {

  					var callback = callbacks[ i ];
  					if ( callback.onError ) { callback.onError( event ); }

  				}

  				scope.manager.itemError( url );
  				scope.manager.itemEnd( url );

  			}, false );

  			if ( this.responseType !== undefined ) { request.responseType = this.responseType; }
  			if ( this.withCredentials !== undefined ) { request.withCredentials = this.withCredentials; }

  			if ( request.overrideMimeType ) { request.overrideMimeType( this.mimeType !== undefined ? this.mimeType : 'text/plain' ); }

  			for ( var header in this.requestHeader ) {

  				request.setRequestHeader( header, this.requestHeader[ header ] );

  			}

  			request.send( null );

  		}

  		scope.manager.itemStart( url );

  		return request;

  	},

  	setResponseType: function ( value ) {

  		this.responseType = value;
  		return this;

  	},

  	setWithCredentials: function ( value ) {

  		this.withCredentials = value;
  		return this;

  	},

  	setMimeType: function ( value ) {

  		this.mimeType = value;
  		return this;

  	}

  } );

  /**
   * @author bhouston / http://clara.io/
   */

  function AnimationLoader( manager ) {

  	Loader$1.call( this, manager );

  }

  AnimationLoader.prototype = Object.assign( Object.create( Loader$1.prototype ), {

  	constructor: AnimationLoader,

  	load: function ( url, onLoad, onProgress, onError ) {

  		var scope = this;

  		var loader = new FileLoader( scope.manager );
  		loader.setPath( scope.path );
  		loader.load( url, function ( text ) {

  			try {

  				onLoad( scope.parse( JSON.parse( text ) ) );

  			} catch ( e ) {

  				if ( onError ) {

  					onError( e );

  				} else {

  					console.error( e );

  				}

  				scope.manager.itemError( url );

  			}

  		}, onProgress, onError );

  	},

  	parse: function ( json ) {

  		var animations = [];

  		for ( var i = 0; i < json.length; i ++ ) {

  			var clip = AnimationClip.parse( json[ i ] );

  			animations.push( clip );

  		}

  		return animations;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   *
   * Abstract Base class to block based textures loader (dds, pvr, ...)
   *
   * Sub classes have to implement the parse() method which will be used in load().
   */

  function CompressedTextureLoader( manager ) {

  	Loader$1.call( this, manager );

  }

  CompressedTextureLoader.prototype = Object.assign( Object.create( Loader$1.prototype ), {

  	constructor: CompressedTextureLoader,

  	load: function ( url, onLoad, onProgress, onError ) {

  		var scope = this;

  		var images = [];

  		var texture = new CompressedTexture();
  		texture.image = images;

  		var loader = new FileLoader( this.manager );
  		loader.setPath( this.path );
  		loader.setResponseType( 'arraybuffer' );

  		var loaded = 0;

  		function loadTexture( i ) {

  			loader.load( url[ i ], function ( buffer ) {

  				var texDatas = scope.parse( buffer, true );

  				images[ i ] = {
  					width: texDatas.width,
  					height: texDatas.height,
  					format: texDatas.format,
  					mipmaps: texDatas.mipmaps
  				};

  				loaded += 1;

  				if ( loaded === 6 ) {

  					if ( texDatas.mipmapCount === 1 )
  						{ texture.minFilter = LinearFilter; }

  					texture.format = texDatas.format;
  					texture.needsUpdate = true;

  					if ( onLoad ) { onLoad( texture ); }

  				}

  			}, onProgress, onError );

  		}

  		if ( Array.isArray( url ) ) {

  			for ( var i = 0, il = url.length; i < il; ++ i ) {

  				loadTexture( i );

  			}

  		} else {

  			// compressed cubemap texture stored in a single DDS file

  			loader.load( url, function ( buffer ) {

  				var texDatas = scope.parse( buffer, true );

  				if ( texDatas.isCubemap ) {

  					var faces = texDatas.mipmaps.length / texDatas.mipmapCount;

  					for ( var f = 0; f < faces; f ++ ) {

  						images[ f ] = { mipmaps: [] };

  						for ( var i = 0; i < texDatas.mipmapCount; i ++ ) {

  							images[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );
  							images[ f ].format = texDatas.format;
  							images[ f ].width = texDatas.width;
  							images[ f ].height = texDatas.height;

  						}

  					}

  				} else {

  					texture.image.width = texDatas.width;
  					texture.image.height = texDatas.height;
  					texture.mipmaps = texDatas.mipmaps;

  				}

  				if ( texDatas.mipmapCount === 1 ) {

  					texture.minFilter = LinearFilter;

  				}

  				texture.format = texDatas.format;
  				texture.needsUpdate = true;

  				if ( onLoad ) { onLoad( texture ); }

  			}, onProgress, onError );

  		}

  		return texture;

  	}

  } );

  /**
   * @author Nikos M. / https://github.com/foo123/
   *
   * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)
   *
   * Sub classes have to implement the parse() method which will be used in load().
   */

  function DataTextureLoader( manager ) {

  	Loader$1.call( this, manager );

  }

  DataTextureLoader.prototype = Object.assign( Object.create( Loader$1.prototype ), {

  	constructor: DataTextureLoader,

  	load: function ( url, onLoad, onProgress, onError ) {

  		var scope = this;

  		var texture = new DataTexture();

  		var loader = new FileLoader( this.manager );
  		loader.setResponseType( 'arraybuffer' );
  		loader.setPath( this.path );
  		loader.load( url, function ( buffer ) {

  			var texData = scope.parse( buffer );

  			if ( ! texData ) { return; }

  			if ( texData.image !== undefined ) {

  				texture.image = texData.image;

  			} else if ( texData.data !== undefined ) {

  				texture.image.width = texData.width;
  				texture.image.height = texData.height;
  				texture.image.data = texData.data;

  			}

  			texture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;
  			texture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;

  			texture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;
  			texture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;

  			texture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;

  			if ( texData.format !== undefined ) {

  				texture.format = texData.format;

  			}

  			if ( texData.type !== undefined ) {

  				texture.type = texData.type;

  			}

  			if ( texData.mipmaps !== undefined ) {

  				texture.mipmaps = texData.mipmaps;
  				texture.minFilter = LinearMipmapLinearFilter; // presumably...

  			}

  			if ( texData.mipmapCount === 1 ) {

  				texture.minFilter = LinearFilter;

  			}

  			texture.needsUpdate = true;

  			if ( onLoad ) { onLoad( texture, texData ); }

  		}, onProgress, onError );


  		return texture;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function ImageLoader( manager ) {

  	Loader$1.call( this, manager );

  }

  ImageLoader.prototype = Object.assign( Object.create( Loader$1.prototype ), {

  	constructor: ImageLoader,

  	load: function ( url, onLoad, onProgress, onError ) {

  		if ( this.path !== undefined ) { url = this.path + url; }

  		url = this.manager.resolveURL( url );

  		var scope = this;

  		var cached = Cache.get( url );

  		if ( cached !== undefined ) {

  			scope.manager.itemStart( url );

  			setTimeout( function () {

  				if ( onLoad ) { onLoad( cached ); }

  				scope.manager.itemEnd( url );

  			}, 0 );

  			return cached;

  		}

  		var image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );

  		function onImageLoad() {

  			image.removeEventListener( 'load', onImageLoad, false );
  			image.removeEventListener( 'error', onImageError, false );

  			Cache.add( url, this );

  			if ( onLoad ) { onLoad( this ); }

  			scope.manager.itemEnd( url );

  		}

  		function onImageError( event ) {

  			image.removeEventListener( 'load', onImageLoad, false );
  			image.removeEventListener( 'error', onImageError, false );

  			if ( onError ) { onError( event ); }

  			scope.manager.itemError( url );
  			scope.manager.itemEnd( url );

  		}

  		image.addEventListener( 'load', onImageLoad, false );
  		image.addEventListener( 'error', onImageError, false );

  		if ( url.substr( 0, 5 ) !== 'data:' ) {

  			if ( this.crossOrigin !== undefined ) { image.crossOrigin = this.crossOrigin; }

  		}

  		scope.manager.itemStart( url );

  		image.src = url;

  		return image;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */


  function CubeTextureLoader( manager ) {

  	Loader$1.call( this, manager );

  }

  CubeTextureLoader.prototype = Object.assign( Object.create( Loader$1.prototype ), {

  	constructor: CubeTextureLoader,

  	load: function ( urls, onLoad, onProgress, onError ) {

  		var texture = new CubeTexture();

  		var loader = new ImageLoader( this.manager );
  		loader.setCrossOrigin( this.crossOrigin );
  		loader.setPath( this.path );

  		var loaded = 0;

  		function loadTexture( i ) {

  			loader.load( urls[ i ], function ( image ) {

  				texture.images[ i ] = image;

  				loaded ++;

  				if ( loaded === 6 ) {

  					texture.needsUpdate = true;

  					if ( onLoad ) { onLoad( texture ); }

  				}

  			}, undefined, onError );

  		}

  		for ( var i = 0; i < urls.length; ++ i ) {

  			loadTexture( i );

  		}

  		return texture;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function TextureLoader( manager ) {

  	Loader$1.call( this, manager );

  }

  TextureLoader.prototype = Object.assign( Object.create( Loader$1.prototype ), {

  	constructor: TextureLoader,

  	load: function ( url, onLoad, onProgress, onError ) {

  		var texture = new Texture();

  		var loader = new ImageLoader( this.manager );
  		loader.setCrossOrigin( this.crossOrigin );
  		loader.setPath( this.path );

  		loader.load( url, function ( image ) {

  			texture.image = image;

  			// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.
  			var isJPEG = url.search( /\.jpe?g($|\?)/i ) > 0 || url.search( /^data\:image\/jpeg/ ) === 0;

  			texture.format = isJPEG ? RGBFormat : RGBAFormat;
  			texture.needsUpdate = true;

  			if ( onLoad !== undefined ) {

  				onLoad( texture );

  			}

  		}, onProgress, onError );

  		return texture;

  	}

  } );

  /**
   * @author zz85 / http://www.lab4games.net/zz85/blog
   * Extensible curve object
   *
   * Some common of curve methods:
   * .getPoint( t, optionalTarget ), .getTangent( t, optionalTarget )
   * .getPointAt( u, optionalTarget ), .getTangentAt( u, optionalTarget )
   * .getPoints(), .getSpacedPoints()
   * .getLength()
   * .updateArcLengths()
   *
   * This following curves inherit from THREE.Curve:
   *
   * -- 2D curves --
   * THREE.ArcCurve
   * THREE.CubicBezierCurve
   * THREE.EllipseCurve
   * THREE.LineCurve
   * THREE.QuadraticBezierCurve
   * THREE.SplineCurve
   *
   * -- 3D curves --
   * THREE.CatmullRomCurve3
   * THREE.CubicBezierCurve3
   * THREE.LineCurve3
   * THREE.QuadraticBezierCurve3
   *
   * A series of curves can be represented as a THREE.CurvePath.
   *
   **/

  /**************************************************************
   *	Abstract Curve base class
   **************************************************************/

  function Curve() {

  	this.type = 'Curve';

  	this.arcLengthDivisions = 200;

  }

  Object.assign( Curve.prototype, {

  	// Virtual base class method to overwrite and implement in subclasses
  	//	- t [0 .. 1]

  	getPoint: function ( /* t, optionalTarget */ ) {

  		console.warn( 'THREE.Curve: .getPoint() not implemented.' );
  		return null;

  	},

  	// Get point at relative position in curve according to arc length
  	// - u [0 .. 1]

  	getPointAt: function ( u, optionalTarget ) {

  		var t = this.getUtoTmapping( u );
  		return this.getPoint( t, optionalTarget );

  	},

  	// Get sequence of points using getPoint( t )

  	getPoints: function ( divisions ) {

  		if ( divisions === undefined ) { divisions = 5; }

  		var points = [];

  		for ( var d = 0; d <= divisions; d ++ ) {

  			points.push( this.getPoint( d / divisions ) );

  		}

  		return points;

  	},

  	// Get sequence of points using getPointAt( u )

  	getSpacedPoints: function ( divisions ) {

  		if ( divisions === undefined ) { divisions = 5; }

  		var points = [];

  		for ( var d = 0; d <= divisions; d ++ ) {

  			points.push( this.getPointAt( d / divisions ) );

  		}

  		return points;

  	},

  	// Get total curve arc length

  	getLength: function () {

  		var lengths = this.getLengths();
  		return lengths[ lengths.length - 1 ];

  	},

  	// Get list of cumulative segment lengths

  	getLengths: function ( divisions ) {

  		if ( divisions === undefined ) { divisions = this.arcLengthDivisions; }

  		if ( this.cacheArcLengths &&
  			( this.cacheArcLengths.length === divisions + 1 ) &&
  			! this.needsUpdate ) {

  			return this.cacheArcLengths;

  		}

  		this.needsUpdate = false;

  		var cache = [];
  		var current, last = this.getPoint( 0 );
  		var sum = 0;

  		cache.push( 0 );

  		for ( var p = 1; p <= divisions; p ++ ) {

  			current = this.getPoint( p / divisions );
  			sum += current.distanceTo( last );
  			cache.push( sum );
  			last = current;

  		}

  		this.cacheArcLengths = cache;

  		return cache; // { sums: cache, sum: sum }; Sum is in the last element.

  	},

  	updateArcLengths: function () {

  		this.needsUpdate = true;
  		this.getLengths();

  	},

  	// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant

  	getUtoTmapping: function ( u, distance ) {

  		var arcLengths = this.getLengths();

  		var i = 0, il = arcLengths.length;

  		var targetArcLength; // The targeted u distance value to get

  		if ( distance ) {

  			targetArcLength = distance;

  		} else {

  			targetArcLength = u * arcLengths[ il - 1 ];

  		}

  		// binary search for the index with largest value smaller than target u distance

  		var low = 0, high = il - 1, comparison;

  		while ( low <= high ) {

  			i = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats

  			comparison = arcLengths[ i ] - targetArcLength;

  			if ( comparison < 0 ) {

  				low = i + 1;

  			} else if ( comparison > 0 ) {

  				high = i - 1;

  			} else {

  				high = i;
  				break;

  				// DONE

  			}

  		}

  		i = high;

  		if ( arcLengths[ i ] === targetArcLength ) {

  			return i / ( il - 1 );

  		}

  		// we could get finer grain at lengths, or use simple interpolation between two points

  		var lengthBefore = arcLengths[ i ];
  		var lengthAfter = arcLengths[ i + 1 ];

  		var segmentLength = lengthAfter - lengthBefore;

  		// determine where we are between the 'before' and 'after' points

  		var segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;

  		// add that fractional amount to t

  		var t = ( i + segmentFraction ) / ( il - 1 );

  		return t;

  	},

  	// Returns a unit vector tangent at t
  	// In case any sub curve does not implement its tangent derivation,
  	// 2 points a small delta apart will be used to find its gradient
  	// which seems to give a reasonable approximation

  	getTangent: function ( t, optionalTarget ) {

  		var delta = 0.0001;
  		var t1 = t - delta;
  		var t2 = t + delta;

  		// Capping in case of danger

  		if ( t1 < 0 ) { t1 = 0; }
  		if ( t2 > 1 ) { t2 = 1; }

  		var pt1 = this.getPoint( t1 );
  		var pt2 = this.getPoint( t2 );

  		var tangent = optionalTarget || ( ( pt1.isVector2 ) ? new Vector2() : new Vector3() );

  		tangent.copy( pt2 ).sub( pt1 ).normalize();

  		return tangent;

  	},

  	getTangentAt: function ( u, optionalTarget ) {

  		var t = this.getUtoTmapping( u );
  		return this.getTangent( t, optionalTarget );

  	},

  	computeFrenetFrames: function ( segments, closed ) {

  		// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf

  		var normal = new Vector3();

  		var tangents = [];
  		var normals = [];
  		var binormals = [];

  		var vec = new Vector3();
  		var mat = new Matrix4();

  		// compute the tangent vectors for each segment on the curve

  		for ( var i = 0; i <= segments; i ++ ) {

  			var u = i / segments;

  			tangents[ i ] = this.getTangentAt( u, new Vector3() );
  			tangents[ i ].normalize();

  		}

  		// select an initial normal vector perpendicular to the first tangent vector,
  		// and in the direction of the minimum tangent xyz component

  		normals[ 0 ] = new Vector3();
  		binormals[ 0 ] = new Vector3();
  		var min = Number.MAX_VALUE;
  		var tx = Math.abs( tangents[ 0 ].x );
  		var ty = Math.abs( tangents[ 0 ].y );
  		var tz = Math.abs( tangents[ 0 ].z );

  		if ( tx <= min ) {

  			min = tx;
  			normal.set( 1, 0, 0 );

  		}

  		if ( ty <= min ) {

  			min = ty;
  			normal.set( 0, 1, 0 );

  		}

  		if ( tz <= min ) {

  			normal.set( 0, 0, 1 );

  		}

  		vec.crossVectors( tangents[ 0 ], normal ).normalize();

  		normals[ 0 ].crossVectors( tangents[ 0 ], vec );
  		binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );


  		// compute the slowly-varying normal and binormal vectors for each segment on the curve

  		for ( var i$1 = 1; i$1 <= segments; i$1 ++ ) {

  			normals[ i$1 ] = normals[ i$1 - 1 ].clone();

  			binormals[ i$1 ] = binormals[ i$1 - 1 ].clone();

  			vec.crossVectors( tangents[ i$1 - 1 ], tangents[ i$1 ] );

  			if ( vec.length() > Number.EPSILON ) {

  				vec.normalize();

  				var theta = Math.acos( MathUtils.clamp( tangents[ i$1 - 1 ].dot( tangents[ i$1 ] ), - 1, 1 ) ); // clamp for floating pt errors

  				normals[ i$1 ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );

  			}

  			binormals[ i$1 ].crossVectors( tangents[ i$1 ], normals[ i$1 ] );

  		}

  		// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same

  		if ( closed === true ) {

  			var theta$1 = Math.acos( MathUtils.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );
  			theta$1 /= segments;

  			if ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {

  				theta$1 = - theta$1;

  			}

  			for ( var i$2 = 1; i$2 <= segments; i$2 ++ ) {

  				// twist a little...
  				normals[ i$2 ].applyMatrix4( mat.makeRotationAxis( tangents[ i$2 ], theta$1 * i$2 ) );
  				binormals[ i$2 ].crossVectors( tangents[ i$2 ], normals[ i$2 ] );

  			}

  		}

  		return {
  			tangents: tangents,
  			normals: normals,
  			binormals: binormals
  		};

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	copy: function ( source ) {

  		this.arcLengthDivisions = source.arcLengthDivisions;

  		return this;

  	},

  	toJSON: function () {

  		var data = {
  			metadata: {
  				version: 4.5,
  				type: 'Curve',
  				generator: 'Curve.toJSON'
  			}
  		};

  		data.arcLengthDivisions = this.arcLengthDivisions;
  		data.type = this.type;

  		return data;

  	},

  	fromJSON: function ( json ) {

  		this.arcLengthDivisions = json.arcLengthDivisions;

  		return this;

  	}

  } );

  function EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

  	Curve.call( this );

  	this.type = 'EllipseCurve';

  	this.aX = aX || 0;
  	this.aY = aY || 0;

  	this.xRadius = xRadius || 1;
  	this.yRadius = yRadius || 1;

  	this.aStartAngle = aStartAngle || 0;
  	this.aEndAngle = aEndAngle || 2 * Math.PI;

  	this.aClockwise = aClockwise || false;

  	this.aRotation = aRotation || 0;

  }

  EllipseCurve.prototype = Object.create( Curve.prototype );
  EllipseCurve.prototype.constructor = EllipseCurve;

  EllipseCurve.prototype.isEllipseCurve = true;

  EllipseCurve.prototype.getPoint = function ( t, optionalTarget ) {

  	var point = optionalTarget || new Vector2();

  	var twoPi = Math.PI * 2;
  	var deltaAngle = this.aEndAngle - this.aStartAngle;
  	var samePoints = Math.abs( deltaAngle ) < Number.EPSILON;

  	// ensures that deltaAngle is 0 .. 2 PI
  	while ( deltaAngle < 0 ) { deltaAngle += twoPi; }
  	while ( deltaAngle > twoPi ) { deltaAngle -= twoPi; }

  	if ( deltaAngle < Number.EPSILON ) {

  		if ( samePoints ) {

  			deltaAngle = 0;

  		} else {

  			deltaAngle = twoPi;

  		}

  	}

  	if ( this.aClockwise === true && ! samePoints ) {

  		if ( deltaAngle === twoPi ) {

  			deltaAngle = - twoPi;

  		} else {

  			deltaAngle = deltaAngle - twoPi;

  		}

  	}

  	var angle = this.aStartAngle + t * deltaAngle;
  	var x = this.aX + this.xRadius * Math.cos( angle );
  	var y = this.aY + this.yRadius * Math.sin( angle );

  	if ( this.aRotation !== 0 ) {

  		var cos = Math.cos( this.aRotation );
  		var sin = Math.sin( this.aRotation );

  		var tx = x - this.aX;
  		var ty = y - this.aY;

  		// Rotate the point about the center of the ellipse.
  		x = tx * cos - ty * sin + this.aX;
  		y = tx * sin + ty * cos + this.aY;

  	}

  	return point.set( x, y );

  };

  EllipseCurve.prototype.copy = function ( source ) {

  	Curve.prototype.copy.call( this, source );

  	this.aX = source.aX;
  	this.aY = source.aY;

  	this.xRadius = source.xRadius;
  	this.yRadius = source.yRadius;

  	this.aStartAngle = source.aStartAngle;
  	this.aEndAngle = source.aEndAngle;

  	this.aClockwise = source.aClockwise;

  	this.aRotation = source.aRotation;

  	return this;

  };


  EllipseCurve.prototype.toJSON = function () {

  	var data = Curve.prototype.toJSON.call( this );

  	data.aX = this.aX;
  	data.aY = this.aY;

  	data.xRadius = this.xRadius;
  	data.yRadius = this.yRadius;

  	data.aStartAngle = this.aStartAngle;
  	data.aEndAngle = this.aEndAngle;

  	data.aClockwise = this.aClockwise;

  	data.aRotation = this.aRotation;

  	return data;

  };

  EllipseCurve.prototype.fromJSON = function ( json ) {

  	Curve.prototype.fromJSON.call( this, json );

  	this.aX = json.aX;
  	this.aY = json.aY;

  	this.xRadius = json.xRadius;
  	this.yRadius = json.yRadius;

  	this.aStartAngle = json.aStartAngle;
  	this.aEndAngle = json.aEndAngle;

  	this.aClockwise = json.aClockwise;

  	this.aRotation = json.aRotation;

  	return this;

  };

  function ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

  	EllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );

  	this.type = 'ArcCurve';

  }

  ArcCurve.prototype = Object.create( EllipseCurve.prototype );
  ArcCurve.prototype.constructor = ArcCurve;

  ArcCurve.prototype.isArcCurve = true;

  /**
   * @author zz85 https://github.com/zz85
   *
   * Centripetal CatmullRom Curve - which is useful for avoiding
   * cusps and self-intersections in non-uniform catmull rom curves.
   * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
   *
   * curve.type accepts centripetal(default), chordal and catmullrom
   * curve.tension is used for catmullrom which defaults to 0.5
   */


  /*
  Based on an optimized c++ solution in
   - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/
   - http://ideone.com/NoEbVM

  This CubicPoly class could be used for reusing some variables and calculations,
  but for three.js curve use, it could be possible inlined and flatten into a single function call
  which can be placed in CurveUtils.
  */

  function CubicPoly() {

  	var c0 = 0, c1 = 0, c2 = 0, c3 = 0;

  	/*
  	 * Compute coefficients for a cubic polynomial
  	 *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3
  	 * such that
  	 *   p(0) = x0, p(1) = x1
  	 *  and
  	 *   p'(0) = t0, p'(1) = t1.
  	 */
  	function init( x0, x1, t0, t1 ) {

  		c0 = x0;
  		c1 = t0;
  		c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;
  		c3 = 2 * x0 - 2 * x1 + t0 + t1;

  	}

  	return {

  		initCatmullRom: function ( x0, x1, x2, x3, tension ) {

  			init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );

  		},

  		initNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {

  			// compute tangents when parameterized in [t1,t2]
  			var t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;
  			var t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;

  			// rescale tangents for parametrization in [0,1]
  			t1 *= dt1;
  			t2 *= dt1;

  			init( x1, x2, t1, t2 );

  		},

  		calc: function ( t ) {

  			var t2 = t * t;
  			var t3 = t2 * t;
  			return c0 + c1 * t + c2 * t2 + c3 * t3;

  		}

  	};

  }

  //

  var tmp = new Vector3();
  var px = new CubicPoly(), py = new CubicPoly(), pz = new CubicPoly();

  function CatmullRomCurve3( points, closed, curveType, tension ) {

  	Curve.call( this );

  	this.type = 'CatmullRomCurve3';

  	this.points = points || [];
  	this.closed = closed || false;
  	this.curveType = curveType || 'centripetal';
  	this.tension = tension || 0.5;

  }

  CatmullRomCurve3.prototype = Object.create( Curve.prototype );
  CatmullRomCurve3.prototype.constructor = CatmullRomCurve3;

  CatmullRomCurve3.prototype.isCatmullRomCurve3 = true;

  CatmullRomCurve3.prototype.getPoint = function ( t, optionalTarget ) {

  	var point = optionalTarget || new Vector3();

  	var points = this.points;
  	var l = points.length;

  	var p = ( l - ( this.closed ? 0 : 1 ) ) * t;
  	var intPoint = Math.floor( p );
  	var weight = p - intPoint;

  	if ( this.closed ) {

  		intPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;

  	} else if ( weight === 0 && intPoint === l - 1 ) {

  		intPoint = l - 2;
  		weight = 1;

  	}

  	var p0, p1, p2, p3; // 4 points

  	if ( this.closed || intPoint > 0 ) {

  		p0 = points[ ( intPoint - 1 ) % l ];

  	} else {

  		// extrapolate first point
  		tmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );
  		p0 = tmp;

  	}

  	p1 = points[ intPoint % l ];
  	p2 = points[ ( intPoint + 1 ) % l ];

  	if ( this.closed || intPoint + 2 < l ) {

  		p3 = points[ ( intPoint + 2 ) % l ];

  	} else {

  		// extrapolate last point
  		tmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );
  		p3 = tmp;

  	}

  	if ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {

  		// init Centripetal / Chordal Catmull-Rom
  		var pow = this.curveType === 'chordal' ? 0.5 : 0.25;
  		var dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );
  		var dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );
  		var dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );

  		// safety check for repeated points
  		if ( dt1 < 1e-4 ) { dt1 = 1.0; }
  		if ( dt0 < 1e-4 ) { dt0 = dt1; }
  		if ( dt2 < 1e-4 ) { dt2 = dt1; }

  		px.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );
  		py.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );
  		pz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );

  	} else if ( this.curveType === 'catmullrom' ) {

  		px.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );
  		py.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );
  		pz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );

  	}

  	point.set(
  		px.calc( weight ),
  		py.calc( weight ),
  		pz.calc( weight )
  	);

  	return point;

  };

  CatmullRomCurve3.prototype.copy = function ( source ) {

  	Curve.prototype.copy.call( this, source );

  	this.points = [];

  	for ( var i = 0, l = source.points.length; i < l; i ++ ) {

  		var point = source.points[ i ];

  		this.points.push( point.clone() );

  	}

  	this.closed = source.closed;
  	this.curveType = source.curveType;
  	this.tension = source.tension;

  	return this;

  };

  CatmullRomCurve3.prototype.toJSON = function () {

  	var data = Curve.prototype.toJSON.call( this );

  	data.points = [];

  	for ( var i = 0, l = this.points.length; i < l; i ++ ) {

  		var point = this.points[ i ];
  		data.points.push( point.toArray() );

  	}

  	data.closed = this.closed;
  	data.curveType = this.curveType;
  	data.tension = this.tension;

  	return data;

  };

  CatmullRomCurve3.prototype.fromJSON = function ( json ) {

  	Curve.prototype.fromJSON.call( this, json );

  	this.points = [];

  	for ( var i = 0, l = json.points.length; i < l; i ++ ) {

  		var point = json.points[ i ];
  		this.points.push( new Vector3().fromArray( point ) );

  	}

  	this.closed = json.closed;
  	this.curveType = json.curveType;
  	this.tension = json.tension;

  	return this;

  };

  /**
   * @author zz85 / http://www.lab4games.net/zz85/blog
   *
   * Bezier Curves formulas obtained from
   * http://en.wikipedia.org/wiki/Bézier_curve
   */

  function CatmullRom( t, p0, p1, p2, p3 ) {

  	var v0 = ( p2 - p0 ) * 0.5;
  	var v1 = ( p3 - p1 ) * 0.5;
  	var t2 = t * t;
  	var t3 = t * t2;
  	return ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;

  }

  //

  function QuadraticBezierP0( t, p ) {

  	var k = 1 - t;
  	return k * k * p;

  }

  function QuadraticBezierP1( t, p ) {

  	return 2 * ( 1 - t ) * t * p;

  }

  function QuadraticBezierP2( t, p ) {

  	return t * t * p;

  }

  function QuadraticBezier( t, p0, p1, p2 ) {

  	return QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +
  		QuadraticBezierP2( t, p2 );

  }

  //

  function CubicBezierP0( t, p ) {

  	var k = 1 - t;
  	return k * k * k * p;

  }

  function CubicBezierP1( t, p ) {

  	var k = 1 - t;
  	return 3 * k * k * t * p;

  }

  function CubicBezierP2( t, p ) {

  	return 3 * ( 1 - t ) * t * t * p;

  }

  function CubicBezierP3( t, p ) {

  	return t * t * t * p;

  }

  function CubicBezier( t, p0, p1, p2, p3 ) {

  	return CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +
  		CubicBezierP3( t, p3 );

  }

  function CubicBezierCurve( v0, v1, v2, v3 ) {

  	Curve.call( this );

  	this.type = 'CubicBezierCurve';

  	this.v0 = v0 || new Vector2();
  	this.v1 = v1 || new Vector2();
  	this.v2 = v2 || new Vector2();
  	this.v3 = v3 || new Vector2();

  }

  CubicBezierCurve.prototype = Object.create( Curve.prototype );
  CubicBezierCurve.prototype.constructor = CubicBezierCurve;

  CubicBezierCurve.prototype.isCubicBezierCurve = true;

  CubicBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {

  	var point = optionalTarget || new Vector2();

  	var v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;

  	point.set(
  		CubicBezier( t, v0.x, v1.x, v2.x, v3.x ),
  		CubicBezier( t, v0.y, v1.y, v2.y, v3.y )
  	);

  	return point;

  };

  CubicBezierCurve.prototype.copy = function ( source ) {

  	Curve.prototype.copy.call( this, source );

  	this.v0.copy( source.v0 );
  	this.v1.copy( source.v1 );
  	this.v2.copy( source.v2 );
  	this.v3.copy( source.v3 );

  	return this;

  };

  CubicBezierCurve.prototype.toJSON = function () {

  	var data = Curve.prototype.toJSON.call( this );

  	data.v0 = this.v0.toArray();
  	data.v1 = this.v1.toArray();
  	data.v2 = this.v2.toArray();
  	data.v3 = this.v3.toArray();

  	return data;

  };

  CubicBezierCurve.prototype.fromJSON = function ( json ) {

  	Curve.prototype.fromJSON.call( this, json );

  	this.v0.fromArray( json.v0 );
  	this.v1.fromArray( json.v1 );
  	this.v2.fromArray( json.v2 );
  	this.v3.fromArray( json.v3 );

  	return this;

  };

  function CubicBezierCurve3( v0, v1, v2, v3 ) {

  	Curve.call( this );

  	this.type = 'CubicBezierCurve3';

  	this.v0 = v0 || new Vector3();
  	this.v1 = v1 || new Vector3();
  	this.v2 = v2 || new Vector3();
  	this.v3 = v3 || new Vector3();

  }

  CubicBezierCurve3.prototype = Object.create( Curve.prototype );
  CubicBezierCurve3.prototype.constructor = CubicBezierCurve3;

  CubicBezierCurve3.prototype.isCubicBezierCurve3 = true;

  CubicBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {

  	var point = optionalTarget || new Vector3();

  	var v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;

  	point.set(
  		CubicBezier( t, v0.x, v1.x, v2.x, v3.x ),
  		CubicBezier( t, v0.y, v1.y, v2.y, v3.y ),
  		CubicBezier( t, v0.z, v1.z, v2.z, v3.z )
  	);

  	return point;

  };

  CubicBezierCurve3.prototype.copy = function ( source ) {

  	Curve.prototype.copy.call( this, source );

  	this.v0.copy( source.v0 );
  	this.v1.copy( source.v1 );
  	this.v2.copy( source.v2 );
  	this.v3.copy( source.v3 );

  	return this;

  };

  CubicBezierCurve3.prototype.toJSON = function () {

  	var data = Curve.prototype.toJSON.call( this );

  	data.v0 = this.v0.toArray();
  	data.v1 = this.v1.toArray();
  	data.v2 = this.v2.toArray();
  	data.v3 = this.v3.toArray();

  	return data;

  };

  CubicBezierCurve3.prototype.fromJSON = function ( json ) {

  	Curve.prototype.fromJSON.call( this, json );

  	this.v0.fromArray( json.v0 );
  	this.v1.fromArray( json.v1 );
  	this.v2.fromArray( json.v2 );
  	this.v3.fromArray( json.v3 );

  	return this;

  };

  function LineCurve( v1, v2 ) {

  	Curve.call( this );

  	this.type = 'LineCurve';

  	this.v1 = v1 || new Vector2();
  	this.v2 = v2 || new Vector2();

  }

  LineCurve.prototype = Object.create( Curve.prototype );
  LineCurve.prototype.constructor = LineCurve;

  LineCurve.prototype.isLineCurve = true;

  LineCurve.prototype.getPoint = function ( t, optionalTarget ) {

  	var point = optionalTarget || new Vector2();

  	if ( t === 1 ) {

  		point.copy( this.v2 );

  	} else {

  		point.copy( this.v2 ).sub( this.v1 );
  		point.multiplyScalar( t ).add( this.v1 );

  	}

  	return point;

  };

  // Line curve is linear, so we can overwrite default getPointAt

  LineCurve.prototype.getPointAt = function ( u, optionalTarget ) {

  	return this.getPoint( u, optionalTarget );

  };

  LineCurve.prototype.getTangent = function ( t, optionalTarget ) {

  	var tangent = optionalTarget || new Vector2();

  	tangent.copy( this.v2 ).sub( this.v1 ).normalize();

  	return tangent;

  };

  LineCurve.prototype.copy = function ( source ) {

  	Curve.prototype.copy.call( this, source );

  	this.v1.copy( source.v1 );
  	this.v2.copy( source.v2 );

  	return this;

  };

  LineCurve.prototype.toJSON = function () {

  	var data = Curve.prototype.toJSON.call( this );

  	data.v1 = this.v1.toArray();
  	data.v2 = this.v2.toArray();

  	return data;

  };

  LineCurve.prototype.fromJSON = function ( json ) {

  	Curve.prototype.fromJSON.call( this, json );

  	this.v1.fromArray( json.v1 );
  	this.v2.fromArray( json.v2 );

  	return this;

  };

  function LineCurve3( v1, v2 ) {

  	Curve.call( this );

  	this.type = 'LineCurve3';

  	this.v1 = v1 || new Vector3();
  	this.v2 = v2 || new Vector3();

  }

  LineCurve3.prototype = Object.create( Curve.prototype );
  LineCurve3.prototype.constructor = LineCurve3;

  LineCurve3.prototype.isLineCurve3 = true;

  LineCurve3.prototype.getPoint = function ( t, optionalTarget ) {

  	var point = optionalTarget || new Vector3();

  	if ( t === 1 ) {

  		point.copy( this.v2 );

  	} else {

  		point.copy( this.v2 ).sub( this.v1 );
  		point.multiplyScalar( t ).add( this.v1 );

  	}

  	return point;

  };

  // Line curve is linear, so we can overwrite default getPointAt

  LineCurve3.prototype.getPointAt = function ( u, optionalTarget ) {

  	return this.getPoint( u, optionalTarget );

  };

  LineCurve3.prototype.copy = function ( source ) {

  	Curve.prototype.copy.call( this, source );

  	this.v1.copy( source.v1 );
  	this.v2.copy( source.v2 );

  	return this;

  };

  LineCurve3.prototype.toJSON = function () {

  	var data = Curve.prototype.toJSON.call( this );

  	data.v1 = this.v1.toArray();
  	data.v2 = this.v2.toArray();

  	return data;

  };

  LineCurve3.prototype.fromJSON = function ( json ) {

  	Curve.prototype.fromJSON.call( this, json );

  	this.v1.fromArray( json.v1 );
  	this.v2.fromArray( json.v2 );

  	return this;

  };

  function QuadraticBezierCurve( v0, v1, v2 ) {

  	Curve.call( this );

  	this.type = 'QuadraticBezierCurve';

  	this.v0 = v0 || new Vector2();
  	this.v1 = v1 || new Vector2();
  	this.v2 = v2 || new Vector2();

  }

  QuadraticBezierCurve.prototype = Object.create( Curve.prototype );
  QuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;

  QuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;

  QuadraticBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {

  	var point = optionalTarget || new Vector2();

  	var v0 = this.v0, v1 = this.v1, v2 = this.v2;

  	point.set(
  		QuadraticBezier( t, v0.x, v1.x, v2.x ),
  		QuadraticBezier( t, v0.y, v1.y, v2.y )
  	);

  	return point;

  };

  QuadraticBezierCurve.prototype.copy = function ( source ) {

  	Curve.prototype.copy.call( this, source );

  	this.v0.copy( source.v0 );
  	this.v1.copy( source.v1 );
  	this.v2.copy( source.v2 );

  	return this;

  };

  QuadraticBezierCurve.prototype.toJSON = function () {

  	var data = Curve.prototype.toJSON.call( this );

  	data.v0 = this.v0.toArray();
  	data.v1 = this.v1.toArray();
  	data.v2 = this.v2.toArray();

  	return data;

  };

  QuadraticBezierCurve.prototype.fromJSON = function ( json ) {

  	Curve.prototype.fromJSON.call( this, json );

  	this.v0.fromArray( json.v0 );
  	this.v1.fromArray( json.v1 );
  	this.v2.fromArray( json.v2 );

  	return this;

  };

  function QuadraticBezierCurve3( v0, v1, v2 ) {

  	Curve.call( this );

  	this.type = 'QuadraticBezierCurve3';

  	this.v0 = v0 || new Vector3();
  	this.v1 = v1 || new Vector3();
  	this.v2 = v2 || new Vector3();

  }

  QuadraticBezierCurve3.prototype = Object.create( Curve.prototype );
  QuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;

  QuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;

  QuadraticBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {

  	var point = optionalTarget || new Vector3();

  	var v0 = this.v0, v1 = this.v1, v2 = this.v2;

  	point.set(
  		QuadraticBezier( t, v0.x, v1.x, v2.x ),
  		QuadraticBezier( t, v0.y, v1.y, v2.y ),
  		QuadraticBezier( t, v0.z, v1.z, v2.z )
  	);

  	return point;

  };

  QuadraticBezierCurve3.prototype.copy = function ( source ) {

  	Curve.prototype.copy.call( this, source );

  	this.v0.copy( source.v0 );
  	this.v1.copy( source.v1 );
  	this.v2.copy( source.v2 );

  	return this;

  };

  QuadraticBezierCurve3.prototype.toJSON = function () {

  	var data = Curve.prototype.toJSON.call( this );

  	data.v0 = this.v0.toArray();
  	data.v1 = this.v1.toArray();
  	data.v2 = this.v2.toArray();

  	return data;

  };

  QuadraticBezierCurve3.prototype.fromJSON = function ( json ) {

  	Curve.prototype.fromJSON.call( this, json );

  	this.v0.fromArray( json.v0 );
  	this.v1.fromArray( json.v1 );
  	this.v2.fromArray( json.v2 );

  	return this;

  };

  function SplineCurve( points /* array of Vector2 */ ) {

  	Curve.call( this );

  	this.type = 'SplineCurve';

  	this.points = points || [];

  }

  SplineCurve.prototype = Object.create( Curve.prototype );
  SplineCurve.prototype.constructor = SplineCurve;

  SplineCurve.prototype.isSplineCurve = true;

  SplineCurve.prototype.getPoint = function ( t, optionalTarget ) {

  	var point = optionalTarget || new Vector2();

  	var points = this.points;
  	var p = ( points.length - 1 ) * t;

  	var intPoint = Math.floor( p );
  	var weight = p - intPoint;

  	var p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];
  	var p1 = points[ intPoint ];
  	var p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];
  	var p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];

  	point.set(
  		CatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),
  		CatmullRom( weight, p0.y, p1.y, p2.y, p3.y )
  	);

  	return point;

  };

  SplineCurve.prototype.copy = function ( source ) {

  	Curve.prototype.copy.call( this, source );

  	this.points = [];

  	for ( var i = 0, l = source.points.length; i < l; i ++ ) {

  		var point = source.points[ i ];

  		this.points.push( point.clone() );

  	}

  	return this;

  };

  SplineCurve.prototype.toJSON = function () {

  	var data = Curve.prototype.toJSON.call( this );

  	data.points = [];

  	for ( var i = 0, l = this.points.length; i < l; i ++ ) {

  		var point = this.points[ i ];
  		data.points.push( point.toArray() );

  	}

  	return data;

  };

  SplineCurve.prototype.fromJSON = function ( json ) {

  	Curve.prototype.fromJSON.call( this, json );

  	this.points = [];

  	for ( var i = 0, l = json.points.length; i < l; i ++ ) {

  		var point = json.points[ i ];
  		this.points.push( new Vector2().fromArray( point ) );

  	}

  	return this;

  };

  var Curves = /*#__PURE__*/Object.freeze({
  	__proto__: null,
  	ArcCurve: ArcCurve,
  	CatmullRomCurve3: CatmullRomCurve3,
  	CubicBezierCurve: CubicBezierCurve,
  	CubicBezierCurve3: CubicBezierCurve3,
  	EllipseCurve: EllipseCurve,
  	LineCurve: LineCurve,
  	LineCurve3: LineCurve3,
  	QuadraticBezierCurve: QuadraticBezierCurve,
  	QuadraticBezierCurve3: QuadraticBezierCurve3,
  	SplineCurve: SplineCurve
  });

  /**
   * @author zz85 / http://www.lab4games.net/zz85/blog
   *
   **/

  /**************************************************************
   *	Curved Path - a curve path is simply a array of connected
   *  curves, but retains the api of a curve
   **************************************************************/

  function CurvePath() {

  	Curve.call( this );

  	this.type = 'CurvePath';

  	this.curves = [];
  	this.autoClose = false; // Automatically closes the path

  }

  CurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {

  	constructor: CurvePath,

  	add: function ( curve ) {

  		this.curves.push( curve );

  	},

  	closePath: function () {

  		// Add a line curve if start and end of lines are not connected
  		var startPoint = this.curves[ 0 ].getPoint( 0 );
  		var endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );

  		if ( ! startPoint.equals( endPoint ) ) {

  			this.curves.push( new LineCurve( endPoint, startPoint ) );

  		}

  	},

  	// To get accurate point with reference to
  	// entire path distance at time t,
  	// following has to be done:

  	// 1. Length of each sub path have to be known
  	// 2. Locate and identify type of curve
  	// 3. Get t for the curve
  	// 4. Return curve.getPointAt(t')

  	getPoint: function ( t ) {

  		var d = t * this.getLength();
  		var curveLengths = this.getCurveLengths();
  		var i = 0;

  		// To think about boundaries points.

  		while ( i < curveLengths.length ) {

  			if ( curveLengths[ i ] >= d ) {

  				var diff = curveLengths[ i ] - d;
  				var curve = this.curves[ i ];

  				var segmentLength = curve.getLength();
  				var u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;

  				return curve.getPointAt( u );

  			}

  			i ++;

  		}

  		return null;

  		// loop where sum != 0, sum > d , sum+1 <d

  	},

  	// We cannot use the default THREE.Curve getPoint() with getLength() because in
  	// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
  	// getPoint() depends on getLength

  	getLength: function () {

  		var lens = this.getCurveLengths();
  		return lens[ lens.length - 1 ];

  	},

  	// cacheLengths must be recalculated.
  	updateArcLengths: function () {

  		this.needsUpdate = true;
  		this.cacheLengths = null;
  		this.getCurveLengths();

  	},

  	// Compute lengths and cache them
  	// We cannot overwrite getLengths() because UtoT mapping uses it.

  	getCurveLengths: function () {

  		// We use cache values if curves and cache array are same length

  		if ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {

  			return this.cacheLengths;

  		}

  		// Get length of sub-curve
  		// Push sums into cached array

  		var lengths = [];
  		var sums = 0;

  		for ( var i = 0, l = this.curves.length; i < l; i ++ ) {

  			sums += this.curves[ i ].getLength();
  			lengths.push( sums );

  		}

  		this.cacheLengths = lengths;

  		return lengths;

  	},

  	getSpacedPoints: function ( divisions ) {

  		if ( divisions === undefined ) { divisions = 40; }

  		var points = [];

  		for ( var i = 0; i <= divisions; i ++ ) {

  			points.push( this.getPoint( i / divisions ) );

  		}

  		if ( this.autoClose ) {

  			points.push( points[ 0 ] );

  		}

  		return points;

  	},

  	getPoints: function ( divisions ) {

  		divisions = divisions || 12;

  		var points = [];
  		var last;

  		for ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {

  			var curve = curves[ i ];
  			var resolution = ( curve && curve.isEllipseCurve ) ? divisions * 2
  				: ( curve && ( curve.isLineCurve || curve.isLineCurve3 ) ) ? 1
  					: ( curve && curve.isSplineCurve ) ? divisions * curve.points.length
  						: divisions;

  			var pts = curve.getPoints( resolution );

  			for ( var j = 0; j < pts.length; j ++ ) {

  				var point = pts[ j ];

  				if ( last && last.equals( point ) ) { continue; } // ensures no consecutive points are duplicates

  				points.push( point );
  				last = point;

  			}

  		}

  		if ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {

  			points.push( points[ 0 ] );

  		}

  		return points;

  	},

  	copy: function ( source ) {

  		Curve.prototype.copy.call( this, source );

  		this.curves = [];

  		for ( var i = 0, l = source.curves.length; i < l; i ++ ) {

  			var curve = source.curves[ i ];

  			this.curves.push( curve.clone() );

  		}

  		this.autoClose = source.autoClose;

  		return this;

  	},

  	toJSON: function () {

  		var data = Curve.prototype.toJSON.call( this );

  		data.autoClose = this.autoClose;
  		data.curves = [];

  		for ( var i = 0, l = this.curves.length; i < l; i ++ ) {

  			var curve = this.curves[ i ];
  			data.curves.push( curve.toJSON() );

  		}

  		return data;

  	},

  	fromJSON: function ( json ) {

  		Curve.prototype.fromJSON.call( this, json );

  		this.autoClose = json.autoClose;
  		this.curves = [];

  		for ( var i = 0, l = json.curves.length; i < l; i ++ ) {

  			var curve = json.curves[ i ];
  			this.curves.push( new Curves[ curve.type ]().fromJSON( curve ) );

  		}

  		return this;

  	}

  } );

  /**
   * @author zz85 / http://www.lab4games.net/zz85/blog
   * Creates free form 2d path using series of points, lines or curves.
   **/

  function Path( points ) {

  	CurvePath.call( this );

  	this.type = 'Path';

  	this.currentPoint = new Vector2();

  	if ( points ) {

  		this.setFromPoints( points );

  	}

  }

  Path.prototype = Object.assign( Object.create( CurvePath.prototype ), {

  	constructor: Path,

  	setFromPoints: function ( points ) {

  		this.moveTo( points[ 0 ].x, points[ 0 ].y );

  		for ( var i = 1, l = points.length; i < l; i ++ ) {

  			this.lineTo( points[ i ].x, points[ i ].y );

  		}

  		return this;

  	},

  	moveTo: function ( x, y ) {

  		this.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?

  		return this;

  	},

  	lineTo: function ( x, y ) {

  		var curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );
  		this.curves.push( curve );

  		this.currentPoint.set( x, y );

  		return this;

  	},

  	quadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {

  		var curve = new QuadraticBezierCurve(
  			this.currentPoint.clone(),
  			new Vector2( aCPx, aCPy ),
  			new Vector2( aX, aY )
  		);

  		this.curves.push( curve );

  		this.currentPoint.set( aX, aY );

  		return this;

  	},

  	bezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {

  		var curve = new CubicBezierCurve(
  			this.currentPoint.clone(),
  			new Vector2( aCP1x, aCP1y ),
  			new Vector2( aCP2x, aCP2y ),
  			new Vector2( aX, aY )
  		);

  		this.curves.push( curve );

  		this.currentPoint.set( aX, aY );

  		return this;

  	},

  	splineThru: function ( pts /*Array of Vector*/ ) {

  		var npts = [ this.currentPoint.clone() ].concat( pts );

  		var curve = new SplineCurve( npts );
  		this.curves.push( curve );

  		this.currentPoint.copy( pts[ pts.length - 1 ] );

  		return this;

  	},

  	arc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

  		var x0 = this.currentPoint.x;
  		var y0 = this.currentPoint.y;

  		this.absarc( aX + x0, aY + y0, aRadius,
  			aStartAngle, aEndAngle, aClockwise );

  		return this;

  	},

  	absarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

  		this.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );

  		return this;

  	},

  	ellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

  		var x0 = this.currentPoint.x;
  		var y0 = this.currentPoint.y;

  		this.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );

  		return this;

  	},

  	absellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

  		var curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );

  		if ( this.curves.length > 0 ) {

  			// if a previous curve is present, attempt to join
  			var firstPoint = curve.getPoint( 0 );

  			if ( ! firstPoint.equals( this.currentPoint ) ) {

  				this.lineTo( firstPoint.x, firstPoint.y );

  			}

  		}

  		this.curves.push( curve );

  		var lastPoint = curve.getPoint( 1 );
  		this.currentPoint.copy( lastPoint );

  		return this;

  	},

  	copy: function ( source ) {

  		CurvePath.prototype.copy.call( this, source );

  		this.currentPoint.copy( source.currentPoint );

  		return this;

  	},

  	toJSON: function () {

  		var data = CurvePath.prototype.toJSON.call( this );

  		data.currentPoint = this.currentPoint.toArray();

  		return data;

  	},

  	fromJSON: function ( json ) {

  		CurvePath.prototype.fromJSON.call( this, json );

  		this.currentPoint.fromArray( json.currentPoint );

  		return this;

  	}

  } );

  /**
   * @author zz85 / http://www.lab4games.net/zz85/blog
   * Defines a 2d shape plane using paths.
   **/

  // STEP 1 Create a path.
  // STEP 2 Turn path into shape.
  // STEP 3 ExtrudeGeometry takes in Shape/Shapes
  // STEP 3a - Extract points from each shape, turn to vertices
  // STEP 3b - Triangulate each shape, add faces.

  function Shape$1( points ) {

  	Path.call( this, points );

  	this.uuid = MathUtils.generateUUID();

  	this.type = 'Shape';

  	this.holes = [];

  }

  Shape$1.prototype = Object.assign( Object.create( Path.prototype ), {

  	constructor: Shape$1,

  	getPointsHoles: function ( divisions ) {

  		var holesPts = [];

  		for ( var i = 0, l = this.holes.length; i < l; i ++ ) {

  			holesPts[ i ] = this.holes[ i ].getPoints( divisions );

  		}

  		return holesPts;

  	},

  	// get points of shape and holes (keypoints based on segments parameter)

  	extractPoints: function ( divisions ) {

  		return {

  			shape: this.getPoints( divisions ),
  			holes: this.getPointsHoles( divisions )

  		};

  	},

  	copy: function ( source ) {

  		Path.prototype.copy.call( this, source );

  		this.holes = [];

  		for ( var i = 0, l = source.holes.length; i < l; i ++ ) {

  			var hole = source.holes[ i ];

  			this.holes.push( hole.clone() );

  		}

  		return this;

  	},

  	toJSON: function () {

  		var data = Path.prototype.toJSON.call( this );

  		data.uuid = this.uuid;
  		data.holes = [];

  		for ( var i = 0, l = this.holes.length; i < l; i ++ ) {

  			var hole = this.holes[ i ];
  			data.holes.push( hole.toJSON() );

  		}

  		return data;

  	},

  	fromJSON: function ( json ) {

  		Path.prototype.fromJSON.call( this, json );

  		this.uuid = json.uuid;
  		this.holes = [];

  		for ( var i = 0, l = json.holes.length; i < l; i ++ ) {

  			var hole = json.holes[ i ];
  			this.holes.push( new Path().fromJSON( hole ) );

  		}

  		return this;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author alteredq / http://alteredqualia.com/
   */

  function Light( color, intensity ) {

  	Object3D.call( this );

  	this.type = 'Light';

  	this.color = new Color( color );
  	this.intensity = intensity !== undefined ? intensity : 1;

  	this.receiveShadow = undefined;

  }

  Light.prototype = Object.assign( Object.create( Object3D.prototype ), {

  	constructor: Light,

  	isLight: true,

  	copy: function ( source ) {

  		Object3D.prototype.copy.call( this, source );

  		this.color.copy( source.color );
  		this.intensity = source.intensity;

  		return this;

  	},

  	toJSON: function ( meta ) {

  		var data = Object3D.prototype.toJSON.call( this, meta );

  		data.object.color = this.color.getHex();
  		data.object.intensity = this.intensity;

  		if ( this.groundColor !== undefined ) { data.object.groundColor = this.groundColor.getHex(); }

  		if ( this.distance !== undefined ) { data.object.distance = this.distance; }
  		if ( this.angle !== undefined ) { data.object.angle = this.angle; }
  		if ( this.decay !== undefined ) { data.object.decay = this.decay; }
  		if ( this.penumbra !== undefined ) { data.object.penumbra = this.penumbra; }

  		if ( this.shadow !== undefined ) { data.object.shadow = this.shadow.toJSON(); }

  		return data;

  	}

  } );

  /**
   * @author alteredq / http://alteredqualia.com/
   */

  function HemisphereLight( skyColor, groundColor, intensity ) {

  	Light.call( this, skyColor, intensity );

  	this.type = 'HemisphereLight';

  	this.castShadow = undefined;

  	this.position.copy( Object3D.DefaultUp );
  	this.updateMatrix();

  	this.groundColor = new Color( groundColor );

  }

  HemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {

  	constructor: HemisphereLight,

  	isHemisphereLight: true,

  	copy: function ( source ) {

  		Light.prototype.copy.call( this, source );

  		this.groundColor.copy( source.groundColor );

  		return this;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function LightShadow( camera ) {

  	this.camera = camera;

  	this.bias = 0;
  	this.normalBias = 0;
  	this.radius = 1;

  	this.mapSize = new Vector2( 512, 512 );

  	this.map = null;
  	this.mapPass = null;
  	this.matrix = new Matrix4();

  	this.autoUpdate = true;
  	this.needsUpdate = false;

  	this._frustum = new Frustum();
  	this._frameExtents = new Vector2( 1, 1 );

  	this._viewportCount = 1;

  	this._viewports = [

  		new Vector4( 0, 0, 1, 1 )

  	];

  }

  Object.assign( LightShadow.prototype, {

  	_projScreenMatrix: new Matrix4(),

  	_lightPositionWorld: new Vector3(),

  	_lookTarget: new Vector3(),

  	getViewportCount: function () {

  		return this._viewportCount;

  	},

  	getFrustum: function () {

  		return this._frustum;

  	},

  	updateMatrices: function ( light ) {

  		var shadowCamera = this.camera,
  			shadowMatrix = this.matrix,
  			projScreenMatrix = this._projScreenMatrix,
  			lookTarget = this._lookTarget,
  			lightPositionWorld = this._lightPositionWorld;

  		lightPositionWorld.setFromMatrixPosition( light.matrixWorld );
  		shadowCamera.position.copy( lightPositionWorld );

  		lookTarget.setFromMatrixPosition( light.target.matrixWorld );
  		shadowCamera.lookAt( lookTarget );
  		shadowCamera.updateMatrixWorld();

  		projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );
  		this._frustum.setFromProjectionMatrix( projScreenMatrix );

  		shadowMatrix.set(
  			0.5, 0.0, 0.0, 0.5,
  			0.0, 0.5, 0.0, 0.5,
  			0.0, 0.0, 0.5, 0.5,
  			0.0, 0.0, 0.0, 1.0
  		);

  		shadowMatrix.multiply( shadowCamera.projectionMatrix );
  		shadowMatrix.multiply( shadowCamera.matrixWorldInverse );

  	},

  	getViewport: function ( viewportIndex ) {

  		return this._viewports[ viewportIndex ];

  	},

  	getFrameExtents: function () {

  		return this._frameExtents;

  	},

  	copy: function ( source ) {

  		this.camera = source.camera.clone();

  		this.bias = source.bias;
  		this.radius = source.radius;

  		this.mapSize.copy( source.mapSize );

  		return this;

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	toJSON: function () {

  		var object = {};

  		if ( this.bias !== 0 ) { object.bias = this.bias; }
  		if ( this.normalBias !== 0 ) { object.normalBias = this.normalBias; }
  		if ( this.radius !== 1 ) { object.radius = this.radius; }
  		if ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) { object.mapSize = this.mapSize.toArray(); }

  		object.camera = this.camera.toJSON( false ).object;
  		delete object.camera.matrix;

  		return object;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function SpotLightShadow() {

  	LightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );

  }

  SpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {

  	constructor: SpotLightShadow,

  	isSpotLightShadow: true,

  	updateMatrices: function ( light ) {

  		var camera = this.camera;

  		var fov = MathUtils.RAD2DEG * 2 * light.angle;
  		var aspect = this.mapSize.width / this.mapSize.height;
  		var far = light.distance || camera.far;

  		if ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {

  			camera.fov = fov;
  			camera.aspect = aspect;
  			camera.far = far;
  			camera.updateProjectionMatrix();

  		}

  		LightShadow.prototype.updateMatrices.call( this, light );

  	}

  } );

  /**
   * @author alteredq / http://alteredqualia.com/
   */

  function SpotLight( color, intensity, distance, angle, penumbra, decay ) {

  	Light.call( this, color, intensity );

  	this.type = 'SpotLight';

  	this.position.copy( Object3D.DefaultUp );
  	this.updateMatrix();

  	this.target = new Object3D();

  	Object.defineProperty( this, 'power', {
  		get: function () {

  			// intensity = power per solid angle.
  			// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
  			return this.intensity * Math.PI;

  		},
  		set: function ( power ) {

  			// intensity = power per solid angle.
  			// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
  			this.intensity = power / Math.PI;

  		}
  	} );

  	this.distance = ( distance !== undefined ) ? distance : 0;
  	this.angle = ( angle !== undefined ) ? angle : Math.PI / 3;
  	this.penumbra = ( penumbra !== undefined ) ? penumbra : 0;
  	this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.

  	this.shadow = new SpotLightShadow();

  }

  SpotLight.prototype = Object.assign( Object.create( Light.prototype ), {

  	constructor: SpotLight,

  	isSpotLight: true,

  	copy: function ( source ) {

  		Light.prototype.copy.call( this, source );

  		this.distance = source.distance;
  		this.angle = source.angle;
  		this.penumbra = source.penumbra;
  		this.decay = source.decay;

  		this.target = source.target.clone();

  		this.shadow = source.shadow.clone();

  		return this;

  	}

  } );

  function PointLightShadow() {

  	LightShadow.call( this, new PerspectiveCamera( 90, 1, 0.5, 500 ) );

  	this._frameExtents = new Vector2( 4, 2 );

  	this._viewportCount = 6;

  	this._viewports = [
  		// These viewports map a cube-map onto a 2D texture with the
  		// following orientation:
  		//
  		//  xzXZ
  		//   y Y
  		//
  		// X - Positive x direction
  		// x - Negative x direction
  		// Y - Positive y direction
  		// y - Negative y direction
  		// Z - Positive z direction
  		// z - Negative z direction

  		// positive X
  		new Vector4( 2, 1, 1, 1 ),
  		// negative X
  		new Vector4( 0, 1, 1, 1 ),
  		// positive Z
  		new Vector4( 3, 1, 1, 1 ),
  		// negative Z
  		new Vector4( 1, 1, 1, 1 ),
  		// positive Y
  		new Vector4( 3, 0, 1, 1 ),
  		// negative Y
  		new Vector4( 1, 0, 1, 1 )
  	];

  	this._cubeDirections = [
  		new Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),
  		new Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )
  	];

  	this._cubeUps = [
  		new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),
  		new Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),	new Vector3( 0, 0, - 1 )
  	];

  }

  PointLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {

  	constructor: PointLightShadow,

  	isPointLightShadow: true,

  	updateMatrices: function ( light, viewportIndex ) {

  		if ( viewportIndex === undefined ) { viewportIndex = 0; }

  		var camera = this.camera,
  			shadowMatrix = this.matrix,
  			lightPositionWorld = this._lightPositionWorld,
  			lookTarget = this._lookTarget,
  			projScreenMatrix = this._projScreenMatrix;

  		lightPositionWorld.setFromMatrixPosition( light.matrixWorld );
  		camera.position.copy( lightPositionWorld );

  		lookTarget.copy( camera.position );
  		lookTarget.add( this._cubeDirections[ viewportIndex ] );
  		camera.up.copy( this._cubeUps[ viewportIndex ] );
  		camera.lookAt( lookTarget );
  		camera.updateMatrixWorld();

  		shadowMatrix.makeTranslation( - lightPositionWorld.x, - lightPositionWorld.y, - lightPositionWorld.z );

  		projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
  		this._frustum.setFromProjectionMatrix( projScreenMatrix );

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */


  function PointLight( color, intensity, distance, decay ) {

  	Light.call( this, color, intensity );

  	this.type = 'PointLight';

  	Object.defineProperty( this, 'power', {
  		get: function () {

  			// intensity = power per solid angle.
  			// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
  			return this.intensity * 4 * Math.PI;

  		},
  		set: function ( power ) {

  			// intensity = power per solid angle.
  			// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
  			this.intensity = power / ( 4 * Math.PI );

  		}
  	} );

  	this.distance = ( distance !== undefined ) ? distance : 0;
  	this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.

  	this.shadow = new PointLightShadow();

  }

  PointLight.prototype = Object.assign( Object.create( Light.prototype ), {

  	constructor: PointLight,

  	isPointLight: true,

  	copy: function ( source ) {

  		Light.prototype.copy.call( this, source );

  		this.distance = source.distance;
  		this.decay = source.decay;

  		this.shadow = source.shadow.clone();

  		return this;

  	}

  } );

  /**
   * @author alteredq / http://alteredqualia.com/
   * @author arose / http://github.com/arose
   */

  function OrthographicCamera( left, right, top, bottom, near, far ) {

  	Camera.call( this );

  	this.type = 'OrthographicCamera';

  	this.zoom = 1;
  	this.view = null;

  	this.left = ( left !== undefined ) ? left : - 1;
  	this.right = ( right !== undefined ) ? right : 1;
  	this.top = ( top !== undefined ) ? top : 1;
  	this.bottom = ( bottom !== undefined ) ? bottom : - 1;

  	this.near = ( near !== undefined ) ? near : 0.1;
  	this.far = ( far !== undefined ) ? far : 2000;

  	this.updateProjectionMatrix();

  }

  OrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {

  	constructor: OrthographicCamera,

  	isOrthographicCamera: true,

  	copy: function ( source, recursive ) {

  		Camera.prototype.copy.call( this, source, recursive );

  		this.left = source.left;
  		this.right = source.right;
  		this.top = source.top;
  		this.bottom = source.bottom;
  		this.near = source.near;
  		this.far = source.far;

  		this.zoom = source.zoom;
  		this.view = source.view === null ? null : Object.assign( {}, source.view );

  		return this;

  	},

  	setViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {

  		if ( this.view === null ) {

  			this.view = {
  				enabled: true,
  				fullWidth: 1,
  				fullHeight: 1,
  				offsetX: 0,
  				offsetY: 0,
  				width: 1,
  				height: 1
  			};

  		}

  		this.view.enabled = true;
  		this.view.fullWidth = fullWidth;
  		this.view.fullHeight = fullHeight;
  		this.view.offsetX = x;
  		this.view.offsetY = y;
  		this.view.width = width;
  		this.view.height = height;

  		this.updateProjectionMatrix();

  	},

  	clearViewOffset: function () {

  		if ( this.view !== null ) {

  			this.view.enabled = false;

  		}

  		this.updateProjectionMatrix();

  	},

  	updateProjectionMatrix: function () {

  		var dx = ( this.right - this.left ) / ( 2 * this.zoom );
  		var dy = ( this.top - this.bottom ) / ( 2 * this.zoom );
  		var cx = ( this.right + this.left ) / 2;
  		var cy = ( this.top + this.bottom ) / 2;

  		var left = cx - dx;
  		var right = cx + dx;
  		var top = cy + dy;
  		var bottom = cy - dy;

  		if ( this.view !== null && this.view.enabled ) {

  			var scaleW = ( this.right - this.left ) / this.view.fullWidth / this.zoom;
  			var scaleH = ( this.top - this.bottom ) / this.view.fullHeight / this.zoom;

  			left += scaleW * this.view.offsetX;
  			right = left + scaleW * this.view.width;
  			top -= scaleH * this.view.offsetY;
  			bottom = top - scaleH * this.view.height;

  		}

  		this.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );

  		this.projectionMatrixInverse.getInverse( this.projectionMatrix );

  	},

  	toJSON: function ( meta ) {

  		var data = Object3D.prototype.toJSON.call( this, meta );

  		data.object.zoom = this.zoom;
  		data.object.left = this.left;
  		data.object.right = this.right;
  		data.object.top = this.top;
  		data.object.bottom = this.bottom;
  		data.object.near = this.near;
  		data.object.far = this.far;

  		if ( this.view !== null ) { data.object.view = Object.assign( {}, this.view ); }

  		return data;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function DirectionalLightShadow() {

  	LightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );

  }

  DirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {

  	constructor: DirectionalLightShadow,

  	isDirectionalLightShadow: true,

  	updateMatrices: function ( light ) {

  		LightShadow.prototype.updateMatrices.call( this, light );

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author alteredq / http://alteredqualia.com/
   */

  function DirectionalLight( color, intensity ) {

  	Light.call( this, color, intensity );

  	this.type = 'DirectionalLight';

  	this.position.copy( Object3D.DefaultUp );
  	this.updateMatrix();

  	this.target = new Object3D();

  	this.shadow = new DirectionalLightShadow();

  }

  DirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {

  	constructor: DirectionalLight,

  	isDirectionalLight: true,

  	copy: function ( source ) {

  		Light.prototype.copy.call( this, source );

  		this.target = source.target.clone();

  		this.shadow = source.shadow.clone();

  		return this;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function AmbientLight( color, intensity ) {

  	Light.call( this, color, intensity );

  	this.type = 'AmbientLight';

  	this.castShadow = undefined;

  }

  AmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {

  	constructor: AmbientLight,

  	isAmbientLight: true

  } );

  /**
   * @author abelnation / http://github.com/abelnation
   */

  function RectAreaLight( color, intensity, width, height ) {

  	Light.call( this, color, intensity );

  	this.type = 'RectAreaLight';

  	this.width = ( width !== undefined ) ? width : 10;
  	this.height = ( height !== undefined ) ? height : 10;

  }

  RectAreaLight.prototype = Object.assign( Object.create( Light.prototype ), {

  	constructor: RectAreaLight,

  	isRectAreaLight: true,

  	copy: function ( source ) {

  		Light.prototype.copy.call( this, source );

  		this.width = source.width;
  		this.height = source.height;

  		return this;

  	},

  	toJSON: function ( meta ) {

  		var data = Light.prototype.toJSON.call( this, meta );

  		data.object.width = this.width;
  		data.object.height = this.height;

  		return data;

  	}

  } );

  /**
   * @author bhouston / http://clara.io
   * @author WestLangley / http://github.com/WestLangley
   *
   * Primary reference:
   *   https://graphics.stanford.edu/papers/envmap/envmap.pdf
   *
   * Secondary reference:
   *   https://www.ppsloan.org/publications/StupidSH36.pdf
   */

  // 3-band SH defined by 9 coefficients

  function SphericalHarmonics3() {

  	this.coefficients = [];

  	for ( var i = 0; i < 9; i ++ ) {

  		this.coefficients.push( new Vector3() );

  	}

  }

  Object.assign( SphericalHarmonics3.prototype, {

  	isSphericalHarmonics3: true,

  	set: function ( coefficients ) {

  		for ( var i = 0; i < 9; i ++ ) {

  			this.coefficients[ i ].copy( coefficients[ i ] );

  		}

  		return this;

  	},

  	zero: function () {

  		for ( var i = 0; i < 9; i ++ ) {

  			this.coefficients[ i ].set( 0, 0, 0 );

  		}

  		return this;

  	},

  	// get the radiance in the direction of the normal
  	// target is a Vector3
  	getAt: function ( normal, target ) {

  		// normal is assumed to be unit length

  		var x = normal.x, y = normal.y, z = normal.z;

  		var coeff = this.coefficients;

  		// band 0
  		target.copy( coeff[ 0 ] ).multiplyScalar( 0.282095 );

  		// band 1
  		target.addScaledVector( coeff[ 1 ], 0.488603 * y );
  		target.addScaledVector( coeff[ 2 ], 0.488603 * z );
  		target.addScaledVector( coeff[ 3 ], 0.488603 * x );

  		// band 2
  		target.addScaledVector( coeff[ 4 ], 1.092548 * ( x * y ) );
  		target.addScaledVector( coeff[ 5 ], 1.092548 * ( y * z ) );
  		target.addScaledVector( coeff[ 6 ], 0.315392 * ( 3.0 * z * z - 1.0 ) );
  		target.addScaledVector( coeff[ 7 ], 1.092548 * ( x * z ) );
  		target.addScaledVector( coeff[ 8 ], 0.546274 * ( x * x - y * y ) );

  		return target;

  	},

  	// get the irradiance (radiance convolved with cosine lobe) in the direction of the normal
  	// target is a Vector3
  	// https://graphics.stanford.edu/papers/envmap/envmap.pdf
  	getIrradianceAt: function ( normal, target ) {

  		// normal is assumed to be unit length

  		var x = normal.x, y = normal.y, z = normal.z;

  		var coeff = this.coefficients;

  		// band 0
  		target.copy( coeff[ 0 ] ).multiplyScalar( 0.886227 ); // π * 0.282095

  		// band 1
  		target.addScaledVector( coeff[ 1 ], 2.0 * 0.511664 * y ); // ( 2 * π / 3 ) * 0.488603
  		target.addScaledVector( coeff[ 2 ], 2.0 * 0.511664 * z );
  		target.addScaledVector( coeff[ 3 ], 2.0 * 0.511664 * x );

  		// band 2
  		target.addScaledVector( coeff[ 4 ], 2.0 * 0.429043 * x * y ); // ( π / 4 ) * 1.092548
  		target.addScaledVector( coeff[ 5 ], 2.0 * 0.429043 * y * z );
  		target.addScaledVector( coeff[ 6 ], 0.743125 * z * z - 0.247708 ); // ( π / 4 ) * 0.315392 * 3
  		target.addScaledVector( coeff[ 7 ], 2.0 * 0.429043 * x * z );
  		target.addScaledVector( coeff[ 8 ], 0.429043 * ( x * x - y * y ) ); // ( π / 4 ) * 0.546274

  		return target;

  	},

  	add: function ( sh ) {

  		for ( var i = 0; i < 9; i ++ ) {

  			this.coefficients[ i ].add( sh.coefficients[ i ] );

  		}

  		return this;

  	},

  	addScaledSH: function ( sh, s ) {

  		for ( var i = 0; i < 9; i ++ ) {

  			this.coefficients[ i ].addScaledVector( sh.coefficients[ i ], s );

  		}

  		return this;

  	},

  	scale: function ( s ) {

  		for ( var i = 0; i < 9; i ++ ) {

  			this.coefficients[ i ].multiplyScalar( s );

  		}

  		return this;

  	},

  	lerp: function ( sh, alpha ) {

  		for ( var i = 0; i < 9; i ++ ) {

  			this.coefficients[ i ].lerp( sh.coefficients[ i ], alpha );

  		}

  		return this;

  	},

  	equals: function ( sh ) {

  		for ( var i = 0; i < 9; i ++ ) {

  			if ( ! this.coefficients[ i ].equals( sh.coefficients[ i ] ) ) {

  				return false;

  			}

  		}

  		return true;

  	},

  	copy: function ( sh ) {

  		return this.set( sh.coefficients );

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	fromArray: function ( array, offset ) {

  		if ( offset === undefined ) { offset = 0; }

  		var coefficients = this.coefficients;

  		for ( var i = 0; i < 9; i ++ ) {

  			coefficients[ i ].fromArray( array, offset + ( i * 3 ) );

  		}

  		return this;

  	},

  	toArray: function ( array, offset ) {

  		if ( array === undefined ) { array = []; }
  		if ( offset === undefined ) { offset = 0; }

  		var coefficients = this.coefficients;

  		for ( var i = 0; i < 9; i ++ ) {

  			coefficients[ i ].toArray( array, offset + ( i * 3 ) );

  		}

  		return array;

  	}

  } );

  Object.assign( SphericalHarmonics3, {

  	// evaluate the basis functions
  	// shBasis is an Array[ 9 ]
  	getBasisAt: function ( normal, shBasis ) {

  		// normal is assumed to be unit length

  		var x = normal.x, y = normal.y, z = normal.z;

  		// band 0
  		shBasis[ 0 ] = 0.282095;

  		// band 1
  		shBasis[ 1 ] = 0.488603 * y;
  		shBasis[ 2 ] = 0.488603 * z;
  		shBasis[ 3 ] = 0.488603 * x;

  		// band 2
  		shBasis[ 4 ] = 1.092548 * x * y;
  		shBasis[ 5 ] = 1.092548 * y * z;
  		shBasis[ 6 ] = 0.315392 * ( 3 * z * z - 1 );
  		shBasis[ 7 ] = 1.092548 * x * z;
  		shBasis[ 8 ] = 0.546274 * ( x * x - y * y );

  	}

  } );

  /**
   * @author WestLangley / http://github.com/WestLangley
   *
   * A LightProbe is a source of indirect-diffuse light
   */

  function LightProbe( sh, intensity ) {

  	Light.call( this, undefined, intensity );

  	this.type = 'LightProbe';

  	this.sh = ( sh !== undefined ) ? sh : new SphericalHarmonics3();

  }

  LightProbe.prototype = Object.assign( Object.create( Light.prototype ), {

  	constructor: LightProbe,

  	isLightProbe: true,

  	copy: function ( source ) {

  		Light.prototype.copy.call( this, source );

  		this.sh.copy( source.sh );

  		return this;

  	},

  	fromJSON: function ( json ) {

  		this.intensity = json.intensity; // TODO: Move this bit to Light.fromJSON();
  		this.sh.fromArray( json.sh );

  		return this;

  	},

  	toJSON: function ( meta ) {

  		var data = Light.prototype.toJSON.call( this, meta );

  		data.object.sh = this.sh.toArray();

  		return data;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function MaterialLoader( manager ) {

  	Loader$1.call( this, manager );

  	this.textures = {};

  }

  MaterialLoader.prototype = Object.assign( Object.create( Loader$1.prototype ), {

  	constructor: MaterialLoader,

  	load: function ( url, onLoad, onProgress, onError ) {

  		var scope = this;

  		var loader = new FileLoader( scope.manager );
  		loader.setPath( scope.path );
  		loader.load( url, function ( text ) {

  			try {

  				onLoad( scope.parse( JSON.parse( text ) ) );

  			} catch ( e ) {

  				if ( onError ) {

  					onError( e );

  				} else {

  					console.error( e );

  				}

  				scope.manager.itemError( url );

  			}

  		}, onProgress, onError );

  	},

  	parse: function ( json ) {

  		var textures = this.textures;

  		function getTexture( name ) {

  			if ( textures[ name ] === undefined ) {

  				console.warn( 'THREE.MaterialLoader: Undefined texture', name );

  			}

  			return textures[ name ];

  		}

  		var material = new Materials[ json.type ]();

  		if ( json.uuid !== undefined ) { material.uuid = json.uuid; }
  		if ( json.name !== undefined ) { material.name = json.name; }
  		if ( json.color !== undefined ) { material.color.setHex( json.color ); }
  		if ( json.roughness !== undefined ) { material.roughness = json.roughness; }
  		if ( json.metalness !== undefined ) { material.metalness = json.metalness; }
  		if ( json.sheen !== undefined ) { material.sheen = new Color().setHex( json.sheen ); }
  		if ( json.emissive !== undefined ) { material.emissive.setHex( json.emissive ); }
  		if ( json.specular !== undefined ) { material.specular.setHex( json.specular ); }
  		if ( json.shininess !== undefined ) { material.shininess = json.shininess; }
  		if ( json.clearcoat !== undefined ) { material.clearcoat = json.clearcoat; }
  		if ( json.clearcoatRoughness !== undefined ) { material.clearcoatRoughness = json.clearcoatRoughness; }
  		if ( json.fog !== undefined ) { material.fog = json.fog; }
  		if ( json.flatShading !== undefined ) { material.flatShading = json.flatShading; }
  		if ( json.blending !== undefined ) { material.blending = json.blending; }
  		if ( json.combine !== undefined ) { material.combine = json.combine; }
  		if ( json.side !== undefined ) { material.side = json.side; }
  		if ( json.opacity !== undefined ) { material.opacity = json.opacity; }
  		if ( json.transparent !== undefined ) { material.transparent = json.transparent; }
  		if ( json.alphaTest !== undefined ) { material.alphaTest = json.alphaTest; }
  		if ( json.depthTest !== undefined ) { material.depthTest = json.depthTest; }
  		if ( json.depthWrite !== undefined ) { material.depthWrite = json.depthWrite; }
  		if ( json.colorWrite !== undefined ) { material.colorWrite = json.colorWrite; }

  		if ( json.stencilWrite !== undefined ) { material.stencilWrite = json.stencilWrite; }
  		if ( json.stencilWriteMask !== undefined ) { material.stencilWriteMask = json.stencilWriteMask; }
  		if ( json.stencilFunc !== undefined ) { material.stencilFunc = json.stencilFunc; }
  		if ( json.stencilRef !== undefined ) { material.stencilRef = json.stencilRef; }
  		if ( json.stencilFuncMask !== undefined ) { material.stencilFuncMask = json.stencilFuncMask; }
  		if ( json.stencilFail !== undefined ) { material.stencilFail = json.stencilFail; }
  		if ( json.stencilZFail !== undefined ) { material.stencilZFail = json.stencilZFail; }
  		if ( json.stencilZPass !== undefined ) { material.stencilZPass = json.stencilZPass; }

  		if ( json.wireframe !== undefined ) { material.wireframe = json.wireframe; }
  		if ( json.wireframeLinewidth !== undefined ) { material.wireframeLinewidth = json.wireframeLinewidth; }
  		if ( json.wireframeLinecap !== undefined ) { material.wireframeLinecap = json.wireframeLinecap; }
  		if ( json.wireframeLinejoin !== undefined ) { material.wireframeLinejoin = json.wireframeLinejoin; }

  		if ( json.rotation !== undefined ) { material.rotation = json.rotation; }

  		if ( json.linewidth !== 1 ) { material.linewidth = json.linewidth; }
  		if ( json.dashSize !== undefined ) { material.dashSize = json.dashSize; }
  		if ( json.gapSize !== undefined ) { material.gapSize = json.gapSize; }
  		if ( json.scale !== undefined ) { material.scale = json.scale; }

  		if ( json.polygonOffset !== undefined ) { material.polygonOffset = json.polygonOffset; }
  		if ( json.polygonOffsetFactor !== undefined ) { material.polygonOffsetFactor = json.polygonOffsetFactor; }
  		if ( json.polygonOffsetUnits !== undefined ) { material.polygonOffsetUnits = json.polygonOffsetUnits; }

  		if ( json.skinning !== undefined ) { material.skinning = json.skinning; }
  		if ( json.morphTargets !== undefined ) { material.morphTargets = json.morphTargets; }
  		if ( json.morphNormals !== undefined ) { material.morphNormals = json.morphNormals; }
  		if ( json.dithering !== undefined ) { material.dithering = json.dithering; }

  		if ( json.vertexTangents !== undefined ) { material.vertexTangents = json.vertexTangents; }

  		if ( json.visible !== undefined ) { material.visible = json.visible; }

  		if ( json.toneMapped !== undefined ) { material.toneMapped = json.toneMapped; }

  		if ( json.userData !== undefined ) { material.userData = json.userData; }

  		if ( json.vertexColors !== undefined ) {

  			if ( typeof json.vertexColors === 'number' ) {

  				material.vertexColors = ( json.vertexColors > 0 ) ? true : false;

  			} else {

  				material.vertexColors = json.vertexColors;

  			}

  		}

  		// Shader Material

  		if ( json.uniforms !== undefined ) {

  			for ( var name in json.uniforms ) {

  				var uniform = json.uniforms[ name ];

  				material.uniforms[ name ] = {};

  				switch ( uniform.type ) {

  					case 't':
  						material.uniforms[ name ].value = getTexture( uniform.value );
  						break;

  					case 'c':
  						material.uniforms[ name ].value = new Color().setHex( uniform.value );
  						break;

  					case 'v2':
  						material.uniforms[ name ].value = new Vector2().fromArray( uniform.value );
  						break;

  					case 'v3':
  						material.uniforms[ name ].value = new Vector3().fromArray( uniform.value );
  						break;

  					case 'v4':
  						material.uniforms[ name ].value = new Vector4().fromArray( uniform.value );
  						break;

  					case 'm3':
  						material.uniforms[ name ].value = new Matrix3().fromArray( uniform.value );

  					case 'm4':
  						material.uniforms[ name ].value = new Matrix4().fromArray( uniform.value );
  						break;

  					default:
  						material.uniforms[ name ].value = uniform.value;

  				}

  			}

  		}

  		if ( json.defines !== undefined ) { material.defines = json.defines; }
  		if ( json.vertexShader !== undefined ) { material.vertexShader = json.vertexShader; }
  		if ( json.fragmentShader !== undefined ) { material.fragmentShader = json.fragmentShader; }

  		if ( json.extensions !== undefined ) {

  			for ( var key in json.extensions ) {

  				material.extensions[ key ] = json.extensions[ key ];

  			}

  		}

  		// Deprecated

  		if ( json.shading !== undefined ) { material.flatShading = json.shading === 1; } // THREE.FlatShading

  		// for PointsMaterial

  		if ( json.size !== undefined ) { material.size = json.size; }
  		if ( json.sizeAttenuation !== undefined ) { material.sizeAttenuation = json.sizeAttenuation; }

  		// maps

  		if ( json.map !== undefined ) { material.map = getTexture( json.map ); }
  		if ( json.matcap !== undefined ) { material.matcap = getTexture( json.matcap ); }

  		if ( json.alphaMap !== undefined ) { material.alphaMap = getTexture( json.alphaMap ); }

  		if ( json.bumpMap !== undefined ) { material.bumpMap = getTexture( json.bumpMap ); }
  		if ( json.bumpScale !== undefined ) { material.bumpScale = json.bumpScale; }

  		if ( json.normalMap !== undefined ) { material.normalMap = getTexture( json.normalMap ); }
  		if ( json.normalMapType !== undefined ) { material.normalMapType = json.normalMapType; }
  		if ( json.normalScale !== undefined ) {

  			var normalScale = json.normalScale;

  			if ( Array.isArray( normalScale ) === false ) {

  				// Blender exporter used to export a scalar. See #7459

  				normalScale = [ normalScale, normalScale ];

  			}

  			material.normalScale = new Vector2().fromArray( normalScale );

  		}

  		if ( json.displacementMap !== undefined ) { material.displacementMap = getTexture( json.displacementMap ); }
  		if ( json.displacementScale !== undefined ) { material.displacementScale = json.displacementScale; }
  		if ( json.displacementBias !== undefined ) { material.displacementBias = json.displacementBias; }

  		if ( json.roughnessMap !== undefined ) { material.roughnessMap = getTexture( json.roughnessMap ); }
  		if ( json.metalnessMap !== undefined ) { material.metalnessMap = getTexture( json.metalnessMap ); }

  		if ( json.emissiveMap !== undefined ) { material.emissiveMap = getTexture( json.emissiveMap ); }
  		if ( json.emissiveIntensity !== undefined ) { material.emissiveIntensity = json.emissiveIntensity; }

  		if ( json.specularMap !== undefined ) { material.specularMap = getTexture( json.specularMap ); }

  		if ( json.envMap !== undefined ) { material.envMap = getTexture( json.envMap ); }
  		if ( json.envMapIntensity !== undefined ) { material.envMapIntensity = json.envMapIntensity; }

  		if ( json.reflectivity !== undefined ) { material.reflectivity = json.reflectivity; }
  		if ( json.refractionRatio !== undefined ) { material.refractionRatio = json.refractionRatio; }

  		if ( json.lightMap !== undefined ) { material.lightMap = getTexture( json.lightMap ); }
  		if ( json.lightMapIntensity !== undefined ) { material.lightMapIntensity = json.lightMapIntensity; }

  		if ( json.aoMap !== undefined ) { material.aoMap = getTexture( json.aoMap ); }
  		if ( json.aoMapIntensity !== undefined ) { material.aoMapIntensity = json.aoMapIntensity; }

  		if ( json.gradientMap !== undefined ) { material.gradientMap = getTexture( json.gradientMap ); }

  		if ( json.clearcoatMap !== undefined ) { material.clearcoatMap = getTexture( json.clearcoatMap ); }
  		if ( json.clearcoatRoughnessMap !== undefined ) { material.clearcoatRoughnessMap = getTexture( json.clearcoatRoughnessMap ); }
  		if ( json.clearcoatNormalMap !== undefined ) { material.clearcoatNormalMap = getTexture( json.clearcoatNormalMap ); }
  		if ( json.clearcoatNormalScale !== undefined ) { material.clearcoatNormalScale = new Vector2().fromArray( json.clearcoatNormalScale ); }

  		return material;

  	},

  	setTextures: function ( value ) {

  		this.textures = value;
  		return this;

  	}

  } );

  /**
   * @author Don McCurdy / https://www.donmccurdy.com
   */

  var LoaderUtils = {

  	decodeText: function ( array ) {

  		if ( typeof TextDecoder !== 'undefined' ) {

  			return new TextDecoder().decode( array );

  		}

  		// Avoid the String.fromCharCode.apply(null, array) shortcut, which
  		// throws a "maximum call stack size exceeded" error for large arrays.

  		var s = '';

  		for ( var i = 0, il = array.length; i < il; i ++ ) {

  			// Implicitly assumes little-endian.
  			s += String.fromCharCode( array[ i ] );

  		}

  		try {

  			// merges multi-byte utf-8 characters.

  			return decodeURIComponent( escape( s ) );

  		} catch ( e ) { // see #16358

  			return s;

  		}

  	},

  	extractUrlBase: function ( url ) {

  		var index = url.lastIndexOf( '/' );

  		if ( index === - 1 ) { return './'; }

  		return url.substr( 0, index + 1 );

  	}

  };

  /**
   * @author benaadams / https://twitter.com/ben_a_adams
   */

  function InstancedBufferGeometry() {

  	BufferGeometry.call( this );

  	this.type = 'InstancedBufferGeometry';
  	this.instanceCount = Infinity;

  }

  InstancedBufferGeometry.prototype = Object.assign( Object.create( BufferGeometry.prototype ), {

  	constructor: InstancedBufferGeometry,

  	isInstancedBufferGeometry: true,

  	copy: function ( source ) {

  		BufferGeometry.prototype.copy.call( this, source );

  		this.instanceCount = source.instanceCount;

  		return this;

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	toJSON: function () {

  		var data = BufferGeometry.prototype.toJSON.call( this );

  		data.instanceCount = this.instanceCount;

  		data.isInstancedBufferGeometry = true;

  		return data;

  	}

  } );

  /**
   * @author benaadams / https://twitter.com/ben_a_adams
   */

  function InstancedBufferAttribute( array, itemSize, normalized, meshPerAttribute ) {

  	if ( typeof ( normalized ) === 'number' ) {

  		meshPerAttribute = normalized;

  		normalized = false;

  		console.error( 'THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.' );

  	}

  	BufferAttribute.call( this, array, itemSize, normalized );

  	this.meshPerAttribute = meshPerAttribute || 1;

  }

  InstancedBufferAttribute.prototype = Object.assign( Object.create( BufferAttribute.prototype ), {

  	constructor: InstancedBufferAttribute,

  	isInstancedBufferAttribute: true,

  	copy: function ( source ) {

  		BufferAttribute.prototype.copy.call( this, source );

  		this.meshPerAttribute = source.meshPerAttribute;

  		return this;

  	},

  	toJSON: function ()	{

  		var data = BufferAttribute.prototype.toJSON.call( this );

  		data.meshPerAttribute = this.meshPerAttribute;

  		data.isInstancedBufferAttribute = true;

  		return data;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function BufferGeometryLoader( manager ) {

  	Loader$1.call( this, manager );

  }

  BufferGeometryLoader.prototype = Object.assign( Object.create( Loader$1.prototype ), {

  	constructor: BufferGeometryLoader,

  	load: function ( url, onLoad, onProgress, onError ) {

  		var scope = this;

  		var loader = new FileLoader( scope.manager );
  		loader.setPath( scope.path );
  		loader.load( url, function ( text ) {

  			try {

  				onLoad( scope.parse( JSON.parse( text ) ) );

  			} catch ( e ) {

  				if ( onError ) {

  					onError( e );

  				} else {

  					console.error( e );

  				}

  				scope.manager.itemError( url );

  			}

  		}, onProgress, onError );

  	},

  	parse: function ( json ) {

  		var interleavedBufferMap = {};
  		var arrayBufferMap = {};

  		function getInterleavedBuffer( json, uuid ) {

  			if ( interleavedBufferMap[ uuid ] !== undefined ) { return interleavedBufferMap[ uuid ]; }

  			var interleavedBuffers = json.interleavedBuffers;
  			var interleavedBuffer = interleavedBuffers[ uuid ];

  			var buffer = getArrayBuffer( json, interleavedBuffer.buffer );

  			var array = new TYPED_ARRAYS[ interleavedBuffer.type ]( buffer );
  			var ib = new InterleavedBuffer( array, interleavedBuffer.stride );
  			ib.uuid = interleavedBuffer.uuid;

  			interleavedBufferMap[ uuid ] = ib;

  			return ib;

  		}

  		function getArrayBuffer( json, uuid ) {

  			if ( arrayBufferMap[ uuid ] !== undefined ) { return arrayBufferMap[ uuid ]; }

  			var arrayBuffers = json.arrayBuffers;
  			var arrayBuffer = arrayBuffers[ uuid ];

  			var ab = new Uint32Array( arrayBuffer ).buffer;

  			arrayBufferMap[ uuid ] = ab;

  			return ab;

  		}

  		var geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();

  		var index = json.data.index;

  		if ( index !== undefined ) {

  			var typedArray = new TYPED_ARRAYS[ index.type ]( index.array );
  			geometry.setIndex( new BufferAttribute( typedArray, 1 ) );

  		}

  		var attributes = json.data.attributes;

  		for ( var key in attributes ) {

  			var attribute = attributes[ key ];
  			var bufferAttribute = (void 0);

  			if ( attribute.isInterleavedBufferAttribute ) {

  				var interleavedBuffer = getInterleavedBuffer( json.data, attribute.data );
  				bufferAttribute = new InterleavedBufferAttribute( interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized );

  			} else {

  				var typedArray$1 = new TYPED_ARRAYS[ attribute.type ]( attribute.array );
  				var bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;
  				bufferAttribute = new bufferAttributeConstr( typedArray$1, attribute.itemSize, attribute.normalized );

  			}

  			if ( attribute.name !== undefined ) { bufferAttribute.name = attribute.name; }
  			geometry.setAttribute( key, bufferAttribute );

  		}

  		var morphAttributes = json.data.morphAttributes;

  		if ( morphAttributes ) {

  			for ( var key$1 in morphAttributes ) {

  				var attributeArray = morphAttributes[ key$1 ];

  				var array = [];

  				for ( var i = 0, il = attributeArray.length; i < il; i ++ ) {

  					var attribute$1 = attributeArray[ i ];
  					var bufferAttribute$1 = (void 0);

  					if ( attribute$1.isInterleavedBufferAttribute ) {

  						var interleavedBuffer$1 = getInterleavedBuffer( json.data, attribute$1.data );
  						bufferAttribute$1 = new InterleavedBufferAttribute( interleavedBuffer$1, attribute$1.itemSize, attribute$1.offset, attribute$1.normalized );

  					} else {

  						var typedArray$2 = new TYPED_ARRAYS[ attribute$1.type ]( attribute$1.array );
  						bufferAttribute$1 = new BufferAttribute( typedArray$2, attribute$1.itemSize, attribute$1.normalized );

  					}

  					if ( attribute$1.name !== undefined ) { bufferAttribute$1.name = attribute$1.name; }
  					array.push( bufferAttribute$1 );

  				}

  				geometry.morphAttributes[ key$1 ] = array;

  			}

  		}

  		var morphTargetsRelative = json.data.morphTargetsRelative;

  		if ( morphTargetsRelative ) {

  			geometry.morphTargetsRelative = true;

  		}

  		var groups = json.data.groups || json.data.drawcalls || json.data.offsets;

  		if ( groups !== undefined ) {

  			for ( var i$1 = 0, n = groups.length; i$1 !== n; ++ i$1 ) {

  				var group = groups[ i$1 ];

  				geometry.addGroup( group.start, group.count, group.materialIndex );

  			}

  		}

  		var boundingSphere = json.data.boundingSphere;

  		if ( boundingSphere !== undefined ) {

  			var center = new Vector3();

  			if ( boundingSphere.center !== undefined ) {

  				center.fromArray( boundingSphere.center );

  			}

  			geometry.boundingSphere = new Sphere( center, boundingSphere.radius );

  		}

  		if ( json.name ) { geometry.name = json.name; }
  		if ( json.userData ) { geometry.userData = json.userData; }

  		return geometry;

  	}

  } );

  var TYPED_ARRAYS = {
  	Int8Array: Int8Array,
  	Uint8Array: Uint8Array,
  	// Workaround for IE11 pre KB2929437. See #11440
  	Uint8ClampedArray: typeof Uint8ClampedArray !== 'undefined' ? Uint8ClampedArray : Uint8Array,
  	Int16Array: Int16Array,
  	Uint16Array: Uint16Array,
  	Int32Array: Int32Array,
  	Uint32Array: Uint32Array,
  	Float32Array: Float32Array,
  	Float64Array: Float64Array
  };

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function ObjectLoader( manager ) {

  	Loader$1.call( this, manager );

  }

  ObjectLoader.prototype = Object.assign( Object.create( Loader$1.prototype ), {

  	constructor: ObjectLoader,

  	load: function ( url, onLoad, onProgress, onError ) {

  		var scope = this;

  		var path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;
  		this.resourcePath = this.resourcePath || path;

  		var loader = new FileLoader( scope.manager );
  		loader.setPath( this.path );
  		loader.load( url, function ( text ) {

  			var json = null;

  			try {

  				json = JSON.parse( text );

  			} catch ( error ) {

  				if ( onError !== undefined ) { onError( error ); }

  				console.error( 'THREE:ObjectLoader: Can\'t parse ' + url + '.', error.message );

  				return;

  			}

  			var metadata = json.metadata;

  			if ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {

  				console.error( 'THREE.ObjectLoader: Can\'t load ' + url );
  				return;

  			}

  			scope.parse( json, onLoad );

  		}, onProgress, onError );

  	},

  	parse: function ( json, onLoad ) {

  		var shapes = this.parseShape( json.shapes );
  		var geometries = this.parseGeometries( json.geometries, shapes );

  		var images = this.parseImages( json.images, function () {

  			if ( onLoad !== undefined ) { onLoad( object ); }

  		} );

  		var textures = this.parseTextures( json.textures, images );
  		var materials = this.parseMaterials( json.materials, textures );

  		var object = this.parseObject( json.object, geometries, materials );

  		if ( json.animations ) {

  			object.animations = this.parseAnimations( json.animations );

  		}

  		if ( json.images === undefined || json.images.length === 0 ) {

  			if ( onLoad !== undefined ) { onLoad( object ); }

  		}

  		return object;

  	},

  	parseShape: function ( json ) {

  		var shapes = {};

  		if ( json !== undefined ) {

  			for ( var i = 0, l = json.length; i < l; i ++ ) {

  				var shape = new Shape$1().fromJSON( json[ i ] );

  				shapes[ shape.uuid ] = shape;

  			}

  		}

  		return shapes;

  	},

  	parseGeometries: function ( json, shapes ) {

  		var geometries = {};
  		var geometryShapes;

  		if ( json !== undefined ) {

  			var bufferGeometryLoader = new BufferGeometryLoader();

  			for ( var i = 0, l = json.length; i < l; i ++ ) {

  				var geometry = (void 0);
  				var data = json[ i ];

  				switch ( data.type ) {

  					case 'PlaneGeometry':
  					case 'PlaneBufferGeometry':

  						geometry = new Geometries[ data.type ](
  							data.width,
  							data.height,
  							data.widthSegments,
  							data.heightSegments
  						);

  						break;

  					case 'BoxGeometry':
  					case 'BoxBufferGeometry':
  					case 'CubeGeometry': // backwards compatible

  						geometry = new Geometries[ data.type ](
  							data.width,
  							data.height,
  							data.depth,
  							data.widthSegments,
  							data.heightSegments,
  							data.depthSegments
  						);

  						break;

  					case 'CircleGeometry':
  					case 'CircleBufferGeometry':

  						geometry = new Geometries[ data.type ](
  							data.radius,
  							data.segments,
  							data.thetaStart,
  							data.thetaLength
  						);

  						break;

  					case 'CylinderGeometry':
  					case 'CylinderBufferGeometry':

  						geometry = new Geometries[ data.type ](
  							data.radiusTop,
  							data.radiusBottom,
  							data.height,
  							data.radialSegments,
  							data.heightSegments,
  							data.openEnded,
  							data.thetaStart,
  							data.thetaLength
  						);

  						break;

  					case 'ConeGeometry':
  					case 'ConeBufferGeometry':

  						geometry = new Geometries[ data.type ](
  							data.radius,
  							data.height,
  							data.radialSegments,
  							data.heightSegments,
  							data.openEnded,
  							data.thetaStart,
  							data.thetaLength
  						);

  						break;

  					case 'SphereGeometry':
  					case 'SphereBufferGeometry':

  						geometry = new Geometries[ data.type ](
  							data.radius,
  							data.widthSegments,
  							data.heightSegments,
  							data.phiStart,
  							data.phiLength,
  							data.thetaStart,
  							data.thetaLength
  						);

  						break;

  					case 'DodecahedronGeometry':
  					case 'DodecahedronBufferGeometry':
  					case 'IcosahedronGeometry':
  					case 'IcosahedronBufferGeometry':
  					case 'OctahedronGeometry':
  					case 'OctahedronBufferGeometry':
  					case 'TetrahedronGeometry':
  					case 'TetrahedronBufferGeometry':

  						geometry = new Geometries[ data.type ](
  							data.radius,
  							data.detail
  						);

  						break;

  					case 'RingGeometry':
  					case 'RingBufferGeometry':

  						geometry = new Geometries[ data.type ](
  							data.innerRadius,
  							data.outerRadius,
  							data.thetaSegments,
  							data.phiSegments,
  							data.thetaStart,
  							data.thetaLength
  						);

  						break;

  					case 'TorusGeometry':
  					case 'TorusBufferGeometry':

  						geometry = new Geometries[ data.type ](
  							data.radius,
  							data.tube,
  							data.radialSegments,
  							data.tubularSegments,
  							data.arc
  						);

  						break;

  					case 'TorusKnotGeometry':
  					case 'TorusKnotBufferGeometry':

  						geometry = new Geometries[ data.type ](
  							data.radius,
  							data.tube,
  							data.tubularSegments,
  							data.radialSegments,
  							data.p,
  							data.q
  						);

  						break;

  					case 'TubeGeometry':
  					case 'TubeBufferGeometry':

  						// This only works for built-in curves (e.g. CatmullRomCurve3).
  						// User defined curves or instances of CurvePath will not be deserialized.
  						geometry = new Geometries[ data.type ](
  							new Curves[ data.path.type ]().fromJSON( data.path ),
  							data.tubularSegments,
  							data.radius,
  							data.radialSegments,
  							data.closed
  						);

  						break;

  					case 'LatheGeometry':
  					case 'LatheBufferGeometry':

  						geometry = new Geometries[ data.type ](
  							data.points,
  							data.segments,
  							data.phiStart,
  							data.phiLength
  						);

  						break;

  					case 'PolyhedronGeometry':
  					case 'PolyhedronBufferGeometry':

  						geometry = new Geometries[ data.type ](
  							data.vertices,
  							data.indices,
  							data.radius,
  							data.details
  						);

  						break;

  					case 'ShapeGeometry':
  					case 'ShapeBufferGeometry':

  						geometryShapes = [];

  						for ( var j = 0, jl = data.shapes.length; j < jl; j ++ ) {

  							var shape = shapes[ data.shapes[ j ] ];

  							geometryShapes.push( shape );

  						}

  						geometry = new Geometries[ data.type ](
  							geometryShapes,
  							data.curveSegments
  						);

  						break;


  					case 'ExtrudeGeometry':
  					case 'ExtrudeBufferGeometry':

  						geometryShapes = [];

  						for ( var j$1 = 0, jl$1 = data.shapes.length; j$1 < jl$1; j$1 ++ ) {

  							var shape$1 = shapes[ data.shapes[ j$1 ] ];

  							geometryShapes.push( shape$1 );

  						}

  						var extrudePath = data.options.extrudePath;

  						if ( extrudePath !== undefined ) {

  							data.options.extrudePath = new Curves[ extrudePath.type ]().fromJSON( extrudePath );

  						}

  						geometry = new Geometries[ data.type ](
  							geometryShapes,
  							data.options
  						);

  						break;

  					case 'BufferGeometry':
  					case 'InstancedBufferGeometry':

  						geometry = bufferGeometryLoader.parse( data );

  						break;

  					case 'Geometry':

  						console.error( 'THREE.ObjectLoader: Loading "Geometry" is not supported anymore.' );

  						break;

  					default:

  						console.warn( 'THREE.ObjectLoader: Unsupported geometry type "' + data.type + '"' );

  						continue;

  				}

  				geometry.uuid = data.uuid;

  				if ( data.name !== undefined ) { geometry.name = data.name; }
  				if ( geometry.isBufferGeometry === true && data.userData !== undefined ) { geometry.userData = data.userData; }

  				geometries[ data.uuid ] = geometry;

  			}

  		}

  		return geometries;

  	},

  	parseMaterials: function ( json, textures ) {

  		var cache = {}; // MultiMaterial
  		var materials = {};

  		if ( json !== undefined ) {

  			var loader = new MaterialLoader();
  			loader.setTextures( textures );

  			for ( var i = 0, l = json.length; i < l; i ++ ) {

  				var data = json[ i ];

  				if ( data.type === 'MultiMaterial' ) {

  					// Deprecated

  					var array = [];

  					for ( var j = 0; j < data.materials.length; j ++ ) {

  						var material = data.materials[ j ];

  						if ( cache[ material.uuid ] === undefined ) {

  							cache[ material.uuid ] = loader.parse( material );

  						}

  						array.push( cache[ material.uuid ] );

  					}

  					materials[ data.uuid ] = array;

  				} else {

  					if ( cache[ data.uuid ] === undefined ) {

  						cache[ data.uuid ] = loader.parse( data );

  					}

  					materials[ data.uuid ] = cache[ data.uuid ];

  				}

  			}

  		}

  		return materials;

  	},

  	parseAnimations: function ( json ) {

  		var animations = [];

  		for ( var i = 0; i < json.length; i ++ ) {

  			var data = json[ i ];

  			var clip = AnimationClip.parse( data );

  			if ( data.uuid !== undefined ) { clip.uuid = data.uuid; }

  			animations.push( clip );

  		}

  		return animations;

  	},

  	parseImages: function ( json, onLoad ) {

  		var scope = this;
  		var images = {};

  		var loader;

  		function loadImage( url ) {

  			scope.manager.itemStart( url );

  			return loader.load( url, function () {

  				scope.manager.itemEnd( url );

  			}, undefined, function () {

  				scope.manager.itemError( url );
  				scope.manager.itemEnd( url );

  			} );

  		}

  		if ( json !== undefined && json.length > 0 ) {

  			var manager = new LoadingManager( onLoad );

  			loader = new ImageLoader( manager );
  			loader.setCrossOrigin( this.crossOrigin );

  			for ( var i = 0, il = json.length; i < il; i ++ ) {

  				var image = json[ i ];
  				var url = image.url;

  				if ( Array.isArray( url ) ) {

  					// load array of images e.g CubeTexture

  					images[ image.uuid ] = [];

  					for ( var j = 0, jl = url.length; j < jl; j ++ ) {

  						var currentUrl = url[ j ];

  						var path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test( currentUrl ) ? currentUrl : scope.resourcePath + currentUrl;

  						images[ image.uuid ].push( loadImage( path ) );

  					}

  				} else {

  					// load single image

  					var path$1 = /^(\/\/)|([a-z]+:(\/\/)?)/i.test( image.url ) ? image.url : scope.resourcePath + image.url;

  					images[ image.uuid ] = loadImage( path$1 );

  				}

  			}

  		}

  		return images;

  	},

  	parseTextures: function ( json, images ) {

  		function parseConstant( value, type ) {

  			if ( typeof value === 'number' ) { return value; }

  			console.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );

  			return type[ value ];

  		}

  		var textures = {};

  		if ( json !== undefined ) {

  			for ( var i = 0, l = json.length; i < l; i ++ ) {

  				var data = json[ i ];

  				if ( data.image === undefined ) {

  					console.warn( 'THREE.ObjectLoader: No "image" specified for', data.uuid );

  				}

  				if ( images[ data.image ] === undefined ) {

  					console.warn( 'THREE.ObjectLoader: Undefined image', data.image );

  				}

  				var texture = (void 0);

  				if ( Array.isArray( images[ data.image ] ) ) {

  					texture = new CubeTexture( images[ data.image ] );

  				} else {

  					texture = new Texture( images[ data.image ] );

  				}

  				texture.needsUpdate = true;

  				texture.uuid = data.uuid;

  				if ( data.name !== undefined ) { texture.name = data.name; }

  				if ( data.mapping !== undefined ) { texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING ); }

  				if ( data.offset !== undefined ) { texture.offset.fromArray( data.offset ); }
  				if ( data.repeat !== undefined ) { texture.repeat.fromArray( data.repeat ); }
  				if ( data.center !== undefined ) { texture.center.fromArray( data.center ); }
  				if ( data.rotation !== undefined ) { texture.rotation = data.rotation; }

  				if ( data.wrap !== undefined ) {

  					texture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );
  					texture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );

  				}

  				if ( data.format !== undefined ) { texture.format = data.format; }
  				if ( data.type !== undefined ) { texture.type = data.type; }
  				if ( data.encoding !== undefined ) { texture.encoding = data.encoding; }

  				if ( data.minFilter !== undefined ) { texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER ); }
  				if ( data.magFilter !== undefined ) { texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER ); }
  				if ( data.anisotropy !== undefined ) { texture.anisotropy = data.anisotropy; }

  				if ( data.flipY !== undefined ) { texture.flipY = data.flipY; }

  				if ( data.premultiplyAlpha !== undefined ) { texture.premultiplyAlpha = data.premultiplyAlpha; }
  				if ( data.unpackAlignment !== undefined ) { texture.unpackAlignment = data.unpackAlignment; }

  				textures[ data.uuid ] = texture;

  			}

  		}

  		return textures;

  	},

  	parseObject: function ( data, geometries, materials ) {

  		var object;

  		function getGeometry( name ) {

  			if ( geometries[ name ] === undefined ) {

  				console.warn( 'THREE.ObjectLoader: Undefined geometry', name );

  			}

  			return geometries[ name ];

  		}

  		function getMaterial( name ) {

  			if ( name === undefined ) { return undefined; }

  			if ( Array.isArray( name ) ) {

  				var array = [];

  				for ( var i = 0, l = name.length; i < l; i ++ ) {

  					var uuid = name[ i ];

  					if ( materials[ uuid ] === undefined ) {

  						console.warn( 'THREE.ObjectLoader: Undefined material', uuid );

  					}

  					array.push( materials[ uuid ] );

  				}

  				return array;

  			}

  			if ( materials[ name ] === undefined ) {

  				console.warn( 'THREE.ObjectLoader: Undefined material', name );

  			}

  			return materials[ name ];

  		}

  		var geometry, material;

  		switch ( data.type ) {

  			case 'Scene':

  				object = new Scene();

  				if ( data.background !== undefined ) {

  					if ( Number.isInteger( data.background ) ) {

  						object.background = new Color( data.background );

  					}

  				}

  				if ( data.fog !== undefined ) {

  					if ( data.fog.type === 'Fog' ) {

  						object.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );

  					} else if ( data.fog.type === 'FogExp2' ) {

  						object.fog = new FogExp2( data.fog.color, data.fog.density );

  					}

  				}

  				break;

  			case 'PerspectiveCamera':

  				object = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );

  				if ( data.focus !== undefined ) { object.focus = data.focus; }
  				if ( data.zoom !== undefined ) { object.zoom = data.zoom; }
  				if ( data.filmGauge !== undefined ) { object.filmGauge = data.filmGauge; }
  				if ( data.filmOffset !== undefined ) { object.filmOffset = data.filmOffset; }
  				if ( data.view !== undefined ) { object.view = Object.assign( {}, data.view ); }

  				break;

  			case 'OrthographicCamera':

  				object = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );

  				if ( data.zoom !== undefined ) { object.zoom = data.zoom; }
  				if ( data.view !== undefined ) { object.view = Object.assign( {}, data.view ); }

  				break;

  			case 'AmbientLight':

  				object = new AmbientLight( data.color, data.intensity );

  				break;

  			case 'DirectionalLight':

  				object = new DirectionalLight( data.color, data.intensity );

  				break;

  			case 'PointLight':

  				object = new PointLight( data.color, data.intensity, data.distance, data.decay );

  				break;

  			case 'RectAreaLight':

  				object = new RectAreaLight( data.color, data.intensity, data.width, data.height );

  				break;

  			case 'SpotLight':

  				object = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );

  				break;

  			case 'HemisphereLight':

  				object = new HemisphereLight( data.color, data.groundColor, data.intensity );

  				break;

  			case 'LightProbe':

  				object = new LightProbe().fromJSON( data );

  				break;

  			case 'SkinnedMesh':

  				console.warn( 'THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.' );

  			case 'Mesh':

  				geometry = getGeometry( data.geometry );
  				material = getMaterial( data.material );

  				object = new Mesh( geometry, material );

  				break;

  			case 'InstancedMesh':

  				geometry = getGeometry( data.geometry );
  				material = getMaterial( data.material );
  				var count = data.count;
  				var instanceMatrix = data.instanceMatrix;

  				object = new InstancedMesh( geometry, material, count );
  				object.instanceMatrix = new BufferAttribute( new Float32Array( instanceMatrix.array ), 16 );

  				break;

  			case 'LOD':

  				object = new LOD();

  				break;

  			case 'Line':

  				object = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );

  				break;

  			case 'LineLoop':

  				object = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );

  				break;

  			case 'LineSegments':

  				object = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );

  				break;

  			case 'PointCloud':
  			case 'Points':

  				object = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );

  				break;

  			case 'Sprite':

  				object = new Sprite( getMaterial( data.material ) );

  				break;

  			case 'Group':

  				object = new Group();

  				break;

  			default:

  				object = new Object3D();

  		}

  		object.uuid = data.uuid;

  		if ( data.name !== undefined ) { object.name = data.name; }

  		if ( data.matrix !== undefined ) {

  			object.matrix.fromArray( data.matrix );

  			if ( data.matrixAutoUpdate !== undefined ) { object.matrixAutoUpdate = data.matrixAutoUpdate; }
  			if ( object.matrixAutoUpdate ) { object.matrix.decompose( object.position, object.quaternion, object.scale ); }

  		} else {

  			if ( data.position !== undefined ) { object.position.fromArray( data.position ); }
  			if ( data.rotation !== undefined ) { object.rotation.fromArray( data.rotation ); }
  			if ( data.quaternion !== undefined ) { object.quaternion.fromArray( data.quaternion ); }
  			if ( data.scale !== undefined ) { object.scale.fromArray( data.scale ); }

  		}

  		if ( data.castShadow !== undefined ) { object.castShadow = data.castShadow; }
  		if ( data.receiveShadow !== undefined ) { object.receiveShadow = data.receiveShadow; }

  		if ( data.shadow ) {

  			if ( data.shadow.bias !== undefined ) { object.shadow.bias = data.shadow.bias; }
  			if ( data.shadow.normalBias !== undefined ) { object.shadow.normalBias = data.shadow.normalBias; }
  			if ( data.shadow.radius !== undefined ) { object.shadow.radius = data.shadow.radius; }
  			if ( data.shadow.mapSize !== undefined ) { object.shadow.mapSize.fromArray( data.shadow.mapSize ); }
  			if ( data.shadow.camera !== undefined ) { object.shadow.camera = this.parseObject( data.shadow.camera ); }

  		}

  		if ( data.visible !== undefined ) { object.visible = data.visible; }
  		if ( data.frustumCulled !== undefined ) { object.frustumCulled = data.frustumCulled; }
  		if ( data.renderOrder !== undefined ) { object.renderOrder = data.renderOrder; }
  		if ( data.userData !== undefined ) { object.userData = data.userData; }
  		if ( data.layers !== undefined ) { object.layers.mask = data.layers; }

  		if ( data.children !== undefined ) {

  			var children = data.children;

  			for ( var i = 0; i < children.length; i ++ ) {

  				object.add( this.parseObject( children[ i ], geometries, materials ) );

  			}

  		}

  		if ( data.type === 'LOD' ) {

  			if ( data.autoUpdate !== undefined ) { object.autoUpdate = data.autoUpdate; }

  			var levels = data.levels;

  			for ( var l = 0; l < levels.length; l ++ ) {

  				var level = levels[ l ];
  				var child = object.getObjectByProperty( 'uuid', level.object );

  				if ( child !== undefined ) {

  					object.addLevel( child, level.distance );

  				}

  			}

  		}

  		return object;

  	}

  } );

  var TEXTURE_MAPPING = {
  	UVMapping: UVMapping,
  	CubeReflectionMapping: CubeReflectionMapping,
  	CubeRefractionMapping: CubeRefractionMapping,
  	EquirectangularReflectionMapping: EquirectangularReflectionMapping,
  	EquirectangularRefractionMapping: EquirectangularRefractionMapping,
  	CubeUVReflectionMapping: CubeUVReflectionMapping,
  	CubeUVRefractionMapping: CubeUVRefractionMapping
  };

  var TEXTURE_WRAPPING = {
  	RepeatWrapping: RepeatWrapping,
  	ClampToEdgeWrapping: ClampToEdgeWrapping,
  	MirroredRepeatWrapping: MirroredRepeatWrapping
  };

  var TEXTURE_FILTER = {
  	NearestFilter: NearestFilter,
  	NearestMipmapNearestFilter: NearestMipmapNearestFilter,
  	NearestMipmapLinearFilter: NearestMipmapLinearFilter,
  	LinearFilter: LinearFilter,
  	LinearMipmapNearestFilter: LinearMipmapNearestFilter,
  	LinearMipmapLinearFilter: LinearMipmapLinearFilter
  };

  /**
   * @author thespite / http://clicktorelease.com/
   */


  function ImageBitmapLoader( manager ) {

  	if ( typeof createImageBitmap === 'undefined' ) {

  		console.warn( 'THREE.ImageBitmapLoader: createImageBitmap() not supported.' );

  	}

  	if ( typeof fetch === 'undefined' ) {

  		console.warn( 'THREE.ImageBitmapLoader: fetch() not supported.' );

  	}

  	Loader$1.call( this, manager );

  	this.options = { premultiplyAlpha: 'none' };

  }

  ImageBitmapLoader.prototype = Object.assign( Object.create( Loader$1.prototype ), {

  	constructor: ImageBitmapLoader,

  	isImageBitmapLoader: true,

  	setOptions: function setOptions( options ) {

  		this.options = options;

  		return this;

  	},

  	load: function ( url, onLoad, onProgress, onError ) {

  		if ( url === undefined ) { url = ''; }

  		if ( this.path !== undefined ) { url = this.path + url; }

  		url = this.manager.resolveURL( url );

  		var scope = this;

  		var cached = Cache.get( url );

  		if ( cached !== undefined ) {

  			scope.manager.itemStart( url );

  			setTimeout( function () {

  				if ( onLoad ) { onLoad( cached ); }

  				scope.manager.itemEnd( url );

  			}, 0 );

  			return cached;

  		}

  		fetch( url ).then( function ( res ) {

  			return res.blob();

  		} ).then( function ( blob ) {

  			return createImageBitmap( blob, scope.options );

  		} ).then( function ( imageBitmap ) {

  			Cache.add( url, imageBitmap );

  			if ( onLoad ) { onLoad( imageBitmap ); }

  			scope.manager.itemEnd( url );

  		} ).catch( function ( e ) {

  			if ( onError ) { onError( e ); }

  			scope.manager.itemError( url );
  			scope.manager.itemEnd( url );

  		} );

  		scope.manager.itemStart( url );

  	}

  } );

  /**
   * @author zz85 / http://www.lab4games.net/zz85/blog
   * minimal class for proxing functions to Path. Replaces old "extractSubpaths()"
   **/

  function ShapePath() {

  	this.type = 'ShapePath';

  	this.color = new Color();

  	this.subPaths = [];
  	this.currentPath = null;

  }

  Object.assign( ShapePath.prototype, {

  	moveTo: function ( x, y ) {

  		this.currentPath = new Path();
  		this.subPaths.push( this.currentPath );
  		this.currentPath.moveTo( x, y );

  		return this;

  	},

  	lineTo: function ( x, y ) {

  		this.currentPath.lineTo( x, y );

  		return this;

  	},

  	quadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {

  		this.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );

  		return this;

  	},

  	bezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {

  		this.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );

  		return this;

  	},

  	splineThru: function ( pts ) {

  		this.currentPath.splineThru( pts );

  		return this;

  	},

  	toShapes: function ( isCCW, noHoles ) {

  		function toShapesNoHoles( inSubpaths ) {

  			var shapes = [];

  			for ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {

  				var tmpPath = inSubpaths[ i ];

  				var tmpShape = new Shape$1();
  				tmpShape.curves = tmpPath.curves;

  				shapes.push( tmpShape );

  			}

  			return shapes;

  		}

  		function isPointInsidePolygon( inPt, inPolygon ) {

  			var polyLen = inPolygon.length;

  			// inPt on polygon contour => immediate success    or
  			// toggling of inside/outside at every single! intersection point of an edge
  			//  with the horizontal line through inPt, left of inPt
  			//  not counting lowerY endpoints of edges and whole edges on that line
  			var inside = false;
  			for ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {

  				var edgeLowPt = inPolygon[ p ];
  				var edgeHighPt = inPolygon[ q ];

  				var edgeDx = edgeHighPt.x - edgeLowPt.x;
  				var edgeDy = edgeHighPt.y - edgeLowPt.y;

  				if ( Math.abs( edgeDy ) > Number.EPSILON ) {

  					// not parallel
  					if ( edgeDy < 0 ) {

  						edgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;
  						edgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;

  					}

  					if ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) 		{ continue; }

  					if ( inPt.y === edgeLowPt.y ) {

  						if ( inPt.x === edgeLowPt.x )		{ return	true; }		// inPt is on contour ?
  						// continue;				// no intersection or edgeLowPt => doesn't count !!!

  					} else {

  						var perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );
  						if ( perpEdge === 0 )				{ return	true; }		// inPt is on contour ?
  						if ( perpEdge < 0 ) 				{ continue; }
  						inside = ! inside;		// true intersection left of inPt

  					}

  				} else {

  					// parallel or collinear
  					if ( inPt.y !== edgeLowPt.y ) 		{ continue; }			// parallel
  					// edge lies on the same horizontal line as inPt
  					if ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||
  						 ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )		{ return	true; }	// inPt: Point on contour !
  					// continue;

  				}

  			}

  			return	inside;

  		}

  		var isClockWise = ShapeUtils.isClockWise;

  		var subPaths = this.subPaths;
  		if ( subPaths.length === 0 ) { return []; }

  		if ( noHoles === true )	{ return	toShapesNoHoles( subPaths ); }


  		var solid, tmpPath, tmpShape, shapes = [];

  		if ( subPaths.length === 1 ) {

  			tmpPath = subPaths[ 0 ];
  			tmpShape = new Shape$1();
  			tmpShape.curves = tmpPath.curves;
  			shapes.push( tmpShape );
  			return shapes;

  		}

  		var holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );
  		holesFirst = isCCW ? ! holesFirst : holesFirst;

  		// console.log("Holes first", holesFirst);

  		var betterShapeHoles = [];
  		var newShapes = [];
  		var newShapeHoles = [];
  		var mainIdx = 0;
  		var tmpPoints;

  		newShapes[ mainIdx ] = undefined;
  		newShapeHoles[ mainIdx ] = [];

  		for ( var i = 0, l = subPaths.length; i < l; i ++ ) {

  			tmpPath = subPaths[ i ];
  			tmpPoints = tmpPath.getPoints();
  			solid = isClockWise( tmpPoints );
  			solid = isCCW ? ! solid : solid;

  			if ( solid ) {

  				if ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )	{ mainIdx ++; }

  				newShapes[ mainIdx ] = { s: new Shape$1(), p: tmpPoints };
  				newShapes[ mainIdx ].s.curves = tmpPath.curves;

  				if ( holesFirst )	{ mainIdx ++; }
  				newShapeHoles[ mainIdx ] = [];

  				//console.log('cw', i);

  			} else {

  				newShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );

  				//console.log('ccw', i);

  			}

  		}

  		// only Holes? -> probably all Shapes with wrong orientation
  		if ( ! newShapes[ 0 ] )	{ return	toShapesNoHoles( subPaths ); }


  		if ( newShapes.length > 1 ) {

  			var ambiguous = false;
  			var toChange = [];

  			for ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {

  				betterShapeHoles[ sIdx ] = [];

  			}

  			for ( var sIdx$1 = 0, sLen$1 = newShapes.length; sIdx$1 < sLen$1; sIdx$1 ++ ) {

  				var sho = newShapeHoles[ sIdx$1 ];

  				for ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {

  					var ho = sho[ hIdx ];
  					var hole_unassigned = true;

  					for ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {

  						if ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {

  							if ( sIdx$1 !== s2Idx )	{ toChange.push( { froms: sIdx$1, tos: s2Idx, hole: hIdx } ); }
  							if ( hole_unassigned ) {

  								hole_unassigned = false;
  								betterShapeHoles[ s2Idx ].push( ho );

  							} else {

  								ambiguous = true;

  							}

  						}

  					}

  					if ( hole_unassigned ) {

  						betterShapeHoles[ sIdx$1 ].push( ho );

  					}

  				}

  			}
  			// console.log("ambiguous: ", ambiguous);

  			if ( toChange.length > 0 ) {

  				// console.log("to change: ", toChange);
  				if ( ! ambiguous )	{ newShapeHoles = betterShapeHoles; }

  			}

  		}

  		var tmpHoles;

  		for ( var i$1 = 0, il = newShapes.length; i$1 < il; i$1 ++ ) {

  			tmpShape = newShapes[ i$1 ].s;
  			shapes.push( tmpShape );
  			tmpHoles = newShapeHoles[ i$1 ];

  			for ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {

  				tmpShape.holes.push( tmpHoles[ j ].h );

  			}

  		}

  		//console.log("shape", shapes);

  		return shapes;

  	}

  } );

  /**
   * @author zz85 / http://www.lab4games.net/zz85/blog
   * @author mrdoob / http://mrdoob.com/
   */


  function Font( data ) {

  	this.type = 'Font';

  	this.data = data;

  }

  Object.assign( Font.prototype, {

  	isFont: true,

  	generateShapes: function ( text, size ) {

  		if ( size === undefined ) { size = 100; }

  		var shapes = [];
  		var paths = createPaths( text, size, this.data );

  		for ( var p = 0, pl = paths.length; p < pl; p ++ ) {

  			Array.prototype.push.apply( shapes, paths[ p ].toShapes() );

  		}

  		return shapes;

  	}

  } );

  function createPaths( text, size, data ) {

  	var chars = Array.from ? Array.from( text ) : String( text ).split( '' ); // workaround for IE11, see #13988
  	var scale = size / data.resolution;
  	var line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;

  	var paths = [];

  	var offsetX = 0, offsetY = 0;

  	for ( var i = 0; i < chars.length; i ++ ) {

  		var char = chars[ i ];

  		if ( char === '\n' ) {

  			offsetX = 0;
  			offsetY -= line_height;

  		} else {

  			var ret = createPath( char, scale, offsetX, offsetY, data );
  			offsetX += ret.offsetX;
  			paths.push( ret.path );

  		}

  	}

  	return paths;

  }

  function createPath( char, scale, offsetX, offsetY, data ) {

  	var glyph = data.glyphs[ char ] || data.glyphs[ '?' ];

  	if ( ! glyph ) {

  		console.error( 'THREE.Font: character "' + char + '" does not exists in font family ' + data.familyName + '.' );

  		return;

  	}

  	var path = new ShapePath();

  	var x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;

  	if ( glyph.o ) {

  		var outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );

  		for ( var i = 0, l = outline.length; i < l; ) {

  			var action = outline[ i ++ ];

  			switch ( action ) {

  				case 'm': // moveTo

  					x = outline[ i ++ ] * scale + offsetX;
  					y = outline[ i ++ ] * scale + offsetY;

  					path.moveTo( x, y );

  					break;

  				case 'l': // lineTo

  					x = outline[ i ++ ] * scale + offsetX;
  					y = outline[ i ++ ] * scale + offsetY;

  					path.lineTo( x, y );

  					break;

  				case 'q': // quadraticCurveTo

  					cpx = outline[ i ++ ] * scale + offsetX;
  					cpy = outline[ i ++ ] * scale + offsetY;
  					cpx1 = outline[ i ++ ] * scale + offsetX;
  					cpy1 = outline[ i ++ ] * scale + offsetY;

  					path.quadraticCurveTo( cpx1, cpy1, cpx, cpy );

  					break;

  				case 'b': // bezierCurveTo

  					cpx = outline[ i ++ ] * scale + offsetX;
  					cpy = outline[ i ++ ] * scale + offsetY;
  					cpx1 = outline[ i ++ ] * scale + offsetX;
  					cpy1 = outline[ i ++ ] * scale + offsetY;
  					cpx2 = outline[ i ++ ] * scale + offsetX;
  					cpy2 = outline[ i ++ ] * scale + offsetY;

  					path.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );

  					break;

  			}

  		}

  	}

  	return { offsetX: glyph.ha * scale, path: path };

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function FontLoader( manager ) {

  	Loader$1.call( this, manager );

  }

  FontLoader.prototype = Object.assign( Object.create( Loader$1.prototype ), {

  	constructor: FontLoader,

  	load: function ( url, onLoad, onProgress, onError ) {

  		var scope = this;

  		var loader = new FileLoader( this.manager );
  		loader.setPath( this.path );
  		loader.load( url, function ( text ) {

  			var json;

  			try {

  				json = JSON.parse( text );

  			} catch ( e ) {

  				console.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );
  				json = JSON.parse( text.substring( 65, text.length - 2 ) );

  			}

  			var font = scope.parse( json );

  			if ( onLoad ) { onLoad( font ); }

  		}, onProgress, onError );

  	},

  	parse: function ( json ) {

  		return new Font( json );

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  var _context;

  var AudioContext = {

  	getContext: function () {

  		if ( _context === undefined ) {

  			_context = new ( window.AudioContext || window.webkitAudioContext )();

  		}

  		return _context;

  	},

  	setContext: function ( value ) {

  		_context = value;

  	}

  };

  /**
   * @author Reece Aaron Lecrivain / http://reecenotes.com/
   */

  function AudioLoader( manager ) {

  	Loader$1.call( this, manager );

  }

  AudioLoader.prototype = Object.assign( Object.create( Loader$1.prototype ), {

  	constructor: AudioLoader,

  	load: function ( url, onLoad, onProgress, onError ) {

  		var scope = this;

  		var loader = new FileLoader( scope.manager );
  		loader.setResponseType( 'arraybuffer' );
  		loader.setPath( scope.path );
  		loader.load( url, function ( buffer ) {

  			try {

  				// Create a copy of the buffer. The `decodeAudioData` method
  				// detaches the buffer when complete, preventing reuse.
  				var bufferCopy = buffer.slice( 0 );

  				var context = AudioContext.getContext();
  				context.decodeAudioData( bufferCopy, function ( audioBuffer ) {

  					onLoad( audioBuffer );

  				} );

  			} catch ( e ) {

  				if ( onError ) {

  					onError( e );

  				} else {

  					console.error( e );

  				}

  				scope.manager.itemError( url );

  			}

  		}, onProgress, onError );

  	}

  } );

  /**
   * @author WestLangley / http://github.com/WestLangley
   */

  function HemisphereLightProbe( skyColor, groundColor, intensity ) {

  	LightProbe.call( this, undefined, intensity );

  	var color1 = new Color().set( skyColor );
  	var color2 = new Color().set( groundColor );

  	var sky = new Vector3( color1.r, color1.g, color1.b );
  	var ground = new Vector3( color2.r, color2.g, color2.b );

  	// without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );
  	var c0 = Math.sqrt( Math.PI );
  	var c1 = c0 * Math.sqrt( 0.75 );

  	this.sh.coefficients[ 0 ].copy( sky ).add( ground ).multiplyScalar( c0 );
  	this.sh.coefficients[ 1 ].copy( sky ).sub( ground ).multiplyScalar( c1 );

  }

  HemisphereLightProbe.prototype = Object.assign( Object.create( LightProbe.prototype ), {

  	constructor: HemisphereLightProbe,

  	isHemisphereLightProbe: true,

  	copy: function ( source ) { // modifying colors not currently supported

  		LightProbe.prototype.copy.call( this, source );

  		return this;

  	},

  	toJSON: function ( meta ) {

  		var data = LightProbe.prototype.toJSON.call( this, meta );

  		// data.sh = this.sh.toArray(); // todo

  		return data;

  	}

  } );

  /**
   * @author WestLangley / http://github.com/WestLangley
   */

  function AmbientLightProbe( color, intensity ) {

  	LightProbe.call( this, undefined, intensity );

  	var color1 = new Color().set( color );

  	// without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );
  	this.sh.coefficients[ 0 ].set( color1.r, color1.g, color1.b ).multiplyScalar( 2 * Math.sqrt( Math.PI ) );

  }

  AmbientLightProbe.prototype = Object.assign( Object.create( LightProbe.prototype ), {

  	constructor: AmbientLightProbe,

  	isAmbientLightProbe: true,

  	copy: function ( source ) { // modifying color not currently supported

  		LightProbe.prototype.copy.call( this, source );

  		return this;

  	},

  	toJSON: function ( meta ) {

  		var data = LightProbe.prototype.toJSON.call( this, meta );

  		// data.sh = this.sh.toArray(); // todo

  		return data;

  	}

  } );

  var _eyeRight = new Matrix4();
  var _eyeLeft = new Matrix4();

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function StereoCamera() {

  	this.type = 'StereoCamera';

  	this.aspect = 1;

  	this.eyeSep = 0.064;

  	this.cameraL = new PerspectiveCamera();
  	this.cameraL.layers.enable( 1 );
  	this.cameraL.matrixAutoUpdate = false;

  	this.cameraR = new PerspectiveCamera();
  	this.cameraR.layers.enable( 2 );
  	this.cameraR.matrixAutoUpdate = false;

  	this._cache = {
  		focus: null,
  		fov: null,
  		aspect: null,
  		near: null,
  		far: null,
  		zoom: null,
  		eyeSep: null
  	};

  }

  Object.assign( StereoCamera.prototype, {

  	update: function ( camera ) {

  		var cache = this._cache;

  		var needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov ||
  			cache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near ||
  			cache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;

  		if ( needsUpdate ) {

  			cache.focus = camera.focus;
  			cache.fov = camera.fov;
  			cache.aspect = camera.aspect * this.aspect;
  			cache.near = camera.near;
  			cache.far = camera.far;
  			cache.zoom = camera.zoom;
  			cache.eyeSep = this.eyeSep;

  			// Off-axis stereoscopic effect based on
  			// http://paulbourke.net/stereographics/stereorender/

  			var projectionMatrix = camera.projectionMatrix.clone();
  			var eyeSepHalf = cache.eyeSep / 2;
  			var eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;
  			var ymax = ( cache.near * Math.tan( MathUtils.DEG2RAD * cache.fov * 0.5 ) ) / cache.zoom;
  			var xmin, xmax;

  			// translate xOffset

  			_eyeLeft.elements[ 12 ] = - eyeSepHalf;
  			_eyeRight.elements[ 12 ] = eyeSepHalf;

  			// for left eye

  			xmin = - ymax * cache.aspect + eyeSepOnProjection;
  			xmax = ymax * cache.aspect + eyeSepOnProjection;

  			projectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );
  			projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );

  			this.cameraL.projectionMatrix.copy( projectionMatrix );

  			// for right eye

  			xmin = - ymax * cache.aspect - eyeSepOnProjection;
  			xmax = ymax * cache.aspect - eyeSepOnProjection;

  			projectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );
  			projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );

  			this.cameraR.projectionMatrix.copy( projectionMatrix );

  		}

  		this.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeLeft );
  		this.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeRight );

  	}

  } );

  /**
   * @author alteredq / http://alteredqualia.com/
   */

  function Clock( autoStart ) {

  	this.autoStart = ( autoStart !== undefined ) ? autoStart : true;

  	this.startTime = 0;
  	this.oldTime = 0;
  	this.elapsedTime = 0;

  	this.running = false;

  }

  Object.assign( Clock.prototype, {

  	start: function () {

  		this.startTime = ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732

  		this.oldTime = this.startTime;
  		this.elapsedTime = 0;
  		this.running = true;

  	},

  	stop: function () {

  		this.getElapsedTime();
  		this.running = false;
  		this.autoStart = false;

  	},

  	getElapsedTime: function () {

  		this.getDelta();
  		return this.elapsedTime;

  	},

  	getDelta: function () {

  		var diff = 0;

  		if ( this.autoStart && ! this.running ) {

  			this.start();
  			return 0;

  		}

  		if ( this.running ) {

  			var newTime = ( typeof performance === 'undefined' ? Date : performance ).now();

  			diff = ( newTime - this.oldTime ) / 1000;
  			this.oldTime = newTime;

  			this.elapsedTime += diff;

  		}

  		return diff;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  var _position$2 = new Vector3();
  var _quaternion$3 = new Quaternion();
  var _scale$1 = new Vector3();
  var _orientation = new Vector3();

  function AudioListener() {

  	Object3D.call( this );

  	this.type = 'AudioListener';

  	this.context = AudioContext.getContext();

  	this.gain = this.context.createGain();
  	this.gain.connect( this.context.destination );

  	this.filter = null;

  	this.timeDelta = 0;

  	// private

  	this._clock = new Clock();

  }

  AudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {

  	constructor: AudioListener,

  	getInput: function () {

  		return this.gain;

  	},

  	removeFilter: function ( ) {

  		if ( this.filter !== null ) {

  			this.gain.disconnect( this.filter );
  			this.filter.disconnect( this.context.destination );
  			this.gain.connect( this.context.destination );
  			this.filter = null;

  		}

  		return this;

  	},

  	getFilter: function () {

  		return this.filter;

  	},

  	setFilter: function ( value ) {

  		if ( this.filter !== null ) {

  			this.gain.disconnect( this.filter );
  			this.filter.disconnect( this.context.destination );

  		} else {

  			this.gain.disconnect( this.context.destination );

  		}

  		this.filter = value;
  		this.gain.connect( this.filter );
  		this.filter.connect( this.context.destination );

  		return this;

  	},

  	getMasterVolume: function () {

  		return this.gain.gain.value;

  	},

  	setMasterVolume: function ( value ) {

  		this.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );

  		return this;

  	},

  	updateMatrixWorld: function ( force ) {

  		Object3D.prototype.updateMatrixWorld.call( this, force );

  		var listener = this.context.listener;
  		var up = this.up;

  		this.timeDelta = this._clock.getDelta();

  		this.matrixWorld.decompose( _position$2, _quaternion$3, _scale$1 );

  		_orientation.set( 0, 0, - 1 ).applyQuaternion( _quaternion$3 );

  		if ( listener.positionX ) {

  			// code path for Chrome (see #14393)

  			var endTime = this.context.currentTime + this.timeDelta;

  			listener.positionX.linearRampToValueAtTime( _position$2.x, endTime );
  			listener.positionY.linearRampToValueAtTime( _position$2.y, endTime );
  			listener.positionZ.linearRampToValueAtTime( _position$2.z, endTime );
  			listener.forwardX.linearRampToValueAtTime( _orientation.x, endTime );
  			listener.forwardY.linearRampToValueAtTime( _orientation.y, endTime );
  			listener.forwardZ.linearRampToValueAtTime( _orientation.z, endTime );
  			listener.upX.linearRampToValueAtTime( up.x, endTime );
  			listener.upY.linearRampToValueAtTime( up.y, endTime );
  			listener.upZ.linearRampToValueAtTime( up.z, endTime );

  		} else {

  			listener.setPosition( _position$2.x, _position$2.y, _position$2.z );
  			listener.setOrientation( _orientation.x, _orientation.y, _orientation.z, up.x, up.y, up.z );

  		}

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author Reece Aaron Lecrivain / http://reecenotes.com/
   */

  function Audio( listener ) {

  	Object3D.call( this );

  	this.type = 'Audio';

  	this.listener = listener;
  	this.context = listener.context;

  	this.gain = this.context.createGain();
  	this.gain.connect( listener.getInput() );

  	this.autoplay = false;

  	this.buffer = null;
  	this.detune = 0;
  	this.loop = false;
  	this.loopStart = 0;
  	this.loopEnd = 0;
  	this.offset = 0;
  	this.duration = undefined;
  	this.playbackRate = 1;
  	this.isPlaying = false;
  	this.hasPlaybackControl = true;
  	this.sourceType = 'empty';

  	this._startedAt = 0;
  	this._progress = 0;

  	this.filters = [];

  }

  Audio.prototype = Object.assign( Object.create( Object3D.prototype ), {

  	constructor: Audio,

  	getOutput: function () {

  		return this.gain;

  	},

  	setNodeSource: function ( audioNode ) {

  		this.hasPlaybackControl = false;
  		this.sourceType = 'audioNode';
  		this.source = audioNode;
  		this.connect();

  		return this;

  	},

  	setMediaElementSource: function ( mediaElement ) {

  		this.hasPlaybackControl = false;
  		this.sourceType = 'mediaNode';
  		this.source = this.context.createMediaElementSource( mediaElement );
  		this.connect();

  		return this;

  	},

  	setMediaStreamSource: function ( mediaStream ) {

  		this.hasPlaybackControl = false;
  		this.sourceType = 'mediaStreamNode';
  		this.source = this.context.createMediaStreamSource( mediaStream );
  		this.connect();

  		return this;

  	},

  	setBuffer: function ( audioBuffer ) {

  		this.buffer = audioBuffer;
  		this.sourceType = 'buffer';

  		if ( this.autoplay ) { this.play(); }

  		return this;

  	},

  	play: function ( delay ) {

  		if ( delay === undefined ) { delay = 0; }

  		if ( this.isPlaying === true ) {

  			console.warn( 'THREE.Audio: Audio is already playing.' );
  			return;

  		}

  		if ( this.hasPlaybackControl === false ) {

  			console.warn( 'THREE.Audio: this Audio has no playback control.' );
  			return;

  		}

  		this._startedAt = this.context.currentTime + delay;

  		var source = this.context.createBufferSource();
  		source.buffer = this.buffer;
  		source.loop = this.loop;
  		source.loopStart = this.loopStart;
  		source.loopEnd = this.loopEnd;
  		source.onended = this.onEnded.bind( this );
  		source.start( this._startedAt, this._progress + this.offset, this.duration );

  		this.isPlaying = true;

  		this.source = source;

  		this.setDetune( this.detune );
  		this.setPlaybackRate( this.playbackRate );

  		return this.connect();

  	},

  	pause: function () {

  		if ( this.hasPlaybackControl === false ) {

  			console.warn( 'THREE.Audio: this Audio has no playback control.' );
  			return;

  		}

  		if ( this.isPlaying === true ) {

  			// update current progress

  			this._progress += Math.max( this.context.currentTime - this._startedAt, 0 ) * this.playbackRate;

  			if ( this.loop === true ) {

  				// ensure _progress does not exceed duration with looped audios

  				this._progress = this._progress % ( this.duration || this.buffer.duration );

  			}

  			this.source.stop();
  			this.source.onended = null;

  			this.isPlaying = false;

  		}

  		return this;

  	},

  	stop: function () {

  		if ( this.hasPlaybackControl === false ) {

  			console.warn( 'THREE.Audio: this Audio has no playback control.' );
  			return;

  		}

  		this._progress = 0;

  		this.source.stop();
  		this.source.onended = null;
  		this.isPlaying = false;

  		return this;

  	},

  	connect: function () {

  		if ( this.filters.length > 0 ) {

  			this.source.connect( this.filters[ 0 ] );

  			for ( var i = 1, l = this.filters.length; i < l; i ++ ) {

  				this.filters[ i - 1 ].connect( this.filters[ i ] );

  			}

  			this.filters[ this.filters.length - 1 ].connect( this.getOutput() );

  		} else {

  			this.source.connect( this.getOutput() );

  		}

  		return this;

  	},

  	disconnect: function () {

  		if ( this.filters.length > 0 ) {

  			this.source.disconnect( this.filters[ 0 ] );

  			for ( var i = 1, l = this.filters.length; i < l; i ++ ) {

  				this.filters[ i - 1 ].disconnect( this.filters[ i ] );

  			}

  			this.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );

  		} else {

  			this.source.disconnect( this.getOutput() );

  		}

  		return this;

  	},

  	getFilters: function () {

  		return this.filters;

  	},

  	setFilters: function ( value ) {

  		if ( ! value ) { value = []; }

  		if ( this.isPlaying === true ) {

  			this.disconnect();
  			this.filters = value;
  			this.connect();

  		} else {

  			this.filters = value;

  		}

  		return this;

  	},

  	setDetune: function ( value ) {

  		this.detune = value;

  		if ( this.source.detune === undefined ) { return; } // only set detune when available

  		if ( this.isPlaying === true ) {

  			this.source.detune.setTargetAtTime( this.detune, this.context.currentTime, 0.01 );

  		}

  		return this;

  	},

  	getDetune: function () {

  		return this.detune;

  	},

  	getFilter: function () {

  		return this.getFilters()[ 0 ];

  	},

  	setFilter: function ( filter ) {

  		return this.setFilters( filter ? [ filter ] : [] );

  	},

  	setPlaybackRate: function ( value ) {

  		if ( this.hasPlaybackControl === false ) {

  			console.warn( 'THREE.Audio: this Audio has no playback control.' );
  			return;

  		}

  		this.playbackRate = value;

  		if ( this.isPlaying === true ) {

  			this.source.playbackRate.setTargetAtTime( this.playbackRate, this.context.currentTime, 0.01 );

  		}

  		return this;

  	},

  	getPlaybackRate: function () {

  		return this.playbackRate;

  	},

  	onEnded: function () {

  		this.isPlaying = false;

  	},

  	getLoop: function () {

  		if ( this.hasPlaybackControl === false ) {

  			console.warn( 'THREE.Audio: this Audio has no playback control.' );
  			return false;

  		}

  		return this.loop;

  	},

  	setLoop: function ( value ) {

  		if ( this.hasPlaybackControl === false ) {

  			console.warn( 'THREE.Audio: this Audio has no playback control.' );
  			return;

  		}

  		this.loop = value;

  		if ( this.isPlaying === true ) {

  			this.source.loop = this.loop;

  		}

  		return this;

  	},

  	setLoopStart: function ( value ) {

  		this.loopStart = value;

  		return this;

  	},

  	setLoopEnd: function ( value ) {

  		this.loopEnd = value;

  		return this;

  	},

  	getVolume: function () {

  		return this.gain.gain.value;

  	},

  	setVolume: function ( value ) {

  		this.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );

  		return this;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  var _position$3 = new Vector3();
  var _quaternion$4 = new Quaternion();
  var _scale$2 = new Vector3();
  var _orientation$1 = new Vector3();

  function PositionalAudio( listener ) {

  	Audio.call( this, listener );

  	this.panner = this.context.createPanner();
  	this.panner.panningModel = 'HRTF';
  	this.panner.connect( this.gain );

  }

  PositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {

  	constructor: PositionalAudio,

  	getOutput: function () {

  		return this.panner;

  	},

  	getRefDistance: function () {

  		return this.panner.refDistance;

  	},

  	setRefDistance: function ( value ) {

  		this.panner.refDistance = value;

  		return this;

  	},

  	getRolloffFactor: function () {

  		return this.panner.rolloffFactor;

  	},

  	setRolloffFactor: function ( value ) {

  		this.panner.rolloffFactor = value;

  		return this;

  	},

  	getDistanceModel: function () {

  		return this.panner.distanceModel;

  	},

  	setDistanceModel: function ( value ) {

  		this.panner.distanceModel = value;

  		return this;

  	},

  	getMaxDistance: function () {

  		return this.panner.maxDistance;

  	},

  	setMaxDistance: function ( value ) {

  		this.panner.maxDistance = value;

  		return this;

  	},

  	setDirectionalCone: function ( coneInnerAngle, coneOuterAngle, coneOuterGain ) {

  		this.panner.coneInnerAngle = coneInnerAngle;
  		this.panner.coneOuterAngle = coneOuterAngle;
  		this.panner.coneOuterGain = coneOuterGain;

  		return this;

  	},

  	updateMatrixWorld: function ( force ) {

  		Object3D.prototype.updateMatrixWorld.call( this, force );

  		if ( this.hasPlaybackControl === true && this.isPlaying === false ) { return; }

  		this.matrixWorld.decompose( _position$3, _quaternion$4, _scale$2 );

  		_orientation$1.set( 0, 0, 1 ).applyQuaternion( _quaternion$4 );

  		var panner = this.panner;

  		if ( panner.positionX ) {

  			// code path for Chrome and Firefox (see #14393)

  			var endTime = this.context.currentTime + this.listener.timeDelta;

  			panner.positionX.linearRampToValueAtTime( _position$3.x, endTime );
  			panner.positionY.linearRampToValueAtTime( _position$3.y, endTime );
  			panner.positionZ.linearRampToValueAtTime( _position$3.z, endTime );
  			panner.orientationX.linearRampToValueAtTime( _orientation$1.x, endTime );
  			panner.orientationY.linearRampToValueAtTime( _orientation$1.y, endTime );
  			panner.orientationZ.linearRampToValueAtTime( _orientation$1.z, endTime );

  		} else {

  			panner.setPosition( _position$3.x, _position$3.y, _position$3.z );
  			panner.setOrientation( _orientation$1.x, _orientation$1.y, _orientation$1.z );

  		}

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function AudioAnalyser( audio, fftSize ) {

  	this.analyser = audio.context.createAnalyser();
  	this.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;

  	this.data = new Uint8Array( this.analyser.frequencyBinCount );

  	audio.getOutput().connect( this.analyser );

  }

  Object.assign( AudioAnalyser.prototype, {

  	getFrequencyData: function () {

  		this.analyser.getByteFrequencyData( this.data );

  		return this.data;

  	},

  	getAverageFrequency: function () {

  		var value = 0;
  		var data = this.getFrequencyData();

  		for ( var i = 0; i < data.length; i ++ ) {

  			value += data[ i ];

  		}

  		return value / data.length;

  	}

  } );

  /**
   *
   * Buffered scene graph property that allows weighted accumulation.
   *
   *
   * @author Ben Houston / http://clara.io/
   * @author David Sarno / http://lighthaus.us/
   * @author tschw
   */

  function PropertyMixer( binding, typeName, valueSize ) {

  	this.binding = binding;
  	this.valueSize = valueSize;

  	var mixFunction,
  		mixFunctionAdditive,
  		setIdentity;

  	// buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]
  	//
  	// interpolators can use .buffer as their .result
  	// the data then goes to 'incoming'
  	//
  	// 'accu0' and 'accu1' are used frame-interleaved for
  	// the cumulative result and are compared to detect
  	// changes
  	//
  	// 'orig' stores the original state of the property
  	//
  	// 'add' is used for additive cumulative results
  	//
  	// 'work' is optional and is only present for quaternion types. It is used
  	// to store intermediate quaternion multiplication results

  	switch ( typeName ) {

  		case 'quaternion':
  			mixFunction = this._slerp;
  			mixFunctionAdditive = this._slerpAdditive;
  			setIdentity = this._setAdditiveIdentityQuaternion;

  			this.buffer = new Float64Array( valueSize * 6 );
  			this._workIndex = 5;
  			break;

  		case 'string':
  		case 'bool':
  			mixFunction = this._select;

  			// Use the regular mix function and for additive on these types,
  			// additive is not relevant for non-numeric types
  			mixFunctionAdditive = this._select;

  			setIdentity = this._setAdditiveIdentityOther;

  			this.buffer = new Array( valueSize * 5 );
  			break;

  		default:
  			mixFunction = this._lerp;
  			mixFunctionAdditive = this._lerpAdditive;
  			setIdentity = this._setAdditiveIdentityNumeric;

  			this.buffer = new Float64Array( valueSize * 5 );

  	}

  	this._mixBufferRegion = mixFunction;
  	this._mixBufferRegionAdditive = mixFunctionAdditive;
  	this._setIdentity = setIdentity;
  	this._origIndex = 3;
  	this._addIndex = 4;

  	this.cumulativeWeight = 0;
  	this.cumulativeWeightAdditive = 0;

  	this.useCount = 0;
  	this.referenceCount = 0;

  }

  Object.assign( PropertyMixer.prototype, {

  	// accumulate data in the 'incoming' region into 'accu<i>'
  	accumulate: function ( accuIndex, weight ) {

  		// note: happily accumulating nothing when weight = 0, the caller knows
  		// the weight and shouldn't have made the call in the first place

  		var buffer = this.buffer,
  			stride = this.valueSize,
  			offset = accuIndex * stride + stride;

  		var currentWeight = this.cumulativeWeight;

  		if ( currentWeight === 0 ) {

  			// accuN := incoming * weight

  			for ( var i = 0; i !== stride; ++ i ) {

  				buffer[ offset + i ] = buffer[ i ];

  			}

  			currentWeight = weight;

  		} else {

  			// accuN := accuN + incoming * weight

  			currentWeight += weight;
  			var mix = weight / currentWeight;
  			this._mixBufferRegion( buffer, offset, 0, mix, stride );

  		}

  		this.cumulativeWeight = currentWeight;

  	},

  	// accumulate data in the 'incoming' region into 'add'
  	accumulateAdditive: function ( weight ) {

  		var buffer = this.buffer,
  			stride = this.valueSize,
  			offset = stride * this._addIndex;

  		if ( this.cumulativeWeightAdditive === 0 ) {

  			// add = identity

  			this._setIdentity();

  		}

  		// add := add + incoming * weight

  		this._mixBufferRegionAdditive( buffer, offset, 0, weight, stride );
  		this.cumulativeWeightAdditive += weight;

  	},

  	// apply the state of 'accu<i>' to the binding when accus differ
  	apply: function ( accuIndex ) {

  		var stride = this.valueSize,
  			buffer = this.buffer,
  			offset = accuIndex * stride + stride,

  			weight = this.cumulativeWeight,
  			weightAdditive = this.cumulativeWeightAdditive,

  			binding = this.binding;

  		this.cumulativeWeight = 0;
  		this.cumulativeWeightAdditive = 0;

  		if ( weight < 1 ) {

  			// accuN := accuN + original * ( 1 - cumulativeWeight )

  			var originalValueOffset = stride * this._origIndex;

  			this._mixBufferRegion(
  				buffer, offset, originalValueOffset, 1 - weight, stride );

  		}

  		if ( weightAdditive > 0 ) {

  			// accuN := accuN + additive accuN

  			this._mixBufferRegionAdditive( buffer, offset, this._addIndex * stride, 1, stride );

  		}

  		for ( var i = stride, e = stride + stride; i !== e; ++ i ) {

  			if ( buffer[ i ] !== buffer[ i + stride ] ) {

  				// value has changed -> update scene graph

  				binding.setValue( buffer, offset );
  				break;

  			}

  		}

  	},

  	// remember the state of the bound property and copy it to both accus
  	saveOriginalState: function () {

  		var binding = this.binding;

  		var buffer = this.buffer,
  			stride = this.valueSize,

  			originalValueOffset = stride * this._origIndex;

  		binding.getValue( buffer, originalValueOffset );

  		// accu[0..1] := orig -- initially detect changes against the original
  		for ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {

  			buffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];

  		}

  		// Add to identity for additive
  		this._setIdentity();

  		this.cumulativeWeight = 0;
  		this.cumulativeWeightAdditive = 0;

  	},

  	// apply the state previously taken via 'saveOriginalState' to the binding
  	restoreOriginalState: function () {

  		var originalValueOffset = this.valueSize * 3;
  		this.binding.setValue( this.buffer, originalValueOffset );

  	},

  	_setAdditiveIdentityNumeric: function () {

  		var startIndex = this._addIndex * this.valueSize;
  		var endIndex = startIndex + this.valueSize;

  		for ( var i = startIndex; i < endIndex; i ++ ) {

  			this.buffer[ i ] = 0;

  		}

  	},

  	_setAdditiveIdentityQuaternion: function () {

  		this._setAdditiveIdentityNumeric();
  		this.buffer[ this._addIndex * 4 + 3 ] = 1;

  	},

  	_setAdditiveIdentityOther: function () {

  		var startIndex = this._origIndex * this.valueSize;
  		var targetIndex = this._addIndex * this.valueSize;

  		for ( var i = 0; i < this.valueSize; i ++ ) {

  			this.buffer[ targetIndex + i ] = this.buffer[ startIndex + i ];

  		}

  	},


  	// mix functions

  	_select: function ( buffer, dstOffset, srcOffset, t, stride ) {

  		if ( t >= 0.5 ) {

  			for ( var i = 0; i !== stride; ++ i ) {

  				buffer[ dstOffset + i ] = buffer[ srcOffset + i ];

  			}

  		}

  	},

  	_slerp: function ( buffer, dstOffset, srcOffset, t ) {

  		Quaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );

  	},

  	_slerpAdditive: function ( buffer, dstOffset, srcOffset, t, stride ) {

  		var workOffset = this._workIndex * stride;

  		// Store result in intermediate buffer offset
  		Quaternion.multiplyQuaternionsFlat( buffer, workOffset, buffer, dstOffset, buffer, srcOffset );

  		// Slerp to the intermediate result
  		Quaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t );

  	},

  	_lerp: function ( buffer, dstOffset, srcOffset, t, stride ) {

  		var s = 1 - t;

  		for ( var i = 0; i !== stride; ++ i ) {

  			var j = dstOffset + i;

  			buffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;

  		}

  	},

  	_lerpAdditive: function ( buffer, dstOffset, srcOffset, t, stride ) {

  		for ( var i = 0; i !== stride; ++ i ) {

  			var j = dstOffset + i;

  			buffer[ j ] = buffer[ j ] + buffer[ srcOffset + i ] * t;

  		}

  	}

  } );

  /**
   *
   * A reference to a real property in the scene graph.
   *
   *
   * @author Ben Houston / http://clara.io/
   * @author David Sarno / http://lighthaus.us/
   * @author tschw
   */

  // Characters [].:/ are reserved for track binding syntax.
  var _RESERVED_CHARS_RE = '\\[\\]\\.:\\/';
  var _reservedRe = new RegExp( '[' + _RESERVED_CHARS_RE + ']', 'g' );

  // Attempts to allow node names from any language. ES5's `\w` regexp matches
  // only latin characters, and the unicode \p{L} is not yet supported. So
  // instead, we exclude reserved characters and match everything else.
  var _wordChar = '[^' + _RESERVED_CHARS_RE + ']';
  var _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace( '\\.', '' ) + ']';

  // Parent directories, delimited by '/' or ':'. Currently unused, but must
  // be matched to parse the rest of the track name.
  var _directoryRe = /((?:WC+[\/:])*)/.source.replace( 'WC', _wordChar );

  // Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.
  var _nodeRe = /(WCOD+)?/.source.replace( 'WCOD', _wordCharOrDot );

  // Object on target node, and accessor. May not contain reserved
  // characters. Accessor may contain any character except closing bracket.
  var _objectRe = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace( 'WC', _wordChar );

  // Property and accessor. May not contain reserved characters. Accessor may
  // contain any non-bracket characters.
  var _propertyRe = /\.(WC+)(?:\[(.+)\])?/.source.replace( 'WC', _wordChar );

  var _trackRe = new RegExp( ''
  	+ '^'
  	+ _directoryRe
  	+ _nodeRe
  	+ _objectRe
  	+ _propertyRe
  	+ '$'
  );

  var _supportedObjectNames = [ 'material', 'materials', 'bones' ];

  function Composite( targetGroup, path, optionalParsedPath ) {

  	var parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );

  	this._targetGroup = targetGroup;
  	this._bindings = targetGroup.subscribe_( path, parsedPath );

  }

  Object.assign( Composite.prototype, {

  	getValue: function ( array, offset ) {

  		this.bind(); // bind all binding

  		var firstValidIndex = this._targetGroup.nCachedObjects_,
  			binding = this._bindings[ firstValidIndex ];

  		// and only call .getValue on the first
  		if ( binding !== undefined ) { binding.getValue( array, offset ); }

  	},

  	setValue: function ( array, offset ) {

  		var bindings = this._bindings;

  		for ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {

  			bindings[ i ].setValue( array, offset );

  		}

  	},

  	bind: function () {

  		var bindings = this._bindings;

  		for ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {

  			bindings[ i ].bind();

  		}

  	},

  	unbind: function () {

  		var bindings = this._bindings;

  		for ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {

  			bindings[ i ].unbind();

  		}

  	}

  } );


  function PropertyBinding( rootNode, path, parsedPath ) {

  	this.path = path;
  	this.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );

  	this.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName ) || rootNode;

  	this.rootNode = rootNode;

  }

  Object.assign( PropertyBinding, {

  	Composite: Composite,

  	create: function ( root, path, parsedPath ) {

  		if ( ! ( root && root.isAnimationObjectGroup ) ) {

  			return new PropertyBinding( root, path, parsedPath );

  		} else {

  			return new PropertyBinding.Composite( root, path, parsedPath );

  		}

  	},

  	/**
  	 * Replaces spaces with underscores and removes unsupported characters from
  	 * node names, to ensure compatibility with parseTrackName().
  	 *
  	 * @param {string} name Node name to be sanitized.
  	 * @return {string}
  	 */
  	sanitizeNodeName: function ( name ) {

  		return name.replace( /\s/g, '_' ).replace( _reservedRe, '' );

  	},

  	parseTrackName: function ( trackName ) {

  		var matches = _trackRe.exec( trackName );

  		if ( ! matches ) {

  			throw new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );

  		}

  		var results = {
  			// directoryName: matches[ 1 ], // (tschw) currently unused
  			nodeName: matches[ 2 ],
  			objectName: matches[ 3 ],
  			objectIndex: matches[ 4 ],
  			propertyName: matches[ 5 ], // required
  			propertyIndex: matches[ 6 ]
  		};

  		var lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );

  		if ( lastDot !== undefined && lastDot !== - 1 ) {

  			var objectName = results.nodeName.substring( lastDot + 1 );

  			// Object names must be checked against an allowlist. Otherwise, there
  			// is no way to parse 'foo.bar.baz': 'baz' must be a property, but
  			// 'bar' could be the objectName, or part of a nodeName (which can
  			// include '.' characters).
  			if ( _supportedObjectNames.indexOf( objectName ) !== - 1 ) {

  				results.nodeName = results.nodeName.substring( 0, lastDot );
  				results.objectName = objectName;

  			}

  		}

  		if ( results.propertyName === null || results.propertyName.length === 0 ) {

  			throw new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );

  		}

  		return results;

  	},

  	findNode: function ( root, nodeName ) {

  		if ( ! nodeName || nodeName === "" || nodeName === "." || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {

  			return root;

  		}

  		// search into skeleton bones.
  		if ( root.skeleton ) {

  			var bone = root.skeleton.getBoneByName( nodeName );

  			if ( bone !== undefined ) {

  				return bone;

  			}

  		}

  		// search into node subtree.
  		if ( root.children ) {

  			var searchNodeSubtree = function ( children ) {

  				for ( var i = 0; i < children.length; i ++ ) {

  					var childNode = children[ i ];

  					if ( childNode.name === nodeName || childNode.uuid === nodeName ) {

  						return childNode;

  					}

  					var result = searchNodeSubtree( childNode.children );

  					if ( result ) { return result; }

  				}

  				return null;

  			};

  			var subTreeNode = searchNodeSubtree( root.children );

  			if ( subTreeNode ) {

  				return subTreeNode;

  			}

  		}

  		return null;

  	}

  } );

  Object.assign( PropertyBinding.prototype, { // prototype, continued

  	// these are used to "bind" a nonexistent property
  	_getValue_unavailable: function () {},
  	_setValue_unavailable: function () {},

  	BindingType: {
  		Direct: 0,
  		EntireArray: 1,
  		ArrayElement: 2,
  		HasFromToArray: 3
  	},

  	Versioning: {
  		None: 0,
  		NeedsUpdate: 1,
  		MatrixWorldNeedsUpdate: 2
  	},

  	GetterByBindingType: [

  		function getValue_direct( buffer, offset ) {

  			buffer[ offset ] = this.node[ this.propertyName ];

  		},

  		function getValue_array( buffer, offset ) {

  			var source = this.resolvedProperty;

  			for ( var i = 0, n = source.length; i !== n; ++ i ) {

  				buffer[ offset ++ ] = source[ i ];

  			}

  		},

  		function getValue_arrayElement( buffer, offset ) {

  			buffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];

  		},

  		function getValue_toArray( buffer, offset ) {

  			this.resolvedProperty.toArray( buffer, offset );

  		}

  	],

  	SetterByBindingTypeAndVersioning: [

  		[
  			// Direct

  			function setValue_direct( buffer, offset ) {

  				this.targetObject[ this.propertyName ] = buffer[ offset ];

  			},

  			function setValue_direct_setNeedsUpdate( buffer, offset ) {

  				this.targetObject[ this.propertyName ] = buffer[ offset ];
  				this.targetObject.needsUpdate = true;

  			},

  			function setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {

  				this.targetObject[ this.propertyName ] = buffer[ offset ];
  				this.targetObject.matrixWorldNeedsUpdate = true;

  			}

  		], [

  			// EntireArray

  			function setValue_array( buffer, offset ) {

  				var dest = this.resolvedProperty;

  				for ( var i = 0, n = dest.length; i !== n; ++ i ) {

  					dest[ i ] = buffer[ offset ++ ];

  				}

  			},

  			function setValue_array_setNeedsUpdate( buffer, offset ) {

  				var dest = this.resolvedProperty;

  				for ( var i = 0, n = dest.length; i !== n; ++ i ) {

  					dest[ i ] = buffer[ offset ++ ];

  				}

  				this.targetObject.needsUpdate = true;

  			},

  			function setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {

  				var dest = this.resolvedProperty;

  				for ( var i = 0, n = dest.length; i !== n; ++ i ) {

  					dest[ i ] = buffer[ offset ++ ];

  				}

  				this.targetObject.matrixWorldNeedsUpdate = true;

  			}

  		], [

  			// ArrayElement

  			function setValue_arrayElement( buffer, offset ) {

  				this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];

  			},

  			function setValue_arrayElement_setNeedsUpdate( buffer, offset ) {

  				this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
  				this.targetObject.needsUpdate = true;

  			},

  			function setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {

  				this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
  				this.targetObject.matrixWorldNeedsUpdate = true;

  			}

  		], [

  			// HasToFromArray

  			function setValue_fromArray( buffer, offset ) {

  				this.resolvedProperty.fromArray( buffer, offset );

  			},

  			function setValue_fromArray_setNeedsUpdate( buffer, offset ) {

  				this.resolvedProperty.fromArray( buffer, offset );
  				this.targetObject.needsUpdate = true;

  			},

  			function setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {

  				this.resolvedProperty.fromArray( buffer, offset );
  				this.targetObject.matrixWorldNeedsUpdate = true;

  			}

  		]

  	],

  	getValue: function getValue_unbound( targetArray, offset ) {

  		this.bind();
  		this.getValue( targetArray, offset );

  		// Note: This class uses a State pattern on a per-method basis:
  		// 'bind' sets 'this.getValue' / 'setValue' and shadows the
  		// prototype version of these methods with one that represents
  		// the bound state. When the property is not found, the methods
  		// become no-ops.

  	},

  	setValue: function getValue_unbound( sourceArray, offset ) {

  		this.bind();
  		this.setValue( sourceArray, offset );

  	},

  	// create getter / setter pair for a property in the scene graph
  	bind: function () {

  		var targetObject = this.node,
  			parsedPath = this.parsedPath,

  			objectName = parsedPath.objectName,
  			propertyName = parsedPath.propertyName,
  			propertyIndex = parsedPath.propertyIndex;

  		if ( ! targetObject ) {

  			targetObject = PropertyBinding.findNode( this.rootNode, parsedPath.nodeName ) || this.rootNode;

  			this.node = targetObject;

  		}

  		// set fail state so we can just 'return' on error
  		this.getValue = this._getValue_unavailable;
  		this.setValue = this._setValue_unavailable;

  		// ensure there is a value node
  		if ( ! targetObject ) {

  			console.error( 'THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\'t found.' );
  			return;

  		}

  		if ( objectName ) {

  			var objectIndex = parsedPath.objectIndex;

  			// special cases were we need to reach deeper into the hierarchy to get the face materials....
  			switch ( objectName ) {

  				case 'materials':

  					if ( ! targetObject.material ) {

  						console.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );
  						return;

  					}

  					if ( ! targetObject.material.materials ) {

  						console.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );
  						return;

  					}

  					targetObject = targetObject.material.materials;

  					break;

  				case 'bones':

  					if ( ! targetObject.skeleton ) {

  						console.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );
  						return;

  					}

  					// potential future optimization: skip this if propertyIndex is already an integer
  					// and convert the integer string to a true integer.

  					targetObject = targetObject.skeleton.bones;

  					// support resolving morphTarget names into indices.
  					for ( var i = 0; i < targetObject.length; i ++ ) {

  						if ( targetObject[ i ].name === objectIndex ) {

  							objectIndex = i;
  							break;

  						}

  					}

  					break;

  				default:

  					if ( targetObject[ objectName ] === undefined ) {

  						console.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );
  						return;

  					}

  					targetObject = targetObject[ objectName ];

  			}


  			if ( objectIndex !== undefined ) {

  				if ( targetObject[ objectIndex ] === undefined ) {

  					console.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );
  					return;

  				}

  				targetObject = targetObject[ objectIndex ];

  			}

  		}

  		// resolve property
  		var nodeProperty = targetObject[ propertyName ];

  		if ( nodeProperty === undefined ) {

  			var nodeName = parsedPath.nodeName;

  			console.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +
  				'.' + propertyName + ' but it wasn\'t found.', targetObject );
  			return;

  		}

  		// determine versioning scheme
  		var versioning = this.Versioning.None;

  		this.targetObject = targetObject;

  		if ( targetObject.needsUpdate !== undefined ) { // material

  			versioning = this.Versioning.NeedsUpdate;

  		} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform

  			versioning = this.Versioning.MatrixWorldNeedsUpdate;

  		}

  		// determine how the property gets bound
  		var bindingType = this.BindingType.Direct;

  		if ( propertyIndex !== undefined ) {

  			// access a sub element of the property array (only primitives are supported right now)

  			if ( propertyName === "morphTargetInfluences" ) {

  				// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.

  				// support resolving morphTarget names into indices.
  				if ( ! targetObject.geometry ) {

  					console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );
  					return;

  				}

  				if ( targetObject.geometry.isBufferGeometry ) {

  					if ( ! targetObject.geometry.morphAttributes ) {

  						console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );
  						return;

  					}

  					if ( targetObject.morphTargetDictionary[ propertyIndex ] !== undefined ) {

  						propertyIndex = targetObject.morphTargetDictionary[ propertyIndex ];

  					}


  				} else {

  					console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.', this );
  					return;

  				}

  			}

  			bindingType = this.BindingType.ArrayElement;

  			this.resolvedProperty = nodeProperty;
  			this.propertyIndex = propertyIndex;

  		} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {

  			// must use copy for Object3D.Euler/Quaternion

  			bindingType = this.BindingType.HasFromToArray;

  			this.resolvedProperty = nodeProperty;

  		} else if ( Array.isArray( nodeProperty ) ) {

  			bindingType = this.BindingType.EntireArray;

  			this.resolvedProperty = nodeProperty;

  		} else {

  			this.propertyName = propertyName;

  		}

  		// select getter / setter
  		this.getValue = this.GetterByBindingType[ bindingType ];
  		this.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];

  	},

  	unbind: function () {

  		this.node = null;

  		// back to the prototype version of getValue / setValue
  		// note: avoiding to mutate the shape of 'this' via 'delete'
  		this.getValue = this._getValue_unbound;
  		this.setValue = this._setValue_unbound;

  	}

  } );

  // DECLARE ALIAS AFTER assign prototype
  Object.assign( PropertyBinding.prototype, {

  	// initial state of these methods that calls 'bind'
  	_getValue_unbound: PropertyBinding.prototype.getValue,
  	_setValue_unbound: PropertyBinding.prototype.setValue,

  } );

  /**
   *
   * A group of objects that receives a shared animation state.
   *
   * Usage:
   *
   *  - Add objects you would otherwise pass as 'root' to the
   *    constructor or the .clipAction method of AnimationMixer.
   *
   *  - Instead pass this object as 'root'.
   *
   *  - You can also add and remove objects later when the mixer
   *    is running.
   *
   * Note:
   *
   *    Objects of this class appear as one object to the mixer,
   *    so cache control of the individual objects must be done
   *    on the group.
   *
   * Limitation:
   *
   *  - The animated properties must be compatible among the
   *    all objects in the group.
   *
   *  - A single property can either be controlled through a
   *    target group or directly, but not both.
   *
   * @author tschw
   */

  function AnimationObjectGroup() {
  	var arguments$1 = arguments;


  	this.uuid = MathUtils.generateUUID();

  	// cached objects followed by the active ones
  	this._objects = Array.prototype.slice.call( arguments );

  	this.nCachedObjects_ = 0; // threshold
  	// note: read by PropertyBinding.Composite

  	var indices = {};
  	this._indicesByUUID = indices; // for bookkeeping

  	for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

  		indices[ arguments$1[ i ].uuid ] = i;

  	}

  	this._paths = []; // inside: string
  	this._parsedPaths = []; // inside: { we don't care, here }
  	this._bindings = []; // inside: Array< PropertyBinding >
  	this._bindingsIndicesByPath = {}; // inside: indices in these arrays

  	var scope = this;

  	this.stats = {

  		objects: {
  			get total() {

  				return scope._objects.length;

  			},
  			get inUse() {

  				return this.total - scope.nCachedObjects_;

  			}
  		},
  		get bindingsPerObject() {

  			return scope._bindings.length;

  		}

  	};

  }

  Object.assign( AnimationObjectGroup.prototype, {

  	isAnimationObjectGroup: true,

  	add: function () {
  		var arguments$1 = arguments;


  		var objects = this._objects,
  			indicesByUUID = this._indicesByUUID,
  			paths = this._paths,
  			parsedPaths = this._parsedPaths,
  			bindings = this._bindings,
  			nBindings = bindings.length;

  		var knownObject = undefined,
  			nObjects = objects.length,
  			nCachedObjects = this.nCachedObjects_;

  		for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

  			var object = arguments$1[ i ],
  				uuid = object.uuid;
  			var index = indicesByUUID[ uuid ];

  			if ( index === undefined ) {

  				// unknown object -> add it to the ACTIVE region

  				index = nObjects ++;
  				indicesByUUID[ uuid ] = index;
  				objects.push( object );

  				// accounting is done, now do the same for all bindings

  				for ( var j = 0, m = nBindings; j !== m; ++ j ) {

  					bindings[ j ].push( new PropertyBinding( object, paths[ j ], parsedPaths[ j ] ) );

  				}

  			} else if ( index < nCachedObjects ) {

  				knownObject = objects[ index ];

  				// move existing object to the ACTIVE region

  				var firstActiveIndex = -- nCachedObjects,
  					lastCachedObject = objects[ firstActiveIndex ];

  				indicesByUUID[ lastCachedObject.uuid ] = index;
  				objects[ index ] = lastCachedObject;

  				indicesByUUID[ uuid ] = firstActiveIndex;
  				objects[ firstActiveIndex ] = object;

  				// accounting is done, now do the same for all bindings

  				for ( var j$1 = 0, m$1 = nBindings; j$1 !== m$1; ++ j$1 ) {

  					var bindingsForPath = bindings[ j$1 ],
  						lastCached = bindingsForPath[ firstActiveIndex ];

  					var binding = bindingsForPath[ index ];

  					bindingsForPath[ index ] = lastCached;

  					if ( binding === undefined ) {

  						// since we do not bother to create new bindings
  						// for objects that are cached, the binding may
  						// or may not exist

  						binding = new PropertyBinding( object, paths[ j$1 ], parsedPaths[ j$1 ] );

  					}

  					bindingsForPath[ firstActiveIndex ] = binding;

  				}

  			} else if ( objects[ index ] !== knownObject ) {

  				console.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +
  					'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );

  			} // else the object is already where we want it to be

  		} // for arguments

  		this.nCachedObjects_ = nCachedObjects;

  	},

  	remove: function () {
  		var arguments$1 = arguments;


  		var objects = this._objects,
  			indicesByUUID = this._indicesByUUID,
  			bindings = this._bindings,
  			nBindings = bindings.length;

  		var nCachedObjects = this.nCachedObjects_;

  		for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

  			var object = arguments$1[ i ],
  				uuid = object.uuid,
  				index = indicesByUUID[ uuid ];

  			if ( index !== undefined && index >= nCachedObjects ) {

  				// move existing object into the CACHED region

  				var lastCachedIndex = nCachedObjects ++,
  					firstActiveObject = objects[ lastCachedIndex ];

  				indicesByUUID[ firstActiveObject.uuid ] = index;
  				objects[ index ] = firstActiveObject;

  				indicesByUUID[ uuid ] = lastCachedIndex;
  				objects[ lastCachedIndex ] = object;

  				// accounting is done, now do the same for all bindings

  				for ( var j = 0, m = nBindings; j !== m; ++ j ) {

  					var bindingsForPath = bindings[ j ],
  						firstActive = bindingsForPath[ lastCachedIndex ],
  						binding = bindingsForPath[ index ];

  					bindingsForPath[ index ] = firstActive;
  					bindingsForPath[ lastCachedIndex ] = binding;

  				}

  			}

  		} // for arguments

  		this.nCachedObjects_ = nCachedObjects;

  	},

  	// remove & forget
  	uncache: function () {
  		var arguments$1 = arguments;


  		var objects = this._objects,
  			indicesByUUID = this._indicesByUUID,
  			bindings = this._bindings,
  			nBindings = bindings.length;

  		var nCachedObjects = this.nCachedObjects_,
  			nObjects = objects.length;

  		for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

  			var object = arguments$1[ i ],
  				uuid = object.uuid,
  				index = indicesByUUID[ uuid ];

  			if ( index !== undefined ) {

  				delete indicesByUUID[ uuid ];

  				if ( index < nCachedObjects ) {

  					// object is cached, shrink the CACHED region

  					var firstActiveIndex = -- nCachedObjects,
  						lastCachedObject = objects[ firstActiveIndex ],
  						lastIndex = -- nObjects,
  						lastObject = objects[ lastIndex ];

  					// last cached object takes this object's place
  					indicesByUUID[ lastCachedObject.uuid ] = index;
  					objects[ index ] = lastCachedObject;

  					// last object goes to the activated slot and pop
  					indicesByUUID[ lastObject.uuid ] = firstActiveIndex;
  					objects[ firstActiveIndex ] = lastObject;
  					objects.pop();

  					// accounting is done, now do the same for all bindings

  					for ( var j = 0, m = nBindings; j !== m; ++ j ) {

  						var bindingsForPath = bindings[ j ],
  							lastCached = bindingsForPath[ firstActiveIndex ],
  							last = bindingsForPath[ lastIndex ];

  						bindingsForPath[ index ] = lastCached;
  						bindingsForPath[ firstActiveIndex ] = last;
  						bindingsForPath.pop();

  					}

  				} else {

  					// object is active, just swap with the last and pop

  					var lastIndex$1 = -- nObjects,
  						lastObject$1 = objects[ lastIndex$1 ];

  					indicesByUUID[ lastObject$1.uuid ] = index;
  					objects[ index ] = lastObject$1;
  					objects.pop();

  					// accounting is done, now do the same for all bindings

  					for ( var j$1 = 0, m$1 = nBindings; j$1 !== m$1; ++ j$1 ) {

  						var bindingsForPath$1 = bindings[ j$1 ];

  						bindingsForPath$1[ index ] = bindingsForPath$1[ lastIndex$1 ];
  						bindingsForPath$1.pop();

  					}

  				} // cached or active

  			} // if object is known

  		} // for arguments

  		this.nCachedObjects_ = nCachedObjects;

  	},

  	// Internal interface used by befriended PropertyBinding.Composite:

  	subscribe_: function ( path, parsedPath ) {

  		// returns an array of bindings for the given path that is changed
  		// according to the contained objects in the group

  		var indicesByPath = this._bindingsIndicesByPath,
  			index = indicesByPath[ path ],
  			bindings = this._bindings;

  		if ( index !== undefined ) { return bindings[ index ]; }

  		var paths = this._paths,
  			parsedPaths = this._parsedPaths,
  			objects = this._objects,
  			nObjects = objects.length,
  			nCachedObjects = this.nCachedObjects_,
  			bindingsForPath = new Array( nObjects );

  		index = bindings.length;

  		indicesByPath[ path ] = index;

  		paths.push( path );
  		parsedPaths.push( parsedPath );
  		bindings.push( bindingsForPath );

  		for ( var i = nCachedObjects, n = objects.length; i !== n; ++ i ) {

  			var object = objects[ i ];
  			bindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );

  		}

  		return bindingsForPath;

  	},

  	unsubscribe_: function ( path ) {

  		// tells the group to forget about a property path and no longer
  		// update the array previously obtained with 'subscribe_'

  		var indicesByPath = this._bindingsIndicesByPath,
  			index = indicesByPath[ path ];

  		if ( index !== undefined ) {

  			var paths = this._paths,
  				parsedPaths = this._parsedPaths,
  				bindings = this._bindings,
  				lastBindingsIndex = bindings.length - 1,
  				lastBindings = bindings[ lastBindingsIndex ],
  				lastBindingsPath = path[ lastBindingsIndex ];

  			indicesByPath[ lastBindingsPath ] = index;

  			bindings[ index ] = lastBindings;
  			bindings.pop();

  			parsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];
  			parsedPaths.pop();

  			paths[ index ] = paths[ lastBindingsIndex ];
  			paths.pop();

  		}

  	}

  } );

  /**
   *
   * Action provided by AnimationMixer for scheduling clip playback on specific
   * objects.
   *
   * @author Ben Houston / http://clara.io/
   * @author David Sarno / http://lighthaus.us/
   * @author tschw
   *
   */

  function AnimationAction( mixer, clip, localRoot, blendMode ) {

  	this._mixer = mixer;
  	this._clip = clip;
  	this._localRoot = localRoot || null;
  	this.blendMode = blendMode || clip.blendMode;

  	var tracks = clip.tracks,
  		nTracks = tracks.length,
  		interpolants = new Array( nTracks );

  	var interpolantSettings = {
  		endingStart: ZeroCurvatureEnding,
  		endingEnd: ZeroCurvatureEnding
  	};

  	for ( var i = 0; i !== nTracks; ++ i ) {

  		var interpolant = tracks[ i ].createInterpolant( null );
  		interpolants[ i ] = interpolant;
  		interpolant.settings = interpolantSettings;

  	}

  	this._interpolantSettings = interpolantSettings;

  	this._interpolants = interpolants; // bound by the mixer

  	// inside: PropertyMixer (managed by the mixer)
  	this._propertyBindings = new Array( nTracks );

  	this._cacheIndex = null; // for the memory manager
  	this._byClipCacheIndex = null; // for the memory manager

  	this._timeScaleInterpolant = null;
  	this._weightInterpolant = null;

  	this.loop = LoopRepeat;
  	this._loopCount = - 1;

  	// global mixer time when the action is to be started
  	// it's set back to 'null' upon start of the action
  	this._startTime = null;

  	// scaled local time of the action
  	// gets clamped or wrapped to 0..clip.duration according to loop
  	this.time = 0;

  	this.timeScale = 1;
  	this._effectiveTimeScale = 1;

  	this.weight = 1;
  	this._effectiveWeight = 1;

  	this.repetitions = Infinity; // no. of repetitions when looping

  	this.paused = false; // true -> zero effective time scale
  	this.enabled = true; // false -> zero effective weight

  	this.clampWhenFinished = false;// keep feeding the last frame?

  	this.zeroSlopeAtStart = true;// for smooth interpolation w/o separate
  	this.zeroSlopeAtEnd = true;// clips for start, loop and end

  }

  Object.assign( AnimationAction.prototype, {

  	// State & Scheduling

  	play: function () {

  		this._mixer._activateAction( this );

  		return this;

  	},

  	stop: function () {

  		this._mixer._deactivateAction( this );

  		return this.reset();

  	},

  	reset: function () {

  		this.paused = false;
  		this.enabled = true;

  		this.time = 0; // restart clip
  		this._loopCount = - 1;// forget previous loops
  		this._startTime = null;// forget scheduling

  		return this.stopFading().stopWarping();

  	},

  	isRunning: function () {

  		return this.enabled && ! this.paused && this.timeScale !== 0 &&
  			this._startTime === null && this._mixer._isActiveAction( this );

  	},

  	// return true when play has been called
  	isScheduled: function () {

  		return this._mixer._isActiveAction( this );

  	},

  	startAt: function ( time ) {

  		this._startTime = time;

  		return this;

  	},

  	setLoop: function ( mode, repetitions ) {

  		this.loop = mode;
  		this.repetitions = repetitions;

  		return this;

  	},

  	// Weight

  	// set the weight stopping any scheduled fading
  	// although .enabled = false yields an effective weight of zero, this
  	// method does *not* change .enabled, because it would be confusing
  	setEffectiveWeight: function ( weight ) {

  		this.weight = weight;

  		// note: same logic as when updated at runtime
  		this._effectiveWeight = this.enabled ? weight : 0;

  		return this.stopFading();

  	},

  	// return the weight considering fading and .enabled
  	getEffectiveWeight: function () {

  		return this._effectiveWeight;

  	},

  	fadeIn: function ( duration ) {

  		return this._scheduleFading( duration, 0, 1 );

  	},

  	fadeOut: function ( duration ) {

  		return this._scheduleFading( duration, 1, 0 );

  	},

  	crossFadeFrom: function ( fadeOutAction, duration, warp ) {

  		fadeOutAction.fadeOut( duration );
  		this.fadeIn( duration );

  		if ( warp ) {

  			var fadeInDuration = this._clip.duration,
  				fadeOutDuration = fadeOutAction._clip.duration,

  				startEndRatio = fadeOutDuration / fadeInDuration,
  				endStartRatio = fadeInDuration / fadeOutDuration;

  			fadeOutAction.warp( 1.0, startEndRatio, duration );
  			this.warp( endStartRatio, 1.0, duration );

  		}

  		return this;

  	},

  	crossFadeTo: function ( fadeInAction, duration, warp ) {

  		return fadeInAction.crossFadeFrom( this, duration, warp );

  	},

  	stopFading: function () {

  		var weightInterpolant = this._weightInterpolant;

  		if ( weightInterpolant !== null ) {

  			this._weightInterpolant = null;
  			this._mixer._takeBackControlInterpolant( weightInterpolant );

  		}

  		return this;

  	},

  	// Time Scale Control

  	// set the time scale stopping any scheduled warping
  	// although .paused = true yields an effective time scale of zero, this
  	// method does *not* change .paused, because it would be confusing
  	setEffectiveTimeScale: function ( timeScale ) {

  		this.timeScale = timeScale;
  		this._effectiveTimeScale = this.paused ? 0 : timeScale;

  		return this.stopWarping();

  	},

  	// return the time scale considering warping and .paused
  	getEffectiveTimeScale: function () {

  		return this._effectiveTimeScale;

  	},

  	setDuration: function ( duration ) {

  		this.timeScale = this._clip.duration / duration;

  		return this.stopWarping();

  	},

  	syncWith: function ( action ) {

  		this.time = action.time;
  		this.timeScale = action.timeScale;

  		return this.stopWarping();

  	},

  	halt: function ( duration ) {

  		return this.warp( this._effectiveTimeScale, 0, duration );

  	},

  	warp: function ( startTimeScale, endTimeScale, duration ) {

  		var mixer = this._mixer,
  			now = mixer.time,
  			timeScale = this.timeScale;

  		var interpolant = this._timeScaleInterpolant;

  		if ( interpolant === null ) {

  			interpolant = mixer._lendControlInterpolant();
  			this._timeScaleInterpolant = interpolant;

  		}

  		var times = interpolant.parameterPositions,
  			values = interpolant.sampleValues;

  		times[ 0 ] = now;
  		times[ 1 ] = now + duration;

  		values[ 0 ] = startTimeScale / timeScale;
  		values[ 1 ] = endTimeScale / timeScale;

  		return this;

  	},

  	stopWarping: function () {

  		var timeScaleInterpolant = this._timeScaleInterpolant;

  		if ( timeScaleInterpolant !== null ) {

  			this._timeScaleInterpolant = null;
  			this._mixer._takeBackControlInterpolant( timeScaleInterpolant );

  		}

  		return this;

  	},

  	// Object Accessors

  	getMixer: function () {

  		return this._mixer;

  	},

  	getClip: function () {

  		return this._clip;

  	},

  	getRoot: function () {

  		return this._localRoot || this._mixer._root;

  	},

  	// Interna

  	_update: function ( time, deltaTime, timeDirection, accuIndex ) {

  		// called by the mixer

  		if ( ! this.enabled ) {

  			// call ._updateWeight() to update ._effectiveWeight

  			this._updateWeight( time );
  			return;

  		}

  		var startTime = this._startTime;

  		if ( startTime !== null ) {

  			// check for scheduled start of action

  			var timeRunning = ( time - startTime ) * timeDirection;
  			if ( timeRunning < 0 || timeDirection === 0 ) {

  				return; // yet to come / don't decide when delta = 0

  			}

  			// start

  			this._startTime = null; // unschedule
  			deltaTime = timeDirection * timeRunning;

  		}

  		// apply time scale and advance time

  		deltaTime *= this._updateTimeScale( time );
  		var clipTime = this._updateTime( deltaTime );

  		// note: _updateTime may disable the action resulting in
  		// an effective weight of 0

  		var weight = this._updateWeight( time );

  		if ( weight > 0 ) {

  			var interpolants = this._interpolants;
  			var propertyMixers = this._propertyBindings;

  			switch ( this.blendMode ) {

  				case AdditiveAnimationBlendMode:

  					for ( var j = 0, m = interpolants.length; j !== m; ++ j ) {

  						interpolants[ j ].evaluate( clipTime );
  						propertyMixers[ j ].accumulateAdditive( weight );

  					}

  					break;

  				case NormalAnimationBlendMode:
  				default:

  					for ( var j$1 = 0, m$1 = interpolants.length; j$1 !== m$1; ++ j$1 ) {

  						interpolants[ j$1 ].evaluate( clipTime );
  						propertyMixers[ j$1 ].accumulate( accuIndex, weight );

  					}

  			}

  		}

  	},

  	_updateWeight: function ( time ) {

  		var weight = 0;

  		if ( this.enabled ) {

  			weight = this.weight;
  			var interpolant = this._weightInterpolant;

  			if ( interpolant !== null ) {

  				var interpolantValue = interpolant.evaluate( time )[ 0 ];

  				weight *= interpolantValue;

  				if ( time > interpolant.parameterPositions[ 1 ] ) {

  					this.stopFading();

  					if ( interpolantValue === 0 ) {

  						// faded out, disable
  						this.enabled = false;

  					}

  				}

  			}

  		}

  		this._effectiveWeight = weight;
  		return weight;

  	},

  	_updateTimeScale: function ( time ) {

  		var timeScale = 0;

  		if ( ! this.paused ) {

  			timeScale = this.timeScale;

  			var interpolant = this._timeScaleInterpolant;

  			if ( interpolant !== null ) {

  				var interpolantValue = interpolant.evaluate( time )[ 0 ];

  				timeScale *= interpolantValue;

  				if ( time > interpolant.parameterPositions[ 1 ] ) {

  					this.stopWarping();

  					if ( timeScale === 0 ) {

  						// motion has halted, pause
  						this.paused = true;

  					} else {

  						// warp done - apply final time scale
  						this.timeScale = timeScale;

  					}

  				}

  			}

  		}

  		this._effectiveTimeScale = timeScale;
  		return timeScale;

  	},

  	_updateTime: function ( deltaTime ) {

  		var duration = this._clip.duration;
  		var loop = this.loop;

  		var time = this.time + deltaTime;
  		var loopCount = this._loopCount;

  		var pingPong = ( loop === LoopPingPong );

  		if ( deltaTime === 0 ) {

  			if ( loopCount === - 1 ) { return time; }

  			return ( pingPong && ( loopCount & 1 ) === 1 ) ? duration - time : time;

  		}

  		if ( loop === LoopOnce ) {

  			if ( loopCount === - 1 ) {

  				// just started

  				this._loopCount = 0;
  				this._setEndings( true, true, false );

  			}

  			handle_stop: {

  				if ( time >= duration ) {

  					time = duration;

  				} else if ( time < 0 ) {

  					time = 0;

  				} else {

  					this.time = time;

  					break handle_stop;

  				}

  				if ( this.clampWhenFinished ) { this.paused = true; }
  				else { this.enabled = false; }

  				this.time = time;

  				this._mixer.dispatchEvent( {
  					type: 'finished', action: this,
  					direction: deltaTime < 0 ? - 1 : 1
  				} );

  			}

  		} else { // repetitive Repeat or PingPong

  			if ( loopCount === - 1 ) {

  				// just started

  				if ( deltaTime >= 0 ) {

  					loopCount = 0;

  					this._setEndings( true, this.repetitions === 0, pingPong );

  				} else {

  					// when looping in reverse direction, the initial
  					// transition through zero counts as a repetition,
  					// so leave loopCount at -1

  					this._setEndings( this.repetitions === 0, true, pingPong );

  				}

  			}

  			if ( time >= duration || time < 0 ) {

  				// wrap around

  				var loopDelta = Math.floor( time / duration ); // signed
  				time -= duration * loopDelta;

  				loopCount += Math.abs( loopDelta );

  				var pending = this.repetitions - loopCount;

  				if ( pending <= 0 ) {

  					// have to stop (switch state, clamp time, fire event)

  					if ( this.clampWhenFinished ) { this.paused = true; }
  					else { this.enabled = false; }

  					time = deltaTime > 0 ? duration : 0;

  					this.time = time;

  					this._mixer.dispatchEvent( {
  						type: 'finished', action: this,
  						direction: deltaTime > 0 ? 1 : - 1
  					} );

  				} else {

  					// keep running

  					if ( pending === 1 ) {

  						// entering the last round

  						var atStart = deltaTime < 0;
  						this._setEndings( atStart, ! atStart, pingPong );

  					} else {

  						this._setEndings( false, false, pingPong );

  					}

  					this._loopCount = loopCount;

  					this.time = time;

  					this._mixer.dispatchEvent( {
  						type: 'loop', action: this, loopDelta: loopDelta
  					} );

  				}

  			} else {

  				this.time = time;

  			}

  			if ( pingPong && ( loopCount & 1 ) === 1 ) {

  				// invert time for the "pong round"

  				return duration - time;

  			}

  		}

  		return time;

  	},

  	_setEndings: function ( atStart, atEnd, pingPong ) {

  		var settings = this._interpolantSettings;

  		if ( pingPong ) {

  			settings.endingStart = ZeroSlopeEnding;
  			settings.endingEnd = ZeroSlopeEnding;

  		} else {

  			// assuming for LoopOnce atStart == atEnd == true

  			if ( atStart ) {

  				settings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;

  			} else {

  				settings.endingStart = WrapAroundEnding;

  			}

  			if ( atEnd ) {

  				settings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;

  			} else {

  				settings.endingEnd 	 = WrapAroundEnding;

  			}

  		}

  	},

  	_scheduleFading: function ( duration, weightNow, weightThen ) {

  		var mixer = this._mixer, now = mixer.time;
  		var interpolant = this._weightInterpolant;

  		if ( interpolant === null ) {

  			interpolant = mixer._lendControlInterpolant();
  			this._weightInterpolant = interpolant;

  		}

  		var times = interpolant.parameterPositions,
  			values = interpolant.sampleValues;

  		times[ 0 ] = now;
  		values[ 0 ] = weightNow;
  		times[ 1 ] = now + duration;
  		values[ 1 ] = weightThen;

  		return this;

  	}

  } );

  /**
   *
   * Player for AnimationClips.
   *
   *
   * @author Ben Houston / http://clara.io/
   * @author David Sarno / http://lighthaus.us/
   * @author tschw
   */

  function AnimationMixer( root ) {

  	this._root = root;
  	this._initMemoryManager();
  	this._accuIndex = 0;

  	this.time = 0;

  	this.timeScale = 1.0;

  }

  AnimationMixer.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

  	constructor: AnimationMixer,

  	_bindAction: function ( action, prototypeAction ) {

  		var root = action._localRoot || this._root,
  			tracks = action._clip.tracks,
  			nTracks = tracks.length,
  			bindings = action._propertyBindings,
  			interpolants = action._interpolants,
  			rootUuid = root.uuid,
  			bindingsByRoot = this._bindingsByRootAndName;

  		var bindingsByName = bindingsByRoot[ rootUuid ];

  		if ( bindingsByName === undefined ) {

  			bindingsByName = {};
  			bindingsByRoot[ rootUuid ] = bindingsByName;

  		}

  		for ( var i = 0; i !== nTracks; ++ i ) {

  			var track = tracks[ i ],
  				trackName = track.name;

  			var binding = bindingsByName[ trackName ];

  			if ( binding !== undefined ) {

  				bindings[ i ] = binding;

  			} else {

  				binding = bindings[ i ];

  				if ( binding !== undefined ) {

  					// existing binding, make sure the cache knows

  					if ( binding._cacheIndex === null ) {

  						++ binding.referenceCount;
  						this._addInactiveBinding( binding, rootUuid, trackName );

  					}

  					continue;

  				}

  				var path = prototypeAction && prototypeAction.
  					_propertyBindings[ i ].binding.parsedPath;

  				binding = new PropertyMixer(
  					PropertyBinding.create( root, trackName, path ),
  					track.ValueTypeName, track.getValueSize() );

  				++ binding.referenceCount;
  				this._addInactiveBinding( binding, rootUuid, trackName );

  				bindings[ i ] = binding;

  			}

  			interpolants[ i ].resultBuffer = binding.buffer;

  		}

  	},

  	_activateAction: function ( action ) {

  		if ( ! this._isActiveAction( action ) ) {

  			if ( action._cacheIndex === null ) {

  				// this action has been forgotten by the cache, but the user
  				// appears to be still using it -> rebind

  				var rootUuid = ( action._localRoot || this._root ).uuid,
  					clipUuid = action._clip.uuid,
  					actionsForClip = this._actionsByClip[ clipUuid ];

  				this._bindAction( action,
  					actionsForClip && actionsForClip.knownActions[ 0 ] );

  				this._addInactiveAction( action, clipUuid, rootUuid );

  			}

  			var bindings = action._propertyBindings;

  			// increment reference counts / sort out state
  			for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

  				var binding = bindings[ i ];

  				if ( binding.useCount ++ === 0 ) {

  					this._lendBinding( binding );
  					binding.saveOriginalState();

  				}

  			}

  			this._lendAction( action );

  		}

  	},

  	_deactivateAction: function ( action ) {

  		if ( this._isActiveAction( action ) ) {

  			var bindings = action._propertyBindings;

  			// decrement reference counts / sort out state
  			for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

  				var binding = bindings[ i ];

  				if ( -- binding.useCount === 0 ) {

  					binding.restoreOriginalState();
  					this._takeBackBinding( binding );

  				}

  			}

  			this._takeBackAction( action );

  		}

  	},

  	// Memory manager

  	_initMemoryManager: function () {

  		this._actions = []; // 'nActiveActions' followed by inactive ones
  		this._nActiveActions = 0;

  		this._actionsByClip = {};
  		// inside:
  		// {
  		// 	knownActions: Array< AnimationAction > - used as prototypes
  		// 	actionByRoot: AnimationAction - lookup
  		// }


  		this._bindings = []; // 'nActiveBindings' followed by inactive ones
  		this._nActiveBindings = 0;

  		this._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >


  		this._controlInterpolants = []; // same game as above
  		this._nActiveControlInterpolants = 0;

  		var scope = this;

  		this.stats = {

  			actions: {
  				get total() {

  					return scope._actions.length;

  				},
  				get inUse() {

  					return scope._nActiveActions;

  				}
  			},
  			bindings: {
  				get total() {

  					return scope._bindings.length;

  				},
  				get inUse() {

  					return scope._nActiveBindings;

  				}
  			},
  			controlInterpolants: {
  				get total() {

  					return scope._controlInterpolants.length;

  				},
  				get inUse() {

  					return scope._nActiveControlInterpolants;

  				}
  			}

  		};

  	},

  	// Memory management for AnimationAction objects

  	_isActiveAction: function ( action ) {

  		var index = action._cacheIndex;
  		return index !== null && index < this._nActiveActions;

  	},

  	_addInactiveAction: function ( action, clipUuid, rootUuid ) {

  		var actions = this._actions,
  			actionsByClip = this._actionsByClip;

  		var actionsForClip = actionsByClip[ clipUuid ];

  		if ( actionsForClip === undefined ) {

  			actionsForClip = {

  				knownActions: [ action ],
  				actionByRoot: {}

  			};

  			action._byClipCacheIndex = 0;

  			actionsByClip[ clipUuid ] = actionsForClip;

  		} else {

  			var knownActions = actionsForClip.knownActions;

  			action._byClipCacheIndex = knownActions.length;
  			knownActions.push( action );

  		}

  		action._cacheIndex = actions.length;
  		actions.push( action );

  		actionsForClip.actionByRoot[ rootUuid ] = action;

  	},

  	_removeInactiveAction: function ( action ) {

  		var actions = this._actions,
  			lastInactiveAction = actions[ actions.length - 1 ],
  			cacheIndex = action._cacheIndex;

  		lastInactiveAction._cacheIndex = cacheIndex;
  		actions[ cacheIndex ] = lastInactiveAction;
  		actions.pop();

  		action._cacheIndex = null;


  		var clipUuid = action._clip.uuid,
  			actionsByClip = this._actionsByClip,
  			actionsForClip = actionsByClip[ clipUuid ],
  			knownActionsForClip = actionsForClip.knownActions,

  			lastKnownAction =
  				knownActionsForClip[ knownActionsForClip.length - 1 ],

  			byClipCacheIndex = action._byClipCacheIndex;

  		lastKnownAction._byClipCacheIndex = byClipCacheIndex;
  		knownActionsForClip[ byClipCacheIndex ] = lastKnownAction;
  		knownActionsForClip.pop();

  		action._byClipCacheIndex = null;


  		var actionByRoot = actionsForClip.actionByRoot,
  			rootUuid = ( action._localRoot || this._root ).uuid;

  		delete actionByRoot[ rootUuid ];

  		if ( knownActionsForClip.length === 0 ) {

  			delete actionsByClip[ clipUuid ];

  		}

  		this._removeInactiveBindingsForAction( action );

  	},

  	_removeInactiveBindingsForAction: function ( action ) {

  		var bindings = action._propertyBindings;

  		for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

  			var binding = bindings[ i ];

  			if ( -- binding.referenceCount === 0 ) {

  				this._removeInactiveBinding( binding );

  			}

  		}

  	},

  	_lendAction: function ( action ) {

  		// [ active actions |  inactive actions  ]
  		// [  active actions >| inactive actions ]
  		//                 s        a
  		//                  <-swap->
  		//                 a        s

  		var actions = this._actions,
  			prevIndex = action._cacheIndex,

  			lastActiveIndex = this._nActiveActions ++,

  			firstInactiveAction = actions[ lastActiveIndex ];

  		action._cacheIndex = lastActiveIndex;
  		actions[ lastActiveIndex ] = action;

  		firstInactiveAction._cacheIndex = prevIndex;
  		actions[ prevIndex ] = firstInactiveAction;

  	},

  	_takeBackAction: function ( action ) {

  		// [  active actions  | inactive actions ]
  		// [ active actions |< inactive actions  ]
  		//        a        s
  		//         <-swap->
  		//        s        a

  		var actions = this._actions,
  			prevIndex = action._cacheIndex,

  			firstInactiveIndex = -- this._nActiveActions,

  			lastActiveAction = actions[ firstInactiveIndex ];

  		action._cacheIndex = firstInactiveIndex;
  		actions[ firstInactiveIndex ] = action;

  		lastActiveAction._cacheIndex = prevIndex;
  		actions[ prevIndex ] = lastActiveAction;

  	},

  	// Memory management for PropertyMixer objects

  	_addInactiveBinding: function ( binding, rootUuid, trackName ) {

  		var bindingsByRoot = this._bindingsByRootAndName,
  			bindings = this._bindings;

  		var bindingByName = bindingsByRoot[ rootUuid ];

  		if ( bindingByName === undefined ) {

  			bindingByName = {};
  			bindingsByRoot[ rootUuid ] = bindingByName;

  		}

  		bindingByName[ trackName ] = binding;

  		binding._cacheIndex = bindings.length;
  		bindings.push( binding );

  	},

  	_removeInactiveBinding: function ( binding ) {

  		var bindings = this._bindings,
  			propBinding = binding.binding,
  			rootUuid = propBinding.rootNode.uuid,
  			trackName = propBinding.path,
  			bindingsByRoot = this._bindingsByRootAndName,
  			bindingByName = bindingsByRoot[ rootUuid ],

  			lastInactiveBinding = bindings[ bindings.length - 1 ],
  			cacheIndex = binding._cacheIndex;

  		lastInactiveBinding._cacheIndex = cacheIndex;
  		bindings[ cacheIndex ] = lastInactiveBinding;
  		bindings.pop();

  		delete bindingByName[ trackName ];

  		if ( Object.keys( bindingByName ).length === 0 ) {

  			delete bindingsByRoot[ rootUuid ];

  		}

  	},

  	_lendBinding: function ( binding ) {

  		var bindings = this._bindings,
  			prevIndex = binding._cacheIndex,

  			lastActiveIndex = this._nActiveBindings ++,

  			firstInactiveBinding = bindings[ lastActiveIndex ];

  		binding._cacheIndex = lastActiveIndex;
  		bindings[ lastActiveIndex ] = binding;

  		firstInactiveBinding._cacheIndex = prevIndex;
  		bindings[ prevIndex ] = firstInactiveBinding;

  	},

  	_takeBackBinding: function ( binding ) {

  		var bindings = this._bindings,
  			prevIndex = binding._cacheIndex,

  			firstInactiveIndex = -- this._nActiveBindings,

  			lastActiveBinding = bindings[ firstInactiveIndex ];

  		binding._cacheIndex = firstInactiveIndex;
  		bindings[ firstInactiveIndex ] = binding;

  		lastActiveBinding._cacheIndex = prevIndex;
  		bindings[ prevIndex ] = lastActiveBinding;

  	},


  	// Memory management of Interpolants for weight and time scale

  	_lendControlInterpolant: function () {

  		var interpolants = this._controlInterpolants,
  			lastActiveIndex = this._nActiveControlInterpolants ++;

  		var interpolant = interpolants[ lastActiveIndex ];

  		if ( interpolant === undefined ) {

  			interpolant = new LinearInterpolant(
  				new Float32Array( 2 ), new Float32Array( 2 ),
  				1, this._controlInterpolantsResultBuffer );

  			interpolant.__cacheIndex = lastActiveIndex;
  			interpolants[ lastActiveIndex ] = interpolant;

  		}

  		return interpolant;

  	},

  	_takeBackControlInterpolant: function ( interpolant ) {

  		var interpolants = this._controlInterpolants,
  			prevIndex = interpolant.__cacheIndex,

  			firstInactiveIndex = -- this._nActiveControlInterpolants,

  			lastActiveInterpolant = interpolants[ firstInactiveIndex ];

  		interpolant.__cacheIndex = firstInactiveIndex;
  		interpolants[ firstInactiveIndex ] = interpolant;

  		lastActiveInterpolant.__cacheIndex = prevIndex;
  		interpolants[ prevIndex ] = lastActiveInterpolant;

  	},

  	_controlInterpolantsResultBuffer: new Float32Array( 1 ),

  	// return an action for a clip optionally using a custom root target
  	// object (this method allocates a lot of dynamic memory in case a
  	// previously unknown clip/root combination is specified)
  	clipAction: function ( clip, optionalRoot, blendMode ) {

  		var root = optionalRoot || this._root,
  			rootUuid = root.uuid;

  		var clipObject = typeof clip === 'string' ? AnimationClip.findByName( root, clip ) : clip;

  		var clipUuid = clipObject !== null ? clipObject.uuid : clip;

  		var actionsForClip = this._actionsByClip[ clipUuid ],
  			prototypeAction = null;

  		if ( blendMode === undefined ) {

  			if ( clipObject !== null ) {

  				blendMode = clipObject.blendMode;

  			} else {

  				blendMode = NormalAnimationBlendMode;

  			}

  		}

  		if ( actionsForClip !== undefined ) {

  			var existingAction = actionsForClip.actionByRoot[ rootUuid ];

  			if ( existingAction !== undefined && existingAction.blendMode === blendMode ) {

  				return existingAction;

  			}

  			// we know the clip, so we don't have to parse all
  			// the bindings again but can just copy
  			prototypeAction = actionsForClip.knownActions[ 0 ];

  			// also, take the clip from the prototype action
  			if ( clipObject === null )
  				{ clipObject = prototypeAction._clip; }

  		}

  		// clip must be known when specified via string
  		if ( clipObject === null ) { return null; }

  		// allocate all resources required to run it
  		var newAction = new AnimationAction( this, clipObject, optionalRoot, blendMode );

  		this._bindAction( newAction, prototypeAction );

  		// and make the action known to the memory manager
  		this._addInactiveAction( newAction, clipUuid, rootUuid );

  		return newAction;

  	},

  	// get an existing action
  	existingAction: function ( clip, optionalRoot ) {

  		var root = optionalRoot || this._root,
  			rootUuid = root.uuid,

  			clipObject = typeof clip === 'string' ?
  				AnimationClip.findByName( root, clip ) : clip,

  			clipUuid = clipObject ? clipObject.uuid : clip,

  			actionsForClip = this._actionsByClip[ clipUuid ];

  		if ( actionsForClip !== undefined ) {

  			return actionsForClip.actionByRoot[ rootUuid ] || null;

  		}

  		return null;

  	},

  	// deactivates all previously scheduled actions
  	stopAllAction: function () {

  		var actions = this._actions,
  			nActions = this._nActiveActions;

  		for ( var i = nActions - 1; i >= 0; -- i ) {

  			actions[ i ].stop();

  		}

  		return this;

  	},

  	// advance the time and update apply the animation
  	update: function ( deltaTime ) {

  		deltaTime *= this.timeScale;

  		var actions = this._actions,
  			nActions = this._nActiveActions,

  			time = this.time += deltaTime,
  			timeDirection = Math.sign( deltaTime ),

  			accuIndex = this._accuIndex ^= 1;

  		// run active actions

  		for ( var i = 0; i !== nActions; ++ i ) {

  			var action = actions[ i ];

  			action._update( time, deltaTime, timeDirection, accuIndex );

  		}

  		// update scene graph

  		var bindings = this._bindings,
  			nBindings = this._nActiveBindings;

  		for ( var i$1 = 0; i$1 !== nBindings; ++ i$1 ) {

  			bindings[ i$1 ].apply( accuIndex );

  		}

  		return this;

  	},

  	// Allows you to seek to a specific time in an animation.
  	setTime: function ( timeInSeconds ) {

  		this.time = 0; // Zero out time attribute for AnimationMixer object;
  		for ( var i = 0; i < this._actions.length; i ++ ) {

  			this._actions[ i ].time = 0; // Zero out time attribute for all associated AnimationAction objects.

  		}

  		return this.update( timeInSeconds ); // Update used to set exact time. Returns "this" AnimationMixer object.

  	},

  	// return this mixer's root target object
  	getRoot: function () {

  		return this._root;

  	},

  	// free all resources specific to a particular clip
  	uncacheClip: function ( clip ) {

  		var actions = this._actions,
  			clipUuid = clip.uuid,
  			actionsByClip = this._actionsByClip,
  			actionsForClip = actionsByClip[ clipUuid ];

  		if ( actionsForClip !== undefined ) {

  			// note: just calling _removeInactiveAction would mess up the
  			// iteration state and also require updating the state we can
  			// just throw away

  			var actionsToRemove = actionsForClip.knownActions;

  			for ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {

  				var action = actionsToRemove[ i ];

  				this._deactivateAction( action );

  				var cacheIndex = action._cacheIndex,
  					lastInactiveAction = actions[ actions.length - 1 ];

  				action._cacheIndex = null;
  				action._byClipCacheIndex = null;

  				lastInactiveAction._cacheIndex = cacheIndex;
  				actions[ cacheIndex ] = lastInactiveAction;
  				actions.pop();

  				this._removeInactiveBindingsForAction( action );

  			}

  			delete actionsByClip[ clipUuid ];

  		}

  	},

  	// free all resources specific to a particular root target object
  	uncacheRoot: function ( root ) {

  		var rootUuid = root.uuid,
  			actionsByClip = this._actionsByClip;

  		for ( var clipUuid in actionsByClip ) {

  			var actionByRoot = actionsByClip[ clipUuid ].actionByRoot,
  				action = actionByRoot[ rootUuid ];

  			if ( action !== undefined ) {

  				this._deactivateAction( action );
  				this._removeInactiveAction( action );

  			}

  		}

  		var bindingsByRoot = this._bindingsByRootAndName,
  			bindingByName = bindingsByRoot[ rootUuid ];

  		if ( bindingByName !== undefined ) {

  			for ( var trackName in bindingByName ) {

  				var binding = bindingByName[ trackName ];
  				binding.restoreOriginalState();
  				this._removeInactiveBinding( binding );

  			}

  		}

  	},

  	// remove a targeted clip from the cache
  	uncacheAction: function ( clip, optionalRoot ) {

  		var action = this.existingAction( clip, optionalRoot );

  		if ( action !== null ) {

  			this._deactivateAction( action );
  			this._removeInactiveAction( action );

  		}

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function Uniform( value ) {

  	if ( typeof value === 'string' ) {

  		console.warn( 'THREE.Uniform: Type parameter is no longer needed.' );
  		value = arguments[ 1 ];

  	}

  	this.value = value;

  }

  Uniform.prototype.clone = function () {

  	return new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );

  };

  /**
   * @author benaadams / https://twitter.com/ben_a_adams
   */

  function InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {

  	InterleavedBuffer.call( this, array, stride );

  	this.meshPerAttribute = meshPerAttribute || 1;

  }

  InstancedInterleavedBuffer.prototype = Object.assign( Object.create( InterleavedBuffer.prototype ), {

  	constructor: InstancedInterleavedBuffer,

  	isInstancedInterleavedBuffer: true,

  	copy: function ( source ) {

  		InterleavedBuffer.prototype.copy.call( this, source );

  		this.meshPerAttribute = source.meshPerAttribute;

  		return this;

  	},

  	clone: function ( data ) {

  		var ib = InterleavedBuffer.prototype.clone.call( this, data );

  		ib.meshPerAttribute = this.meshPerAttribute;

  		return ib;

  	},

  	toJSON: function ( data ) {

  		var json = InterleavedBuffer.prototype.toJSON.call( this, data );

  		json.isInstancedInterleavedBuffer = true;
  		json.meshPerAttribute = this.meshPerAttribute;

  		return json;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author bhouston / http://clara.io/
   * @author stephomi / http://stephaneginier.com/
   */

  function Raycaster( origin, direction, near, far ) {

  	this.ray = new Ray( origin, direction );
  	// direction is assumed to be normalized (for accurate distance calculations)

  	this.near = near || 0;
  	this.far = far || Infinity;
  	this.camera = null;
  	this.layers = new Layers();

  	this.params = {
  		Mesh: {},
  		Line: { threshold: 1 },
  		LOD: {},
  		Points: { threshold: 1 },
  		Sprite: {}
  	};

  	Object.defineProperties( this.params, {
  		PointCloud: {
  			get: function () {

  				console.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );
  				return this.Points;

  			}
  		}
  	} );

  }

  function ascSort( a, b ) {

  	return a.distance - b.distance;

  }

  function intersectObject( object, raycaster, intersects, recursive ) {

  	if ( object.layers.test( raycaster.layers ) ) {

  		object.raycast( raycaster, intersects );

  	}

  	if ( recursive === true ) {

  		var children = object.children;

  		for ( var i = 0, l = children.length; i < l; i ++ ) {

  			intersectObject( children[ i ], raycaster, intersects, true );

  		}

  	}

  }

  Object.assign( Raycaster.prototype, {

  	set: function ( origin, direction ) {

  		// direction is assumed to be normalized (for accurate distance calculations)

  		this.ray.set( origin, direction );

  	},

  	setFromCamera: function ( coords, camera ) {

  		if ( ( camera && camera.isPerspectiveCamera ) ) {

  			this.ray.origin.setFromMatrixPosition( camera.matrixWorld );
  			this.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();
  			this.camera = camera;

  		} else if ( ( camera && camera.isOrthographicCamera ) ) {

  			this.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera
  			this.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );
  			this.camera = camera;

  		} else {

  			console.error( 'THREE.Raycaster: Unsupported camera type.' );

  		}

  	},

  	intersectObject: function ( object, recursive, optionalTarget ) {

  		var intersects = optionalTarget || [];

  		intersectObject( object, this, intersects, recursive );

  		intersects.sort( ascSort );

  		return intersects;

  	},

  	intersectObjects: function ( objects, recursive, optionalTarget ) {

  		var intersects = optionalTarget || [];

  		if ( Array.isArray( objects ) === false ) {

  			console.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );
  			return intersects;

  		}

  		for ( var i = 0, l = objects.length; i < l; i ++ ) {

  			intersectObject( objects[ i ], this, intersects, recursive );

  		}

  		intersects.sort( ascSort );

  		return intersects;

  	}

  } );

  /**
   * @author bhouston / http://clara.io
   * @author WestLangley / http://github.com/WestLangley
   *
   * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system
   *
   * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.
   * The azimuthal angle (theta) is measured from the positive z-axis.
   */

  function Spherical( radius, phi, theta ) {

  	this.radius = ( radius !== undefined ) ? radius : 1.0;
  	this.phi = ( phi !== undefined ) ? phi : 0; // polar angle
  	this.theta = ( theta !== undefined ) ? theta : 0; // azimuthal angle

  	return this;

  }

  Object.assign( Spherical.prototype, {

  	set: function ( radius, phi, theta ) {

  		this.radius = radius;
  		this.phi = phi;
  		this.theta = theta;

  		return this;

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	copy: function ( other ) {

  		this.radius = other.radius;
  		this.phi = other.phi;
  		this.theta = other.theta;

  		return this;

  	},

  	// restrict phi to be betwee EPS and PI-EPS
  	makeSafe: function () {

  		var EPS = 0.000001;
  		this.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );

  		return this;

  	},

  	setFromVector3: function ( v ) {

  		return this.setFromCartesianCoords( v.x, v.y, v.z );

  	},

  	setFromCartesianCoords: function ( x, y, z ) {

  		this.radius = Math.sqrt( x * x + y * y + z * z );

  		if ( this.radius === 0 ) {

  			this.theta = 0;
  			this.phi = 0;

  		} else {

  			this.theta = Math.atan2( x, z );
  			this.phi = Math.acos( MathUtils.clamp( y / this.radius, - 1, 1 ) );

  		}

  		return this;

  	}

  } );

  /**
   * @author Mugen87 / https://github.com/Mugen87
   *
   * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system
   *
   */

  function Cylindrical( radius, theta, y ) {

  	this.radius = ( radius !== undefined ) ? radius : 1.0; // distance from the origin to a point in the x-z plane
  	this.theta = ( theta !== undefined ) ? theta : 0; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis
  	this.y = ( y !== undefined ) ? y : 0; // height above the x-z plane

  	return this;

  }

  Object.assign( Cylindrical.prototype, {

  	set: function ( radius, theta, y ) {

  		this.radius = radius;
  		this.theta = theta;
  		this.y = y;

  		return this;

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	copy: function ( other ) {

  		this.radius = other.radius;
  		this.theta = other.theta;
  		this.y = other.y;

  		return this;

  	},

  	setFromVector3: function ( v ) {

  		return this.setFromCartesianCoords( v.x, v.y, v.z );

  	},

  	setFromCartesianCoords: function ( x, y, z ) {

  		this.radius = Math.sqrt( x * x + z * z );
  		this.theta = Math.atan2( x, z );
  		this.y = y;

  		return this;

  	}

  } );

  /**
   * @author bhouston / http://clara.io
   */

  var _vector$7 = new Vector2();

  function Box2( min, max ) {

  	this.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );
  	this.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );

  }

  Object.assign( Box2.prototype, {

  	set: function ( min, max ) {

  		this.min.copy( min );
  		this.max.copy( max );

  		return this;

  	},

  	setFromPoints: function ( points ) {

  		this.makeEmpty();

  		for ( var i = 0, il = points.length; i < il; i ++ ) {

  			this.expandByPoint( points[ i ] );

  		}

  		return this;

  	},

  	setFromCenterAndSize: function ( center, size ) {

  		var halfSize = _vector$7.copy( size ).multiplyScalar( 0.5 );
  		this.min.copy( center ).sub( halfSize );
  		this.max.copy( center ).add( halfSize );

  		return this;

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	copy: function ( box ) {

  		this.min.copy( box.min );
  		this.max.copy( box.max );

  		return this;

  	},

  	makeEmpty: function () {

  		this.min.x = this.min.y = + Infinity;
  		this.max.x = this.max.y = - Infinity;

  		return this;

  	},

  	isEmpty: function () {

  		// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

  		return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );

  	},

  	getCenter: function ( target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Box2: .getCenter() target is now required' );
  			target = new Vector2();

  		}

  		return this.isEmpty() ? target.set( 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

  	},

  	getSize: function ( target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Box2: .getSize() target is now required' );
  			target = new Vector2();

  		}

  		return this.isEmpty() ? target.set( 0, 0 ) : target.subVectors( this.max, this.min );

  	},

  	expandByPoint: function ( point ) {

  		this.min.min( point );
  		this.max.max( point );

  		return this;

  	},

  	expandByVector: function ( vector ) {

  		this.min.sub( vector );
  		this.max.add( vector );

  		return this;

  	},

  	expandByScalar: function ( scalar ) {

  		this.min.addScalar( - scalar );
  		this.max.addScalar( scalar );

  		return this;

  	},

  	containsPoint: function ( point ) {

  		return point.x < this.min.x || point.x > this.max.x ||
  			point.y < this.min.y || point.y > this.max.y ? false : true;

  	},

  	containsBox: function ( box ) {

  		return this.min.x <= box.min.x && box.max.x <= this.max.x &&
  			this.min.y <= box.min.y && box.max.y <= this.max.y;

  	},

  	getParameter: function ( point, target ) {

  		// This can potentially have a divide by zero if the box
  		// has a size dimension of 0.

  		if ( target === undefined ) {

  			console.warn( 'THREE.Box2: .getParameter() target is now required' );
  			target = new Vector2();

  		}

  		return target.set(
  			( point.x - this.min.x ) / ( this.max.x - this.min.x ),
  			( point.y - this.min.y ) / ( this.max.y - this.min.y )
  		);

  	},

  	intersectsBox: function ( box ) {

  		// using 4 splitting planes to rule out intersections

  		return box.max.x < this.min.x || box.min.x > this.max.x ||
  			box.max.y < this.min.y || box.min.y > this.max.y ? false : true;

  	},

  	clampPoint: function ( point, target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Box2: .clampPoint() target is now required' );
  			target = new Vector2();

  		}

  		return target.copy( point ).clamp( this.min, this.max );

  	},

  	distanceToPoint: function ( point ) {

  		var clampedPoint = _vector$7.copy( point ).clamp( this.min, this.max );
  		return clampedPoint.sub( point ).length();

  	},

  	intersect: function ( box ) {

  		this.min.max( box.min );
  		this.max.min( box.max );

  		return this;

  	},

  	union: function ( box ) {

  		this.min.min( box.min );
  		this.max.max( box.max );

  		return this;

  	},

  	translate: function ( offset ) {

  		this.min.add( offset );
  		this.max.add( offset );

  		return this;

  	},

  	equals: function ( box ) {

  		return box.min.equals( this.min ) && box.max.equals( this.max );

  	}

  } );

  /**
   * @author bhouston / http://clara.io
   */

  var _startP = new Vector3();
  var _startEnd = new Vector3();

  function Line3( start, end ) {

  	this.start = ( start !== undefined ) ? start : new Vector3();
  	this.end = ( end !== undefined ) ? end : new Vector3();

  }

  Object.assign( Line3.prototype, {

  	set: function ( start, end ) {

  		this.start.copy( start );
  		this.end.copy( end );

  		return this;

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	copy: function ( line ) {

  		this.start.copy( line.start );
  		this.end.copy( line.end );

  		return this;

  	},

  	getCenter: function ( target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Line3: .getCenter() target is now required' );
  			target = new Vector3();

  		}

  		return target.addVectors( this.start, this.end ).multiplyScalar( 0.5 );

  	},

  	delta: function ( target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Line3: .delta() target is now required' );
  			target = new Vector3();

  		}

  		return target.subVectors( this.end, this.start );

  	},

  	distanceSq: function () {

  		return this.start.distanceToSquared( this.end );

  	},

  	distance: function () {

  		return this.start.distanceTo( this.end );

  	},

  	at: function ( t, target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Line3: .at() target is now required' );
  			target = new Vector3();

  		}

  		return this.delta( target ).multiplyScalar( t ).add( this.start );

  	},

  	closestPointToPointParameter: function ( point, clampToLine ) {

  		_startP.subVectors( point, this.start );
  		_startEnd.subVectors( this.end, this.start );

  		var startEnd2 = _startEnd.dot( _startEnd );
  		var startEnd_startP = _startEnd.dot( _startP );

  		var t = startEnd_startP / startEnd2;

  		if ( clampToLine ) {

  			t = MathUtils.clamp( t, 0, 1 );

  		}

  		return t;

  	},

  	closestPointToPoint: function ( point, clampToLine, target ) {

  		var t = this.closestPointToPointParameter( point, clampToLine );

  		if ( target === undefined ) {

  			console.warn( 'THREE.Line3: .closestPointToPoint() target is now required' );
  			target = new Vector3();

  		}

  		return this.delta( target ).multiplyScalar( t ).add( this.start );

  	},

  	applyMatrix4: function ( matrix ) {

  		this.start.applyMatrix4( matrix );
  		this.end.applyMatrix4( matrix );

  		return this;

  	},

  	equals: function ( line ) {

  		return line.start.equals( this.start ) && line.end.equals( this.end );

  	}

  } );

  /**
   * @author alteredq / http://alteredqualia.com/
   */

  function ImmediateRenderObject( material ) {

  	Object3D.call( this );

  	this.material = material;
  	this.render = function ( /* renderCallback */ ) {};

  	this.hasPositions = false;
  	this.hasNormals = false;
  	this.hasColors = false;
  	this.hasUvs = false;

  	this.positionArray = null;
  	this.normalArray = null;
  	this.colorArray = null;
  	this.uvArray = null;

  	this.count = 0;

  }

  ImmediateRenderObject.prototype = Object.create( Object3D.prototype );
  ImmediateRenderObject.prototype.constructor = ImmediateRenderObject;

  ImmediateRenderObject.prototype.isImmediateRenderObject = true;

  /**
   * @author alteredq / http://alteredqualia.com/
   * @author mrdoob / http://mrdoob.com/
   * @author WestLangley / http://github.com/WestLangley
   */

  var _vector$8 = new Vector3();

  function SpotLightHelper( light, color ) {

  	Object3D.call( this );

  	this.light = light;
  	this.light.updateMatrixWorld();

  	this.matrix = light.matrixWorld;
  	this.matrixAutoUpdate = false;

  	this.color = color;

  	var geometry = new BufferGeometry();

  	var positions = [
  		0, 0, 0, 	0, 0, 1,
  		0, 0, 0, 	1, 0, 1,
  		0, 0, 0,	- 1, 0, 1,
  		0, 0, 0, 	0, 1, 1,
  		0, 0, 0, 	0, - 1, 1
  	];

  	for ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {

  		var p1 = ( i / l ) * Math.PI * 2;
  		var p2 = ( j / l ) * Math.PI * 2;

  		positions.push(
  			Math.cos( p1 ), Math.sin( p1 ), 1,
  			Math.cos( p2 ), Math.sin( p2 ), 1
  		);

  	}

  	geometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );

  	var material = new LineBasicMaterial( { fog: false, toneMapped: false } );

  	this.cone = new LineSegments( geometry, material );
  	this.add( this.cone );

  	this.update();

  }

  SpotLightHelper.prototype = Object.create( Object3D.prototype );
  SpotLightHelper.prototype.constructor = SpotLightHelper;

  SpotLightHelper.prototype.dispose = function () {

  	this.cone.geometry.dispose();
  	this.cone.material.dispose();

  };

  SpotLightHelper.prototype.update = function () {

  	this.light.updateMatrixWorld();

  	var coneLength = this.light.distance ? this.light.distance : 1000;
  	var coneWidth = coneLength * Math.tan( this.light.angle );

  	this.cone.scale.set( coneWidth, coneWidth, coneLength );

  	_vector$8.setFromMatrixPosition( this.light.target.matrixWorld );

  	this.cone.lookAt( _vector$8 );

  	if ( this.color !== undefined ) {

  		this.cone.material.color.set( this.color );

  	} else {

  		this.cone.material.color.copy( this.light.color );

  	}

  };

  /**
   * @author Sean Griffin / http://twitter.com/sgrif
   * @author Michael Guerrero / http://realitymeltdown.com
   * @author mrdoob / http://mrdoob.com/
   * @author ikerr / http://verold.com
   * @author Mugen87 / https://github.com/Mugen87
   */

  var _vector$9 = new Vector3();
  var _boneMatrix = new Matrix4();
  var _matrixWorldInv = new Matrix4();

  function getBoneList( object ) {

  	var boneList = [];

  	if ( object && object.isBone ) {

  		boneList.push( object );

  	}

  	for ( var i = 0; i < object.children.length; i ++ ) {

  		boneList.push.apply( boneList, getBoneList( object.children[ i ] ) );

  	}

  	return boneList;

  }

  function SkeletonHelper( object ) {

  	var bones = getBoneList( object );

  	var geometry = new BufferGeometry();

  	var vertices = [];
  	var colors = [];

  	var color1 = new Color( 0, 0, 1 );
  	var color2 = new Color( 0, 1, 0 );

  	for ( var i = 0; i < bones.length; i ++ ) {

  		var bone = bones[ i ];

  		if ( bone.parent && bone.parent.isBone ) {

  			vertices.push( 0, 0, 0 );
  			vertices.push( 0, 0, 0 );
  			colors.push( color1.r, color1.g, color1.b );
  			colors.push( color2.r, color2.g, color2.b );

  		}

  	}

  	geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
  	geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

  	var material = new LineBasicMaterial( { vertexColors: true, depthTest: false, depthWrite: false, toneMapped: false, transparent: true } );

  	LineSegments.call( this, geometry, material );

  	this.type = 'SkeletonHelper';

  	this.root = object;
  	this.bones = bones;

  	this.matrix = object.matrixWorld;
  	this.matrixAutoUpdate = false;

  }

  SkeletonHelper.prototype = Object.create( LineSegments.prototype );
  SkeletonHelper.prototype.constructor = SkeletonHelper;

  SkeletonHelper.prototype.isSkeletonHelper = true;

  SkeletonHelper.prototype.updateMatrixWorld = function ( force ) {

  	var bones = this.bones;

  	var geometry = this.geometry;
  	var position = geometry.getAttribute( 'position' );

  	_matrixWorldInv.getInverse( this.root.matrixWorld );

  	for ( var i = 0, j = 0; i < bones.length; i ++ ) {

  		var bone = bones[ i ];

  		if ( bone.parent && bone.parent.isBone ) {

  			_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.matrixWorld );
  			_vector$9.setFromMatrixPosition( _boneMatrix );
  			position.setXYZ( j, _vector$9.x, _vector$9.y, _vector$9.z );

  			_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.parent.matrixWorld );
  			_vector$9.setFromMatrixPosition( _boneMatrix );
  			position.setXYZ( j + 1, _vector$9.x, _vector$9.y, _vector$9.z );

  			j += 2;

  		}

  	}

  	geometry.getAttribute( 'position' ).needsUpdate = true;

  	Object3D.prototype.updateMatrixWorld.call( this, force );

  };

  /**
   * @author alteredq / http://alteredqualia.com/
   * @author mrdoob / http://mrdoob.com/
   */

  function PointLightHelper( light, sphereSize, color ) {

  	this.light = light;
  	this.light.updateMatrixWorld();

  	this.color = color;

  	var geometry = new SphereBufferGeometry( sphereSize, 4, 2 );
  	var material = new MeshBasicMaterial( { wireframe: true, fog: false, toneMapped: false } );

  	Mesh.call( this, geometry, material );

  	this.type = 'PointLightHelper';

  	this.matrix = this.light.matrixWorld;
  	this.matrixAutoUpdate = false;

  	this.update();


  	/*
  	const distanceGeometry = new THREE.IcosahedronBufferGeometry( 1, 2 );
  	const distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );

  	this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );
  	this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );

  	const d = light.distance;

  	if ( d === 0.0 ) {

  		this.lightDistance.visible = false;

  	} else {

  		this.lightDistance.scale.set( d, d, d );

  	}

  	this.add( this.lightDistance );
  	*/

  }

  PointLightHelper.prototype = Object.create( Mesh.prototype );
  PointLightHelper.prototype.constructor = PointLightHelper;

  PointLightHelper.prototype.dispose = function () {

  	this.geometry.dispose();
  	this.material.dispose();

  };

  PointLightHelper.prototype.update = function () {

  	if ( this.color !== undefined ) {

  		this.material.color.set( this.color );

  	} else {

  		this.material.color.copy( this.light.color );

  	}

  	/*
  	const d = this.light.distance;

  	if ( d === 0.0 ) {

  		this.lightDistance.visible = false;

  	} else {

  		this.lightDistance.visible = true;
  		this.lightDistance.scale.set( d, d, d );

  	}
  	*/

  };

  /**
   * @author alteredq / http://alteredqualia.com/
   * @author mrdoob / http://mrdoob.com/
   * @author Mugen87 / https://github.com/Mugen87
   */

  var _vector$a = new Vector3();
  var _color1 = new Color();
  var _color2 = new Color();

  function HemisphereLightHelper( light, size, color ) {

  	Object3D.call( this );

  	this.light = light;
  	this.light.updateMatrixWorld();

  	this.matrix = light.matrixWorld;
  	this.matrixAutoUpdate = false;

  	this.color = color;

  	var geometry = new OctahedronBufferGeometry( size );
  	geometry.rotateY( Math.PI * 0.5 );

  	this.material = new MeshBasicMaterial( { wireframe: true, fog: false, toneMapped: false } );
  	if ( this.color === undefined ) { this.material.vertexColors = true; }

  	var position = geometry.getAttribute( 'position' );
  	var colors = new Float32Array( position.count * 3 );

  	geometry.setAttribute( 'color', new BufferAttribute( colors, 3 ) );

  	this.add( new Mesh( geometry, this.material ) );

  	this.update();

  }

  HemisphereLightHelper.prototype = Object.create( Object3D.prototype );
  HemisphereLightHelper.prototype.constructor = HemisphereLightHelper;

  HemisphereLightHelper.prototype.dispose = function () {

  	this.children[ 0 ].geometry.dispose();
  	this.children[ 0 ].material.dispose();

  };

  HemisphereLightHelper.prototype.update = function () {

  	var mesh = this.children[ 0 ];

  	if ( this.color !== undefined ) {

  		this.material.color.set( this.color );

  	} else {

  		var colors = mesh.geometry.getAttribute( 'color' );

  		_color1.copy( this.light.color );
  		_color2.copy( this.light.groundColor );

  		for ( var i = 0, l = colors.count; i < l; i ++ ) {

  			var color = ( i < ( l / 2 ) ) ? _color1 : _color2;

  			colors.setXYZ( i, color.r, color.g, color.b );

  		}

  		colors.needsUpdate = true;

  	}

  	mesh.lookAt( _vector$a.setFromMatrixPosition( this.light.matrixWorld ).negate() );

  };

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function GridHelper( size, divisions, color1, color2 ) {

  	size = size || 10;
  	divisions = divisions || 10;
  	color1 = new Color( color1 !== undefined ? color1 : 0x444444 );
  	color2 = new Color( color2 !== undefined ? color2 : 0x888888 );

  	var center = divisions / 2;
  	var step = size / divisions;
  	var halfSize = size / 2;

  	var vertices = [], colors = [];

  	for ( var i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {

  		vertices.push( - halfSize, 0, k, halfSize, 0, k );
  		vertices.push( k, 0, - halfSize, k, 0, halfSize );

  		var color = i === center ? color1 : color2;

  		color.toArray( colors, j ); j += 3;
  		color.toArray( colors, j ); j += 3;
  		color.toArray( colors, j ); j += 3;
  		color.toArray( colors, j ); j += 3;

  	}

  	var geometry = new BufferGeometry();
  	geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
  	geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

  	var material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );

  	LineSegments.call( this, geometry, material );

  	this.type = 'GridHelper';

  }

  GridHelper.prototype = Object.assign( Object.create( LineSegments.prototype ), {

  	constructor: GridHelper,

  	copy: function ( source ) {

  		LineSegments.prototype.copy.call( this, source );

  		this.geometry.copy( source.geometry );
  		this.material.copy( source.material );

  		return this;

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author Mugen87 / http://github.com/Mugen87
   * @author Hectate / http://www.github.com/Hectate
   */

  function PolarGridHelper( radius, radials, circles, divisions, color1, color2 ) {

  	radius = radius || 10;
  	radials = radials || 16;
  	circles = circles || 8;
  	divisions = divisions || 64;
  	color1 = new Color( color1 !== undefined ? color1 : 0x444444 );
  	color2 = new Color( color2 !== undefined ? color2 : 0x888888 );

  	var vertices = [];
  	var colors = [];

  	// create the radials

  	for ( var i = 0; i <= radials; i ++ ) {

  		var v = ( i / radials ) * ( Math.PI * 2 );

  		var x = Math.sin( v ) * radius;
  		var z = Math.cos( v ) * radius;

  		vertices.push( 0, 0, 0 );
  		vertices.push( x, 0, z );

  		var color = ( i & 1 ) ? color1 : color2;

  		colors.push( color.r, color.g, color.b );
  		colors.push( color.r, color.g, color.b );

  	}

  	// create the circles

  	for ( var i$1 = 0; i$1 <= circles; i$1 ++ ) {

  		var color$1 = ( i$1 & 1 ) ? color1 : color2;

  		var r = radius - ( radius / circles * i$1 );

  		for ( var j = 0; j < divisions; j ++ ) {

  			// first vertex

  			var v$1 = ( j / divisions ) * ( Math.PI * 2 );

  			var x$1 = Math.sin( v$1 ) * r;
  			var z$1 = Math.cos( v$1 ) * r;

  			vertices.push( x$1, 0, z$1 );
  			colors.push( color$1.r, color$1.g, color$1.b );

  			// second vertex

  			v$1 = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );

  			x$1 = Math.sin( v$1 ) * r;
  			z$1 = Math.cos( v$1 ) * r;

  			vertices.push( x$1, 0, z$1 );
  			colors.push( color$1.r, color$1.g, color$1.b );

  		}

  	}

  	var geometry = new BufferGeometry();
  	geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
  	geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

  	var material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );

  	LineSegments.call( this, geometry, material );

  	this.type = 'PolarGridHelper';

  }

  PolarGridHelper.prototype = Object.create( LineSegments.prototype );
  PolarGridHelper.prototype.constructor = PolarGridHelper;

  /**
   * @author alteredq / http://alteredqualia.com/
   * @author mrdoob / http://mrdoob.com/
   * @author WestLangley / http://github.com/WestLangley
   */

  var _v1$5 = new Vector3();
  var _v2$3 = new Vector3();
  var _v3$1 = new Vector3();

  function DirectionalLightHelper( light, size, color ) {

  	Object3D.call( this );

  	this.light = light;
  	this.light.updateMatrixWorld();

  	this.matrix = light.matrixWorld;
  	this.matrixAutoUpdate = false;

  	this.color = color;

  	if ( size === undefined ) { size = 1; }

  	var geometry = new BufferGeometry();
  	geometry.setAttribute( 'position', new Float32BufferAttribute( [
  		- size, size, 0,
  		size, size, 0,
  		size, - size, 0,
  		- size, - size, 0,
  		- size, size, 0
  	], 3 ) );

  	var material = new LineBasicMaterial( { fog: false, toneMapped: false } );

  	this.lightPlane = new Line( geometry, material );
  	this.add( this.lightPlane );

  	geometry = new BufferGeometry();
  	geometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );

  	this.targetLine = new Line( geometry, material );
  	this.add( this.targetLine );

  	this.update();

  }

  DirectionalLightHelper.prototype = Object.create( Object3D.prototype );
  DirectionalLightHelper.prototype.constructor = DirectionalLightHelper;

  DirectionalLightHelper.prototype.dispose = function () {

  	this.lightPlane.geometry.dispose();
  	this.lightPlane.material.dispose();
  	this.targetLine.geometry.dispose();
  	this.targetLine.material.dispose();

  };

  DirectionalLightHelper.prototype.update = function () {

  	_v1$5.setFromMatrixPosition( this.light.matrixWorld );
  	_v2$3.setFromMatrixPosition( this.light.target.matrixWorld );
  	_v3$1.subVectors( _v2$3, _v1$5 );

  	this.lightPlane.lookAt( _v2$3 );

  	if ( this.color !== undefined ) {

  		this.lightPlane.material.color.set( this.color );
  		this.targetLine.material.color.set( this.color );

  	} else {

  		this.lightPlane.material.color.copy( this.light.color );
  		this.targetLine.material.color.copy( this.light.color );

  	}

  	this.targetLine.lookAt( _v2$3 );
  	this.targetLine.scale.z = _v3$1.length();

  };

  /**
   * @author alteredq / http://alteredqualia.com/
   * @author Mugen87 / https://github.com/Mugen87
   *
   *	- shows frustum, line of sight and up of the camera
   *	- suitable for fast updates
   * 	- based on frustum visualization in lightgl.js shadowmap example
   *		http://evanw.github.com/lightgl.js/tests/shadowmap.html
   */

  var _vector$b = new Vector3();
  var _camera = new Camera();

  function CameraHelper( camera ) {

  	var geometry = new BufferGeometry();
  	var material = new LineBasicMaterial( { color: 0xffffff, vertexColors: true, toneMapped: false } );

  	var vertices = [];
  	var colors = [];

  	var pointMap = {};

  	// colors

  	var colorFrustum = new Color( 0xffaa00 );
  	var colorCone = new Color( 0xff0000 );
  	var colorUp = new Color( 0x00aaff );
  	var colorTarget = new Color( 0xffffff );
  	var colorCross = new Color( 0x333333 );

  	// near

  	addLine( 'n1', 'n2', colorFrustum );
  	addLine( 'n2', 'n4', colorFrustum );
  	addLine( 'n4', 'n3', colorFrustum );
  	addLine( 'n3', 'n1', colorFrustum );

  	// far

  	addLine( 'f1', 'f2', colorFrustum );
  	addLine( 'f2', 'f4', colorFrustum );
  	addLine( 'f4', 'f3', colorFrustum );
  	addLine( 'f3', 'f1', colorFrustum );

  	// sides

  	addLine( 'n1', 'f1', colorFrustum );
  	addLine( 'n2', 'f2', colorFrustum );
  	addLine( 'n3', 'f3', colorFrustum );
  	addLine( 'n4', 'f4', colorFrustum );

  	// cone

  	addLine( 'p', 'n1', colorCone );
  	addLine( 'p', 'n2', colorCone );
  	addLine( 'p', 'n3', colorCone );
  	addLine( 'p', 'n4', colorCone );

  	// up

  	addLine( 'u1', 'u2', colorUp );
  	addLine( 'u2', 'u3', colorUp );
  	addLine( 'u3', 'u1', colorUp );

  	// target

  	addLine( 'c', 't', colorTarget );
  	addLine( 'p', 'c', colorCross );

  	// cross

  	addLine( 'cn1', 'cn2', colorCross );
  	addLine( 'cn3', 'cn4', colorCross );

  	addLine( 'cf1', 'cf2', colorCross );
  	addLine( 'cf3', 'cf4', colorCross );

  	function addLine( a, b, color ) {

  		addPoint( a, color );
  		addPoint( b, color );

  	}

  	function addPoint( id, color ) {

  		vertices.push( 0, 0, 0 );
  		colors.push( color.r, color.g, color.b );

  		if ( pointMap[ id ] === undefined ) {

  			pointMap[ id ] = [];

  		}

  		pointMap[ id ].push( ( vertices.length / 3 ) - 1 );

  	}

  	geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
  	geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

  	LineSegments.call( this, geometry, material );

  	this.type = 'CameraHelper';

  	this.camera = camera;
  	if ( this.camera.updateProjectionMatrix ) { this.camera.updateProjectionMatrix(); }

  	this.matrix = camera.matrixWorld;
  	this.matrixAutoUpdate = false;

  	this.pointMap = pointMap;

  	this.update();

  }

  CameraHelper.prototype = Object.create( LineSegments.prototype );
  CameraHelper.prototype.constructor = CameraHelper;

  CameraHelper.prototype.update = function () {

  	var geometry = this.geometry;
  	var pointMap = this.pointMap;

  	var w = 1, h = 1;

  	// we need just camera projection matrix inverse
  	// world matrix must be identity

  	_camera.projectionMatrixInverse.copy( this.camera.projectionMatrixInverse );

  	// center / target

  	setPoint( 'c', pointMap, geometry, _camera, 0, 0, - 1 );
  	setPoint( 't', pointMap, geometry, _camera, 0, 0, 1 );

  	// near

  	setPoint( 'n1', pointMap, geometry, _camera, - w, - h, - 1 );
  	setPoint( 'n2', pointMap, geometry, _camera, w, - h, - 1 );
  	setPoint( 'n3', pointMap, geometry, _camera, - w, h, - 1 );
  	setPoint( 'n4', pointMap, geometry, _camera, w, h, - 1 );

  	// far

  	setPoint( 'f1', pointMap, geometry, _camera, - w, - h, 1 );
  	setPoint( 'f2', pointMap, geometry, _camera, w, - h, 1 );
  	setPoint( 'f3', pointMap, geometry, _camera, - w, h, 1 );
  	setPoint( 'f4', pointMap, geometry, _camera, w, h, 1 );

  	// up

  	setPoint( 'u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, - 1 );
  	setPoint( 'u2', pointMap, geometry, _camera, - w * 0.7, h * 1.1, - 1 );
  	setPoint( 'u3', pointMap, geometry, _camera, 0, h * 2, - 1 );

  	// cross

  	setPoint( 'cf1', pointMap, geometry, _camera, - w, 0, 1 );
  	setPoint( 'cf2', pointMap, geometry, _camera, w, 0, 1 );
  	setPoint( 'cf3', pointMap, geometry, _camera, 0, - h, 1 );
  	setPoint( 'cf4', pointMap, geometry, _camera, 0, h, 1 );

  	setPoint( 'cn1', pointMap, geometry, _camera, - w, 0, - 1 );
  	setPoint( 'cn2', pointMap, geometry, _camera, w, 0, - 1 );
  	setPoint( 'cn3', pointMap, geometry, _camera, 0, - h, - 1 );
  	setPoint( 'cn4', pointMap, geometry, _camera, 0, h, - 1 );

  	geometry.getAttribute( 'position' ).needsUpdate = true;

  };

  function setPoint( point, pointMap, geometry, camera, x, y, z ) {

  	_vector$b.set( x, y, z ).unproject( camera );

  	var points = pointMap[ point ];

  	if ( points !== undefined ) {

  		var position = geometry.getAttribute( 'position' );

  		for ( var i = 0, l = points.length; i < l; i ++ ) {

  			position.setXYZ( points[ i ], _vector$b.x, _vector$b.y, _vector$b.z );

  		}

  	}

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author Mugen87 / http://github.com/Mugen87
   */

  var _box$3 = new Box3();

  function BoxHelper( object, color ) {

  	this.object = object;

  	if ( color === undefined ) { color = 0xffff00; }

  	var indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );
  	var positions = new Float32Array( 8 * 3 );

  	var geometry = new BufferGeometry();
  	geometry.setIndex( new BufferAttribute( indices, 1 ) );
  	geometry.setAttribute( 'position', new BufferAttribute( positions, 3 ) );

  	LineSegments.call( this, geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );

  	this.type = 'BoxHelper';

  	this.matrixAutoUpdate = false;

  	this.update();

  }

  BoxHelper.prototype = Object.create( LineSegments.prototype );
  BoxHelper.prototype.constructor = BoxHelper;

  BoxHelper.prototype.update = function ( object ) {

  	if ( object !== undefined ) {

  		console.warn( 'THREE.BoxHelper: .update() has no longer arguments.' );

  	}

  	if ( this.object !== undefined ) {

  		_box$3.setFromObject( this.object );

  	}

  	if ( _box$3.isEmpty() ) { return; }

  	var min = _box$3.min;
  	var max = _box$3.max;

  	/*
  	  5____4
  	1/___0/|
  	| 6__|_7
  	2/___3/

  	0: max.x, max.y, max.z
  	1: min.x, max.y, max.z
  	2: min.x, min.y, max.z
  	3: max.x, min.y, max.z
  	4: max.x, max.y, min.z
  	5: min.x, max.y, min.z
  	6: min.x, min.y, min.z
  	7: max.x, min.y, min.z
  	*/

  	var position = this.geometry.attributes.position;
  	var array = position.array;

  	array[ 0 ] = max.x; array[ 1 ] = max.y; array[ 2 ] = max.z;
  	array[ 3 ] = min.x; array[ 4 ] = max.y; array[ 5 ] = max.z;
  	array[ 6 ] = min.x; array[ 7 ] = min.y; array[ 8 ] = max.z;
  	array[ 9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;
  	array[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;
  	array[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;
  	array[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;
  	array[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;

  	position.needsUpdate = true;

  	this.geometry.computeBoundingSphere();


  };

  BoxHelper.prototype.setFromObject = function ( object ) {

  	this.object = object;
  	this.update();

  	return this;

  };

  BoxHelper.prototype.copy = function ( source ) {

  	LineSegments.prototype.copy.call( this, source );

  	this.object = source.object;

  	return this;

  };

  BoxHelper.prototype.clone = function () {

  	return new this.constructor().copy( this );

  };

  /**
   * @author WestLangley / http://github.com/WestLangley
   */

  function Box3Helper( box, color ) {

  	this.type = 'Box3Helper';

  	this.box = box;

  	color = color || 0xffff00;

  	var indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );

  	var positions = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 1, - 1, 1, - 1, - 1 ];

  	var geometry = new BufferGeometry();

  	geometry.setIndex( new BufferAttribute( indices, 1 ) );

  	geometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );

  	LineSegments.call( this, geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );

  	this.type = 'Box3Helper';

  	this.geometry.computeBoundingSphere();

  }

  Box3Helper.prototype = Object.create( LineSegments.prototype );
  Box3Helper.prototype.constructor = Box3Helper;

  Box3Helper.prototype.updateMatrixWorld = function ( force ) {

  	var box = this.box;

  	if ( box.isEmpty() ) { return; }

  	box.getCenter( this.position );

  	box.getSize( this.scale );

  	this.scale.multiplyScalar( 0.5 );

  	Object3D.prototype.updateMatrixWorld.call( this, force );

  };

  /**
   * @author WestLangley / http://github.com/WestLangley
   */

  function PlaneHelper( plane, size, hex ) {

  	this.plane = plane;

  	this.size = ( size === undefined ) ? 1 : size;

  	var color = ( hex !== undefined ) ? hex : 0xffff00;

  	var positions = [ 1, - 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0 ];

  	var geometry = new BufferGeometry();
  	geometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );
  	geometry.computeBoundingSphere();

  	Line.call( this, geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );

  	this.type = 'PlaneHelper';

  	//

  	var positions2 = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, - 1, 1, 1, - 1, 1 ];

  	var geometry2 = new BufferGeometry();
  	geometry2.setAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );
  	geometry2.computeBoundingSphere();

  	this.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false, toneMapped: false } ) ) );

  }

  PlaneHelper.prototype = Object.create( Line.prototype );
  PlaneHelper.prototype.constructor = PlaneHelper;

  PlaneHelper.prototype.updateMatrixWorld = function ( force ) {

  	var scale = - this.plane.constant;

  	if ( Math.abs( scale ) < 1e-8 ) { scale = 1e-8; } // sign does not matter

  	this.scale.set( 0.5 * this.size, 0.5 * this.size, scale );

  	this.children[ 0 ].material.side = ( scale < 0 ) ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here

  	this.lookAt( this.plane.normal );

  	Object3D.prototype.updateMatrixWorld.call( this, force );

  };

  /**
   * @author WestLangley / http://github.com/WestLangley
   * @author zz85 / http://github.com/zz85
   * @author bhouston / http://clara.io
   *
   * Creates an arrow for visualizing directions
   *
   * Parameters:
   *  dir - Vector3
   *  origin - Vector3
   *  length - Number
   *  color - color in hex value
   *  headLength - Number
   *  headWidth - Number
   */

  var _axis = new Vector3();
  var _lineGeometry, _coneGeometry;

  function ArrowHelper( dir, origin, length, color, headLength, headWidth ) {

  	// dir is assumed to be normalized

  	Object3D.call( this );

  	this.type = 'ArrowHelper';

  	if ( dir === undefined ) { dir = new Vector3( 0, 0, 1 ); }
  	if ( origin === undefined ) { origin = new Vector3( 0, 0, 0 ); }
  	if ( length === undefined ) { length = 1; }
  	if ( color === undefined ) { color = 0xffff00; }
  	if ( headLength === undefined ) { headLength = 0.2 * length; }
  	if ( headWidth === undefined ) { headWidth = 0.2 * headLength; }

  	if ( _lineGeometry === undefined ) {

  		_lineGeometry = new BufferGeometry();
  		_lineGeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );

  		_coneGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );
  		_coneGeometry.translate( 0, - 0.5, 0 );

  	}

  	this.position.copy( origin );

  	this.line = new Line( _lineGeometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );
  	this.line.matrixAutoUpdate = false;
  	this.add( this.line );

  	this.cone = new Mesh( _coneGeometry, new MeshBasicMaterial( { color: color, toneMapped: false } ) );
  	this.cone.matrixAutoUpdate = false;
  	this.add( this.cone );

  	this.setDirection( dir );
  	this.setLength( length, headLength, headWidth );

  }

  ArrowHelper.prototype = Object.create( Object3D.prototype );
  ArrowHelper.prototype.constructor = ArrowHelper;

  ArrowHelper.prototype.setDirection = function ( dir ) {

  	// dir is assumed to be normalized

  	if ( dir.y > 0.99999 ) {

  		this.quaternion.set( 0, 0, 0, 1 );

  	} else if ( dir.y < - 0.99999 ) {

  		this.quaternion.set( 1, 0, 0, 0 );

  	} else {

  		_axis.set( dir.z, 0, - dir.x ).normalize();

  		var radians = Math.acos( dir.y );

  		this.quaternion.setFromAxisAngle( _axis, radians );

  	}

  };

  ArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {

  	if ( headLength === undefined ) { headLength = 0.2 * length; }
  	if ( headWidth === undefined ) { headWidth = 0.2 * headLength; }

  	this.line.scale.set( 1, Math.max( 0.0001, length - headLength ), 1 ); // see #17458
  	this.line.updateMatrix();

  	this.cone.scale.set( headWidth, headLength, headWidth );
  	this.cone.position.y = length;
  	this.cone.updateMatrix();

  };

  ArrowHelper.prototype.setColor = function ( color ) {

  	this.line.material.color.set( color );
  	this.cone.material.color.set( color );

  };

  ArrowHelper.prototype.copy = function ( source ) {

  	Object3D.prototype.copy.call( this, source, false );

  	this.line.copy( source.line );
  	this.cone.copy( source.cone );

  	return this;

  };

  ArrowHelper.prototype.clone = function () {

  	return new this.constructor().copy( this );

  };

  /**
   * @author sroucheray / http://sroucheray.org/
   * @author mrdoob / http://mrdoob.com/
   */

  function AxesHelper( size ) {

  	size = size || 1;

  	var vertices = [
  		0, 0, 0,	size, 0, 0,
  		0, 0, 0,	0, size, 0,
  		0, 0, 0,	0, 0, size
  	];

  	var colors = [
  		1, 0, 0,	1, 0.6, 0,
  		0, 1, 0,	0.6, 1, 0,
  		0, 0, 1,	0, 0.6, 1
  	];

  	var geometry = new BufferGeometry();
  	geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
  	geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

  	var material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );

  	LineSegments.call( this, geometry, material );

  	this.type = 'AxesHelper';

  }

  AxesHelper.prototype = Object.create( LineSegments.prototype );
  AxesHelper.prototype.constructor = AxesHelper;

  /**
   * @author Emmett Lalish / elalish
   *
   * This class generates a Prefiltered, Mipmapped Radiance Environment Map
   * (PMREM) from a cubeMap environment texture. This allows different levels of
   * blur to be quickly accessed based on material roughness. It is packed into a
   * special CubeUV format that allows us to perform custom interpolation so that
   * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap
   * chain, it only goes down to the LOD_MIN level (above), and then creates extra
   * even more filtered 'mips' at the same LOD_MIN resolution, associated with
   * higher roughness levels. In this way we maintain resolution to smoothly
   * interpolate diffuse lighting while limiting sampling computation.
   */

  var LOD_MIN = 4;
  var LOD_MAX = 8;

  // The standard deviations (radians) associated with the extra mips. These are
  // chosen to approximate a Trowbridge-Reitz distribution function times the
  // geometric shadowing function. These sigma values squared must match the
  // variance #defines in cube_uv_reflection_fragment.glsl.js.
  var EXTRA_LOD_SIGMA = [ 0.125, 0.215, 0.35, 0.446, 0.526, 0.582 ];

  var TOTAL_LODS = LOD_MAX - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;

  new OrthographicCamera();
  _createPlanes();

  // Golden Ratio
  var PHI = ( 1 + Math.sqrt( 5 ) ) / 2;
  var INV_PHI = 1 / PHI;

  // Vertices of a dodecahedron (except the opposites, which represent the
  // same axis), used as axis directions evenly spread on a sphere.
  [
  	new Vector3( 1, 1, 1 ),
  	new Vector3( - 1, 1, 1 ),
  	new Vector3( 1, 1, - 1 ),
  	new Vector3( - 1, 1, - 1 ),
  	new Vector3( 0, PHI, INV_PHI ),
  	new Vector3( 0, PHI, - INV_PHI ),
  	new Vector3( INV_PHI, 0, PHI ),
  	new Vector3( - INV_PHI, 0, PHI ),
  	new Vector3( PHI, INV_PHI, 0 ),
  	new Vector3( - PHI, INV_PHI, 0 ) ];

  function _createPlanes() {

  	var _lodPlanes = [];
  	var _sizeLods = [];
  	var _sigmas = [];

  	var lod = LOD_MAX;

  	for ( var i = 0; i < TOTAL_LODS; i ++ ) {

  		var sizeLod = Math.pow( 2, lod );
  		_sizeLods.push( sizeLod );
  		var sigma = 1.0 / sizeLod;

  		if ( i > LOD_MAX - LOD_MIN ) {

  			sigma = EXTRA_LOD_SIGMA[ i - LOD_MAX + LOD_MIN - 1 ];

  		} else if ( i == 0 ) {

  			sigma = 0;

  		}

  		_sigmas.push( sigma );

  		var texelSize = 1.0 / ( sizeLod - 1 );
  		var min = - texelSize / 2;
  		var max = 1 + texelSize / 2;
  		var uv1 = [ min, min, max, min, max, max, min, min, max, max, min, max ];

  		var cubeFaces = 6;
  		var vertices = 6;
  		var positionSize = 3;
  		var uvSize = 2;
  		var faceIndexSize = 1;

  		var position = new Float32Array( positionSize * vertices * cubeFaces );
  		var uv = new Float32Array( uvSize * vertices * cubeFaces );
  		var faceIndex = new Float32Array( faceIndexSize * vertices * cubeFaces );

  		for ( var face = 0; face < cubeFaces; face ++ ) {

  			var x = ( face % 3 ) * 2 / 3 - 1;
  			var y = face > 2 ? 0 : - 1;
  			var coordinates = [
  				x, y, 0,
  				x + 2 / 3, y, 0,
  				x + 2 / 3, y + 1, 0,
  				x, y, 0,
  				x + 2 / 3, y + 1, 0,
  				x, y + 1, 0
  			];
  			position.set( coordinates, positionSize * vertices * face );
  			uv.set( uv1, uvSize * vertices * face );
  			var fill = [ face, face, face, face, face, face ];
  			faceIndex.set( fill, faceIndexSize * vertices * face );

  		}

  		var planes = new BufferGeometry();
  		planes.setAttribute( 'position', new BufferAttribute( position, positionSize ) );
  		planes.setAttribute( 'uv', new BufferAttribute( uv, uvSize ) );
  		planes.setAttribute( 'faceIndex', new BufferAttribute( faceIndex, faceIndexSize ) );
  		_lodPlanes.push( planes );

  		if ( lod > LOD_MIN ) {

  			lod --;

  		}

  	}

  	return { _lodPlanes: _lodPlanes, _sizeLods: _sizeLods, _sigmas: _sigmas };

  }

  //

  Curve.create = function ( construct, getPoint ) {

  	console.log( 'THREE.Curve.create() has been deprecated' );

  	construct.prototype = Object.create( Curve.prototype );
  	construct.prototype.constructor = construct;
  	construct.prototype.getPoint = getPoint;

  	return construct;

  };

  //

  Object.assign( CurvePath.prototype, {

  	createPointsGeometry: function ( divisions ) {

  		console.warn( 'THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );

  		// generate geometry from path points (for Line or Points objects)

  		var pts = this.getPoints( divisions );
  		return this.createGeometry( pts );

  	},

  	createSpacedPointsGeometry: function ( divisions ) {

  		console.warn( 'THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );

  		// generate geometry from equidistant sampling along the path

  		var pts = this.getSpacedPoints( divisions );
  		return this.createGeometry( pts );

  	},

  	createGeometry: function ( points ) {

  		console.warn( 'THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );

  		var geometry = new Geometry();

  		for ( var i = 0, l = points.length; i < l; i ++ ) {

  			var point = points[ i ];
  			geometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );

  		}

  		return geometry;

  	}

  } );

  //

  Object.assign( Path.prototype, {

  	fromPoints: function ( points ) {

  		console.warn( 'THREE.Path: .fromPoints() has been renamed to .setFromPoints().' );
  		return this.setFromPoints( points );

  	}

  } );

  //

  function Spline$1( points ) {

  	console.warn( 'THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.' );

  	CatmullRomCurve3.call( this, points );
  	this.type = 'catmullrom';

  }

  Spline$1.prototype = Object.create( CatmullRomCurve3.prototype );

  Object.assign( Spline$1.prototype, {

  	initFromArray: function ( /* a */ ) {

  		console.error( 'THREE.Spline: .initFromArray() has been removed.' );

  	},
  	getControlPointsArray: function ( /* optionalTarget */ ) {

  		console.error( 'THREE.Spline: .getControlPointsArray() has been removed.' );

  	},
  	reparametrizeByArcLength: function ( /* samplingCoef */ ) {

  		console.error( 'THREE.Spline: .reparametrizeByArcLength() has been removed.' );

  	}

  } );

  GridHelper.prototype.setColors = function () {

  	console.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );

  };

  SkeletonHelper.prototype.update = function () {

  	console.error( 'THREE.SkeletonHelper: update() no longer needs to be called.' );

  };

  //

  Object.assign( Loader$1.prototype, {

  	extractUrlBase: function ( url ) {

  		console.warn( 'THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.' );
  		return LoaderUtils.extractUrlBase( url );

  	}

  } );

  Loader$1.Handlers = {

  	add: function ( /* regex, loader */ ) {

  		console.error( 'THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.' );

  	},

  	get: function ( /* file */ ) {

  		console.error( 'THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.' );

  	}

  };

  Object.assign( ObjectLoader.prototype, {

  	setTexturePath: function ( value ) {

  		console.warn( 'THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().' );
  		return this.setResourcePath( value );

  	}

  } );

  //

  Object.assign( Box2.prototype, {

  	center: function ( optionalTarget ) {

  		console.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );
  		return this.getCenter( optionalTarget );

  	},
  	empty: function () {

  		console.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );
  		return this.isEmpty();

  	},
  	isIntersectionBox: function ( box ) {

  		console.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );
  		return this.intersectsBox( box );

  	},
  	size: function ( optionalTarget ) {

  		console.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );
  		return this.getSize( optionalTarget );

  	}
  } );

  Object.assign( Box3.prototype, {

  	center: function ( optionalTarget ) {

  		console.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );
  		return this.getCenter( optionalTarget );

  	},
  	empty: function () {

  		console.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );
  		return this.isEmpty();

  	},
  	isIntersectionBox: function ( box ) {

  		console.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );
  		return this.intersectsBox( box );

  	},
  	isIntersectionSphere: function ( sphere ) {

  		console.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
  		return this.intersectsSphere( sphere );

  	},
  	size: function ( optionalTarget ) {

  		console.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );
  		return this.getSize( optionalTarget );

  	}
  } );

  Object.assign( Sphere.prototype, {

  	empty: function () {

  		console.warn( 'THREE.Sphere: .empty() has been renamed to .isEmpty().' );
  		return this.isEmpty();

  	},

  } );

  Frustum.prototype.setFromMatrix = function ( m ) {

  	console.warn( 'THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().' );
  	return this.setFromProjectionMatrix( m );

  };

  Line3.prototype.center = function ( optionalTarget ) {

  	console.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );
  	return this.getCenter( optionalTarget );

  };

  Object.assign( MathUtils, {

  	random16: function () {

  		console.warn( 'THREE.Math: .random16() has been deprecated. Use Math.random() instead.' );
  		return Math.random();

  	},

  	nearestPowerOfTwo: function ( value ) {

  		console.warn( 'THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().' );
  		return MathUtils.floorPowerOfTwo( value );

  	},

  	nextPowerOfTwo: function ( value ) {

  		console.warn( 'THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().' );
  		return MathUtils.ceilPowerOfTwo( value );

  	}

  } );

  Object.assign( Matrix3.prototype, {

  	flattenToArrayOffset: function ( array, offset ) {

  		console.warn( "THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead." );
  		return this.toArray( array, offset );

  	},
  	multiplyVector3: function ( vector ) {

  		console.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );
  		return vector.applyMatrix3( this );

  	},
  	multiplyVector3Array: function ( /* a */ ) {

  		console.error( 'THREE.Matrix3: .multiplyVector3Array() has been removed.' );

  	},
  	applyToBufferAttribute: function ( attribute ) {

  		console.warn( 'THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.' );
  		return attribute.applyMatrix3( this );

  	},
  	applyToVector3Array: function ( /* array, offset, length */ ) {

  		console.error( 'THREE.Matrix3: .applyToVector3Array() has been removed.' );

  	}

  } );

  Object.assign( Matrix4.prototype, {

  	extractPosition: function ( m ) {

  		console.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );
  		return this.copyPosition( m );

  	},
  	flattenToArrayOffset: function ( array, offset ) {

  		console.warn( "THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead." );
  		return this.toArray( array, offset );

  	},
  	getPosition: function () {

  		console.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );
  		return new Vector3().setFromMatrixColumn( this, 3 );

  	},
  	setRotationFromQuaternion: function ( q ) {

  		console.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );
  		return this.makeRotationFromQuaternion( q );

  	},
  	multiplyToArray: function () {

  		console.warn( 'THREE.Matrix4: .multiplyToArray() has been removed.' );

  	},
  	multiplyVector3: function ( vector ) {

  		console.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
  		return vector.applyMatrix4( this );

  	},
  	multiplyVector4: function ( vector ) {

  		console.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
  		return vector.applyMatrix4( this );

  	},
  	multiplyVector3Array: function ( /* a */ ) {

  		console.error( 'THREE.Matrix4: .multiplyVector3Array() has been removed.' );

  	},
  	rotateAxis: function ( v ) {

  		console.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );
  		v.transformDirection( this );

  	},
  	crossVector: function ( vector ) {

  		console.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
  		return vector.applyMatrix4( this );

  	},
  	translate: function () {

  		console.error( 'THREE.Matrix4: .translate() has been removed.' );

  	},
  	rotateX: function () {

  		console.error( 'THREE.Matrix4: .rotateX() has been removed.' );

  	},
  	rotateY: function () {

  		console.error( 'THREE.Matrix4: .rotateY() has been removed.' );

  	},
  	rotateZ: function () {

  		console.error( 'THREE.Matrix4: .rotateZ() has been removed.' );

  	},
  	rotateByAxis: function () {

  		console.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );

  	},
  	applyToBufferAttribute: function ( attribute ) {

  		console.warn( 'THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.' );
  		return attribute.applyMatrix4( this );

  	},
  	applyToVector3Array: function ( /* array, offset, length */ ) {

  		console.error( 'THREE.Matrix4: .applyToVector3Array() has been removed.' );

  	},
  	makeFrustum: function ( left, right, bottom, top, near, far ) {

  		console.warn( 'THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.' );
  		return this.makePerspective( left, right, top, bottom, near, far );

  	}

  } );

  Plane.prototype.isIntersectionLine = function ( line ) {

  	console.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );
  	return this.intersectsLine( line );

  };

  Quaternion.prototype.multiplyVector3 = function ( vector ) {

  	console.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );
  	return vector.applyQuaternion( this );

  };

  Object.assign( Ray.prototype, {

  	isIntersectionBox: function ( box ) {

  		console.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );
  		return this.intersectsBox( box );

  	},
  	isIntersectionPlane: function ( plane ) {

  		console.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );
  		return this.intersectsPlane( plane );

  	},
  	isIntersectionSphere: function ( sphere ) {

  		console.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
  		return this.intersectsSphere( sphere );

  	}

  } );

  Object.assign( Triangle.prototype, {

  	area: function () {

  		console.warn( 'THREE.Triangle: .area() has been renamed to .getArea().' );
  		return this.getArea();

  	},
  	barycoordFromPoint: function ( point, target ) {

  		console.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );
  		return this.getBarycoord( point, target );

  	},
  	midpoint: function ( target ) {

  		console.warn( 'THREE.Triangle: .midpoint() has been renamed to .getMidpoint().' );
  		return this.getMidpoint( target );

  	},
  	normal: function ( target ) {

  		console.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );
  		return this.getNormal( target );

  	},
  	plane: function ( target ) {

  		console.warn( 'THREE.Triangle: .plane() has been renamed to .getPlane().' );
  		return this.getPlane( target );

  	}

  } );

  Object.assign( Triangle, {

  	barycoordFromPoint: function ( point, a, b, c, target ) {

  		console.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );
  		return Triangle.getBarycoord( point, a, b, c, target );

  	},
  	normal: function ( a, b, c, target ) {

  		console.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );
  		return Triangle.getNormal( a, b, c, target );

  	}

  } );

  Object.assign( Shape$1.prototype, {

  	extractAllPoints: function ( divisions ) {

  		console.warn( 'THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.' );
  		return this.extractPoints( divisions );

  	},
  	extrude: function ( options ) {

  		console.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );
  		return new ExtrudeGeometry( this, options );

  	},
  	makeGeometry: function ( options ) {

  		console.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );
  		return new ShapeGeometry( this, options );

  	}

  } );

  Object.assign( Vector2.prototype, {

  	fromAttribute: function ( attribute, index, offset ) {

  		console.warn( 'THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().' );
  		return this.fromBufferAttribute( attribute, index, offset );

  	},
  	distanceToManhattan: function ( v ) {

  		console.warn( 'THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );
  		return this.manhattanDistanceTo( v );

  	},
  	lengthManhattan: function () {

  		console.warn( 'THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().' );
  		return this.manhattanLength();

  	}

  } );

  Object.assign( Vector3.prototype, {

  	setEulerFromRotationMatrix: function () {

  		console.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );

  	},
  	setEulerFromQuaternion: function () {

  		console.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );

  	},
  	getPositionFromMatrix: function ( m ) {

  		console.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );
  		return this.setFromMatrixPosition( m );

  	},
  	getScaleFromMatrix: function ( m ) {

  		console.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );
  		return this.setFromMatrixScale( m );

  	},
  	getColumnFromMatrix: function ( index, matrix ) {

  		console.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );
  		return this.setFromMatrixColumn( matrix, index );

  	},
  	applyProjection: function ( m ) {

  		console.warn( 'THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.' );
  		return this.applyMatrix4( m );

  	},
  	fromAttribute: function ( attribute, index, offset ) {

  		console.warn( 'THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().' );
  		return this.fromBufferAttribute( attribute, index, offset );

  	},
  	distanceToManhattan: function ( v ) {

  		console.warn( 'THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );
  		return this.manhattanDistanceTo( v );

  	},
  	lengthManhattan: function () {

  		console.warn( 'THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().' );
  		return this.manhattanLength();

  	}

  } );

  Object.assign( Vector4.prototype, {

  	fromAttribute: function ( attribute, index, offset ) {

  		console.warn( 'THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().' );
  		return this.fromBufferAttribute( attribute, index, offset );

  	},
  	lengthManhattan: function () {

  		console.warn( 'THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().' );
  		return this.manhattanLength();

  	}

  } );

  //

  Object.assign( Geometry.prototype, {

  	computeTangents: function () {

  		console.error( 'THREE.Geometry: .computeTangents() has been removed.' );

  	},
  	computeLineDistances: function () {

  		console.error( 'THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.' );

  	},
  	applyMatrix: function ( matrix ) {

  		console.warn( 'THREE.Geometry: .applyMatrix() has been renamed to .applyMatrix4().' );
  		return this.applyMatrix4( matrix );

  	}

  } );

  Object.assign( Object3D.prototype, {

  	getChildByName: function ( name ) {

  		console.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );
  		return this.getObjectByName( name );

  	},
  	renderDepth: function () {

  		console.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );

  	},
  	translate: function ( distance, axis ) {

  		console.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );
  		return this.translateOnAxis( axis, distance );

  	},
  	getWorldRotation: function () {

  		console.error( 'THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.' );

  	},
  	applyMatrix: function ( matrix ) {

  		console.warn( 'THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().' );
  		return this.applyMatrix4( matrix );

  	}

  } );

  Object.defineProperties( Object3D.prototype, {

  	eulerOrder: {
  		get: function () {

  			console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
  			return this.rotation.order;

  		},
  		set: function ( value ) {

  			console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
  			this.rotation.order = value;

  		}
  	},
  	useQuaternion: {
  		get: function () {

  			console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );

  		},
  		set: function () {

  			console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );

  		}
  	}

  } );

  Object.assign( Mesh.prototype, {

  	setDrawMode: function () {

  		console.error( 'THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.' );

  	},

  } );

  Object.defineProperties( Mesh.prototype, {

  	drawMode: {
  		get: function () {

  			console.error( 'THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.' );
  			return TrianglesDrawMode;

  		},
  		set: function () {

  			console.error( 'THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.' );

  		}
  	}

  } );

  Object.defineProperties( LOD.prototype, {

  	objects: {
  		get: function () {

  			console.warn( 'THREE.LOD: .objects has been renamed to .levels.' );
  			return this.levels;

  		}
  	}

  } );

  Object.defineProperty( Skeleton.prototype, 'useVertexTexture', {

  	get: function () {

  		console.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );

  	},
  	set: function () {

  		console.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );

  	}

  } );

  SkinnedMesh.prototype.initBones = function () {

  	console.error( 'THREE.SkinnedMesh: initBones() has been removed.' );

  };

  Object.defineProperty( Curve.prototype, '__arcLengthDivisions', {

  	get: function () {

  		console.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );
  		return this.arcLengthDivisions;

  	},
  	set: function ( value ) {

  		console.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );
  		this.arcLengthDivisions = value;

  	}

  } );

  //

  PerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {

  	console.warn( "THREE.PerspectiveCamera.setLens is deprecated. " +
  			"Use .setFocalLength and .filmGauge for a photographic setup." );

  	if ( filmGauge !== undefined ) { this.filmGauge = filmGauge; }
  	this.setFocalLength( focalLength );

  };

  //

  Object.defineProperties( Light.prototype, {
  	onlyShadow: {
  		set: function () {

  			console.warn( 'THREE.Light: .onlyShadow has been removed.' );

  		}
  	},
  	shadowCameraFov: {
  		set: function ( value ) {

  			console.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );
  			this.shadow.camera.fov = value;

  		}
  	},
  	shadowCameraLeft: {
  		set: function ( value ) {

  			console.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );
  			this.shadow.camera.left = value;

  		}
  	},
  	shadowCameraRight: {
  		set: function ( value ) {

  			console.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );
  			this.shadow.camera.right = value;

  		}
  	},
  	shadowCameraTop: {
  		set: function ( value ) {

  			console.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );
  			this.shadow.camera.top = value;

  		}
  	},
  	shadowCameraBottom: {
  		set: function ( value ) {

  			console.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );
  			this.shadow.camera.bottom = value;

  		}
  	},
  	shadowCameraNear: {
  		set: function ( value ) {

  			console.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );
  			this.shadow.camera.near = value;

  		}
  	},
  	shadowCameraFar: {
  		set: function ( value ) {

  			console.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );
  			this.shadow.camera.far = value;

  		}
  	},
  	shadowCameraVisible: {
  		set: function () {

  			console.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );

  		}
  	},
  	shadowBias: {
  		set: function ( value ) {

  			console.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );
  			this.shadow.bias = value;

  		}
  	},
  	shadowDarkness: {
  		set: function () {

  			console.warn( 'THREE.Light: .shadowDarkness has been removed.' );

  		}
  	},
  	shadowMapWidth: {
  		set: function ( value ) {

  			console.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );
  			this.shadow.mapSize.width = value;

  		}
  	},
  	shadowMapHeight: {
  		set: function ( value ) {

  			console.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );
  			this.shadow.mapSize.height = value;

  		}
  	}
  } );

  //

  Object.defineProperties( BufferAttribute.prototype, {

  	length: {
  		get: function () {

  			console.warn( 'THREE.BufferAttribute: .length has been deprecated. Use .count instead.' );
  			return this.array.length;

  		}
  	},
  	dynamic: {
  		get: function () {

  			console.warn( 'THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.' );
  			return this.usage === DynamicDrawUsage;

  		},
  		set: function ( /* value */ ) {

  			console.warn( 'THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.' );
  			this.setUsage( DynamicDrawUsage );

  		}
  	}

  } );

  Object.assign( BufferAttribute.prototype, {
  	setDynamic: function ( value ) {

  		console.warn( 'THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.' );
  		this.setUsage( value === true ? DynamicDrawUsage : StaticDrawUsage );
  		return this;

  	},
  	copyIndicesArray: function ( /* indices */ ) {

  		console.error( 'THREE.BufferAttribute: .copyIndicesArray() has been removed.' );

  	},
  	setArray: function ( /* array */ ) {

  		console.error( 'THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers' );

  	}
  } );

  Object.assign( BufferGeometry.prototype, {

  	addIndex: function ( index ) {

  		console.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );
  		this.setIndex( index );

  	},
  	addAttribute: function ( name, attribute ) {

  		console.warn( 'THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().' );

  		if ( ! ( attribute && attribute.isBufferAttribute ) && ! ( attribute && attribute.isInterleavedBufferAttribute ) ) {

  			console.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );

  			return this.setAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );

  		}

  		if ( name === 'index' ) {

  			console.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );
  			this.setIndex( attribute );

  			return this;

  		}

  		return this.setAttribute( name, attribute );

  	},
  	addDrawCall: function ( start, count, indexOffset ) {

  		if ( indexOffset !== undefined ) {

  			console.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );

  		}

  		console.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );
  		this.addGroup( start, count );

  	},
  	clearDrawCalls: function () {

  		console.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );
  		this.clearGroups();

  	},
  	computeTangents: function () {

  		console.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );

  	},
  	computeOffsets: function () {

  		console.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );

  	},
  	removeAttribute: function ( name ) {

  		console.warn( 'THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().' );

  		return this.deleteAttribute( name );

  	},
  	applyMatrix: function ( matrix ) {

  		console.warn( 'THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().' );
  		return this.applyMatrix4( matrix );

  	}

  } );

  Object.defineProperties( BufferGeometry.prototype, {

  	drawcalls: {
  		get: function () {

  			console.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );
  			return this.groups;

  		}
  	},
  	offsets: {
  		get: function () {

  			console.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );
  			return this.groups;

  		}
  	}

  } );

  Object.defineProperties( InstancedBufferGeometry.prototype, {

  	maxInstancedCount: {
  		get: function () {

  			console.warn( 'THREE.InstancedBufferGeometry: .maxInstancedCount has been renamed to .instanceCount.' );
  			return this.instanceCount;

  		},
  		set: function ( value ) {

  			console.warn( 'THREE.InstancedBufferGeometry: .maxInstancedCount has been renamed to .instanceCount.' );
  			this.instanceCount = value;

  		}
  	}

  } );

  Object.defineProperties( Raycaster.prototype, {

  	linePrecision: {
  		get: function () {

  			console.warn( 'THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead.' );
  			return this.params.Line.threshold;

  		},
  		set: function ( value ) {

  			console.warn( 'THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead.' );
  			this.params.Line.threshold = value;

  		}
  	}

  } );

  Object.defineProperties( InterleavedBuffer.prototype, {

  	dynamic: {
  		get: function () {

  			console.warn( 'THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.' );
  			return this.usage === DynamicDrawUsage;

  		},
  		set: function ( value ) {

  			console.warn( 'THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.' );
  			this.setUsage( value );

  		}
  	}

  } );

  Object.assign( InterleavedBuffer.prototype, {
  	setDynamic: function ( value ) {

  		console.warn( 'THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.' );
  		this.setUsage( value === true ? DynamicDrawUsage : StaticDrawUsage );
  		return this;

  	},
  	setArray: function ( /* array */ ) {

  		console.error( 'THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers' );

  	}
  } );

  //

  Object.assign( ExtrudeBufferGeometry.prototype, {

  	getArrays: function () {

  		console.error( 'THREE.ExtrudeBufferGeometry: .getArrays() has been removed.' );

  	},

  	addShapeList: function () {

  		console.error( 'THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.' );

  	},

  	addShape: function () {

  		console.error( 'THREE.ExtrudeBufferGeometry: .addShape() has been removed.' );

  	}

  } );

  //

  Object.defineProperties( Uniform.prototype, {

  	dynamic: {
  		set: function () {

  			console.warn( 'THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.' );

  		}
  	},
  	onUpdate: {
  		value: function () {

  			console.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );
  			return this;

  		}
  	}

  } );

  //

  Object.defineProperties( Material.prototype, {

  	wrapAround: {
  		get: function () {

  			console.warn( 'THREE.Material: .wrapAround has been removed.' );

  		},
  		set: function () {

  			console.warn( 'THREE.Material: .wrapAround has been removed.' );

  		}
  	},

  	overdraw: {
  		get: function () {

  			console.warn( 'THREE.Material: .overdraw has been removed.' );

  		},
  		set: function () {

  			console.warn( 'THREE.Material: .overdraw has been removed.' );

  		}
  	},

  	wrapRGB: {
  		get: function () {

  			console.warn( 'THREE.Material: .wrapRGB has been removed.' );
  			return new Color();

  		}
  	},

  	shading: {
  		get: function () {

  			console.error( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );

  		},
  		set: function ( value ) {

  			console.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );
  			this.flatShading = ( value === FlatShading );

  		}
  	},

  	stencilMask: {
  		get: function () {

  			console.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );
  			return this.stencilFuncMask;

  		},
  		set: function ( value ) {

  			console.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );
  			this.stencilFuncMask = value;

  		}
  	}

  } );

  Object.defineProperties( MeshPhongMaterial.prototype, {

  	metal: {
  		get: function () {

  			console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );
  			return false;

  		},
  		set: function () {

  			console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );

  		}
  	}

  } );

  Object.defineProperties( ShaderMaterial.prototype, {

  	derivatives: {
  		get: function () {

  			console.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
  			return this.extensions.derivatives;

  		},
  		set: function ( value ) {

  			console.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
  			this.extensions.derivatives = value;

  		}
  	}

  } );

  //

  Object.assign( WebGLRenderer.prototype, {

  	clearTarget: function ( renderTarget, color, depth, stencil ) {

  		console.warn( 'THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.' );
  		this.setRenderTarget( renderTarget );
  		this.clear( color, depth, stencil );

  	},
  	animate: function ( callback ) {

  		console.warn( 'THREE.WebGLRenderer: .animate() is now .setAnimationLoop().' );
  		this.setAnimationLoop( callback );

  	},
  	getCurrentRenderTarget: function () {

  		console.warn( 'THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().' );
  		return this.getRenderTarget();

  	},
  	getMaxAnisotropy: function () {

  		console.warn( 'THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().' );
  		return this.capabilities.getMaxAnisotropy();

  	},
  	getPrecision: function () {

  		console.warn( 'THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.' );
  		return this.capabilities.precision;

  	},
  	resetGLState: function () {

  		console.warn( 'THREE.WebGLRenderer: .resetGLState() is now .state.reset().' );
  		return this.state.reset();

  	},
  	supportsFloatTextures: function () {

  		console.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \'OES_texture_float\' ).' );
  		return this.extensions.get( 'OES_texture_float' );

  	},
  	supportsHalfFloatTextures: function () {

  		console.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \'OES_texture_half_float\' ).' );
  		return this.extensions.get( 'OES_texture_half_float' );

  	},
  	supportsStandardDerivatives: function () {

  		console.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \'OES_standard_derivatives\' ).' );
  		return this.extensions.get( 'OES_standard_derivatives' );

  	},
  	supportsCompressedTextureS3TC: function () {

  		console.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \'WEBGL_compressed_texture_s3tc\' ).' );
  		return this.extensions.get( 'WEBGL_compressed_texture_s3tc' );

  	},
  	supportsCompressedTexturePVRTC: function () {

  		console.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \'WEBGL_compressed_texture_pvrtc\' ).' );
  		return this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );

  	},
  	supportsBlendMinMax: function () {

  		console.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \'EXT_blend_minmax\' ).' );
  		return this.extensions.get( 'EXT_blend_minmax' );

  	},
  	supportsVertexTextures: function () {

  		console.warn( 'THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.' );
  		return this.capabilities.vertexTextures;

  	},
  	supportsInstancedArrays: function () {

  		console.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \'ANGLE_instanced_arrays\' ).' );
  		return this.extensions.get( 'ANGLE_instanced_arrays' );

  	},
  	enableScissorTest: function ( boolean ) {

  		console.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );
  		this.setScissorTest( boolean );

  	},
  	initMaterial: function () {

  		console.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );

  	},
  	addPrePlugin: function () {

  		console.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );

  	},
  	addPostPlugin: function () {

  		console.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );

  	},
  	updateShadowMap: function () {

  		console.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );

  	},
  	setFaceCulling: function () {

  		console.warn( 'THREE.WebGLRenderer: .setFaceCulling() has been removed.' );

  	},
  	allocTextureUnit: function () {

  		console.warn( 'THREE.WebGLRenderer: .allocTextureUnit() has been removed.' );

  	},
  	setTexture: function () {

  		console.warn( 'THREE.WebGLRenderer: .setTexture() has been removed.' );

  	},
  	setTexture2D: function () {

  		console.warn( 'THREE.WebGLRenderer: .setTexture2D() has been removed.' );

  	},
  	setTextureCube: function () {

  		console.warn( 'THREE.WebGLRenderer: .setTextureCube() has been removed.' );

  	},
  	getActiveMipMapLevel: function () {

  		console.warn( 'THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().' );
  		return this.getActiveMipmapLevel();

  	}

  } );

  Object.defineProperties( WebGLRenderer.prototype, {

  	shadowMapEnabled: {
  		get: function () {

  			return this.shadowMap.enabled;

  		},
  		set: function ( value ) {

  			console.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );
  			this.shadowMap.enabled = value;

  		}
  	},
  	shadowMapType: {
  		get: function () {

  			return this.shadowMap.type;

  		},
  		set: function ( value ) {

  			console.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );
  			this.shadowMap.type = value;

  		}
  	},
  	shadowMapCullFace: {
  		get: function () {

  			console.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );
  			return undefined;

  		},
  		set: function ( /* value */ ) {

  			console.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );

  		}
  	},
  	context: {
  		get: function () {

  			console.warn( 'THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.' );
  			return this.getContext();

  		}
  	},
  	vr: {
  		get: function () {

  			console.warn( 'THREE.WebGLRenderer: .vr has been renamed to .xr' );
  			return this.xr;

  		}
  	},
  	gammaInput: {
  		get: function () {

  			console.warn( 'THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.' );
  			return false;

  		},
  		set: function () {

  			console.warn( 'THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.' );

  		}
  	},
  	gammaOutput: {
  		get: function () {

  			console.warn( 'THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.' );
  			return false;

  		},
  		set: function ( value ) {

  			console.warn( 'THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.' );
  			this.outputEncoding = ( value === true ) ? sRGBEncoding : LinearEncoding;

  		}
  	},
  	toneMappingWhitePoint: {
  		get: function () {

  			console.warn( 'THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.' );
  			return 1.0;

  		},
  		set: function () {

  			console.warn( 'THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.' );

  		}
  	},

  } );

  Object.defineProperties( WebGLShadowMap.prototype, {

  	cullFace: {
  		get: function () {

  			console.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );
  			return undefined;

  		},
  		set: function ( /* cullFace */ ) {

  			console.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );

  		}
  	},
  	renderReverseSided: {
  		get: function () {

  			console.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );
  			return undefined;

  		},
  		set: function () {

  			console.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );

  		}
  	},
  	renderSingleSided: {
  		get: function () {

  			console.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );
  			return undefined;

  		},
  		set: function () {

  			console.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );

  		}
  	}

  } );

  //

  Object.defineProperties( WebGLRenderTarget.prototype, {

  	wrapS: {
  		get: function () {

  			console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
  			return this.texture.wrapS;

  		},
  		set: function ( value ) {

  			console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
  			this.texture.wrapS = value;

  		}
  	},
  	wrapT: {
  		get: function () {

  			console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
  			return this.texture.wrapT;

  		},
  		set: function ( value ) {

  			console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
  			this.texture.wrapT = value;

  		}
  	},
  	magFilter: {
  		get: function () {

  			console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
  			return this.texture.magFilter;

  		},
  		set: function ( value ) {

  			console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
  			this.texture.magFilter = value;

  		}
  	},
  	minFilter: {
  		get: function () {

  			console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
  			return this.texture.minFilter;

  		},
  		set: function ( value ) {

  			console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
  			this.texture.minFilter = value;

  		}
  	},
  	anisotropy: {
  		get: function () {

  			console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
  			return this.texture.anisotropy;

  		},
  		set: function ( value ) {

  			console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
  			this.texture.anisotropy = value;

  		}
  	},
  	offset: {
  		get: function () {

  			console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
  			return this.texture.offset;

  		},
  		set: function ( value ) {

  			console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
  			this.texture.offset = value;

  		}
  	},
  	repeat: {
  		get: function () {

  			console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
  			return this.texture.repeat;

  		},
  		set: function ( value ) {

  			console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
  			this.texture.repeat = value;

  		}
  	},
  	format: {
  		get: function () {

  			console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
  			return this.texture.format;

  		},
  		set: function ( value ) {

  			console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
  			this.texture.format = value;

  		}
  	},
  	type: {
  		get: function () {

  			console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
  			return this.texture.type;

  		},
  		set: function ( value ) {

  			console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
  			this.texture.type = value;

  		}
  	},
  	generateMipmaps: {
  		get: function () {

  			console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
  			return this.texture.generateMipmaps;

  		},
  		set: function ( value ) {

  			console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
  			this.texture.generateMipmaps = value;

  		}
  	}

  } );

  //

  Object.defineProperties( Audio.prototype, {

  	load: {
  		value: function ( file ) {

  			console.warn( 'THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.' );
  			var scope = this;
  			var audioLoader = new AudioLoader();
  			audioLoader.load( file, function ( buffer ) {

  				scope.setBuffer( buffer );

  			} );
  			return this;

  		}
  	},
  	startTime: {
  		set: function () {

  			console.warn( 'THREE.Audio: .startTime is now .play( delay ).' );

  		}
  	}

  } );

  AudioAnalyser.prototype.getData = function () {

  	console.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );
  	return this.getFrequencyData();

  };

  //

  CubeCamera.prototype.updateCubeMap = function ( renderer, scene ) {

  	console.warn( 'THREE.CubeCamera: .updateCubeMap() is now .update().' );
  	return this.update( renderer, scene );

  };

  ImageUtils.crossOrigin = undefined;

  ImageUtils.loadTexture = function ( url, mapping, onLoad, onError ) {

  	console.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );

  	var loader = new TextureLoader();
  	loader.setCrossOrigin( this.crossOrigin );

  	var texture = loader.load( url, onLoad, undefined, onError );

  	if ( mapping ) { texture.mapping = mapping; }

  	return texture;

  };

  ImageUtils.loadTextureCube = function ( urls, mapping, onLoad, onError ) {

  	console.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );

  	var loader = new CubeTextureLoader();
  	loader.setCrossOrigin( this.crossOrigin );

  	var texture = loader.load( urls, onLoad, undefined, onError );

  	if ( mapping ) { texture.mapping = mapping; }

  	return texture;

  };

  ImageUtils.loadCompressedTexture = function () {

  	console.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );

  };

  ImageUtils.loadCompressedTextureCube = function () {

  	console.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );

  };

  if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {

  	/* eslint-disable no-undef */
  	__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'register', { detail: {
  		revision: REVISION,
  	} } ) );
  	/* eslint-enable no-undef */

  }

  /**
   * @file Utils
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function getQuery(id) {
      if (typeof window === 'undefined')
          { return undefined; }
      var a = new RegExp((id + "=([^&#=]*)"));
      var m = a.exec(window.location.search);
      if (m) {
          return decodeURIComponent(m[1]);
      }
      else {
          return undefined;
      }
  }
  function boolean(value) {
      if (!value) {
          return false;
      }
      if (typeof value === 'string') {
          return /^1|true|t|yes|y$/i.test(value);
      }
      return true;
  }
  function defaults(value, defaultValue) {
      return value !== undefined ? value : defaultValue;
  }
  function createParams(params, defaultParams) {
      var o = Object.assign({}, params);
      for (var k in defaultParams) {
          var value = params[k];
          if (value === undefined)
              { o[k] = defaultParams[k]; }
      }
      return o;
  }
  function updateParams(params, newParams) {
      for (var k in newParams) {
          var value = newParams[k];
          if (value !== undefined)
              { params[k] = value; }
      }
      return params;
  }
  function flatten(array, ret) {
      ret = defaults(ret, []);
      for (var i = 0; i < array.length; i++) {
          if (Array.isArray(array[i])) {
              flatten(array[i], ret);
          }
          else {
              ret.push(array[i]);
          }
      }
      return ret;
  }
  function getProtocol() {
      var protocol = window.location.protocol;
      return protocol.match(/http(s)?:/gi) === null ? 'http:' : protocol;
  }
  function getBrowser() {
      if (typeof window === 'undefined')
          { return false; }
      var ua = window.navigator.userAgent;
      if (/Opera|OPR/.test(ua)) {
          return 'Opera';
      }
      else if (/Chrome/i.test(ua)) {
          return 'Chrome';
      }
      else if (/Firefox/i.test(ua)) {
          return 'Firefox';
      }
      else if (/Mobile(\/.*)? Safari/i.test(ua)) {
          return 'Mobile Safari';
      }
      else if (/MSIE/i.test(ua)) {
          return 'Internet Explorer';
      }
      else if (/Safari/i.test(ua)) {
          return 'Safari';
      }
      return false;
  }
  function getAbsolutePath(relativePath) {
      var loc = window.location;
      var pn = loc.pathname;
      var basePath = pn.substring(0, pn.lastIndexOf('/') + 1);
      return loc.origin + basePath + relativePath;
  }
  function openUrl(url) {
      var opened = window.open(url, '_blank');
      if (!opened) {
          window.location.href = url;
      }
  }
  function download(data, downloadName) {
      if ( downloadName === void 0 ) downloadName = 'download';

      // using ideas from https://github.com/eligrey/FileSaver.js/blob/master/FileSaver.js
      if (!data)
          { return; }
      var isSafari = getBrowser() === 'Safari';
      var isChromeIos = /CriOS\/[\d]+/.test(window.navigator.userAgent);
      var a = document.createElement('a');
      function open(str) {
          openUrl(isChromeIos ? str : str.replace(/^data:[^;]*;/, 'data:attachment/file;'));
      }
      if (typeof navigator !== 'undefined' && navigator.msSaveOrOpenBlob) {
          // native saveAs in IE 10+
          navigator.msSaveOrOpenBlob(data, downloadName);
      }
      else if ((isSafari || isChromeIos) && FileReader) {
          if (data instanceof Blob) {
              // no downloading of blob urls in Safari
              var reader = new FileReader();
              reader.onloadend = function () {
                  open(reader.result);
              };
              reader.readAsDataURL(data);
          }
          else {
              open(data);
          }
      }
      else {
          var objectUrlCreated = false;
          if (data instanceof Blob) {
              data = URL.createObjectURL(data);
              objectUrlCreated = true;
          }
          if ('download' in a) {
              // download link available
              a.style.display = 'hidden';
              document.body.appendChild(a);
              a.href = data;
              a.download = downloadName;
              a.target = '_blank';
              a.click();
              document.body.removeChild(a);
          }
          else {
              openUrl(data);
          }
          if (objectUrlCreated) {
              window.URL.revokeObjectURL(data);
          }
      }
  }
  function throttle(func, wait, options) {
      // from http://underscorejs.org/docs/underscore.html
      var context;
      var args;
      var result;
      var timeout = null;
      var previous = 0;
      if (!options)
          { options = {}; }
      function later() {
          previous = options.leading === false ? 0 : Date.now();
          timeout = null;
          result = func.apply(context, args);
          if (!timeout)
              { context = args = null; }
      }
      return function throttle() {
          var now = Date.now();
          if (!previous && options.leading === false)
              { previous = now; }
          var remaining = wait - (now - previous);
          context = this;
          args = arguments;
          if (remaining <= 0 || remaining > wait) {
              if (timeout) {
                  clearTimeout(timeout);
                  timeout = null;
              }
              previous = now;
              result = func.apply(context, args);
              if (!timeout)
                  { context = args = null; }
          }
          else if (!timeout && options.trailing !== false) {
              timeout = setTimeout(later, remaining);
          }
          return result;
      };
  }
  function lexicographicCompare(elm1, elm2) {
      if (elm1 < elm2)
          { return -1; }
      if (elm1 > elm2)
          { return 1; }
      return 0;
  }
  /**
   * Does a binary search to get the index of an element in the input array
   * @function
   * @example
   * var array = [ 1, 2, 3, 4, 5, 6 ];
   * var element = 4;
   * binarySearchIndexOf( array, element );  // returns 3
   *
   * @param {Array} array - sorted array
   * @param {Anything} element - element to search for in the array
   * @param {Function} [compareFunction] - compare function
   * @return {Number} the index of the element or -1 if not in the array
   */
  function binarySearchIndexOf(array, element, compareFunction) {
      if ( compareFunction === void 0 ) compareFunction = lexicographicCompare;

      var low = 0;
      var high = array.length - 1;
      while (low <= high) {
          var mid = (low + high) >> 1;
          var cmp = compareFunction(element, array[mid]);
          if (cmp > 0) {
              low = mid + 1;
          }
          else if (cmp < 0) {
              high = mid - 1;
          }
          else {
              return mid;
          }
      }
      return -low - 1;
  }
  function binarySearchForLeftRange(array, leftRange) {
      var high = array.length - 1;
      if (array[high] < leftRange)
          { return -1; }
      var low = 0;
      while (low <= high) {
          var mid = (low + high) >> 1;
          if (array[mid] >= leftRange) {
              high = mid - 1;
          }
          else {
              low = mid + 1;
          }
      }
      return high + 1;
  }
  function binarySearchForRightRange(array, rightRange) {
      if (array[0] > rightRange)
          { return -1; }
      var low = 0;
      var high = array.length - 1;
      while (low <= high) {
          var mid = (low + high) >> 1;
          if (array[mid] > rightRange) {
              high = mid - 1;
          }
          else {
              low = mid + 1;
          }
      }
      return low - 1;
  }
  function rangeInSortedArray(array, min, max) {
      var indexLeft = binarySearchForLeftRange(array, min);
      var indexRight = binarySearchForRightRange(array, max);
      if (indexLeft === -1 || indexRight === -1 || indexLeft > indexRight) {
          return 0;
      }
      else {
          return indexRight - indexLeft + 1;
      }
  }
  function uniqueArray(array) {
      return array.sort().filter(function (value, index, sorted) {
          return (index === 0) || (value !== sorted[index - 1]);
      });
  }
  // String/arraybuffer conversion
  function uint8ToString(u8a) {
      var chunkSize = 0x7000;
      if (u8a.length > chunkSize) {
          var c = [];
          for (var i = 0; i < u8a.length; i += chunkSize) {
              c.push(String.fromCharCode.apply(null, u8a.subarray(i, i + chunkSize)));
          }
          return c.join('');
      }
      else {
          return String.fromCharCode.apply(null, u8a);
      }
  }
  function uint8ToLines(u8a, chunkSize, newline) {
      if ( chunkSize === void 0 ) chunkSize = 1024 * 1024 * 10;
      if ( newline === void 0 ) newline = '\n';

      var partialLine = '';
      var lines = [];
      for (var i = 0; i < u8a.length; i += chunkSize) {
          var str = uint8ToString(u8a.subarray(i, i + chunkSize));
          var idx = str.lastIndexOf(newline);
          if (idx === -1) {
              partialLine += str;
          }
          else {
              var str2 = partialLine + str.substr(0, idx);
              lines = lines.concat(str2.split(newline));
              if (idx === str.length - newline.length) {
                  partialLine = '';
              }
              else {
                  partialLine = str.substr(idx + newline.length);
              }
          }
      }
      if (partialLine !== '') {
          lines.push(partialLine);
      }
      return lines;
  }
  function getTypedArray(arrayType, arraySize) {
      switch (arrayType) {
          case 'int8':
              return new Int8Array(arraySize);
          case 'int16':
              return new Int16Array(arraySize);
          case 'int32':
              return new Int32Array(arraySize);
          case 'uint8':
              return new Uint8Array(arraySize);
          case 'uint16':
              return new Uint16Array(arraySize);
          case 'uint32':
              return new Uint32Array(arraySize);
          case 'float32':
              return new Float32Array(arraySize);
          default:
              throw new Error('arrayType unknown: ' + arrayType);
      }
  }
  function getUintArray(sizeOrArray, maxUint) {
      var TypedArray = maxUint > 65535 ? Uint32Array : Uint16Array;
      return new TypedArray(sizeOrArray);
  }
  function ensureArray$1(value) {
      return Array.isArray(value) ? value : [value];
  }
  function ensureBuffer(a) {
      return (a.buffer && a.buffer instanceof ArrayBuffer) ? a.buffer : a;
  }
  function _ensureClassFromArg(arg, constructor) {
      return arg instanceof constructor ? arg : new constructor(arg);
  }
  function _ensureClassFromArray(array, constructor) {
      if (array === undefined) {
          array = new constructor();
      }
      else if (Array.isArray(array)) {
          array = new constructor().fromArray(array);
      }
      return array;
  }
  function ensureVector2(v) {
      return _ensureClassFromArray(v, Vector2);
  }
  function ensureVector3(v) {
      return _ensureClassFromArray(v, Vector3);
  }
  function ensureMatrix4(m) {
      return _ensureClassFromArray(m, Matrix4);
  }
  function ensureQuaternion(q) {
      return _ensureClassFromArray(q, Quaternion);
  }
  function ensureFloat32Array(a) {
      return _ensureClassFromArg(a, Float32Array);
  }
  function createRingBuffer(length) {
      var pointer = 0;
      var count = 0;
      var buffer = [];
      return {
          has: function (value) { return buffer.indexOf(value) !== -1; },
          get: function (idx) { return buffer[idx]; },
          push: function (item) {
              buffer[pointer] = item;
              pointer = (length + pointer + 1) % length;
              ++count;
          },
          get count() { return count; },
          get data() { return buffer.slice(0, Math.min(count, length)); },
          clear: function () {
              count = 0;
              pointer = 0;
              buffer.length = 0;
          }
      };
  }
  function createSimpleDict() {
      var set = {};
      return {
          has: function (k) { return set[JSON.stringify(k)] !== undefined; },
          add: function (k, v) { set[JSON.stringify(k)] = v; },
          del: function (k) { delete set[JSON.stringify(k)]; },
          get values() { return Object.keys(set).map(function (k) { return set[k]; }); }
      };
  }

  /**
   * @file Registry
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function toLowerCaseString(value) {
      return defaults(value, '').toString().toLowerCase();
  }
  var Registry = function Registry(name) {
      this.name = name;
      this._dict = {};
  };

  var prototypeAccessors$z = { names: { configurable: true } };
  Registry.prototype.add = function add (key, value) {
      this._dict[toLowerCaseString(key)] = value;
  };
  Registry.prototype.get = function get (key) {
      return this._dict[toLowerCaseString(key)];
  };
  prototypeAccessors$z.names.get = function () {
      return Object.keys(this._dict);
  };

  Object.defineProperties( Registry.prototype, prototypeAccessors$z );

  /**
   * @file Math Utils
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function degToRad(deg) {
      return deg * 0.01745; // deg * Math.PI / 180
  }
  function radToDeg(rad) {
      return rad * 57.29578; // rad * 180 / Math.PI
  }
  // http://www.broofa.com/Tools/Math.uuid.htm
  var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');
  var uuid = new Array(36);
  function generateUUID() {
      var rnd = 0;
      var r;
      for (var i = 0; i < 36; i++) {
          if (i === 8 || i === 13 || i === 18 || i === 23) {
              uuid[i] = '-';
          }
          else if (i === 14) {
              uuid[i] = '4';
          }
          else {
              if (rnd <= 0x02)
                  { rnd = 0x2000000 + (Math.random() * 0x1000000) | 0; }
              r = rnd & 0xf;
              rnd = rnd >> 4;
              uuid[i] = chars[(i === 19) ? (r & 0x3) | 0x8 : r];
          }
      }
      return uuid.join('');
  }
  function countSetBits(i) {
      i = i - ((i >> 1) & 0x55555555);
      i = (i & 0x33333333) + ((i >> 2) & 0x33333333);
      return (((i + (i >> 4)) & 0x0F0F0F0F) * 0x01010101) >> 24;
  }
  function normalize(value, min, max) {
      return (value - min) / (max - min);
  }
  function clamp(value, min, max) {
      return Math.max(min, Math.min(max, value));
  }
  function pclamp(value) {
      return clamp(value, 0, 100);
  }
  function saturate(value) {
      return clamp(value, 0, 1);
  }
  function lerp(start, stop, alpha) {
      return start + (stop - start) * alpha;
  }
  function spline(p0, p1, p2, p3, t, tension) {
      var v0 = (p2 - p0) * tension;
      var v1 = (p3 - p1) * tension;
      var t2 = t * t;
      var t3 = t * t2;
      return (2 * p1 - 2 * p2 + v0 + v1) * t3 +
          (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 +
          v0 * t + p1;
  }
  function smoothstep(min, max, x) {
      x = saturate(normalize(x, min, max));
      return x * x * (3 - 2 * x);
  }
  function almostIdentity(value, start, stop) {
      if (value > start)
          { return value; }
      var a = 2 * stop - start;
      var b = 2 * start - 3 * stop;
      var t = value / start;
      return (a * t + b) * t * t + stop;
  }

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function createCommonjsModule(fn) {
    var module = { exports: {} };
  	return fn(module, module.exports), module.exports;
  }

  var chroma = createCommonjsModule(function (module, exports) {
  /**
   * @license
   *
   * chroma.js - JavaScript library for color conversions
   * 
   * Copyright (c) 2011-2017, Gregor Aisch
   * All rights reserved.
   * 
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions are met:
   * 
   * 1. Redistributions of source code must retain the above copyright notice, this
   *    list of conditions and the following disclaimer.
   * 
   * 2. Redistributions in binary form must reproduce the above copyright notice,
   *    this list of conditions and the following disclaimer in the documentation
   *    and/or other materials provided with the distribution.
   * 
   * 3. The name Gregor Aisch may not be used to endorse or promote products
   *    derived from this software without specific prior written permission.
   * 
   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
   * DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
   * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
   * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
   * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   *
   */

  (function() {
    var Color, DEG2RAD, LAB_CONSTANTS, PI, PITHIRD, RAD2DEG, TWOPI, _average_lrgb, _guess_formats, _guess_formats_sorted, _input, _interpolators, abs, atan2, bezier, blend, blend_f, brewer, burn, chroma, clip_rgb, cmyk2rgb, cos, css2rgb, darken, dodge, each, floor, hcg2rgb, hex2rgb, hsi2rgb, hsl2css, hsl2rgb, hsv2rgb, interpolate, interpolate_hsx, interpolate_lab, interpolate_lrgb, interpolate_num, interpolate_rgb, lab2lch, lab2rgb, lab_xyz, lch2lab, lch2rgb, lighten, limit, log, luminance_x, m, max, multiply, normal, num2rgb, overlay, pow, rgb2cmyk, rgb2css, rgb2hcg, rgb2hex, rgb2hsi, rgb2hsl, rgb2hsv, rgb2lab, rgb2lch, rgb2luminance, rgb2num, rgb2temperature, rgb2xyz, rgb_xyz, rnd, root, round, screen, sin, sqrt, temperature2rgb, type, unpack, w3cx11, xyz_lab, xyz_rgb,
      slice = [].slice;

    type = (function() {

      /*
      for browser-safe type checking+
      ported from jQuery's $.type
       */
      var classToType, len, name, o, ref;
      classToType = {};
      ref = "Boolean Number String Function Array Date RegExp Undefined Null".split(" ");
      for (o = 0, len = ref.length; o < len; o++) {
        name = ref[o];
        classToType["[object " + name + "]"] = name.toLowerCase();
      }
      return function(obj) {
        var strType;
        strType = Object.prototype.toString.call(obj);
        return classToType[strType] || "object";
      };
    })();

    limit = function(x, min, max) {
      if (min == null) {
        min = 0;
      }
      if (max == null) {
        max = 1;
      }
      if (x < min) {
        x = min;
      }
      if (x > max) {
        x = max;
      }
      return x;
    };

    unpack = function(args) {
      if (args.length >= 3) {
        return Array.prototype.slice.call(args);
      } else {
        return args[0];
      }
    };

    clip_rgb = function(rgb) {
      var i, o;
      rgb._clipped = false;
      rgb._unclipped = rgb.slice(0);
      for (i = o = 0; o < 3; i = ++o) {
        if (i < 3) {
          if (rgb[i] < 0 || rgb[i] > 255) {
            rgb._clipped = true;
          }
          if (rgb[i] < 0) {
            rgb[i] = 0;
          }
          if (rgb[i] > 255) {
            rgb[i] = 255;
          }
        } else if (i === 3) {
          if (rgb[i] < 0) {
            rgb[i] = 0;
          }
          if (rgb[i] > 1) {
            rgb[i] = 1;
          }
        }
      }
      if (!rgb._clipped) {
        delete rgb._unclipped;
      }
      return rgb;
    };

    PI = Math.PI, round = Math.round, cos = Math.cos, floor = Math.floor, pow = Math.pow, log = Math.log, sin = Math.sin, sqrt = Math.sqrt, atan2 = Math.atan2, max = Math.max, abs = Math.abs;

    TWOPI = PI * 2;

    PITHIRD = PI / 3;

    DEG2RAD = PI / 180;

    RAD2DEG = 180 / PI;

    chroma = function() {
      if (arguments[0] instanceof Color) {
        return arguments[0];
      }
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(Color, arguments, function(){});
    };

    chroma["default"] = chroma;

    _interpolators = [];

    if ((module !== null) && (module.exports != null)) {
      module.exports = chroma;
    }

    {
      root = exports !== null ? exports : this;
      root.chroma = chroma;
    }

    chroma.version = '1.4.1';

    _input = {};

    _guess_formats = [];

    _guess_formats_sorted = false;

    Color = (function() {
      function Color() {
        var arguments$1 = arguments;

        var arg, args, chk, len, len1, me, mode, o, w;
        me = this;
        args = [];
        for (o = 0, len = arguments.length; o < len; o++) {
          arg = arguments$1[o];
          if (arg != null) {
            args.push(arg);
          }
        }
        if (args.length > 1) {
          mode = args[args.length - 1];
        }
        if (_input[mode] != null) {
          me._rgb = clip_rgb(_input[mode](unpack(args.slice(0, -1))));
        } else {
          if (!_guess_formats_sorted) {
            _guess_formats = _guess_formats.sort(function(a, b) {
              return b.p - a.p;
            });
            _guess_formats_sorted = true;
          }
          for (w = 0, len1 = _guess_formats.length; w < len1; w++) {
            chk = _guess_formats[w];
            mode = chk.test.apply(chk, args);
            if (mode) {
              break;
            }
          }
          if (mode) {
            me._rgb = clip_rgb(_input[mode].apply(_input, args));
          }
        }
        if (me._rgb == null) {
          console.warn('unknown format: ' + args);
        }
        if (me._rgb == null) {
          me._rgb = [0, 0, 0];
        }
        if (me._rgb.length === 3) {
          me._rgb.push(1);
        }
      }

      Color.prototype.toString = function() {
        return this.hex();
      };

      return Color;

    })();

    chroma._input = _input;


    /**
    	ColorBrewer colors for chroma.js
    
    	Copyright (c) 2002 Cynthia Brewer, Mark Harrower, and The 
    	Pennsylvania State University.
    
    	Licensed under the Apache License, Version 2.0 (the "License"); 
    	you may not use this file except in compliance with the License.
    	You may obtain a copy of the License at	
    	http://www.apache.org/licenses/LICENSE-2.0
    
    	Unless required by applicable law or agreed to in writing, software distributed
    	under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
    	CONDITIONS OF ANY KIND, either express or implied. See the License for the
    	specific language governing permissions and limitations under the License.
    
        @preserve
     */

    chroma.brewer = brewer = {
      OrRd: ['#fff7ec', '#fee8c8', '#fdd49e', '#fdbb84', '#fc8d59', '#ef6548', '#d7301f', '#b30000', '#7f0000'],
      PuBu: ['#fff7fb', '#ece7f2', '#d0d1e6', '#a6bddb', '#74a9cf', '#3690c0', '#0570b0', '#045a8d', '#023858'],
      BuPu: ['#f7fcfd', '#e0ecf4', '#bfd3e6', '#9ebcda', '#8c96c6', '#8c6bb1', '#88419d', '#810f7c', '#4d004b'],
      Oranges: ['#fff5eb', '#fee6ce', '#fdd0a2', '#fdae6b', '#fd8d3c', '#f16913', '#d94801', '#a63603', '#7f2704'],
      BuGn: ['#f7fcfd', '#e5f5f9', '#ccece6', '#99d8c9', '#66c2a4', '#41ae76', '#238b45', '#006d2c', '#00441b'],
      YlOrBr: ['#ffffe5', '#fff7bc', '#fee391', '#fec44f', '#fe9929', '#ec7014', '#cc4c02', '#993404', '#662506'],
      YlGn: ['#ffffe5', '#f7fcb9', '#d9f0a3', '#addd8e', '#78c679', '#41ab5d', '#238443', '#006837', '#004529'],
      Reds: ['#fff5f0', '#fee0d2', '#fcbba1', '#fc9272', '#fb6a4a', '#ef3b2c', '#cb181d', '#a50f15', '#67000d'],
      RdPu: ['#fff7f3', '#fde0dd', '#fcc5c0', '#fa9fb5', '#f768a1', '#dd3497', '#ae017e', '#7a0177', '#49006a'],
      Greens: ['#f7fcf5', '#e5f5e0', '#c7e9c0', '#a1d99b', '#74c476', '#41ab5d', '#238b45', '#006d2c', '#00441b'],
      YlGnBu: ['#ffffd9', '#edf8b1', '#c7e9b4', '#7fcdbb', '#41b6c4', '#1d91c0', '#225ea8', '#253494', '#081d58'],
      Purples: ['#fcfbfd', '#efedf5', '#dadaeb', '#bcbddc', '#9e9ac8', '#807dba', '#6a51a3', '#54278f', '#3f007d'],
      GnBu: ['#f7fcf0', '#e0f3db', '#ccebc5', '#a8ddb5', '#7bccc4', '#4eb3d3', '#2b8cbe', '#0868ac', '#084081'],
      Greys: ['#ffffff', '#f0f0f0', '#d9d9d9', '#bdbdbd', '#969696', '#737373', '#525252', '#252525', '#000000'],
      YlOrRd: ['#ffffcc', '#ffeda0', '#fed976', '#feb24c', '#fd8d3c', '#fc4e2a', '#e31a1c', '#bd0026', '#800026'],
      PuRd: ['#f7f4f9', '#e7e1ef', '#d4b9da', '#c994c7', '#df65b0', '#e7298a', '#ce1256', '#980043', '#67001f'],
      Blues: ['#f7fbff', '#deebf7', '#c6dbef', '#9ecae1', '#6baed6', '#4292c6', '#2171b5', '#08519c', '#08306b'],
      PuBuGn: ['#fff7fb', '#ece2f0', '#d0d1e6', '#a6bddb', '#67a9cf', '#3690c0', '#02818a', '#016c59', '#014636'],
      Viridis: ['#440154', '#482777', '#3f4a8a', '#31678e', '#26838f', '#1f9d8a', '#6cce5a', '#b6de2b', '#fee825'],
      Spectral: ['#9e0142', '#d53e4f', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#e6f598', '#abdda4', '#66c2a5', '#3288bd', '#5e4fa2'],
      RdYlGn: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#d9ef8b', '#a6d96a', '#66bd63', '#1a9850', '#006837'],
      RdBu: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#f7f7f7', '#d1e5f0', '#92c5de', '#4393c3', '#2166ac', '#053061'],
      PiYG: ['#8e0152', '#c51b7d', '#de77ae', '#f1b6da', '#fde0ef', '#f7f7f7', '#e6f5d0', '#b8e186', '#7fbc41', '#4d9221', '#276419'],
      PRGn: ['#40004b', '#762a83', '#9970ab', '#c2a5cf', '#e7d4e8', '#f7f7f7', '#d9f0d3', '#a6dba0', '#5aae61', '#1b7837', '#00441b'],
      RdYlBu: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee090', '#ffffbf', '#e0f3f8', '#abd9e9', '#74add1', '#4575b4', '#313695'],
      BrBG: ['#543005', '#8c510a', '#bf812d', '#dfc27d', '#f6e8c3', '#f5f5f5', '#c7eae5', '#80cdc1', '#35978f', '#01665e', '#003c30'],
      RdGy: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#ffffff', '#e0e0e0', '#bababa', '#878787', '#4d4d4d', '#1a1a1a'],
      PuOr: ['#7f3b08', '#b35806', '#e08214', '#fdb863', '#fee0b6', '#f7f7f7', '#d8daeb', '#b2abd2', '#8073ac', '#542788', '#2d004b'],
      Set2: ['#66c2a5', '#fc8d62', '#8da0cb', '#e78ac3', '#a6d854', '#ffd92f', '#e5c494', '#b3b3b3'],
      Accent: ['#7fc97f', '#beaed4', '#fdc086', '#ffff99', '#386cb0', '#f0027f', '#bf5b17', '#666666'],
      Set1: ['#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00', '#ffff33', '#a65628', '#f781bf', '#999999'],
      Set3: ['#8dd3c7', '#ffffb3', '#bebada', '#fb8072', '#80b1d3', '#fdb462', '#b3de69', '#fccde5', '#d9d9d9', '#bc80bd', '#ccebc5', '#ffed6f'],
      Dark2: ['#1b9e77', '#d95f02', '#7570b3', '#e7298a', '#66a61e', '#e6ab02', '#a6761d', '#666666'],
      Paired: ['#a6cee3', '#1f78b4', '#b2df8a', '#33a02c', '#fb9a99', '#e31a1c', '#fdbf6f', '#ff7f00', '#cab2d6', '#6a3d9a', '#ffff99', '#b15928'],
      Pastel2: ['#b3e2cd', '#fdcdac', '#cbd5e8', '#f4cae4', '#e6f5c9', '#fff2ae', '#f1e2cc', '#cccccc'],
      Pastel1: ['#fbb4ae', '#b3cde3', '#ccebc5', '#decbe4', '#fed9a6', '#ffffcc', '#e5d8bd', '#fddaec', '#f2f2f2']
    };

    (function() {
      var key, results;
      results = [];
      for (key in brewer) {
        results.push(brewer[key.toLowerCase()] = brewer[key]);
      }
      return results;
    })();


    /**
    	X11 color names
    
    	http://www.w3.org/TR/css3-color/#svg-color
     */

    w3cx11 = {
      aliceblue: '#f0f8ff',
      antiquewhite: '#faebd7',
      aqua: '#00ffff',
      aquamarine: '#7fffd4',
      azure: '#f0ffff',
      beige: '#f5f5dc',
      bisque: '#ffe4c4',
      black: '#000000',
      blanchedalmond: '#ffebcd',
      blue: '#0000ff',
      blueviolet: '#8a2be2',
      brown: '#a52a2a',
      burlywood: '#deb887',
      cadetblue: '#5f9ea0',
      chartreuse: '#7fff00',
      chocolate: '#d2691e',
      coral: '#ff7f50',
      cornflower: '#6495ed',
      cornflowerblue: '#6495ed',
      cornsilk: '#fff8dc',
      crimson: '#dc143c',
      cyan: '#00ffff',
      darkblue: '#00008b',
      darkcyan: '#008b8b',
      darkgoldenrod: '#b8860b',
      darkgray: '#a9a9a9',
      darkgreen: '#006400',
      darkgrey: '#a9a9a9',
      darkkhaki: '#bdb76b',
      darkmagenta: '#8b008b',
      darkolivegreen: '#556b2f',
      darkorange: '#ff8c00',
      darkorchid: '#9932cc',
      darkred: '#8b0000',
      darksalmon: '#e9967a',
      darkseagreen: '#8fbc8f',
      darkslateblue: '#483d8b',
      darkslategray: '#2f4f4f',
      darkslategrey: '#2f4f4f',
      darkturquoise: '#00ced1',
      darkviolet: '#9400d3',
      deeppink: '#ff1493',
      deepskyblue: '#00bfff',
      dimgray: '#696969',
      dimgrey: '#696969',
      dodgerblue: '#1e90ff',
      firebrick: '#b22222',
      floralwhite: '#fffaf0',
      forestgreen: '#228b22',
      fuchsia: '#ff00ff',
      gainsboro: '#dcdcdc',
      ghostwhite: '#f8f8ff',
      gold: '#ffd700',
      goldenrod: '#daa520',
      gray: '#808080',
      green: '#008000',
      greenyellow: '#adff2f',
      grey: '#808080',
      honeydew: '#f0fff0',
      hotpink: '#ff69b4',
      indianred: '#cd5c5c',
      indigo: '#4b0082',
      ivory: '#fffff0',
      khaki: '#f0e68c',
      laserlemon: '#ffff54',
      lavender: '#e6e6fa',
      lavenderblush: '#fff0f5',
      lawngreen: '#7cfc00',
      lemonchiffon: '#fffacd',
      lightblue: '#add8e6',
      lightcoral: '#f08080',
      lightcyan: '#e0ffff',
      lightgoldenrod: '#fafad2',
      lightgoldenrodyellow: '#fafad2',
      lightgray: '#d3d3d3',
      lightgreen: '#90ee90',
      lightgrey: '#d3d3d3',
      lightpink: '#ffb6c1',
      lightsalmon: '#ffa07a',
      lightseagreen: '#20b2aa',
      lightskyblue: '#87cefa',
      lightslategray: '#778899',
      lightslategrey: '#778899',
      lightsteelblue: '#b0c4de',
      lightyellow: '#ffffe0',
      lime: '#00ff00',
      limegreen: '#32cd32',
      linen: '#faf0e6',
      magenta: '#ff00ff',
      maroon: '#800000',
      maroon2: '#7f0000',
      maroon3: '#b03060',
      mediumaquamarine: '#66cdaa',
      mediumblue: '#0000cd',
      mediumorchid: '#ba55d3',
      mediumpurple: '#9370db',
      mediumseagreen: '#3cb371',
      mediumslateblue: '#7b68ee',
      mediumspringgreen: '#00fa9a',
      mediumturquoise: '#48d1cc',
      mediumvioletred: '#c71585',
      midnightblue: '#191970',
      mintcream: '#f5fffa',
      mistyrose: '#ffe4e1',
      moccasin: '#ffe4b5',
      navajowhite: '#ffdead',
      navy: '#000080',
      oldlace: '#fdf5e6',
      olive: '#808000',
      olivedrab: '#6b8e23',
      orange: '#ffa500',
      orangered: '#ff4500',
      orchid: '#da70d6',
      palegoldenrod: '#eee8aa',
      palegreen: '#98fb98',
      paleturquoise: '#afeeee',
      palevioletred: '#db7093',
      papayawhip: '#ffefd5',
      peachpuff: '#ffdab9',
      peru: '#cd853f',
      pink: '#ffc0cb',
      plum: '#dda0dd',
      powderblue: '#b0e0e6',
      purple: '#800080',
      purple2: '#7f007f',
      purple3: '#a020f0',
      rebeccapurple: '#663399',
      red: '#ff0000',
      rosybrown: '#bc8f8f',
      royalblue: '#4169e1',
      saddlebrown: '#8b4513',
      salmon: '#fa8072',
      sandybrown: '#f4a460',
      seagreen: '#2e8b57',
      seashell: '#fff5ee',
      sienna: '#a0522d',
      silver: '#c0c0c0',
      skyblue: '#87ceeb',
      slateblue: '#6a5acd',
      slategray: '#708090',
      slategrey: '#708090',
      snow: '#fffafa',
      springgreen: '#00ff7f',
      steelblue: '#4682b4',
      tan: '#d2b48c',
      teal: '#008080',
      thistle: '#d8bfd8',
      tomato: '#ff6347',
      turquoise: '#40e0d0',
      violet: '#ee82ee',
      wheat: '#f5deb3',
      white: '#ffffff',
      whitesmoke: '#f5f5f5',
      yellow: '#ffff00',
      yellowgreen: '#9acd32'
    };

    chroma.colors = w3cx11;

    lab2rgb = function() {
      var a, args, b, g, l, r, x, y, z;
      args = unpack(arguments);
      l = args[0], a = args[1], b = args[2];
      y = (l + 16) / 116;
      x = isNaN(a) ? y : y + a / 500;
      z = isNaN(b) ? y : y - b / 200;
      y = LAB_CONSTANTS.Yn * lab_xyz(y);
      x = LAB_CONSTANTS.Xn * lab_xyz(x);
      z = LAB_CONSTANTS.Zn * lab_xyz(z);
      r = xyz_rgb(3.2404542 * x - 1.5371385 * y - 0.4985314 * z);
      g = xyz_rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z);
      b = xyz_rgb(0.0556434 * x - 0.2040259 * y + 1.0572252 * z);
      return [r, g, b, args.length > 3 ? args[3] : 1];
    };

    xyz_rgb = function(r) {
      return 255 * (r <= 0.00304 ? 12.92 * r : 1.055 * pow(r, 1 / 2.4) - 0.055);
    };

    lab_xyz = function(t) {
      if (t > LAB_CONSTANTS.t1) {
        return t * t * t;
      } else {
        return LAB_CONSTANTS.t2 * (t - LAB_CONSTANTS.t0);
      }
    };

    LAB_CONSTANTS = {
      Kn: 18,
      Xn: 0.950470,
      Yn: 1,
      Zn: 1.088830,
      t0: 0.137931034,
      t1: 0.206896552,
      t2: 0.12841855,
      t3: 0.008856452
    };

    rgb2lab = function() {
      var b, g, r, ref, ref1, x, y, z;
      ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
      ref1 = rgb2xyz(r, g, b), x = ref1[0], y = ref1[1], z = ref1[2];
      return [116 * y - 16, 500 * (x - y), 200 * (y - z)];
    };

    rgb_xyz = function(r) {
      if ((r /= 255) <= 0.04045) {
        return r / 12.92;
      } else {
        return pow((r + 0.055) / 1.055, 2.4);
      }
    };

    xyz_lab = function(t) {
      if (t > LAB_CONSTANTS.t3) {
        return pow(t, 1 / 3);
      } else {
        return t / LAB_CONSTANTS.t2 + LAB_CONSTANTS.t0;
      }
    };

    rgb2xyz = function() {
      var b, g, r, ref, x, y, z;
      ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
      r = rgb_xyz(r);
      g = rgb_xyz(g);
      b = rgb_xyz(b);
      x = xyz_lab((0.4124564 * r + 0.3575761 * g + 0.1804375 * b) / LAB_CONSTANTS.Xn);
      y = xyz_lab((0.2126729 * r + 0.7151522 * g + 0.0721750 * b) / LAB_CONSTANTS.Yn);
      z = xyz_lab((0.0193339 * r + 0.1191920 * g + 0.9503041 * b) / LAB_CONSTANTS.Zn);
      return [x, y, z];
    };

    chroma.lab = function() {
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(Color, slice.call(arguments).concat(['lab']), function(){});
    };

    _input.lab = lab2rgb;

    Color.prototype.lab = function() {
      return rgb2lab(this._rgb);
    };

    bezier = function(colors) {
      var I, I0, I1, c, lab0, lab1, lab2, lab3, ref, ref1, ref2;
      colors = (function() {
        var len, o, results;
        results = [];
        for (o = 0, len = colors.length; o < len; o++) {
          c = colors[o];
          results.push(chroma(c));
        }
        return results;
      })();
      if (colors.length === 2) {
        ref = (function() {
          var len, o, results;
          results = [];
          for (o = 0, len = colors.length; o < len; o++) {
            c = colors[o];
            results.push(c.lab());
          }
          return results;
        })(), lab0 = ref[0], lab1 = ref[1];
        I = function(t) {
          var i, lab;
          lab = (function() {
            var o, results;
            results = [];
            for (i = o = 0; o <= 2; i = ++o) {
              results.push(lab0[i] + t * (lab1[i] - lab0[i]));
            }
            return results;
          })();
          return chroma.lab.apply(chroma, lab);
        };
      } else if (colors.length === 3) {
        ref1 = (function() {
          var len, o, results;
          results = [];
          for (o = 0, len = colors.length; o < len; o++) {
            c = colors[o];
            results.push(c.lab());
          }
          return results;
        })(), lab0 = ref1[0], lab1 = ref1[1], lab2 = ref1[2];
        I = function(t) {
          var i, lab;
          lab = (function() {
            var o, results;
            results = [];
            for (i = o = 0; o <= 2; i = ++o) {
              results.push((1 - t) * (1 - t) * lab0[i] + 2 * (1 - t) * t * lab1[i] + t * t * lab2[i]);
            }
            return results;
          })();
          return chroma.lab.apply(chroma, lab);
        };
      } else if (colors.length === 4) {
        ref2 = (function() {
          var len, o, results;
          results = [];
          for (o = 0, len = colors.length; o < len; o++) {
            c = colors[o];
            results.push(c.lab());
          }
          return results;
        })(), lab0 = ref2[0], lab1 = ref2[1], lab2 = ref2[2], lab3 = ref2[3];
        I = function(t) {
          var i, lab;
          lab = (function() {
            var o, results;
            results = [];
            for (i = o = 0; o <= 2; i = ++o) {
              results.push((1 - t) * (1 - t) * (1 - t) * lab0[i] + 3 * (1 - t) * (1 - t) * t * lab1[i] + 3 * (1 - t) * t * t * lab2[i] + t * t * t * lab3[i]);
            }
            return results;
          })();
          return chroma.lab.apply(chroma, lab);
        };
      } else if (colors.length === 5) {
        I0 = bezier(colors.slice(0, 3));
        I1 = bezier(colors.slice(2, 5));
        I = function(t) {
          if (t < 0.5) {
            return I0(t * 2);
          } else {
            return I1((t - 0.5) * 2);
          }
        };
      }
      return I;
    };

    chroma.bezier = function(colors) {
      var f;
      f = bezier(colors);
      f.scale = function() {
        return chroma.scale(f);
      };
      return f;
    };

    chroma.cubehelix = function(start, rotations, hue, gamma, lightness) {
      var dh, dl, f;
      if (start == null) {
        start = 300;
      }
      if (rotations == null) {
        rotations = -1.5;
      }
      if (hue == null) {
        hue = 1;
      }
      if (gamma == null) {
        gamma = 1;
      }
      if (lightness == null) {
        lightness = [0, 1];
      }
      dh = 0;
      if (type(lightness) === 'array') {
        dl = lightness[1] - lightness[0];
      } else {
        dl = 0;
        lightness = [lightness, lightness];
      }
      f = function(fract) {
        var a, amp, b, cos_a, g, h, l, r, sin_a;
        a = TWOPI * ((start + 120) / 360 + rotations * fract);
        l = pow(lightness[0] + dl * fract, gamma);
        h = dh !== 0 ? hue[0] + fract * dh : hue;
        amp = h * l * (1 - l) / 2;
        cos_a = cos(a);
        sin_a = sin(a);
        r = l + amp * (-0.14861 * cos_a + 1.78277 * sin_a);
        g = l + amp * (-0.29227 * cos_a - 0.90649 * sin_a);
        b = l + amp * (+1.97294 * cos_a);
        return chroma(clip_rgb([r * 255, g * 255, b * 255, 1]));
      };
      f.start = function(s) {
        if (s == null) {
          return start;
        }
        start = s;
        return f;
      };
      f.rotations = function(r) {
        if (r == null) {
          return rotations;
        }
        rotations = r;
        return f;
      };
      f.gamma = function(g) {
        if (g == null) {
          return gamma;
        }
        gamma = g;
        return f;
      };
      f.hue = function(h) {
        if (h == null) {
          return hue;
        }
        hue = h;
        if (type(hue) === 'array') {
          dh = hue[1] - hue[0];
          if (dh === 0) {
            hue = hue[1];
          }
        } else {
          dh = 0;
        }
        return f;
      };
      f.lightness = function(h) {
        if (h == null) {
          return lightness;
        }
        if (type(h) === 'array') {
          lightness = h;
          dl = h[1] - h[0];
        } else {
          lightness = [h, h];
          dl = 0;
        }
        return f;
      };
      f.scale = function() {
        return chroma.scale(f);
      };
      f.hue(hue);
      return f;
    };

    chroma.random = function() {
      var code, digits, o;
      digits = '0123456789abcdef';
      code = '#';
      for (o = 0; o < 6; ++o) {
        code += digits.charAt(floor(Math.random() * 16));
      }
      return new Color(code);
    };

    _interpolators = [];

    interpolate = function(col1, col2, f, m) {
      var interpol, len, o, res;
      if (f == null) {
        f = 0.5;
      }
      if (m == null) {
        m = 'rgb';
      }

      /*
      interpolates between colors
      f = 0 --> me
      f = 1 --> col
       */
      if (type(col1) !== 'object') {
        col1 = chroma(col1);
      }
      if (type(col2) !== 'object') {
        col2 = chroma(col2);
      }
      for (o = 0, len = _interpolators.length; o < len; o++) {
        interpol = _interpolators[o];
        if (m === interpol[0]) {
          res = interpol[1](col1, col2, f, m);
          break;
        }
      }
      if (res == null) {
        throw "color mode " + m + " is not supported";
      }
      return res.alpha(col1.alpha() + f * (col2.alpha() - col1.alpha()));
    };

    chroma.interpolate = interpolate;

    Color.prototype.interpolate = function(col2, f, m) {
      return interpolate(this, col2, f, m);
    };

    chroma.mix = interpolate;

    Color.prototype.mix = Color.prototype.interpolate;

    _input.rgb = function() {
      var k, ref, results, v;
      ref = unpack(arguments);
      results = [];
      for (k in ref) {
        v = ref[k];
        results.push(v);
      }
      return results;
    };

    chroma.rgb = function() {
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(Color, slice.call(arguments).concat(['rgb']), function(){});
    };

    Color.prototype.rgb = function(round) {
      if (round == null) {
        round = true;
      }
      if (round) {
        return this._rgb.map(Math.round).slice(0, 3);
      } else {
        return this._rgb.slice(0, 3);
      }
    };

    Color.prototype.rgba = function(round) {
      if (round == null) {
        round = true;
      }
      if (!round) {
        return this._rgb.slice(0);
      }
      return [Math.round(this._rgb[0]), Math.round(this._rgb[1]), Math.round(this._rgb[2]), this._rgb[3]];
    };

    _guess_formats.push({
      p: 3,
      test: function(n) {
        var a;
        a = unpack(arguments);
        if (type(a) === 'array' && a.length === 3) {
          return 'rgb';
        }
        if (a.length === 4 && type(a[3]) === "number" && a[3] >= 0 && a[3] <= 1) {
          return 'rgb';
        }
      }
    });

    _input.lrgb = _input.rgb;

    interpolate_lrgb = function(col1, col2, f, m) {
      var xyz0, xyz1;
      xyz0 = col1._rgb;
      xyz1 = col2._rgb;
      return new Color(sqrt(pow(xyz0[0], 2) * (1 - f) + pow(xyz1[0], 2) * f), sqrt(pow(xyz0[1], 2) * (1 - f) + pow(xyz1[1], 2) * f), sqrt(pow(xyz0[2], 2) * (1 - f) + pow(xyz1[2], 2) * f), m);
    };

    _average_lrgb = function(colors) {
      var col, f, len, o, rgb, xyz;
      f = 1 / colors.length;
      xyz = [0, 0, 0, 0];
      for (o = 0, len = colors.length; o < len; o++) {
        col = colors[o];
        rgb = col._rgb;
        xyz[0] += pow(rgb[0], 2) * f;
        xyz[1] += pow(rgb[1], 2) * f;
        xyz[2] += pow(rgb[2], 2) * f;
        xyz[3] += rgb[3] * f;
      }
      xyz[0] = sqrt(xyz[0]);
      xyz[1] = sqrt(xyz[1]);
      xyz[2] = sqrt(xyz[2]);
      if (xyz[3] > 1) {
        xyz[3] = 1;
      }
      return new Color(clip_rgb(xyz));
    };

    _interpolators.push(['lrgb', interpolate_lrgb]);

    chroma.average = function(colors, mode) {
      var A, alpha, c, cnt, dx, dy, first, i, l, len, o, xyz, xyz2;
      if (mode == null) {
        mode = 'rgb';
      }
      l = colors.length;
      colors = colors.map(function(c) {
        return chroma(c);
      });
      first = colors.splice(0, 1)[0];
      if (mode === 'lrgb') {
        return _average_lrgb(colors);
      }
      xyz = first.get(mode);
      cnt = [];
      dx = 0;
      dy = 0;
      for (i in xyz) {
        xyz[i] = xyz[i] || 0;
        cnt.push(isNaN(xyz[i]) ? 0 : 1);
        if (mode.charAt(i) === 'h' && !isNaN(xyz[i])) {
          A = xyz[i] / 180 * PI;
          dx += cos(A);
          dy += sin(A);
        }
      }
      alpha = first.alpha();
      for (o = 0, len = colors.length; o < len; o++) {
        c = colors[o];
        xyz2 = c.get(mode);
        alpha += c.alpha();
        for (i in xyz) {
          if (!isNaN(xyz2[i])) {
            cnt[i] += 1;
            if (mode.charAt(i) === 'h') {
              A = xyz2[i] / 180 * PI;
              dx += cos(A);
              dy += sin(A);
            } else {
              xyz[i] += xyz2[i];
            }
          }
        }
      }
      for (i in xyz) {
        if (mode.charAt(i) === 'h') {
          A = atan2(dy / cnt[i], dx / cnt[i]) / PI * 180;
          while (A < 0) {
            A += 360;
          }
          while (A >= 360) {
            A -= 360;
          }
          xyz[i] = A;
        } else {
          xyz[i] = xyz[i] / cnt[i];
        }
      }
      return chroma(xyz, mode).alpha(alpha / l);
    };

    hex2rgb = function(hex) {
      var a, b, g, r, rgb, u;
      if (hex.match(/^#?([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/)) {
        if (hex.length === 4 || hex.length === 7) {
          hex = hex.substr(1);
        }
        if (hex.length === 3) {
          hex = hex.split("");
          hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
        }
        u = parseInt(hex, 16);
        r = u >> 16;
        g = u >> 8 & 0xFF;
        b = u & 0xFF;
        return [r, g, b, 1];
      }
      if (hex.match(/^#?([A-Fa-f0-9]{8})$/)) {
        if (hex.length === 9) {
          hex = hex.substr(1);
        }
        u = parseInt(hex, 16);
        r = u >> 24 & 0xFF;
        g = u >> 16 & 0xFF;
        b = u >> 8 & 0xFF;
        a = round((u & 0xFF) / 0xFF * 100) / 100;
        return [r, g, b, a];
      }
      if ((_input.css != null) && (rgb = _input.css(hex))) {
        return rgb;
      }
      throw "unknown color: " + hex;
    };

    rgb2hex = function(channels, mode) {
      var a, b, g, hxa, r, str, u;
      if (mode == null) {
        mode = 'auto';
      }
      r = channels[0], g = channels[1], b = channels[2], a = channels[3];
      if (mode === 'auto') {
        mode = a < 1 ? 'rgba' : 'rgb';
      }
      r = Math.round(r);
      g = Math.round(g);
      b = Math.round(b);
      u = r << 16 | g << 8 | b;
      str = "000000" + u.toString(16);
      str = str.substr(str.length - 6);
      hxa = '0' + round(a * 255).toString(16);
      hxa = hxa.substr(hxa.length - 2);
      return "#" + (function() {
        switch (mode.toLowerCase()) {
          case 'rgba':
            return str + hxa;
          case 'argb':
            return hxa + str;
          default:
            return str;
        }
      })();
    };

    _input.hex = function(h) {
      return hex2rgb(h);
    };

    chroma.hex = function() {
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(Color, slice.call(arguments).concat(['hex']), function(){});
    };

    Color.prototype.hex = function(mode) {
      if (mode == null) {
        mode = 'auto';
      }
      return rgb2hex(this._rgb, mode);
    };

    _guess_formats.push({
      p: 4,
      test: function(n) {
        if (arguments.length === 1 && type(n) === "string") {
          return 'hex';
        }
      }
    });

    hsl2rgb = function() {
      var args, b, c, g, h, i, l, o, r, ref, s, t1, t2, t3;
      args = unpack(arguments);
      h = args[0], s = args[1], l = args[2];
      if (s === 0) {
        r = g = b = l * 255;
      } else {
        t3 = [0, 0, 0];
        c = [0, 0, 0];
        t2 = l < 0.5 ? l * (1 + s) : l + s - l * s;
        t1 = 2 * l - t2;
        h /= 360;
        t3[0] = h + 1 / 3;
        t3[1] = h;
        t3[2] = h - 1 / 3;
        for (i = o = 0; o <= 2; i = ++o) {
          if (t3[i] < 0) {
            t3[i] += 1;
          }
          if (t3[i] > 1) {
            t3[i] -= 1;
          }
          if (6 * t3[i] < 1) {
            c[i] = t1 + (t2 - t1) * 6 * t3[i];
          } else if (2 * t3[i] < 1) {
            c[i] = t2;
          } else if (3 * t3[i] < 2) {
            c[i] = t1 + (t2 - t1) * ((2 / 3) - t3[i]) * 6;
          } else {
            c[i] = t1;
          }
        }
        ref = [round(c[0] * 255), round(c[1] * 255), round(c[2] * 255)], r = ref[0], g = ref[1], b = ref[2];
      }
      if (args.length > 3) {
        return [r, g, b, args[3]];
      } else {
        return [r, g, b];
      }
    };

    rgb2hsl = function(r, g, b) {
      var h, l, min, ref, s;
      if (r !== void 0 && r.length >= 3) {
        ref = r, r = ref[0], g = ref[1], b = ref[2];
      }
      r /= 255;
      g /= 255;
      b /= 255;
      min = Math.min(r, g, b);
      max = Math.max(r, g, b);
      l = (max + min) / 2;
      if (max === min) {
        s = 0;
        h = Number.NaN;
      } else {
        s = l < 0.5 ? (max - min) / (max + min) : (max - min) / (2 - max - min);
      }
      if (r === max) {
        h = (g - b) / (max - min);
      } else if (g === max) {
        h = 2 + (b - r) / (max - min);
      } else if (b === max) {
        h = 4 + (r - g) / (max - min);
      }
      h *= 60;
      if (h < 0) {
        h += 360;
      }
      return [h, s, l];
    };

    chroma.hsl = function() {
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(Color, slice.call(arguments).concat(['hsl']), function(){});
    };

    _input.hsl = hsl2rgb;

    Color.prototype.hsl = function() {
      return rgb2hsl(this._rgb);
    };

    hsv2rgb = function() {
      var args, b, f, g, h, i, p, q, r, ref, ref1, ref2, ref3, ref4, ref5, s, t, v;
      args = unpack(arguments);
      h = args[0], s = args[1], v = args[2];
      v *= 255;
      if (s === 0) {
        r = g = b = v;
      } else {
        if (h === 360) {
          h = 0;
        }
        if (h > 360) {
          h -= 360;
        }
        if (h < 0) {
          h += 360;
        }
        h /= 60;
        i = floor(h);
        f = h - i;
        p = v * (1 - s);
        q = v * (1 - s * f);
        t = v * (1 - s * (1 - f));
        switch (i) {
          case 0:
            ref = [v, t, p], r = ref[0], g = ref[1], b = ref[2];
            break;
          case 1:
            ref1 = [q, v, p], r = ref1[0], g = ref1[1], b = ref1[2];
            break;
          case 2:
            ref2 = [p, v, t], r = ref2[0], g = ref2[1], b = ref2[2];
            break;
          case 3:
            ref3 = [p, q, v], r = ref3[0], g = ref3[1], b = ref3[2];
            break;
          case 4:
            ref4 = [t, p, v], r = ref4[0], g = ref4[1], b = ref4[2];
            break;
          case 5:
            ref5 = [v, p, q], r = ref5[0], g = ref5[1], b = ref5[2];
        }
      }
      return [r, g, b, args.length > 3 ? args[3] : 1];
    };

    rgb2hsv = function() {
      var b, delta, g, h, min, r, ref, s, v;
      ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
      min = Math.min(r, g, b);
      max = Math.max(r, g, b);
      delta = max - min;
      v = max / 255.0;
      if (max === 0) {
        h = Number.NaN;
        s = 0;
      } else {
        s = delta / max;
        if (r === max) {
          h = (g - b) / delta;
        }
        if (g === max) {
          h = 2 + (b - r) / delta;
        }
        if (b === max) {
          h = 4 + (r - g) / delta;
        }
        h *= 60;
        if (h < 0) {
          h += 360;
        }
      }
      return [h, s, v];
    };

    chroma.hsv = function() {
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(Color, slice.call(arguments).concat(['hsv']), function(){});
    };

    _input.hsv = hsv2rgb;

    Color.prototype.hsv = function() {
      return rgb2hsv(this._rgb);
    };

    num2rgb = function(num) {
      var b, g, r;
      if (type(num) === "number" && num >= 0 && num <= 0xFFFFFF) {
        r = num >> 16;
        g = (num >> 8) & 0xFF;
        b = num & 0xFF;
        return [r, g, b, 1];
      }
      console.warn("unknown num color: " + num);
      return [0, 0, 0, 1];
    };

    rgb2num = function() {
      var b, g, r, ref;
      ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
      return (r << 16) + (g << 8) + b;
    };

    chroma.num = function(num) {
      return new Color(num, 'num');
    };

    Color.prototype.num = function(mode) {
      if (mode == null) {
        mode = 'rgb';
      }
      return rgb2num(this._rgb, mode);
    };

    _input.num = num2rgb;

    _guess_formats.push({
      p: 1,
      test: function(n) {
        if (arguments.length === 1 && type(n) === "number" && n >= 0 && n <= 0xFFFFFF) {
          return 'num';
        }
      }
    });

    hcg2rgb = function() {
      var _c, _g, args, b, c, f, g, h, i, p, q, r, ref, ref1, ref2, ref3, ref4, ref5, t, v;
      args = unpack(arguments);
      h = args[0], c = args[1], _g = args[2];
      c = c / 100;
      g = g / 100 * 255;
      _c = c * 255;
      if (c === 0) {
        r = g = b = _g;
      } else {
        if (h === 360) {
          h = 0;
        }
        if (h > 360) {
          h -= 360;
        }
        if (h < 0) {
          h += 360;
        }
        h /= 60;
        i = floor(h);
        f = h - i;
        p = _g * (1 - c);
        q = p + _c * (1 - f);
        t = p + _c * f;
        v = p + _c;
        switch (i) {
          case 0:
            ref = [v, t, p], r = ref[0], g = ref[1], b = ref[2];
            break;
          case 1:
            ref1 = [q, v, p], r = ref1[0], g = ref1[1], b = ref1[2];
            break;
          case 2:
            ref2 = [p, v, t], r = ref2[0], g = ref2[1], b = ref2[2];
            break;
          case 3:
            ref3 = [p, q, v], r = ref3[0], g = ref3[1], b = ref3[2];
            break;
          case 4:
            ref4 = [t, p, v], r = ref4[0], g = ref4[1], b = ref4[2];
            break;
          case 5:
            ref5 = [v, p, q], r = ref5[0], g = ref5[1], b = ref5[2];
        }
      }
      return [r, g, b, args.length > 3 ? args[3] : 1];
    };

    rgb2hcg = function() {
      var _g, b, c, delta, g, h, min, r, ref;
      ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
      min = Math.min(r, g, b);
      max = Math.max(r, g, b);
      delta = max - min;
      c = delta * 100 / 255;
      _g = min / (255 - delta) * 100;
      if (delta === 0) {
        h = Number.NaN;
      } else {
        if (r === max) {
          h = (g - b) / delta;
        }
        if (g === max) {
          h = 2 + (b - r) / delta;
        }
        if (b === max) {
          h = 4 + (r - g) / delta;
        }
        h *= 60;
        if (h < 0) {
          h += 360;
        }
      }
      return [h, c, _g];
    };

    chroma.hcg = function() {
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(Color, slice.call(arguments).concat(['hcg']), function(){});
    };

    _input.hcg = hcg2rgb;

    Color.prototype.hcg = function() {
      return rgb2hcg(this._rgb);
    };

    css2rgb = function(css) {
      var aa, ab, hsl, i, m, o, rgb, w;
      css = css.toLowerCase();
      if ((chroma.colors != null) && chroma.colors[css]) {
        return hex2rgb(chroma.colors[css]);
      }
      if (m = css.match(/rgb\(\s*(\-?\d+),\s*(\-?\d+)\s*,\s*(\-?\d+)\s*\)/)) {
        rgb = m.slice(1, 4);
        for (i = o = 0; o <= 2; i = ++o) {
          rgb[i] = +rgb[i];
        }
        rgb[3] = 1;
      } else if (m = css.match(/rgba\(\s*(\-?\d+),\s*(\-?\d+)\s*,\s*(\-?\d+)\s*,\s*([01]|[01]?\.\d+)\)/)) {
        rgb = m.slice(1, 5);
        for (i = w = 0; w <= 3; i = ++w) {
          rgb[i] = +rgb[i];
        }
      } else if (m = css.match(/rgb\(\s*(\-?\d+(?:\.\d+)?)%,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*\)/)) {
        rgb = m.slice(1, 4);
        for (i = aa = 0; aa <= 2; i = ++aa) {
          rgb[i] = round(rgb[i] * 2.55);
        }
        rgb[3] = 1;
      } else if (m = css.match(/rgba\(\s*(\-?\d+(?:\.\d+)?)%,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)/)) {
        rgb = m.slice(1, 5);
        for (i = ab = 0; ab <= 2; i = ++ab) {
          rgb[i] = round(rgb[i] * 2.55);
        }
        rgb[3] = +rgb[3];
      } else if (m = css.match(/hsl\(\s*(\-?\d+(?:\.\d+)?),\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*\)/)) {
        hsl = m.slice(1, 4);
        hsl[1] *= 0.01;
        hsl[2] *= 0.01;
        rgb = hsl2rgb(hsl);
        rgb[3] = 1;
      } else if (m = css.match(/hsla\(\s*(\-?\d+(?:\.\d+)?),\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)/)) {
        hsl = m.slice(1, 4);
        hsl[1] *= 0.01;
        hsl[2] *= 0.01;
        rgb = hsl2rgb(hsl);
        rgb[3] = +m[4];
      }
      return rgb;
    };

    rgb2css = function(rgba) {
      var mode;
      mode = rgba[3] < 1 ? 'rgba' : 'rgb';
      if (mode === 'rgb') {
        return mode + '(' + rgba.slice(0, 3).map(round).join(',') + ')';
      } else if (mode === 'rgba') {
        return mode + '(' + rgba.slice(0, 3).map(round).join(',') + ',' + rgba[3] + ')';
      } else ;
    };

    rnd = function(a) {
      return round(a * 100) / 100;
    };

    hsl2css = function(hsl, alpha) {
      var mode;
      mode = alpha < 1 ? 'hsla' : 'hsl';
      hsl[0] = rnd(hsl[0] || 0);
      hsl[1] = rnd(hsl[1] * 100) + '%';
      hsl[2] = rnd(hsl[2] * 100) + '%';
      if (mode === 'hsla') {
        hsl[3] = alpha;
      }
      return mode + '(' + hsl.join(',') + ')';
    };

    _input.css = function(h) {
      return css2rgb(h);
    };

    chroma.css = function() {
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(Color, slice.call(arguments).concat(['css']), function(){});
    };

    Color.prototype.css = function(mode) {
      if (mode == null) {
        mode = 'rgb';
      }
      if (mode.slice(0, 3) === 'rgb') {
        return rgb2css(this._rgb);
      } else if (mode.slice(0, 3) === 'hsl') {
        return hsl2css(this.hsl(), this.alpha());
      }
    };

    _input.named = function(name) {
      return hex2rgb(w3cx11[name]);
    };

    _guess_formats.push({
      p: 5,
      test: function(n) {
        if (arguments.length === 1 && (w3cx11[n] != null)) {
          return 'named';
        }
      }
    });

    Color.prototype.name = function(n) {
      var h, k;
      if (arguments.length) {
        if (w3cx11[n]) {
          this._rgb = hex2rgb(w3cx11[n]);
        }
        this._rgb[3] = 1;
      }
      h = this.hex('rgb');
      for (k in w3cx11) {
        if (h === w3cx11[k]) {
          return k;
        }
      }
      return h;
    };

    lch2lab = function() {

      /*
      Convert from a qualitative parameter h and a quantitative parameter l to a 24-bit pixel.
      These formulas were invented by David Dalrymple to obtain maximum contrast without going
      out of gamut if the parameters are in the range 0-1.
      
      A saturation multiplier was added by Gregor Aisch
       */
      var c, h, l, ref;
      ref = unpack(arguments), l = ref[0], c = ref[1], h = ref[2];
      h = h * DEG2RAD;
      return [l, cos(h) * c, sin(h) * c];
    };

    lch2rgb = function() {
      var L, a, args, b, c, g, h, l, r, ref, ref1;
      args = unpack(arguments);
      l = args[0], c = args[1], h = args[2];
      ref = lch2lab(l, c, h), L = ref[0], a = ref[1], b = ref[2];
      ref1 = lab2rgb(L, a, b), r = ref1[0], g = ref1[1], b = ref1[2];
      return [r, g, b, args.length > 3 ? args[3] : 1];
    };

    lab2lch = function() {
      var a, b, c, h, l, ref;
      ref = unpack(arguments), l = ref[0], a = ref[1], b = ref[2];
      c = sqrt(a * a + b * b);
      h = (atan2(b, a) * RAD2DEG + 360) % 360;
      if (round(c * 10000) === 0) {
        h = Number.NaN;
      }
      return [l, c, h];
    };

    rgb2lch = function() {
      var a, b, g, l, r, ref, ref1;
      ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
      ref1 = rgb2lab(r, g, b), l = ref1[0], a = ref1[1], b = ref1[2];
      return lab2lch(l, a, b);
    };

    chroma.lch = function() {
      var args;
      args = unpack(arguments);
      return new Color(args, 'lch');
    };

    chroma.hcl = function() {
      var args;
      args = unpack(arguments);
      return new Color(args, 'hcl');
    };

    _input.lch = lch2rgb;

    _input.hcl = function() {
      var c, h, l, ref;
      ref = unpack(arguments), h = ref[0], c = ref[1], l = ref[2];
      return lch2rgb([l, c, h]);
    };

    Color.prototype.lch = function() {
      return rgb2lch(this._rgb);
    };

    Color.prototype.hcl = function() {
      return rgb2lch(this._rgb).reverse();
    };

    rgb2cmyk = function(mode) {
      var b, c, f, g, k, m, r, ref, y;
      if (mode == null) {
        mode = 'rgb';
      }
      ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
      r = r / 255;
      g = g / 255;
      b = b / 255;
      k = 1 - Math.max(r, Math.max(g, b));
      f = k < 1 ? 1 / (1 - k) : 0;
      c = (1 - r - k) * f;
      m = (1 - g - k) * f;
      y = (1 - b - k) * f;
      return [c, m, y, k];
    };

    cmyk2rgb = function() {
      var alpha, args, b, c, g, k, m, r, y;
      args = unpack(arguments);
      c = args[0], m = args[1], y = args[2], k = args[3];
      alpha = args.length > 4 ? args[4] : 1;
      if (k === 1) {
        return [0, 0, 0, alpha];
      }
      r = c >= 1 ? 0 : 255 * (1 - c) * (1 - k);
      g = m >= 1 ? 0 : 255 * (1 - m) * (1 - k);
      b = y >= 1 ? 0 : 255 * (1 - y) * (1 - k);
      return [r, g, b, alpha];
    };

    _input.cmyk = function() {
      return cmyk2rgb(unpack(arguments));
    };

    chroma.cmyk = function() {
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(Color, slice.call(arguments).concat(['cmyk']), function(){});
    };

    Color.prototype.cmyk = function() {
      return rgb2cmyk(this._rgb);
    };

    _input.gl = function() {
      var i, k, o, rgb, v;
      rgb = (function() {
        var ref, results;
        ref = unpack(arguments);
        results = [];
        for (k in ref) {
          v = ref[k];
          results.push(v);
        }
        return results;
      }).apply(this, arguments);
      for (i = o = 0; o <= 2; i = ++o) {
        rgb[i] *= 255;
      }
      return rgb;
    };

    chroma.gl = function() {
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(Color, slice.call(arguments).concat(['gl']), function(){});
    };

    Color.prototype.gl = function() {
      var rgb;
      rgb = this._rgb;
      return [rgb[0] / 255, rgb[1] / 255, rgb[2] / 255, rgb[3]];
    };

    rgb2luminance = function(r, g, b) {
      var ref;
      ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
      r = luminance_x(r);
      g = luminance_x(g);
      b = luminance_x(b);
      return 0.2126 * r + 0.7152 * g + 0.0722 * b;
    };

    luminance_x = function(x) {
      x /= 255;
      if (x <= 0.03928) {
        return x / 12.92;
      } else {
        return pow((x + 0.055) / 1.055, 2.4);
      }
    };

    interpolate_rgb = function(col1, col2, f, m) {
      var xyz0, xyz1;
      xyz0 = col1._rgb;
      xyz1 = col2._rgb;
      return new Color(xyz0[0] + f * (xyz1[0] - xyz0[0]), xyz0[1] + f * (xyz1[1] - xyz0[1]), xyz0[2] + f * (xyz1[2] - xyz0[2]), m);
    };

    _interpolators.push(['rgb', interpolate_rgb]);

    Color.prototype.luminance = function(lum, mode) {
      var cur_lum, eps, max_iter, rgba, test;
      if (mode == null) {
        mode = 'rgb';
      }
      if (!arguments.length) {
        return rgb2luminance(this._rgb);
      }
      rgba = this._rgb;
      if (lum === 0) {
        rgba = [0, 0, 0, this._rgb[3]];
      } else if (lum === 1) {
        rgba = [255, 255, 255, this[3]];
      } else {
        cur_lum = rgb2luminance(this._rgb);
        eps = 1e-7;
        max_iter = 20;
        test = function(l, h) {
          var lm, m;
          m = l.interpolate(h, 0.5, mode);
          lm = m.luminance();
          if (Math.abs(lum - lm) < eps || !max_iter--) {
            return m;
          }
          if (lm > lum) {
            return test(l, m);
          }
          return test(m, h);
        };
        if (cur_lum > lum) {
          rgba = test(chroma('black'), this).rgba();
        } else {
          rgba = test(this, chroma('white')).rgba();
        }
      }
      return chroma(rgba).alpha(this.alpha());
    };

    temperature2rgb = function(kelvin) {
      var b, g, r, temp;
      temp = kelvin / 100;
      if (temp < 66) {
        r = 255;
        g = -155.25485562709179 - 0.44596950469579133 * (g = temp - 2) + 104.49216199393888 * log(g);
        b = temp < 20 ? 0 : -254.76935184120902 + 0.8274096064007395 * (b = temp - 10) + 115.67994401066147 * log(b);
      } else {
        r = 351.97690566805693 + 0.114206453784165 * (r = temp - 55) - 40.25366309332127 * log(r);
        g = 325.4494125711974 + 0.07943456536662342 * (g = temp - 50) - 28.0852963507957 * log(g);
        b = 255;
      }
      return [r, g, b];
    };

    rgb2temperature = function() {
      var b, eps, maxTemp, minTemp, r, ref, rgb, temp;
      ref = unpack(arguments), r = ref[0], b = ref[2];
      minTemp = 1000;
      maxTemp = 40000;
      eps = 0.4;
      while (maxTemp - minTemp > eps) {
        temp = (maxTemp + minTemp) * 0.5;
        rgb = temperature2rgb(temp);
        if ((rgb[2] / rgb[0]) >= (b / r)) {
          maxTemp = temp;
        } else {
          minTemp = temp;
        }
      }
      return round(temp);
    };

    chroma.temperature = chroma.kelvin = function() {
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(Color, slice.call(arguments).concat(['temperature']), function(){});
    };

    _input.temperature = _input.kelvin = _input.K = temperature2rgb;

    Color.prototype.temperature = function() {
      return rgb2temperature(this._rgb);
    };

    Color.prototype.kelvin = Color.prototype.temperature;

    chroma.contrast = function(a, b) {
      var l1, l2, ref, ref1;
      if ((ref = type(a)) === 'string' || ref === 'number') {
        a = new Color(a);
      }
      if ((ref1 = type(b)) === 'string' || ref1 === 'number') {
        b = new Color(b);
      }
      l1 = a.luminance();
      l2 = b.luminance();
      if (l1 > l2) {
        return (l1 + 0.05) / (l2 + 0.05);
      } else {
        return (l2 + 0.05) / (l1 + 0.05);
      }
    };

    chroma.distance = function(a, b, mode) {
      var d, i, l1, l2, ref, ref1, sum_sq;
      if (mode == null) {
        mode = 'lab';
      }
      if ((ref = type(a)) === 'string' || ref === 'number') {
        a = new Color(a);
      }
      if ((ref1 = type(b)) === 'string' || ref1 === 'number') {
        b = new Color(b);
      }
      l1 = a.get(mode);
      l2 = b.get(mode);
      sum_sq = 0;
      for (i in l1) {
        d = (l1[i] || 0) - (l2[i] || 0);
        sum_sq += d * d;
      }
      return Math.sqrt(sum_sq);
    };

    chroma.deltaE = function(a, b, L, C) {
      var L1, L2, a1, a2, b1, b2, c1, c2, c4, dH2, delA, delB, delC, delL, f, h1, ref, ref1, ref2, ref3, sc, sh, sl, t, v1, v2, v3;
      if (L == null) {
        L = 1;
      }
      if (C == null) {
        C = 1;
      }
      if ((ref = type(a)) === 'string' || ref === 'number') {
        a = new Color(a);
      }
      if ((ref1 = type(b)) === 'string' || ref1 === 'number') {
        b = new Color(b);
      }
      ref2 = a.lab(), L1 = ref2[0], a1 = ref2[1], b1 = ref2[2];
      ref3 = b.lab(), L2 = ref3[0], a2 = ref3[1], b2 = ref3[2];
      c1 = sqrt(a1 * a1 + b1 * b1);
      c2 = sqrt(a2 * a2 + b2 * b2);
      sl = L1 < 16.0 ? 0.511 : (0.040975 * L1) / (1.0 + 0.01765 * L1);
      sc = (0.0638 * c1) / (1.0 + 0.0131 * c1) + 0.638;
      h1 = c1 < 0.000001 ? 0.0 : (atan2(b1, a1) * 180.0) / PI;
      while (h1 < 0) {
        h1 += 360;
      }
      while (h1 >= 360) {
        h1 -= 360;
      }
      t = (h1 >= 164.0) && (h1 <= 345.0) ? 0.56 + abs(0.2 * cos((PI * (h1 + 168.0)) / 180.0)) : 0.36 + abs(0.4 * cos((PI * (h1 + 35.0)) / 180.0));
      c4 = c1 * c1 * c1 * c1;
      f = sqrt(c4 / (c4 + 1900.0));
      sh = sc * (f * t + 1.0 - f);
      delL = L1 - L2;
      delC = c1 - c2;
      delA = a1 - a2;
      delB = b1 - b2;
      dH2 = delA * delA + delB * delB - delC * delC;
      v1 = delL / (L * sl);
      v2 = delC / (C * sc);
      v3 = sh;
      return sqrt(v1 * v1 + v2 * v2 + (dH2 / (v3 * v3)));
    };

    Color.prototype.get = function(modechan) {
      var channel, i, me, mode, ref, src;
      me = this;
      ref = modechan.split('.'), mode = ref[0], channel = ref[1];
      src = me[mode]();
      if (channel) {
        i = mode.indexOf(channel);
        if (i > -1) {
          return src[i];
        } else {
          return console.warn('unknown channel ' + channel + ' in mode ' + mode);
        }
      } else {
        return src;
      }
    };

    Color.prototype.set = function(modechan, value) {
      var channel, i, me, mode, ref, src;
      me = this;
      ref = modechan.split('.'), mode = ref[0], channel = ref[1];
      if (channel) {
        src = me[mode]();
        i = mode.indexOf(channel);
        if (i > -1) {
          if (type(value) === 'string') {
            switch (value.charAt(0)) {
              case '+':
                src[i] += +value;
                break;
              case '-':
                src[i] += +value;
                break;
              case '*':
                src[i] *= +(value.substr(1));
                break;
              case '/':
                src[i] /= +(value.substr(1));
                break;
              default:
                src[i] = +value;
            }
          } else {
            src[i] = value;
          }
        } else {
          console.warn('unknown channel ' + channel + ' in mode ' + mode);
        }
      } else {
        src = value;
      }
      return chroma(src, mode).alpha(me.alpha());
    };

    Color.prototype.clipped = function() {
      return this._rgb._clipped || false;
    };

    Color.prototype.alpha = function(a) {
      if (arguments.length) {
        return chroma.rgb([this._rgb[0], this._rgb[1], this._rgb[2], a]);
      }
      return this._rgb[3];
    };

    Color.prototype.darken = function(amount) {
      var lab, me;
      if (amount == null) {
        amount = 1;
      }
      me = this;
      lab = me.lab();
      lab[0] -= LAB_CONSTANTS.Kn * amount;
      return chroma.lab(lab).alpha(me.alpha());
    };

    Color.prototype.brighten = function(amount) {
      if (amount == null) {
        amount = 1;
      }
      return this.darken(-amount);
    };

    Color.prototype.darker = Color.prototype.darken;

    Color.prototype.brighter = Color.prototype.brighten;

    Color.prototype.saturate = function(amount) {
      var lch, me;
      if (amount == null) {
        amount = 1;
      }
      me = this;
      lch = me.lch();
      lch[1] += amount * LAB_CONSTANTS.Kn;
      if (lch[1] < 0) {
        lch[1] = 0;
      }
      return chroma.lch(lch).alpha(me.alpha());
    };

    Color.prototype.desaturate = function(amount) {
      if (amount == null) {
        amount = 1;
      }
      return this.saturate(-amount);
    };

    Color.prototype.premultiply = function() {
      var a, rgb;
      rgb = this.rgb();
      a = this.alpha();
      return chroma(rgb[0] * a, rgb[1] * a, rgb[2] * a, a);
    };

    blend = function(bottom, top, mode) {
      if (!blend[mode]) {
        throw 'unknown blend mode ' + mode;
      }
      return blend[mode](bottom, top);
    };

    blend_f = function(f) {
      return function(bottom, top) {
        var c0, c1;
        c0 = chroma(top).rgb();
        c1 = chroma(bottom).rgb();
        return chroma(f(c0, c1), 'rgb');
      };
    };

    each = function(f) {
      return function(c0, c1) {
        var i, o, out;
        out = [];
        for (i = o = 0; o <= 3; i = ++o) {
          out[i] = f(c0[i], c1[i]);
        }
        return out;
      };
    };

    normal = function(a, b) {
      return a;
    };

    multiply = function(a, b) {
      return a * b / 255;
    };

    darken = function(a, b) {
      if (a > b) {
        return b;
      } else {
        return a;
      }
    };

    lighten = function(a, b) {
      if (a > b) {
        return a;
      } else {
        return b;
      }
    };

    screen = function(a, b) {
      return 255 * (1 - (1 - a / 255) * (1 - b / 255));
    };

    overlay = function(a, b) {
      if (b < 128) {
        return 2 * a * b / 255;
      } else {
        return 255 * (1 - 2 * (1 - a / 255) * (1 - b / 255));
      }
    };

    burn = function(a, b) {
      return 255 * (1 - (1 - b / 255) / (a / 255));
    };

    dodge = function(a, b) {
      if (a === 255) {
        return 255;
      }
      a = 255 * (b / 255) / (1 - a / 255);
      if (a > 255) {
        return 255;
      } else {
        return a;
      }
    };

    blend.normal = blend_f(each(normal));

    blend.multiply = blend_f(each(multiply));

    blend.screen = blend_f(each(screen));

    blend.overlay = blend_f(each(overlay));

    blend.darken = blend_f(each(darken));

    blend.lighten = blend_f(each(lighten));

    blend.dodge = blend_f(each(dodge));

    blend.burn = blend_f(each(burn));

    chroma.blend = blend;

    chroma.analyze = function(data) {
      var len, o, r, val;
      r = {
        min: Number.MAX_VALUE,
        max: Number.MAX_VALUE * -1,
        sum: 0,
        values: [],
        count: 0
      };
      for (o = 0, len = data.length; o < len; o++) {
        val = data[o];
        if ((val != null) && !isNaN(val)) {
          r.values.push(val);
          r.sum += val;
          if (val < r.min) {
            r.min = val;
          }
          if (val > r.max) {
            r.max = val;
          }
          r.count += 1;
        }
      }
      r.domain = [r.min, r.max];
      r.limits = function(mode, num) {
        return chroma.limits(r, mode, num);
      };
      return r;
    };

    chroma.scale = function(colors, positions) {
      var _classes, _colorCache, _colors, _correctLightness, _domain, _gamma, _max, _min, _mode, _nacol, _out, _padding, _pos, _spread, _useCache, f, getClass, getColor, resetCache, setColors, tmap;
      _mode = 'rgb';
      _nacol = chroma('#ccc');
      _spread = 0;
      _domain = [0, 1];
      _pos = [];
      _padding = [0, 0];
      _classes = false;
      _colors = [];
      _out = false;
      _min = 0;
      _max = 1;
      _correctLightness = false;
      _colorCache = {};
      _useCache = true;
      _gamma = 1;
      setColors = function(colors) {
        var c, col, o, ref, ref1, w;
        if (colors == null) {
          colors = ['#fff', '#000'];
        }
        if ((colors != null) && type(colors) === 'string' && (chroma.brewer != null)) {
          colors = chroma.brewer[colors] || chroma.brewer[colors.toLowerCase()] || colors;
        }
        if (type(colors) === 'array') {
          if (colors.length === 1) {
            colors = [colors[0], colors[0]];
          }
          colors = colors.slice(0);
          for (c = o = 0, ref = colors.length - 1; 0 <= ref ? o <= ref : o >= ref; c = 0 <= ref ? ++o : --o) {
            col = colors[c];
            if (type(col) === "string") {
              colors[c] = chroma(col);
            }
          }
          _pos.length = 0;
          for (c = w = 0, ref1 = colors.length - 1; 0 <= ref1 ? w <= ref1 : w >= ref1; c = 0 <= ref1 ? ++w : --w) {
            _pos.push(c / (colors.length - 1));
          }
        }
        resetCache();
        return _colors = colors;
      };
      getClass = function(value) {
        var i, n;
        if (_classes != null) {
          n = _classes.length - 1;
          i = 0;
          while (i < n && value >= _classes[i]) {
            i++;
          }
          return i - 1;
        }
        return 0;
      };
      tmap = function(t) {
        return t;
      };
      getColor = function(val, bypassMap) {
        var c, col, i, k, o, p, ref, t;
        if (bypassMap == null) {
          bypassMap = false;
        }
        if (isNaN(val) || val === null) {
          return _nacol;
        }
        if (!bypassMap) {
          if (_classes && _classes.length > 2) {
            c = getClass(val);
            t = c / (_classes.length - 2);
          } else if (_max !== _min) {
            t = (val - _min) / (_max - _min);
          } else {
            t = 1;
          }
        } else {
          t = val;
        }
        if (!bypassMap) {
          t = tmap(t);
        }
        if (_gamma !== 1) {
          t = pow(t, _gamma);
        }
        t = _padding[0] + (t * (1 - _padding[0] - _padding[1]));
        t = Math.min(1, Math.max(0, t));
        k = Math.floor(t * 10000);
        if (_useCache && _colorCache[k]) {
          col = _colorCache[k];
        } else {
          if (type(_colors) === 'array') {
            for (i = o = 0, ref = _pos.length - 1; 0 <= ref ? o <= ref : o >= ref; i = 0 <= ref ? ++o : --o) {
              p = _pos[i];
              if (t <= p) {
                col = _colors[i];
                break;
              }
              if (t >= p && i === _pos.length - 1) {
                col = _colors[i];
                break;
              }
              if (t > p && t < _pos[i + 1]) {
                t = (t - p) / (_pos[i + 1] - p);
                col = chroma.interpolate(_colors[i], _colors[i + 1], t, _mode);
                break;
              }
            }
          } else if (type(_colors) === 'function') {
            col = _colors(t);
          }
          if (_useCache) {
            _colorCache[k] = col;
          }
        }
        return col;
      };
      resetCache = function() {
        return _colorCache = {};
      };
      setColors(colors);
      f = function(v) {
        var c;
        c = chroma(getColor(v));
        if (_out && c[_out]) {
          return c[_out]();
        } else {
          return c;
        }
      };
      f.classes = function(classes) {
        var d;
        if (classes != null) {
          if (type(classes) === 'array') {
            _classes = classes;
            _domain = [classes[0], classes[classes.length - 1]];
          } else {
            d = chroma.analyze(_domain);
            if (classes === 0) {
              _classes = [d.min, d.max];
            } else {
              _classes = chroma.limits(d, 'e', classes);
            }
          }
          return f;
        }
        return _classes;
      };
      f.domain = function(domain) {
        var c, d, k, len, o, ref, w;
        if (!arguments.length) {
          return _domain;
        }
        _min = domain[0];
        _max = domain[domain.length - 1];
        _pos = [];
        k = _colors.length;
        if (domain.length === k && _min !== _max) {
          for (o = 0, len = domain.length; o < len; o++) {
            d = domain[o];
            _pos.push((d - _min) / (_max - _min));
          }
        } else {
          for (c = w = 0, ref = k - 1; 0 <= ref ? w <= ref : w >= ref; c = 0 <= ref ? ++w : --w) {
            _pos.push(c / (k - 1));
          }
        }
        _domain = [_min, _max];
        return f;
      };
      f.mode = function(_m) {
        if (!arguments.length) {
          return _mode;
        }
        _mode = _m;
        resetCache();
        return f;
      };
      f.range = function(colors, _pos) {
        setColors(colors, _pos);
        return f;
      };
      f.out = function(_o) {
        _out = _o;
        return f;
      };
      f.spread = function(val) {
        if (!arguments.length) {
          return _spread;
        }
        _spread = val;
        return f;
      };
      f.correctLightness = function(v) {
        if (v == null) {
          v = true;
        }
        _correctLightness = v;
        resetCache();
        if (_correctLightness) {
          tmap = function(t) {
            var L0, L1, L_actual, L_diff, L_ideal, max_iter, pol, t0, t1;
            L0 = getColor(0, true).lab()[0];
            L1 = getColor(1, true).lab()[0];
            pol = L0 > L1;
            L_actual = getColor(t, true).lab()[0];
            L_ideal = L0 + (L1 - L0) * t;
            L_diff = L_actual - L_ideal;
            t0 = 0;
            t1 = 1;
            max_iter = 20;
            while (Math.abs(L_diff) > 1e-2 && max_iter-- > 0) {
              (function() {
                if (pol) {
                  L_diff *= -1;
                }
                if (L_diff < 0) {
                  t0 = t;
                  t += (t1 - t) * 0.5;
                } else {
                  t1 = t;
                  t += (t0 - t) * 0.5;
                }
                L_actual = getColor(t, true).lab()[0];
                return L_diff = L_actual - L_ideal;
              })();
            }
            return t;
          };
        } else {
          tmap = function(t) {
            return t;
          };
        }
        return f;
      };
      f.padding = function(p) {
        if (p != null) {
          if (type(p) === 'number') {
            p = [p, p];
          }
          _padding = p;
          return f;
        } else {
          return _padding;
        }
      };
      f.colors = function(numColors, out) {
        var dd, dm, i, ref, result, results, samples, w;
        if (arguments.length < 2) {
          out = 'hex';
        }
        result = [];
        if (arguments.length === 0) {
          result = _colors.slice(0);
        } else if (numColors === 1) {
          result = [f(0.5)];
        } else if (numColors > 1) {
          dm = _domain[0];
          dd = _domain[1] - dm;
          result = (function() {
            results = [];
            for (var o = 0; 0 <= numColors ? o < numColors : o > numColors; 0 <= numColors ? o++ : o--){ results.push(o); }
            return results;
          }).apply(this).map(function(i) {
            return f(dm + i / (numColors - 1) * dd);
          });
        } else {
          colors = [];
          samples = [];
          if (_classes && _classes.length > 2) {
            for (i = w = 1, ref = _classes.length; 1 <= ref ? w < ref : w > ref; i = 1 <= ref ? ++w : --w) {
              samples.push((_classes[i - 1] + _classes[i]) * 0.5);
            }
          } else {
            samples = _domain;
          }
          result = samples.map(function(v) {
            return f(v);
          });
        }
        if (chroma[out]) {
          result = result.map(function(c) {
            return c[out]();
          });
        }
        return result;
      };
      f.cache = function(c) {
        if (c != null) {
          _useCache = c;
          return f;
        } else {
          return _useCache;
        }
      };
      f.gamma = function(g) {
        if (g != null) {
          _gamma = g;
          return f;
        } else {
          return _gamma;
        }
      };
      f.nodata = function(d) {
        if (d != null) {
          _nacol = chroma(d);
          return f;
        } else {
          return _nacol;
        }
      };
      return f;
    };

    if (chroma.scales == null) {
      chroma.scales = {};
    }

    chroma.scales.cool = function() {
      return chroma.scale([chroma.hsl(180, 1, .9), chroma.hsl(250, .7, .4)]);
    };

    chroma.scales.hot = function() {
      return chroma.scale(['#000', '#f00', '#ff0', '#fff'], [0, .25, .75, 1]).mode('rgb');
    };

    chroma.analyze = function(data, key, filter) {
      var add, k, len, o, r, val, visit;
      r = {
        min: Number.MAX_VALUE,
        max: Number.MAX_VALUE * -1,
        sum: 0,
        values: [],
        count: 0
      };
      if (filter == null) {
        filter = function() {
          return true;
        };
      }
      add = function(val) {
        if ((val != null) && !isNaN(val)) {
          r.values.push(val);
          r.sum += val;
          if (val < r.min) {
            r.min = val;
          }
          if (val > r.max) {
            r.max = val;
          }
          r.count += 1;
        }
      };
      visit = function(val, k) {
        if (filter(val, k)) {
          if ((key != null) && type(key) === 'function') {
            return add(key(val));
          } else if ((key != null) && type(key) === 'string' || type(key) === 'number') {
            return add(val[key]);
          } else {
            return add(val);
          }
        }
      };
      if (type(data) === 'array') {
        for (o = 0, len = data.length; o < len; o++) {
          val = data[o];
          visit(val);
        }
      } else {
        for (k in data) {
          val = data[k];
          visit(val, k);
        }
      }
      r.domain = [r.min, r.max];
      r.limits = function(mode, num) {
        return chroma.limits(r, mode, num);
      };
      return r;
    };

    chroma.limits = function(data, mode, num) {
      var aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, assignments, best, centroids, cluster, clusterSizes, dist, i, j, kClusters, limits, max_log, min, min_log, mindist, n, nb_iters, newCentroids, o, p, pb, pr, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, repeat, tmpKMeansBreaks, v, value, values, w;
      if (mode == null) {
        mode = 'equal';
      }
      if (num == null) {
        num = 7;
      }
      if (type(data) === 'array') {
        data = chroma.analyze(data);
      }
      min = data.min;
      max = data.max;
      values = data.values.sort(function(a, b) {
        return a - b;
      });
      if (num === 1) {
        return [min, max];
      }
      limits = [];
      if (mode.substr(0, 1) === 'c') {
        limits.push(min);
        limits.push(max);
      }
      if (mode.substr(0, 1) === 'e') {
        limits.push(min);
        for (i = o = 1, ref = num - 1; 1 <= ref ? o <= ref : o >= ref; i = 1 <= ref ? ++o : --o) {
          limits.push(min + (i / num) * (max - min));
        }
        limits.push(max);
      } else if (mode.substr(0, 1) === 'l') {
        if (min <= 0) {
          throw 'Logarithmic scales are only possible for values > 0';
        }
        min_log = Math.LOG10E * log(min);
        max_log = Math.LOG10E * log(max);
        limits.push(min);
        for (i = w = 1, ref1 = num - 1; 1 <= ref1 ? w <= ref1 : w >= ref1; i = 1 <= ref1 ? ++w : --w) {
          limits.push(pow(10, min_log + (i / num) * (max_log - min_log)));
        }
        limits.push(max);
      } else if (mode.substr(0, 1) === 'q') {
        limits.push(min);
        for (i = aa = 1, ref2 = num - 1; 1 <= ref2 ? aa <= ref2 : aa >= ref2; i = 1 <= ref2 ? ++aa : --aa) {
          p = (values.length - 1) * i / num;
          pb = floor(p);
          if (pb === p) {
            limits.push(values[pb]);
          } else {
            pr = p - pb;
            limits.push(values[pb] * (1 - pr) + values[pb + 1] * pr);
          }
        }
        limits.push(max);
      } else if (mode.substr(0, 1) === 'k') {

        /*
        implementation based on
        http://code.google.com/p/figue/source/browse/trunk/figue.js#336
        simplified for 1-d input values
         */
        n = values.length;
        assignments = new Array(n);
        clusterSizes = new Array(num);
        repeat = true;
        nb_iters = 0;
        centroids = null;
        centroids = [];
        centroids.push(min);
        for (i = ab = 1, ref3 = num - 1; 1 <= ref3 ? ab <= ref3 : ab >= ref3; i = 1 <= ref3 ? ++ab : --ab) {
          centroids.push(min + (i / num) * (max - min));
        }
        centroids.push(max);
        while (repeat) {
          for (j = ac = 0, ref4 = num - 1; 0 <= ref4 ? ac <= ref4 : ac >= ref4; j = 0 <= ref4 ? ++ac : --ac) {
            clusterSizes[j] = 0;
          }
          for (i = ad = 0, ref5 = n - 1; 0 <= ref5 ? ad <= ref5 : ad >= ref5; i = 0 <= ref5 ? ++ad : --ad) {
            value = values[i];
            mindist = Number.MAX_VALUE;
            for (j = ae = 0, ref6 = num - 1; 0 <= ref6 ? ae <= ref6 : ae >= ref6; j = 0 <= ref6 ? ++ae : --ae) {
              dist = abs(centroids[j] - value);
              if (dist < mindist) {
                mindist = dist;
                best = j;
              }
            }
            clusterSizes[best]++;
            assignments[i] = best;
          }
          newCentroids = new Array(num);
          for (j = af = 0, ref7 = num - 1; 0 <= ref7 ? af <= ref7 : af >= ref7; j = 0 <= ref7 ? ++af : --af) {
            newCentroids[j] = null;
          }
          for (i = ag = 0, ref8 = n - 1; 0 <= ref8 ? ag <= ref8 : ag >= ref8; i = 0 <= ref8 ? ++ag : --ag) {
            cluster = assignments[i];
            if (newCentroids[cluster] === null) {
              newCentroids[cluster] = values[i];
            } else {
              newCentroids[cluster] += values[i];
            }
          }
          for (j = ah = 0, ref9 = num - 1; 0 <= ref9 ? ah <= ref9 : ah >= ref9; j = 0 <= ref9 ? ++ah : --ah) {
            newCentroids[j] *= 1 / clusterSizes[j];
          }
          repeat = false;
          for (j = ai = 0, ref10 = num - 1; 0 <= ref10 ? ai <= ref10 : ai >= ref10; j = 0 <= ref10 ? ++ai : --ai) {
            if (newCentroids[j] !== centroids[i]) {
              repeat = true;
              break;
            }
          }
          centroids = newCentroids;
          nb_iters++;
          if (nb_iters > 200) {
            repeat = false;
          }
        }
        kClusters = {};
        for (j = aj = 0, ref11 = num - 1; 0 <= ref11 ? aj <= ref11 : aj >= ref11; j = 0 <= ref11 ? ++aj : --aj) {
          kClusters[j] = [];
        }
        for (i = ak = 0, ref12 = n - 1; 0 <= ref12 ? ak <= ref12 : ak >= ref12; i = 0 <= ref12 ? ++ak : --ak) {
          cluster = assignments[i];
          kClusters[cluster].push(values[i]);
        }
        tmpKMeansBreaks = [];
        for (j = al = 0, ref13 = num - 1; 0 <= ref13 ? al <= ref13 : al >= ref13; j = 0 <= ref13 ? ++al : --al) {
          tmpKMeansBreaks.push(kClusters[j][0]);
          tmpKMeansBreaks.push(kClusters[j][kClusters[j].length - 1]);
        }
        tmpKMeansBreaks = tmpKMeansBreaks.sort(function(a, b) {
          return a - b;
        });
        limits.push(tmpKMeansBreaks[0]);
        for (i = am = 1, ref14 = tmpKMeansBreaks.length - 1; am <= ref14; i = am += 2) {
          v = tmpKMeansBreaks[i];
          if (!isNaN(v) && limits.indexOf(v) === -1) {
            limits.push(v);
          }
        }
      }
      return limits;
    };

    hsi2rgb = function(h, s, i) {

      /*
      borrowed from here:
      http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/hsi2rgb.cpp
       */
      var args, b, g, r;
      args = unpack(arguments);
      h = args[0], s = args[1], i = args[2];
      if (isNaN(h)) {
        h = 0;
      }
      h /= 360;
      if (h < 1 / 3) {
        b = (1 - s) / 3;
        r = (1 + s * cos(TWOPI * h) / cos(PITHIRD - TWOPI * h)) / 3;
        g = 1 - (b + r);
      } else if (h < 2 / 3) {
        h -= 1 / 3;
        r = (1 - s) / 3;
        g = (1 + s * cos(TWOPI * h) / cos(PITHIRD - TWOPI * h)) / 3;
        b = 1 - (r + g);
      } else {
        h -= 2 / 3;
        g = (1 - s) / 3;
        b = (1 + s * cos(TWOPI * h) / cos(PITHIRD - TWOPI * h)) / 3;
        r = 1 - (g + b);
      }
      r = limit(i * r * 3);
      g = limit(i * g * 3);
      b = limit(i * b * 3);
      return [r * 255, g * 255, b * 255, args.length > 3 ? args[3] : 1];
    };

    rgb2hsi = function() {

      /*
      borrowed from here:
      http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/rgb2hsi.cpp
       */
      var b, g, h, i, min, r, ref, s;
      ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
      TWOPI = Math.PI * 2;
      r /= 255;
      g /= 255;
      b /= 255;
      min = Math.min(r, g, b);
      i = (r + g + b) / 3;
      s = 1 - min / i;
      if (s === 0) {
        h = 0;
      } else {
        h = ((r - g) + (r - b)) / 2;
        h /= Math.sqrt((r - g) * (r - g) + (r - b) * (g - b));
        h = Math.acos(h);
        if (b > g) {
          h = TWOPI - h;
        }
        h /= TWOPI;
      }
      return [h * 360, s, i];
    };

    chroma.hsi = function() {
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(Color, slice.call(arguments).concat(['hsi']), function(){});
    };

    _input.hsi = hsi2rgb;

    Color.prototype.hsi = function() {
      return rgb2hsi(this._rgb);
    };

    interpolate_hsx = function(col1, col2, f, m) {
      var dh, hue, hue0, hue1, lbv, lbv0, lbv1, sat, sat0, sat1, xyz0, xyz1;
      if (m === 'hsl') {
        xyz0 = col1.hsl();
        xyz1 = col2.hsl();
      } else if (m === 'hsv') {
        xyz0 = col1.hsv();
        xyz1 = col2.hsv();
      } else if (m === 'hcg') {
        xyz0 = col1.hcg();
        xyz1 = col2.hcg();
      } else if (m === 'hsi') {
        xyz0 = col1.hsi();
        xyz1 = col2.hsi();
      } else if (m === 'lch' || m === 'hcl') {
        m = 'hcl';
        xyz0 = col1.hcl();
        xyz1 = col2.hcl();
      }
      if (m.substr(0, 1) === 'h') {
        hue0 = xyz0[0], sat0 = xyz0[1], lbv0 = xyz0[2];
        hue1 = xyz1[0], sat1 = xyz1[1], lbv1 = xyz1[2];
      }
      if (!isNaN(hue0) && !isNaN(hue1)) {
        if (hue1 > hue0 && hue1 - hue0 > 180) {
          dh = hue1 - (hue0 + 360);
        } else if (hue1 < hue0 && hue0 - hue1 > 180) {
          dh = hue1 + 360 - hue0;
        } else {
          dh = hue1 - hue0;
        }
        hue = hue0 + f * dh;
      } else if (!isNaN(hue0)) {
        hue = hue0;
        if ((lbv1 === 1 || lbv1 === 0) && m !== 'hsv') {
          sat = sat0;
        }
      } else if (!isNaN(hue1)) {
        hue = hue1;
        if ((lbv0 === 1 || lbv0 === 0) && m !== 'hsv') {
          sat = sat1;
        }
      } else {
        hue = Number.NaN;
      }
      if (sat == null) {
        sat = sat0 + f * (sat1 - sat0);
      }
      lbv = lbv0 + f * (lbv1 - lbv0);
      return chroma[m](hue, sat, lbv);
    };

    _interpolators = _interpolators.concat((function() {
      var len, o, ref, results;
      ref = ['hsv', 'hsl', 'hsi', 'hcl', 'lch', 'hcg'];
      results = [];
      for (o = 0, len = ref.length; o < len; o++) {
        m = ref[o];
        results.push([m, interpolate_hsx]);
      }
      return results;
    })());

    interpolate_num = function(col1, col2, f, m) {
      var n1, n2;
      n1 = col1.num();
      n2 = col2.num();
      return chroma.num(n1 + (n2 - n1) * f, 'num');
    };

    _interpolators.push(['num', interpolate_num]);

    interpolate_lab = function(col1, col2, f, m) {
      var xyz0, xyz1;
      xyz0 = col1.lab();
      xyz1 = col2.lab();
      return new Color(xyz0[0] + f * (xyz1[0] - xyz0[0]), xyz0[1] + f * (xyz1[1] - xyz0[1]), xyz0[2] + f * (xyz1[2] - xyz0[2]), m);
    };

    _interpolators.push(['lab', interpolate_lab]);

  }).call(commonjsGlobal);
  });

  /**
   * @file Colormaker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Internal color space for all colors (global).
   * Colors are always specified as sRGB; if this is set to
   * 'linear' then colors get linearized when used internally
   * as vertex or texture colors.
   * @see setColorSpace/getColorSpace.
   */
  var colorSpace = 'sRGB'; // default: don't linearize
  /** Set the global internal color space for colormakers */
  function setColorSpace(space) {
      colorSpace = space;
  }
  var ScaleDefaultParameters = {
      scale: 'uniform',
      mode: 'hcl',
      domain: [0, 1],
      value: 0xFFFFFF,
      reverse: false,
  };
  var tmpColor$1 = new Color();
  function manageColor(_target, _name, descriptor) {
      var originalMethod = descriptor.value;
      var linearize = function (value, fromTo) {
          var result = originalMethod.bind(this, value, fromTo)();
          if (colorSpace == 'linear') {
              tmpColor$1.set(result);
              tmpColor$1.convertSRGBToLinear();
              return tmpColor$1.getHex();
          }
          else {
              return result;
          }
      };
      descriptor.value = linearize;
      return descriptor;
  }
  /**
   * Class for making colors.
   * @interface
   */
  var Colormaker = function Colormaker(params) {
      if ( params === void 0 ) params = {};

      this.parameters = createParams(params, ScaleDefaultParameters);
      if (typeof this.parameters.value === 'string') {
          this.parameters.value = tmpColor$1.set(this.parameters.value).getHex();
      }
      if (this.parameters.structure) {
          this.atomProxy = this.parameters.structure.getAtomProxy();
      }
  };
  Colormaker.prototype.getScale = function getScale (params) {
          if ( params === void 0 ) params = {};

      var p = createParams(params, this.parameters);
      if (p.scale === 'rainbow') {
          p.scale = ['red', 'orange', 'yellow', 'green', 'blue'];
      }
      else if (p.scale === 'rwb') {
          p.scale = ['red', 'white', 'blue'];
      }
      if (p.reverse) {
          p.domain = p.domain.slice().reverse();
      }
      return chroma.scale(p.scale) // TODO
          .mode(p.mode)
          .domain(p.domain)
          .out('num'); // returns RGB color as numeric (not string "#ffffff")
  };
  /**
   * save a color to an array
   * @param  {Integer} color - hex color value
   * @param  {Array|TypedArray} array - destination
   * @param  {Integer} offset - index into the array
   * @return {Array} the destination array
   */
  Colormaker.prototype.colorToArray = function colorToArray (color, array, offset) {
          if ( array === void 0 ) array = [];
          if ( offset === void 0 ) offset = 0;

      array[offset] = (color >> 16 & 255) / 255;
      array[offset + 1] = (color >> 8 & 255) / 255;
      array[offset + 2] = (color & 255) / 255;
      return array;
  };
  /**
   * save an atom color to an array
   * @param  {AtomProxy} atom - atom to get color for
   * @param  {Array|TypedArray} array - destination
   * @param  {Integer} offset - index into the array
   * @return {Array} the destination array
   */
  Colormaker.prototype.atomColorToArray = function atomColorToArray (atom, array, offset) {
      return this.colorToArray(this.atomColor ? this.atomColor(atom) : 0x000000, array, offset);
  };
  /**
   * return the color for an bond
   * @param  {BondProxy} bond - bond to get color for
   * @param  {Boolean} fromTo - whether to use the first or second atom of the bond
   * @return {Integer} hex bond color
   */
  Colormaker.prototype.bondColor = function bondColor (bond, fromTo) {
      if (this.atomProxy && this.atomColor) {
          this.atomProxy.index = fromTo ? bond.atomIndex1 : bond.atomIndex2;
          return this.atomColor(this.atomProxy);
      }
      else {
          return 0x000000;
      }
  };
  /**
   * safe a bond color to an array
   * @param  {BondProxy} bond - bond to get color for
   * @param  {Boolean} fromTo - whether to use the first or second atom of the bond
   * @param  {Array|TypedArray} array - destination
   * @param  {Integer} offset - index into the array
   * @return {Array} the destination array
   */
  Colormaker.prototype.bondColorToArray = function bondColorToArray (bond, fromTo, array, offset) {
      return this.colorToArray(this.bondColor(bond, fromTo), array, offset);
  };
  /**
   * safe a volume cell color to an array
   * @param  {Integer} index - volume cell index
   * @param  {Array|TypedArray} array - destination
   * @param  {Integer} offset - index into the array
   * @return {Array} the destination array
   */
  Colormaker.prototype.volumeColorToArray = function volumeColorToArray (index, array, offset) {
      return this.colorToArray(this.volumeColor ? this.volumeColor(index) : 0x000000, array, offset);
  };
  /**
   * safe a color for coordinates in space to an array
   * @param  {Vector3} coords - xyz coordinates
   * @param  {Array|TypedArray} array - destination
   * @param  {Integer} offset - index into the array
   * @return {Array} the destination array
   */
  Colormaker.prototype.positionColorToArray = function positionColorToArray (coords, array, offset) {
      return this.colorToArray(this.positionColor ? this.positionColor(coords) : 0x000000, array, offset);
  };

  /*jslint onevar:true, undef:true, newcap:true, regexp:true, bitwise:true, maxerr:50, indent:4, white:false, nomen:false, plusplus:false */

  var signals = createCommonjsModule(function (module) {
  /*global define:false, require:false, exports:false, module:false, signals:false */

  /** @license
   * JS Signals <http://millermedeiros.github.com/js-signals/>
   * Released under the MIT license
   * Author: Miller Medeiros
   * Version: 1.0.0 - Build: 268 (2012/11/29 05:48 PM)
   */

  (function(global){

      // SignalBinding -------------------------------------------------
      //================================================================

      /**
       * Object that represents a binding between a Signal and a listener function.
       * <br />- <strong>This is an internal constructor and shouldn't be called by regular users.</strong>
       * <br />- inspired by Joa Ebert AS3 SignalBinding and Robert Penner's Slot classes.
       * @author Miller Medeiros
       * @constructor
       * @internal
       * @name SignalBinding
       * @param {Signal} signal Reference to Signal object that listener is currently bound to.
       * @param {Function} listener Handler function bound to the signal.
       * @param {boolean} isOnce If binding should be executed just once.
       * @param {Object} [listenerContext] Context on which listener will be executed (object that should represent the `this` variable inside listener function).
       * @param {Number} [priority] The priority level of the event listener. (default = 0).
       */
      function SignalBinding(signal, listener, isOnce, listenerContext, priority) {

          /**
           * Handler function bound to the signal.
           * @type Function
           * @private
           */
          this._listener = listener;

          /**
           * If binding should be executed just once.
           * @type boolean
           * @private
           */
          this._isOnce = isOnce;

          /**
           * Context on which listener will be executed (object that should represent the `this` variable inside listener function).
           * @memberOf SignalBinding.prototype
           * @name context
           * @type Object|undefined|null
           */
          this.context = listenerContext;

          /**
           * Reference to Signal object that listener is currently bound to.
           * @type Signal
           * @private
           */
          this._signal = signal;

          /**
           * Listener priority
           * @type Number
           * @private
           */
          this._priority = priority || 0;
      }

      SignalBinding.prototype = {

          /**
           * If binding is active and should be executed.
           * @type boolean
           */
          active : true,

          /**
           * Default parameters passed to listener during `Signal.dispatch` and `SignalBinding.execute`. (curried parameters)
           * @type Array|null
           */
          params : null,

          /**
           * Call listener passing arbitrary parameters.
           * <p>If binding was added using `Signal.addOnce()` it will be automatically removed from signal dispatch queue, this method is used internally for the signal dispatch.</p>
           * @param {Array} [paramsArr] Array of parameters that should be passed to the listener
           * @return {*} Value returned by the listener.
           */
          execute : function (paramsArr) {
              var handlerReturn, params;
              if (this.active && !!this._listener) {
                  params = this.params? this.params.concat(paramsArr) : paramsArr;
                  handlerReturn = this._listener.apply(this.context, params);
                  if (this._isOnce) {
                      this.detach();
                  }
              }
              return handlerReturn;
          },

          /**
           * Detach binding from signal.
           * - alias to: mySignal.remove(myBinding.getListener());
           * @return {Function|null} Handler function bound to the signal or `null` if binding was previously detached.
           */
          detach : function () {
              return this.isBound()? this._signal.remove(this._listener, this.context) : null;
          },

          /**
           * @return {Boolean} `true` if binding is still bound to the signal and have a listener.
           */
          isBound : function () {
              return (!!this._signal && !!this._listener);
          },

          /**
           * @return {boolean} If SignalBinding will only be executed once.
           */
          isOnce : function () {
              return this._isOnce;
          },

          /**
           * @return {Function} Handler function bound to the signal.
           */
          getListener : function () {
              return this._listener;
          },

          /**
           * @return {Signal} Signal that listener is currently bound to.
           */
          getSignal : function () {
              return this._signal;
          },

          /**
           * Delete instance properties
           * @private
           */
          _destroy : function () {
              delete this._signal;
              delete this._listener;
              delete this.context;
          },

          /**
           * @return {string} String representation of the object.
           */
          toString : function () {
              return '[SignalBinding isOnce:' + this._isOnce +', isBound:'+ this.isBound() +', active:' + this.active + ']';
          }

      };


  /*global SignalBinding:false*/

      // Signal --------------------------------------------------------
      //================================================================

      function validateListener(listener, fnName) {
          if (typeof listener !== 'function') {
              throw new Error( 'listener is a required param of {fn}() and should be a Function.'.replace('{fn}', fnName) );
          }
      }

      /**
       * Custom event broadcaster
       * <br />- inspired by Robert Penner's AS3 Signals.
       * @name Signal
       * @author Miller Medeiros
       * @constructor
       */
      function Signal() {
          /**
           * @type Array.<SignalBinding>
           * @private
           */
          this._bindings = [];
          this._prevParams = null;

          // enforce dispatch to aways work on same context (#47)
          var self = this;
          this.dispatch = function(){
              Signal.prototype.dispatch.apply(self, arguments);
          };
      }

      Signal.prototype = {

          /**
           * Signals Version Number
           * @type String
           * @const
           */
          VERSION : '1.0.0',

          /**
           * If Signal should keep record of previously dispatched parameters and
           * automatically execute listener during `add()`/`addOnce()` if Signal was
           * already dispatched before.
           * @type boolean
           */
          memorize : false,

          /**
           * @type boolean
           * @private
           */
          _shouldPropagate : true,

          /**
           * If Signal is active and should broadcast events.
           * <p><strong>IMPORTANT:</strong> Setting this property during a dispatch will only affect the next dispatch, if you want to stop the propagation of a signal use `halt()` instead.</p>
           * @type boolean
           */
          active : true,

          /**
           * @param {Function} listener
           * @param {boolean} isOnce
           * @param {Object} [listenerContext]
           * @param {Number} [priority]
           * @return {SignalBinding}
           * @private
           */
          _registerListener : function (listener, isOnce, listenerContext, priority) {

              var prevIndex = this._indexOfListener(listener, listenerContext),
                  binding;

              if (prevIndex !== -1) {
                  binding = this._bindings[prevIndex];
                  if (binding.isOnce() !== isOnce) {
                      throw new Error('You cannot add'+ (isOnce? '' : 'Once') +'() then add'+ (!isOnce? '' : 'Once') +'() the same listener without removing the relationship first.');
                  }
              } else {
                  binding = new SignalBinding(this, listener, isOnce, listenerContext, priority);
                  this._addBinding(binding);
              }

              if(this.memorize && this._prevParams){
                  binding.execute(this._prevParams);
              }

              return binding;
          },

          /**
           * @param {SignalBinding} binding
           * @private
           */
          _addBinding : function (binding) {
              //simplified insertion sort
              var n = this._bindings.length;
              do { --n; } while (this._bindings[n] && binding._priority <= this._bindings[n]._priority);
              this._bindings.splice(n + 1, 0, binding);
          },

          /**
           * @param {Function} listener
           * @return {number}
           * @private
           */
          _indexOfListener : function (listener, context) {
              var n = this._bindings.length,
                  cur;
              while (n--) {
                  cur = this._bindings[n];
                  if (cur._listener === listener && cur.context === context) {
                      return n;
                  }
              }
              return -1;
          },

          /**
           * Check if listener was attached to Signal.
           * @param {Function} listener
           * @param {Object} [context]
           * @return {boolean} if Signal has the specified listener.
           */
          has : function (listener, context) {
              return this._indexOfListener(listener, context) !== -1;
          },

          /**
           * Add a listener to the signal.
           * @param {Function} listener Signal handler function.
           * @param {Object} [listenerContext] Context on which listener will be executed (object that should represent the `this` variable inside listener function).
           * @param {Number} [priority] The priority level of the event listener. Listeners with higher priority will be executed before listeners with lower priority. Listeners with same priority level will be executed at the same order as they were added. (default = 0)
           * @return {SignalBinding} An Object representing the binding between the Signal and listener.
           */
          add : function (listener, listenerContext, priority) {
              validateListener(listener, 'add');
              return this._registerListener(listener, false, listenerContext, priority);
          },

          /**
           * Add listener to the signal that should be removed after first execution (will be executed only once).
           * @param {Function} listener Signal handler function.
           * @param {Object} [listenerContext] Context on which listener will be executed (object that should represent the `this` variable inside listener function).
           * @param {Number} [priority] The priority level of the event listener. Listeners with higher priority will be executed before listeners with lower priority. Listeners with same priority level will be executed at the same order as they were added. (default = 0)
           * @return {SignalBinding} An Object representing the binding between the Signal and listener.
           */
          addOnce : function (listener, listenerContext, priority) {
              validateListener(listener, 'addOnce');
              return this._registerListener(listener, true, listenerContext, priority);
          },

          /**
           * Remove a single listener from the dispatch queue.
           * @param {Function} listener Handler function that should be removed.
           * @param {Object} [context] Execution context (since you can add the same handler multiple times if executing in a different context).
           * @return {Function} Listener handler function.
           */
          remove : function (listener, context) {
              validateListener(listener, 'remove');

              var i = this._indexOfListener(listener, context);
              if (i !== -1) {
                  this._bindings[i]._destroy(); //no reason to a SignalBinding exist if it isn't attached to a signal
                  this._bindings.splice(i, 1);
              }
              return listener;
          },

          /**
           * Remove all listeners from the Signal.
           */
          removeAll : function () {
              var n = this._bindings.length;
              while (n--) {
                  this._bindings[n]._destroy();
              }
              this._bindings.length = 0;
          },

          /**
           * @return {number} Number of listeners attached to the Signal.
           */
          getNumListeners : function () {
              return this._bindings.length;
          },

          /**
           * Stop propagation of the event, blocking the dispatch to next listeners on the queue.
           * <p><strong>IMPORTANT:</strong> should be called only during signal dispatch, calling it before/after dispatch won't affect signal broadcast.</p>
           * @see Signal.prototype.disable
           */
          halt : function () {
              this._shouldPropagate = false;
          },

          /**
           * Dispatch/Broadcast Signal to all listeners added to the queue.
           * @param {...*} [params] Parameters that should be passed to each handler.
           */
          dispatch : function (params) {
              if (! this.active) {
                  return;
              }

              var paramsArr = Array.prototype.slice.call(arguments),
                  n = this._bindings.length,
                  bindings;

              if (this.memorize) {
                  this._prevParams = paramsArr;
              }

              if (! n) {
                  //should come after memorize
                  return;
              }

              bindings = this._bindings.slice(); //clone array in case add/remove items during dispatch
              this._shouldPropagate = true; //in case `halt` was called before dispatch or during the previous dispatch.

              //execute all callbacks until end of the list or until a callback returns `false` or stops propagation
              //reverse loop since listeners with higher priority will be added at the end of the list
              do { n--; } while (bindings[n] && this._shouldPropagate && bindings[n].execute(paramsArr) !== false);
          },

          /**
           * Forget memorized arguments.
           * @see Signal.memorize
           */
          forget : function(){
              this._prevParams = null;
          },

          /**
           * Remove all bindings from signal and destroy any reference to external objects (destroy Signal object).
           * <p><strong>IMPORTANT:</strong> calling any method on the signal instance after calling dispose will throw errors.</p>
           */
          dispose : function () {
              this.removeAll();
              delete this._bindings;
              delete this._prevParams;
          },

          /**
           * @return {string} String representation of the object.
           */
          toString : function () {
              return '[Signal active:'+ this.active +' numListeners:'+ this.getNumListeners() +']';
          }

      };


      // Namespace -----------------------------------------------------
      //================================================================

      /**
       * Signals namespace
       * @namespace
       * @name signals
       */
      var signals = Signal;

      /**
       * Custom event broadcaster
       * @see Signal
       */
      // alias for backwards compatibility (see #gh-44)
      signals.Signal = Signal;



      //exports to multiple environments
      if (module.exports){ //node
          module.exports = signals;
      } else { //browser
          //use string because of Google closure compiler ADVANCED_MODE
          /*jslint sub:true */
          global['signals'] = signals;
      }

  }(commonjsGlobal));
  });

  /**
   * @file Selection Constants
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var kwd;
  (function (kwd) {
      kwd[kwd["PROTEIN"] = 1] = "PROTEIN";
      kwd[kwd["NUCLEIC"] = 2] = "NUCLEIC";
      kwd[kwd["RNA"] = 3] = "RNA";
      kwd[kwd["DNA"] = 4] = "DNA";
      kwd[kwd["POLYMER"] = 5] = "POLYMER";
      kwd[kwd["WATER"] = 6] = "WATER";
      kwd[kwd["HELIX"] = 7] = "HELIX";
      kwd[kwd["SHEET"] = 8] = "SHEET";
      kwd[kwd["TURN"] = 9] = "TURN";
      kwd[kwd["BACKBONE"] = 10] = "BACKBONE";
      kwd[kwd["SIDECHAIN"] = 11] = "SIDECHAIN";
      kwd[kwd["ALL"] = 12] = "ALL";
      kwd[kwd["HETERO"] = 13] = "HETERO";
      kwd[kwd["ION"] = 14] = "ION";
      kwd[kwd["SACCHARIDE"] = 15] = "SACCHARIDE";
      kwd[kwd["SUGAR"] = 15] = "SUGAR";
      kwd[kwd["BONDED"] = 16] = "BONDED";
      kwd[kwd["RING"] = 17] = "RING";
      kwd[kwd["AROMATICRING"] = 18] = "AROMATICRING";
      kwd[kwd["METAL"] = 19] = "METAL";
      kwd[kwd["POLARH"] = 20] = "POLARH";
      kwd[kwd["NONE"] = 21] = "NONE";
  })(kwd || (kwd = {}));
  var SelectAllKeyword = ['*', '', 'ALL'];
  var SelectNoneKeyword = ['NONE'];
  var AtomOnlyKeywords = [
      kwd.BACKBONE, kwd.SIDECHAIN, kwd.BONDED, kwd.RING, kwd.AROMATICRING, kwd.METAL, kwd.POLARH
  ];
  var ChainKeywords = [
      kwd.POLYMER, kwd.WATER
  ];
  var SmallResname = ['ALA', 'GLY', 'SER'];
  var NucleophilicResname = ['CYS', 'SER', 'THR'];
  var HydrophobicResname = ['ALA', 'ILE', 'LEU', 'MET', 'PHE', 'PRO', 'TRP', 'VAL'];
  var AromaticResname = ['PHE', 'TRP', 'TYR', 'HIS'];
  var AmideResname = ['ASN', 'GLN'];
  var AcidicResname = ['ASP', 'GLU'];
  var BasicResname = ['ARG', 'HIS', 'LYS'];
  var ChargedResname = ['ARG', 'ASP', 'GLU', 'HIS', 'LYS'];
  var PolarResname = ['ASN', 'ARG', 'ASP', 'CYS', 'GLY', 'GLN', 'GLU', 'HIS', 'LYS', 'SER', 'THR', 'TYR'];
  var NonpolarResname = ['ALA', 'ILE', 'LEU', 'MET', 'PHE', 'PRO', 'TRP', 'VAL'];
  var CyclicResname = ['HIS', 'PHE', 'PRO', 'TRP', 'TYR'];
  var AliphaticResname = ['ALA', 'GLY', 'ILE', 'LEU', 'VAL'];

  /**
   * @file Selection Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function parseSele(string) {
      var retSelection = {
          operator: undefined,
          rules: []
      };
      if (!string) {
          return retSelection;
      }
      var selection = retSelection;
      var newSelection;
      var oldSelection;
      var selectionStack = [];
      string = string.replace(/\(/g, ' ( ').replace(/\)/g, ' ) ').trim();
      if (string.charAt(0) === '(' && string.substr(-1) === ')') {
          string = string.slice(1, -1).trim();
      }
      var chunks = string.split(/\s+/);
      // Log.log( string, chunks )
      var createNewContext = function (operator) {
          newSelection = {
              operator: operator,
              rules: []
          };
          if (selection === undefined) {
              selection = newSelection;
              retSelection = newSelection;
          }
          else {
              selection.rules.push(newSelection);
              selectionStack.push(selection);
              selection = newSelection;
          }
      };
      var getPrevContext = function (operator) {
          oldSelection = selection;
          selection = selectionStack.pop();
          if (selection === undefined) {
              createNewContext(operator);
              pushRule(oldSelection);
          }
      };
      var pushRule = function (rule) {
          selection.rules.push(rule);
      };
      var not = false;
      for (var i = 0; i < chunks.length; ++i) {
          var c = chunks[i];
          var cu = c.toUpperCase();
          // handle parens
          if (c === '(') {
              // Log.log( "(" );
              not = false;
              createNewContext();
              continue;
          }
          else if (c === ')') {
              // Log.log( ")" );
              getPrevContext();
              if (selection.negate) {
                  getPrevContext();
              }
              continue;
          }
          // leave 'not' context
          if (not > 0) {
              if (cu === 'NOT') {
                  not = 1;
              }
              else if (not === 1) {
                  not = 2;
              }
              else if (not === 2) {
                  not = false;
                  getPrevContext();
              }
              else {
                  throw new Error("something went wrong with 'not'");
              }
          }
          // handle logic operators
          if (cu === 'AND') {
              // Log.log( "AND" );
              if (selection.operator === 'OR') {
                  var lastRule = selection.rules.pop();
                  createNewContext('AND');
                  pushRule(lastRule);
              }
              else {
                  selection.operator = 'AND';
              }
              continue;
          }
          else if (cu === 'OR') {
              // Log.log( "OR" );
              if (selection.operator === 'AND') {
                  getPrevContext('OR');
              }
              else {
                  selection.operator = 'OR';
              }
              continue;
          }
          else if (c.toUpperCase() === 'NOT') {
              // Log.log( "NOT", j );
              not = 1;
              createNewContext();
              selection.negate = true;
              continue;
          }
          else ;
          // handle keyword attributes
          // ensure `cu` is not a number before testing if it is in the
          // kwd enum dictionary which includes the enum numbers as well...
          if (+cu !== +cu) {
              var keyword = kwd[cu];
              if (keyword !== undefined) {
                  pushRule({ keyword: keyword });
                  continue;
              }
          }
          if (cu === 'HYDROGEN') {
              pushRule({
                  operator: 'OR',
                  rules: [
                      { element: 'H' },
                      { element: 'D' }
                  ]
              });
              continue;
          }
          if (cu === 'SMALL') {
              pushRule({ resname: SmallResname });
              continue;
          }
          if (cu === 'NUCLEOPHILIC') {
              pushRule({ resname: NucleophilicResname });
              continue;
          }
          if (cu === 'HYDROPHOBIC') {
              pushRule({ resname: HydrophobicResname });
              continue;
          }
          if (cu === 'AROMATIC') {
              pushRule({ resname: AromaticResname });
              continue;
          }
          if (cu === 'AMIDE') {
              pushRule({ resname: AmideResname });
              continue;
          }
          if (cu === 'ACIDIC') {
              pushRule({ resname: AcidicResname });
              continue;
          }
          if (cu === 'BASIC') {
              pushRule({ resname: BasicResname });
              continue;
          }
          if (cu === 'CHARGED') {
              pushRule({ resname: ChargedResname });
              continue;
          }
          if (cu === 'POLAR') {
              pushRule({ resname: PolarResname });
              continue;
          }
          if (cu === 'NONPOLAR') {
              pushRule({ resname: NonpolarResname });
              continue;
          }
          if (cu === 'CYCLIC') {
              pushRule({ resname: CyclicResname });
              continue;
          }
          if (cu === 'ALIPHATIC') {
              pushRule({ resname: AliphaticResname });
              continue;
          }
          if (cu === 'SIDECHAINATTACHED') {
              pushRule({
                  operator: 'OR',
                  rules: [
                      { keyword: kwd.SIDECHAIN },
                      {
                          operator: 'AND',
                          negate: false,
                          rules: [
                              { keyword: kwd.PROTEIN },
                              {
                                  operator: 'OR',
                                  negate: false,
                                  rules: [
                                      { atomname: 'CA' },
                                      { atomname: 'BB' }
                                  ]
                              }
                          ]
                      },
                      {
                          operator: 'AND',
                          negate: false,
                          rules: [
                              { resname: 'PRO' },
                              { atomname: 'N' }
                          ]
                      },
                      {
                          operator: 'AND',
                          negate: false,
                          rules: [
                              { keyword: kwd.NUCLEIC },
                              {
                                  operator: 'OR',
                                  negate: true,
                                  rules: [
                                      { atomname: 'P' },
                                      { atomname: 'OP1' },
                                      { atomname: 'OP2' },
                                      { atomname: "O3'" },
                                      { atomname: 'O3*' },
                                      { atomname: "HO3'" },
                                      { atomname: "O5'" },
                                      { atomname: 'O5*' },
                                      { atomname: "HO5'" },
                                      { atomname: "C5'" },
                                      { atomname: 'C5*' },
                                      { atomname: "H5'" },
                                      { atomname: "H5''" }
                                  ]
                              }
                          ]
                      }
                  ]
              });
              continue;
          }
          if (cu === 'APOLARH') {
              pushRule({
                  operator: 'AND',
                  negate: false,
                  rules: [
                      { element: 'H' },
                      {
                          negate: true,
                          operator: undefined,
                          rules: [
                              { keyword: kwd.POLARH }
                          ]
                      }
                  ]
              });
              continue;
          }
          if (cu === 'LIGAND') {
              pushRule({
                  operator: 'AND',
                  rules: [
                      {
                          operator: 'OR',
                          rules: [
                              {
                                  operator: 'AND',
                                  rules: [
                                      { keyword: kwd.HETERO },
                                      {
                                          negate: true,
                                          operator: undefined,
                                          rules: [
                                              { keyword: kwd.POLYMER }
                                          ]
                                      }
                                  ]
                              },
                              {
                                  negate: true,
                                  operator: undefined,
                                  rules: [
                                      { keyword: kwd.POLYMER }
                                  ]
                              }
                          ]
                      },
                      {
                          negate: true,
                          operator: undefined,
                          rules: [
                              {
                                  operator: 'OR',
                                  rules: [
                                      { keyword: kwd.WATER },
                                      { keyword: kwd.ION }
                                  ]
                              }
                          ]
                      }
                  ]
              });
              continue;
          }
          if (SelectAllKeyword.indexOf(cu) !== -1) {
              pushRule({ keyword: kwd.ALL });
              continue;
          }
          // handle atom expressions
          if (c.charAt(0) === '@') {
              var indexList = c.substr(1).split(',').map(function (x) { return parseInt(x); });
              indexList.sort(function (a, b) { return a - b; });
              pushRule({ atomindex: indexList });
              continue;
          }
          if (c.charAt(0) === '#') {
              console.error('# for element selection deprecated, use _');
              pushRule({ element: cu.substr(1) });
              continue;
          }
          if (c.charAt(0) === '_') {
              pushRule({ element: cu.substr(1) });
              continue;
          }
          if (c[0] === '[' && c[c.length - 1] === ']') {
              var resnameList = cu.substr(1, c.length - 2).split(',');
              var resname = resnameList.length > 1 ? resnameList : resnameList[0];
              pushRule({ resname: resname });
              continue;
          }
          else if ((c.length >= 1 && c.length <= 4) &&
              c[0] !== '^' && c[0] !== ':' && c[0] !== '.' && c[0] !== '%' && c[0] !== '/' &&
              isNaN(parseInt(c))) {
              pushRule({ resname: cu });
              continue;
          }
          // there must be only one constraint per rule
          // otherwise a test quickly becomes not applicable
          // e.g. chainTest for chainname when resno is present too
          var sele = {
              operator: 'AND',
              rules: []
          };
          var model = c.split('/');
          if (model.length > 1 && model[1]) {
              if (isNaN(parseInt(model[1]))) {
                  throw new Error('model must be an integer');
              }
              sele.rules.push({
                  model: parseInt(model[1])
              });
          }
          var altloc = model[0].split('%');
          if (altloc.length > 1) {
              sele.rules.push({
                  altloc: altloc[1]
              });
          }
          var atomname = altloc[0].split('.');
          if (atomname.length > 1 && atomname[1]) {
              if (atomname[1].length > 4) {
                  throw new Error('atomname must be one to four characters');
              }
              sele.rules.push({
                  atomname: atomname[1].substring(0, 4).toUpperCase()
              });
          }
          var chain = atomname[0].split(':');
          if (chain.length > 1 && chain[1]) {
              sele.rules.push({
                  chainname: chain[1]
              });
          }
          var inscode = chain[0].split('^');
          if (inscode.length > 1) {
              sele.rules.push({
                  inscode: inscode[1]
              });
          }
          if (inscode[0]) {
              var negate = (void 0), negate2 = (void 0);
              if (inscode[0][0] === '-') {
                  inscode[0] = inscode[0].substr(1);
                  negate = true;
              }
              if (inscode[0].includes('--')) {
                  inscode[0] = inscode[0].replace('--', '-');
                  negate2 = true;
              }
              var resi = inscode[0].split('-');
              if (resi.length === 1) {
                  var resiSingle = parseInt(resi[0]);
                  if (isNaN(resiSingle)) {
                      throw new Error('resi must be an integer');
                  }
                  if (negate)
                      { resiSingle *= -1; }
                  sele.rules.push({
                      resno: resiSingle
                  });
              }
              else if (resi.length === 2) {
                  var resiRange = resi.map(function (x) { return parseInt(x); });
                  if (negate)
                      { resiRange[0] *= -1; }
                  if (negate2)
                      { resiRange[1] *= -1; }
                  sele.rules.push({
                      resno: [resiRange[0], resiRange[1]]
                  });
              }
              else {
                  throw new Error("resi range must contain one '-'");
              }
          }
          // round up
          if (sele.rules.length === 1) {
              pushRule(sele.rules[0]);
          }
          else if (sele.rules.length > 1) {
              pushRule(sele);
          }
          else {
              throw new Error('empty selection chunk');
          }
      }
      // cleanup
      if (retSelection.operator === undefined &&
          retSelection.rules.length === 1 &&
          retSelection.rules[0].hasOwnProperty('operator')) {
          retSelection = retSelection.rules[0];
      }
      return retSelection;
  }

  /**
   * @file Selection Test
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function atomTestFn(a, s) {
      // returning -1 means the rule is not applicable
      if (s.atomname === undefined && s.element === undefined &&
          s.altloc === undefined && s.atomindex === undefined &&
          s.keyword === undefined && s.inscode === undefined &&
          s.resname === undefined && s.sstruc === undefined &&
          s.resno === undefined && s.chainname === undefined &&
          s.model === undefined)
          { return -1; }
      if (s.keyword !== undefined) {
          if (s.keyword === kwd.BACKBONE && !a.isBackbone())
              { return false; }
          if (s.keyword === kwd.SIDECHAIN && !a.isSidechain())
              { return false; }
          if (s.keyword === kwd.BONDED && !a.isBonded())
              { return false; }
          if (s.keyword === kwd.RING && !a.isRing())
              { return false; }
          if (s.keyword === kwd.AROMATICRING && !a.isAromatic())
              { return false; }
          if (s.keyword === kwd.HETERO && !a.isHetero())
              { return false; }
          if (s.keyword === kwd.PROTEIN && !a.isProtein())
              { return false; }
          if (s.keyword === kwd.NUCLEIC && !a.isNucleic())
              { return false; }
          if (s.keyword === kwd.RNA && !a.isRna())
              { return false; }
          if (s.keyword === kwd.DNA && !a.isDna())
              { return false; }
          if (s.keyword === kwd.POLYMER && !a.isPolymer())
              { return false; }
          if (s.keyword === kwd.WATER && !a.isWater())
              { return false; }
          if (s.keyword === kwd.HELIX && !a.isHelix())
              { return false; }
          if (s.keyword === kwd.SHEET && !a.isSheet())
              { return false; }
          if (s.keyword === kwd.TURN && !a.isTurn())
              { return false; }
          if (s.keyword === kwd.ION && !a.isIon())
              { return false; }
          if (s.keyword === kwd.SACCHARIDE && !a.isSaccharide())
              { return false; }
          if (s.keyword === kwd.METAL && !a.isMetal())
              { return false; }
          if (s.keyword === kwd.POLARH && !a.isPolarHydrogen())
              { return false; }
      }
      if (s.atomname !== undefined && s.atomname !== a.atomname)
          { return false; }
      if (s.element !== undefined && s.element !== a.element)
          { return false; }
      if (s.altloc !== undefined && s.altloc !== a.altloc)
          { return false; }
      if (s.atomindex !== undefined &&
          binarySearchIndexOf(s.atomindex, a.index) < 0)
          { return false; }
      if (s.resname !== undefined) {
          if (Array.isArray(s.resname)) {
              if (!s.resname.includes(a.resname))
                  { return false; }
          }
          else {
              if (s.resname !== a.resname)
                  { return false; }
          }
      }
      if (s.sstruc !== undefined && s.sstruc !== a.sstruc)
          { return false; }
      if (s.resno !== undefined) {
          if (Array.isArray(s.resno) && s.resno.length === 2) {
              if (s.resno[0] > a.resno || s.resno[1] < a.resno)
                  { return false; }
          }
          else {
              if (s.resno !== a.resno)
                  { return false; }
          }
      }
      if (s.inscode !== undefined && s.inscode !== a.inscode)
          { return false; }
      if (s.chainname !== undefined && s.chainname !== a.chainname)
          { return false; }
      if (s.model !== undefined && s.model !== a.modelIndex)
          { return false; }
      return true;
  }
  function residueTestFn(r, s) {
      // returning -1 means the rule is not applicable
      if (s.resname === undefined && s.resno === undefined && s.inscode === undefined &&
          s.sstruc === undefined && s.model === undefined && s.chainname === undefined &&
          s.atomindex === undefined &&
          (s.keyword === undefined || AtomOnlyKeywords.includes(s.keyword)))
          { return -1; }
      if (s.keyword !== undefined) {
          if (s.keyword === kwd.HETERO && !r.isHetero())
              { return false; }
          if (s.keyword === kwd.PROTEIN && !r.isProtein())
              { return false; }
          if (s.keyword === kwd.NUCLEIC && !r.isNucleic())
              { return false; }
          if (s.keyword === kwd.RNA && !r.isRna())
              { return false; }
          if (s.keyword === kwd.DNA && !r.isDna())
              { return false; }
          if (s.keyword === kwd.POLYMER && !r.isPolymer())
              { return false; }
          if (s.keyword === kwd.WATER && !r.isWater())
              { return false; }
          if (s.keyword === kwd.HELIX && !r.isHelix())
              { return false; }
          if (s.keyword === kwd.SHEET && !r.isSheet())
              { return false; }
          if (s.keyword === kwd.TURN && !r.isTurn())
              { return false; }
          if (s.keyword === kwd.ION && !r.isIon())
              { return false; }
          if (s.keyword === kwd.SACCHARIDE && !r.isSaccharide())
              { return false; }
      }
      if (s.atomindex !== undefined &&
          rangeInSortedArray(s.atomindex, r.atomOffset, r.atomEnd) === 0)
          { return false; }
      if (s.resname !== undefined) {
          if (Array.isArray(s.resname)) {
              if (!s.resname.includes(r.resname))
                  { return false; }
          }
          else {
              if (s.resname !== r.resname)
                  { return false; }
          }
      }
      if (s.sstruc !== undefined && s.sstruc !== r.sstruc)
          { return false; }
      if (s.resno !== undefined) {
          if (Array.isArray(s.resno) && s.resno.length === 2) {
              if (s.resno[0] > r.resno || s.resno[1] < r.resno)
                  { return false; }
          }
          else {
              if (s.resno !== r.resno)
                  { return false; }
          }
      }
      if (s.inscode !== undefined && s.inscode !== r.inscode)
          { return false; }
      if (s.chainname !== undefined && s.chainname !== r.chainname)
          { return false; }
      if (s.model !== undefined && s.model !== r.modelIndex)
          { return false; }
      return true;
  }
  function chainTestFn(c, s) {
      // returning -1 means the rule is not applicable
      if (s.chainname === undefined && s.model === undefined && s.atomindex === undefined &&
          (s.keyword === undefined || !ChainKeywords.includes(s.keyword) || !c.entity))
          { return -1; }
      if (s.keyword !== undefined) {
          if (s.keyword === kwd.POLYMER && !c.entity.isPolymer())
              { return false; }
          if (s.keyword === kwd.WATER && !c.entity.isWater())
              { return false; }
      }
      if (s.atomindex !== undefined &&
          rangeInSortedArray(s.atomindex, c.atomOffset, c.atomEnd) === 0)
          { return false; }
      if (s.chainname !== undefined && s.chainname !== c.chainname)
          { return false; }
      if (s.model !== undefined && s.model !== c.modelIndex)
          { return false; }
      return true;
  }
  function modelTestFn(m, s) {
      // returning -1 means the rule is not applicable
      if (s.model === undefined && s.atomindex === undefined)
          { return -1; }
      if (s.atomindex !== undefined &&
          rangeInSortedArray(s.atomindex, m.atomOffset, m.atomEnd) === 0)
          { return false; }
      if (s.model !== undefined && s.model !== m.index)
          { return false; }
      return true;
  }
  function makeTest(selection, fn) {
      if (selection === null)
          { return false; }
      if (selection.error)
          { return false; }
      if (!selection.rules || selection.rules.length === 0)
          { return false; }
      var n = selection.rules.length;
      var t = !selection.negate;
      var f = !!selection.negate;
      var subTests = [];
      for (var i = 0; i < n; ++i) {
          var s = selection.rules[i];
          if (s.hasOwnProperty('operator')) {
              subTests[i] = makeTest(s, fn); // TODO
          }
      }
      // ( x and y ) can short circuit on false
      // ( x or y ) can short circuit on true
      // not ( x and y )
      return function test(entity) {
          var and = selection.operator === 'AND';
          var na = false;
          for (var i = 0; i < n; ++i) {
              var s = selection.rules[i]; // TODO
              var ret = (void 0);
              if (s.hasOwnProperty('operator')) {
                  var test$1 = subTests[i];
                  if (test$1 !== false) {
                      ret = test$1(entity);
                  }
                  else {
                      ret = -1;
                  }
                  if (ret === -1) {
                      na = true;
                      continue;
                  }
                  else if (ret === true) {
                      if (and) {
                          continue;
                      }
                      else {
                          return t;
                      }
                  }
                  else {
                      if (and) {
                          return f;
                      }
                      else {
                          continue;
                      }
                  }
              }
              else {
                  if (s.keyword === kwd.ALL) {
                      if (and) {
                          continue;
                      }
                      else {
                          return t;
                      }
                  }
                  else if (s.keyword === kwd.NONE) {
                      if (and) {
                          continue;
                      }
                      else {
                          return f;
                      }
                  }
                  ret = fn(entity, s);
                  // console.log( entity.qualifiedName(), ret, s, selection.negate, "t", t, "f", f )
                  if (ret === -1) {
                      na = true;
                      continue;
                  }
                  else if (ret === true) {
                      if (and) {
                          continue;
                      }
                      else {
                          return t;
                      }
                  }
                  else {
                      if (and) {
                          return f;
                      }
                      else {
                          continue;
                      }
                  }
              }
          }
          if (na) {
              return -1;
          }
          else {
              if (and) {
                  return t;
              }
              else {
                  return f;
              }
          }
      };
  }
  function filter(selection, fn) {
      if (selection.error)
          { return selection; }
      if (!selection.rules || selection.rules.length === 0)
          { return selection; }
      var n = selection.rules.length;
      var filtered = {
          operator: selection.operator,
          rules: []
      };
      if (selection.hasOwnProperty('negate')) {
          filtered.negate = selection.negate;
      }
      for (var i = 0; i < n; ++i) {
          var s = selection.rules[i];
          if (s.hasOwnProperty('operator')) {
              var fs = filter(s, fn);
              if (fs !== null)
                  { filtered.rules.push(fs); } // TODO
          }
          else if (!fn(s)) {
              filtered.rules.push(s); // TODO
          }
      }
      if (filtered.rules.length > 0) { // TODO
          // TODO maybe the filtered rules could be returned
          // in some case, but the way how tests are applied
          // e.g. when traversing a structure would also need
          // to change
          return selection;
          // return filtered;
      }
      else {
          return null;
      }
  }
  function makeAtomTest(selection, atomOnly) {
      if ( atomOnly === void 0 ) atomOnly = false;

      var filteredSelection = selection;
      if (atomOnly) {
          filteredSelection = filter(selection, function (s) {
              if (s.keyword !== undefined && !AtomOnlyKeywords.includes(s.keyword))
                  { return true; }
              if (s.model !== undefined)
                  { return true; }
              if (s.chainname !== undefined)
                  { return true; }
              if (s.resname !== undefined)
                  { return true; }
              if (s.resno !== undefined)
                  { return true; }
              if (s.sstruc !== undefined)
                  { return true; }
              return false;
          });
      }
      return makeTest(filteredSelection, atomTestFn);
  }
  function makeResidueTest(selection, residueOnly) {
      if ( residueOnly === void 0 ) residueOnly = false;

      var filteredSelection = selection;
      if (residueOnly) {
          filteredSelection = filter(selection, function (s) {
              if (s.keyword !== undefined && AtomOnlyKeywords.includes(s.keyword))
                  { return true; }
              if (s.model !== undefined)
                  { return true; }
              if (s.chainname !== undefined)
                  { return true; }
              if (s.atomname !== undefined)
                  { return true; }
              if (s.element !== undefined)
                  { return true; }
              if (s.altloc !== undefined)
                  { return true; }
              return false;
          });
      }
      return makeTest(filteredSelection, residueTestFn);
  }
  function makeChainTest(selection, chainOnly) {
      if ( chainOnly === void 0 ) chainOnly = false;

      var filteredSelection = selection;
      if (chainOnly) {
          filteredSelection = filter(selection, function (s) {
              if (s.keyword !== undefined && !ChainKeywords.includes(s.keyword))
                  { return true; }
              // if( s.model!==undefined ) return true;
              if (s.resname !== undefined)
                  { return true; }
              if (s.resno !== undefined)
                  { return true; }
              if (s.atomname !== undefined)
                  { return true; }
              if (s.element !== undefined)
                  { return true; }
              if (s.altloc !== undefined)
                  { return true; }
              if (s.sstruc !== undefined)
                  { return true; }
              if (s.inscode !== undefined)
                  { return true; }
              return false;
          });
      }
      return makeTest(filteredSelection, chainTestFn);
  }
  function makeModelTest(selection, modelOnly) {
      if ( modelOnly === void 0 ) modelOnly = false;

      var filteredSelection = selection;
      if (modelOnly) {
          filteredSelection = filter(selection, function (s) {
              if (s.keyword !== undefined)
                  { return true; }
              if (s.chainname !== undefined)
                  { return true; }
              if (s.resname !== undefined)
                  { return true; }
              if (s.resno !== undefined)
                  { return true; }
              if (s.atomname !== undefined)
                  { return true; }
              if (s.element !== undefined)
                  { return true; }
              if (s.altloc !== undefined)
                  { return true; }
              if (s.sstruc !== undefined)
                  { return true; }
              if (s.inscode !== undefined)
                  { return true; }
              return false;
          });
      }
      return makeTest(filteredSelection, modelTestFn);
  }

  /**
   * @file Selection
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Selection
   */
  var Selection = function Selection(string) {
      this.signals = {
          stringChanged: new signals.Signal()
      };
      this.setString(string);
  };

  var prototypeAccessors$y = { type: { configurable: true } };
  prototypeAccessors$y.type.get = function () { return 'selection'; };
  Selection.prototype.setString = function setString (string, silent) {
      if (string === undefined)
          { string = this.string || ''; }
      if (string === this.string)
          { return; }
      try {
          this.selection = parseSele(string);
      }
      catch (e) {
          // Log.error( e.stack );
          this.selection = { 'error': e.message };
      }
      var selection = this.selection;
      this.string = string;
      this.test = makeAtomTest(selection);
      this.residueTest = makeResidueTest(selection);
      this.chainTest = makeChainTest(selection);
      this.modelTest = makeModelTest(selection);
      this.atomOnlyTest = makeAtomTest(selection, true);
      this.residueOnlyTest = makeResidueTest(selection, true);
      this.chainOnlyTest = makeChainTest(selection, true);
      this.modelOnlyTest = makeModelTest(selection, true);
      if (!silent) {
          this.signals.stringChanged.dispatch(this.string);
      }
  };
  Selection.prototype.isAllSelection = function isAllSelection () {
      return SelectAllKeyword.includes(this.string.toUpperCase());
  };
  Selection.prototype.isNoneSelection = function isNoneSelection () {
      return SelectNoneKeyword.includes(this.string.toUpperCase());
  };

  Object.defineProperties( Selection.prototype, prototypeAccessors$y );

  /**
   * @file Selection Colormaker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Color based on {@link Selection}
   */
  var SelectionColormaker = /*@__PURE__*/(function (Colormaker) {
      function SelectionColormaker(params) {
          var this$1$1 = this;

          Colormaker.call(this, params);
          this.colormakerList = []; // TODO
          this.selectionList = [];
          var dataList = params.dataList || [];
          dataList.forEach(function (data) {
              var scheme = data[0];
              var sele = data[1];
              var params = data[2]; if ( params === void 0 ) params = {};
              if (ColormakerRegistry.hasScheme(scheme)) {
                  Object.assign(params, {
                      scheme: scheme,
                      structure: this$1$1.parameters.structure
                  });
              }
              else {
                  Object.assign(params, {
                      scheme: 'uniform',
                      value: new Color(scheme).getHex()
                  });
              }
              this$1$1.colormakerList.push(ColormakerRegistry.getScheme(params));
              this$1$1.selectionList.push(new Selection(sele));
          });
      }

      if ( Colormaker ) SelectionColormaker.__proto__ = Colormaker;
      SelectionColormaker.prototype = Object.create( Colormaker && Colormaker.prototype );
      SelectionColormaker.prototype.constructor = SelectionColormaker;
      // NOT NEEDED @manageColor
      SelectionColormaker.prototype.atomColor = function atomColor (a) {
          for (var i = 0, n = this.selectionList.length; i < n; ++i) {
              var test = this.selectionList[i].test;
              if (test && test(a)) {
                  return this.colormakerList[i].atomColor(a);
              }
          }
          return 0xFFFFFF;
      };

      return SelectionColormaker;
  }(Colormaker));

  /**
   * @file Colormaker Registry
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var ColormakerScales = {
      '': '',
      // Sequential
      OrRd: '[S] Orange-Red',
      PuBu: '[S] Purple-Blue',
      BuPu: '[S] Blue-Purple',
      Oranges: '[S] Oranges',
      BuGn: '[S] Blue-Green',
      YlOrBr: '[S] Yellow-Orange-Brown',
      YlGn: '[S] Yellow-Green',
      Reds: '[S] Reds',
      RdPu: '[S] Red-Purple',
      Greens: '[S] Greens',
      YlGnBu: '[S] Yellow-Green-Blue',
      Purples: '[S] Purples',
      GnBu: '[S] Green-Blue',
      Greys: '[S] Greys',
      YlOrRd: '[S] Yellow-Orange-Red',
      PuRd: '[S] Purple-Red',
      Blues: '[S] Blues',
      PuBuGn: '[S] Purple-Blue-Green',
      // Diverging
      Viridis: '[D] Viridis',
      Spectral: '[D] Spectral',
      RdYlGn: '[D] Red-Yellow-Green',
      RdBu: '[D] Red-Blue',
      PiYG: '[D] Pink-Yellowgreen',
      PRGn: '[D] Purplered-Green',
      RdYlBu: '[D] Red-Yellow-Blue',
      BrBG: '[D] Brown-Bluegreen',
      RdGy: '[D] Red-Grey',
      PuOr: '[D] Purple-Orange',
      // Qualitative
      Set1: '[Q] Set1',
      Set2: '[Q] Set2',
      Set3: '[Q] Set3',
      Dark2: '[Q] Dark2',
      Paired: '[Q] Paired',
      Pastel1: '[Q] Pastel1',
      Pastel2: '[Q] Pastel2',
      Accent: '[Q] Accent',
      // Other
      rainbow: '[?] Rainbow',
      rwb: '[?] Red-White-Blue'
  };
  var ColormakerModes = {
      '': '',
      rgb: 'Red Green Blue',
      hsv: 'Hue Saturation Value',
      hsl: 'Hue Saturation Lightness',
      hsi: 'Hue Saturation Intensity',
      lab: 'CIE L*a*b*',
      hcl: 'Hue Chroma Lightness'
  };
  /**
   * Class for registering {@link Colormaker}s. Generally use the
   * global {@link src/globals.js~ColormakerRegistry} instance.
   */
  var ColormakerRegistry$1 = function ColormakerRegistry() {
      this.schemes = {};
      this.userSchemes = {};
  };
  ColormakerRegistry$1.prototype.getScheme = function getScheme (params) {
      var p = params || {};
      var id = (p.scheme || '').toLowerCase();
      var SchemeClass;
      if (id in this.schemes) {
          SchemeClass = this.schemes[id];
      }
      else if (id in this.userSchemes) {
          SchemeClass = this.userSchemes[id];
      }
      else {
          SchemeClass = Colormaker;
      }
      return new SchemeClass(params);
  };
  /**
   * Get an description of available schemes as an
   * object with id-label as key-value pairs
   * @return {Object} available schemes
   */
  ColormakerRegistry$1.prototype.getSchemes = function getSchemes () {
      var types = {};
      Object.keys(this.schemes).forEach(function (k) {
          types[k] = k;
      });
      Object.keys(this.userSchemes).forEach(function (k) {
          types[k] = k.split('|')[1];
      });
      return types;
  };
  /**
   * Get an description of available scales as an
   * object with id-label as key-value pairs
   * @return {Object} available scales
   */
  ColormakerRegistry$1.prototype.getScales = function getScales () {
      return ColormakerScales;
  };
  ColormakerRegistry$1.prototype.getModes = function getModes () {
      return ColormakerModes;
  };
  /**
   * Add a scheme with a hardcoded id
   * @param {String} id - the id
   * @param {Colormaker} scheme - the colormaker
   * @return {undefined}
   */
  ColormakerRegistry$1.prototype.add = function add (id, scheme) {
      id = id.toLowerCase();
      this.schemes[id] = scheme;
  };
  /**
   * Register a custom scheme
   *
   * @example
   * // Create a class with a `atomColor` method that returns a hex color.
   * var schemeId = NGL.ColormakerRegistry.addScheme( function( params ){
   * this.atomColor = function( atom ){
   *     if( atom.serial < 1000 ){
   *         return 0x0000FF;  // blue
   *     }else if( atom.serial > 2000 ){
   *         return 0xFF0000;  // red
   *     }else{
   *         return 0x00FF00;  // green
   *     }
   * };
   * } );
   *
   * stage.loadFile( "rcsb://3dqb.pdb" ).then( function( o ){
   * o.addRepresentation( "cartoon", { color: schemeId } );  // pass schemeId here
   * o.autoView();
   * } );
   *
   * @param {Function|Colormaker} scheme - constructor or {@link Colormaker} instance
   * @param {String} label - scheme label
   * @return {String} id to refer to the registered scheme
   */
  ColormakerRegistry$1.prototype.addScheme = function addScheme (scheme, label) {
      if (!(scheme instanceof Colormaker)) {
          scheme = this._createScheme(scheme);
      }
      return this._addUserScheme(scheme, label);
  };
  /**
   * Add a user-defined scheme
   * @param {Colormaker} scheme - the user-defined scheme
   * @param {String} [label] - scheme label
   * @return {String} id to refer to the registered scheme
   */
  ColormakerRegistry$1.prototype._addUserScheme = function _addUserScheme (scheme, label) {
      label = label || '';
      var id = ((generateUUID()) + "|" + label).toLowerCase();
      this.userSchemes[id] = scheme;
      return id;
  };
  /**
   * Remove the scheme with the given id
   * @param  {String} id - scheme to remove
   * @return {undefined}
   */
  ColormakerRegistry$1.prototype.removeScheme = function removeScheme (id) {
      id = id.toLowerCase();
      delete this.userSchemes[id];
  };
  ColormakerRegistry$1.prototype._createScheme = function _createScheme (constructor) {
      var _Colormaker = function (params) {
          Colormaker.call(this, params);
          constructor.call(this, params);
      };
      _Colormaker.prototype = Colormaker.prototype;
      _Colormaker.prototype.constructor = Colormaker;
      return _Colormaker;
  };
  /**
   * Create and a selection-based coloring scheme. Supply a list with pairs
   * of colorname and selection for coloring by selections. Use the last
   * entry as a default (catch all) coloring definition.
   *
   * @example
   * var schemeId = NGL.ColormakerRegistry.addSelectionScheme( [
   * [ "red", "64-74 or 134-154 or 222-254 or 310-310 or 322-326" ],
   * [ "green", "311-322" ],
   * [ "yellow", "40-63 or 75-95 or 112-133 or 155-173 or 202-221 or 255-277 or 289-309" ],
   * [ "blue", "1-39 or 96-112 or 174-201 or 278-288" ],
   * [ "white", "*" ]
   * ], "Transmembrane 3dqb" );
   *
   * stage.loadFile( "rcsb://3dqb.pdb" ).then( function( o ){
   * o.addRepresentation( "cartoon", { color: schemeId } );  // pass schemeId here
   * o.autoView();
   * } );
   *
   * @param {Array} dataList - cloror-selection pairs
   * @param {String} label - scheme name
   * @return {String} id to refer to the registered scheme
   */
  ColormakerRegistry$1.prototype.addSelectionScheme = function addSelectionScheme (dataList, label) {
      var MySelectionColormaker = /*@__PURE__*/(function (SelectionColormaker) {
              function MySelectionColormaker(params) {
              SelectionColormaker.call(this, Object.assign({ dataList: dataList }, params));
          }

              if ( SelectionColormaker ) MySelectionColormaker.__proto__ = SelectionColormaker;
              MySelectionColormaker.prototype = Object.create( SelectionColormaker && SelectionColormaker.prototype );
              MySelectionColormaker.prototype.constructor = MySelectionColormaker;

              return MySelectionColormaker;
          }(SelectionColormaker));
      return this._addUserScheme(MySelectionColormaker, label);
  };
  /**
   * Check if a scheme with the given id exists
   * @param  {String}  id - the id to check
   * @return {Boolean} flag indicating if the scheme exists
   */
  ColormakerRegistry$1.prototype.hasScheme = function hasScheme (id) {
      id = id.toLowerCase();
      return id in this.schemes || id in this.userSchemes;
  };

  /**
   * @file Parser Registry
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var ParserRegistry$1 = /*@__PURE__*/(function (Registry) {
      function ParserRegistry() {
          Registry.call(this, 'parser');
      }

      if ( Registry ) ParserRegistry.__proto__ = Registry;
      ParserRegistry.prototype = Object.create( Registry && Registry.prototype );
      ParserRegistry.prototype.constructor = ParserRegistry;
      ParserRegistry.prototype.__hasObjName = function __hasObjName (key, objName) {
          var parser = this.get(key);
          return parser && parser.prototype.__objName === objName;
      };
      ParserRegistry.prototype.isTrajectory = function isTrajectory (key) {
          return this.__hasObjName(key, 'frames');
      };
      ParserRegistry.prototype.isStructure = function isStructure (key) {
          return this.__hasObjName(key, 'structure');
      };
      ParserRegistry.prototype.isVolume = function isVolume (key) {
          return this.__hasObjName(key, 'volume');
      };
      ParserRegistry.prototype.isSurface = function isSurface (key) {
          return this.__hasObjName(key, 'surface');
      };
      ParserRegistry.prototype.isBinary = function isBinary (key) {
          var parser = this.get(key);
          return parser && parser.prototype.isBinary;
      };
      ParserRegistry.prototype.isXml = function isXml (key) {
          var parser = this.get(key);
          return parser && parser.prototype.isXml;
      };
      ParserRegistry.prototype.isJson = function isJson (key) {
          var parser = this.get(key);
          return parser && parser.prototype.isJson;
      };
      ParserRegistry.prototype.getTrajectoryExtensions = function getTrajectoryExtensions () {
          var this$1$1 = this;

          return this.names.filter(function (name) { return this$1$1.isTrajectory(name); });
      };
      ParserRegistry.prototype.getStructureExtensions = function getStructureExtensions () {
          var this$1$1 = this;

          return this.names.filter(function (name) { return this$1$1.isStructure(name); });
      };
      ParserRegistry.prototype.getVolumeExtensions = function getVolumeExtensions () {
          var this$1$1 = this;

          return this.names.filter(function (name) { return this$1$1.isVolume(name); });
      };
      ParserRegistry.prototype.getSurfaceExtensions = function getSurfaceExtensions () {
          var this$1$1 = this;

          return this.names.filter(function (name) { return this$1$1.isSurface(name); });
      };

      return ParserRegistry;
  }(Registry));

  /**
   * @file Worker Utils
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function getWorkerDeps(vars) {
      var deps = vars;
      vars.forEach(function (sym) {
          if (sym.__deps) {
              Array.prototype.push.apply(deps, getWorkerDeps(sym.__deps));
          }
      });
      return deps;
  }
  function makeWorkerString(vars) {
      var deps = uniqueArray(getWorkerDeps(vars));
      return deps.map(function (sym) {
          return sym.toString();
      }).join('\n\n\n');
  }
  function onmessage(e) {
      var name = e.data.__name;
      var postId = e.data.__postId;
      /* global self */
      if (name === undefined) {
          console.error('message __name undefined');
      }
      else if (self.func === undefined) {
          console.error('worker func undefined', name);
      }
      else {
          var callback = function (aMessage, transferList) {
              aMessage = aMessage || {};
              if (postId !== undefined)
                  { aMessage.__postId = postId; }
              try {
                  self.postMessage(aMessage, transferList);
              }
              catch (error) {
                  console.error('self.postMessage:', error);
                  self.postMessage(aMessage);
              }
          };
          self.func(e, callback);
      }
  }
  function makeWorkerBlob(func, deps) {
      var str = "'use strict';\n\n" + makeWorkerString(deps);
      str += '\n\n\nself.func = ' + func.toString() + ';';
      str += '\n\n\nself.onmessage = ' + onmessage.toString() + ';';
      // console.log(str);
      return new Blob([str], { type: 'application/javascript' });
  }

  /**
   * @file Worker Registry
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var WorkerRegistry$1 = function WorkerRegistry() {
      this.activeWorkerCount = 0;
      this._funcDict = {};
      this._depsDict = {};
      this._blobDict = {};
  };
  WorkerRegistry$1.prototype.add = function add (name, func, deps) {
      this._funcDict[name] = func;
      this._depsDict[name] = deps;
  };
  WorkerRegistry$1.prototype.get = function get (name) {
      if (!this._blobDict[name]) {
          this._blobDict[name] = makeWorkerBlob(this._funcDict[name], this._depsDict[name]);
      }
      return this._blobDict[name];
  };

  /**
   * @file Globals
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * The browser name: "Opera", "Chrome", "Firefox", "Mobile Safari",
   * "Internet Explorer", "Safari" or false.
   */
  var Browser = getBrowser();
  /**
   * Flag indicating support for the 'passive' option for event handler
   */
  var SupportsPassiveEventHandler = false;
  try {
      // Test via a getter in the options object to see if the passive property is accessed
      var opts = Object.defineProperty({}, 'passive', {
          get: function () {
              SupportsPassiveEventHandler = true;
          }
      });
      window.addEventListener('test', function (e) { }, opts);
  }
  catch (e) { }
  /**
   * Flag indicating a mobile browser
   */
  var Mobile = typeof window !== 'undefined' ? typeof window.orientation !== 'undefined' : false;
  var SupportsReadPixelsFloat = false;
  function setSupportsReadPixelsFloat(value) {
      SupportsReadPixelsFloat = value;
  }
  /**
   * Flag indicating support for the `EXT_frag_depth` WebGL extension
   * (Always present in WebGL2)
   */
  var ExtensionFragDepth = false;
  function setExtensionFragDepth(value) {
      ExtensionFragDepth = value;
  }
  var Log = {
      log: Function.prototype.bind.call(console.log, console),
      info: Function.prototype.bind.call(console.info, console),
      warn: Function.prototype.bind.call(console.warn, console),
      error: Function.prototype.bind.call(console.error, console),
      time: Function.prototype.bind.call(console.time, console),
      timeEnd: Function.prototype.bind.call(console.timeEnd, console)
  };
  var MeasurementDefaultParams = {
      color: 'green',
      labelColor: 0x808080,
      labelAttachment: 'bottom-center',
      labelSize: 0.7,
      labelZOffset: 0.5,
      labelYOffset: 0.1,
      labelBorder: true,
      labelBorderColor: 0xd3d3d3,
      labelBorderWidth: 0.25,
      lineOpacity: 0.8,
      linewidth: 5.0,
      opacity: 0.6,
      labelUnit: 'angstrom',
      arcVisible: true,
      planeVisible: false
  };
  function setMeasurementDefaultParams(params) {
      if ( params === void 0 ) params = {};

      Object.assign(MeasurementDefaultParams, params);
  }
  exports.Debug = boolean(getQuery('debug'));
  function setDebug(value) {
      exports.Debug = value;
  }
  var WebglErrorMessage = '<div style="display:flex;align-items:center;justify-content:center;height:100%;"><p style="padding:15px;text-align:center;">Your browser/graphics card does not seem to support <a target="_blank" href="https://en.wikipedia.org/wiki/WebGL">WebGL</a>.<br/><br/>Find out how to get it <a target="_blank" href="http://get.webgl.org/">here</a>.</p></div>';
  /**
   * List of file extensions to be recognized as scripts
   */
  var ScriptExtensions = ['ngl', 'js'];
  var WorkerRegistry = new WorkerRegistry$1();
  var ColormakerRegistry = new ColormakerRegistry$1();
  var DatasourceRegistry = new Registry('datasource');
  var RepresentationRegistry = new Registry('representatation');
  var ParserRegistry = new ParserRegistry$1();
  var ShaderRegistry = new Registry('shader');
  var DecompressorRegistry = new Registry('decompressor');
  var ComponentRegistry = new Registry('component');
  var BufferRegistry = new Registry('buffer');
  var PickerRegistry = new Registry('picker');
  exports.ListingDatasource = void 0;
  function setListingDatasource(value) {
      exports.ListingDatasource = value;
  }
  exports.TrajectoryDatasource = void 0;
  function setTrajectoryDatasource(value) {
      exports.TrajectoryDatasource = value;
  }

  /**
   * @file Streamer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var Streamer = function Streamer(src, params) {
      if ( params === void 0 ) params = {};

      this.chunkSize = 1024 * 1024 * 10;
      this.newline = '\n';
      this.__pointer = 0;
      this.__partialLine = '';
      this.compressed = defaults(params.compressed, false);
      this.binary = defaults(params.binary, false);
      this.json = defaults(params.json, false);
      this.xml = defaults(params.xml, false);
      this.src = src;
  };
  Streamer.prototype.isBinary = function isBinary () {
      return this.binary || this.compressed;
  };
  Streamer.prototype.read = function read () {
          var this$1$1 = this;

      return this._read().then(function (data) {
          var decompressFn = this$1$1.compressed ? DecompressorRegistry.get(this$1$1.compressed) : undefined;
          if (this$1$1.compressed && decompressFn) {
              this$1$1.data = decompressFn(data);
          }
          else {
              if ((this$1$1.binary || this$1$1.compressed) && data instanceof ArrayBuffer) {
                  data = new Uint8Array(data);
              }
              this$1$1.data = data;
          }
          return this$1$1.data;
      });
  };
  Streamer.prototype._chunk = function _chunk (start, end) {
      end = Math.min(this.data.length, end);
      if (start === 0 && this.data.length === end) {
          return this.data;
      }
      else {
          if (this.isBinary()) {
              return this.data.subarray(start, end);
          }
          else {
              return this.data.substring(start, end);
          }
      }
  };
  Streamer.prototype.chunk = function chunk (start) {
      var end = start + this.chunkSize;
      return this._chunk(start, end);
  };
  Streamer.prototype.peekLines = function peekLines (m) {
      var data = this.data;
      var n = data.length;
      // FIXME does not work for multi-char newline
      var newline = this.isBinary() ? this.newline.charCodeAt(0) : this.newline;
      var i;
      var count = 0;
      for (i = 0; i < n; ++i) {
          if (data[i] === newline)
              { ++count; }
          if (count === m)
              { break; }
      }
      var chunk = this._chunk(0, i + 1);
      var d = this.chunkToLines(chunk, '', i > n);
      return d.lines;
  };
  Streamer.prototype.chunkCount = function chunkCount () {
      return Math.floor(this.data.length / this.chunkSize) + 1;
  };
  Streamer.prototype.asText = function asText () {
      return this.isBinary() ? uint8ToString(this.data) : this.data;
  };
  Streamer.prototype.chunkToLines = function chunkToLines (chunk, partialLine, isLast) {
      var newline = this.newline;
      if (!this.isBinary() && chunk.length === this.data.length) {
          return {
              lines: chunk.split(newline),
              partialLine: ''
          };
      }
      var lines = [];
      var str = this.isBinary() ? uint8ToString(chunk) : chunk;
      var idx = str.lastIndexOf(newline);
      if (idx === -1) {
          partialLine += str;
      }
      else {
          var str2 = partialLine + str.substr(0, idx);
          lines = lines.concat(str2.split(newline));
          if (idx === str.length - newline.length) {
              partialLine = '';
          }
          else {
              partialLine = str.substr(idx + newline.length);
          }
      }
      if (isLast && partialLine !== '') {
          lines.push(partialLine);
      }
      return {
          lines: lines,
          partialLine: partialLine
      };
  };
  Streamer.prototype.nextChunk = function nextChunk () {
      var start = this.__pointer;
      if (start > this.data.length) {
          return undefined;
      }
      this.__pointer += this.chunkSize;
      return this.chunk(start);
  };
  Streamer.prototype.nextChunkOfLines = function nextChunkOfLines () {
      var chunk = this.nextChunk();
      if (chunk === undefined) {
          return undefined;
      }
      var isLast = this.__pointer > this.data.length;
      var d = this.chunkToLines(chunk, this.__partialLine, isLast);
      this.__partialLine = d.partialLine;
      return d.lines;
  };
  Streamer.prototype.eachChunk = function eachChunk (callback) {
      var chunkSize = this.chunkSize;
      var n = this.data.length;
      var chunkCount = this.chunkCount();
      for (var i = 0; i < n; i += chunkSize) {
          var chunk = this.chunk(i);
          var chunkNo = Math.round(i / chunkSize);
          callback(chunk, chunkNo, chunkCount);
      }
  };
  Streamer.prototype.eachChunkOfLines = function eachChunkOfLines (callback) {
          var this$1$1 = this;

      this.eachChunk(function (chunk, chunkNo, chunkCount) {
          var isLast = chunkNo === chunkCount + 1;
          var d = this$1$1.chunkToLines(chunk, this$1$1.__partialLine, isLast);
          this$1$1.__partialLine = d.partialLine;
          callback(d.lines, chunkNo, chunkCount);
      });
  };
  Streamer.prototype.dispose = function dispose () {
      delete this.src;
  };

  /**
   * @file File Streamer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var FileStreamer = /*@__PURE__*/(function (Streamer) {
      function FileStreamer () {
          Streamer.apply(this, arguments);
      }

      if ( Streamer ) FileStreamer.__proto__ = Streamer;
      FileStreamer.prototype = Object.create( Streamer && Streamer.prototype );
      FileStreamer.prototype.constructor = FileStreamer;

      FileStreamer.prototype._read = function _read () {
          var this$1$1 = this;

          return new Promise(function (resolve, reject) {
              var file = this$1$1.src;
              var reader = new FileReader();
              reader.onload = function (event) {
                  if (event.target)
                      { resolve(event.target.result); }
              };
              // if (typeof this.onprogress === 'function') {
              //   reader.onprogress = event => this.onprogress(event)
              // }
              reader.onerror = function (event) { return reject(event); };
              if (this$1$1.binary || this$1$1.compressed) {
                  reader.readAsArrayBuffer(file);
              }
              else {
                  reader.readAsText(file);
              }
          });
      };

      return FileStreamer;
  }(Streamer));

  /**
   * @file Network Streamer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var NetworkStreamer = /*@__PURE__*/(function (Streamer) {
      function NetworkStreamer () {
          Streamer.apply(this, arguments);
      }

      if ( Streamer ) NetworkStreamer.__proto__ = Streamer;
      NetworkStreamer.prototype = Object.create( Streamer && Streamer.prototype );
      NetworkStreamer.prototype.constructor = NetworkStreamer;

      NetworkStreamer.prototype._read = function _read () {
          var this$1$1 = this;

          return new Promise(function (resolve, reject) {
              var url = this$1$1.src;
              var xhr = new XMLHttpRequest();
              xhr.open('GET', url, true);
              xhr.addEventListener('load', function () {
                  if (xhr.status === 200 || xhr.status === 304 ||
                      // when requesting from local file system
                      // the status in Google Chrome/Chromium is 0
                      xhr.status === 0) {
                      try {
                          resolve(xhr.response);
                      }
                      catch (e) {
                          reject(e);
                      }
                  }
                  else {
                      reject(xhr.statusText);
                  }
              }, false);
              // if (typeof this.onprogress === 'function') {
              //   xhr.addEventListener('progress', event => this.onprogress(event), false);
              // }
              xhr.addEventListener('error', function (event) { return reject('network error'); }, false);
              if (this$1$1.isBinary()) {
                  xhr.responseType = 'arraybuffer';
              }
              else if (this$1$1.json) {
                  xhr.responseType = 'json';
              }
              else if (this$1$1.xml) {
                  xhr.responseType = 'document';
              }
              else {
                  xhr.responseType = 'text';
              }
              // xhr.crossOrigin = true;
              xhr.send();
          });
      };

      return NetworkStreamer;
  }(Streamer));

  /**
   * @file Loader
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Loader parameter object.
   * @typedef {Object} LoaderParameters - loader parameters
   * @property {String} ext - file extension, determines file type
   * @property {Boolean} compressed - flag data as compressed
   * @property {Boolean} binary - flag data as binary
   * @property {String} name - set data name
   */
  /**
   * Loader base class
   */
  var Loader = function Loader(src, params) {
      if ( params === void 0 ) params = {};

      this.parameters = createParams(params, {
          ext: '',
          compressed: false,
          binary: ParserRegistry.isBinary(params.ext || ''),
          name: '',
          dir: '',
          path: '',
          protocol: ''
      });
      var streamerParams = {
          compressed: this.parameters.compressed,
          binary: this.parameters.binary,
          json: ParserRegistry.isJson(this.parameters.ext),
          xml: ParserRegistry.isXml(this.parameters.ext)
      };
      if ((typeof File !== 'undefined' && src instanceof File) ||
          (typeof Blob !== 'undefined' && src instanceof Blob)) {
          this.streamer = new FileStreamer(src, streamerParams);
      }
      else {
          this.streamer = new NetworkStreamer(src, streamerParams);
      }
  };

  /**
   * @file Parser Loader
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Parser loader class
   * @extends Loader
   */
  var ParserLoader = /*@__PURE__*/(function (Loader) {
      function ParserLoader(src, params) {
          if ( params === void 0 ) params = {};

          Loader.call(this, src, params);
          this.parserParams = {
              voxelSize: params.voxelSize,
              firstModelOnly: params.firstModelOnly,
              asTrajectory: params.asTrajectory,
              cAlphaOnly: params.cAlphaOnly,
              delimiter: params.delimiter,
              comment: params.comment,
              columnNames: params.columnNames,
              name: this.parameters.name,
              path: this.parameters.path
          };
      }

      if ( Loader ) ParserLoader.__proto__ = Loader;
      ParserLoader.prototype = Object.create( Loader && Loader.prototype );
      ParserLoader.prototype.constructor = ParserLoader;
      /**
       * Load parsed object
       * @return {Promise} resolves to the loaded & parsed {@link Structure},
       *                   {@link Volume}, {@link Surface} or data object
       */
      ParserLoader.prototype.load = function load () {
          var ParserClass = ParserRegistry.get(this.parameters.ext);
          var parser = new ParserClass(this.streamer, this.parserParams);
          return parser.parse();
      };

      return ParserLoader;
  }(Loader));

  /**
   * @file Script
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Script class
   */
  var Script = function Script(functionBody, name, path) {
      this.name = name;
      this.path = path;
      this.signals = {
          elementAdded: new signals.Signal(),
          elementRemoved: new signals.Signal(),
          nameChanged: new signals.Signal()
      };
      this.type = 'Script';
      this.dir = path.substring(0, path.lastIndexOf('/') + 1);
      try {
          /* eslint-disable no-new-func */
          this.fn = new Function('stage', '__name', '__path', '__dir', functionBody);
      }
      catch (e) {
          Log.error('Script compilation failed', e);
          this.fn = function () { };
      }
  };
  /**
   * Execute the script
   * @param  {Stage} stage - the stage context
   * @return {Promise} - resolve when script finished running
   */
  Script.prototype.run = function run (stage) {
          var this$1$1 = this;

      return new Promise(function (resolve, reject) {
          try {
              this$1$1.fn.apply(null, [stage, this$1$1.name, this$1$1.path, this$1$1.dir]);
              resolve();
          }
          catch (e) {
              Log.error('Script.fn', e);
              reject(e);
          }
      });
  };

  /**
   * @file Script Loader
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Script loader class
   * @extends Loader
   */
  var ScriptLoader = /*@__PURE__*/(function (Loader) {
      function ScriptLoader () {
          Loader.apply(this, arguments);
      }

      if ( Loader ) ScriptLoader.__proto__ = Loader;
      ScriptLoader.prototype = Object.create( Loader && Loader.prototype );
      ScriptLoader.prototype.constructor = ScriptLoader;

      ScriptLoader.prototype.load = function load () {
          var this$1$1 = this;

          return this.streamer.read().then(function () {
              return new Script(this$1$1.streamer.asText(), this$1$1.parameters.name, this$1$1.parameters.path);
          });
      };

      return ScriptLoader;
  }(Loader));

  /**
   * @file Loader Utils
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function getFileInfo(file) {
      var compressedExtList = DecompressorRegistry.names;
      var path;
      var compressed;
      var protocol = '';
      if (file instanceof File) {
          path = file.name;
      }
      else if (file instanceof Blob) {
          path = '';
      }
      else {
          path = file;
      }
      var queryIndex = path.lastIndexOf('?');
      var query = queryIndex !== -1 ? path.substring(queryIndex) : '';
      path = path.substring(0, queryIndex === -1 ? path.length : queryIndex);
      var name = path.replace(/^.*[\\/]/, '');
      var base = name.substring(0, name.lastIndexOf('.'));
      var nameSplit = name.split('.');
      var ext = nameSplit.length > 1 ? (nameSplit.pop() || '').toLowerCase() : '';
      var protocolMatch = path.match(/^(.+):\/\/(.+)$/);
      if (protocolMatch) {
          protocol = protocolMatch[1].toLowerCase();
          path = protocolMatch[2] || '';
      }
      var dir = path.substring(0, path.lastIndexOf('/') + 1);
      if (compressedExtList.includes(ext)) {
          compressed = ext;
          var n = path.length - ext.length - 1;
          ext = (path.substr(0, n).split('.').pop() || '').toLowerCase();
          var m = base.length - ext.length - 1;
          base = base.substr(0, m);
      }
      else {
          compressed = false;
      }
      return { path: path, name: name, ext: ext, base: base, dir: dir, compressed: compressed, protocol: protocol, query: query, 'src': file };
  }
  function getDataInfo(src) {
      var info = getFileInfo(src);
      var datasource = DatasourceRegistry.get(info.protocol);
      if (datasource) {
          info = getFileInfo(datasource.getUrl(info.src));
          if (!info.ext && datasource.getExt) {
              info.ext = datasource.getExt(src);
          }
      }
      return info;
  }
  /**
   * Load a file
   *
   * @example
   * // load from URL
   * NGL.autoLoad( "http://files.rcsb.org/download/5IOS.cif" );
   *
   * @example
   * // load binary data in CCP4 format via a Blob
   * var binaryBlob = new Blob( [ ccp4Data ], { type: 'application/octet-binary'} );
   * NGL.autoLoad( binaryBlob, { ext: "ccp4" } );
   *
   * @example
   * // load string data in PDB format via a Blob
   * var stringBlob = new Blob( [ pdbData ], { type: 'text/plain'} );
   * NGL.autoLoad( stringBlob, { ext: "pdb" } );
   *
   * @example
   * // load a File object
   * NGL.autoLoad( file );
   *
   * @param  {String|File|Blob} file - either a URL or an object containing the file data
   * @param  {LoaderParameters} params - loading parameters
   * @return {Promise} Promise resolves to the loaded data
   */
  function autoLoad(file, params) {
      if ( params === void 0 ) params = {};

      var p = Object.assign(getDataInfo(file), params);
      var loader;
      if (ParserRegistry.names.includes(p.ext)) {
          loader = new ParserLoader(p.src, p);
      }
      else if (ScriptExtensions.includes(p.ext)) {
          loader = new ScriptLoader(p.src, p);
      }
      if (loader) {
          return loader.load();
      }
      else {
          return Promise.reject(new Error(("autoLoad: ext '" + (p.ext) + "' unknown")));
      }
  }

  /* global window, exports, define */

  var sprintf = createCommonjsModule(function (module, exports) {
  !function() {

      var re = {
          not_string: /[^s]/,
          not_bool: /[^t]/,
          not_type: /[^T]/,
          not_primitive: /[^v]/,
          number: /[diefg]/,
          numeric_arg: /[bcdiefguxX]/,
          json: /[j]/,
          not_json: /[^j]/,
          text: /^[^\x25]+/,
          modulo: /^\x25{2}/,
          placeholder: /^\x25(?:([1-9]\d*)\$|\(([^)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijostTuvxX])/,
          key: /^([a-z_][a-z_\d]*)/i,
          key_access: /^\.([a-z_][a-z_\d]*)/i,
          index_access: /^\[(\d+)\]/,
          sign: /^[+-]/
      };

      function sprintf(key) {
          // `arguments` is not an array, but should be fine for this call
          return sprintf_format(sprintf_parse(key), arguments)
      }

      function vsprintf(fmt, argv) {
          return sprintf.apply(null, [fmt].concat(argv || []))
      }

      function sprintf_format(parse_tree, argv) {
          var cursor = 1, tree_length = parse_tree.length, arg, output = '', i, k, ph, pad, pad_character, pad_length, is_positive, sign;
          for (i = 0; i < tree_length; i++) {
              if (typeof parse_tree[i] === 'string') {
                  output += parse_tree[i];
              }
              else if (typeof parse_tree[i] === 'object') {
                  ph = parse_tree[i]; // convenience purposes only
                  if (ph.keys) { // keyword argument
                      arg = argv[cursor];
                      for (k = 0; k < ph.keys.length; k++) {
                          if (arg == undefined) {
                              throw new Error(sprintf('[sprintf] Cannot access property "%s" of undefined value "%s"', ph.keys[k], ph.keys[k-1]))
                          }
                          arg = arg[ph.keys[k]];
                      }
                  }
                  else if (ph.param_no) { // positional argument (explicit)
                      arg = argv[ph.param_no];
                  }
                  else { // positional argument (implicit)
                      arg = argv[cursor++];
                  }

                  if (re.not_type.test(ph.type) && re.not_primitive.test(ph.type) && arg instanceof Function) {
                      arg = arg();
                  }

                  if (re.numeric_arg.test(ph.type) && (typeof arg !== 'number' && isNaN(arg))) {
                      throw new TypeError(sprintf('[sprintf] expecting number but found %T', arg))
                  }

                  if (re.number.test(ph.type)) {
                      is_positive = arg >= 0;
                  }

                  switch (ph.type) {
                      case 'b':
                          arg = parseInt(arg, 10).toString(2);
                          break
                      case 'c':
                          arg = String.fromCharCode(parseInt(arg, 10));
                          break
                      case 'd':
                      case 'i':
                          arg = parseInt(arg, 10);
                          break
                      case 'j':
                          arg = JSON.stringify(arg, null, ph.width ? parseInt(ph.width) : 0);
                          break
                      case 'e':
                          arg = ph.precision ? parseFloat(arg).toExponential(ph.precision) : parseFloat(arg).toExponential();
                          break
                      case 'f':
                          arg = ph.precision ? parseFloat(arg).toFixed(ph.precision) : parseFloat(arg);
                          break
                      case 'g':
                          arg = ph.precision ? String(Number(arg.toPrecision(ph.precision))) : parseFloat(arg);
                          break
                      case 'o':
                          arg = (parseInt(arg, 10) >>> 0).toString(8);
                          break
                      case 's':
                          arg = String(arg);
                          arg = (ph.precision ? arg.substring(0, ph.precision) : arg);
                          break
                      case 't':
                          arg = String(!!arg);
                          arg = (ph.precision ? arg.substring(0, ph.precision) : arg);
                          break
                      case 'T':
                          arg = Object.prototype.toString.call(arg).slice(8, -1).toLowerCase();
                          arg = (ph.precision ? arg.substring(0, ph.precision) : arg);
                          break
                      case 'u':
                          arg = parseInt(arg, 10) >>> 0;
                          break
                      case 'v':
                          arg = arg.valueOf();
                          arg = (ph.precision ? arg.substring(0, ph.precision) : arg);
                          break
                      case 'x':
                          arg = (parseInt(arg, 10) >>> 0).toString(16);
                          break
                      case 'X':
                          arg = (parseInt(arg, 10) >>> 0).toString(16).toUpperCase();
                          break
                  }
                  if (re.json.test(ph.type)) {
                      output += arg;
                  }
                  else {
                      if (re.number.test(ph.type) && (!is_positive || ph.sign)) {
                          sign = is_positive ? '+' : '-';
                          arg = arg.toString().replace(re.sign, '');
                      }
                      else {
                          sign = '';
                      }
                      pad_character = ph.pad_char ? ph.pad_char === '0' ? '0' : ph.pad_char.charAt(1) : ' ';
                      pad_length = ph.width - (sign + arg).length;
                      pad = ph.width ? (pad_length > 0 ? pad_character.repeat(pad_length) : '') : '';
                      output += ph.align ? sign + arg + pad : (pad_character === '0' ? sign + pad + arg : pad + sign + arg);
                  }
              }
          }
          return output
      }

      var sprintf_cache = Object.create(null);

      function sprintf_parse(fmt) {
          if (sprintf_cache[fmt]) {
              return sprintf_cache[fmt]
          }

          var _fmt = fmt, match, parse_tree = [], arg_names = 0;
          while (_fmt) {
              if ((match = re.text.exec(_fmt)) !== null) {
                  parse_tree.push(match[0]);
              }
              else if ((match = re.modulo.exec(_fmt)) !== null) {
                  parse_tree.push('%');
              }
              else if ((match = re.placeholder.exec(_fmt)) !== null) {
                  if (match[2]) {
                      arg_names |= 1;
                      var field_list = [], replacement_field = match[2], field_match = [];
                      if ((field_match = re.key.exec(replacement_field)) !== null) {
                          field_list.push(field_match[1]);
                          while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {
                              if ((field_match = re.key_access.exec(replacement_field)) !== null) {
                                  field_list.push(field_match[1]);
                              }
                              else if ((field_match = re.index_access.exec(replacement_field)) !== null) {
                                  field_list.push(field_match[1]);
                              }
                              else {
                                  throw new SyntaxError('[sprintf] failed to parse named argument key')
                              }
                          }
                      }
                      else {
                          throw new SyntaxError('[sprintf] failed to parse named argument key')
                      }
                      match[2] = field_list;
                  }
                  else {
                      arg_names |= 2;
                  }
                  if (arg_names === 3) {
                      throw new Error('[sprintf] mixing positional and named placeholders is not (yet) supported')
                  }

                  parse_tree.push(
                      {
                          placeholder: match[0],
                          param_no:    match[1],
                          keys:        match[2],
                          sign:        match[3],
                          pad_char:    match[4],
                          align:       match[5],
                          width:       match[6],
                          precision:   match[7],
                          type:        match[8]
                      }
                  );
              }
              else {
                  throw new SyntaxError('[sprintf] unexpected placeholder')
              }
              _fmt = _fmt.substring(match[0].length);
          }
          return sprintf_cache[fmt] = parse_tree
      }

      /**
       * export to either browser or node.js
       */
      /* eslint-disable quote-props */
      {
          exports['sprintf'] = sprintf;
          exports['vsprintf'] = vsprintf;
      }
      if (typeof window !== 'undefined') {
          window['sprintf'] = sprintf;
          window['vsprintf'] = vsprintf;
      }
      /* eslint-enable quote-props */
  }(); // eslint-disable-line
  });

  /**
   * @file Writer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Base class for writers
   * @interface
   */
  var Writer = function Writer () {};

  Writer.prototype.getBlob = function getBlob () {
      return new Blob([this.getData()], { type: this.mimeType });
  };
  /**
   * Trigger a download of the
   * @param  {[type]} name [description]
   * @param  {[type]} ext  [description]
   * @return {[type]}  [description]
   */
  Writer.prototype.download = function download$1 (name, ext) {
      name = defaults(name, this.defaultName);
      ext = defaults(ext, this.defaultExt);
      download(this.getBlob(), (name + "." + ext));
  };

  /**
   * @file Pdb Writer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  // http://www.wwpdb.org/documentation/file-format
  // Sample PDB line, the coords X,Y,Z are fields 5,6,7 on each line.
  // ATOM      1  N   ARG     1      29.292  13.212 -12.751  1.00 33.78      1BPT 108
  var AtomFormat = 'ATOM  %5d %-4s %3s %1s%4d    %8.3f%8.3f%8.3f%6.2f%6.2f      %4s%2s%1s%1s';
  var HetatmFormat = 'HETATM%5d %-4s %3s %1s%4d    %8.3f%8.3f%8.3f%6.2f%6.2f      %4s%2s%1s%1s';
  /**
   * Create a PDB file from a Structure object
   */
  var PdbWriter = /*@__PURE__*/(function (Writer) {
      function PdbWriter(structure, params) {
          Writer.call(this);
          this.mimeType = 'text/plain';
          this.defaultName = 'structure';
          this.defaultExt = 'pdb';
          var p = Object.assign({}, params);
          this.renumberSerial = defaults(p.renumberSerial, true);
          this.remarks = ensureArray$1(defaults(p.remarks, []));
          this.structure = structure;
          this._records = [];
      }

      if ( Writer ) PdbWriter.__proto__ = Writer;
      PdbWriter.prototype = Object.create( Writer && Writer.prototype );
      PdbWriter.prototype.constructor = PdbWriter;
      PdbWriter.prototype._writeRecords = function _writeRecords () {
          this._records.length = 0;
          this._writeTitle();
          this._writeRemarks();
          this._writeAtoms();
      };
      PdbWriter.prototype._writeTitle = function _writeTitle () {
          // FIXME multiline if title line longer than 80 chars
          this._records.push(sprintf.sprintf('TITLE %-74s', this.structure.name));
      };
      PdbWriter.prototype._writeRemarks = function _writeRemarks () {
          var this$1$1 = this;

          this.remarks.forEach(function (str) {
              this$1$1._records.push(sprintf.sprintf('REMARK %-73s', str));
          });
          if (this.structure.trajectory) {
              this._records.push(sprintf.sprintf('REMARK %-73s', "Trajectory '" + this.structure.trajectory.name + "'"));
              this._records.push(sprintf.sprintf('REMARK %-73s', ("Frame " + (this.structure.trajectory.frame)) // TODO
              ));
          }
      };
      PdbWriter.prototype._writeAtoms = function _writeAtoms () {
          var this$1$1 = this;

          var ia = 1;
          var im = 1;
          var charge = " ";
          var chargeSign = " ";
          this.structure.eachModel(function (m) {
              this$1$1._records.push(sprintf.sprintf('MODEL %-74d', im++));
              m.eachAtom(function (a) {
                  var formatString = a.hetero ? HetatmFormat : AtomFormat;
                  var serial = this$1$1.renumberSerial ? ia : a.serial;
                  // Alignment of one-letter atom name such as C starts at column 14,
                  // while two-letter atom name such as FE starts at column 13.
                  var atomname = a.atomname;
                  if (atomname.length === 1)
                      { atomname = ' ' + atomname; }
                  if (a.formalCharge) { // Skip nulls and zeros
                      charge = Math.abs(a.formalCharge).toPrecision(1);
                      chargeSign = (a.formalCharge > 0) ? "+" : "-";
                  }
                  else {
                      charge = " ";
                      chargeSign = " ";
                  }
                  this$1$1._records.push(sprintf.sprintf(formatString, serial, atomname, a.resname, defaults(a.chainname, ' '), a.resno, a.x, a.y, a.z, defaults(a.occupancy, 1.0), defaults(a.bfactor, 0.0), '', // segid
                  defaults(a.element, ''), charge, chargeSign));
                  ia += 1;
              }, this$1$1.structure.getSelection());
              this$1$1._records.push(sprintf.sprintf('%-80s', 'ENDMDL'));
              im += 1;
          });
          this._records.push(sprintf.sprintf('%-80s', 'END'));
      };
      PdbWriter.prototype.getString = function getString () {
          console.warn('PdbWriter.getString() is deprecated, use .getData instead');
          return this.getData();
      };
      /**
       * Get string containing the PDB file data
       * @return {String} PDB file
       */
      PdbWriter.prototype.getData = function getData () {
          this._writeRecords();
          return this._records.join('\n');
      };

      return PdbWriter;
  }(Writer));

  /**
   * Writer class for sdf/mol files.
   */
  // Hard-coded chiral as false as we don't specify it any atoms
  var CountFormat = '%3i%3i  0  0  0  0  0  0  0  0999 V2000';
  var AtomLine = '%10.4f%10.4f%10.4f %-3s 0%3i  0  0  0';
  var BondFormat = '%3i%3i%3i  0  0  0';
  var SdfWriter = /*@__PURE__*/(function (Writer) {
      function SdfWriter(structure) {
          Writer.call(this);
          this.mimeType = 'text/plain';
          this.defaultName = 'structure';
          this.defaultExt = 'sdf';
          this.structure = structure;
          // Follow the pdb-writer example:
          this._records = [];
      }

      if ( Writer ) SdfWriter.__proto__ = Writer;
      SdfWriter.prototype = Object.create( Writer && Writer.prototype );
      SdfWriter.prototype.constructor = SdfWriter;

      var prototypeAccessors = { idString: { configurable: true },titleString: { configurable: true },countsString: { configurable: true },chargeLines: { configurable: true } };
      prototypeAccessors.idString.get = function () {
          return this.structure.id;
      };
      prototypeAccessors.titleString.get = function () {
          return '  ' + this.structure.title;
      };
      prototypeAccessors.countsString.get = function () {
          return sprintf.sprintf(CountFormat, this.structure.atomCount, this.structure.bondCount);
      };
      prototypeAccessors.chargeLines.get = function () {
          var pairs = [];
          this.structure.eachAtom(function (ap) {
              if (ap.formalCharge != null && ap.formalCharge !== 0) {
                  pairs.push([ap.index, ap.formalCharge]);
              }
          });
          var lines = [];
          for (var i = 0; i < pairs.length; i += 8) {
              var nCharges = Math.min(8, pairs.length - i);
              var s = sprintf.sprintf('M  CHG%3i', nCharges);
              for (var j = i; j < i + nCharges; j++) {
                  s += sprintf.sprintf(' %3i %3i', pairs[j][0] + 1, pairs[j][1]);
              }
              lines.push(s);
          }
          return lines;
      };
      SdfWriter.prototype.formatAtom = function formatAtom (ap) {
          var charge = 0;
          if (ap.formalCharge != null && ap.formalCharge !== 0) {
              charge = 4 - ap.formalCharge;
          }
          var line = sprintf.sprintf(AtomLine, ap.x, ap.y, ap.z, ap.element, charge);
          if (line.length !== 48) {
              throw new Error('Incompatible atom for sdf format');
          }
          return line;
      };
      SdfWriter.prototype.formatBond = function formatBond (bp) {
          return sprintf.sprintf(BondFormat, bp.atomIndex1 + 1, bp.atomIndex2 + 1, bp.bondOrder);
      };
      SdfWriter.prototype._writeRecords = function _writeRecords () {
          this._records.length = 0;
          this._writeHeader();
          this._writeCTab();
          this._writeFooter();
      };
      SdfWriter.prototype._writeHeader = function _writeHeader () {
          this._records.push(this.idString, this.titleString, '');
      };
      SdfWriter.prototype._writeCTab = function _writeCTab () {
          var this$1$1 = this;

          this._records.push(this.countsString);
          this.structure.eachAtom(function (ap) {
              this$1$1._records.push(this$1$1.formatAtom(ap));
          });
          this.structure.eachBond(function (bp) {
              this$1$1._records.push(this$1$1.formatBond(bp));
          });
          this.chargeLines.forEach(function (line) {
              this$1$1._records.push(line);
          });
          this._records.push('M  END');
      };
      SdfWriter.prototype._writeFooter = function _writeFooter () {
          this._records.push('$$$$');
      };
      SdfWriter.prototype.getData = function getData () {
          this._writeRecords();
          return this._records.join('\n');
      };

      Object.defineProperties( SdfWriter.prototype, prototypeAccessors );

      return SdfWriter;
  }(Writer));

  /**
   * @file IO Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   *
   * Adapted and converted to TypeScript from https://github.com/image-js/iobuffer
   * MIT License, Copyright (c) 2015 Michaël Zasso
   */
  var defaultByteLength = 1024 * 8;
  var charArray = [];
  /**
   * Class for writing and reading binary data
   */
  var IOBuffer = function IOBuffer(data, params) {
      if ( params === void 0 ) params = {};

      this._mark = 0;
      this._marks = [];
      this.offset = 0; // The current offset of the buffer's pointer
      this.littleEndian = true;
      var dataIsGiven = false;
      if (data === undefined) {
          data = defaultByteLength;
      }
      if (typeof data === 'number') {
          data = new ArrayBuffer(data);
      }
      else {
          dataIsGiven = true;
      }
      var offset = params.offset ? params.offset >>> 0 : 0;
      var byteLength = data.byteLength - offset;
      var dvOffset = offset;
      if (!(data instanceof ArrayBuffer)) {
          if (data.byteLength !== data.buffer.byteLength) {
              dvOffset = data.byteOffset + offset;
          }
          data = data.buffer;
      }
      if (dataIsGiven) {
          this._lastWrittenByte = byteLength;
      }
      else {
          this._lastWrittenByte = 0;
      }
      this.buffer = data;
      this.length = byteLength;
      this.byteLength = byteLength;
      this.byteOffset = dvOffset;
      this._data = new DataView(this.buffer, dvOffset, byteLength);
  };
  /**
   * Checks if the memory allocated to the buffer is sufficient to store more bytes after the offset
   * @param {number} [byteLength=1] The needed memory in bytes
   * @return {boolean} Returns true if there is sufficient space and false otherwise
   */
  IOBuffer.prototype.available = function available (byteLength) {
      if (byteLength === undefined)
          { byteLength = 1; }
      return (this.offset + byteLength) <= this.length;
  };
  /**
   * Check if little-endian mode is used for reading and writing multi-byte values
   * @return {boolean} Returns true if little-endian mode is used, false otherwise
   */
  IOBuffer.prototype.isLittleEndian = function isLittleEndian () {
      return this.littleEndian;
  };
  /**
   * Set little-endian mode for reading and writing multi-byte values
   * @return {IOBuffer}
   */
  IOBuffer.prototype.setLittleEndian = function setLittleEndian () {
      this.littleEndian = true;
      return this;
  };
  /**
   * Check if big-endian mode is used for reading and writing multi-byte values
   * @return {boolean} Returns true if big-endian mode is used, false otherwise
   */
  IOBuffer.prototype.isBigEndian = function isBigEndian () {
      return !this.littleEndian;
  };
  /**
   * Switches to big-endian mode for reading and writing multi-byte values
   * @return {IOBuffer}
   */
  IOBuffer.prototype.setBigEndian = function setBigEndian () {
      this.littleEndian = false;
      return this;
  };
  /**
   * Move the pointer n bytes forward
   * @param {number} n
   * @return {IOBuffer}
   */
  IOBuffer.prototype.skip = function skip (n) {
      if (n === undefined)
          { n = 1; }
      this.offset += n;
      return this;
  };
  /**
   * Move the pointer to the given offset
   * @param {number} offset
   * @return {IOBuffer}
   */
  IOBuffer.prototype.seek = function seek (offset) {
      this.offset = offset;
      return this;
  };
  /**
   * Store the current pointer offset.
   * @see {@link IOBuffer#reset}
   * @return {IOBuffer}
   */
  IOBuffer.prototype.mark = function mark () {
      this._mark = this.offset;
      return this;
  };
  /**
   * Move the pointer back to the last pointer offset set by mark
   * @see {@link IOBuffer#mark}
   * @return {IOBuffer}
   */
  IOBuffer.prototype.reset = function reset () {
      this.offset = this._mark;
      return this;
  };
  /**
   * Push the current pointer offset to the mark stack
   * @see {@link IOBuffer#popMark}
   * @return {IOBuffer}
   */
  IOBuffer.prototype.pushMark = function pushMark () {
      this._marks.push(this.offset);
      return this;
  };
  /**
   * Pop the last pointer offset from the mark stack, and set the current pointer offset to the popped value
   * @see {@link IOBuffer#pushMark}
   * @return {IOBuffer}
   */
  IOBuffer.prototype.popMark = function popMark () {
      var offset = this._marks.pop();
      if (offset === undefined)
          { throw new Error('Mark stack empty'); }
      this.seek(offset);
      return this;
  };
  /**
   * Move the pointer offset back to 0
   * @return {IOBuffer}
   */
  IOBuffer.prototype.rewind = function rewind () {
      this.offset = 0;
      return this;
  };
  /**
   * Make sure the buffer has sufficient memory to write a given byteLength at the current pointer offset
   * If the buffer's memory is insufficient, this method will create a new buffer (a copy) with a length
   * that is twice (byteLength + current offset)
   * @param {number} [byteLength = 1]
   * @return {IOBuffer}
   */
  IOBuffer.prototype.ensureAvailable = function ensureAvailable (byteLength) {
      if (byteLength === undefined)
          { byteLength = 1; }
      if (!this.available(byteLength)) {
          var lengthNeeded = this.offset + byteLength;
          var newLength = lengthNeeded * 2;
          var newArray = new Uint8Array(newLength);
          newArray.set(new Uint8Array(this.buffer));
          this.buffer = newArray.buffer;
          this.length = this.byteLength = newLength;
          this._data = new DataView(this.buffer);
      }
      return this;
  };
  /**
   * Read a byte and return false if the byte's value is 0, or true otherwise
   * Moves pointer forward
   * @return {boolean}
   */
  IOBuffer.prototype.readBoolean = function readBoolean () {
      return this.readUint8() !== 0;
  };
  /**
   * Read a signed 8-bit integer and move pointer forward
   * @return {number}
   */
  IOBuffer.prototype.readInt8 = function readInt8 () {
      return this._data.getInt8(this.offset++);
  };
  /**
   * Read an unsigned 8-bit integer and move pointer forward
   * @return {number}
   */
  IOBuffer.prototype.readUint8 = function readUint8 () {
      return this._data.getUint8(this.offset++);
  };
  /**
   * Alias for {@link IOBuffer#readUint8}
   * @return {number}
   */
  IOBuffer.prototype.readByte = function readByte () {
      return this.readUint8();
  };
  /**
   * Read n bytes and move pointer forward.
   * @param {number} n
   * @return {Uint8Array}
   */
  IOBuffer.prototype.readBytes = function readBytes (n) {
      if (n === undefined)
          { n = 1; }
      var bytes = new Uint8Array(n);
      for (var i = 0; i < n; i++) {
          bytes[i] = this.readByte();
      }
      return bytes;
  };
  /**
   * Read a 16-bit signed integer and move pointer forward
   * @return {number}
   */
  IOBuffer.prototype.readInt16 = function readInt16 () {
      var value = this._data.getInt16(this.offset, this.littleEndian);
      this.offset += 2;
      return value;
  };
  /**
   * Read a 16-bit unsigned integer and move pointer forward
   * @return {number}
   */
  IOBuffer.prototype.readUint16 = function readUint16 () {
      var value = this._data.getUint16(this.offset, this.littleEndian);
      this.offset += 2;
      return value;
  };
  /**
   * Read a 32-bit signed integer and move pointer forward
   * @return {number}
   */
  IOBuffer.prototype.readInt32 = function readInt32 () {
      var value = this._data.getInt32(this.offset, this.littleEndian);
      this.offset += 4;
      return value;
  };
  /**
   * Read a 32-bit unsigned integer and move pointer forward
   * @return {number}
   */
  IOBuffer.prototype.readUint32 = function readUint32 () {
      var value = this._data.getUint32(this.offset, this.littleEndian);
      this.offset += 4;
      return value;
  };
  /**
   * Read a 32-bit floating number and move pointer forward
   * @return {number}
   */
  IOBuffer.prototype.readFloat32 = function readFloat32 () {
      var value = this._data.getFloat32(this.offset, this.littleEndian);
      this.offset += 4;
      return value;
  };
  /**
   * Read a 64-bit floating number and move pointer forward
   * @return {number}
   */
  IOBuffer.prototype.readFloat64 = function readFloat64 () {
      var value = this._data.getFloat64(this.offset, this.littleEndian);
      this.offset += 8;
      return value;
  };
  /**
   * Read 1-byte ascii character and move pointer forward
   * @return {string}
   */
  IOBuffer.prototype.readChar = function readChar () {
      return String.fromCharCode(this.readInt8());
  };
  /**
   * Read n 1-byte ascii characters and move pointer forward
   * @param {number} n
   * @return {string}
   */
  IOBuffer.prototype.readChars = function readChars (n) {
          if ( n === void 0 ) n = 1;

      charArray.length = n;
      for (var i = 0; i < n; i++) {
          charArray[i] = this.readChar();
      }
      return charArray.join('');
  };
  /**
   * Write 0xff if the passed value is truthy, 0x00 otherwise
   * @param {any} value
   * @return {IOBuffer}
   */
  IOBuffer.prototype.writeBoolean = function writeBoolean (value) {
          if ( value === void 0 ) value = false;

      this.writeUint8(value ? 0xff : 0x00);
      return this;
  };
  /**
   * Write value as an 8-bit signed integer
   * @param {number} value
   * @return {IOBuffer}
   */
  IOBuffer.prototype.writeInt8 = function writeInt8 (value) {
      this.ensureAvailable(1);
      this._data.setInt8(this.offset++, value);
      this._updateLastWrittenByte();
      return this;
  };
  /**
   * Write value as a 8-bit unsigned integer
   * @param {number} value
   * @return {IOBuffer}
   */
  IOBuffer.prototype.writeUint8 = function writeUint8 (value) {
      this.ensureAvailable(1);
      this._data.setUint8(this.offset++, value);
      this._updateLastWrittenByte();
      return this;
  };
  /**
   * An alias for {@link IOBuffer#writeUint8}
   * @param {number} value
   * @return {IOBuffer}
   */
  IOBuffer.prototype.writeByte = function writeByte (value) {
      return this.writeUint8(value);
  };
  /**
   * Write bytes
   * @param {Array|Uint8Array} bytes
   * @return {IOBuffer}
   */
  IOBuffer.prototype.writeBytes = function writeBytes (bytes) {
      this.ensureAvailable(bytes.length);
      for (var i = 0; i < bytes.length; i++) {
          this._data.setUint8(this.offset++, bytes[i]);
      }
      this._updateLastWrittenByte();
      return this;
  };
  /**
   * Write value as an 16-bit signed integer
   * @param {number} value
   * @return {IOBuffer}
   */
  IOBuffer.prototype.writeInt16 = function writeInt16 (value) {
      this.ensureAvailable(2);
      this._data.setInt16(this.offset, value, this.littleEndian);
      this.offset += 2;
      this._updateLastWrittenByte();
      return this;
  };
  /**
   * Write value as a 16-bit unsigned integer
   * @param {number} value
   * @return {IOBuffer}
   */
  IOBuffer.prototype.writeUint16 = function writeUint16 (value) {
      this.ensureAvailable(2);
      this._data.setUint16(this.offset, value, this.littleEndian);
      this.offset += 2;
      this._updateLastWrittenByte();
      return this;
  };
  /**
   * Write a 32-bit signed integer at the current pointer offset
   * @param {number} value
   * @return {IOBuffer}
   */
  IOBuffer.prototype.writeInt32 = function writeInt32 (value) {
      this.ensureAvailable(4);
      this._data.setInt32(this.offset, value, this.littleEndian);
      this.offset += 4;
      this._updateLastWrittenByte();
      return this;
  };
  /**
   * Write a 32-bit unsigned integer at the current pointer offset
   * @param {number} value - The value to set
   * @return {IOBuffer}
   */
  IOBuffer.prototype.writeUint32 = function writeUint32 (value) {
      this.ensureAvailable(4);
      this._data.setUint32(this.offset, value, this.littleEndian);
      this.offset += 4;
      this._updateLastWrittenByte();
      return this;
  };
  /**
   * Write a 32-bit floating number at the current pointer offset
   * @param {number} value - The value to set
   * @return {IOBuffer}
   */
  IOBuffer.prototype.writeFloat32 = function writeFloat32 (value) {
      this.ensureAvailable(4);
      this._data.setFloat32(this.offset, value, this.littleEndian);
      this.offset += 4;
      this._updateLastWrittenByte();
      return this;
  };
  /**
   * Write a 64-bit floating number at the current pointer offset
   * @param {number} value
   * @return {IOBuffer}
   */
  IOBuffer.prototype.writeFloat64 = function writeFloat64 (value) {
      this.ensureAvailable(8);
      this._data.setFloat64(this.offset, value, this.littleEndian);
      this.offset += 8;
      this._updateLastWrittenByte();
      return this;
  };
  /**
   * Write the charCode of the passed string's first character to the current pointer offset
   * @param {string} str - The character to set
   * @return {IOBuffer}
   */
  IOBuffer.prototype.writeChar = function writeChar (str) {
      return this.writeUint8(str.charCodeAt(0));
  };
  /**
   * Write the charCodes of the passed string's characters to the current pointer offset
   * @param {string} str
   * @return {IOBuffer}
   */
  IOBuffer.prototype.writeChars = function writeChars (str) {
      for (var i = 0; i < str.length; i++) {
          this.writeUint8(str.charCodeAt(i));
      }
      return this;
  };
  /**
   * Export a Uint8Array view of the internal buffer.
   * The view starts at the byte offset and its length
   * is calculated to stop at the last written byte or the original length.
   * @return {Uint8Array}
   */
  IOBuffer.prototype.toArray = function toArray () {
      return new Uint8Array(this.buffer, this.byteOffset, this._lastWrittenByte);
  };
  /**
   * Update the last written byte offset
   * @private
   */
  IOBuffer.prototype._updateLastWrittenByte = function _updateLastWrittenByte () {
      if (this.offset > this._lastWrittenByte) {
          this._lastWrittenByte = this.offset;
      }
  };

  /**
   * @file STL Writer
   * @author Paul Pillot <paul.pillot@cimf.ca>
   * @private
   */
  // https://en.wikipedia.org/wiki/STL_(file_format)#ASCII_STL
  /**
   * Create an STL File from a surface Object (e.g. for 3D printing)
   *
   * @example
   * molsurf = new MolecularSurface(structure)
   * surf = molsurf.getSurface({type: 'av', probeRadius: 1.4})
   * stl = new StlWriter(surf)
   * stl.download('myFileName')
   */
  var StlWriter = /*@__PURE__*/(function (Writer) {
      function StlWriter(surface) {
          Writer.call(this);
          this.mimeType = 'application/vnd.ms-pki.stl';
          this.defaultName = 'surface';
          this.defaultExt = 'stl';
          this.surface = surface;
      }

      if ( Writer ) StlWriter.__proto__ = Writer;
      StlWriter.prototype = Object.create( Writer && Writer.prototype );
      StlWriter.prototype.constructor = StlWriter;
      /*
       * Get STL Binary data
       *
       * Adapted from: https://github.com/mrdoob/three.js/blob/master/examples/js/exporters/STLBinaryExporter.js
       * see https://en.wikipedia.org/wiki/STL_(file_format)#Binary_STL for the file format description
       *
       * @return {DataView} the data
       */
      StlWriter.prototype.getData = function getData () {
          var triangles = this.surface.index.length / 3;
          var bufferLength = triangles * 2 + triangles * 3 * 4 * 4 + 80 + 4;
          var output = new IOBuffer(bufferLength);
          output.skip(80); // skip header
          output.writeUint32(triangles);
          var vector = new Vector3();
          var vectorNorm1 = new Vector3();
          var vectorNorm2 = new Vector3();
          var vectorNorm3 = new Vector3();
          // traversing vertices
          for (var i = 0; i < triangles; i++) {
              var indices = [
                  this.surface.index[i * 3],
                  this.surface.index[i * 3 + 1],
                  this.surface.index[i * 3 + 2]
              ];
              vectorNorm1.fromArray(this.surface.normal, indices[0] * 3);
              vectorNorm2.fromArray(this.surface.normal, indices[1] * 3);
              vectorNorm3.fromArray(this.surface.normal, indices[2] * 3);
              vector.addVectors(vectorNorm1, vectorNorm2).add(vectorNorm3).normalize();
              output.writeFloat32(vector.x);
              output.writeFloat32(vector.y);
              output.writeFloat32(vector.z);
              for (var j = 0; j < 3; j++) {
                  vector.fromArray(this.surface.position, indices[j] * 3);
                  output.writeFloat32(vector.x); // vertices
                  output.writeFloat32(vector.y);
                  output.writeFloat32(vector.z);
              }
              output.writeUint16(0); // attribute byte count
          }
          return new DataView(output.buffer);
      };

      return StlWriter;
  }(Writer));

  /**
   * @file Counter
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Counter class for keeping track of counts
   */
  var Counter = function Counter() {
      this.count = 0;
      this.signals = {
          countChanged: new signals.Signal()
      };
  };
  /**
   * Set the `count` to zero
   * @return {undefined}
   */
  Counter.prototype.clear = function clear () {
      this.change(-this.count);
  };
  /**
   * Change the `count`
   * @fires Counter#countChanged
   * @param {Integer} delta - count change
   * @return {undefined}
   */
  Counter.prototype.change = function change (delta) {
      this.count += delta;
      this.signals.countChanged.dispatch(delta, this.count);
      if (this.count < 0) {
          Log.warn('Counter.count below zero', this.count);
      }
  };
  /**
   * Increments the `count` by one.
   * @return {undefined}
   */
  Counter.prototype.increment = function increment () {
      this.change(1);
  };
  /**
   * Decrements the `count` by one.
   * @return {undefined}
   */
  Counter.prototype.decrement = function decrement () {
      this.change(-1);
  };
  /**
   * Listen to another counter object and change this `count` by the
   * same amount
   * @param  {Counter} counter - the counter object to listen to
   * @return {undefined}
   */
  Counter.prototype.listen = function listen (counter) {
      this.change(counter.count);
      counter.signals.countChanged.add(this.change, this);
  };
  /**
   * Stop listening to the other counter object
   * @param  {Counter} counter - the counter object to stop listening to
   * @return {undefined}
   */
  Counter.prototype.unlisten = function unlisten (counter) {
      var countChanged = counter.signals.countChanged;
      if (countChanged.has(this.change, this)) {
          countChanged.remove(this.change, this);
      }
  };
  /**
   * Invole the callback function once, when the `count` becomes zero
   * @param  {Function} callback - the callback function
   * @param  {Object}   context - the context for the callback function
   * @return {undefined}
   */
  Counter.prototype.onZeroOnce = function onZeroOnce (callback, context) {
          var this$1$1 = this;

      if (this.count === 0) {
          callback.call(context);
      }
      else {
          var fn = function () {
              if (this$1$1.count === 0) {
                  this$1$1.signals.countChanged.remove(fn, this$1$1);
                  callback.call(context);
              }
          };
          this.signals.countChanged.add(fn, this);
      }
  };
  Counter.prototype.dispose = function dispose () {
      this.clear();
      this.signals.countChanged.dispose();
  };

  ShaderRegistry.add('shader/BasicLine.vert', "void main(){\n#include begin_vertex\n#include project_vertex\n}");

  ShaderRegistry.add('shader/BasicLine.frag', "uniform vec3 uColor;\n#include common\n#include fog_pars_fragment\nvoid main(){\ngl_FragColor = vec4( uColor, 1.0 );\n#include premultiplied_alpha_fragment\n#include tonemapping_fragment\n#include encodings_fragment\n#include fog_fragment\n}");

  ShaderRegistry.add('shader/Quad.vert', "varying vec2 vUv;\nvoid main() {\nvUv = uv;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}");

  ShaderRegistry.add('shader/Quad.frag', "varying vec2 vUv;\nuniform sampler2D tForeground;\nuniform float scale;\nvoid main() {\nvec4 foreground = texture2D( tForeground, vUv );\ngl_FragColor = foreground * scale;\n}");

  /**
   * @file Stats
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var Stats = function Stats() {
      this.signals = {
          updated: new signals.Signal()
      };
      this.maxDuration = -Infinity;
      this.minDuration = Infinity;
      this.avgDuration = 14;
      this.lastDuration = Infinity;
      this.prevFpsTime = 0;
      this.lastFps = Infinity;
      this.lastFrames = 1;
      this.frames = 0;
      this.count = 0;
      this.begin();
  };
  Stats.prototype.update = function update () {
      this.startTime = this.end();
      this.currentTime = this.startTime;
      this.signals.updated.dispatch();
  };
  Stats.prototype.begin = function begin () {
      this.startTime = window.performance.now();
      this.lastFrames = this.frames;
  };
  Stats.prototype.end = function end () {
      var time = window.performance.now();
      this.count += 1;
      this.frames += 1;
      this.lastDuration = time - this.startTime;
      this.minDuration = Math.min(this.minDuration, this.lastDuration);
      this.maxDuration = Math.max(this.maxDuration, this.lastDuration);
      this.avgDuration -= this.avgDuration / 30;
      this.avgDuration += this.lastDuration / 30;
      if (time > this.prevFpsTime + 1000) {
          this.lastFps = this.frames;
          this.prevFpsTime = time;
          this.frames = 0;
      }
      return time;
  };

  ShaderRegistry.add('shader/chunk/fog_fragment.glsl', "#ifdef USE_FOG\nfloat depth = length( vViewPosition );\n#ifdef FOG_EXP2\nfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\n#else\nfloat fogFactor = smoothstep( fogNear, fogFar, depth );\n#endif\ngl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif");

  ShaderRegistry.add('shader/chunk/interior_fragment.glsl', "if( gl_FrontFacing == false ){\n#ifdef USE_INTERIOR_COLOR\noutgoingLight.xyz = interiorColor;\n#else\n#ifdef DIFFUSE_INTERIOR\noutgoingLight.xyz = vColor;\n#endif\n#endif\noutgoingLight.xyz *= 1.0 - interiorDarkening;\n}");

  ShaderRegistry.add('shader/chunk/matrix_scale.glsl', "float matrixScale( in mat4 m ){\nvec4 r = m[ 0 ];\nreturn sqrt( r[ 0 ] * r[ 0 ] + r[ 1 ] * r[ 1 ] + r[ 2 ] * r[ 2 ] );\n}");

  ShaderRegistry.add('shader/chunk/nearclip_vertex.glsl', "#ifdef NEAR_CLIP\nif( vViewPosition.z < clipNear - 5.0 )\ngl_Position.z = 2.0 * gl_Position.w;\n#endif");

  ShaderRegistry.add('shader/chunk/nearclip_fragment.glsl', "#ifdef NEAR_CLIP\nif( vViewPosition.z < clipNear )\ndiscard;\n#endif");

  ShaderRegistry.add('shader/chunk/opaque_back_fragment.glsl', "#ifdef OPAQUE_BACK\n#ifdef FLIP_SIDED\nif( gl_FrontFacing == true ){\ngl_FragColor.a = 1.0;\n}\n#else\nif( gl_FrontFacing == false ){\ngl_FragColor.a = 1.0;\n}\n#endif\n#endif");

  ShaderRegistry.add('shader/chunk/radiusclip_vertex.glsl', "#ifdef RADIUS_CLIP\nif( distance( vViewPosition, vClipCenter ) > clipRadius + 5.0 )\ngl_Position.z = 2.0 * gl_Position.w;\n#endif");

  ShaderRegistry.add('shader/chunk/radiusclip_fragment.glsl', "#ifdef RADIUS_CLIP\nif( distance( vViewPosition, vClipCenter ) > clipRadius )\ndiscard;\n#endif");

  ShaderRegistry.add('shader/chunk/unpack_color.glsl', "vec3 unpackColor(float f) {\nvec3 color;\ncolor.r = floor(f / 256.0 / 256.0);\ncolor.g = floor((f - color.r * 256.0 * 256.0) / 256.0);\ncolor.b = floor(f - color.r * 256.0 * 256.0 - color.g * 256.0);\nreturn color / 255.0;\n}");

  /**
   * @file Shader Utils
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function getDefines(defines) {
      if (defines === undefined)
          { return ''; }
      var lines = [];
      for (var name in defines) {
          var value = defines[name];
          if (!value)
              { continue; }
          lines.push(("#define " + name + " " + value));
      }
      return lines.join('\n') + '\n';
  }
  var reInclude = /^(?!\/\/)\s*#include\s+(\S+)/gmi;
  var shaderCache = {};
  function getShader(name, defines) {
      if ( defines === void 0 ) defines = {};

      var hash = name + '|';
      for (var key in defines) {
          hash += key + ':' + defines[key];
      }
      if (!shaderCache[hash]) {
          var definesText = getDefines(defines);
          var shaderText = ShaderRegistry.get(("shader/" + name));
          if (!shaderText) {
              throw new Error(("empty shader, '" + name + "'"));
          }
          shaderText = shaderText.replace(reInclude, function (match, p1) {
              var path = "shader/chunk/" + p1 + ".glsl";
              var chunk = ShaderRegistry.get(path) || ShaderChunk[p1];
              if (!chunk) {
                  throw new Error(("empty chunk, '" + p1 + "'"));
              }
              return chunk;
          });
          shaderCache[hash] = definesText + shaderText;
      }
      return shaderCache[hash];
  }

  /**
   * @file Viewer Constants
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  if (typeof WebGLRenderingContext !== 'undefined') {
      var wrcp = WebGLRenderingContext.prototype;
      // wrap WebGL debug function used by three.js and
      // ignore calls to them when the debug flag is not set
      var _getShaderParameter = wrcp.getShaderParameter;
      wrcp.getShaderParameter = function getShaderParameter() {
          if (exports.Debug) {
              return _getShaderParameter.apply(this, arguments);
          }
          else {
              return true;
          }
      };
      var _getShaderInfoLog = wrcp.getShaderInfoLog;
      wrcp.getShaderInfoLog = function getShaderInfoLog() {
          if (exports.Debug) {
              return _getShaderInfoLog.apply(this, arguments);
          }
          else {
              return '';
          }
      };
      var _getProgramParameter = wrcp.getProgramParameter;
      wrcp.getProgramParameter = function getProgramParameter(program, pname) {
          if (exports.Debug || pname !== wrcp.LINK_STATUS) {
              return _getProgramParameter.apply(this, arguments);
          }
          else {
              return true;
          }
      };
      var _getProgramInfoLog = wrcp.getProgramInfoLog;
      wrcp.getProgramInfoLog = function getProgramInfoLog() {
          if (exports.Debug) {
              return _getProgramInfoLog.apply(this, arguments);
          }
          else {
              return '';
          }
      };
  }
  var JitterVectors = [
      [
          [0, 0]
      ],
      [
          [4, 4], [-4, -4]
      ],
      [
          [-2, -6], [6, -2], [-6, 2], [2, 6]
      ],
      [
          [1, -3], [-1, 3], [5, 1], [-3, -5],
          [-5, 5], [-7, -1], [3, 7], [7, -7]
      ],
      [
          [1, 1], [-1, -3], [-3, 2], [4, -1],
          [-5, -2], [2, 5], [5, 3], [3, -5],
          [-2, 6], [0, -7], [-4, -6], [-6, 4],
          [-8, 0], [7, -4], [6, 7], [-7, -8]
      ],
      [
          [-4, -7], [-7, -5], [-3, -5], [-5, -4],
          [-1, -4], [-2, -2], [-6, -1], [-4, 0],
          [-7, 1], [-1, 2], [-6, 3], [-3, 3],
          [-7, 6], [-3, 6], [-5, 7], [-1, 7],
          [5, -7], [1, -6], [6, -5], [4, -4],
          [2, -3], [7, -2], [1, -1], [4, -1],
          [2, 1], [6, 2], [0, 4], [4, 4],
          [2, 5], [7, 5], [5, 6], [3, 7]
      ]
  ];
  JitterVectors.forEach(function (offsetList) {
      offsetList.forEach(function (offset) {
          // 0.0625 = 1 / 16
          offset[0] *= 0.0625;
          offset[1] *= 0.0625;
      });
  });

  /**
   * @file Tiled Renderer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var TiledRenderer = function TiledRenderer(renderer, camera, viewer, params) {
      this.canvas = document.createElement('canvas');
      this._viewer = viewer;
      this._factor = defaults(params.factor, 2);
      this._antialias = defaults(params.antialias, false);
      this._onProgress = params.onProgress;
      this._onFinish = params.onFinish;
      if (this._antialias)
          { this._factor *= 2; }
      this._n = this._factor * this._factor;
      // canvas
      this._width = this._viewer.width;
      this._height = this._viewer.height;
      if (this._antialias) {
          this.canvas.width = this._width * this._factor / 2;
          this.canvas.height = this._height * this._factor / 2;
      }
      else {
          this.canvas.width = this._width * this._factor;
          this.canvas.height = this._height * this._factor;
      }
      this._ctx = this.canvas.getContext('2d');
      this._viewerSampleLevel = viewer.sampleLevel;
      this._viewer.setSampling(-1);
  };
  TiledRenderer.prototype._renderTile = function _renderTile (i) {
      var viewer = this._viewer;
      var width = this._width;
      var height = this._height;
      var factor = this._factor;
      var x = i % factor;
      var y = Math.floor(i / factor);
      var offsetX = x * width;
      var offsetY = y * height;
      viewer.camera.setViewOffset(width * factor, height * factor, offsetX, offsetY, width, height);
      viewer.render();
      if (this._antialias) {
          var w = Math.round((offsetX + width) / 2) - Math.round(offsetX / 2);
          var h = Math.round((offsetY + height) / 2) - Math.round(offsetY / 2);
          this._ctx.drawImage(viewer.renderer.domElement, Math.round(offsetX / 2), Math.round(offsetY / 2), w, h);
      }
      else {
          this._ctx.drawImage(viewer.renderer.domElement, Math.floor(offsetX), Math.floor(offsetY), Math.ceil(width), Math.ceil(height));
      }
      if (typeof this._onProgress === 'function') {
          this._onProgress(i + 1, this._n, false);
      }
  };
  TiledRenderer.prototype._finalize = function _finalize () {
      this._viewer.setSampling(this._viewerSampleLevel);
      this._viewer.camera.view = null; // TODO
      if (typeof this._onFinish === 'function') {
          this._onFinish(this._n + 1, this._n, false);
      }
  };
  TiledRenderer.prototype.render = function render () {
      for (var i = 0; i <= this._n; ++i) {
          if (i === this._n) {
              this._finalize();
          }
          else {
              this._renderTile(i);
          }
      }
  };
  TiledRenderer.prototype.renderAsync = function renderAsync () {
          var this$1$1 = this;

      var count = 0;
      var n = this._n;
      var fn = function () {
          if (count === n) {
              this$1$1._finalize();
          }
          else {
              this$1$1._renderTile(count);
          }
          count += 1;
      };
      for (var i = 0; i <= n; ++i) {
          setTimeout(fn, 0);
      }
  };

  /**
   * @file Math Constants
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var TwoPI = 2 * Math.PI;
  var RAD2DEG = 180 / Math.PI;

  /**
   * @file Array Utils
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function circularMean(array, max, stride, offset, indices) {
      if ( stride === void 0 ) stride = 1;
      if ( offset === void 0 ) offset = 0;

      // http://en.wikipedia.org/wiki/Center_of_mass#Systems_with_periodic_boundary_conditions
      // Bai, Linge; Breen, David (2008). Calculating Center of Mass in an Unbounded 2D Environment. Journal of Graphics, GPU, and Game Tools 13 (4): 53–60.
      // http://stackoverflow.com/questions/18166507/using-fft-to-find-the-center-of-mass-under-periodic-boundary-conditions
      var n = indices ? indices.length : array.length / stride;
      var cosMean = 0;
      var sinMean = 0;
      if (indices) {
          for (var i = 0; i < n; ++i) {
              var c = (array[indices[i] * stride + offset] + max) % max;
              var angle = (c / max) * TwoPI - Math.PI;
              cosMean += Math.cos(angle);
              sinMean += Math.sin(angle);
          }
      }
      else {
          for (var i$1 = offset; i$1 < n; i$1 += stride) {
              var c$1 = (array[i$1] + max) % max;
              var angle$1 = (c$1 / max) * TwoPI - Math.PI;
              cosMean += Math.cos(angle$1);
              sinMean += Math.sin(angle$1);
          }
      }
      cosMean /= n;
      sinMean /= n;
      var meanAngle = Math.atan2(sinMean, cosMean);
      var mean = (meanAngle + Math.PI) / TwoPI * max;
      return mean;
  }
  function calculateCenterArray(array1, array2, center, offset) {
      if ( offset === void 0 ) offset = 0;

      var n = array1.length;
      var c = center || new Float32Array(n);
      for (var i = 0; i < n; i += 3) {
          c[offset + i + 0] = (array1[i + 0] + array2[i + 0]) / 2.0;
          c[offset + i + 1] = (array1[i + 1] + array2[i + 1]) / 2.0;
          c[offset + i + 2] = (array1[i + 2] + array2[i + 2]) / 2.0;
      }
      return c;
  }
  function calculateDirectionArray(array1, array2) {
      var n = array1.length;
      var direction = new Float32Array(n);
      for (var i = 0; i < n; i += 3) {
          direction[i + 0] = array2[i + 0] - array1[i + 0];
          direction[i + 1] = array2[i + 1] - array1[i + 1];
          direction[i + 2] = array2[i + 2] - array1[i + 2];
      }
      return direction;
  }
  function uniformArray(n, a, optionalTarget) {
      var array = optionalTarget || new Float32Array(n);
      for (var i = 0; i < n; ++i) {
          array[i] = a;
      }
      return array;
  }
  function uniformArray3(n, a, b, c, optionalTarget) {
      var array = optionalTarget || new Float32Array(n * 3);
      for (var i = 0; i < n; ++i) {
          var j = i * 3;
          array[j + 0] = a;
          array[j + 1] = b;
          array[j + 2] = c;
      }
      return array;
  }
  function centerArray3(array, center) {
      if ( center === void 0 ) center = new Vector3();

      var n = array.length;
      for (var i = 0; i < n; i += 3) {
          center.x += array[i];
          center.y += array[i + 1];
          center.z += array[i + 2];
      }
      center.divideScalar(n / 3);
      return center;
  }
  function serialArray(n) {
      var array = new Float32Array(n);
      for (var i = 0; i < n; ++i) {
          array[i] = i;
      }
      return array;
  }
  function serialBlockArray(n, b, offset, optionalTarget) {
      if ( offset === void 0 ) offset = 0;

      var array = optionalTarget || new Float32Array(n * b);
      for (var i = 0; i < n; ++i) {
          var k = offset + i * b;
          for (var j = 0; j < b; ++j) {
              array[k + j] = i;
          }
      }
      return array;
  }
  function replicateArrayEntries(array, m) {
      var n = array.length;
      var repArr = new Float32Array(n * m);
      for (var i = 0; i < n; ++i) {
          var k = i * m;
          var a = array[i];
          for (var j = 0; j < m; ++j) {
              repArr[k + j] = a;
          }
      }
      return repArr;
  }
  function replicateArray3Entries(array, m) {
      var n = array.length / 3;
      var repArr = new Float32Array(n * m * 3);
      for (var i = 0; i < n; ++i) {
          var v = i * 3;
          var k = i * m * 3;
          var a = array[v + 0];
          var b = array[v + 1];
          var c = array[v + 2];
          for (var j = 0; j < m; ++j) {
              var l = k + j * 3;
              repArr[l + 0] = a;
              repArr[l + 1] = b;
              repArr[l + 2] = c;
          }
      }
      return repArr;
  }
  function calculateMinArray(array1, array2) {
      var n = array1.length;
      var min = new Float32Array(n);
      for (var i = 0; i < n; i++) {
          min[i] = Math.min(array1[i], array2[i]);
      }
      return min;
  }
  function copyArray(src, dst, srcOffset, dstOffset, length) {
      for (var i = 0; i < length; ++i) {
          dst[dstOffset + i] = src[srcOffset + i];
      }
  }
  function copyWithin(array, srcOffset, dstOffset, length) {
      copyArray(array, array, srcOffset, dstOffset, length);
  }
  function quicksortCmp(arr, cmp, begin, end) {
      if ( begin === void 0 ) begin = 0;

      cmp = cmp || function cmp(a, b) {
          if (a > b)
              { return 1; }
          if (a < b)
              { return -1; }
          return 0;
      };
      end = (end || arr.length) - 1;
      var stack = [];
      var sp = -1;
      var left = begin;
      var right = end;
      var tmp;
      function swap(a, b) {
          var tmp2 = arr[a];
          arr[a] = arr[b];
          arr[b] = tmp2;
      }
      var i, j;
      while (true) {
          if (right - left <= 25) {
              for (var k = left + 1; k <= right; ++k) {
                  tmp = arr[k];
                  i = k - 1;
                  while (i >= left && cmp(arr[i], tmp) > 0) {
                      arr[i + 1] = arr[i];
                      --i;
                  }
                  arr[i + 1] = tmp;
              }
              if (sp === -1)
                  { break; }
              right = stack[sp--]; // ?
              left = stack[sp--];
          }
          else {
              var median = (left + right) >> 1;
              i = left + 1;
              j = right;
              swap(median, i);
              if (cmp(arr[left], arr[right]) > 0) {
                  swap(left, right);
              }
              if (cmp(arr[i], arr[right]) > 0) {
                  swap(i, right);
              }
              if (cmp(arr[left], arr[i]) > 0) {
                  swap(left, i);
              }
              tmp = arr[i];
              while (true) {
                  do
                      { i++; }
                  while (cmp(arr[i], tmp) < 0);
                  do
                      { j--; }
                  while (cmp(arr[j], tmp) > 0);
                  if (j < i)
                      { break; }
                  swap(i, j);
              }
              arr[left + 1] = arr[j];
              arr[j] = tmp;
              if (right - i + 1 >= j - left) {
                  stack[++sp] = i;
                  stack[++sp] = right;
                  right = j - 1;
              }
              else {
                  stack[++sp] = left;
                  stack[++sp] = j - 1;
                  left = i;
              }
          }
      }
      return arr;
  }
  function arrayMax(array) {
      var max = -Infinity;
      for (var i = 0, il = array.length; i < il; ++i) {
          if (array[i] > max)
              { max = array[i]; }
      }
      return max;
  }
  function arrayMin(array) {
      var min = Infinity;
      for (var i = 0, il = array.length; i < il; ++i) {
          if (array[i] < min)
              { min = array[i]; }
      }
      return min;
  }
  function arraySum(array, stride, offset) {
      if ( stride === void 0 ) stride = 1;
      if ( offset === void 0 ) offset = 0;

      var n = array.length;
      var sum = 0;
      for (var i = offset; i < n; i += stride) {
          sum += array[i];
      }
      return sum;
  }
  function arrayMean(array, stride, offset) {
      if ( stride === void 0 ) stride = 1;
      if ( offset === void 0 ) offset = 0;

      return arraySum(array, stride, offset) / (array.length / stride);
  }
  function arrayRms(array) {
      var n = array.length;
      var sumSq = 0;
      for (var i = 0; i < n; ++i) {
          var di = array[i];
          sumSq += di * di;
      }
      return Math.sqrt(sumSq / n);
  }

  /**
   * @file Viewer Utils
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function _trimCanvas(canvas, r, g, b, a) {
      var canvasHeight = canvas.height;
      var canvasWidth = canvas.width;
      var ctx = canvas.getContext('2d');
      var pixels = ctx.getImageData(0, 0, canvasWidth, canvasHeight).data;
      var x, y, doBreak, off;
      doBreak = false;
      for (y = 0; y < canvasHeight; y++) {
          for (x = 0; x < canvasWidth; x++) {
              off = (y * canvasWidth + x) * 4;
              if (pixels[off] !== r || pixels[off + 1] !== g ||
                  pixels[off + 2] !== b || pixels[off + 3] !== a) {
                  doBreak = true;
                  break;
              }
          }
          if (doBreak) {
              break;
          }
      }
      var topY = y;
      doBreak = false;
      for (x = 0; x < canvasWidth; x++) {
          for (y = 0; y < canvasHeight; y++) {
              off = (y * canvasWidth + x) * 4;
              if (pixels[off] !== r || pixels[off + 1] !== g ||
                  pixels[off + 2] !== b || pixels[off + 3] !== a) {
                  doBreak = true;
                  break;
              }
          }
          if (doBreak) {
              break;
          }
      }
      var topX = x;
      doBreak = false;
      for (y = canvasHeight - 1; y >= 0; y--) {
          for (x = canvasWidth - 1; x >= 0; x--) {
              off = (y * canvasWidth + x) * 4;
              if (pixels[off] !== r || pixels[off + 1] !== g ||
                  pixels[off + 2] !== b || pixels[off + 3] !== a) {
                  doBreak = true;
                  break;
              }
          }
          if (doBreak) {
              break;
          }
      }
      var bottomY = y;
      doBreak = false;
      for (x = canvasWidth - 1; x >= 0; x--) {
          for (y = canvasHeight - 1; y >= 0; y--) {
              off = (y * canvasWidth + x) * 4;
              if (pixels[off] !== r || pixels[off + 1] !== g ||
                  pixels[off + 2] !== b || pixels[off + 3] !== a) {
                  doBreak = true;
                  break;
              }
          }
          if (doBreak) {
              break;
          }
      }
      var bottomX = x;
      var trimedCanvas = document.createElement('canvas');
      trimedCanvas.width = bottomX - topX;
      trimedCanvas.height = bottomY - topY;
      var trimedCtx = trimedCanvas.getContext('2d');
      trimedCtx.drawImage(canvas, topX, topY, trimedCanvas.width, trimedCanvas.height, 0, 0, trimedCanvas.width, trimedCanvas.height);
      return trimedCanvas;
  }
  /**
   * Image parameter object.
   * @typedef {Object} ImageParameters - image generation parameters
   * @property {Boolean} trim - trim the image
   * @property {Integer} factor - scaling factor to apply to the viewer canvas
   * @property {Boolean} antialias - antialias the image
   * @property {Boolean} transparent - transparent image background
   */
  var ImageDefaultParameters = {
      trim: false,
      factor: 1,
      antialias: false,
      transparent: false,
      onProgress: undefined
  };
  /**
   * Make image from what is shown in a viewer canvas
   * @param  {Viewer} viewer - the viewer
   * @param  {ImageParameters} params - parameters object
   * @return {Promise} A Promise object that resolves to an image {@link Blob}.
   */
  function makeImage(viewer, params) {
      if ( params === void 0 ) params = {};

      var ref = createParams(params, ImageDefaultParameters);
      var trim = ref.trim;
      var factor = ref.factor;
      var antialias = ref.antialias;
      var transparent = ref.transparent;
      var renderer = viewer.renderer;
      var camera = viewer.camera;
      var originalClearAlpha = renderer.getClearAlpha();
      var backgroundColor = renderer.getClearColor();
      function setLineWidthAndPixelSize(invert) {
          if ( invert === void 0 ) invert = false;

          var _factor = factor;
          if (antialias)
              { _factor *= 2; }
          if (invert)
              { _factor = 1 / _factor; }
          viewer.scene.traverse(function (o) {
              var m = o.material;
              if (m && m.linewidth) {
                  m.linewidth *= _factor;
              }
              if (m && m.uniforms && m.uniforms.size) {
                  if (m.uniforms.size.__seen === undefined) {
                      m.uniforms.size.value *= _factor;
                      m.uniforms.size.__seen = true;
                  }
              }
              if (m && m.uniforms && m.uniforms.linewidth) {
                  if (m.uniforms.linewidth.__seen === undefined) {
                      m.uniforms.linewidth.value *= _factor;
                      m.uniforms.linewidth.__seen = true;
                  }
              }
          });
          viewer.scene.traverse(function (o) {
              var m = o.material;
              if (m && m.uniforms && m.uniforms.size) {
                  delete m.uniforms.size.__seen;
              }
              if (m && m.uniforms && m.uniforms.linewidth) {
                  delete m.uniforms.linewidth.__seen;
              }
          });
      }
      function trimCanvas(canvas) {
          if (trim) {
              var bg = backgroundColor;
              var r = transparent ? 0 : bg.r * 255;
              var g = transparent ? 0 : bg.g * 255;
              var b = transparent ? 0 : bg.b * 255;
              var a = transparent ? 0 : 255;
              return _trimCanvas(canvas, r, g, b, a);
          }
          else {
              return canvas;
          }
      }
      function onProgress(i, n, finished) {
          if (typeof params.onProgress === 'function') {
              params.onProgress(i, n, finished);
          }
      }
      return new Promise(function (resolve, reject) {
          var tiledRenderer = new TiledRenderer(renderer, camera, viewer, { factor: factor, antialias: antialias, onProgress: onProgress, onFinish: onFinish });
          renderer.setClearAlpha(transparent ? 0 : 1);
          setLineWidthAndPixelSize();
          tiledRenderer.renderAsync();
          function onFinish(i, n) {
              var canvas = trimCanvas(tiledRenderer.canvas);
              canvas.toBlob(function (blob) {
                  renderer.setClearAlpha(originalClearAlpha);
                  setLineWidthAndPixelSize(true);
                  viewer.requestRender();
                  onProgress(n, n, true);
                  if (blob) {
                      resolve(blob);
                  }
                  else {
                      reject('error creating image');
                  }
              }, 'image/png');
          }
      });
  }
  var vertex = new Vector3();
  var matrix$1 = new Matrix4();
  var modelViewProjectionMatrix = new Matrix4();
  function sortProjectedPosition(scene, camera) {
      // console.time( "sort" );
      scene.traverseVisible(function (o) {
          if (!(o instanceof Points) || !o.userData.buffer.parameters.sortParticles) {
              return;
          }
          var attributes = o.geometry.attributes; // TODO
          var n = attributes.position.count;
          if (n === 0)
              { return; }
          matrix$1.multiplyMatrices(camera.matrixWorldInverse, o.matrixWorld);
          modelViewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, matrix$1);
          var sortData, sortArray, zArray, cmpFn;
          if (!o.userData.sortData) {
              zArray = new Float32Array(n);
              sortArray = new Uint32Array(n);
              cmpFn = function (ai, bi) {
                  var a = zArray[ai];
                  var b = zArray[bi];
                  if (a > b)
                      { return 1; }
                  if (a < b)
                      { return -1; }
                  return 0;
              };
              sortData = {
                  __zArray: zArray,
                  __sortArray: sortArray,
                  __cmpFn: cmpFn
              };
              o.userData.sortData = sortData;
          }
          else {
              sortData = o.userData.sortData;
              zArray = sortData.__zArray;
              sortArray = sortData.__sortArray;
              cmpFn = sortData.__cmpFn;
          }
          for (var i = 0; i < n; ++i) {
              vertex.fromArray(attributes.position.array, i * 3);
              vertex.applyMatrix4(modelViewProjectionMatrix);
              // negate, so that sorting order is reversed
              zArray[i] = -vertex.z;
              sortArray[i] = i;
          }
          quicksortCmp(sortArray, cmpFn);
          var index, indexSrc, indexDst, tmpTab;
          for (var name in attributes) {
              var attr = attributes[name];
              var array = attr.array;
              var itemSize = attr.itemSize;
              if (!sortData[name]) {
                  sortData[name] = new Float32Array(itemSize * n);
              }
              tmpTab = sortData[name];
              sortData[name] = array;
              for (var i$1 = 0; i$1 < n; ++i$1) {
                  index = sortArray[i$1];
                  for (var j = 0; j < itemSize; ++j) {
                      indexSrc = index * itemSize + j;
                      indexDst = i$1 * itemSize + j;
                      tmpTab[indexDst] = array[indexSrc];
                  }
              }
              attributes[name].array = tmpTab;
              attributes[name].needsUpdate = true;
          }
      });
      // console.timeEnd( "sort" );
  }
  var resolution = new Vector2();
  var projectionMatrixInverse = new Matrix4();
  var projectionMatrixTranspose = new Matrix4();
  function updateMaterialUniforms(group, camera, renderer, cDist, bRadius) {
      var size = new Vector2();
      renderer.getSize(size);
      var canvasHeight = size.height;
      var pixelRatio = renderer.getPixelRatio();
      var ortho = camera.type === 'OrthographicCamera';
      resolution.set(size.width, size.height);
      projectionMatrixInverse.getInverse(camera.projectionMatrix);
      projectionMatrixTranspose.copy(camera.projectionMatrix).transpose();
      group.traverse(function (o) {
          var m = o.material;
          if (!m)
              { return; }
          var u = m.uniforms;
          if (!u)
              { return; }
          if (m.clipNear) {
              var nearFactor = (50 - m.clipNear) / 50;
              var nearClip = cDist - (bRadius * nearFactor);
              u.clipNear.value = nearClip;
          }
          if (u.canvasHeight) {
              u.canvasHeight.value = canvasHeight;
          }
          if (u.resolution) {
              u.resolution.value.copy(resolution);
          }
          if (u.pixelRatio) {
              u.pixelRatio.value = pixelRatio;
          }
          if (u.projectionMatrixInverse) {
              u.projectionMatrixInverse.value.copy(projectionMatrixInverse);
          }
          if (u.projectionMatrixTranspose) {
              u.projectionMatrixTranspose.value.copy(projectionMatrixTranspose);
          }
          if (u.ortho) {
              u.ortho.value = ortho;
          }
      });
  }
  function updateCameraUniforms(group, camera) {
      projectionMatrixInverse.getInverse(camera.projectionMatrix);
      projectionMatrixTranspose.copy(camera.projectionMatrix).transpose();
      group.traverse(function (o) {
          var m = o.material;
          if (!m)
              { return; }
          var u = m.uniforms;
          if (!u)
              { return; }
          if (u.projectionMatrixInverse) {
              u.projectionMatrixInverse.value.copy(projectionMatrixInverse);
          }
          if (u.projectionMatrixTranspose) {
              u.projectionMatrixTranspose.value.copy(projectionMatrixTranspose);
          }
      });
  }

  /**
   * @file Viewer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  // adapted from https://webglfundamentals.org/webgl/resources/webgl-utils.js
  // Copyright 2012, Gregg Tavares. Modified BSD License
  function createProgram(gl, shaders, attribs, locations) {
      var program = gl.createProgram();
      if (!program) {
          console.log("error creating WebGL program");
          return;
      }
      shaders.forEach(function (shader) { return gl.attachShader(program, shader); });
      if (attribs) {
          attribs.forEach(function (attrib, i) {
              gl.bindAttribLocation(program, locations ? locations[i] : i, attrib);
          });
      }
      gl.linkProgram(program);
      // Check the link status
      var linked = gl.getProgramParameter(program, gl.LINK_STATUS);
      if (!linked) {
          console.log(("error linking program: " + (gl.getProgramInfoLog(program))));
          gl.deleteProgram(program);
          return null;
      }
      return program;
  }
  function loadShader(gl, shaderSource, shaderType) {
      var shader = gl.createShader(shaderType);
      if (!shader) {
          console.log(("error creating WebGL shader " + shaderType));
          return; // can't create shader
      }
      gl.shaderSource(shader, shaderSource);
      gl.compileShader(shader);
      // Check the compile status
      var compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);
      if (!compiled) {
          console.log(("error compiling shader " + shader + ": " + (gl.getShaderInfoLog(shader))));
          gl.deleteShader(shader);
          return null;
      }
      return shader;
  }
  //
  function getErrorDescription(gl, error) {
      switch (error) {
          case gl.NO_ERROR: return 'no error';
          case gl.INVALID_ENUM: return 'invalid enum';
          case gl.INVALID_VALUE: return 'invalid value';
          case gl.INVALID_OPERATION: return 'invalid operation';
          case gl.INVALID_FRAMEBUFFER_OPERATION: return 'invalid framebuffer operation';
          case gl.OUT_OF_MEMORY: return 'out of memory';
          case gl.CONTEXT_LOST_WEBGL: return 'context lost';
      }
      return 'unknown error';
  }
  function getExtension(gl, name) {
      var ext = gl.getExtension(name);
      if (!ext)
          { console.log(("extension '" + name + "' not available")); }
      return ext;
  }
  var TextureTestVertShader = "\nattribute vec4 a_position;\n\nvoid main() {\n  gl_Position = a_position;\n}";
  var TextureTestFragShader = "\nprecision mediump float;\nuniform vec4 u_color;\nuniform sampler2D u_texture;\n\nvoid main() {\n  gl_FragColor = texture2D(u_texture, vec2(0.5, 0.5)) * u_color;\n}";
  var TextureTestTexCoords = new Float32Array([
      -1.0, -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 1.0
  ]);
  function testTextureSupport(type) {
      // adapted from
      // https://stackoverflow.com/questions/28827511/webgl-ios-render-to-floating-point-texture
      // Get A WebGL context
      var canvas = document.createElement('canvas');
      canvas.width = 16;
      canvas.height = 16;
      canvas.style.width = 16 + 'px';
      canvas.style.height = 16 + 'px';
      var gl = canvas.getContext("webgl") || canvas.getContext("experimental-webgl");
      if (!gl) {
          console.log(("error creating webgl context for " + type));
          return false;
      }
      if (!(gl instanceof WebGLRenderingContext)) {
          console.log("Got unexpected type for WebGL rendering context");
          return false;
      }
      getExtension(gl, 'OES_texture_float');
      getExtension(gl, 'OES_texture_half_float');
      getExtension(gl, 'WEBGL_color_buffer_float');
      // setup shaders
      var vertShader = loadShader(gl, TextureTestVertShader, gl.VERTEX_SHADER);
      var fragShader = loadShader(gl, TextureTestFragShader, gl.FRAGMENT_SHADER);
      if (!vertShader || !fragShader)
          { return false; }
      // setup program
      var program = createProgram(gl, [vertShader, fragShader]);
      if (!program) {
          console.log("error creating WebGL program");
          return false;
      }
      gl.useProgram(program);
      // look up where the vertex data needs to go.
      var positionLocation = gl.getAttribLocation(program, "a_position");
      var colorLoc = gl.getUniformLocation(program, "u_color");
      if (!colorLoc) {
          console.log("error getting 'u_color' uniform location");
          return false;
      }
      // provide texture coordinates for the rectangle.
      var positionBuffer = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
      gl.bufferData(gl.ARRAY_BUFFER, TextureTestTexCoords, gl.STATIC_DRAW);
      gl.enableVertexAttribArray(positionLocation);
      gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);
      var whiteTex = gl.createTexture();
      var whiteData = new Uint8Array([255, 255, 255, 255]);
      gl.bindTexture(gl.TEXTURE_2D, whiteTex);
      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, whiteData);
      var tex = gl.createTexture();
      gl.bindTexture(gl.TEXTURE_2D, tex);
      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, type, null);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
      var fb = gl.createFramebuffer();
      gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex, 0);
      var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
      if (status !== gl.FRAMEBUFFER_COMPLETE) {
          console.log(("error creating framebuffer for " + type));
          return false;
      }
      // Draw the rectangle.
      gl.bindTexture(gl.TEXTURE_2D, whiteTex);
      gl.uniform4fv(colorLoc, [0, 10, 20, 1]);
      gl.drawArrays(gl.TRIANGLES, 0, 6);
      gl.bindTexture(gl.TEXTURE_2D, tex);
      gl.bindFramebuffer(gl.FRAMEBUFFER, null);
      gl.clearColor(1, 0, 0, 1);
      gl.clear(gl.COLOR_BUFFER_BIT);
      gl.uniform4fv(colorLoc, [0, 1 / 10, 1 / 20, 1]);
      gl.drawArrays(gl.TRIANGLES, 0, 6);
      // Check if rendered correctly
      var pixel = new Uint8Array(4);
      gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, pixel);
      if (pixel[0] !== 0 || pixel[1] < 248 || pixel[2] < 248 || pixel[3] < 254) {
          console.log(("not able to actually render to " + type + " texture"));
          return false;
      }
      // Check reading from float texture
      if (type === gl.FLOAT) {
          gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
          var floatPixel = new Float32Array(4);
          gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.FLOAT, floatPixel);
          var error = gl.getError();
          if (error) {
              console.log(("error reading pixels as float: '" + (getErrorDescription(gl, error)) + "'"));
              return false;
          }
      }
      return true;
  }

  /**
   * @file Viewer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var pixelBufferFloat = new Float32Array(4 * 25);
  var pixelBufferUint = new Uint8Array(4 * 25);
  // When picking, we read a 25 pixel (5x5) array (readRenderTargetPixels)
  // We read the pixels in the order below to find what was picked.
  // This starts at the center and tries successively further points.
  // (Many points will be at equal distance to the center, their order
  // is arbitrary).
  var pixelOrder = [12, 7, 13, 17, 11, 6, 8, 18, 16, 2, 14, 22, 10, 1, 3, 9, 19, 23, 21, 15, 5, 0, 4, 24, 20];
  var tmpMatrix$1 = new Matrix4();
  function onBeforeRender(renderer, scene, camera, geometry, material /*, group */) {
      var u = material.uniforms;
      var updateList = [];
      if (u.objectId) {
          u.objectId.value = SupportsReadPixelsFloat ? this.id : this.id / 255;
          updateList.push('objectId');
      }
      if (u.modelViewMatrixInverse || u.modelViewMatrixInverseTranspose ||
          u.modelViewProjectionMatrix || u.modelViewProjectionMatrixInverse) {
          this.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, this.matrixWorld);
      }
      if (u.modelViewMatrixInverse) {
          u.modelViewMatrixInverse.value.getInverse(this.modelViewMatrix);
          updateList.push('modelViewMatrixInverse');
      }
      if (u.modelViewMatrixInverseTranspose) {
          if (u.modelViewMatrixInverse) {
              u.modelViewMatrixInverseTranspose.value.copy(u.modelViewMatrixInverse.value).transpose();
          }
          else {
              u.modelViewMatrixInverseTranspose.value
                  .getInverse(this.modelViewMatrix)
                  .transpose();
          }
          updateList.push('modelViewMatrixInverseTranspose');
      }
      if (u.modelViewProjectionMatrix) {
          u.modelViewProjectionMatrix.value.multiplyMatrices(camera.projectionMatrix, this.modelViewMatrix);
          updateList.push('modelViewProjectionMatrix');
      }
      if (u.modelViewProjectionMatrixInverse) {
          if (u.modelViewProjectionMatrix) {
              tmpMatrix$1.copy(u.modelViewProjectionMatrix.value);
              u.modelViewProjectionMatrixInverse.value.getInverse(tmpMatrix$1);
          }
          else {
              tmpMatrix$1.multiplyMatrices(camera.projectionMatrix, this.modelViewMatrix);
              u.modelViewProjectionMatrixInverse.value.getInverse(tmpMatrix$1);
          }
          updateList.push('modelViewProjectionMatrixInverse');
      }
      if (updateList.length) {
          var materialProperties = renderer.properties.get(material);
          if (materialProperties.program) {
              var gl = renderer.getContext();
              var p = materialProperties.program;
              gl.useProgram(p.program);
              var pu = p.getUniforms();
              updateList.forEach(function (name) {
                  pu.setValue(gl, name, u[name].value);
              });
          }
      }
  }
  /**
   * Viewer class
   * @class
   * @param {String|Element} [idOrElement] - dom id or element
   */
  var Viewer = function Viewer(idOrElement) {
        this.boundingBox = new Box3();
        this.boundingBoxSize = new Vector3();
        this.boundingBoxLength = 0;
        this.info = {
            memory: {
                programs: 0,
                geometries: 0,
                textures: 0
            },
            render: {
                calls: 0,
                vertices: 0,
                faces: 0,
                points: 0
            }
        };
        this.distVector = new Vector3();
        this.signals = {
            ticked: new signals.Signal(),
            rendered: new signals.Signal()
        };
        if (typeof idOrElement === 'string') {
            var elm = document.getElementById(idOrElement);
            if (elm === null) {
                this.container = document.createElement('div');
            }
            else {
                this.container = elm;
            }
        }
        else if (idOrElement instanceof HTMLElement) {
            this.container = idOrElement;
        }
        else {
            this.container = document.createElement('div');
        }
        if (this.container === document.body) {
            this.width = window.innerWidth || 1;
            this.height = window.innerHeight || 1;
        }
        else {
            var box = this.container.getBoundingClientRect();
            this.width = box.width || 1;
            this.height = box.height || 1;
            this.container.style.overflow = 'hidden';
        }
        this.wrapper = document.createElement('div');
        this.wrapper.style.position = 'relative';
        this.container.appendChild(this.wrapper);
        this._initParams();
        this._initStats();
        this._initCamera();
        this._initScene();
        if (this._initRenderer() === false) {
            Log.error('Viewer: could not initialize renderer');
            return;
        }
        this._initHelper();
        // fog & background
        this.setBackground();
        this.setFog();
        this.animate = this.animate.bind(this);
    };

  var prototypeAccessors$x = { cameraDistance: { configurable: true } };
    Viewer.prototype._initParams = function _initParams () {
        this.parameters = {
            fogColor: new Color(0x000000),
            fogNear: 50,
            fogFar: 100,
            backgroundColor: new Color(0x000000),
            cameraType: 'perspective',
            cameraFov: 40,
            cameraEyeSep: 0.3,
            cameraZ: -80,
            clipNear: 0,
            clipFar: 100,
            clipDist: 10,
            clipMode: 'scene',
            clipScale: 'relative',
            lightColor: new Color(0xdddddd),
            lightIntensity: 1.0,
            ambientColor: new Color(0xdddddd),
            ambientIntensity: 0.2,
            sampleLevel: 0,
            // output encoding: use sRGB for a linear internal workflow, linear for traditional sRGB workflow.
            rendererEncoding: LinearEncoding,
        };
    };
    Viewer.prototype._initCamera = function _initCamera () {
        var lookAt = new Vector3(0, 0, 0);
        var ref = this;
          var width = ref.width;
          var height = ref.height;
        this.perspectiveCamera = new PerspectiveCamera(this.parameters.cameraFov, width / height);
        this.perspectiveCamera.position.z = this.parameters.cameraZ;
        this.perspectiveCamera.lookAt(lookAt);
        this.orthographicCamera = new OrthographicCamera(width / -2, width / 2, height / 2, height / -2);
        this.orthographicCamera.position.z = this.parameters.cameraZ;
        this.orthographicCamera.lookAt(lookAt);
        this.stereoCamera = new StereoCamera();
        this.stereoCamera.aspect = 0.5;
        this.stereoCamera.eyeSep = this.parameters.cameraEyeSep;
        var cameraType = this.parameters.cameraType;
        if (cameraType === 'orthographic') {
            this.camera = this.orthographicCamera;
        }
        else if (cameraType === 'perspective' || cameraType === 'stereo') {
            this.camera = this.perspectiveCamera;
        }
        else {
            throw new Error(("Unknown cameraType '" + cameraType + "'"));
        }
        this.camera.updateProjectionMatrix();
    };
    Viewer.prototype._initStats = function _initStats () {
        this.stats = new Stats();
    };
    Viewer.prototype._initScene = function _initScene () {
        if (!this.scene) {
            this.scene = new Scene();
            this.scene.name = 'scene';
        }
        this.rotationGroup = new Group();
        this.rotationGroup.name = 'rotationGroup';
        this.scene.add(this.rotationGroup);
        this.translationGroup = new Group();
        this.translationGroup.name = 'translationGroup';
        this.rotationGroup.add(this.translationGroup);
        this.modelGroup = new Group();
        this.modelGroup.name = 'modelGroup';
        this.translationGroup.add(this.modelGroup);
        this.pickingGroup = new Group();
        this.pickingGroup.name = 'pickingGroup';
        this.translationGroup.add(this.pickingGroup);
        this.backgroundGroup = new Group();
        this.backgroundGroup.name = 'backgroundGroup';
        this.translationGroup.add(this.backgroundGroup);
        this.helperGroup = new Group();
        this.helperGroup.name = 'helperGroup';
        this.translationGroup.add(this.helperGroup);
        // fog
        this.scene.fog = new Fog(this.parameters.fogColor.getHex());
        // light
        this.spotLight = new SpotLight(this.parameters.lightColor.getHex(), this.parameters.lightIntensity);
        this.scene.add(this.spotLight);
        this.ambientLight = new AmbientLight(this.parameters.ambientColor.getHex(), this.parameters.ambientIntensity);
        this.scene.add(this.ambientLight);
    };
    Viewer.prototype._initRenderer = function _initRenderer () {
        var dpr = window.devicePixelRatio;
        var ref = this;
          var width = ref.width;
          var height = ref.height;
        try {
            this.renderer = new WebGLRenderer({
                preserveDrawingBuffer: true,
                alpha: true,
                antialias: true
            });
        }
        catch (e) {
            this.wrapper.innerHTML = WebglErrorMessage;
            return false;
        }
        this.renderer.setPixelRatio(dpr);
        this.renderer.setSize(width, height);
        this.renderer.autoClear = false;
        this.renderer.sortObjects = true;
        this.renderer.outputEncoding = this.parameters.rendererEncoding;
        var gl = this.renderer.getContext();
        // console.log(gl.getContextAttributes().antialias)
        // console.log(gl.getParameter(gl.SAMPLES))
        // For WebGL1, extensions must be explicitly enabled.
        // The following are builtin to WebGL2 (and don't appear as
        // extensions)
        // EXT_frag_depth, OES_element_index_uint, OES_texture_float
        // OES_texture_half_float
        // The WEBGL_color_buffer_float extension is replaced by
        // EXT_color_buffer_float
        // If not webgl2 context, explicitly check for these
        if (!this.renderer.capabilities.isWebGL2) {
            setExtensionFragDepth(this.renderer.extensions.get('EXT_frag_depth'));
            this.renderer.extensions.get('OES_element_index_uint');
            setSupportsReadPixelsFloat((this.renderer.extensions.get('OES_texture_float') &&
                this.renderer.extensions.get('WEBGL_color_buffer_float')) ||
                (this.renderer.extensions.get('OES_texture_float') &&
                    testTextureSupport(gl.FLOAT)));
            // picking texture
            this.renderer.extensions.get('OES_texture_float');
            this.supportsHalfFloat = (this.renderer.extensions.get('OES_texture_half_float') &&
                testTextureSupport(0x8D61));
        }
        else {
            setExtensionFragDepth(true);
            setSupportsReadPixelsFloat(this.renderer.extensions.get('EXT_color_buffer_float'));
            this.supportsHalfFloat = true;
        }
        this.wrapper.appendChild(this.renderer.domElement);
        var dprWidth = width * dpr;
        var dprHeight = height * dpr;
        if (exports.Debug) {
            console.log(JSON.stringify({
                'Browser': Browser,
                'OES_texture_float': !!this.renderer.extensions.get('OES_texture_float'),
                'OES_texture_half_float': !!this.renderer.extensions.get('OES_texture_half_float'),
                'WEBGL_color_buffer_float': !!this.renderer.extensions.get('WEBGL_color_buffer_float'),
                'testTextureSupport Float': testTextureSupport(gl.FLOAT),
                'testTextureSupport HalfFloat': testTextureSupport(0x8D61),
                'this.supportsHalfFloat': this.supportsHalfFloat,
                'SupportsReadPixelsFloat': SupportsReadPixelsFloat
            }, null, 2));
        }
        this.pickingTarget = new WebGLRenderTarget(dprWidth, dprHeight, {
            minFilter: NearestFilter,
            magFilter: NearestFilter,
            stencilBuffer: false,
            format: RGBAFormat,
            type: SupportsReadPixelsFloat ? FloatType : UnsignedByteType
        });
        this.pickingTarget.texture.generateMipmaps = false;
        this.pickingTarget.texture.encoding = this.parameters.rendererEncoding;
        // workaround to reset the gl state after using testTextureSupport
        // fixes some bug where nothing is rendered to the canvas
        // when animations are started on page load
        this.renderer.setRenderTarget(this.pickingTarget);
        this.renderer.clear();
        this.renderer.setRenderTarget(null);
        // ssaa textures
        this.sampleTarget = new WebGLRenderTarget(dprWidth, dprHeight, {
            minFilter: LinearFilter,
            magFilter: LinearFilter,
            format: RGBAFormat
        });
        this.sampleTarget.texture.encoding = this.parameters.rendererEncoding;
        this.holdTarget = new WebGLRenderTarget(dprWidth, dprHeight, {
            minFilter: NearestFilter,
            magFilter: NearestFilter,
            format: RGBAFormat,
            type: UnsignedByteType
            // using HalfFloatType or FloatType does not work on some Chrome 61 installations
            // type: this.supportsHalfFloat ? HalfFloatType : (
            // SupportsReadPixelsFloat ? FloatType : UnsignedByteType
            // )
        });
        this.holdTarget.texture.encoding = this.parameters.rendererEncoding;
        this.compositeUniforms = {
            'tForeground': new Uniform(this.sampleTarget.texture),
            'scale': new Uniform(1.0)
        };
        this.compositeMaterial = new ShaderMaterial({
            uniforms: this.compositeUniforms,
            vertexShader: getShader('Quad.vert'),
            fragmentShader: getShader('Quad.frag'),
            premultipliedAlpha: true,
            transparent: true,
            blending: AdditiveBlending,
            depthTest: false,
            depthWrite: false
        });
        this.compositeCamera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);
        this.compositeScene = new Scene();
        this.compositeScene.name = 'compositeScene';
        this.compositeScene.add(new Mesh(new PlaneGeometry(2, 2), this.compositeMaterial));
    };
    Viewer.prototype._initHelper = function _initHelper () {
        var indices = new Uint16Array([
            0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6,
            6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7
        ]);
        var positions = new Float32Array(8 * 3);
        var bbGeometry = new BufferGeometry();
        bbGeometry.setIndex(new BufferAttribute(indices, 1));
        bbGeometry.setAttribute('position', new BufferAttribute(positions, 3));
        var bbMaterial = new ShaderMaterial({
            uniforms: { 'uColor': { value: new Color('skyblue') } },
            vertexShader: getShader('BasicLine.vert'),
            fragmentShader: getShader('BasicLine.frag')
        });
        this.boundingBoxMesh = new LineSegments(bbGeometry, bbMaterial);
        this.helperGroup.add(this.boundingBoxMesh);
    };
    Viewer.prototype.updateHelper = function updateHelper () {
        var position = this.boundingBoxMesh.geometry.attributes.position; // TODO
        var array = position.array;
        var ref = this.boundingBox;
          var min = ref.min;
          var max = ref.max;
        array[0] = max.x;
        array[1] = max.y;
        array[2] = max.z;
        array[3] = min.x;
        array[4] = max.y;
        array[5] = max.z;
        array[6] = min.x;
        array[7] = min.y;
        array[8] = max.z;
        array[9] = max.x;
        array[10] = min.y;
        array[11] = max.z;
        array[12] = max.x;
        array[13] = max.y;
        array[14] = min.z;
        array[15] = min.x;
        array[16] = max.y;
        array[17] = min.z;
        array[18] = min.x;
        array[19] = min.y;
        array[20] = min.z;
        array[21] = max.x;
        array[22] = min.y;
        array[23] = min.z;
        position.needsUpdate = true;
        if (!this.boundingBox.isEmpty()) {
            this.boundingBoxMesh.geometry.computeBoundingSphere();
        }
    };
    /** Distance from origin (lookAt point) */
    prototypeAccessors$x.cameraDistance.get = function () {
        return Math.abs(this.camera.position.z);
    };
    /** Set distance from origin (lookAt point); along the -z axis */
    prototypeAccessors$x.cameraDistance.set = function (d) {
        this.camera.position.z = -d;
    };
    Viewer.prototype.add = function add (buffer, instanceList) {
          var this$1$1 = this;

        // Log.time( "Viewer.add" );
        if (instanceList) {
            instanceList.forEach(function (instance) { return this$1$1.addBuffer(buffer, instance); });
        }
        else {
            this.addBuffer(buffer);
        }
        buffer.group.name = 'meshGroup';
        buffer.wireframeGroup.name = 'wireframeGroup';
        if (buffer.parameters.background) {
            this.backgroundGroup.add(buffer.group);
            this.backgroundGroup.add(buffer.wireframeGroup);
        }
        else {
            this.modelGroup.add(buffer.group);
            this.modelGroup.add(buffer.wireframeGroup);
        }
        if (buffer.pickable) {
            this.pickingGroup.add(buffer.pickingGroup);
        }
        if (exports.Debug)
            { this.updateHelper(); }
        // Log.timeEnd( "Viewer.add" );
    };
    Viewer.prototype.addBuffer = function addBuffer (buffer, instance) {
        // Log.time( "Viewer.addBuffer" );
        function setUserData(object) {
            if (object instanceof Group) {
                object.children.forEach(setUserData);
            }
            else {
                object.userData.buffer = buffer;
                object.userData.instance = instance;
                object.onBeforeRender = onBeforeRender;
            }
        }
        var mesh = buffer.getMesh();
        if (instance) {
            mesh.applyMatrix4(instance.matrix);
        }
        setUserData(mesh);
        buffer.group.add(mesh);
        var wireframeMesh = buffer.getWireframeMesh();
        if (instance) {
            // wireframeMesh.applyMatrix( instance.matrix );
            wireframeMesh.matrix.copy(mesh.matrix);
            wireframeMesh.position.copy(mesh.position);
            wireframeMesh.quaternion.copy(mesh.quaternion);
            wireframeMesh.scale.copy(mesh.scale);
        }
        setUserData(wireframeMesh);
        buffer.wireframeGroup.add(wireframeMesh);
        if (buffer.pickable) {
            var pickingMesh = buffer.getPickingMesh();
            if (instance) {
                // pickingMesh.applyMatrix( instance.matrix );
                pickingMesh.matrix.copy(mesh.matrix);
                pickingMesh.position.copy(mesh.position);
                pickingMesh.quaternion.copy(mesh.quaternion);
                pickingMesh.scale.copy(mesh.scale);
            }
            setUserData(pickingMesh);
            buffer.pickingGroup.add(pickingMesh);
        }
        if (instance) {
            this._updateBoundingBox(buffer.geometry, buffer.matrix, instance.matrix);
        }
        else {
            this._updateBoundingBox(buffer.geometry, buffer.matrix);
        }
        // Log.timeEnd( "Viewer.addBuffer" );
    };
    Viewer.prototype.remove = function remove (buffer) {
        this.translationGroup.children.forEach(function (group) {
            group.remove(buffer.group);
            group.remove(buffer.wireframeGroup);
        });
        if (buffer.pickable) {
            this.pickingGroup.remove(buffer.pickingGroup);
        }
        this.updateBoundingBox();
        if (exports.Debug)
            { this.updateHelper(); }
        // this.requestRender();
    };
    Viewer.prototype._updateBoundingBox = function _updateBoundingBox (geometry, matrix, instanceMatrix) {
        var boundingBox = this.boundingBox;
        function updateGeometry(geometry, matrix, instanceMatrix) {
            if (geometry.boundingBox == null) {
                geometry.computeBoundingBox();
            }
            var geoBoundingBox = geometry.boundingBox.clone();
            if (matrix) {
                geoBoundingBox.applyMatrix4(matrix);
            }
            if (instanceMatrix) {
                geoBoundingBox.applyMatrix4(instanceMatrix);
            }
            if (geoBoundingBox.min.equals(geoBoundingBox.max)) {
                // mainly to give a single impostor geometry some volume
                // as it is only expanded in the shader on the GPU
                geoBoundingBox.expandByScalar(5);
            }
            boundingBox.union(geoBoundingBox);
        }
        function updateNode(node) {
            if (node.geometry !== undefined) {
                var matrix, instanceMatrix;
                if (node.userData.buffer) {
                    matrix = node.userData.buffer.matrix;
                }
                if (node.userData.instance) {
                    instanceMatrix = node.userData.instance.matrix;
                }
                updateGeometry(node.geometry, matrix, instanceMatrix); // TODO
            }
        }
        if (geometry) {
            updateGeometry(geometry, matrix, instanceMatrix);
        }
        else {
            boundingBox.makeEmpty();
            this.modelGroup.traverse(updateNode);
            this.backgroundGroup.traverse(updateNode);
        }
        boundingBox.getSize(this.boundingBoxSize);
        this.boundingBoxLength = this.boundingBoxSize.length();
    };
    Viewer.prototype.updateBoundingBox = function updateBoundingBox () {
        this._updateBoundingBox();
        if (exports.Debug)
            { this.updateHelper(); }
    };
    Viewer.prototype.getPickingPixels = function getPickingPixels () {
        var ref = this;
          var width = ref.width;
          var height = ref.height;
        var n = width * height * 4;
        var imgBuffer = SupportsReadPixelsFloat ? new Float32Array(n) : new Uint8Array(n);
        this.render(true);
        this.renderer.readRenderTargetPixels(this.pickingTarget, 0, 0, width, height, imgBuffer);
        return imgBuffer;
    };
    Viewer.prototype.getImage = function getImage (picking) {
          var this$1$1 = this;

        return new Promise(function (resolve) {
            if (picking) {
                var ref = this$1$1;
                  var width = ref.width;
                  var height = ref.height;
                var n = width * height * 4;
                var imgBuffer = this$1$1.getPickingPixels();
                if (SupportsReadPixelsFloat) {
                    var imgBuffer2 = new Uint8Array(n);
                    for (var i = 0; i < n; ++i) {
                        imgBuffer2[i] = Math.round(imgBuffer[i] * 255);
                    }
                    imgBuffer = imgBuffer2;
                }
                var canvas = document.createElement('canvas');
                canvas.width = width;
                canvas.height = height;
                var ctx = canvas.getContext('2d'); // TODO
                var imgData = ctx.getImageData(0, 0, width, height);
                imgData.data.set(imgBuffer); // TODO
                ctx.putImageData(imgData, 0, 0);
                canvas.toBlob(resolve, 'image/png'); // TODO
            }
            else {
                this$1$1.renderer.domElement.toBlob(resolve, 'image/png'); // TODO
            }
        });
    };
    Viewer.prototype.makeImage = function makeImage$1 (params) {
          if ( params === void 0 ) params = {};

        return makeImage(this, params);
    };
    Viewer.prototype.setLight = function setLight (color, intensity, ambientColor, ambientIntensity) {
        var p = this.parameters;
        if (color !== undefined)
            { p.lightColor.set(color); } // TODO
        if (intensity !== undefined)
            { p.lightIntensity = intensity; }
        if (ambientColor !== undefined)
            { p.ambientColor.set(ambientColor); } // TODO
        if (ambientIntensity !== undefined)
            { p.ambientIntensity = ambientIntensity; }
        this.requestRender();
    };
    Viewer.prototype.setFog = function setFog (color, near, far) {
        var p = this.parameters;
        if (color !== undefined)
            { p.fogColor.set(color); } // TODO
        if (near !== undefined)
            { p.fogNear = near; }
        if (far !== undefined)
            { p.fogFar = far; }
        this.requestRender();
    };
    Viewer.prototype.setBackground = function setBackground (color) {
        var p = this.parameters;
        if (color)
            { p.backgroundColor.set(color); } // TODO
        this.setFog(p.backgroundColor);
        this.renderer.setClearColor(p.backgroundColor, 0);
        this.renderer.domElement.style.backgroundColor = p.backgroundColor.getStyle();
        this.requestRender();
    };
    Viewer.prototype.setSampling = function setSampling (level) {
        if (level !== undefined) {
            this.parameters.sampleLevel = level;
            this.sampleLevel = level;
        }
        this.requestRender();
    };
    /**
     * Set the output color encoding, i.e. how the renderer translates
     * colorspaces as it renders to the screen.
    
     * The default is LinearEncoding, because the internals of NGL are
     * already sRGB so no translation is needed to show sRGB colors.
     * Set to sRGBEncoding to create a linear workflow, and also call
     * `setColorEncoding(LinearEncoding)` to linearize colors on input.
     * @see setColorEncoding
     */
    Viewer.prototype.setOutputEncoding = function setOutputEncoding (encoding) {
        this.parameters.rendererEncoding = encoding;
        this.renderer.outputEncoding = encoding;
        this.pickingTarget.texture.encoding = encoding;
        this.sampleTarget.texture.encoding = encoding;
        this.holdTarget.texture.encoding = encoding;
    };
    /**
     * Set the internal color workflow, linear or sRGB.
     * sRGB, the default, is more "vibrant" at the cost of accuracy.
     * Linear gives more accurate results, especially for transparent objects.
     * In all cases, the output is always sRGB; this just affects how colors are computed internally.
     * Call this just after creating the viewer, before loading any models.
     */
    Viewer.prototype.setColorWorkflow = function setColorWorkflow (encoding) {
        if (encoding != 'linear' && encoding != 'sRGB')
            { throw new Error(("setColorWorkflow: invalid color workflow " + encoding)); }
        setColorSpace(encoding == 'linear' ? 'linear' : 'sRGB');
        this.setOutputEncoding(encoding == 'linear' ? sRGBEncoding : LinearEncoding);
        // Note: this doesn't rebuild models, so existing geometry will have
        // the old color encoding.
        this.requestRender();
    };
    Viewer.prototype.setCamera = function setCamera (type, fov, eyeSep) {
        var p = this.parameters;
        if (type)
            { p.cameraType = type; }
        if (fov)
            { p.cameraFov = fov; }
        if (eyeSep)
            { p.cameraEyeSep = eyeSep; }
        if (p.cameraType === 'orthographic') {
            if (this.camera !== this.orthographicCamera) {
                this.camera = this.orthographicCamera;
                this.camera.position.copy(this.perspectiveCamera.position);
                this.camera.up.copy(this.perspectiveCamera.up);
                this.updateZoom();
            }
        }
        else if (p.cameraType === 'perspective' || p.cameraType === 'stereo') {
            if (this.camera !== this.perspectiveCamera) {
                this.camera = this.perspectiveCamera;
                this.camera.position.copy(this.orthographicCamera.position);
                this.camera.up.copy(this.orthographicCamera.up);
            }
        }
        else {
            throw new Error(("Unknown cameraType '" + (p.cameraType) + "'"));
        }
        this.perspectiveCamera.fov = p.cameraFov;
        this.stereoCamera.eyeSep = p.cameraEyeSep;
        this.camera.updateProjectionMatrix();
        this.requestRender();
    };
    Viewer.prototype.setClip = function setClip (near, far, dist, clipMode, clipScale) {
        var p = this.parameters;
        if (near !== undefined)
            { p.clipNear = near; }
        if (far !== undefined)
            { p.clipFar = far; }
        if (dist !== undefined)
            { p.clipDist = dist; }
        if (clipMode !== undefined)
            { p.clipMode = clipMode; }
        if (clipScale !== undefined)
            { p.clipScale = clipScale; }
        this.requestRender();
    };
    Viewer.prototype.setSize = function setSize (width, height) {
        this.width = width || 1;
        this.height = height || 1;
        this.perspectiveCamera.aspect = this.width / this.height;
        this.orthographicCamera.left = -this.width / 2;
        this.orthographicCamera.right = this.width / 2;
        this.orthographicCamera.top = this.height / 2;
        this.orthographicCamera.bottom = -this.height / 2;
        this.camera.updateProjectionMatrix();
        var dpr = window.devicePixelRatio;
        this.renderer.setPixelRatio(dpr);
        this.renderer.setSize(width, height);
        var dprWidth = this.width * dpr;
        var dprHeight = this.height * dpr;
        this.pickingTarget.setSize(dprWidth, dprHeight);
        this.sampleTarget.setSize(dprWidth, dprHeight);
        this.holdTarget.setSize(dprWidth, dprHeight);
        this.requestRender();
    };
    Viewer.prototype.handleResize = function handleResize () {
        if (this.container === document.body) {
            this.setSize(window.innerWidth, window.innerHeight);
        }
        else {
            var box = this.container.getBoundingClientRect();
            this.setSize(box.width, box.height);
        }
    };
    Viewer.prototype.updateInfo = function updateInfo (reset) {
        var ref = this.info;
          var memory = ref.memory;
          var render = ref.render;
        if (reset) {
            memory.programs = 0;
            memory.geometries = 0;
            memory.textures = 0;
            render.calls = 0;
            render.vertices = 0;
            render.points = 0;
        }
        else {
            var rInfo = this.renderer.info;
            var rMemory = rInfo.memory;
            var rRender = rInfo.render;
            memory.geometries = rMemory.geometries;
            memory.textures = rMemory.textures;
            render.calls += rRender.calls;
            render.faces += rRender.triangles;
            render.points += rRender.points;
        }
    };
    Viewer.prototype.animate = function animate () {
        this.signals.ticked.dispatch(this.stats);
        var delta = window.performance.now() - this.stats.startTime;
        if (delta > 500 && !this.isStill && this.sampleLevel < 3 && this.sampleLevel !== -1) {
            var currentSampleLevel = this.sampleLevel;
            this.sampleLevel = 3;
            this.renderPending = true;
            this.render();
            this.isStill = true;
            this.sampleLevel = currentSampleLevel;
            if (exports.Debug)
                { Log.log('rendered still frame'); }
        }
        this.frameRequest = window.requestAnimationFrame(this.animate);
    };
    Viewer.prototype.pick = function pick (x, y) {
        if (this.parameters.cameraType === 'stereo') {
            // TODO picking broken for stereo camera
            return {
                'pid': 0,
                'instance': undefined,
                'picker': undefined
            };
        }
        x *= window.devicePixelRatio;
        y *= window.devicePixelRatio;
        x = Math.max(x - 2, 0);
        y = Math.max(y - 2, 0);
        var pid = 0, instance, picker;
        var pixelBuffer = SupportsReadPixelsFloat ? pixelBufferFloat : pixelBufferUint;
        this.render(true);
        this.renderer.readRenderTargetPixels(this.pickingTarget, x, y, 5, 5, pixelBuffer);
        for (var i = 0; i < pixelOrder.length; i++) {
            var offset = pixelOrder[i] * 4;
            var oid = Math.round(pixelBuffer[offset + 3]);
            var object = this.pickingGroup.getObjectById(oid);
            if (object) {
                instance = object.userData.instance;
                picker = object.userData.buffer.picking;
            }
            else {
                continue;
            }
            if (SupportsReadPixelsFloat) {
                pid =
                    ((Math.round(pixelBuffer[offset] * 255) << 16) & 0xFF0000) |
                        ((Math.round(pixelBuffer[offset + 1] * 255) << 8) & 0x00FF00) |
                        ((Math.round(pixelBuffer[offset + 2] * 255)) & 0x0000FF);
            }
            else {
                pid =
                    (pixelBuffer[offset] << 16) |
                        (pixelBuffer[offset + 1] << 8) |
                        (pixelBuffer[offset + 2]);
            }
        }
        // if( Debug ){
        // const rgba = Array.apply( [], pixelBuffer );
        // Log.log( pixelBuffer );
        // Log.log(
        //   "picked color",
        //   rgba.map( c => { return c.toPrecision( 2 ) } )
        // );
        // Log.log( "picked pid", pid );
        // Log.log( "picked oid", oid );
        // Log.log( "picked object", object );
        // Log.log( "picked instance", instance );
        // Log.log( "picked position", x, y );
        // Log.log( "devicePixelRatio", window.devicePixelRatio );
        // }
        return { pid: pid, instance: instance, picker: picker };
    };
    Viewer.prototype.requestRender = function requestRender () {
          var this$1$1 = this;

        if (this.renderPending) {
            // Log.info("there is still a 'render' call pending")
            return;
        }
        // start gathering stats anew after inactivity
        if (window.performance.now() - this.stats.startTime > 22) {
            this.stats.begin();
            this.isStill = false;
        }
        this.renderPending = true;
        window.requestAnimationFrame(function () {
            this$1$1.render();
            this$1$1.stats.update();
        });
    };
    Viewer.prototype.updateZoom = function updateZoom () {
        var fov = degToRad(this.perspectiveCamera.fov);
        var height = 2 * Math.tan(fov / 2) * this.cameraDistance;
        this.orthographicCamera.zoom = this.height / height;
    };
    /**
     * Convert an absolute clip value to a relative one using bRadius.
     *
     * 0.0 -> 50.0
     * bRadius -> 0.0
     */
    Viewer.prototype.absoluteToRelative = function absoluteToRelative (d) {
        return 50 * (1 - d / this.bRadius);
    };
    /**
     * Convert a relative clip value to an absolute one using bRadius
     *
     * 0.0 -> bRadius
     * 50.0 -> 0.0
     */
    Viewer.prototype.relativeToAbsolute = function relativeToAbsolute (d) {
        return this.bRadius * (1 - d / 50);
    };
    /**
     * Intepret clipMode, clipScale and set the camera and fog clipping.
     * Also ensures bRadius and cDist are valid
     */
    Viewer.prototype.__updateClipping = function __updateClipping () {
        var p = this.parameters;
        // bRadius must always be updated for material-based clipping
        // and for focus calculations
        this.bRadius = Math.max(10, this.boundingBoxLength * 0.5);
        // FL: Removed below, but leaving commented as I don't understand intention
        // this.bRadius += this.boundingBox.getCenter(this.distVector).length()
        if (!isFinite(this.bRadius)) {
            this.bRadius = 50;
        }
        this.camera.getWorldPosition(this.distVector);
        this.cDist = this.distVector.length();
        if (!this.cDist) {
            // recover from a broken (NaN) camera position
            this.cameraDistance = Math.abs(p.cameraZ);
            this.cDist = Math.abs(p.cameraZ);
        }
        // fog
        var fog = this.scene.fog;
        fog.color.set(p.fogColor);
        if (p.clipMode === 'camera') {
            // Always interpret clipScale as absolute for clipMode camera
            this.camera.near = p.clipNear;
            this.camera.far = p.clipFar;
            fog.near = p.fogNear;
            fog.far = p.fogFar;
        }
        else {
            // scene mode
            if (p.clipScale === 'absolute') {
                // absolute scene mode; offset clip planes from scene center
                // (note: positive values move near plane towards camera and rear plane away)
                this.camera.near = this.cDist - p.clipNear;
                this.camera.far = this.cDist + p.clipFar;
                fog.near = this.cDist - p.fogNear;
                fog.far = this.cDist + p.fogFar;
            }
            else {
                // relative scene mode (default): convert pecentages to Angstroms
                var nearFactor = (50 - p.clipNear) / 50;
                var farFactor = -(50 - p.clipFar) / 50;
                this.camera.near = this.cDist - (this.bRadius * nearFactor);
                this.camera.far = this.cDist + (this.bRadius * farFactor);
                var fogNearFactor = (50 - p.fogNear) / 50;
                var fogFarFactor = -(50 - p.fogFar) / 50;
                fog.near = this.cDist - (this.bRadius * fogNearFactor);
                fog.far = this.cDist + (this.bRadius * fogFarFactor);
            }
        }
        if (p.clipMode !== 'camera') {
            if (this.camera.type === 'PerspectiveCamera') {
                this.camera.near = Math.max(0.1, p.clipDist, this.camera.near);
                this.camera.far = Math.max(1, this.camera.far);
                fog.near = Math.max(0.1, fog.near);
                fog.far = Math.max(1, fog.far);
            }
            else if (this.camera.type === 'OrthographicCamera') {
                if (p.clipDist > 0) {
                    this.camera.near = Math.max(p.clipDist, this.camera.near);
                }
            }
        }
    };
    Viewer.prototype.__updateCamera = function __updateCamera () {
        var camera = this.camera;
        camera.updateMatrix();
        camera.updateMatrixWorld(true);
        camera.updateProjectionMatrix();
        updateMaterialUniforms(this.scene, camera, this.renderer, this.cDist, this.bRadius);
        sortProjectedPosition(this.scene, camera);
    };
    Viewer.prototype.__setVisibility = function __setVisibility (model, picking, background, helper) {
        this.modelGroup.visible = model;
        this.pickingGroup.visible = picking;
        this.backgroundGroup.visible = background;
        this.helperGroup.visible = helper;
    };
    Viewer.prototype.__updateLights = function __updateLights () {
        this.spotLight.color.set(this.parameters.lightColor);
        this.spotLight.intensity = this.parameters.lightIntensity;
        this.distVector.copy(this.camera.position).setLength(this.boundingBoxLength * 100);
        this.spotLight.position.copy(this.camera.position).add(this.distVector);
        this.ambientLight.color.set(this.parameters.ambientColor);
        this.ambientLight.intensity = this.parameters.ambientIntensity;
    };
    Viewer.prototype.__renderPickingGroup = function __renderPickingGroup (camera) {
        this.renderer.setRenderTarget(this.pickingTarget || null);
        this.renderer.clear();
        this.__setVisibility(false, true, false, false);
        this.renderer.render(this.scene, camera);
        //back to standard render target
        this.renderer.setRenderTarget(null);
        this.updateInfo();
        // if (Debug) {
        // this.__setVisibility(false, true, false, true);
        // this.renderer.clear();
        // this.renderer.render(this.scene, camera);
        // }
    };
    Viewer.prototype.__renderModelGroup = function __renderModelGroup (camera, renderTarget) {
        this.renderer.setRenderTarget(renderTarget || null);
        this.renderer.clear();
        this.__setVisibility(false, false, true, false);
        this.renderer.render(this.scene, camera);
        this.renderer.clear(false, true, true);
        this.updateInfo();
        this.__setVisibility(true, false, false, exports.Debug);
        this.renderer.render(this.scene, camera);
        this.renderer.setRenderTarget(null); // set back to default canvas
        this.updateInfo();
    };
    Viewer.prototype.__renderSuperSample = function __renderSuperSample (camera, renderTarget) {
        // based on the Supersample Anti-Aliasing Render Pass
        // contributed to three.js by bhouston / http://clara.io/
        //
        // This manual approach to SSAA re-renders the scene ones for
        // each sample with camera jitter and accumulates the results.
        // References: https://en.wikipedia.org/wiki/Supersampling
        var offsetList = JitterVectors[Math.max(0, Math.min(this.sampleLevel, 5))];
        var baseSampleWeight = 1.0 / offsetList.length;
        var roundingRange = 1 / 32;
        this.compositeUniforms.tForeground.value = this.sampleTarget.texture;
        var width = this.sampleTarget.width;
        var height = this.sampleTarget.height;
        if (this.parameters.cameraType === 'stereo') {
            width /= 2;
        }
        // render the scene multiple times, each slightly jitter offset
        // from the last and accumulate the results.
        for (var i = 0; i < offsetList.length; ++i) {
            var offset = offsetList[i];
            camera.setViewOffset(width, height, offset[0], offset[1], width, height);
            camera.updateProjectionMatrix();
            updateCameraUniforms(this.scene, camera);
            var sampleWeight = baseSampleWeight;
            // the theory is that equal weights for each sample lead to an
            // accumulation of rounding errors.
            // The following equation varies the sampleWeight per sample
            // so that it is uniformly distributed across a range of values
            // whose rounding errors cancel each other out.
            var uniformCenteredDistribution = -0.5 + (i + 0.5) / offsetList.length;
            sampleWeight += roundingRange * uniformCenteredDistribution;
            this.compositeUniforms.scale.value = sampleWeight;
            this.__renderModelGroup(camera, this.sampleTarget);
            this.renderer.setRenderTarget(this.holdTarget);
            if (i === 0) {
                this.renderer.clear();
            }
            this.renderer.render(this.compositeScene, this.compositeCamera);
        }
        this.compositeUniforms.scale.value = 1.0;
        this.compositeUniforms.tForeground.value = this.holdTarget.texture;
        camera.clearViewOffset();
        this.renderer.setRenderTarget(renderTarget || null);
        this.renderer.clear();
        this.renderer.render(this.compositeScene, this.compositeCamera);
    };
    Viewer.prototype.__renderStereo = function __renderStereo (picking, _renderTarget) {
          if ( picking === void 0 ) picking = false;

        var stereoCamera = this.stereoCamera;
        stereoCamera.update(this.perspectiveCamera);
        var renderer = this.renderer;
        var size = new Vector2();
        renderer.getSize(size);
        renderer.setScissorTest(true);
        renderer.setScissor(0, 0, size.width / 2, size.height);
        renderer.setViewport(0, 0, size.width / 2, size.height);
        updateCameraUniforms(this.scene, stereoCamera.cameraL);
        this.__render(picking, stereoCamera.cameraL);
        renderer.setScissor(size.width / 2, 0, size.width / 2, size.height);
        renderer.setViewport(size.width / 2, 0, size.width / 2, size.height);
        updateCameraUniforms(this.scene, stereoCamera.cameraR);
        this.__render(picking, stereoCamera.cameraR);
        renderer.setScissorTest(false);
        renderer.setViewport(0, 0, size.width, size.height);
    };
    Viewer.prototype.__render = function __render (picking, camera, renderTarget) {
          if ( picking === void 0 ) picking = false;

        if (picking) {
            if (!this.lastRenderedPicking)
                { this.__renderPickingGroup(camera); }
        }
        else if (this.sampleLevel > 0 && this.parameters.cameraType !== 'stereo') {
            // TODO super sample broken for stereo camera
            this.__renderSuperSample(camera, renderTarget);
        }
        else {
            this.__renderModelGroup(camera, renderTarget);
        }
    };
    Viewer.prototype.render = function render (picking, renderTarget) {
          if ( picking === void 0 ) picking = false;

        if (this.rendering) {
            Log.warn("'tried to call 'render' from within 'render'");
            return;
        }
        // Log.time('Viewer.render')
        this.rendering = true;
        try {
            this.__updateClipping();
            this.__updateCamera();
            this.__updateLights();
            this.updateInfo(true);
            // render
            if (this.parameters.cameraType === 'stereo') {
                this.__renderStereo(picking, renderTarget);
            }
            else {
                this.__render(picking, this.camera, renderTarget);
            }
            this.lastRenderedPicking = picking;
        }
        finally {
            this.rendering = false;
            this.renderPending = false;
        }
        this.signals.rendered.dispatch();
        // Log.timeEnd('Viewer.render')
        // Log.log(this.info.memory, this.info.render)
    };
    Viewer.prototype.clear = function clear () {
        Log.log('scene cleared');
        this.scene.remove(this.rotationGroup);
        this._initScene();
        this.renderer.clear();
    };
    Viewer.prototype.dispose = function dispose () {
        this.renderer.dispose();
        window.cancelAnimationFrame(this.frameRequest);
    };

  Object.defineProperties( Viewer.prototype, prototypeAccessors$x );

  /**
   * @file Constants
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var LeftMouseButton = 1;
  var MiddleMouseButton = 2;
  var RightMouseButton = 3;

  /**
   * @file Mouse Observer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * @example
   * mouseObserver.signals.scrolled.add( function( delta ){ ... } );
   *
   * @typedef {Object} MouseSignals
   * @property {Signal<Integer, Integer>} moved - on move: deltaX, deltaY
   * @property {Signal<Number>} scrolled - on scroll: delta
   * @property {Signal<Integer, Integer>} dragged - on drag: deltaX, deltaY
   * @property {Signal} dropped - on drop
   * @property {Signal} clicked - on click
   * @property {Signal} hovered - on hover
   */
  function getTouchDistance(event) {
      var dx = event.touches[0].pageX - event.touches[1].pageX;
      var dy = event.touches[0].pageY - event.touches[1].pageY;
      return Math.sqrt(dx * dx + dy * dy);
  }
  function getMouseButtons(event) {
      if (typeof event === 'object') {
          if ('buttons' in event) {
              return event.buttons;
          }
          else if ('which' in event) {
              var b = event.which;
              if (b === 2) {
                  return 4;
              }
              else if (b === 3) {
                  return 2;
              }
              else if (b > 0) {
                  return 1 << (b - 1);
              }
          }
          else if ('button' in event) {
              var b$1 = event.button;
              if (b$1 === 1) {
                  return 4;
              }
              else if (b$1 === 2) {
                  return 2;
              }
              else if (b$1 >= 0) {
                  return 1 << b$1;
              }
          }
      }
      return 0;
  }
  /**
   * Mouse observer
   *
   * @example
   * // listen to mouse moving (and touch-moving) events
   * mouseObserver.moved.moved.add( function( deltaX, deltaY ){ ... } );
   *
   * @example
   * // listen to scrolling (and pinching) events
   * mouseObserver.signals.scrolled.add( function( delta ){ ... } );
   *
   * @example
   * // listen to dragging (and touch-dragging) events
   * mouseObserver.signals.dragged.add( function( deltaX, deltaY ){ ... } );
   *
   * @example
   * // listen to clicking (and tapping) events
   * mouseObserver.signals.clicked.add( function(){ ... } );
   *
   * @example
   * // listen to double clicking (and double tapping) events
   * mouseObserver.signals.doubleClicked.add( function(){ ... } );
   *
   * @example
   * // listen to hovering events
   * mouseObserver.signals.hovered.add( function(){ ... } );
   */
  var MouseObserver = function MouseObserver(domElement, params) {
      if ( params === void 0 ) params = {};

      this.domElement = domElement;
      this.signals = {
          moved: new signals.Signal(),
          scrolled: new signals.Signal(),
          dragged: new signals.Signal(),
          dropped: new signals.Signal(),
          clicked: new signals.Signal(),
          hovered: new signals.Signal(),
          doubleClicked: new signals.Signal()
      };
      this.position = new Vector2(); // Position on page
      this.prevPosition = new Vector2(); // Previous position on page
      this.down = new Vector2(); // Position on page when clicked
      this.canvasPosition = new Vector2(); // Position on dom element
      this.prevClickCP = new Vector2();
      this.moving = false; // Flag indicating if the mouse is moving
      this.hovering = true; // Flag indicating if the mouse is hovering
      this.scrolled = false; // Flag indicating if there was a scolling event since the last mouse move
      this.lastMoved = Infinity; // Timestamp of last mouse move
      this.which = 0; // 0: No button; 1: Left button; 2: Middle button; 3: Right button
      this.buttons = 0; // 0: No button; 1: Left button; 2: Right button; 4: Middle button
      this.pressed = false; // Flag indicating if the mouse is pressed down
      this.altKey = false; // Flag indicating if the alt key is pressed
      this.ctrlKey = false; // Flag indicating if the ctrl key is pressed
      this.metaKey = false; // Flag indicating if the meta key is pressed
      this.shiftKey = false; // Flag indicating if the shift key is pressed
      this.domElement.style.touchAction = 'none';
      this.hoverTimeout = defaults(params.hoverTimeout, 50);
      this.handleScroll = defaults(params.handleScroll, true);
      this.doubleClickSpeed = defaults(params.doubleClickSpeed, 500);
      this._listen = this._listen.bind(this);
      this._onMousewheel = this._onMousewheel.bind(this);
      this._onMousemove = this._onMousemove.bind(this);
      this._onMousedown = this._onMousedown.bind(this);
      this._onMouseup = this._onMouseup.bind(this);
      this._onContextmenu = this._onContextmenu.bind(this);
      this._onTouchstart = this._onTouchstart.bind(this);
      this._onTouchend = this._onTouchend.bind(this);
      this._onTouchmove = this._onTouchmove.bind(this);
      this._listen();
      var opt = { passive: false }; // treat as 'passive' so preventDefault can be called
      document.addEventListener('mousewheel', this._onMousewheel, opt);
      document.addEventListener('wheel', this._onMousewheel, opt);
      document.addEventListener('MozMousePixelScroll', this._onMousewheel, opt);
      document.addEventListener('mousemove', this._onMousemove, opt);
      document.addEventListener('mousedown', this._onMousedown, opt);
      document.addEventListener('mouseup', this._onMouseup, opt);
      document.addEventListener('contextmenu', this._onContextmenu, opt);
      document.addEventListener('touchstart', this._onTouchstart, opt);
      document.addEventListener('touchend', this._onTouchend, opt);
      document.addEventListener('touchmove', this._onTouchmove, opt);
  };

  var prototypeAccessors$w = { key: { configurable: true } };
  prototypeAccessors$w.key.get = function () {
      var key = 0;
      if (this.altKey)
          { key += 1; }
      if (this.ctrlKey)
          { key += 2; }
      if (this.metaKey)
          { key += 4; }
      if (this.shiftKey)
          { key += 8; }
      return key;
  };
  MouseObserver.prototype.setParameters = function setParameters (params) {
          if ( params === void 0 ) params = {};

      this.hoverTimeout = defaults(params.hoverTimeout, this.hoverTimeout);
  };
  /**
   * listen to mouse actions
   * @emits {MouseSignals.clicked} when clicked
   * @emits {MouseSignals.hovered} when hovered
   * @return {undefined}
   */
  MouseObserver.prototype._listen = function _listen () {
      var now = window.performance.now();
      var cp = this.canvasPosition;
      if (this.doubleClickPending && now - this.lastClicked > this.doubleClickSpeed) {
          this.doubleClickPending = false;
      }
      if (now - this.lastMoved > this.hoverTimeout) {
          this.moving = false;
      }
      if (this.scrolled || (!this.moving && !this.hovering)) {
          this.scrolled = false;
          if (this.hoverTimeout !== -1 && this.overElement) {
              this.hovering = true;
              this.signals.hovered.dispatch(cp.x, cp.y);
          }
      }
      this.frameRequest = window.requestAnimationFrame(this._listen);
  };
  /**
   * handle mouse scroll
   * @emits {MouseSignals.scrolled} when scrolled
   * @param  {Event} event - mouse event
   * @return {undefined}
   */
  MouseObserver.prototype._onMousewheel = function _onMousewheel (event) {
          var this$1$1 = this;

      if (event.target !== this.domElement || !this.handleScroll) {
          return;
      }
      event.preventDefault();
      this._setKeys(event);
      var delta = 0;
      if ('deltaY' in event && 'deltaMode' in event) {
          // all modern browsers, using WheelEvent; deltaY + down (toward user)
          if (event.deltaMode === WheelEvent.DOM_DELTA_PIXEL)
              // everything except Firefox: normally 100 per wheel click
              { delta = -event.deltaY * (2.5 / 100.0); }
          else if (event.deltaMode === WheelEvent.DOM_DELTA_LINE)
              // Firefox in line mode, normally 3 per wheel click
              { delta = -event.deltaY * (2.5 / 3.0); }
          else // page mode: 1 per wheel click
              { delta = -event.deltaY * 2.5; }
      }
      else if ('deltaY' in event && !('detail' in event)) {
          // Old Firefox or IE 11: deltaY but no deltaMode; treat as pixels
          delta = -event.deltaY * (2.5 / 100.0);
      }
      else if (event.wheelDelta !== undefined) {
          delta = -event.wheelDelta * (2.5 / 100);
      }
      else if (event.wheelDeltaY !== undefined) {
          delta = -event.wheelDeltaY * (2.5 / 100);
      }
      else {
          // Old Firefox, MouseWheelEvent
          delta = -event.detail / 3;
      }
      this.signals.scrolled.dispatch(delta);
      setTimeout(function () {
          this$1$1.scrolled = true;
      }, this.hoverTimeout);
  };
  /**
   * handle mouse move
   * @emits {MouseSignals.moved} when moved
   * @emits {MouseSignals.dragged} when dragged
   * @param  {Event} event - mouse event
   * @return {undefined}
   */
  MouseObserver.prototype._onMousemove = function _onMousemove (event) {
      if (event.target === this.domElement) {
          event.preventDefault();
          this.overElement = true;
      }
      else {
          this.overElement = false;
      }
      this._setKeys(event);
      this.moving = true;
      this.hovering = false;
      this.lastMoved = window.performance.now();
      this.prevPosition.copy(this.position);
      this.position.set(event.clientX, event.clientY);
      this._setCanvasPosition(event);
      var dx = this.prevPosition.x - this.position.x;
      var dy = this.prevPosition.y - this.position.y;
      this.signals.moved.dispatch(dx, dy);
      if (this.pressed) {
          this.signals.dragged.dispatch(dx, dy);
      }
  };
  MouseObserver.prototype._onMousedown = function _onMousedown (event) {
      if (event.target !== this.domElement) {
          return;
      }
      event.preventDefault();
      this._setKeys(event);
      this.moving = false;
      this.hovering = false;
      this.down.set(event.clientX, event.clientY);
      this.position.set(event.clientX, event.clientY);
      this.which = event.which;
      this.buttons = getMouseButtons(event);
      this.pressed = true;
      this._setCanvasPosition(event);
  };
  /**
   * handle mouse up
   * @emits {MouseSignals.doubleClicked} when double clicked
   * @emits {MouseSignals.dropped} when dropped
   * @param  {Event} event - mouse event
   * @return {undefined}
   */
  MouseObserver.prototype._onMouseup = function _onMouseup (event) {
      if (event.target === this.domElement) {
          event.preventDefault();
      }
      this._setKeys(event);
      var cp = this.canvasPosition;
      if (this._distance() < 4) {
          this.lastClicked = window.performance.now();
          if (this.doubleClickPending && this.prevClickCP.distanceTo(cp) < 4) {
              this.signals.doubleClicked.dispatch(cp.x, cp.y);
              this.doubleClickPending = false;
          }
          this.signals.clicked.dispatch(cp.x, cp.y);
          this.doubleClickPending = true;
          this.prevClickCP.copy(cp);
      }
      this.which = undefined;
      this.buttons = undefined;
      this.pressed = undefined;
      // if (this._distance() > 3 || event.which === RightMouseButton) {
      //   this.signals.dropped.dispatch();
      // }
  };
  MouseObserver.prototype._onContextmenu = function _onContextmenu (event) {
      if (event.target === this.domElement) {
          event.preventDefault();
      }
  };
  MouseObserver.prototype._onTouchstart = function _onTouchstart (event) {
      if (event.target !== this.domElement) {
          return;
      }
      event.preventDefault();
      this.pressed = true;
      switch (event.touches.length) {
          case 1: {
              this.moving = false;
              this.hovering = false;
              this.down.set(event.touches[0].pageX, event.touches[0].pageY);
              this.position.set(event.touches[0].pageX, event.touches[0].pageY);
              this._setCanvasPosition(event.touches[0]);
              break;
          }
          case 2: {
              this.down.set((event.touches[0].pageX + event.touches[1].pageX) / 2, (event.touches[0].pageY + event.touches[1].pageY) / 2);
              this.position.set((event.touches[0].pageX + event.touches[1].pageX) / 2, (event.touches[0].pageY + event.touches[1].pageY) / 2);
              this.lastTouchDistance = getTouchDistance(event);
          }
      }
  };
  MouseObserver.prototype._onTouchend = function _onTouchend (event) {
      if (event.target === this.domElement) {
          event.preventDefault();
      }
      this.which = undefined;
      this.buttons = undefined;
      this.pressed = undefined;
  };
  MouseObserver.prototype._onTouchmove = function _onTouchmove (event) {
      if (event.target === this.domElement) {
          event.preventDefault();
          this.overElement = true;
      }
      else {
          this.overElement = false;
      }
      switch (event.touches.length) {
          case 1: {
              this._setKeys(event);
              this.which = LeftMouseButton;
              this.buttons = 1;
              this.moving = true;
              this.hovering = false;
              this.lastMoved = window.performance.now();
              this.prevPosition.copy(this.position);
              this.position.set(event.touches[0].pageX, event.touches[0].pageY);
              this._setCanvasPosition(event.touches[0]);
              var dx = this.prevPosition.x - this.position.x;
              var dy = this.prevPosition.y - this.position.y;
              this.signals.moved.dispatch(dx, dy);
              if (this.pressed) {
                  this.signals.dragged.dispatch(dx, dy);
              }
              break;
          }
          case 2: {
              var touchDistance = getTouchDistance(event);
              var delta = touchDistance - this.lastTouchDistance;
              this.lastTouchDistance = touchDistance;
              this.prevPosition.copy(this.position);
              this.position.set((event.touches[0].pageX + event.touches[1].pageX) / 2, (event.touches[0].pageY + event.touches[1].pageY) / 2);
              if (Math.abs(delta) > 2 && this.handleScroll &&
                  this.position.distanceTo(this.prevPosition) < 2) {
                  this.which = 0;
                  this.buttons = 0;
                  this.signals.scrolled.dispatch(delta / 2);
              }
              else {
                  this.which = RightMouseButton;
                  this.buttons = 2;
                  var dx$1 = this.prevPosition.x - this.position.x;
                  var dy$1 = this.prevPosition.y - this.position.y;
                  this.signals.moved.dispatch(dx$1, dy$1);
                  if (this.pressed) {
                      this.signals.dragged.dispatch(dx$1, dy$1);
                  }
              }
          }
      }
  };
  MouseObserver.prototype._distance = function _distance () {
      return this.position.distanceTo(this.down);
  };
  MouseObserver.prototype._setCanvasPosition = function _setCanvasPosition (event) {
      var box = this.domElement.getBoundingClientRect();
      var offsetX, offsetY;
      if ('clientX' in event && 'clientY' in event) {
          offsetX = event.clientX - box.left;
          offsetY = event.clientY - box.top;
      }
      else {
          offsetX = event.offsetX;
          offsetY = event.offsetY;
      }
      this.canvasPosition.set(offsetX, box.height - offsetY);
  };
  MouseObserver.prototype._setKeys = function _setKeys (event) {
      this.altKey = event.altKey;
      this.ctrlKey = event.ctrlKey;
      this.metaKey = event.metaKey;
      this.shiftKey = event.shiftKey;
  };
  MouseObserver.prototype.dispose = function dispose () {
      document.removeEventListener('mousewheel', this._onMousewheel);
      document.removeEventListener('wheel', this._onMousewheel);
      document.removeEventListener('MozMousePixelScroll', this._onMousewheel);
      document.removeEventListener('mousemove', this._onMousemove);
      document.removeEventListener('mousedown', this._onMousedown);
      document.removeEventListener('mouseup', this._onMouseup);
      document.removeEventListener('contextmenu', this._onContextmenu);
      document.removeEventListener('touchstart', this._onTouchstart);
      document.removeEventListener('touchend', this._onTouchend);
      document.removeEventListener('touchmove', this._onTouchmove);
      window.cancelAnimationFrame(this.frameRequest);
  };

  Object.defineProperties( MouseObserver.prototype, prototypeAccessors$w );

  /**
   * @file Trackball Controls
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var tmpRotateXMatrix = new Matrix4();
  var tmpRotateYMatrix = new Matrix4();
  var tmpRotateZMatrix = new Matrix4();
  var tmpRotateMatrix$2 = new Matrix4();
  var tmpRotateCameraMatrix = new Matrix4();
  var tmpRotateVector$2 = new Vector3();
  var tmpRotateQuaternion$1 = new Quaternion();
  var tmpRotateQuaternion2 = new Quaternion();
  var tmpPanMatrix = new Matrix4();
  var tmpPanVector = new Vector3();
  var tmpAtomVector = new Vector3();
  /**
   * Trackball controls
   */
  var TrackballControls = function TrackballControls(stage, params) {
      if ( params === void 0 ) params = {};

      this.stage = stage;
      this.rotateSpeed = defaults(params.rotateSpeed, 2.0);
      this.zoomSpeed = defaults(params.zoomSpeed, 1.2);
      this.panSpeed = defaults(params.panSpeed, 1.0);
      this.viewer = stage.viewer;
      this.mouse = stage.mouseObserver;
      this.controls = stage.viewerControls;
  };

  var prototypeAccessors$v = { component: { configurable: true },atom: { configurable: true } };
  prototypeAccessors$v.component.get = function () {
      return this.stage.transformComponent;
  };
  prototypeAccessors$v.atom.get = function () {
      return this.stage.transformAtom;
  };
  TrackballControls.prototype._setPanVector = function _setPanVector (x, y, z) {
          if ( z === void 0 ) z = 0;

      var scaleFactor = this.controls.getCanvasScaleFactor(z);
      tmpPanVector.set(x, y, 0);
      tmpPanVector.multiplyScalar(this.panSpeed * scaleFactor);
  };
  TrackballControls.prototype._getRotateXY = function _getRotateXY (x, y) {
      return [
          this.rotateSpeed * -x * 0.01,
          this.rotateSpeed * y * 0.01
      ];
  };
  TrackballControls.prototype._getCameraRotation = function _getCameraRotation (m) {
      m.extractRotation(this.viewer.camera.matrixWorld);
      m.multiply(tmpRotateYMatrix.makeRotationY(Math.PI));
      return m;
  };
  TrackballControls.prototype._transformPanVector = function _transformPanVector () {
      if (!this.component)
          { return; }
      // Adjust for component and scene rotation
      tmpPanMatrix.extractRotation(this.component.transform);
      tmpPanMatrix.premultiply(this.viewer.rotationGroup.matrix);
      tmpPanMatrix.getInverse(tmpPanMatrix);
      // Adjust for camera rotation
      tmpPanMatrix.multiply(this._getCameraRotation(tmpRotateMatrix$2));
      tmpPanVector.applyMatrix4(tmpPanMatrix);
  };
  TrackballControls.prototype.zoom = function zoom (delta) {
      this.controls.zoom(this.zoomSpeed * delta * 0.02);
  };
  TrackballControls.prototype.pan = function pan (x, y) {
      this._setPanVector(x, y);
      // Adjust for scene rotation
      tmpPanMatrix.getInverse(this.viewer.rotationGroup.matrix);
      // Adjust for camera rotation
      tmpPanMatrix.multiply(this._getCameraRotation(tmpRotateMatrix$2));
      tmpPanVector.applyMatrix4(tmpPanMatrix);
      this.controls.translate(tmpPanVector);
  };
  TrackballControls.prototype.panComponent = function panComponent (x, y) {
      if (!this.component)
          { return; }
      this._setPanVector(x, y);
      this._transformPanVector();
      this.component.position.add(tmpPanVector);
      this.component.updateMatrix();
  };
  TrackballControls.prototype.panAtom = function panAtom (x, y) {
      if (!this.atom || !this.component)
          { return; }
      this.atom.positionToVector3(tmpAtomVector);
      tmpAtomVector.add(this.viewer.translationGroup.position);
      tmpAtomVector.applyMatrix4(this.viewer.rotationGroup.matrix);
      this._setPanVector(x, y, tmpAtomVector.z);
      this._transformPanVector();
      this.atom.positionAdd(tmpPanVector);
      this.component.updateRepresentations({ 'position': true });
  };
  TrackballControls.prototype.rotate = function rotate (x, y) {
      var ref = this._getRotateXY(x, y);
          var dx = ref[0];
          var dy = ref[1];
      // rotate around screen X then screen Y
      this._getCameraRotation(tmpRotateMatrix$2);
      tmpRotateVector$2.set(1, 0, 0); // X axis
      tmpRotateVector$2.applyMatrix4(tmpRotateMatrix$2); // screen X
      tmpRotateQuaternion$1.setFromAxisAngle(tmpRotateVector$2, dy);
      tmpRotateVector$2.set(0, 1, 0); // Y axis
      tmpRotateVector$2.applyMatrix4(tmpRotateMatrix$2); // screen Y
      tmpRotateQuaternion2.setFromAxisAngle(tmpRotateVector$2, dx);
      tmpRotateQuaternion$1.multiply(tmpRotateQuaternion2);
      tmpRotateMatrix$2.makeRotationFromQuaternion(tmpRotateQuaternion$1);
      this.controls.applyMatrix(tmpRotateMatrix$2);
  };
  TrackballControls.prototype.zRotate = function zRotate (x, y) {
      var dz = this.rotateSpeed * ((-x + y) / -2) * 0.01;
      tmpRotateZMatrix.makeRotationZ(dz);
      this.controls.applyMatrix(tmpRotateZMatrix);
  };
  TrackballControls.prototype.rotateComponent = function rotateComponent (x, y) {
      if (!this.component)
          { return; }
      var ref = this._getRotateXY(x, y);
          var dx = ref[0];
          var dy = ref[1];
      this._getCameraRotation(tmpRotateCameraMatrix);
      tmpRotateMatrix$2.extractRotation(this.component.transform);
      tmpRotateMatrix$2.premultiply(this.viewer.rotationGroup.matrix);
      tmpRotateMatrix$2.getInverse(tmpRotateMatrix$2);
      tmpRotateMatrix$2.premultiply(tmpRotateCameraMatrix);
      tmpRotateVector$2.set(1, 0, 0);
      tmpRotateVector$2.applyMatrix4(tmpRotateMatrix$2);
      tmpRotateXMatrix.makeRotationAxis(tmpRotateVector$2, dy);
      tmpRotateVector$2.set(0, 1, 0);
      tmpRotateVector$2.applyMatrix4(tmpRotateMatrix$2);
      tmpRotateYMatrix.makeRotationAxis(tmpRotateVector$2, dx);
      tmpRotateXMatrix.multiply(tmpRotateYMatrix);
      tmpRotateQuaternion$1.setFromRotationMatrix(tmpRotateXMatrix);
      this.component.quaternion.premultiply(tmpRotateQuaternion$1);
      this.component.quaternion.normalize();
      this.component.updateMatrix();
  };

  Object.defineProperties( TrackballControls.prototype, prototypeAccessors$v );

  /**
   * @file Picking Proxy
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var tmpVec$1 = new Vector3();
  function closer(x, a, b) {
      return x.distanceTo(a) < x.distanceTo(b);
  }
  /**
   * Picking proxy class.
   */
  var PickingProxy = function PickingProxy(pickingData, stage) {
      this.stage = stage;
      this.pid = pickingData.pid;
      this.picker = pickingData.picker;
      /**
       * @type {Object}
       */
      this.instance = pickingData.instance;
      /**
       * @type {Stage}
       */
      this.stage = stage;
      /**
       * @type {ViewerControls}
       */
      this.controls = stage.viewerControls;
      /**
       * @type {MouseObserver}
       */
      this.mouse = stage.mouseObserver;
  };

  var prototypeAccessors$u = { type: { configurable: true },altKey: { configurable: true },ctrlKey: { configurable: true },metaKey: { configurable: true },shiftKey: { configurable: true },canvasPosition: { configurable: true },component: { configurable: true },object: { configurable: true },position: { configurable: true },closestBondAtom: { configurable: true },closeAtom: { configurable: true },arrow: { configurable: true },atom: { configurable: true },axes: { configurable: true },bond: { configurable: true },box: { configurable: true },cone: { configurable: true },clash: { configurable: true },contact: { configurable: true },cylinder: { configurable: true },distance: { configurable: true },ellipsoid: { configurable: true },octahedron: { configurable: true },point: { configurable: true },mesh: { configurable: true },slice: { configurable: true },sphere: { configurable: true },tetrahedron: { configurable: true },torus: { configurable: true },surface: { configurable: true },unitcell: { configurable: true },unknown: { configurable: true },volume: { configurable: true },wideline: { configurable: true } };
  /**
   * Kind of the picked data
   * @type {String}
   */
  prototypeAccessors$u.type.get = function () { return this.picker.type; };
  /**
   * If the `alt` key was pressed
   * @type {Boolean}
   */
  prototypeAccessors$u.altKey.get = function () { return this.mouse.altKey; };
  /**
   * If the `ctrl` key was pressed
   * @type {Boolean}
   */
  prototypeAccessors$u.ctrlKey.get = function () { return this.mouse.ctrlKey; };
  /**
   * If the `meta` key was pressed
   * @type {Boolean}
   */
  prototypeAccessors$u.metaKey.get = function () { return this.mouse.metaKey; };
  /**
   * If the `shift` key was pressed
   * @type {Boolean}
   */
  prototypeAccessors$u.shiftKey.get = function () { return this.mouse.shiftKey; };
  /**
   * Position of the mouse on the canvas
   * @type {Vector2}
   */
  prototypeAccessors$u.canvasPosition.get = function () { return this.mouse.canvasPosition; };
  /**
   * The component the picked data is part of
   * @type {Component}
   */
  prototypeAccessors$u.component.get = function () {
      return this.stage.getComponentsByObject(this.picker.data).list[0]; // TODO
  };
  /**
   * The picked object data
   * @type {Object}
   */
  prototypeAccessors$u.object.get = function () {
      return this.picker.getObject(this.pid);
  };
  /**
   * The 3d position in the scene of the picked object
   * @type {Vector3}
   */
  prototypeAccessors$u.position.get = function () {
      return this.picker.getPosition(this.pid, this.instance, this.component);
  };
  /**
   * The atom of a picked bond that is closest to the mouse
   * @type {AtomProxy}
   */
  prototypeAccessors$u.closestBondAtom.get = function () {
      if (this.type !== 'bond' || !this.bond)
          { return undefined; }
      var bond = this.bond;
      var controls = this.controls;
      var cp = this.canvasPosition;
      var v1 = bond.atom1.positionToVector3();
      var v2 = bond.atom2.positionToVector3();
      v1.applyMatrix4(this.component.matrix);
      v2.applyMatrix4(this.component.matrix);
      var acp1 = controls.getPositionOnCanvas(v1);
      var acp2 = controls.getPositionOnCanvas(v2);
      return closer(cp, acp1, acp2) ? bond.atom1 : bond.atom2;
  };
  /**
   * Close-by atom
   * @type {AtomProxy}
   */
  prototypeAccessors$u.closeAtom.get = function () {
      var cp = this.canvasPosition;
      var ca = this.closestBondAtom;
      if (!ca)
          { return undefined; }
      var v = ca.positionToVector3().applyMatrix4(this.component.matrix);
      var acp = this.controls.getPositionOnCanvas(v);
      ca.positionToVector3(tmpVec$1);
      if (this.instance)
          { tmpVec$1.applyMatrix4(this.instance.matrix); }
      tmpVec$1.applyMatrix4(this.component.matrix);
      var viewer = this.controls.viewer;
      tmpVec$1.add(viewer.translationGroup.position);
      tmpVec$1.applyMatrix4(viewer.rotationGroup.matrix);
      var scaleFactor = this.controls.getCanvasScaleFactor(tmpVec$1.z);
      var sc = this.component;
      var radius = sc.getMaxRepresentationRadius(ca.index);
      //console.log(scaleFactor, cp.distanceTo(acp), radius/scaleFactor, radius)
      if (cp.distanceTo(acp) <= radius / scaleFactor) {
          return ca;
      }
      else {
          return undefined;
      }
  };
  /**
   * @type {Object}
   */
  prototypeAccessors$u.arrow.get = function () { return this._objectIfType('arrow'); };
  /**
   * @type {AtomProxy}
   */
  prototypeAccessors$u.atom.get = function () { return this._objectIfType('atom'); };
  /**
   * @type {Object}
   */
  prototypeAccessors$u.axes.get = function () { return this._objectIfType('axes'); };
  /**
   * @type {BondProxy}
   */
  prototypeAccessors$u.bond.get = function () { return this._objectIfType('bond'); };
  /**
   * @type {Object}
   */
  prototypeAccessors$u.box.get = function () { return this._objectIfType('box'); };
  /**
   * @type {Object}
   */
  prototypeAccessors$u.cone.get = function () { return this._objectIfType('cone'); };
  /**
   * @type {Object}
   */
  prototypeAccessors$u.clash.get = function () { return this._objectIfType('clash'); };
  /**
   * @type {BondProxy}
   */
  prototypeAccessors$u.contact.get = function () { return this._objectIfType('contact'); };
  /**
   * @type {Object}
   */
  prototypeAccessors$u.cylinder.get = function () { return this._objectIfType('cylinder'); };
  /**
   * @type {BondProxy}
   */
  prototypeAccessors$u.distance.get = function () { return this._objectIfType('distance'); };
  /**
   * @type {Object}
   */
  prototypeAccessors$u.ellipsoid.get = function () { return this._objectIfType('ellipsoid'); };
  /**
   * @type {Object}
   */
  prototypeAccessors$u.octahedron.get = function () { return this._objectIfType('octahedron'); };
  /**
   * @type {Object}
   */
  prototypeAccessors$u.point.get = function () { return this._objectIfType('point'); };
  /**
   * @type {Object}
   */
  prototypeAccessors$u.mesh.get = function () { return this._objectIfType('mesh'); };
  /**
   * @type {Object}
   */
  prototypeAccessors$u.slice.get = function () { return this._objectIfType('slice'); };
  /**
   * @type {Object}
   */
  prototypeAccessors$u.sphere.get = function () { return this._objectIfType('sphere'); };
  /**
   * @type {Object}
   */
  prototypeAccessors$u.tetrahedron.get = function () { return this._objectIfType('tetrahedron'); };
  /**
   * @type {Object}
   */
  prototypeAccessors$u.torus.get = function () { return this._objectIfType('torus'); };
  /**
   * @type {Object}
   */
  prototypeAccessors$u.surface.get = function () { return this._objectIfType('surface'); };
  /**
   * @type {Object}
   */
  prototypeAccessors$u.unitcell.get = function () { return this._objectIfType('unitcell'); };
  /**
   * @type {Object}
   */
  prototypeAccessors$u.unknown.get = function () { return this._objectIfType('unknown'); };
  /**
   * @type {Object}
   */
  prototypeAccessors$u.volume.get = function () { return this._objectIfType('volume'); };
  /**
   * @type {Object}
   */
  prototypeAccessors$u.wideline.get = function () { return this._objectIfType('wideline'); };
  PickingProxy.prototype._objectIfType = function _objectIfType (type) {
      return this.type === type ? this.object : undefined;
  };
  PickingProxy.prototype.getLabel = function getLabel () {
      var atom = this.atom || this.closeAtom;
      var msg = 'nothing';
      if (this.arrow) {
          msg = this.arrow.name;
      }
      else if (atom) {
          msg = "atom: " + (atom.qualifiedName()) + " (" + (atom.structure.name) + ")";
      }
      else if (this.axes) {
          msg = 'axes';
      }
      else if (this.bond) {
          msg = "bond: " + (this.bond.atom1.qualifiedName()) + " - " + (this.bond.atom2.qualifiedName()) + " (" + (this.bond.structure.name) + ")";
      }
      else if (this.box) {
          msg = this.box.name;
      }
      else if (this.cone) {
          msg = this.cone.name;
      }
      else if (this.clash) {
          msg = "clash: " + (this.clash.clash.sele1) + " - " + (this.clash.clash.sele2);
      }
      else if (this.contact) {
          msg = (this.contact.type) + ": " + (this.contact.atom1.qualifiedName()) + " - " + (this.contact.atom2.qualifiedName()) + " (" + (this.contact.atom1.structure.name) + ")";
      }
      else if (this.cylinder) {
          msg = this.cylinder.name;
      }
      else if (this.distance) {
          msg = "distance: " + (this.distance.atom1.qualifiedName()) + " - " + (this.distance.atom2.qualifiedName()) + " (" + (this.distance.structure.name) + ")";
      }
      else if (this.ellipsoid) {
          msg = this.ellipsoid.name;
      }
      else if (this.octahedron) {
          msg = this.octahedron.name;
      }
      else if (this.point) {
          msg = this.point.name;
      }
      else if (this.mesh) {
          msg = "mesh: " + (this.mesh.name || this.mesh.serial) + " (" + (this.mesh.shape.name) + ")";
      }
      else if (this.slice) {
          msg = "slice: " + (this.slice.value.toPrecision(3)) + " (" + (this.slice.volume.name) + ")";
      }
      else if (this.sphere) {
          msg = this.sphere.name;
      }
      else if (this.surface) {
          msg = "surface: " + (this.surface.surface.name);
      }
      else if (this.tetrahedron) {
          msg = this.tetrahedron.name;
      }
      else if (this.torus) {
          msg = this.torus.name;
      }
      else if (this.unitcell) {
          msg = "unitcell: " + (this.unitcell.unitcell.spacegroup) + " (" + (this.unitcell.structure.name) + ")";
      }
      else if (this.unknown) {
          msg = 'unknown';
      }
      else if (this.volume) {
          msg = "volume: " + (this.volume.value.toPrecision(3)) + " (" + (this.volume.volume.name) + ")";
      }
      else if (this.wideline) {
          msg = this.wideline.name;
      }
      return msg;
  };

  Object.defineProperties( PickingProxy.prototype, prototypeAccessors$u );

  /**
   * @file Picking Controls
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Picking controls
   */
  var PickingControls = function PickingControls(stage) {
      this.stage = stage;
      this.viewer = stage.viewer;
  };
  /**
   * get picking data
   * @param {Number} x - canvas x coordinate
   * @param {Number} y - canvas y coordinate
   * @return {PickingProxy|undefined} picking proxy
   */
  PickingControls.prototype.pick = function pick (x, y) {
      var pickingData = this.viewer.pick(x, y);
      if (pickingData.picker &&
          pickingData.picker.type !== 'ignore' &&
          pickingData.pid !== undefined) {
          var pickerArray = pickingData.picker.array;
          if (pickerArray && pickingData.pid >= pickerArray.length) {
              console.error('pid >= picker.array.length');
          }
          else {
              return new PickingProxy(pickingData, this.stage);
          }
      }
  };

  /**
   * @file Viewer Controls
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Orientation matrix, a 4x4 transformation matrix with rotation part
   * used for scene rotation, scale part for scene camera distance and
   * position part for scene translation
   * @typedef {Matrix4} OrientationMatrix - orientation matrix
   */
  var tmpQ = new Quaternion();
  var tmpP = new Vector3();
  var tmpS = new Vector3();
  var tmpCanvasVector = new Vector3();
  var tmpScaleVector = new Vector3();
  var tmpRotateMatrix$1 = new Matrix4();
  var tmpRotateVector$1 = new Vector3();
  var tmpAlignMatrix = new Matrix4();
  /**
   * Viewer controls
   */
  var ViewerControls = function ViewerControls(stage) {
      this.stage = stage;
      this.signals = {
          changed: new signals.Signal()
      };
      this.viewer = stage.viewer;
  };

  var prototypeAccessors$t = { position: { configurable: true },rotation: { configurable: true } };
  /**
   * scene center position
   * @type {Vector3}
   */
  prototypeAccessors$t.position.get = function () {
      return this.viewer.translationGroup.position;
  };
  /**
   * scene rotation
   * @type {Quaternion}
   */
  prototypeAccessors$t.rotation.get = function () {
      return this.viewer.rotationGroup.quaternion;
  };
  /**
   * Trigger render and emit changed event
   * @emits {ViewerControls.signals.changed}
   * @return {undefined}
   */
  ViewerControls.prototype.changed = function changed () {
      this.viewer.requestRender();
      this.signals.changed.dispatch();
  };
  ViewerControls.prototype.getPositionOnCanvas = function getPositionOnCanvas (position, optionalTarget) {
      var canvasPosition = ensureVector2(optionalTarget);
      var viewer = this.viewer;
      tmpCanvasVector.copy(position)
          .add(viewer.translationGroup.position)
          .applyMatrix4(viewer.rotationGroup.matrix)
          .project(viewer.camera);
      return canvasPosition.set((tmpCanvasVector.x + 1) * viewer.width / 2, (tmpCanvasVector.y + 1) * viewer.height / 2);
  };
  ViewerControls.prototype.getCanvasScaleFactor = function getCanvasScaleFactor (z) {
          if ( z === void 0 ) z = 0;

      var camera = this.viewer.camera;
      if (camera instanceof OrthographicCamera) {
          return 1 / camera.zoom;
      }
      else {
          z = Math.abs(z);
          z += this.getCameraDistance();
          var fov = degToRad(camera.fov);
          var unitHeight = 2.0 * z * Math.tan(fov / 2);
          return unitHeight / this.viewer.height;
      }
  };
  /**
   * get scene orientation
   * @param {Matrix4} optionalTarget - pre-allocated target matrix
   * @return {OrientationMatrix} scene orientation
   */
  ViewerControls.prototype.getOrientation = function getOrientation (optionalTarget) {
      var m = ensureMatrix4(optionalTarget);
      m.copy(this.viewer.rotationGroup.matrix);
      var z = this.getCameraDistance();
      m.scale(tmpScaleVector.set(z, z, z));
      m.setPosition(this.viewer.translationGroup.position);
      return m;
  };
  /**
   * set scene orientation
   * @param {OrientationMatrix|Array} orientation - scene orientation
   * @return {undefined}
   */
  ViewerControls.prototype.orient = function orient (orientation) {
      ensureMatrix4(orientation).decompose(tmpP, tmpQ, tmpS);
      var v = this.viewer;
      v.rotationGroup.setRotationFromQuaternion(tmpQ);
      v.translationGroup.position.copy(tmpP);
      v.cameraDistance = tmpS.z;
      v.updateZoom();
      this.changed();
  };
  /**
   * translate scene
   * @param  {Vector3|Array} vector - translation vector
   * @return {undefined}
   */
  ViewerControls.prototype.translate = function translate (vector) {
      this.viewer.translationGroup.position
          .add(ensureVector3(vector));
      this.changed();
  };
  /**
   * center scene
   * @param  {Vector3|Array} position - center position
   * @return {undefined}
   */
  ViewerControls.prototype.center = function center (position) {
      this.viewer.translationGroup.position
          .copy(ensureVector3(position)).negate();
      this.changed();
  };
  /**
   * "zoom" scene by moving camera closer to origin
   * @param  {Number} delta - zoom change
   * @return {undefined}
   */
  ViewerControls.prototype.zoom = function zoom (delta) {
      this.distance(this.getCameraDistance() * (1 - delta));
  };
  /**
   * get camera distance
   */
  ViewerControls.prototype.getCameraDistance = function getCameraDistance () {
      return this.viewer.cameraDistance;
  };
  /**
   * camera distance
   * @param  {Number} z - distance
   * @return {undefined}
   */
  ViewerControls.prototype.distance = function distance (distance$1) {
      // Math.abs because distance used to be "z", normally negative.
      // Math.max to prevent us from getting _too_ close.
      this.viewer.cameraDistance = Math.max(Math.abs(distance$1), 0.2);
      this.viewer.updateZoom();
      this.changed();
  };
  /**
   * spin scene on axis
   * @param  {Vector3|Array} axis - rotation axis
   * @param  {Number} angle - amount to spin
   * @return {undefined}
   */
  ViewerControls.prototype.spin = function spin (axis, angle) {
      tmpRotateMatrix$1.getInverse(this.viewer.rotationGroup.matrix);
      tmpRotateVector$1
          .copy(ensureVector3(axis)).applyMatrix4(tmpRotateMatrix$1);
      this.viewer.rotationGroup.rotateOnAxis(tmpRotateVector$1, angle);
      this.changed();
  };
  /**
   * rotate scene
   * @param  {Quaternion|Array} quaternion - rotation quaternion
   * @return {undefined}
   */
  ViewerControls.prototype.rotate = function rotate (quaternion) {
      this.viewer.rotationGroup
          .setRotationFromQuaternion(ensureQuaternion(quaternion));
      this.changed();
  };
  /**
   * align scene to basis matrix
   * @param  {Matrix4|Array} basis - basis matrix
   * @return {undefined}
   */
  ViewerControls.prototype.align = function align (basis) {
      tmpAlignMatrix.getInverse(ensureMatrix4(basis));
      this.viewer.rotationGroup.setRotationFromMatrix(tmpAlignMatrix);
      this.changed();
  };
  /**
   * apply rotation matrix to scene
   * @param  {Matrix4|Array} matrix - rotation matrix
   * @return {undefined}
   */
  ViewerControls.prototype.applyMatrix = function applyMatrix (matrix) {
      this.viewer.rotationGroup.applyMatrix4(ensureMatrix4(matrix));
      this.changed();
  };

  Object.defineProperties( ViewerControls.prototype, prototypeAccessors$t );

  /**
   * @file Animation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Animation. Base animation class.
   * @interface
   */
  var Animation = function Animation(duration, controls) {
      var ref;

      var args = [], len = arguments.length - 2;
      while ( len-- > 0 ) args[ len ] = arguments[ len + 2 ];
      this.pausedTime = -1;
      this.elapsedDuration = 0;
      this.pausedDuration = 0;
      this.ignoreGlobalToggle = false;
      this._paused = false;
      this._resolveList = [];
      this.duration = defaults(duration, 1000);
      this.controls = controls;
      this.startTime = window.performance.now();
      (ref = this)._init.apply(ref, args);
  };

  var prototypeAccessors$s = { done: { configurable: true },paused: { configurable: true } };
  /**
   * True when animation has finished
   */
  prototypeAccessors$s.done.get = function () {
      return this.alpha === 1;
  };
  /**
   * True when animation is paused
   */
  prototypeAccessors$s.paused.get = function () {
      return this._paused;
  };
  Animation.prototype.tick = function tick (stats) {
      if (this._paused)
          { return; }
      this.elapsedDuration = stats.currentTime - this.startTime - this.pausedDuration;
      if (this.duration === 0) {
          this.alpha = 1;
      }
      else {
          this.alpha = smoothstep(0, 1, this.elapsedDuration / this.duration);
      }
      this._tick(stats);
      if (this.done) {
          this._resolveList.forEach(function (resolve) { return resolve(); });
      }
      return this.done;
  };
  /**
   * Pause animation
   * @param {boolean} [hold] - put animation on a hold which
   *                       must be release before it can be resumed
   */
  Animation.prototype.pause = function pause (hold) {
      if (hold)
          { this._hold = true; }
      if (this.pausedTime === -1) {
          this.pausedTime = window.performance.now();
      }
      this._paused = true;
  };
  /**
   * Resume animation
   * @param {Boolean} [releaseHold] - release a hold on the animation
   */
  Animation.prototype.resume = function resume (releaseHold) {
      if (!releaseHold && this._hold)
          { return; }
      this.pausedDuration += window.performance.now() - this.pausedTime;
      this._paused = false;
      this._hold = false;
      this.pausedTime = -1;
  };
  /**
   * Toggle animation
   */
  Animation.prototype.toggle = function toggle () {
      if (this._paused) {
          this.resume();
      }
      else {
          this.pause();
      }
  };
  /**
   * Promise-like interface
   */
  Animation.prototype.then = function then (callback) {
          var this$1$1 = this;

      var p;
      if (this.done) {
          p = Promise.resolve();
      }
      else {
          p = new Promise(function (resolve) { return this$1$1._resolveList.push(resolve); });
      }
      return p.then(callback);
  };

  Object.defineProperties( Animation.prototype, prototypeAccessors$s );
  /**
   * Spin animation. Spin around an axis.
   */
  var SpinAnimation = /*@__PURE__*/(function (Animation) {
      function SpinAnimation(duration, controls) {
          var args = [], len = arguments.length - 2;
          while ( len-- > 0 ) args[ len ] = arguments[ len + 2 ];

          Animation.apply(this, [ defaults(duration, Infinity), controls ].concat( args ));
      }

      if ( Animation ) SpinAnimation.__proto__ = Animation;
      SpinAnimation.prototype = Object.create( Animation && Animation.prototype );
      SpinAnimation.prototype.constructor = SpinAnimation;
      SpinAnimation.prototype._init = function _init (axis, angle) {
          if (Array.isArray(axis)) {
              this.axis = new Vector3().fromArray(axis);
          }
          else {
              this.axis = defaults(axis, new Vector3(0, 1, 0));
          }
          this.angle = defaults(angle, 0.01);
      };
      SpinAnimation.prototype._tick = function _tick (stats) {
          if (!this.axis || !this.angle)
              { return; }
          this.controls.spin(this.axis, this.angle * stats.lastDuration / 16);
      };

      return SpinAnimation;
  }(Animation));
  /**
   * Rock animation. Rock around an axis.
   */
  var RockAnimation = /*@__PURE__*/(function (Animation) {
      function RockAnimation(duration, controls) {
          var args = [], len = arguments.length - 2;
          while ( len-- > 0 ) args[ len ] = arguments[ len + 2 ];

          Animation.apply(this, [ defaults(duration, Infinity), controls ].concat( args ));
          this.angleSum = 0;
          this.direction = 1;
      }

      if ( Animation ) RockAnimation.__proto__ = Animation;
      RockAnimation.prototype = Object.create( Animation && Animation.prototype );
      RockAnimation.prototype.constructor = RockAnimation;
      RockAnimation.prototype._init = function _init (axis, angleStep, angleEnd) {
          if (Array.isArray(axis)) {
              this.axis = new Vector3().fromArray(axis);
          }
          else {
              this.axis = defaults(axis, new Vector3(0, 1, 0));
          }
          this.angleStep = defaults(angleStep, 0.01);
          this.angleEnd = defaults(angleEnd, 0.2);
      };
      RockAnimation.prototype._tick = function _tick (stats) {
          if (!this.axis || !this.angleStep || !this.angleEnd)
              { return; }
          var alpha = smoothstep(0, 1, Math.abs(this.angleSum) / this.angleEnd);
          var angle = this.angleStep * this.direction * (1.1 - alpha);
          this.controls.spin(this.axis, angle * stats.lastDuration / 16);
          this.angleSum += this.angleStep;
          if (this.angleSum >= this.angleEnd) {
              this.direction *= -1;
              this.angleSum = -this.angleEnd;
          }
      };

      return RockAnimation;
  }(Animation));
  /**
   * Move animation. Move from one position to another.
   */
  var MoveAnimation = /*@__PURE__*/(function (Animation) {
      function MoveAnimation () {
          Animation.apply(this, arguments);
      }

      if ( Animation ) MoveAnimation.__proto__ = Animation;
      MoveAnimation.prototype = Object.create( Animation && Animation.prototype );
      MoveAnimation.prototype.constructor = MoveAnimation;

      MoveAnimation.prototype._init = function _init (moveFrom, moveTo) {
          this.moveFrom = ensureVector3(defaults(moveFrom, new Vector3()));
          this.moveTo = ensureVector3(defaults(moveTo, new Vector3()));
      };
      MoveAnimation.prototype._tick = function _tick ( /* stats */) {
          this.controls.position.lerpVectors(this.moveFrom, this.moveTo, this.alpha).negate();
          this.controls.changed();
      };

      return MoveAnimation;
  }(Animation));
  /**
   * Zoom animation. Gradually change the zoom level.
   */
  var ZoomAnimation = /*@__PURE__*/(function (Animation) {
      function ZoomAnimation () {
          Animation.apply(this, arguments);
      }

      if ( Animation ) ZoomAnimation.__proto__ = Animation;
      ZoomAnimation.prototype = Object.create( Animation && Animation.prototype );
      ZoomAnimation.prototype.constructor = ZoomAnimation;

      ZoomAnimation.prototype._init = function _init (zoomFrom, zoomTo) {
          this.zoomFrom = zoomFrom;
          this.zoomTo = zoomTo;
      };
      ZoomAnimation.prototype._tick = function _tick () {
          this.controls.distance(lerp(this.zoomFrom, this.zoomTo, this.alpha));
      };

      return ZoomAnimation;
  }(Animation));
  /**
   * Rotate animation. Rotate from one orientation to another.
   */
  var RotateAnimation = /*@__PURE__*/(function (Animation) {
      function RotateAnimation() {
          Animation.apply(this, arguments);
          this._currentRotation = new Quaternion();
      }

      if ( Animation ) RotateAnimation.__proto__ = Animation;
      RotateAnimation.prototype = Object.create( Animation && Animation.prototype );
      RotateAnimation.prototype.constructor = RotateAnimation;
      RotateAnimation.prototype._init = function _init (rotateFrom, rotateTo) {
          this.rotateFrom = ensureQuaternion(rotateFrom);
          this.rotateTo = ensureQuaternion(rotateTo);
          this._currentRotation = new Quaternion();
      };
      RotateAnimation.prototype._tick = function _tick () {
          this._currentRotation
              .copy(this.rotateFrom)
              .slerp(this.rotateTo, this.alpha);
          this.controls.rotate(this._currentRotation);
      };

      return RotateAnimation;
  }(Animation));
  /**
   * Value animation. Call callback with interpolated value.
   */
  var ValueAnimation = /*@__PURE__*/(function (Animation) {
      function ValueAnimation () {
          Animation.apply(this, arguments);
      }

      if ( Animation ) ValueAnimation.__proto__ = Animation;
      ValueAnimation.prototype = Object.create( Animation && Animation.prototype );
      ValueAnimation.prototype.constructor = ValueAnimation;

      ValueAnimation.prototype._init = function _init (valueFrom, valueTo, callback) {
          this.valueFrom = valueFrom;
          this.valueTo = valueTo;
          this.callback = callback;
      };
      ValueAnimation.prototype._tick = function _tick ( /* stats */) {
          this.callback(lerp(this.valueFrom, this.valueTo, this.alpha));
      };

      return ValueAnimation;
  }(Animation));
  /**
   * Timeout animation. Call callback after duration.
   */
  var TimeoutAnimation = /*@__PURE__*/(function (Animation) {
      function TimeoutAnimation () {
          Animation.apply(this, arguments);
      }

      if ( Animation ) TimeoutAnimation.__proto__ = Animation;
      TimeoutAnimation.prototype = Object.create( Animation && Animation.prototype );
      TimeoutAnimation.prototype.constructor = TimeoutAnimation;

      TimeoutAnimation.prototype._init = function _init (callback) {
          this.callback = callback;
      };
      TimeoutAnimation.prototype._tick = function _tick () {
          if (this.alpha === 1)
              { this.callback(); }
      };

      return TimeoutAnimation;
  }(Animation));
  /**
   * Animation list.
   */
  var AnimationList = function AnimationList(list) {
      if ( list === void 0 ) list = [];

      this._resolveList = [];
      this._list = list;
  };

  var prototypeAccessors$1$2 = { done: { configurable: true } };
  /**
   * True when all animations have finished
   */
  prototypeAccessors$1$2.done.get = function () {
      return this._list.every(function (animation) {
          return animation.done;
      });
  };
  /**
   * Promise-like interface
   */
  AnimationList.prototype.then = function then (callback) {
          var this$1$1 = this;

      var p;
      if (this.done) {
          p = Promise.resolve();
      }
      else {
          p = new Promise(function (resolve) {
              this$1$1._resolveList.push(resolve);
              this$1$1._list.forEach(function (animation) {
                  animation.then(function () {
                      this$1$1._resolveList.forEach(function (callback) {
                          callback();
                      });
                      this$1$1._resolveList.length = 0;
                  });
              });
          });
      }
      return p.then(callback);
  };

  Object.defineProperties( AnimationList.prototype, prototypeAccessors$1$2 );

  /**
   * @file Animation Controls
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Animation controls
   */
  var AnimationControls = function AnimationControls(stage) {
      this.stage = stage;
      this.animationList = [];
      this.finishedList = [];
      this.viewer = stage.viewer;
      this.controls = stage.viewerControls;
  };

  var prototypeAccessors$r = { paused: { configurable: true } };
  /**
   * True when all animations are paused
   * @type {Boolean}
   */
  prototypeAccessors$r.paused.get = function () {
      return this.animationList.every(function (animation) { return animation.paused; });
  };
  /**
   * Add an animation
   */
  AnimationControls.prototype.add = function add (animation) {
      if (animation.duration === 0) {
          animation.tick(this.viewer.stats);
      }
      else {
          this.animationList.push(animation);
      }
      return animation;
  };
  /**
   * Remove an animation
   */
  AnimationControls.prototype.remove = function remove (animation) {
      var list = this.animationList;
      var index = list.indexOf(animation);
      if (index > -1) {
          list.splice(index, 1);
      }
  };
  /**
   * Run all animations
   */
  AnimationControls.prototype.run = function run (stats) {
      var finishedList = this.finishedList;
      var animationList = this.animationList;
      var n = animationList.length;
      for (var i = 0; i < n; ++i) {
          var animation = animationList[i];
          // tick returns true when finished
          if (animation.tick(stats)) {
              finishedList.push(animation);
          }
      }
      var m = finishedList.length;
      if (m) {
          for (var j = 0; j < m; ++j) {
              this.remove(finishedList[j]);
          }
          finishedList.length = 0;
      }
  };
  /**
   * Add a spin animation
   * @param  {Vector3} axis - axis to spin around
   * @param  {Number} angle - amount to spin per frame, radians
   * @param  {Number} duration - animation time in milliseconds
   * @return {SpinAnimation} the animation
   */
  AnimationControls.prototype.spin = function spin (axis, angle, duration) {
      return this.add(new SpinAnimation(duration, this.controls, axis, angle));
  };
  /**
   * Add a rock animation
   * @param  {Vector3} axis - axis to rock around
   * @param  {Number} angle - amount to spin per frame, radians
   * @param  {Number} end - maximum extend of motion, radians
   * @param  {Number} duration - animation time in milliseconds
   * @return {SpinAnimation} the animation
   */
  AnimationControls.prototype.rock = function rock (axis, angle, end, duration) {
      return this.add(new RockAnimation(duration, this.controls, axis, angle, end));
  };
  /**
   * Add a rotate animation
   * @param  {Quaternion} rotateTo - target rotation
   * @param  {Number} duration - animation time in milliseconds
   * @return {RotateAnimation} the animation
   */
  AnimationControls.prototype.rotate = function rotate (rotateTo, duration) {
      var rotateFrom = this.viewer.rotationGroup.quaternion.clone();
      return this.add(new RotateAnimation(duration, this.controls, rotateFrom, rotateTo));
  };
  /**
   * Add a move animation
   * @param  {Vector3} moveTo - target position
   * @param  {Number} duration - animation time in milliseconds
   * @return {MoveAnimation} the animation
   */
  AnimationControls.prototype.move = function move (moveTo, duration) {
      var moveFrom = this.controls.position.clone().negate();
      return this.add(new MoveAnimation(duration, this.controls, moveFrom, moveTo));
  };
  /**
   * Add a zoom animation
   * @param  {Number} zoomTo - target distance
   * @param  {Number} duration - animation time in milliseconds
   * @return {ZoomAnimation} the animation
   */
  AnimationControls.prototype.zoom = function zoom (zoomTo, duration) {
      var zoomFrom = this.viewer.camera.position.z;
      return this.add(new ZoomAnimation(duration, this.controls, zoomFrom, zoomTo));
  };
  /**
   * Add a zoom and a move animation
   * @param  {Vector3} moveTo - target position
   * @param  {Number} zoomTo - target distance
   * @param  {Number} duration - animation time in milliseconds
   * @return {Array} the animations
   */
  AnimationControls.prototype.zoomMove = function zoomMove (moveTo, zoomTo, duration) {
      return new AnimationList([
          this.move(moveTo, duration),
          this.zoom(zoomTo, duration)
      ]);
  };
  /**
   * Add an orient animation
   * @param  {OrientationMatrix|Array} orientTo - target orientation
   * @param  {Number} duration - animation time in milliseconds
   * @return {Array} the animations
   */
  AnimationControls.prototype.orient = function orient (orientTo, duration) {
      var p = new Vector3();
      var q = new Quaternion();
      var s = new Vector3();
      ensureMatrix4(orientTo).decompose(p, q, s);
      return new AnimationList([
          this.move(p.negate(), duration),
          this.rotate(q, duration),
          this.zoom(-s.x, duration)
      ]);
  };
  /**
   * Add a value animation
   * @param  {Number} valueFrom - start value
   * @param  {Number} valueTo - target value
   * @param  {Function} callback - called on every tick
   * @param  {Number} duration - animation time in milliseconds
   * @return {ValueAnimation} the animation
   */
  AnimationControls.prototype.value = function value (valueFrom, valueTo, callback, duration) {
      return this.add(new ValueAnimation(duration, this.controls, valueFrom, valueTo, callback));
  };
  /**
   * Add a timeout animation
   * @param  {Function} callback - called after duration
   * @param  {Number} duration - timeout in milliseconds
   * @return {TimeoutAnimation} the animation
   */
  AnimationControls.prototype.timeout = function timeout (callback, duration) {
      return this.add(new TimeoutAnimation(duration, this.controls, callback));
  };
  /**
   * Add a component spin animation
   * @param  {Component} component - object to move
   * @param  {Vector3} axis - axis to spin around
   * @param  {Number} angle - amount to spin per frame, radians
   * @param  {Number} duration - animation time in milliseconds
   * @return {SpinAnimation} the animation
   */
  AnimationControls.prototype.spinComponent = function spinComponent (component, axis, angle, duration) {
      return this.add(
      // TODO
      new SpinAnimation(duration, component.controls, axis, angle));
  };
  /**
   * Add a component rock animation
   * @param  {Component} component - object to move
   * @param  {Vector3} axis - axis to rock around
   * @param  {Number} angle - amount to spin per frame, radians
   * @param  {Number} end - maximum extend of motion, radians
   * @param  {Number} duration - animation time in milliseconds
   * @return {SpinAnimation} the animation
   */
  AnimationControls.prototype.rockComponent = function rockComponent (component, axis, angle, end, duration) {
      return this.add(
      // TODO
      new RockAnimation(duration, component.controls, axis, angle, end));
  };
  /**
   * Add a component move animation
   * @param  {Component} component - object to move
   * @param  {Vector3} moveTo - target position
   * @param  {Number} duration - animation time in milliseconds
   * @return {MoveAnimation} the animation
   */
  AnimationControls.prototype.moveComponent = function moveComponent (component, moveTo, duration) {
      var moveFrom = component.controls.position.clone().negate();
      return this.add(
      // TODO
      new MoveAnimation(duration, component.controls, moveFrom, moveTo));
  };
  /**
   * Pause all animations
   * @return {undefined}
   */
  AnimationControls.prototype.pause = function pause () {
      this.animationList.forEach(function (animation) { return animation.pause(); });
  };
  /**
   * Resume all animations
   * @return {undefined}
   */
  AnimationControls.prototype.resume = function resume () {
      this.animationList.forEach(function (animation) { return animation.resume(); });
  };
  /**
   * Toggle all animations
   * @return {undefined}
   */
  AnimationControls.prototype.toggle = function toggle () {
      if (this.paused) {
          this.resume();
      }
      else {
          this.pause();
      }
  };
  /**
   * Clear all animations
   * @return {undefined}
   */
  AnimationControls.prototype.clear = function clear () {
      this.animationList.length = 0;
  };
  AnimationControls.prototype.dispose = function dispose () {
      this.clear();
  };

  Object.defineProperties( AnimationControls.prototype, prototypeAccessors$r );

  /**
   * @file Queue
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var Queue = function Queue(fn, argList) {
      this.fn = fn;
      this.queue = [];
      this.pending = false;
      this.next = this.next.bind(this);
      if (argList) {
          for (var i = 0, il = argList.length; i < il; ++i) {
              this.queue.push(argList[i]);
          }
          this.next();
      }
  };
  Queue.prototype.run = function run (arg) {
      this.fn(arg, this.next);
  };
  Queue.prototype.next = function next () {
          var this$1$1 = this;

      var arg = this.queue.shift();
      if (arg !== undefined) {
          this.pending = true;
          setTimeout(function () { return this$1$1.run(arg); });
      }
      else {
          this.pending = false;
      }
  };
  Queue.prototype.push = function push (arg) {
      this.queue.push(arg);
      if (!this.pending)
          { this.next(); }
  };
  Queue.prototype.kill = function kill () {
      this.queue.length = 0;
  };
  Queue.prototype.length = function length () {
      return this.queue.length;
  };

  /**
   * @file Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Representation parameter object.
   * @typedef {Object} RepresentationParameters - representation parameters
   * @property {Boolean} [lazy] - only build & update the representation when visible
   *                            otherwise defer changes until set visible again
   * @property {Integer} [clipNear] - position of camera near/front clipping plane
   *                                in percent of scene bounding box
   * @property {Integer} [clipRadius] - radius of clipping sphere
   * @property {Vector3} [clipCenter] - position of for spherical clipping
   * @property {Boolean} [flatShaded] - render flat shaded
   * @property {Float} [opacity] - translucency: 1 is fully opaque, 0 is fully transparent
   * @property {Boolean} [depthWrite] - depth write
   * @property {String} [side] - which triangle sides to render, "front" front-side,
   *                            "back" back-side, "double" front- and back-side
   * @property {Boolean} [wireframe] - render as wireframe
   * @property {ColorData} [colorData] - atom or bond indexed data for coloring
   * @property {String} [colorScheme] - color scheme
   * @property {String} [colorScale] - color scale, either a string for a
   *                                 predefined scale or an array of
   *                                 colors to be used as the scale
   * @property {Boolean} [colorReverse] - reverse color scale
   * @property {Color} [colorValue] - color value
   * @property {Integer[]} [colorDomain] - scale value range
   * @property {Integer} colorDomain.0 - min value
   * @property {Integer} colorDomain.1 - max value
   * @property {String} [colorMode] - color mode, one of rgb, hsv, hsl, hsi, lab, hcl
   * @property {Float} [roughness] - how rough the material is, between 0 and 1
   * @property {Float} [metalness] - how metallic the material is, between 0 and 1
   * @property {Color} [diffuse] - diffuse color for lighting
   * @property {Boolean} [diffuseInterior] - diffuse interior, i.e. ignore normal
   * @property {Boolean} [useInteriorColor] - use interior color
   * @property {Color} [interiorColor] - interior color
   * @property {Float} [interiorDarkening] - interior darkening: 0 no darking, 1 fully darkened
   * @property {Boolean} [disablePicking] - disable picking
   */
  /**
   * Representation object
   * @interface
   * @param {Object} object - the object to be represented
   * @param {Viewer} viewer - a viewer object
   * @param {RepresentationParameters} [params] - representation parameters
   */
  var Representation = function Representation(object, viewer, params) {
      // eslint-disable-next-line no-unused-vars
      // const p = params || {}
      this.type = '';
      this.parameters = {
          lazy: {
              type: 'boolean'
          },
          clipNear: {
              type: 'range', step: 1, max: 100, min: 0, buffer: true
          },
          clipRadius: {
              type: 'number', precision: 1, max: 1000, min: 0, buffer: true
          },
          clipCenter: {
              type: 'vector3', precision: 1, buffer: true
          },
          flatShaded: {
              type: 'boolean', buffer: true
          },
          opacity: {
              type: 'range', step: 0.01, max: 1, min: 0, buffer: true
          },
          depthWrite: {
              type: 'boolean', buffer: true
          },
          side: {
              type: 'select',
              buffer: true,
              options: { front: 'front', back: 'back', double: 'double' }
          },
          wireframe: {
              type: 'boolean', buffer: true
          },
          colorData: {
              type: 'hidden',
              update: 'color',
          },
          colorScheme: {
              type: 'select',
              update: 'color',
              options: {}
          },
          colorScale: {
              type: 'select',
              update: 'color',
              options: ColormakerRegistry.getScales()
          },
          colorReverse: {
              type: 'boolean', update: 'color'
          },
          colorValue: {
              type: 'color', update: 'color'
          },
          colorDomain: {
              type: 'hidden', update: 'color'
          },
          colorMode: {
              type: 'select',
              update: 'color',
              options: ColormakerRegistry.getModes()
          },
          roughness: {
              type: 'range', step: 0.01, max: 1, min: 0, buffer: true
          },
          metalness: {
              type: 'range', step: 0.01, max: 1, min: 0, buffer: true
          },
          diffuse: {
              type: 'color', buffer: true
          },
          diffuseInterior: {
              type: 'boolean', buffer: true
          },
          useInteriorColor: {
              type: 'boolean', buffer: true
          },
          interiorColor: {
              type: 'color', buffer: true
          },
          interiorDarkening: {
              type: 'range', step: 0.01, max: 1, min: 0, buffer: true
          },
          matrix: {
              type: 'hidden', buffer: true
          },
          disablePicking: {
              type: 'boolean', rebuild: true
          }
      };
      /**
       * @type {Viewer}
       */
      this.viewer = viewer;
      /**
       * Counter that keeps track of tasks related to the creation of
       * the representation, including surface calculations.
       * @type {Counter}
       */
      this.tasks = new Counter();
      /**
       * @type {Queue}
       * @private
       */
      this.queue = new Queue(this.make.bind(this));
      /**
       * @type {Array}
       * @private
       */
      this.bufferList = [];
      if (this.parameters.colorScheme) {
          this.parameters.colorScheme.options = ColormakerRegistry.getSchemes();
      }
      this.toBePrepared = false;
  };
  Representation.prototype.init = function init (params) {
      var p = params || {};
      this.clipNear = defaults(p.clipNear, 0);
      this.clipRadius = defaults(p.clipRadius, 0);
      this.clipCenter = defaults(p.clipCenter, new Vector3());
      this.flatShaded = defaults(p.flatShaded, false);
      this.side = defaults(p.side, 'double');
      this.opacity = defaults(p.opacity, 1.0);
      this.depthWrite = defaults(p.depthWrite, true);
      this.wireframe = defaults(p.wireframe, false);
      this.setColor(p.color, p);
      this.colorData = defaults(p.colorData, undefined);
      this.colorScheme = defaults(p.colorScheme, 'uniform');
      this.colorScale = defaults(p.colorScale, '');
      this.colorReverse = defaults(p.colorReverse, false);
      this.colorValue = defaults(p.colorValue, 0x909090);
      this.colorDomain = defaults(p.colorDomain, undefined);
      this.colorMode = defaults(p.colorMode, 'hcl');
      this.visible = defaults(p.visible, true);
      this.quality = defaults(p.quality, undefined);
      this.roughness = defaults(p.roughness, 0.4);
      this.metalness = defaults(p.metalness, 0.0);
      this.diffuse = defaults(p.diffuse, 0xffffff);
      this.diffuseInterior = defaults(p.diffuseInterior, false);
      this.useInteriorColor = defaults(p.useInteriorColor, false);
      this.interiorColor = defaults(p.interiorColor, 0x222222);
      this.interiorDarkening = defaults(p.interiorDarkening, 0);
      this.lazy = defaults(p.lazy, false);
      this.lazyProps = {
          build: false,
          bufferParams: {},
          what: {}
      };
      this.matrix = defaults(p.matrix, new Matrix4());
      this.disablePicking = defaults(p.disablePicking, false);
      // handle common parameters when applicable
      var tp = this.parameters;
      if (tp.sphereDetail === true) {
          tp.sphereDetail = {
              type: 'integer', max: 3, min: 0, rebuild: 'impostor'
          };
      }
      if (tp.radialSegments === true) {
          tp.radialSegments = {
              type: 'integer', max: 25, min: 5, rebuild: 'impostor'
          };
      }
      if (tp.openEnded === true) {
          tp.openEnded = {
              type: 'boolean', rebuild: 'impostor', buffer: true
          };
      }
      if (tp.disableImpostor === true) {
          tp.disableImpostor = {
              type: 'boolean', rebuild: true
          };
      }
      if (p.quality === 'low') {
          if (tp.sphereDetail)
              { this.sphereDetail = 0; }
          if (tp.radialSegments)
              { this.radialSegments = 5; }
      }
      else if (p.quality === 'medium') {
          if (tp.sphereDetail)
              { this.sphereDetail = 1; }
          if (tp.radialSegments)
              { this.radialSegments = 10; }
      }
      else if (p.quality === 'high') {
          if (tp.sphereDetail)
              { this.sphereDetail = 2; }
          if (tp.radialSegments)
              { this.radialSegments = 20; }
      }
      else {
          if (tp.sphereDetail) {
              this.sphereDetail = defaults(p.sphereDetail, 1);
          }
          if (tp.radialSegments) {
              this.radialSegments = defaults(p.radialSegments, 10);
          }
      }
      if (tp.openEnded) {
          this.openEnded = defaults(p.openEnded, true);
      }
      if (tp.disableImpostor) {
          this.disableImpostor = defaults(p.disableImpostor, false);
      }
  };
  Representation.prototype.getColorParams = function getColorParams (p) {
      return Object.assign({
          data: this.colorData,
          scheme: this.colorScheme,
          scale: this.colorScale,
          reverse: this.colorReverse,
          value: this.colorValue,
          domain: this.colorDomain,
          mode: this.colorMode,
          colorSpace: this.colorSpace,
      }, p);
  };
  Representation.prototype.getBufferParams = function getBufferParams (p) {
          if ( p === void 0 ) p = {};

      return Object.assign({
          clipNear: this.clipNear,
          clipRadius: this.clipRadius,
          clipCenter: this.clipCenter,
          flatShaded: this.flatShaded,
          opacity: this.opacity,
          depthWrite: this.depthWrite,
          side: this.side,
          wireframe: this.wireframe,
          roughness: this.roughness,
          metalness: this.metalness,
          diffuse: this.diffuse,
          diffuseInterior: this.diffuseInterior,
          useInteriorColor: this.useInteriorColor,
          interiorColor: this.interiorColor,
          interiorDarkening: this.interiorDarkening,
          matrix: this.matrix,
          disablePicking: this.disablePicking
      }, p);
  };
  Representation.prototype.setColor = function setColor (value, p) {
      var types = Object.keys(ColormakerRegistry.getSchemes());
      if (typeof value === 'string' && types.includes(value.toLowerCase())) {
          if (p) {
              p.colorScheme = value;
          }
          else {
              this.setParameters({ colorScheme: value });
          }
      }
      else if (value !== undefined) {
          var val = new Color(value).getHex(); //TODO
          if (p) {
              p.colorScheme = 'uniform';
              p.colorValue = val;
          }
          else {
              this.setParameters({
                  colorScheme: 'uniform', colorValue: val
              });
          }
      }
      return this;
  };
  // TODO
  Representation.prototype.prepare = function prepare (cb) {
  };
  Representation.prototype.create = function create () {
      // this.bufferList.length = 0;
  };
  Representation.prototype.update = function update (what) {
      this.build();
  };
  Representation.prototype.build = function build (updateWhat) {
      if (this.lazy && (!this.visible || !this.opacity)) {
          this.lazyProps.build = true;
          return;
      }
      if (!this.toBePrepared) {
          this.tasks.increment();
          this.make();
          return;
      }
      // don't let tasks accumulate
      if (this.queue.length() > 0) {
          this.tasks.change(1 - this.queue.length());
          this.queue.kill();
      }
      else {
          this.tasks.increment();
      }
      this.queue.push(updateWhat || false);
  };
  Representation.prototype.make = function make (updateWhat, callback) {
          var this$1$1 = this;

      if (exports.Debug)
          { Log.time('Representation.make ' + this.type); }
      var _make = function () {
          if (updateWhat) {
              this$1$1.update(updateWhat);
              this$1$1.viewer.requestRender();
              this$1$1.tasks.decrement();
              if (callback)
                  { callback(); }
          }
          else {
              this$1$1.clear();
              this$1$1.create();
              if (!this$1$1.manualAttach && !this$1$1.disposed) {
                  if (exports.Debug)
                      { Log.time('Representation.attach ' + this$1$1.type); }
                  this$1$1.attach(function () {
                      if (exports.Debug)
                          { Log.timeEnd('Representation.attach ' + this$1$1.type); }
                      this$1$1.tasks.decrement();
                      if (callback)
                          { callback(); }
                  });
              }
          }
          if (exports.Debug)
              { Log.timeEnd('Representation.make ' + this$1$1.type); }
      };
      if (this.toBePrepared) {
          this.prepare(_make);
      }
      else {
          _make();
      }
  };
  Representation.prototype.attach = function attach (callback) {
      this.setVisibility(this.visible);
      callback();
  };
  /**
   * Set the visibility of the representation
   * @param {Boolean} value - visibility flag
   * @param {Boolean} [noRenderRequest] - whether or not to request a re-render from the viewer
   * @return {Representation} this object
   */
  Representation.prototype.setVisibility = function setVisibility (value, noRenderRequest) {
      this.visible = value;
      if (this.visible && this.opacity) {
          var lazyProps = this.lazyProps;
          var bufferParams = lazyProps.bufferParams;
          var what = lazyProps.what;
          if (lazyProps.build) {
              lazyProps.build = false;
              this.build();
              return this;
          }
          else if (Object.keys(bufferParams).length || Object.keys(what).length) {
              lazyProps.bufferParams = {};
              lazyProps.what = {};
              this.updateParameters(bufferParams, what);
          }
      }
      this.bufferList.forEach(function (buffer) {
          buffer.setVisibility(value);
      });
      if (!noRenderRequest)
          { this.viewer.requestRender(); }
      return this;
  };
  /**
   * Set the visibility of the representation
   * @param {RepresentationParameters} params - parameters object
   * @param {Object} [what] - buffer data attributes to be updated,
   *                    note that this needs to be implemented in the
   *                    derived classes. Generally it allows more
   *                    fine-grained control over updating than
   *                    forcing a rebuild.
   * @param {Boolean} what.position - update position data
   * @param {Boolean} what.color - update color data
   * @param {Boolean} [rebuild] - whether or not to rebuild the representation
   * @return {Representation} this object
   */
  Representation.prototype.setParameters = function setParameters (params, what, rebuild) {
          if ( what === void 0 ) what = {};
          if ( rebuild === void 0 ) rebuild = false;

      var p = params || {};
      var tp = this.parameters;
      var bufferParams = {};
      if (!this.opacity && p.opacity !== undefined) {
          if (this.lazyProps.build) {
              this.lazyProps.build = false;
              rebuild = true;
          }
          else {
              Object.assign(bufferParams, this.lazyProps.bufferParams);
              Object.assign(what, this.lazyProps.what);
              this.lazyProps.bufferParams = {};
              this.lazyProps.what = {};
          }
      }
      this.setColor(p.color, p);
      for (var name in p) {
          if (p[name] === undefined)
              { continue; }
          if (tp[name] === undefined)
              { continue; }
          if (tp[name].int)
              { p[name] = parseInt(p[name]); }
          if (tp[name].float)
              { p[name] = parseFloat(p[name]); }
          // no value change
          if (p[name] === this[name] && (!p[name].equals || p[name].equals(this[name])))
              { continue; }
          if (this[name] && this[name].copy && p[name].copy) {
              this[name].copy(p[name]);
          }
          else if (this[name] && this[name].set) {
              this[name].set(p[name]);
          }
          else {
              this[name] = p[name];
          }
          // buffer param
          if (tp[name].buffer) {
              if (tp[name].buffer === true) {
                  bufferParams[name] = p[name];
              }
              else {
                  var key = tp[name].buffer;
                  bufferParams[key] = p[name];
              }
          }
          // mark for update
          if (tp[name].update) {
              what[tp[name].update] = true;
          }
          // mark for rebuild
          if (tp[name].rebuild &&
              !(tp[name].rebuild === 'impostor' &&
                  ExtensionFragDepth && !this.disableImpostor)) {
              rebuild = true;
          }
      }
      //
      if (rebuild) {
          this.build();
      }
      else {
          this.updateParameters(bufferParams, what);
      }
      return this;
  };
  Representation.prototype.updateParameters = function updateParameters (bufferParams, what) {
          if ( bufferParams === void 0 ) bufferParams = {};

      if (this.lazy && (!this.visible || !this.opacity) && bufferParams.hasOwnProperty('opacity') === false) {
          Object.assign(this.lazyProps.bufferParams, bufferParams);
          Object.assign(this.lazyProps.what, what);
          return;
      }
      this.bufferList.forEach(function (buffer) {
          buffer.setParameters(bufferParams);
      });
      if (Object.keys(what).length) {
          this.update(what); // update buffer attribute
      }
      this.viewer.requestRender();
  };
  Representation.prototype.getParameters = function getParameters () {
          var this$1$1 = this;

      var params = {
          lazy: this.lazy,
          visible: this.visible,
          quality: this.quality
      };
      Object.keys(this.parameters).forEach(function (name) {
          if (this$1$1.parameters[name] !== null) {
              params[name] = this$1$1[name];
          }
      });
      return params;
  };
  Representation.prototype.clear = function clear () {
          var this$1$1 = this;

      this.bufferList.forEach(function (buffer) {
          this$1$1.viewer.remove(buffer);
          buffer.dispose();
      });
      this.bufferList.length = 0;
      this.viewer.requestRender();
  };
  Representation.prototype.dispose = function dispose () {
      this.disposed = true;
      this.queue.kill();
      this.tasks.dispose();
      this.clear();
  };

  /**
   * @file Worker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var _Worker = function _Worker(name) {
      var this$1$1 = this;

      this.pending = 0;
      this.postCount = 0;
      this.onmessageDict = {};
      this.onerrorDict = {};
      this.name = name;
      this.blobUrl = window.URL.createObjectURL(WorkerRegistry.get(name));
      this.worker = new Worker(this.blobUrl);
      WorkerRegistry.activeWorkerCount += 1;
      this.worker.onmessage = function (event) {
          this$1$1.pending -= 1;
          var postId = event.data.__postId;
          if (exports.Debug)
              { Log.timeEnd('Worker.postMessage ' + name + ' #' + postId); }
          var onmessage = this$1$1.onmessageDict[postId];
          if (onmessage) {
              onmessage.call(this$1$1.worker, event);
          }
          delete this$1$1.onmessageDict[postId];
          delete this$1$1.onerrorDict[postId];
      };
      this.worker.onerror = function (event) {
          this$1$1.pending -= 1;
          if (event.data) {
              var postId = event.data.__postId;
              var onerror = this$1$1.onerrorDict[postId];
              if (onerror) {
                  onerror.call(this$1$1.worker, event);
              }
              else {
                  Log.error('Worker.onerror', postId, name, event);
              }
              delete this$1$1.onmessageDict[postId];
              delete this$1$1.onerrorDict[postId];
          }
          else {
              Log.error('Worker.onerror', name, event);
          }
      };
  };
  _Worker.prototype.post = function post (aMessage, transferList, onmessage, onerror) {
          if ( aMessage === void 0 ) aMessage = {};

      this.onmessageDict[this.postCount] = onmessage;
      this.onerrorDict[this.postCount] = onerror;
      aMessage.__name = this.name;
      aMessage.__postId = this.postCount;
      aMessage.__debug = exports.Debug;
      if (exports.Debug)
          { Log.time(("Worker.postMessage " + (this.name) + " #" + (this.postCount))); }
      try {
          this.worker.postMessage(aMessage, transferList);
      }
      catch (error) {
          Log.error('worker.post:', error);
          this.worker.postMessage(aMessage);
      }
      this.pending += 1;
      this.postCount += 1;
      return this;
  };
  _Worker.prototype.terminate = function terminate () {
      if (this.worker) {
          this.worker.terminate();
          window.URL.revokeObjectURL(this.blobUrl);
          WorkerRegistry.activeWorkerCount -= 1;
      }
      else {
          Log.log('no worker to terminate');
      }
  };

  /**
   * @file Worker Pool
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var WorkerPool = function WorkerPool(name, maxCount) {
      if ( maxCount === void 0 ) maxCount = 2;

      this.pool = [];
      this.count = 0;
      this.maxCount = Math.min(8, maxCount);
      this.name = name;
  };
  WorkerPool.prototype.post = function post (aMessage, transferList, onmessage, onerror) {
          if ( aMessage === void 0 ) aMessage = {};

      var worker = this.getNextWorker();
      if (worker) {
          worker.post(aMessage, transferList, onmessage, onerror);
      }
      else {
          console.error('unable to get worker from pool');
      }
      return this;
  };
  WorkerPool.prototype.terminate = function terminate () {
      this.pool.forEach(function (worker) {
          worker.terminate();
      });
  };
  WorkerPool.prototype.getNextWorker = function getNextWorker () {
      var nextWorker;
      var minPending = Infinity;
      for (var i = 0; i < this.maxCount; ++i) {
          if (i >= this.count) {
              nextWorker = new _Worker(this.name);
              this.pool.push(nextWorker);
              this.count += 1;
              break;
          }
          var worker = this.pool[i];
          if (worker.pending === 0) {
              nextWorker = worker;
              break;
          }
          else if (worker.pending < minPending) {
              minPending = worker.pending;
              nextWorker = worker;
          }
      }
      return nextWorker;
  };
  WorkerPool.prototype.constructor = WorkerPool;

  /**
   * @file Vector Utils
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function calculateMeanVector3(array) {
      var n = array.length;
      var m = n / 3;
      var x = 0;
      var y = 0;
      var z = 0;
      for (var i = 0; i < n; i += 3) {
          x += array[i + 0];
          y += array[i + 1];
          z += array[i + 2];
      }
      return new Vector3(x / m, y / m, z / m);
  }
  function projectPointOnVector(point, vector, origin) {
      if (origin) {
          point.sub(origin).projectOnVector(vector).add(origin);
      }
      else {
          point.projectOnVector(vector);
      }
      return point;
  }
  function computeBoundingBox(array) {
      var minX = +Infinity;
      var minY = +Infinity;
      var minZ = +Infinity;
      var maxX = -Infinity;
      var maxY = -Infinity;
      var maxZ = -Infinity;
      for (var i = 0, l = array.length; i < l; i += 3) {
          var x = array[i];
          var y = array[i + 1];
          var z = array[i + 2];
          if (x < minX)
              { minX = x; }
          if (y < minY)
              { minY = y; }
          if (z < minZ)
              { minZ = z; }
          if (x > maxX)
              { maxX = x; }
          if (y > maxY)
              { maxY = y; }
          if (z > maxZ)
              { maxZ = z; }
      }
      return [
          v3new([minX, minY, minZ]),
          v3new([maxX, maxY, maxZ])
      ];
  }
  computeBoundingBox.__deps = [v3new];
  function applyMatrix4toVector3array(m, a) {
      for (var i = 0, il = a.length; i < il; i += 3) {
          var x = a[i];
          var y = a[i + 1];
          var z = a[i + 2];
          a[i] = m[0] * x + m[4] * y + m[8] * z + m[12];
          a[i + 1] = m[1] * x + m[5] * y + m[9] * z + m[13];
          a[i + 2] = m[2] * x + m[6] * y + m[10] * z + m[14];
      }
  }
  function applyMatrix3toVector3array(m, a) {
      for (var i = 0, il = a.length; i < il; i += 3) {
          var x = a[i];
          var y = a[i + 1];
          var z = a[i + 2];
          a[i] = m[0] * x + m[3] * y + m[6] * z;
          a[i + 1] = m[1] * x + m[4] * y + m[7] * z;
          a[i + 2] = m[2] * x + m[5] * y + m[8] * z;
      }
  }
  function normalizeVector3array(a) {
      for (var i = 0, il = a.length; i < il; i += 3) {
          var x = a[i];
          var y = a[i + 1];
          var z = a[i + 2];
          var len2 = x * x + y * y + z * z;
          if (len2 > 0) { // avoid divide by zero
              var s = 1 / Math.sqrt(len2);
              a[i] = x * s;
              a[i + 1] = y * s;
              a[i + 2] = z * s;
          }
          // else leave as all zeros
      }
  }
  function v3new(array) {
      return new Float32Array(array || 3); // TODO
  }
  function v3cross(out, a, b) {
      var ax = a[0];
      var ay = a[1];
      var az = a[2];
      var bx = b[0];
      var by = b[1];
      var bz = b[2];
      out[0] = ay * bz - az * by;
      out[1] = az * bx - ax * bz;
      out[2] = ax * by - ay * bx;
  }
  function v3dot(a, b) {
      return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
  }
  function v3sub(out, a, b) {
      out[0] = a[0] - b[0];
      out[1] = a[1] - b[1];
      out[2] = a[2] - b[2];
  }
  function v3add(out, a, b) {
      out[0] = a[0] + b[0];
      out[1] = a[1] + b[1];
      out[2] = a[2] + b[2];
  }
  function v3fromArray(out, array, offset) {
      if ( offset === void 0 ) offset = 0;

      out[0] = array[offset];
      out[1] = array[offset + 1];
      out[2] = array[offset + 2];
  }
  function v3toArray(input, array, offset) {
      if ( offset === void 0 ) offset = 0;

      array[offset] = input[0];
      array[offset + 1] = input[1];
      array[offset + 2] = input[2];
  }
  function v3length2(a) {
      return a[0] * a[0] + a[1] * a[1] + a[2] * a[2];
  }
  function v3length(a) {
      return Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2]);
  }
  function v3divideScalar(out, a, s) {
      v3multiplyScalar(out, a, 1 / s);
  }
  v3divideScalar.__deps = [v3multiplyScalar];
  function v3multiplyScalar(out, a, s) {
      out[0] = a[0] * s;
      out[1] = a[1] * s;
      out[2] = a[2] * s;
  }
  function v3normalize(out, a) {
      var length2 = v3length2(a);
      if (length2 == 0) {
          out[0] = a[0];
          out[1] = a[1];
          out[2] = a[2];
      }
      else {
          v3multiplyScalar(out, a, 1 / Math.sqrt(length2));
      }
  }
  v3normalize.__deps = [v3multiplyScalar, v3length2];
  function v3subScalar(out, a, s) {
      out[0] = a[0] - s;
      out[1] = a[1] - s;
      out[2] = a[2] - s;
  }
  function v3addScalar(out, a, s) {
      out[0] = a[0] + s;
      out[1] = a[1] + s;
      out[2] = a[2] + s;
  }
  function v3floor(out, a) {
      out[0] = Math.floor(a[0]);
      out[1] = Math.floor(a[1]);
      out[2] = Math.floor(a[2]);
  }
  function v3ceil(out, a) {
      out[0] = Math.ceil(a[0]);
      out[1] = Math.ceil(a[1]);
      out[2] = Math.ceil(a[2]);
  }
  function v3negate(out, a) {
      out[0] = -a[0];
      out[1] = -a[1];
      out[2] = -a[2];
  }

  /**
   * @file Dash
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function getFixedCountDashData(data, segmentCount) {
      if ( segmentCount === void 0 ) segmentCount = 9;

      var s = Math.floor(segmentCount / 2);
      var n = data.position1.length / 3;
      var sn = s * n;
      var sn3 = sn * 3;
      var step = 1 / segmentCount;
      var direction = calculateDirectionArray(data.position1, data.position2);
      var position1 = new Float32Array(sn3);
      var position2 = new Float32Array(sn3);
      var v = new Vector3();
      for (var i = 0; i < n; ++i) {
          var i3 = i * 3;
          v.set(direction[i3], direction[i3 + 1], direction[i3 + 2]);
          var x = data.position1[i3];
          var y = data.position1[i3 + 1];
          var z = data.position1[i3 + 2];
          for (var j = 0; j < s; ++j) {
              var j3 = s * i3 + j * 3;
              var f1 = step * (j * 2 + 1);
              var f2 = step * (j * 2 + 2);
              position1[j3] = x + v.x * f1;
              position1[j3 + 1] = y + v.y * f1;
              position1[j3 + 2] = z + v.z * f1;
              position2[j3] = x + v.x * f2;
              position2[j3 + 1] = y + v.y * f2;
              position2[j3 + 2] = z + v.z * f2;
          }
      }
      var position = calculateCenterArray(position1, position2);
      var color = replicateArray3Entries(data.color, s); // TODO
      var color2 = color;
      var d = { position: position, position1: position1, position2: position2, color: color, color2: color2 };
      if (data.radius) { // TODO
          d.radius = replicateArrayEntries(data.radius, s); // TODO
      }
      if (data.picking && data.picking.array) {
          data.picking.array = replicateArrayEntries(data.picking.array, s);
          d.picking = data.picking;
      }
      if (data.primitiveId) {
          d.primitiveId = replicateArrayEntries(data.primitiveId, s);
      }
      return d;
  }
  function getFixedLengthDashData(data, segmentLength) {
      if ( segmentLength === void 0 ) segmentLength = 0.1;

      var direction = calculateDirectionArray(data.position1, data.position2);
      var pos1 = [];
      var pos2 = [];
      var col = [];
      var rad = data.radius ? [] : undefined;
      var pick = data.picking ? [] : undefined;
      var id = data.primitiveId ? [] : undefined;
      var v = new Vector3();
      var n = data.position1.length / 3;
      var k = 0;
      for (var i = 0; i < n; ++i) {
          var i3 = i * 3;
          v.set(direction[i3], direction[i3 + 1], direction[i3 + 2]);
          var vl = v.length();
          var segmentCount = vl / segmentLength;
          var s = Math.floor(segmentCount / 2);
          var step = 1 / segmentCount;
          var x = data.position1[i3];
          var y = data.position1[i3 + 1];
          var z = data.position1[i3 + 2];
          for (var j = 0; j < s; ++j) {
              var j3 = k * 3 + j * 3;
              var f1 = step * (j * 2 + 1);
              var f2 = step * (j * 2 + 2);
              pos1[j3] = x + v.x * f1;
              pos1[j3 + 1] = y + v.y * f1;
              pos1[j3 + 2] = z + v.z * f1;
              pos2[j3] = x + v.x * f2;
              pos2[j3 + 1] = y + v.y * f2;
              pos2[j3 + 2] = z + v.z * f2;
              if (data.color) {
                  col[j3] = data.color[i3];
                  col[j3 + 1] = data.color[i3 + 1];
                  col[j3 + 2] = data.color[i3 + 2];
              }
              if (rad)
                  { rad[k + j] = data.radius[i]; }
              if (pick) {
                  if (data.picking.array) {
                      pick[k + j] = data.picking.array[i];
                  }
                  else {
                      pick[k + j] = i;
                  }
              }
              if (id)
                  { id[k + j] = data.primitiveId[i]; }
          }
          k += s;
      }
      var position1 = new Float32Array(pos1);
      var position2 = new Float32Array(pos2);
      var position = calculateCenterArray(position1, position2);
      var color = new Float32Array(col);
      var color2 = color;
      var d = { position: position, position1: position1, position2: position2, color: color, color2: color2 };
      if (rad)
          { d.radius = new Float32Array(rad); }
      if (pick && data.picking) {
          data.picking.array = new Float32Array(pick);
          d.picking = data.picking;
      }
      if (id)
          { d.primitiveId = new Float32Array(id); }
      return d;
  }
  function getFixedLengthWrappedDashData(data, segmentLength) {
      if ( segmentLength === void 0 ) segmentLength = 0.1;

      var direction = calculateDirectionArray(data.position1, data.position2);
      var pos1 = [];
      var pos2 = [];
      var col = [];
      var rad = data.radius ? [] : undefined;
      var pick = data.picking ? [] : undefined;
      var id = data.primitiveId ? [] : undefined;
      var v = new Vector3();
      var n = data.position1.length / 3;
      var remaining = segmentLength;
      var drawing = true;
      var k = 0;
      var k3 = 0;
      var kprev = 0;
      for (var i = 0; i < n; ++i) {
          var i3 = i * 3;
          var x = data.position1[i3];
          var y = data.position1[i3 + 1];
          var z = data.position1[i3 + 2];
          v.set(direction[i3], direction[i3 + 1], direction[i3 + 2]);
          var vl = v.length();
          if (drawing) {
              pos1[k3] = x;
              pos1[k3 + 1] = y;
              pos1[k3 + 2] = z;
          }
          var dist = remaining;
          var inv = 1 / vl;
          while (dist < vl) {
              var a = drawing ? pos2 : pos1;
              a[k3] = x + v.x * dist * inv;
              a[k3 + 1] = y + v.y * dist * inv;
              a[k3 + 2] = z + v.z * dist * inv;
              if (drawing) {
                  k++;
                  k3 = k * 3;
              }
              drawing = !drawing;
              remaining = segmentLength;
              dist += segmentLength;
          }
          if (drawing) {
              pos2[k3] = data.position2[i3];
              pos2[k3 + 1] = data.position2[i3 + 1];
              pos2[k3 + 2] = data.position2[i3 + 2];
              k++;
              k3 = k * 3;
          }
          remaining = dist - vl;
          for (var j = kprev; j < k; j++) {
              if (data.color) {
                  var j3 = j * 3;
                  col[j3] = data.color[i3];
                  col[j3 + 1] = data.color[i3 + 1];
                  col[j3 + 2] = data.color[i3 + 2];
              }
              if (rad)
                  { rad[j] = data.radius[i]; }
              if (pick) {
                  if (data.picking.array) {
                      pick[j] = data.picking.array[i];
                  }
                  else {
                      pick[j] = i;
                  }
              }
              if (id)
                  { id[j] = data.primitiveId[i]; }
          }
          kprev = k;
      }
      if (!drawing && n > 0) {
          var k3$1 = k * 3;
          pos2[k3$1] = data.position2[3 * n - 3];
          pos2[k3$1 + 1] = data.position2[3 * n - 2];
          pos2[k3$1 + 1] = data.position2[3 * n - 1];
      }
      var position1 = new Float32Array(pos1);
      var position2 = new Float32Array(pos2);
      var position = calculateCenterArray(position1, position2);
      var color = new Float32Array(col);
      var color2 = color;
      var d = { position: position, position1: position1, position2: position2, color: color, color2: color2 };
      if (rad)
          { d.radius = new Float32Array(rad); }
      if (pick && data.picking) {
          data.picking.array = new Float32Array(pick);
          d.picking = data.picking;
      }
      if (id)
          { d.primitiveId = new Float32Array(id); }
      return d;
  }

  /**
   * @file Primitive
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function addElement(elm, array) {
      if (elm.toArray !== undefined) {
          elm = elm.toArray();
      }
      else if (elm.x !== undefined) {
          elm = [elm.x, elm.y, elm.z];
      }
      else if (elm.r !== undefined) {
          elm = [elm.r, elm.g, elm.b];
      }
      array.push.apply(array, elm);
  }
  var tmpVec = new Vector3();
  /**
   * Base class for geometry primitives
   * @interface
   */
  var Primitive = function Primitive () {};

  var staticAccessors = { Picker: { configurable: true },Buffer: { configurable: true } };

  staticAccessors.Picker.get = function () { return PickerRegistry.get(this.type); };
  staticAccessors.Buffer.get = function () { return BufferRegistry.get(this.type); };
  Primitive.getShapeKey = function getShapeKey (name) {
      return this.type + name[0].toUpperCase() + name.substr(1);
  };
  Primitive.expandBoundingBox = function expandBoundingBox (box, data) { };
  Primitive.valueToShape = function valueToShape (shape, name, value) {
      var data = shape._primitiveData[this.getShapeKey(name)];
      var type = this.fields[name];
      switch (type) {
          case 'v3':
          case 'c':
              addElement(value, data);
              break;
          default:
              data.push(value);
      }
  };
  Primitive.objectToShape = function objectToShape (shape, data) {
          var this$1$1 = this;

      Object.keys(this.fields).forEach(function (name) {
          this$1$1.valueToShape(shape, name, data[name]);
      });
      this.valueToShape(shape, 'name', data.name);
      this.expandBoundingBox(shape.boundingBox, data);
  };
  Primitive.valueFromShape = function valueFromShape (shape, pid, name) {
      var data = shape._primitiveData[this.getShapeKey(name)];
      var type = this.fields[name];
      switch (type) {
          case 'v3':
              return new Vector3().fromArray(data, 3 * pid);
          case 'c':
              return new Color().fromArray(data, 3 * pid);
          default:
              return data[pid];
      }
  };
  Primitive.objectFromShape = function objectFromShape (shape, pid) {
          var this$1$1 = this;

      var name = this.valueFromShape(shape, pid, 'name');
      if (name === undefined) {
          name = (this.type) + ": " + pid + " (" + (shape.name) + ")";
      }
      var o = { shape: shape, name: name };
      Object.keys(this.fields).forEach(function (name) {
          o[name] = this$1$1.valueFromShape(shape, pid, name);
      });
      return o;
  };
  Primitive.arrayFromShape = function arrayFromShape (shape, name) {
      var data = shape._primitiveData[this.getShapeKey(name)];
      var type = this.fields[name];
      switch (type) {
          case 's':
              return data;
          default:
              return new Float32Array(data);
      }
  };
  Primitive.dataFromShape = function dataFromShape (shape) {
          var this$1$1 = this;

      var data = {};
      if (this.Picker) {
          data.picking = new this.Picker(shape);
      }
      Object.keys(this.fields).forEach(function (name) {
          data[name] = this$1$1.arrayFromShape(shape, name);
      });
      return data;
  };
  Primitive.bufferFromShape = function bufferFromShape (shape, params) {
      return new this.Buffer(this.dataFromShape(shape), params);
  };

  Object.defineProperties( Primitive, staticAccessors );
  Primitive.type = '';
  Primitive.fields = {};
  /**
   * Sphere geometry primitive
   */
  var SpherePrimitive = /*@__PURE__*/(function (Primitive) {
      function SpherePrimitive () {
          Primitive.apply(this, arguments);
      }

      if ( Primitive ) SpherePrimitive.__proto__ = Primitive;
      SpherePrimitive.prototype = Object.create( Primitive && Primitive.prototype );
      SpherePrimitive.prototype.constructor = SpherePrimitive;

      SpherePrimitive.positionFromShape = function positionFromShape (shape, pid) {
          return this.valueFromShape(shape, pid, 'position');
      };
      SpherePrimitive.expandBoundingBox = function expandBoundingBox (box, data) {
          box.expandByPoint(tmpVec.fromArray(data.position));
      };

      return SpherePrimitive;
  }(Primitive));
  SpherePrimitive.type = 'sphere';
  SpherePrimitive.fields = {
      position: 'v3',
      color: 'c',
      radius: 'f'
  };
  /**
   * Box geometry primitive
   */
  var BoxPrimitive = /*@__PURE__*/(function (Primitive) {
      function BoxPrimitive () {
          Primitive.apply(this, arguments);
      }

      if ( Primitive ) BoxPrimitive.__proto__ = Primitive;
      BoxPrimitive.prototype = Object.create( Primitive && Primitive.prototype );
      BoxPrimitive.prototype.constructor = BoxPrimitive;

      BoxPrimitive.positionFromShape = function positionFromShape (shape, pid) {
          return this.valueFromShape(shape, pid, 'position');
      };
      BoxPrimitive.expandBoundingBox = function expandBoundingBox (box, data) {
          box.expandByPoint(tmpVec.fromArray(data.position));
      };

      return BoxPrimitive;
  }(Primitive));
  BoxPrimitive.type = 'box';
  BoxPrimitive.fields = {
      position: 'v3',
      color: 'c',
      size: 'f',
      heightAxis: 'v3',
      depthAxis: 'v3'
  };
  /**
   * Octahedron geometry primitive
   */
  var OctahedronPrimitive = /*@__PURE__*/(function (BoxPrimitive) {
      function OctahedronPrimitive () {
          BoxPrimitive.apply(this, arguments);
      }if ( BoxPrimitive ) OctahedronPrimitive.__proto__ = BoxPrimitive;
      OctahedronPrimitive.prototype = Object.create( BoxPrimitive && BoxPrimitive.prototype );
      OctahedronPrimitive.prototype.constructor = OctahedronPrimitive;

      

      return OctahedronPrimitive;
  }(BoxPrimitive));
  OctahedronPrimitive.type = 'octahedron';
  /**
   * Tetrahedron geometry primitive
   */
  var TetrahedronPrimitive = /*@__PURE__*/(function (BoxPrimitive) {
      function TetrahedronPrimitive () {
          BoxPrimitive.apply(this, arguments);
      }if ( BoxPrimitive ) TetrahedronPrimitive.__proto__ = BoxPrimitive;
      TetrahedronPrimitive.prototype = Object.create( BoxPrimitive && BoxPrimitive.prototype );
      TetrahedronPrimitive.prototype.constructor = TetrahedronPrimitive;

      

      return TetrahedronPrimitive;
  }(BoxPrimitive));
  TetrahedronPrimitive.type = 'tetrahedron';
  /**
   * Cylinder geometry primitive
   */
  var CylinderPrimitive = /*@__PURE__*/(function (Primitive) {
      function CylinderPrimitive () {
          Primitive.apply(this, arguments);
      }

      if ( Primitive ) CylinderPrimitive.__proto__ = Primitive;
      CylinderPrimitive.prototype = Object.create( Primitive && Primitive.prototype );
      CylinderPrimitive.prototype.constructor = CylinderPrimitive;

      CylinderPrimitive.positionFromShape = function positionFromShape (shape, pid) {
          var p1 = this.valueFromShape(shape, pid, 'position1');
          var p2 = this.valueFromShape(shape, pid, 'position2');
          return p1.add(p2).multiplyScalar(0.5);
      };
      CylinderPrimitive.expandBoundingBox = function expandBoundingBox (box, data) {
          box.expandByPoint(tmpVec.fromArray(data.position1));
          box.expandByPoint(tmpVec.fromArray(data.position2));
      };
      CylinderPrimitive.bufferFromShape = function bufferFromShape (shape, params) {
          if ( params === void 0 ) params = {};

          var data = this.dataFromShape(shape);
          if (this.type === 'cylinder' && params.dashedCylinder) {
              data = getFixedLengthDashData(data);
          }
          return new this.Buffer(data, params);
      };

      return CylinderPrimitive;
  }(Primitive));
  CylinderPrimitive.type = 'cylinder';
  CylinderPrimitive.fields = {
      position1: 'v3',
      position2: 'v3',
      color: 'c',
      radius: 'f'
  };
  /**
   * Arrow geometry primitive
   */
  var ArrowPrimitive = /*@__PURE__*/(function (CylinderPrimitive) {
      function ArrowPrimitive () {
          CylinderPrimitive.apply(this, arguments);
      }if ( CylinderPrimitive ) ArrowPrimitive.__proto__ = CylinderPrimitive;
      ArrowPrimitive.prototype = Object.create( CylinderPrimitive && CylinderPrimitive.prototype );
      ArrowPrimitive.prototype.constructor = ArrowPrimitive;

      

      return ArrowPrimitive;
  }(CylinderPrimitive));
  ArrowPrimitive.type = 'arrow';
  /**
   * Cone geometry primitive
   */
  var ConePrimitive = /*@__PURE__*/(function (CylinderPrimitive) {
      function ConePrimitive () {
          CylinderPrimitive.apply(this, arguments);
      }if ( CylinderPrimitive ) ConePrimitive.__proto__ = CylinderPrimitive;
      ConePrimitive.prototype = Object.create( CylinderPrimitive && CylinderPrimitive.prototype );
      ConePrimitive.prototype.constructor = ConePrimitive;

      

      return ConePrimitive;
  }(CylinderPrimitive));
  ConePrimitive.type = 'cone';
  /**
   * Ellipsoid geometry primitive
   */
  var EllipsoidPrimitive = /*@__PURE__*/(function (SpherePrimitive) {
      function EllipsoidPrimitive () {
          SpherePrimitive.apply(this, arguments);
      }if ( SpherePrimitive ) EllipsoidPrimitive.__proto__ = SpherePrimitive;
      EllipsoidPrimitive.prototype = Object.create( SpherePrimitive && SpherePrimitive.prototype );
      EllipsoidPrimitive.prototype.constructor = EllipsoidPrimitive;

      

      return EllipsoidPrimitive;
  }(SpherePrimitive));
  EllipsoidPrimitive.type = 'ellipsoid';
  EllipsoidPrimitive.fields = {
      position: 'v3',
      color: 'c',
      radius: 'f',
      majorAxis: 'v3',
      minorAxis: 'v3'
  };
  /**
   * Torus geometry primitive
   */
  var TorusPrimitive = /*@__PURE__*/(function (EllipsoidPrimitive) {
      function TorusPrimitive () {
          EllipsoidPrimitive.apply(this, arguments);
      }if ( EllipsoidPrimitive ) TorusPrimitive.__proto__ = EllipsoidPrimitive;
      TorusPrimitive.prototype = Object.create( EllipsoidPrimitive && EllipsoidPrimitive.prototype );
      TorusPrimitive.prototype.constructor = TorusPrimitive;

      

      return TorusPrimitive;
  }(EllipsoidPrimitive));
  TorusPrimitive.type = 'torus';
  /**
   * Text geometry primitive
   */
  var TextPrimitive = /*@__PURE__*/(function (Primitive) {
      function TextPrimitive () {
          Primitive.apply(this, arguments);
      }

      if ( Primitive ) TextPrimitive.__proto__ = Primitive;
      TextPrimitive.prototype = Object.create( Primitive && Primitive.prototype );
      TextPrimitive.prototype.constructor = TextPrimitive;

      TextPrimitive.positionFromShape = function positionFromShape (shape, pid) {
          return this.valueFromShape(shape, pid, 'position');
      };
      TextPrimitive.expandBoundingBox = function expandBoundingBox (box, data) {
          box.expandByPoint(tmpVec.fromArray(data.position));
      };

      return TextPrimitive;
  }(Primitive));
  TextPrimitive.type = 'text';
  TextPrimitive.fields = {
      position: 'v3',
      color: 'c',
      size: 'f',
      text: 's'
  };
  /**
   * Point primitive
   */
  var PointPrimitive = /*@__PURE__*/(function (Primitive) {
      function PointPrimitive () {
          Primitive.apply(this, arguments);
      }

      if ( Primitive ) PointPrimitive.__proto__ = Primitive;
      PointPrimitive.prototype = Object.create( Primitive && Primitive.prototype );
      PointPrimitive.prototype.constructor = PointPrimitive;

      PointPrimitive.positionFromShape = function positionFromShape (shape, pid) {
          return this.valueFromShape(shape, pid, 'position');
      };
      PointPrimitive.expandBoundingBox = function expandBoundingBox (box, data) {
          box.expandByPoint(tmpVec.fromArray(data.position));
      };

      return PointPrimitive;
  }(Primitive));
  PointPrimitive.type = 'point';
  PointPrimitive.fields = {
      position: 'v3',
      color: 'c',
  };
  /**
   * Wideline geometry primitive
   */
  var WidelinePrimitive = /*@__PURE__*/(function (Primitive) {
      function WidelinePrimitive () {
          Primitive.apply(this, arguments);
      }

      if ( Primitive ) WidelinePrimitive.__proto__ = Primitive;
      WidelinePrimitive.prototype = Object.create( Primitive && Primitive.prototype );
      WidelinePrimitive.prototype.constructor = WidelinePrimitive;

      WidelinePrimitive.positionFromShape = function positionFromShape (shape, pid) {
          var p1 = this.valueFromShape(shape, pid, 'position1');
          var p2 = this.valueFromShape(shape, pid, 'position2');
          return p1.add(p2).multiplyScalar(0.5);
      };
      WidelinePrimitive.expandBoundingBox = function expandBoundingBox (box, data) {
          box.expandByPoint(tmpVec.fromArray(data.position1));
          box.expandByPoint(tmpVec.fromArray(data.position2));
      };

      return WidelinePrimitive;
  }(Primitive));
  WidelinePrimitive.type = 'wideline';
  WidelinePrimitive.fields = {
      position1: 'v3',
      position2: 'v3',
      color: 'c'
  };

  /**
   * @file Spatial Hash
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function createBoundingBox(positions) {
      var x = positions.x;
      var y = positions.y;
      var z = positions.z;
      var boundingBox = new Box3();
      var count = x.length;
      var min = boundingBox.min;
      var max = boundingBox.max;
      for (var i = 0; i < count; i++) {
          min.x = Math.min(x[i], min.x);
          min.y = Math.min(y[i], min.y);
          min.z = Math.min(z[i], min.z);
          max.x = Math.max(x[i], max.x);
          max.y = Math.max(y[i], max.y);
          max.z = Math.max(z[i], max.z);
      }
      return boundingBox;
  }
  var SpatialHash = function SpatialHash(positions, boundingBox) {
      this.exp = 3;
      var bb = boundingBox || createBoundingBox(positions);
      this.minX = bb.min.x;
      this.minY = bb.min.y;
      this.minZ = bb.min.z;
      this.boundX = ((bb.max.x - this.minX) >> this.exp) + 1;
      this.boundY = ((bb.max.y - this.minY) >> this.exp) + 1;
      this.boundZ = ((bb.max.z - this.minZ) >> this.exp) + 1;
      var n = this.boundX * this.boundY * this.boundZ;
      var an = (positions.count !== undefined) ? positions.count : positions.x.length;
      var xArray = positions.x;
      var yArray = positions.y;
      var zArray = positions.z;
      var count = 0;
      var grid = new Uint32Array(n);
      var bucketIndex = new Int32Array(an);
      for (var i = 0; i < an; ++i) {
          var x = (xArray[i] - this.minX) >> this.exp;
          var y = (yArray[i] - this.minY) >> this.exp;
          var z = (zArray[i] - this.minZ) >> this.exp;
          var idx = (((x * this.boundY) + y) * this.boundZ) + z;
          if ((grid[idx] += 1) === 1) {
              count += 1;
          }
          bucketIndex[i] = idx;
      }
      var bucketCount = new Uint16Array(count);
      for (var i$1 = 0, j = 0; i$1 < n; ++i$1) {
          var c = grid[i$1];
          if (c > 0) {
              grid[i$1] = j + 1;
              bucketCount[j] = c;
              j += 1;
          }
      }
      var bucketOffset = new Uint32Array(count);
      for (var i$2 = 1; i$2 < count; ++i$2) {
          bucketOffset[i$2] += bucketOffset[i$2 - 1] + bucketCount[i$2 - 1];
      }
      var bucketFill = new Uint16Array(count);
      var bucketArray = new Int32Array(an);
      for (var i$3 = 0; i$3 < an; ++i$3) {
          var bucketIdx = grid[bucketIndex[i$3]];
          if (bucketIdx > 0) {
              var k = bucketIdx - 1;
              bucketArray[bucketOffset[k] + bucketFill[k]] = i$3;
              bucketFill[k] += 1;
          }
      }
      this.grid = grid;
      this.bucketCount = bucketCount;
      this.bucketOffset = bucketOffset;
      this.bucketArray = bucketArray;
      this.xArray = xArray;
      this.yArray = yArray;
      this.zArray = zArray;
  };
  SpatialHash.prototype.within = function within (x, y, z, r) {
      var result = [];
      this.eachWithin(x, y, z, r, function (atomIndex) { return result.push(atomIndex); });
      return result;
  };
  SpatialHash.prototype.eachWithin = function eachWithin (x, y, z, r, callback) {
      var rSq = r * r;
      var loX = Math.max(0, (x - r - this.minX) >> this.exp);
      var loY = Math.max(0, (y - r - this.minY) >> this.exp);
      var loZ = Math.max(0, (z - r - this.minZ) >> this.exp);
      var hiX = Math.min(this.boundX, ((x + r - this.minX) >> this.exp) + 1);
      var hiY = Math.min(this.boundY, ((y + r - this.minY) >> this.exp) + 1);
      var hiZ = Math.min(this.boundZ, ((z + r - this.minZ) >> this.exp) + 1);
      for (var ix = loX; ix < hiX; ++ix) {
          for (var iy = loY; iy < hiY; ++iy) {
              for (var iz = loZ; iz < hiZ; ++iz) {
                  var idx = (((ix * this.boundY) + iy) * this.boundZ) + iz;
                  var bucketIdx = this.grid[idx];
                  if (bucketIdx > 0) {
                      var k = bucketIdx - 1;
                      var offset = this.bucketOffset[k];
                      var count = this.bucketCount[k];
                      var end = offset + count;
                      for (var i = offset; i < end; ++i) {
                          var atomIndex = this.bucketArray[i];
                          var dx = this.xArray[atomIndex] - x;
                          var dy = this.yArray[atomIndex] - y;
                          var dz = this.zArray[atomIndex] - z;
                          var dSq = dx * dx + dy * dy + dz * dz;
                          if (dSq <= rSq)
                              { callback(atomIndex, dSq); }
                      }
                  }
              }
          }
      }
  };

  /**
   * @file Store
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Store base class
   * @interface
   */
  var Store = function Store(size) {

      this._fields = this._defaultFields;
      this._init(0);
  };
  /**
   * Initialize the store
   * @param  {Integer} size - size to initialize
   * @return {undefined}
   */
  Store.prototype._init = function _init (size) {
      this.length = size;
      this.count = 0;
      for (var i = 0, il = this._fields.length; i < il; ++i) {
          var ref = this._fields[i];
              var name = ref[0];
              var size$1 = ref[1];
              var type = ref[2];
          this._initField(name, size$1, type);
      }
  };
  /**
   * Initialize a field
   * @param  {String} name - field name
   * @param  {Integer} size - element size
   * @param  {String} type - data type, one of int8, int16, int32,
   *                     uint8, uint16, uint32, float32
   * @return {undefined}
   */
  Store.prototype._initField = function _initField (name, size, type) {
      this[name] = getTypedArray(type, this.length * size);
  };
  /**
   * Add a field
   * @param  {String} name - field name
   * @param  {Integer} size - element size
   * @param  {String} type - data type, one of int8, int16, int32,
   *                     uint8, uint16, uint32, float32
   * @return {undefined}
   */
  Store.prototype.addField = function addField (name, size, type) {
      this._fields.push([name, size, type]);
      this._initField(name, size, type);
  };
  /**
   * Resize the store to the new size
   * @param  {Integer} size - new size
   * @return {undefined}
   */
  Store.prototype.resize = function resize (size) {
      // Log.time( "Store.resize" );
      this.length = Math.round(size || 0);
      this.count = Math.min(this.count, this.length);
      for (var i = 0, il = this._fields.length; i < il; ++i) {
          var name = this._fields[i][0];
          var itemSize = this._fields[i][1];
          var arraySize = this.length * itemSize;
          var tmpArray = new this[name].constructor(arraySize);
          if (this[name].length > arraySize) {
              tmpArray.set(this[name].subarray(0, arraySize));
          }
          else {
              tmpArray.set(this[name]);
          }
          this[name] = tmpArray;
      }
      // Log.timeEnd( "Store.resize" );
  };
  /**
   * Resize the store to 1.5 times its current size if full
   * @return {undefined}
   */
  Store.prototype.growIfFull = function growIfFull () {
      if (this.count >= this.length) {
          var size = Math.round(this.length * 1.5);
          this.resize(Math.max(256, size));
      }
  };
  /**
   * Copy data from one store to another
   * @param  {Store} other - store to copy from
   * @param  {Integer} thisOffset - offset to start copying to
   * @param  {Integer} otherOffset - offset to start copying from
   * @param  {Integer} length - number of entries to copy
   * @return {undefined}
   */
  Store.prototype.copyFrom = function copyFrom (other, thisOffset, otherOffset, length) {
      for (var i = 0, il = this._fields.length; i < il; ++i) {
          var name = this._fields[i][0];
          var itemSize = this._fields[i][1];
          var thisField = this[name];
          var otherField = other[name];
          for (var j = 0; j < length; ++j) {
              var thisIndex = itemSize * (thisOffset + j);
              var otherIndex = itemSize * (otherOffset + j);
              for (var k = 0; k < itemSize; ++k) {
                  thisField[thisIndex + k] = otherField[otherIndex + k];
              }
          }
      }
  };
  /**
   * Copy data within this store
   * @param  {Integer} thisOffset - offset to start copying to
   * @param  {Integer} otherOffset - offset to start copying from
   * @param  {Integer} length - number of entries to copy
   * @return {undefined}
   */
  Store.prototype.copyWithin = function copyWithin (offsetTarget, offsetSource, length) {
      for (var i = 0, il = this._fields.length; i < il; ++i) {
          var name = this._fields[i][0];
          var itemSize = this._fields[i][1];
          var thisField = this[name];
          for (var j = 0; j < length; ++j) {
              var targetIndex = itemSize * (offsetTarget + j);
              var sourceIndex = itemSize * (offsetSource + j);
              for (var k = 0; k < itemSize; ++k) {
                  thisField[targetIndex + k] = thisField[sourceIndex + k];
              }
          }
      }
  };
  /**
   * Sort entries in the store given the compare function
   * @param  {[type]} compareFunction - function to sort by
   * @return {undefined}
   */
  Store.prototype.sort = function sort (compareFunction) {
      Log.time('Store.sort');
      var thisStore = this;
      var tmpStore = new this.constructor(1);
      function swap(index1, index2) {
          if (index1 === index2)
              { return; }
          tmpStore.copyFrom(thisStore, 0, index1, 1);
          thisStore.copyWithin(index1, index2, 1);
          thisStore.copyFrom(tmpStore, index2, 0, 1);
      }
      function quicksort(left, right) {
          if (left < right) {
              var pivot = Math.floor((left + right) / 2);
              var leftNew = left;
              var rightNew = right;
              do {
                  while (compareFunction(leftNew, pivot) < 0) {
                      leftNew += 1;
                  }
                  while (compareFunction(rightNew, pivot) > 0) {
                      rightNew -= 1;
                  }
                  if (leftNew <= rightNew) {
                      if (leftNew === pivot) {
                          pivot = rightNew;
                      }
                      else if (rightNew === pivot) {
                          pivot = leftNew;
                      }
                      swap(leftNew, rightNew);
                      leftNew += 1;
                      rightNew -= 1;
                  }
              } while (leftNew <= rightNew);
              quicksort(left, rightNew);
              quicksort(leftNew, right);
          }
      }
      quicksort(0, this.count - 1);
      Log.timeEnd('Store.sort');
  };
  /**
   * Empty the store
   * @return {undefined}
   */
  Store.prototype.clear = function clear () {
      this.count = 0;
  };
  /**
   * Dispose of the store entries and fields
   * @return {undefined}
   */
  Store.prototype.dispose = function dispose () {
      delete this.length;
      delete this.count;
      for (var i = 0, il = this._fields.length; i < il; ++i) {
          var name = this._fields[i][0];
          delete this[name];
      }
  };

  /**
   * @file Contact Store
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Bond store
   */
  var ContactStore = /*@__PURE__*/(function (Store) {
      function ContactStore () {
          Store.apply(this, arguments);
      }

      if ( Store ) ContactStore.__proto__ = Store;
      ContactStore.prototype = Object.create( Store && Store.prototype );
      ContactStore.prototype.constructor = ContactStore;

      var prototypeAccessors = { _defaultFields: { configurable: true } };

      prototypeAccessors._defaultFields.get = function () {
          return [
              ['index1', 1, 'int32'],
              ['index2', 1, 'int32'],
              ['type', 1, 'int8']
          ];
      };
      ContactStore.prototype.addContact = function addContact (index1, index2, type) {
          this.growIfFull();
          var i = this.count;
          if (index1 < index2) {
              this.index1[i] = index1;
              this.index2[i] = index2;
          }
          else {
              this.index2[i] = index1;
              this.index1[i] = index2;
          }
          if (type)
              { this.type[i] = type; }
          this.count += 1;
      };

      Object.defineProperties( ContactStore.prototype, prototypeAccessors );

      return ContactStore;
  }(Store));

  /**
   * @file Bit array
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @author Paul Pillot <paulpillot@gmail.com>
   * @private
   */
  /**
   * Compute the Hamming weight of a 32-bit unsigned integer
   * @param  {Integer} v - a 32-bit unsigned integer
   * @return {Integer} the Hamming weight
   */
  function hammingWeight(v) {
      // works with signed or unsigned shifts
      v -= ((v >>> 1) & 0x55555555);
      v = (v & 0x33333333) + ((v >>> 2) & 0x33333333);
      return ((v + (v >>> 4) & 0xF0F0F0F) * 0x1010101) >>> 24;
  }
  /**
   * Bit array
   *
   * Based heavily on https://github.com/lemire/FastBitSet.js
   * which is licensed under the Apache License, Version 2.0.
   */
  var BitArray = function BitArray(length, setAll) {
      this.length = length;
      this._words = new Uint32Array((length + 32) >>> 5);
      if (setAll === true) {
          this.setAll();
      }
  };
  /**
   * Get value at index
   * @param  {Integer} index - the index
   * @return {Boolean} value
   */
  BitArray.prototype.get = function get (index) {
      return (this._words[index >>> 5] & (1 << index)) !== 0;
  };
  /**
   * Set value at index to true
   * @param  {Integer} index - the index
   * @return {undefined}
   */
  BitArray.prototype.set = function set (index) {
      this._words[index >>> 5] |= 1 << index;
  };
  /**
   * Set value at index to false
   * @param  {Integer} index - the index
   * @return {undefined}
   */
  BitArray.prototype.clear = function clear (index) {
      this._words[index >>> 5] &= ~(1 << index);
  };
  /**
   * Flip value at index
   * @param  {Integer} index - the index
   * @return {undefined}
   */
  BitArray.prototype.flip = function flip (index) {
      this._words[index >>> 5] ^= 1 << index;
  };
  BitArray.prototype._assignRange = function _assignRange (start, end, value) {
      if (end < start)
          { return; }
      var words = this._words;
      var wordValue = value === true ? 0xFFFFFFFF : 0;
      var wordStart = start >>> 5;
      var wordEnd = end >>> 5;
      // set complete words when applicable
      for (var k = wordStart + 1; k < wordEnd; ++k) {
          words[k] = wordValue;
      }
      // set parts of the range not spanning complete words
      var startWord = wordStart << 5;
      var endWord = wordEnd << 5;
      if (value === true) {
          if (end - start < 32) {
              for (var i = start, n = end + 1; i < n; ++i) {
                  words[i >>> 5] |= 1 << i;
              }
          }
          else {
              for (var i$1 = start, n$1 = startWord + 32; i$1 < n$1; ++i$1) {
                  words[i$1 >>> 5] |= 1 << i$1;
              }
              for (var i$2 = endWord, n$2 = end + 1; i$2 < n$2; ++i$2) {
                  words[i$2 >>> 5] |= 1 << i$2;
              }
          }
      }
      else {
          if (end - start < 32) {
              for (var i$3 = start, n$3 = end + 1; i$3 < n$3; ++i$3) {
                  words[i$3 >>> 5] &= ~(1 << i$3);
              }
          }
          else {
              for (var i$4 = start, n$4 = startWord + 32; i$4 < n$4; ++i$4) {
                  words[i$4 >>> 5] &= ~(1 << i$4);
              }
              for (var i$5 = endWord, n$5 = end + 1; i$5 < n$5; ++i$5) {
                  words[i$5 >>> 5] &= ~(1 << i$5);
              }
          }
      }
      return this;
  };
  /**
   * Set bits of the given range
   * @param {Integer} start - start index
   * @param {Integer} end - end index
   * @return {BitArray} this object
   */
  BitArray.prototype.setRange = function setRange (start, end) {
      return this._assignRange(start, end, true);
  };
  /**
   * Clear bits of the given range
   * @param {Integer} start - start index
   * @param {Integer} end - end index
   * @return {BitArray} this object
   */
  BitArray.prototype.clearRange = function clearRange (start, end) {
      return this._assignRange(start, end, false);
  };
  /**
   * Set bits at all given indices
   * @param {...Integer} arguments - indices
   * @return {Boolean} this object
   */
  BitArray.prototype.setBits = function setBits () {
          var indices = [], len = arguments.length;
          while ( len-- ) indices[ len ] = arguments[ len ];

      var words = this._words;
      var n = indices.length;
      for (var i = 0; i < n; ++i) {
          var index = indices[i];
          words[index >>> 5] |= 1 << index;
      }
      return this;
  };
  /**
   * Clear bits at all given indices
   * @param {...Integer} arguments - indices
   * @return {Boolean} this object
   */
  BitArray.prototype.clearBits = function clearBits () {
          var indices = [], len = arguments.length;
          while ( len-- ) indices[ len ] = arguments[ len ];

      var words = this._words;
      var n = indices.length;
      for (var i = 0; i < n; ++i) {
          var index = indices[i];
          words[index >>> 5] &= ~(1 << index);
      }
      return this;
  };
  /**
   * Set all bits of the array
   * @return {BitArray} this object
   */
  BitArray.prototype.setAll = function setAll () {
      return this._assignRange(0, this.length - 1, true);
  };
  /**
   * Clear all bits of the array
   * @return {BitArray} this object
   */
  BitArray.prototype.clearAll = function clearAll () {
      return this._assignRange(0, this.length - 1, false);
  };
  /**
   * Flip all the values in the array
   * @return {BitArray} this object
   */
  BitArray.prototype.flipAll = function flipAll () {
      var count = this._words.length;
      var words = this._words;
      var bs = 32 - this.length % 32;
      for (var k = 0; k < count - 1; ++k) {
          words[k] = ~words[k];
      }
      words[count - 1] = (~(words[count - 1] << bs)) >>> bs;
      return this;
  };
  BitArray.prototype._isRangeValue = function _isRangeValue (start, end, value) {
      if (end < start)
          { return; }
      var words = this._words;
      var wordValue = value === true ? 0xFFFFFFFF : 0;
      var wordStart = start >>> 5;
      var wordEnd = end >>> 5;
      // set complete words when applicable
      for (var k = wordStart + 1; k < wordEnd; ++k) {
          if (words[k] !== wordValue)
              { return false; }
      }
      // set parts of the range not spanning complete words
      if (end - start < 32) {
          for (var i = start, n = end + 1; i < n; ++i) {
              if (!!(words[i >>> 5] & (1 << i)) !== value)
                  { return false; }
          }
      }
      else {
          var startWord = wordStart << 5;
          var endWord = wordEnd << 5;
          for (var i$1 = start, n$1 = startWord + 32; i$1 < n$1; ++i$1) {
              if (!!(words[i$1 >>> 5] & (1 << i$1)) !== value)
                  { return false; }
          }
          for (var i$2 = endWord, n$2 = end + 1; i$2 < n$2; ++i$2) {
              if (!!(words[i$2 >>> 5] & (1 << i$2)) !== value)
                  { return false; }
          }
      }
      return true;
  };
  /**
   * Test if bits in given range are set
   * @param {Integer} start - start index
   * @param {Integer} end - end index
   * @return {BitArray} this object
   */
  BitArray.prototype.isRangeSet = function isRangeSet (start, end) {
      return this._isRangeValue(start, end, true);
  };
  /**
   * Test if bits in given range are clear
   * @param {Integer} start - start index
   * @param {Integer} end - end index
   * @return {BitArray} this object
   */
  BitArray.prototype.isRangeClear = function isRangeClear (start, end) {
      return this._isRangeValue(start, end, false);
  };
  /**
   * Test if all bits in the array are set
   * @return {Boolean} test result
   */
  BitArray.prototype.isAllSet = function isAllSet () {
      return this._isRangeValue(0, this.length - 1, true);
  };
  /**
   * Test if all bits in the array are clear
   * @return {Boolean} test result
   */
  BitArray.prototype.isAllClear = function isAllClear () {
      return this._isRangeValue(0, this.length - 1, false);
  };
  /**
   * Test if bits at all given indices are set
   * @param {...Integer} arguments - indices
   * @return {Boolean} test result
   */
  BitArray.prototype.isSet = function isSet () {
          var indices = [], len = arguments.length;
          while ( len-- ) indices[ len ] = arguments[ len ];

      var words = this._words;
      var n = indices.length;
      for (var i = 0; i < n; ++i) {
          var index = indices[i];
          if ((words[index >>> 5] & (1 << index)) === 0)
              { return false; }
      }
      return true;
  };
  /**
   * Test if bits at all given indices are clear
   * @param {...Integer} arguments - indices
   * @return {Boolean} test result
   */
  BitArray.prototype.isClear = function isClear () {
          var indices = [], len = arguments.length;
          while ( len-- ) indices[ len ] = arguments[ len ];

      var words = this._words;
      var n = indices.length;
      for (var i = 0; i < n; ++i) {
          var index = indices[i];
          if ((words[index >>> 5] & (1 << index)) !== 0)
              { return false; }
      }
      return true;
  };
  /**
   * Test if two BitArrays are identical in all their values
   * @param {BitArray} otherBitarray - the other BitArray
   * @return {Boolean} test result
   */
  BitArray.prototype.isEqualTo = function isEqualTo (otherBitarray) {
      var words1 = this._words;
      var words2 = otherBitarray._words;
      var count = Math.min(words1.length, words2.length);
      for (var k = 0; k < count; ++k) {
          if (words1[k] !== words2[k]) {
              return false;
          }
      }
      return true;
  };
  /**
   * How many set bits?
   * @return {Integer} number of set bits
   */
  BitArray.prototype.getSize = function getSize () {
      var count = this._words.length;
      var words = this._words;
      var size = 0;
      for (var i = 0; i < count; ++i) {
          size += hammingWeight(words[i]);
      }
      return size;
  };
  /**
   * Calculate difference betwen this and another bit array.
   * Store result in this object.
   * @param  {BitArray} otherBitarray - the other bit array
   * @return {BitArray} this object
   */
  BitArray.prototype.difference = function difference (otherBitarray) {
      var words1 = this._words;
      var words2 = otherBitarray._words;
      var count = Math.min(words1.length, words2.length);
      for (var k = 0; k < count; ++k) {
          words1[k] = words1[k] & ~words2[k];
      }
      for (var k$1 = words1.length; k$1 < count; ++k$1) {
          words1[k$1] = 0;
      }
      return this;
  };
  /**
   * Calculate union betwen this and another bit array.
   * Store result in this object.
   * @param  {BitArray} otherBitarray - the other bit array
   * @return {BitArray} this object
   */
  BitArray.prototype.union = function union (otherBitarray) {
      var words1 = this._words;
      var words2 = otherBitarray._words;
      var count = Math.min(words1.length, words2.length);
      for (var k = 0; k < count; ++k) {
          words1[k] |= words2[k];
      }
      for (var k$1 = words1.length; k$1 < count; ++k$1) {
          words1[k$1] = 0;
      }
      return this;
  };
  /**
   * Calculate intersection betwen this and another bit array.
   * Store result in this object.
   * @param  {BitArray} otherBitarray - the other bit array
   * @return {BitArray} this object
   */
  BitArray.prototype.intersection = function intersection (otherBitarray) {
      var words1 = this._words;
      var words2 = otherBitarray._words;
      var count = Math.min(words1.length, words2.length);
      for (var k = 0; k < count; ++k) {
          words1[k] &= words2[k];
      }
      for (var k$1 = words1.length; k$1 < count; ++k$1) {
          words1[k$1] = 0;
      }
      return this;
  };
  /**
   * Test if there is any intersection betwen this and another bit array.
   * @param  {BitArray} otherBitarray - the other bit array
   * @return {Boolean} test result
   */
  BitArray.prototype.intersects = function intersects (otherBitarray) {
      var words1 = this._words;
      var words2 = otherBitarray._words;
      var count = Math.min(words1.length, words2.length);
      for (var k = 0; k < count; ++k) {
          if ((words1[k] & words2[k]) !== 0) {
              return true;
          }
      }
      return false;
  };
  /**
   * Calculate the number of bits in common betwen this and another bit array.
   * @param  {BitArray} otherBitarray - the other bit array
   * @return {Integer} size
   */
  BitArray.prototype.getIntersectionSize = function getIntersectionSize (otherBitarray) {
      var words1 = this._words;
      var words2 = otherBitarray._words;
      var count = Math.min(words1.length, words2.length);
      var size = 0;
      for (var k = 0; k < count; ++k) {
          size += hammingWeight(words1[k] & words2[k]);
      }
      return size;
  };
  /**
   * Calculate intersection betwen this and another bit array.
   * Store result in a new bit array.
   * @param  {BitArray} otherBitarray - the other bit array
   * @return {BitArray} the new bit array
   */
  BitArray.prototype.makeIntersection = function makeIntersection (otherBitarray) {
      var words1 = this._words;
      var words2 = otherBitarray._words;
      var count = Math.min(words1.length, words2.length);
      var wordsA = new Uint32Array(count);
      var intersection = Object.create(BitArray.prototype);
      intersection._words = wordsA;
      intersection.length = Math.min(this.length, otherBitarray.length);
      for (var k = 0; k < count; ++k) {
          wordsA[k] = words1[k] & words2[k];
      }
      return intersection;
  };
  /**
   * Iterate over all set bits in the array
   * @param  {function( index: Integer, i: Integer )} callback - the callback
   * @return {undefined}
   */
  BitArray.prototype.forEach = function forEach (callback) {
      var count = this._words.length;
      var words = this._words;
      var i = 0;
      for (var k = 0; k < count; ++k) {
          var w = words[k];
          while (w !== 0) {
              var t = w & -w;
              var index = (k << 5) + hammingWeight(t - 1);
              callback(index, i);
              w ^= t;
              ++i;
          }
      }
  };
  /**
   * Get an array with the set bits
   * @return {Array} bit indices
   */
  BitArray.prototype.toArray = function toArray () {
      var words = this._words;
      var answer = new Array(this.getSize());
      var count = this._words.length;
      var pos = 0;
      for (var k = 0; k < count; ++k) {
          var w = words[k];
          while (w !== 0) {
              var t = w & -w;
              answer[pos++] = (k << 5) + hammingWeight(t - 1);
              w ^= t;
          }
      }
      return answer;
  };
  BitArray.prototype.toString = function toString () {
      return '{' + this.toArray().join(',') + '}';
  };
  BitArray.prototype.toSeleString = function toSeleString () {
      var sele = this.toArray().join(',');
      return sele ? '@' + sele : 'NONE';
  };
  /**
   * Clone this object
   * @return {BitArray} the cloned object
   */
  BitArray.prototype.clone = function clone () {
      var clone = Object.create(BitArray.prototype);
      clone.length = this.length;
      clone._words = new Uint32Array(this._words);
      return clone;
  };

  /**
   * @file Adjacency List
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function createAdjacencyList(edges) {
      var edgeCount = edges.edgeCount;
      var nodeCount = edges.nodeCount;
      var nodeArray1 = edges.nodeArray1;
      var nodeArray2 = edges.nodeArray2;
      var countArray = new Uint8Array(nodeCount);
      var offsetArray = new Int32Array(nodeCount);
      // count edges per node
      for (var i = 0; i < edgeCount; ++i) {
          countArray[nodeArray1[i]] += 1;
          countArray[nodeArray2[i]] += 1;
      }
      // get offsets to node edges
      for (var i$1 = 1; i$1 < nodeCount; ++i$1) {
          offsetArray[i$1] += offsetArray[i$1 - 1] + countArray[i$1 - 1];
      }
      // prepare index array
      var bondCount2 = edgeCount * 2;
      var indexArray = new Int32Array(bondCount2);
      for (var j = 0; j < bondCount2; ++j) {
          indexArray[j] = -1;
      }
      // build index array
      for (var i$2 = 0; i$2 < edgeCount; ++i$2) {
          var idx1 = nodeArray1[i$2];
          var idx2 = nodeArray2[i$2];
          var j1 = offsetArray[idx1];
          while (indexArray[j1] !== -1 && j1 < bondCount2) {
              j1 += 1;
          }
          indexArray[j1] = i$2;
          var j2 = offsetArray[idx2];
          while (indexArray[j2] !== -1 && j2 < bondCount2) {
              j2 += 1;
          }
          indexArray[j2] = i$2;
      }
      return { countArray: countArray, offsetArray: offsetArray, indexArray: indexArray };
  }

  /**
   * @file Features
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   */
  function createFeatures() {
      return {
          types: [],
          groups: [],
          centers: { x: [], y: [], z: [] },
          atomSets: []
      };
  }
  function createFeatureState(type /* Unknown */, group /* Unknown */) {
      if ( type === void 0 ) type = 0;
      if ( group === void 0 ) group = 0;

      return { type: type, group: group, x: 0, y: 0, z: 0, atomSet: [] };
  }
  function addAtom(state, atom) {
      state.x += atom.x;
      state.y += atom.y;
      state.z += atom.z;
      state.atomSet.push(atom.index);
  }
  function addFeature(features, state) {
      var n = state.atomSet.length;
      if (n > 0) {
          var types = features.types;
          var groups = features.groups;
          var centers = features.centers;
          var atomSets = features.atomSets;
          types.push(state.type);
          groups.push(state.group);
          centers.x.push(state.x / n);
          centers.y.push(state.y / n);
          centers.z.push(state.z / n);
          atomSets.push(state.atomSet);
      }
  }

  /**
   * @file Structure Constants
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  // entity types
  var UnknownEntity = 0;
  var PolymerEntity = 1;
  var NonPolymerEntity = 2;
  var MacrolideEntity = 3;
  var WaterEntity = 4;
  // molecule types
  var UnknownType = 0;
  var WaterType = 1;
  var IonType = 2;
  var ProteinType = 3;
  var RnaType = 4;
  var DnaType = 5;
  var SaccharideType = 6;
  // backbone types
  var UnknownBackboneType = 0;
  var ProteinBackboneType = 1;
  var RnaBackboneType = 2;
  var DnaBackboneType = 3;
  var CgProteinBackboneType = 4;
  var CgRnaBackboneType = 5;
  var CgDnaBackboneType = 6;
  // chemical component types
  var ChemCompProtein = [
      'D-BETA-PEPTIDE, C-GAMMA LINKING', 'D-GAMMA-PEPTIDE, C-DELTA LINKING',
      'D-PEPTIDE COOH CARBOXY TERMINUS', 'D-PEPTIDE NH3 AMINO TERMINUS', 'D-PEPTIDE LINKING',
      'L-BETA-PEPTIDE, C-GAMMA LINKING', 'L-GAMMA-PEPTIDE, C-DELTA LINKING',
      'L-PEPTIDE COOH CARBOXY TERMINUS', 'L-PEPTIDE NH3 AMINO TERMINUS', 'L-PEPTIDE LINKING',
      'PEPTIDE LINKING', 'PEPTIDE-LIKE'
  ];
  var ChemCompRna = [
      'RNA OH 3 PRIME TERMINUS', 'RNA OH 5 PRIME TERMINUS', 'RNA LINKING'
  ];
  var ChemCompDna = [
      'DNA OH 3 PRIME TERMINUS', 'DNA OH 5 PRIME TERMINUS', 'DNA LINKING',
      'L-DNA LINKING', 'L-RNA LINKING'
  ];
  var ChemCompSaccharide = [
      'D-SACCHARIDE', 'D-SACCHARIDE 1,4 AND 1,4 LINKING', 'D-SACCHARIDE 1,4 AND 1,6 LINKING',
      'L-SACCHARIDE', 'L-SACCHARIDE 1,4 AND 1,4 LINKING', 'L-SACCHARIDE 1,4 AND 1,6 LINKING',
      'SACCHARIDE'
  ];
  var ChemCompOther = [
      'OTHER'
  ];
  var ChemCompNonPolymer = [
      'NON-POLYMER'
  ];
  var ChemCompHetero = ChemCompNonPolymer.concat(ChemCompOther, ChemCompSaccharide);
  // secondary structure
  var SecStrucHelix = ['h', 'g', 'i'];
  var SecStrucSheet = ['e', 'b'];
  var SecStrucTurn = ['s', 't', 'l', ''];
  var AtomicNumbers = {
      'H': 1, 'D': 1, 'T': 1, 'HE': 2, 'LI': 3, 'BE': 4, 'B': 5, 'C': 6, 'N': 7, 'O': 8, 'F': 9, 'NE': 10, 'NA': 11, 'MG': 12, 'AL': 13, 'SI': 14, 'P': 15, 'S': 16, 'CL': 17, 'AR': 18, 'K': 19, 'CA': 20, 'SC': 21, 'TI': 22, 'V': 23, 'CR': 24, 'MN': 25, 'FE': 26, 'CO': 27, 'NI': 28, 'CU': 29, 'ZN': 30, 'GA': 31, 'GE': 32, 'AS': 33, 'SE': 34, 'BR': 35, 'KR': 36, 'RB': 37, 'SR': 38, 'Y': 39, 'ZR': 40, 'NB': 41, 'MO': 42, 'TC': 43, 'RU': 44, 'RH': 45, 'PD': 46, 'AG': 47, 'CD': 48, 'IN': 49, 'SN': 50, 'SB': 51, 'TE': 52, 'I': 53, 'XE': 54, 'CS': 55, 'BA': 56, 'LA': 57, 'CE': 58, 'PR': 59, 'ND': 60, 'PM': 61, 'SM': 62, 'EU': 63, 'GD': 64, 'TB': 65, 'DY': 66, 'HO': 67, 'ER': 68, 'TM': 69, 'YB': 70, 'LU': 71, 'HF': 72, 'TA': 73, 'W': 74, 'RE': 75, 'OS': 76, 'IR': 77, 'PT': 78, 'AU': 79, 'HG': 80, 'TL': 81, 'PB': 82, 'BI': 83, 'PO': 84, 'AT': 85, 'RN': 86, 'FR': 87, 'RA': 88, 'AC': 89, 'TH': 90, 'PA': 91, 'U': 92, 'NP': 93, 'PU': 94, 'AM': 95, 'CM': 96, 'BK': 97, 'CF': 98, 'ES': 99, 'FM': 100, 'MD': 101, 'NO': 102, 'LR': 103, 'RF': 104, 'DB': 105, 'SG': 106, 'BH': 107, 'HS': 108, 'MT': 109, 'DS': 110, 'RG': 111, 'CN': 112, 'NH': 113, 'FL': 114, 'MC': 115, 'LV': 116, 'TS': 117, 'OG': 118
  };
  var DefaultAtomicNumber = 0;
  // http://dx.doi.org/10.1021/jp8111556 (or 2.0)
  var VdwRadii = {
      1: 1.1, 2: 1.4, 3: 1.81, 4: 1.53, 5: 1.92, 6: 1.7, 7: 1.55, 8: 1.52, 9: 1.47, 10: 1.54, 11: 2.27, 12: 1.73, 13: 1.84, 14: 2.1, 15: 1.8, 16: 1.8, 17: 1.75, 18: 1.88, 19: 2.75, 20: 2.31, 21: 2.3, 22: 2.15, 23: 2.05, 24: 2.05, 25: 2.05, 26: 2.05, 27: 2.0, 28: 2.0, 29: 2.0, 30: 2.1, 31: 1.87, 32: 2.11, 33: 1.85, 34: 1.9, 35: 1.83, 36: 2.02, 37: 3.03, 38: 2.49, 39: 2.4, 40: 2.3, 41: 2.15, 42: 2.1, 43: 2.05, 44: 2.05, 45: 2.0, 46: 2.05, 47: 2.1, 48: 2.2, 49: 2.2, 50: 1.93, 51: 2.17, 52: 2.06, 53: 1.98, 54: 2.16, 55: 3.43, 56: 2.68, 57: 2.5, 58: 2.48, 59: 2.47, 60: 2.45, 61: 2.43, 62: 2.42, 63: 2.4, 64: 2.38, 65: 2.37, 66: 2.35, 67: 2.33, 68: 2.32, 69: 2.3, 70: 2.28, 71: 2.27, 72: 2.25, 73: 2.2, 74: 2.1, 75: 2.05, 76: 2.0, 77: 2.0, 78: 2.05, 79: 2.1, 80: 2.05, 81: 1.96, 82: 2.02, 83: 2.07, 84: 1.97, 85: 2.02, 86: 2.2, 87: 3.48, 88: 2.83, 89: 2.0, 90: 2.4, 91: 2.0, 92: 2.3, 93: 2.0, 94: 2.0, 95: 2.0, 96: 2.0, 97: 2.0, 98: 2.0, 99: 2.0, 100: 2.0, 101: 2.0, 102: 2.0, 103: 2.0, 104: 2.0, 105: 2.0, 106: 2.0, 107: 2.0, 108: 2.0, 109: 2.0, 110: 2.0, 111: 2.0, 112: 2.0, 113: 2.0, 114: 2.0, 115: 2.0, 116: 2.0, 117: 2.0, 118: 2.0
  };
  var DefaultVdwRadius = 2.0; // C
  // http://dx.doi.org/10.1039/b801115j (or 1.6)
  var CovalentRadii = {
      1: 0.31, 2: 0.28, 3: 1.28, 4: 0.96, 5: 0.84, 6: 0.76, 7: 0.71, 8: 0.66, 9: 0.57, 10: 0.58, 11: 1.66, 12: 1.41, 13: 1.21, 14: 1.11, 15: 1.07, 16: 1.05, 17: 1.02, 18: 1.06, 19: 2.03, 20: 1.76, 21: 1.7, 22: 1.6, 23: 1.53, 24: 1.39, 25: 1.39, 26: 1.32, 27: 1.26, 28: 1.24, 29: 1.32, 30: 1.22, 31: 1.22, 32: 1.2, 33: 1.19, 34: 1.2, 35: 1.2, 36: 1.16, 37: 2.2, 38: 1.95, 39: 1.9, 40: 1.75, 41: 1.64, 42: 1.54, 43: 1.47, 44: 1.46, 45: 1.42, 46: 1.39, 47: 1.45, 48: 1.44, 49: 1.42, 50: 1.39, 51: 1.39, 52: 1.38, 53: 1.39, 54: 1.4, 55: 2.44, 56: 2.15, 57: 2.07, 58: 2.04, 59: 2.03, 60: 2.01, 61: 1.99, 62: 1.98, 63: 1.98, 64: 1.96, 65: 1.94, 66: 1.92, 67: 1.92, 68: 1.89, 69: 1.9, 70: 1.87, 71: 1.87, 72: 1.75, 73: 1.7, 74: 1.62, 75: 1.51, 76: 1.44, 77: 1.41, 78: 1.36, 79: 1.36, 80: 1.32, 81: 1.45, 82: 1.46, 83: 1.48, 84: 1.4, 85: 1.5, 86: 1.5, 87: 2.6, 88: 2.21, 89: 2.15, 90: 2.06, 91: 2.0, 92: 1.96, 93: 1.9, 94: 1.87, 95: 1.8, 96: 1.69, 97: 1.6, 98: 1.6, 99: 1.6, 100: 1.6, 101: 1.6, 102: 1.6, 103: 1.6, 104: 1.6, 105: 1.6, 106: 1.6, 107: 1.6, 108: 1.6, 109: 1.6, 110: 1.6, 111: 1.6, 112: 1.6, 113: 1.6, 114: 1.6, 115: 1.6, 116: 1.6, 117: 1.6, 118: 1.6
  };
  var DefaultCovalentRadius = 1.6;
  var Valences = {
      1: [1],
      2: [0],
      3: [1],
      4: [2],
      5: [3],
      6: [4],
      7: [3],
      8: [2],
      9: [1],
      10: [0],
      11: [1],
      12: [2],
      13: [6],
      14: [6],
      15: [3, 5, 7],
      16: [2, 4, 6],
      17: [1],
      18: [0],
      19: [1],
      20: [2],
      31: [3],
      32: [4],
      33: [3, 5],
      34: [2, 4, 6],
      35: [1],
      36: [0],
      37: [1],
      38: [2],
      49: [3],
      50: [4],
      51: [3, 5],
      52: [2],
      53: [1, 2, 5],
      54: [0, 2],
      55: [1],
      56: [2],
      81: [3],
      82: [4],
      83: [3],
      84: [2],
      85: [1],
      86: [0],
      87: [1],
      88: [2]
  };
  var DefaultValence = -1;
  var OuterShellElectronCounts = {
      1: 1, 2: 2, 3: 1, 4: 2, 5: 3, 6: 4, 7: 5, 8: 6, 9: 7, 10: 8, 11: 1, 12: 2, 13: 3, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8, 19: 1, 20: 2, 21: 3, 22: 4, 23: 5, 24: 6, 25: 7, 26: 8, 27: 9, 28: 10, 29: 11, 30: 2, 31: 3, 32: 4, 33: 5, 34: 6, 35: 7, 36: 8, 37: 1, 38: 2, 39: 3, 40: 4, 41: 5, 42: 6, 43: 7, 44: 8, 45: 9, 46: 10, 47: 11, 48: 2, 49: 3, 50: 4, 51: 5, 52: 6, 53: 7, 54: 8, 55: 1, 56: 2, 57: 3, 58: 4, 59: 3, 60: 4, 61: 5, 62: 6, 63: 7, 64: 8, 65: 9, 66: 10, 67: 11, 68: 12, 69: 13, 70: 14, 71: 15, 72: 4, 73: 5, 74: 6, 75: 7, 76: 8, 77: 9, 78: 10, 79: 11, 80: 2, 81: 3, 82: 4, 83: 5, 84: 6, 85: 7, 86: 8, 87: 1, 88: 2, 89: 3, 90: 4, 91: 3, 92: 4, 93: 5, 94: 6, 95: 7, 96: 8, 97: 9, 98: 10, 99: 11, 100: 12, 101: 13, 102: 14, 103: 15, 104: 2, 105: 2, 106: 2, 107: 2, 108: 2, 109: 2, 110: 2, 111: 2, 112: 2, 113: 3, 114: 4, 115: 5, 116: 6, 117: 7, 118: 8
  };
  var DefaultOuterShellElectronCount = 2;
  // http://blanco.biomol.uci.edu/Whole_residue_HFscales.txt
  // https://www.nature.com/articles/nsb1096-842
  var ResidueHydrophobicity = {
      // AA  DGwif   DGwoct  Oct-IF
      'ALA': [0.17, 0.50, 0.33],
      'ARG': [0.81, 1.81, 1.00],
      'ASN': [0.42, 0.85, 0.43],
      'ASP': [1.23, 3.64, 2.41],
      'ASH': [-0.07, 0.43, 0.50],
      'CYS': [-0.24, -0.02, 0.22],
      'GLN': [0.58, 0.77, 0.19],
      'GLU': [2.02, 3.63, 1.61],
      'GLH': [-0.01, 0.11, 0.12],
      'GLY': [0.01, 1.15, 1.14],
      // "His+": [  0.96,  2.33,  1.37 ],
      'HIS': [0.17, 0.11, -0.06],
      'ILE': [-0.31, -1.12, -0.81],
      'LEU': [-0.56, -1.25, -0.69],
      'LYS': [0.99, 2.80, 1.81],
      'MET': [-0.23, -0.67, -0.44],
      'PHE': [-1.13, -1.71, -0.58],
      'PRO': [0.45, 0.14, -0.31],
      'SER': [0.13, 0.46, 0.33],
      'THR': [0.14, 0.25, 0.11],
      'TRP': [-1.85, -2.09, -0.24],
      'TYR': [-0.94, -0.71, 0.23],
      'VAL': [0.07, -0.46, -0.53]
  };
  var DefaultResidueHydrophobicity = [0.00, 0.00, 0.00];
  var AA1 = {
      'HIS': 'H',
      'ARG': 'R',
      'LYS': 'K',
      'ILE': 'I',
      'PHE': 'F',
      'LEU': 'L',
      'TRP': 'W',
      'ALA': 'A',
      'MET': 'M',
      'PRO': 'P',
      'CYS': 'C',
      'ASN': 'N',
      'VAL': 'V',
      'GLY': 'G',
      'SER': 'S',
      'GLN': 'Q',
      'TYR': 'Y',
      'ASP': 'D',
      'GLU': 'E',
      'THR': 'T',
      'SEC': 'U',
      'PYL': 'O',
  };
  var AA3 = Object.keys(AA1);
  var RnaBases = ['A', 'C', 'T', 'G', 'U', 'I'];
  var DnaBases = ['DA', 'DC', 'DT', 'DG', 'DU', 'DI'];
  var PurinBases = ['A', 'G', 'I', 'DA', 'DG', 'DI'];
  var Bases = RnaBases.concat(DnaBases);
  var WaterNames = [
      'SOL', 'WAT', 'HOH', 'H2O', 'W', 'DOD', 'D3O', 'TIP3', 'TIP4', 'SPC'
  ];
  // all chemical components with the word "ion" in their name, Sep 2016
  //
  // SET SESSION group_concat_max_len = 1000000;
  // SELECT GROUP_CONCAT(id_ ORDER BY id_ ASC SEPARATOR '", "') from
  // (
  //     SELECT count(obj_id) as c, id_
  //     FROM pdb.chem_comp WHERE name LIKE "% ION%"
  //     GROUP BY id_
  // ) AS t1;
  var IonNames = [
      '118', '119', '1AL', '1CU', '2FK', '2HP', '2OF', '3CO',
      '3MT', '3NI', '3OF', '3P8', '4MO', '4PU', '543', '6MO', 'ACT', 'AG', 'AL',
      'ALF', 'AM', 'ATH', 'AU', 'AU3', 'AUC', 'AZI', 'BA', 'BCT', 'BEF', 'BF4', 'BO4',
      'BR', 'BS3', 'BSY', 'CA', 'CAC', 'CD', 'CD1', 'CD3', 'CD5', 'CE', 'CHT', 'CL',
      'CO', 'CO3', 'CO5', 'CON', 'CR', 'CS', 'CSB', 'CU', 'CU1', 'CU3', 'CUA', 'CUZ',
      'CYN', 'DME', 'DMI', 'DSC', 'DTI', 'DY', 'E4N', 'EDR', 'EMC', 'ER3', 'EU',
      'EU3', 'F', 'FE', 'FE2', 'FPO', 'GA', 'GD3', 'GEP', 'HAI', 'HG', 'HGC', 'IN',
      'IOD', 'IR', 'IR3', 'IRI', 'IUM', 'K', 'KO4', 'LA', 'LCO', 'LCP', 'LI', 'LU',
      'MAC', 'MG', 'MH2', 'MH3', 'MLI', 'MLT', 'MMC', 'MN', 'MN3', 'MN5', 'MN6',
      'MO1', 'MO2', 'MO3', 'MO4', 'MO5', 'MO6', 'MOO', 'MOS', 'MOW', 'MW1', 'MW2',
      'MW3', 'NA', 'NA2', 'NA5', 'NA6', 'NAO', 'NAW', 'NCO', 'NET', 'NH4', 'NI',
      'NI1', 'NI2', 'NI3', 'NO2', 'NO3', 'NRU', 'O4M', 'OAA', 'OC1', 'OC2', 'OC3',
      'OC4', 'OC5', 'OC6', 'OC7', 'OC8', 'OCL', 'OCM', 'OCN', 'OCO', 'OF1', 'OF2',
      'OF3', 'OH', 'OS', 'OS4', 'OXL', 'PB', 'PBM', 'PD', 'PDV', 'PER', 'PI', 'PO3',
      'PO4', 'PR', 'PT', 'PT4', 'PTN', 'RB', 'RH3', 'RHD', 'RU', 'SB', 'SCN', 'SE4',
      'SEK', 'SM', 'SMO', 'SO3', 'SO4', 'SR', 'T1A', 'TB', 'TBA', 'TCN', 'TEA', 'TH',
      'THE', 'TL', 'TMA', 'TRA', 'UNX', 'V', 'VN3', 'VO4', 'W', 'WO5', 'Y1', 'YB',
      'YB2', 'YH', 'YT3', 'ZCM', 'ZN', 'ZN2', 'ZN3', 'ZNO', 'ZO3',
      // additional ion names
      'OHX'
  ];
  // all chemical components with the word "%saccharide%" in their type, Sep 2016
  //
  // SET SESSION group_concat_max_len = 1000000;
  // select GROUP_CONCAT(id_ ORDER BY id_ ASC SEPARATOR '", "') from
  // (
  //     SELECT count(obj_id), id_
  //     FROM pdb.chem_comp WHERE type like "%SACCHARIDE%"
  //     GROUP BY id_
  // ) AS t1;
  var SaccharideNames = [
      '045', '0AT', '0BD', '0MK', '0NZ', '0TS', '0V4', '0XY', '0YT', '10M',
      '147', '149', '14T', '15L', '16G', '18T', '18Y', '1AR', '1BW', '1GL', '1GN',
      '1JB', '1LL', '1NA', '1S3', '26M', '26Q', '26R', '26V', '26W', '26Y', '27C',
      '289', '291', '293', '2DG', '2F8', '2FG', '2FL', '2FP', '2GL', '2M4', '2M5',
      '32O', '34V', '3CM', '3DO', '3DY', '3FM', '3LR', '3MF', '3MG', '3SA', '3ZW',
      '46D', '46M', '46Z', '48Z', '4CQ', '4GC', '4NN', '50A', '5DI', '5GF', '5MM',
      '5RP', '5SA', '5SP', '64K', '6PG', '6SA', '7JZ', '7SA', 'A1Q', 'A2G', 'AAB',
      'AAL', 'AAO', 'ABC', 'ABD', 'ABE', 'ABF', 'ABL', 'ACG', 'ACI', 'ACR', 'ACX',
      'ADA', 'ADG', 'ADR', 'AF1', 'AFD', 'AFL', 'AFO', 'AFP', 'AFR', 'AGC', 'AGH',
      'AGL', 'AHR', 'AIG', 'ALL', 'ALX', 'AMU', 'AOG', 'AOS', 'ARA', 'ARB', 'ARE',
      'ARI', 'ASG', 'ASO', 'AXP', 'AXR', 'B0D', 'B16', 'B2G', 'B4G', 'B6D', 'B8D',
      'B9D', 'BBK', 'BCD', 'BDG', 'BDP', 'BDR', 'BEM', 'BFP', 'BGC', 'BGL', 'BGP',
      'BGS', 'BHG', 'BMA', 'BMX', 'BNG', 'BNX', 'BOG', 'BRI', 'BXF', 'BXP', 'BXX',
      'BXY', 'C3X', 'C4X', 'C5X', 'CAP', 'CBI', 'CBK', 'CBS', 'CDR', 'CEG', 'CGF',
      'CHO', 'CR1', 'CR6', 'CRA', 'CT3', 'CTO', 'CTR', 'CTT', 'D6G', 'DAF', 'DAG',
      'DDA', 'DDB', 'DDL', 'DEL', 'DFR', 'DFX', 'DG0', 'DGC', 'DGD', 'DGM', 'DGS',
      'DIG', 'DLF', 'DLG', 'DMU', 'DNO', 'DOM', 'DP5', 'DQQ', 'DQR', 'DR2', 'DR3',
      'DR4', 'DRI', 'DSR', 'DT6', 'DVC', 'E4P', 'E5G', 'EAG', 'EBG', 'EBQ', 'EGA',
      'EJT', 'EPG', 'ERE', 'ERI', 'F1P', 'F1X', 'F6P', 'FBP', 'FCA', 'FCB', 'FCT',
      'FDP', 'FDQ', 'FFC', 'FIX', 'FMO', 'FRU', 'FSI', 'FU4', 'FUB', 'FUC', 'FUD',
      'FUL', 'FXP', 'G16', 'G1P', 'G2F', 'G3I', 'G4D', 'G4S', 'G6D', 'G6P', 'G6S',
      'GAC', 'GAD', 'GAL', 'GC1', 'GC4', 'GCD', 'GCN', 'GCO', 'GCS', 'GCT', 'GCU',
      'GCV', 'GCW', 'GCX', 'GE1', 'GFG', 'GFP', 'GIV', 'GL0', 'GL2', 'GL5', 'GL6',
      'GL7', 'GL9', 'GLA', 'GLB', 'GLC', 'GLD', 'GLF', 'GLG', 'GLO', 'GLP', 'GLS',
      'GLT', 'GLW', 'GMH', 'GN1', 'GNX', 'GP1', 'GP4', 'GPH', 'GPM', 'GQ1', 'GQ2',
      'GQ4', 'GS1', 'GS4', 'GSA', 'GSD', 'GTE', 'GTH', 'GTK', 'GTR', 'GTZ', 'GU0',
      'GU1', 'GU2', 'GU3', 'GU4', 'GU5', 'GU6', 'GU8', 'GU9', 'GUF', 'GUP', 'GUZ',
      'GYP', 'GYV', 'H2P', 'HDL', 'HMS', 'HS2', 'HSD', 'HSG', 'HSH', 'HSJ', 'HSQ',
      'HSR', 'HSU', 'HSX', 'HSY', 'HSZ', 'IAB', 'IDG', 'IDR', 'IDS', 'IDT', 'IDU',
      'IDX', 'IDY', 'IMK', 'IN1', 'IPT', 'ISL', 'KBG', 'KD2', 'KDA', 'KDM', 'KDO',
      'KFN', 'KO1', 'KO2', 'KTU', 'L6S', 'LAG', 'LAI', 'LAK', 'LAO', 'LAT', 'LB2',
      'LBT', 'LCN', 'LDY', 'LGC', 'LGU', 'LM2', 'LMT', 'LMU', 'LOG', 'LOX', 'LPK',
      'LSM', 'LTM', 'LVZ', 'LXB', 'LXZ', 'M1F', 'M3M', 'M6P', 'M8C', 'MA1', 'MA2',
      'MA3', 'MAB', 'MAG', 'MAL', 'MAN', 'MAT', 'MAV', 'MAW', 'MBG', 'MCU', 'MDA',
      'MDM', 'MDP', 'MFA', 'MFB', 'MFU', 'MG5', 'MGA', 'MGL', 'MLB', 'MMA', 'MMN',
      'MN0', 'MRP', 'MTT', 'MUG', 'MVP', 'MXY', 'N1L', 'N9S', 'NAA', 'NAG', 'NBG',
      'NDG', 'NED', 'NG1', 'NG6', 'NGA', 'NGB', 'NGC', 'NGE', 'NGF', 'NGL', 'NGS',
      'NGY', 'NHF', 'NM6', 'NM9', 'NTF', 'NTO', 'NTP', 'NXD', 'NYT', 'OPG', 'OPM',
      'ORP', 'OX2', 'P3M', 'P53', 'P6P', 'PA5', 'PNA', 'PNG', 'PNW', 'PRP', 'PSJ',
      'PSV', 'PTQ', 'QDK', 'QPS', 'QV4', 'R1P', 'R1X', 'R2B', 'R5P', 'RAA', 'RAE',
      'RAF', 'RAM', 'RAO', 'RAT', 'RB5', 'RBL', 'RCD', 'RDP', 'REL', 'RER', 'RF5',
      'RG1', 'RGG', 'RHA', 'RIB', 'RIP', 'RNS', 'RNT', 'ROB', 'ROR', 'RPA', 'RST',
      'RUB', 'RUU', 'RZM', 'S6P', 'S7P', 'SA0', 'SCR', 'SDD', 'SF6', 'SF9', 'SG4',
      'SG5', 'SG6', 'SG7', 'SGA', 'SGC', 'SGD', 'SGN', 'SGS', 'SHB', 'SHG', 'SI3',
      'SIO', 'SOE', 'SOL', 'SSG', 'SUC', 'SUP', 'SUS', 'T6P', 'T6T', 'TAG', 'TCB',
      'TDG', 'TGK', 'TGY', 'TH1', 'TIA', 'TM5', 'TM6', 'TM9', 'TMR', 'TMX', 'TOA',
      'TOC', 'TRE', 'TYV', 'UCD', 'UDC', 'VG1', 'X0X', 'X1X', 'X2F', 'X4S', 'X5S',
      'X6X', 'XBP', 'XDN', 'XDP', 'XIF', 'XIM', 'XLF', 'XLS', 'XMM', 'XUL', 'XXR',
      'XYP', 'XYS', 'YO5', 'Z3Q', 'Z6J', 'Z9M', 'ZDC', 'ZDM'
  ];
  var ProteinBackboneAtoms = [
      'CA', 'C', 'N', 'O',
      'O1', 'O2', 'OC1', 'OC2', 'OX1', 'OXT', 'OT1', 'OT2',
      'H', 'H1', 'H2', 'H3', 'HA', 'HN',
      'BB'
  ];
  var NucleicBackboneAtoms = [
      'P', 'OP1', 'OP2', 'HOP2', 'HOP3',
      "O2'", "O3'", "O4'", "O5'", "C1'", "C2'", "C3'", "C4'", "C5'",
      "H1'", "H2'", "H2''", "HO2'", "H3'", "H4'", "H5'", "H5''", "HO3'", "HO5'",
      'O2*', 'O3*', 'O4*', 'O5*', 'C1*', 'C2*', 'C3*', 'C4*', 'C5*'
  ];
  var ResidueTypeAtoms = {};
  ResidueTypeAtoms[ProteinBackboneType] = {
      trace: 'CA',
      direction1: 'C',
      direction2: ['O', 'OC1', 'O1', 'OX1', 'OXT', 'OT1', 'OT2'],
      backboneStart: 'N',
      backboneEnd: 'C'
  };
  ResidueTypeAtoms[RnaBackboneType] = {
      trace: ["C4'", 'C4*'],
      direction1: ["C1'", 'C1*'],
      direction2: ["C3'", 'C3*'],
      backboneStart: 'P',
      backboneEnd: ["O3'", 'O3*']
  };
  ResidueTypeAtoms[DnaBackboneType] = {
      trace: ["C3'", 'C3*'],
      direction1: ["C2'", 'C2*'],
      direction2: ["O4'", 'O4*'],
      backboneStart: 'P',
      backboneEnd: ["O3'", 'O3*']
  };
  ResidueTypeAtoms[CgProteinBackboneType] = {
      trace: ['CA', 'BB'],
      backboneStart: ['CA', 'BB'],
      backboneEnd: ['CA', 'BB']
  };
  ResidueTypeAtoms[CgRnaBackboneType] = {
      trace: ["C4'", 'C4*', 'P'],
      backboneStart: ["C4'", 'C4*', 'P'],
      backboneEnd: ["C4'", 'C4*', 'P']
  };
  ResidueTypeAtoms[CgDnaBackboneType] = {
      trace: ["C3'", 'C3*', "C2'", 'P'],
      backboneStart: ["C3'", 'C3*', "C2'", 'P'],
      backboneEnd: ["C3'", 'C3*', "C2'", 'P']
  };
  ResidueTypeAtoms[UnknownBackboneType] = {};

  /**
   * @file Geometry
   * @author Fred Ludlow <Fred.Ludlow@astx.com>
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   */
  function assignGeometry(totalCoordination) {
      switch (totalCoordination) {
          case 0:
              return 0 /* Spherical */;
          case 1:
              return 1 /* Terminal */;
          case 2:
              return 2 /* Linear */;
          case 3:
              return 3 /* Trigonal */;
          case 4:
              return 4 /* Tetrahedral */;
          default:
              return 8 /* Unknown */;
      }
  }
  var Angles = new Map([
      [2 /* Linear */, degToRad(180)],
      [3 /* Trigonal */, degToRad(120)],
      [4 /* Tetrahedral */, degToRad(109.4721)],
      [6 /* Octahedral */, degToRad(90)]
  ]);
  /**
   * Calculate the angles x-1-2 for all x where x is a heavy atom bonded to ap1.
   * @param  {AtomProxy} ap1 First atom (angle centre)
   * @param  {AtomProxy} ap2 Second atom
   * @return {number[]}        Angles in radians
   */
  function calcAngles(ap1, ap2) {
      var angles = [];
      var d1 = new Vector3();
      var d2 = new Vector3();
      d1.subVectors(ap2, ap1);
      ap1.eachBondedAtom(function (x) {
          if (x.number !== 1 /* H */) {
              d2.subVectors(x, ap1);
              angles.push(d1.angleTo(d2));
          }
      });
      return angles;
  }
  /**
   * Find two neighbours of ap1 to define a plane (if possible) and
   * measure angle out of plane to ap2
   * @param  {AtomProxy} ap1 First atom (angle centre)
   * @param  {AtomProxy} ap2 Second atom (out-of-plane)
   * @return {number}        Angle from plane to second atom
   */
  function calcPlaneAngle(ap1, ap2) {
      var x1 = ap1.clone();
      var v12 = new Vector3();
      v12.subVectors(ap2, ap1);
      var neighbours = [new Vector3(), new Vector3()];
      var ni = 0;
      ap1.eachBondedAtom(function (x) {
          if (ni > 1) {
              return;
          }
          if (x.number !== 1 /* H */) {
              x1.index = x.index;
              neighbours[ni++].subVectors(x, ap1);
          }
      });
      if (ni === 1) {
          x1.eachBondedAtom(function (x) {
              if (ni > 1) {
                  return;
              }
              if (x.number !== 1 /* H */ && x.index !== ap1.index) {
                  neighbours[ni++].subVectors(x, ap1);
              }
          });
      }
      if (ni !== 2) {
          return;
      }
      var cp = neighbours[0].cross(neighbours[1]);
      return Math.abs((Math.PI / 2) - cp.angleTo(v12));
  }

  /**
   * @file Valence Model
   * @author Fred Ludlow <Fred.Ludlow@astx.com>
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   */
  /**
   * Are we involved in some kind of pi system. Either explicitly forming
   * double bond or N, O next to a double bond, except:
   *
   *   N,O with degree 4 cannot be conjugated.
   *   N,O adjacent to P=O or S=O do not qualify (keeps sulfonamide N sp3 geom)
   */
  function isConjugated(a) {
      var _bp = a.structure.getBondProxy();
      var atomicNumber = a.number;
      var hetero = atomicNumber === 8 /* O */ || atomicNumber === 7 /* N */;
      if (hetero && a.bondCount === 4) {
          return false;
      }
      var flag = false;
      a.eachBond(function (b) {
          if (b.bondOrder > 1) {
              flag = true;
              return;
          }
          if (hetero) {
              var a2 = b.getOtherAtom(a);
              a2.eachBond(function (b2) {
                  if (b2.bondOrder > 1) {
                      var atomicNumber2 = a2.number;
                      if ((atomicNumber2 === 15 /* P */ || atomicNumber2 === 16 /* S */) &&
                          b2.getOtherAtom(a2).number === 8 /* O */) {
                          return;
                      }
                      flag = true;
                  }
              }, _bp); // Avoid reuse of structure._bp
          }
      });
      return flag;
  }
  /* function hasExplicitCharge(r: ResidueProxy) {
    let flag = false
    r.eachAtom(a => {
      if (a.formalCharge != null && a.formalCharge !== 0) flag = true
    })
    return flag
  }

  function hasExplicitHydrogen(r: ResidueProxy) {
    let flag = false
    r.eachAtom(a => {
      if (a.number === Elements.H) flag = true
    })
    return flag
  } */
  function explicitValence(a) {
      var v = 0;
      a.eachBond(function (b) { return v += b.bondOrder; });
      return v;
  }
  /**
   * Attempts to produce a consistent charge and implicit
   * H-count for an atom.
   *
   * If both params.assignCharge and params.assignH, this
   * approximately followsthe rules described in
   * https://docs.eyesopen.com/toolkits/python/oechemtk/valence.html#openeye-hydrogen-count-model
   *
   * If only charge or hydrogens are to be assigned it takes
   * a much simpler view and deduces one from the other
   *
   * @param {AtomProxy}           a      Atom to analyze
   * @param {assignChargeHParams} params What to assign
   */
  function calculateHydrogensCharge(a, params) {
      var hydrogenCount = a.bondToElementCount(1 /* H */);
      var charge = a.formalCharge || 0;
      var assignCharge = (params.assignCharge === 'always' ||
          (params.assignCharge === 'auto' && charge === 0));
      var assignH = (params.assignH === 'always' ||
          (params.assignH === 'auto' && hydrogenCount === 0));
      var degree = a.bondCount;
      var valence = explicitValence(a);
      var conjugated = isConjugated(a);
      var multiBond = (valence - degree > 0);
      var implicitHCount = 0;
      var geom = 8 /* Unknown */;
      switch (a.number) {
          case 1 /* H */:
              if (assignCharge) {
                  if (degree === 0) {
                      charge = 1;
                      geom = 0 /* Spherical */;
                  }
                  else if (degree === 1) {
                      charge = 0;
                      geom = 1 /* Terminal */;
                  }
              }
              break;
          case 6 /* C */:
              // TODO: Isocyanide?
              if (assignCharge) {
                  charge = 0; // Assume carbon always neutral
              }
              if (assignH) {
                  // Carbocation/carbanion are 3-valent
                  implicitHCount = Math.max(0, 4 - valence - Math.abs(charge));
              }
              // Carbocation is planar, carbanion is tetrahedral
              geom = assignGeometry(degree + implicitHCount + Math.max(0, -charge));
              break;
          case 7 /* N */:
              if (assignCharge) {
                  if (!assignH) { // Trust input H explicitly:
                      charge = valence - 3;
                  }
                  else if (conjugated && valence < 4) {
                      // Neutral unless amidine/guanidine double-bonded N:
                      if (degree - hydrogenCount === 1 && valence - hydrogenCount === 2) {
                          charge = 1;
                      }
                      else {
                          charge = 0;
                      }
                  }
                  else {
                      // Sulfonamide nitrogen and classed as sp3 in conjugation model but
                      // they won't be charged
                      // Don't assign charge to nitrogens bound to metals
                      var flag = false;
                      a.eachBondedAtom(function (ba) {
                          if (ba.number === 16 /* S */ || ba.isMetal())
                              { flag = true; }
                      });
                      if (flag)
                          { charge = 0; }
                      else
                          { charge = 1; }
                      // TODO: Planarity sanity check?
                  }
              }
              if (assignH) {
                  // NH4+ -> 4, 1' amide -> 2, nitro N/N+ depiction -> 0
                  implicitHCount = Math.max(0, 3 - valence + charge);
              }
              if (conjugated && !multiBond) {
                  // Amide, anilinic N etc. cannot consider lone-pair for geometry purposes
                  // Anilinic N geometry is depenent on ring electronics, for our purposes we
                  // assume it's trigonal!
                  geom = assignGeometry(degree + implicitHCount - charge);
              }
              else {
                  // Everything else, pyridine, amine, nitrile, lp plays normal role:
                  geom = assignGeometry(degree + implicitHCount + 1 - charge);
              }
              break;
          case 8 /* O */:
              if (assignCharge) {
                  if (!assignH) {
                      charge = valence - 2; //
                  }
                  if (valence === 1) {
                      a.eachBondedAtom(function (ba) {
                          ba.eachBond(function (b) {
                              var oa = b.getOtherAtom(ba);
                              if (oa.index !== a.index && oa.number === 8 /* O */ && b.bondOrder === 2) {
                                  charge = -1;
                              }
                          });
                      });
                  }
              }
              if (assignH) {
                  // ethanol -> 1, carboxylate -> -1
                  implicitHCount = Math.max(0, 2 - valence + charge);
              }
              if (conjugated && !multiBond) {
                  // carboxylate OH, phenol OH, one lone-pair taken up with conjugation
                  geom = assignGeometry(degree + implicitHCount - charge + 1);
              }
              else {
                  // Carbonyl (trigonal)
                  geom = assignGeometry(degree + implicitHCount - charge + 2);
              }
              break;
          // Only handles thiols/thiolates/thioether/sulfonium. Sulfoxides and higher
          // oxidiation states are assumed neutral S (charge carried on O if required)
          case 16 /* S */:
              if (assignCharge) {
                  if (!assignH) {
                      if (valence <= 3 && !a.bondToElementCount(8 /* O */)) {
                          charge = valence - 2; // e.g. explicitly deprotonated thiol
                      }
                      else {
                          charge = 0;
                      }
                  }
              }
              if (assignH) {
                  if (valence < 2) {
                      implicitHCount = Math.max(0, 2 - valence + charge);
                  }
              }
              if (valence <= 3) {
                  // Thiol, thiolate, tioether -> tetrahedral
                  geom = assignGeometry(degree + implicitHCount - charge + 2);
              }
              break;
          case 9 /* F */:
          case 17 /* CL */:
          case 35 /* BR */:
          case 53 /* I */:
          case 85 /* AT */:
              // Never implicitly protonate halides
              if (assignCharge) {
                  charge = valence - 1;
              }
              break;
          case 3 /* LI */:
          case 11 /* NA */:
          case 19 /* K */:
          case 37 /* RB */:
          case 55 /* CS */:
          case 87 /* FR */:
              if (assignCharge) {
                  charge = 1 - valence;
              }
              break;
          case 4 /* BE */:
          case 12 /* MG */:
          case 20 /* CA */:
          case 38 /* SR */:
          case 56 /* BA */:
          case 88 /* RA */:
              if (assignCharge) {
                  charge = 2 - valence;
              }
              break;
          default:
              console.warn('Requested charge, protonation for an unhandled element', a.element);
      }
      return [charge, implicitHCount, implicitHCount + hydrogenCount, geom];
  }
  function ValenceModel(data, params) {
      var structure = data.structure;
      var n = structure.atomCount;
      var charge = new Int8Array(n);
      var implicitH = new Int8Array(n);
      var totalH = new Int8Array(n);
      var idealGeometry = new Int8Array(n);
      structure.eachAtom(function (a) {
          var i = a.index;
          var ref = calculateHydrogensCharge(a, params);
          var chg = ref[0];
          var implH = ref[1];
          var totH = ref[2];
          var geom = ref[3];
          charge[i] = chg;
          implicitH[i] = implH;
          totalH[i] = totH;
          idealGeometry[i] = geom;
      });
      return { charge: charge, implicitH: implicitH, totalH: totalH, idealGeometry: idealGeometry };
  }

  function createData(structure) {
      return {
          structure: structure,
          '@spatialLookup': undefined,
          '@valenceModel': undefined
      };
  }
  function valenceModel(data) {
      if (data['@valenceModel'])
          { return data['@valenceModel']; }
      var valenceModel = ValenceModel(data, { assignCharge: 'auto', assignH: 'auto' });
      data['@valenceModel'] = valenceModel;
      return valenceModel;
  }

  /**
   * @file Functional Groups
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   */
  /**
   * Sulfur in a sulfonic acid or sulfonate group
   */
  function isSulfonicAcid(a) {
      return (a.number === 16 &&
          a.bondToElementCount(8 /* O */) === 3);
  }
  /**
   * Sulfur in a sulfate group
   */
  function isSulfate(a) {
      return (a.number === 16 &&
          a.bondToElementCount(8 /* O */) === 4);
  }
  /**
   * Phosphor in a phosphate group
   */
  function isPhosphate(a) {
      return (a.number === 15 &&
          a.bondToElementCount(8 /* O */) === a.bondCount);
  }
  /**
   * Carbon in a carboxylate group
   */
  function isCarboxylate(a) {
      var terminalOxygenCount = 0;
      if (a.number === 6 &&
          a.bondToElementCount(8 /* O */) === 2 &&
          a.bondToElementCount(6 /* C */) === 1) {
          a.eachBondedAtom(function (ba) {
              if (ba.number === 8 && ba.bondCount - ba.bondToElementCount(1 /* H */) === 1) {
                  ++terminalOxygenCount;
              }
          });
      }
      return terminalOxygenCount === 2;
  }
  /**
   * Carbon in a guanidine group
   */
  function isGuanidine(a) {
      var terminalNitrogenCount = 0;
      if (a.number === 6 &&
          a.bondCount === 3 &&
          a.bondToElementCount(7 /* N */) === 3) {
          a.eachBondedAtom(function (ba) {
              if (ba.bondCount - ba.bondToElementCount(1 /* H */) === 1) {
                  ++terminalNitrogenCount;
              }
          });
      }
      return terminalNitrogenCount === 2;
  }
  /**
   * Carbon in a acetamidine group
   */
  function isAcetamidine(a) {
      var terminalNitrogenCount = 0;
      if (a.number === 6 &&
          a.bondCount === 3 &&
          a.bondToElementCount(7 /* N */) === 2 &&
          a.bondToElementCount(6 /* C */) === 1) {
          a.eachBondedAtom(function (ba) {
              if (ba.bondCount - ba.bondToElementCount(1 /* H */) === 1) {
                  ++terminalNitrogenCount;
              }
          });
      }
      return terminalNitrogenCount === 2;
  }

  /**
   * @file Charged
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @author Fred Ludlow <Fred.Ludlow@astx.com>
   */
  var PositvelyCharged = ['ARG', 'HIS', 'LYS'];
  var NegativelyCharged = ['GLU', 'ASP'];
  function addPositiveCharges(structure, features) {
      var ref = valenceModel(structure.data);
      var charge = ref.charge;
      var atomInGroupDict = {};
      structure.eachResidue(function (r) {
          if (PositvelyCharged.includes(r.resname)) {
              var state = createFeatureState(1 /* PositiveCharge */);
              r.eachAtom(function (a) {
                  if (a.number === 7 /* N */ && a.isSidechain()) {
                      addAtom(state, a);
                  }
              });
              addFeature(features, state);
          }
          else if (!AA3.includes(r.resname) && !r.isNucleic()) {
              r.eachAtom(function (a) {
                  var addGroup = false;
                  var state = createFeatureState(1 /* PositiveCharge */);
                  if (isGuanidine(a)) {
                      state.group = 8 /* Guanidine */;
                      addGroup = true;
                  }
                  else if (isAcetamidine(a)) {
                      state.group = 9 /* Acetamidine */;
                      addGroup = true;
                  }
                  if (addGroup) {
                      a.eachBondedAtom(function (a) {
                          if (a.number === 7 /* N */) {
                              atomInGroupDict[a.index] = true;
                              addAtom(state, a);
                          }
                      });
                      addFeature(features, state);
                  }
              });
              r.eachAtom(function (a) {
                  var state = createFeatureState(1 /* PositiveCharge */);
                  if (charge[a.index] > 0) {
                      if (!atomInGroupDict[a.index]) {
                          addAtom(state, a);
                          addFeature(features, state);
                      }
                  }
              });
          }
      });
  }
  function addNegativeCharges(structure, features) {
      var ref = valenceModel(structure.data);
      var charge = ref.charge;
      var atomInGroupDict = {};
      structure.eachResidue(function (r) {
          if (NegativelyCharged.includes(r.resname)) {
              var state = createFeatureState(2 /* NegativeCharge */);
              r.eachAtom(function (a) {
                  if (a.number === 8 /* O */ && a.isSidechain()) {
                      addAtom(state, a);
                  }
              });
              addFeature(features, state);
          }
          else if (Bases.includes(r.resname)) {
              var state$1 = createFeatureState(2 /* NegativeCharge */);
              r.eachAtom(function (a) {
                  if (isPhosphate(a)) {
                      state$1.group = 6 /* Phosphate */;
                      a.eachBondedAtom(function (a) {
                          if (a.number === 8 /* O */)
                              { addAtom(state$1, a); }
                      });
                      addFeature(features, state$1);
                  }
              });
          }
          else if (!AA3.includes(r.resname) && !Bases.includes(r.resname)) {
              r.eachAtom(function (a) {
                  var addGroup = false;
                  var state = createFeatureState(2 /* NegativeCharge */);
                  if (isSulfonicAcid(a)) {
                      state.group = 4 /* SulfonicAcid */;
                      addGroup = true;
                  }
                  else if (isPhosphate(a)) {
                      state.group = 6 /* Phosphate */;
                      addGroup = true;
                  }
                  else if (isSulfate(a)) {
                      state.group = 5 /* Sulfate */;
                      addGroup = true;
                  }
                  else if (isCarboxylate(a)) {
                      state.group = 10 /* Carboxylate */;
                      addGroup = true;
                  }
                  if (addGroup) {
                      a.eachBondedAtom(function (a) {
                          if (a.number === 8 /* O */) {
                              atomInGroupDict[a.index] = true;
                              addAtom(state, a);
                          }
                      });
                      addFeature(features, state);
                  }
              });
              r.eachAtom(function (a) {
                  var state = createFeatureState(2 /* NegativeCharge */);
                  if (charge[a.index] < 0) {
                      if (!atomInGroupDict[a.index]) {
                          addAtom(state, a);
                          addFeature(features, state);
                      }
                  }
              });
          }
      });
  }
  function addAromaticRings(structure, features) {
      var a = structure.getAtomProxy();
      structure.eachResidue(function (r) {
          var rings = r.getAromaticRings();
          if (rings) {
              var offset = r.atomOffset;
              rings.forEach(function (ring) {
                  var state = createFeatureState(3 /* AromaticRing */);
                  ring.forEach(function (i) {
                      a.index = i + offset;
                      addAtom(state, a);
                  });
                  addFeature(features, state);
              });
          }
      });
  }
  function isIonicInteraction(ti, tj) {
      return ((ti === 2 /* NegativeCharge */ && tj === 1 /* PositiveCharge */) ||
          (ti === 1 /* PositiveCharge */ && tj === 2 /* NegativeCharge */));
  }
  function isPiStacking(ti, tj) {
      return ti === 3 /* AromaticRing */ && tj === 3 /* AromaticRing */;
  }
  function isCationPi(ti, tj) {
      return ((ti === 3 /* AromaticRing */ && tj === 1 /* PositiveCharge */) ||
          (ti === 1 /* PositiveCharge */ && tj === 3 /* AromaticRing */));
  }
  function addChargedContacts(structure, contacts, params) {
      if ( params === void 0 ) params = {};

      var maxIonicDist = defaults(params.maxIonicDist, ContactDefaultParams.maxIonicDist);
      var maxPiStackingDist = defaults(params.maxPiStackingDist, ContactDefaultParams.maxPiStackingDist);
      var maxPiStackingOffset = defaults(params.maxPiStackingOffset, ContactDefaultParams.maxPiStackingOffset);
      var maxPiStackingAngle = defaults(params.maxPiStackingAngle, ContactDefaultParams.maxPiStackingAngle);
      var maxCationPiDist = defaults(params.maxCationPiDist, ContactDefaultParams.maxCationPiDist);
      var maxCationPiOffset = defaults(params.maxCationPiOffset, ContactDefaultParams.maxCationPiOffset);
      var masterIdx = defaults(params.masterModelIndex, ContactDefaultParams.masterModelIndex);
      var maxDistance = Math.max(maxIonicDist + 2, maxPiStackingDist, maxCationPiDist);
      // const maxSaltBridgeDistSq = maxSaltBridgeDist * maxSaltBridgeDist
      var maxPiStackingDistSq = maxPiStackingDist * maxPiStackingDist;
      var maxCationPiDistSq = maxCationPiDist * maxCationPiDist;
      var features = contacts.features;
      var spatialHash = contacts.spatialHash;
      var contactStore = contacts.contactStore;
      var featureSet = contacts.featureSet;
      var types = features.types;
      var centers = features.centers;
      var atomSets = features.atomSets;
      var x = centers.x;
      var y = centers.y;
      var z = centers.z;
      var n = types.length;
      var ax = structure.atomStore.x;
      var ay = structure.atomStore.y;
      var az = structure.atomStore.z;
      var ap1 = structure.getAtomProxy();
      var ap2 = structure.getAtomProxy();
      var areAtomSetsWithinDist = function (atomSet1, atomSet2, maxDist) {
          var sn = atomSet1.length;
          var sm = atomSet2.length;
          for (var si = 0; si < sn; ++si) {
              ap1.index = atomSet1[si];
              for (var sj = 0; sj < sm; ++sj) {
                  ap2.index = atomSet2[sj];
                  if (ap1.distanceTo(ap2) <= maxDist) {
                      return true;
                  }
              }
          }
          return false;
      };
      var v1 = new Vector3();
      var v2 = new Vector3();
      var v3 = new Vector3();
      var d1 = new Vector3();
      var d2 = new Vector3();
      var n1 = new Vector3();
      var n2 = new Vector3();
      var getNormal = function (atoms, normal) {
          v1.set(ax[atoms[0]], ay[atoms[0]], az[atoms[0]]);
          v2.set(ax[atoms[1]], ay[atoms[1]], az[atoms[1]]);
          v3.set(ax[atoms[2]], ay[atoms[2]], az[atoms[2]]);
          d1.subVectors(v1, v2);
          d2.subVectors(v1, v3);
          normal.crossVectors(d1, d2);
      };
      var getOffset = function (i, j, normal) {
          v1.set(x[i], y[i], z[i]);
          v2.set(x[j], y[j], z[j]);
          return v1.sub(v2).projectOnPlane(normal).add(v2).distanceTo(v2);
      };
      var add = function (i, j, ct) {
          featureSet.setBits(i, j);
          contactStore.addContact(i, j, ct);
      };
      var loop = function ( i ) {
          spatialHash.eachWithin(x[i], y[i], z[i], maxDistance, function (j, dSq) {
              if (j <= i)
                  { return; }
              ap1.index = atomSets[i][0];
              ap2.index = atomSets[j][0];
              if (invalidAtomContact(ap1, ap2, masterIdx))
                  { return; }
              var ti = types[i];
              var tj = types[j];
              if (isIonicInteraction(ti, tj)) {
                  if (areAtomSetsWithinDist(atomSets[i], atomSets[j], maxIonicDist)) {
                      add(i, j, 1 /* IonicInteraction */);
                  }
              }
              else if (isPiStacking(ti, tj)) {
                  if (dSq <= maxPiStackingDistSq) {
                      getNormal(atomSets[i], n1);
                      getNormal(atomSets[j], n2);
                      var angle = radToDeg(n1.angleTo(n2));
                      var offset = Math.min(getOffset(i, j, n2), getOffset(j, i, n1));
                      if (offset <= maxPiStackingOffset) {
                          if (angle <= maxPiStackingAngle || angle >= 180 - maxPiStackingAngle) {
                              add(i, j, 3 /* PiStacking */); // parallel
                          }
                          else if (angle <= maxPiStackingAngle + 90 && angle >= 90 - maxPiStackingAngle) {
                              add(i, j, 3 /* PiStacking */); // t-shaped
                          }
                      }
                  }
              }
              else if (isCationPi(ti, tj)) {
                  if (dSq <= maxCationPiDistSq) {
                      var ref = ti === 3 /* AromaticRing */ ? [i, j] : [j, i];
                      var l = ref[0];
                      var k = ref[1];
                      getNormal(atomSets[l], n1);
                      var offset$1 = getOffset(k, l, n1);
                      if (offset$1 <= maxCationPiOffset) {
                          add(l, k, 2 /* CationPi */);
                      }
                  }
              }
          });
      };

      for (var i = 0; i < n; ++i) loop( i );
  }

  /**
   * @file Hydrogen Bonds
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @author Fred Ludlow <Fred.Ludlow@astx.com>
   */
  // Geometric characteristics of hydrogen bonds involving sulfur atoms in proteins
  // https://doi.org/10.1002/prot.22327
  // Satisfying Hydrogen Bonding Potential in Proteins (HBPLUS)
  // https://doi.org/10.1006/jmbi.1994.1334
  // http://www.csb.yale.edu/userguides/datamanip/hbplus/hbplus_descrip.html
  /**
   * Potential hydrogen donor
   */
  function addHydrogenDonors(structure, features) {
      var ref = valenceModel(structure.data);
      var totalH = ref.totalH;
      structure.eachAtom(function (a) {
          var state = createFeatureState(4 /* HydrogenDonor */);
          var an = a.number;
          if (isHistidineNitrogen(a)) {
              // include both nitrogen atoms in histidine due to
              // their often ambiguous protonation assignment
              addAtom(state, a);
              addFeature(features, state);
          }
          else if (totalH[a.index] > 0 &&
              (an === 7 /* N */ || an === 8 /* O */ || an === 16 /* S */)) {
              addAtom(state, a);
              addFeature(features, state);
          }
      });
  }
  /**
   * Weak hydrogen donor.
   */
  function addWeakHydrogenDonors(structure, features) {
      var ref = valenceModel(structure.data);
      var totalH = ref.totalH;
      structure.eachAtom(function (a) {
          if (a.number === 6 /* C */ &&
              totalH[a.index] > 0 &&
              (a.bondToElementCount(7 /* N */) > 0 ||
                  a.bondToElementCount(8 /* O */) > 0 ||
                  inAromaticRingWithElectronNegativeElement(a))) {
              var state = createFeatureState(9 /* WeakHydrogenDonor */);
              addAtom(state, a);
              addFeature(features, state);
          }
      });
  }
  function inAromaticRingWithElectronNegativeElement(a) {
      if (!a.isAromatic())
          { return false; }
      var ringData = a.residueType.getRings();
      if (!ringData)
          { return false; }
      var hasElement = false;
      var rings = ringData.rings;
      rings.forEach(function (ring) {
          if (hasElement)
              { return; } // already found one
          if (ring.some(function (idx) { return (a.index - a.residueAtomOffset) === idx; })) { // in ring
              hasElement = ring.some(function (idx) {
                  var atomTypeId = a.residueType.atomTypeIdList[idx];
                  var number = a.atomMap.get(atomTypeId).number;
                  return number === 7 /* N */ || number === 8 /* O */;
              });
          }
      });
      return hasElement;
  }
  /**
   * Potential hydrogen acceptor
   */
  function addHydrogenAcceptors(structure, features) {
      var ref = valenceModel(structure.data);
      var charge = ref.charge;
      var implicitH = ref.implicitH;
      var idealGeometry = ref.idealGeometry;
      structure.eachAtom(function (a) {
          var state = createFeatureState(5 /* HydrogenAcceptor */);
          var an = a.number;
          if (an === 8 /* O */) {
              // Basically assume all oxygen atoms are acceptors!
              addAtom(state, a);
              addFeature(features, state);
          }
          else if (an === 7 /* N */) {
              if (isHistidineNitrogen(a)) {
                  // include both nitrogen atoms in histidine due to
                  // their often ambiguous protonation assignment
                  addAtom(state, a);
                  addFeature(features, state);
              }
              else if (charge[a.index] < 1) {
                  // Neutral nitrogen might be an acceptor
                  // It must have at least one lone pair not conjugated
                  var totalBonds = a.bondCount + implicitH[a.index];
                  var ig = idealGeometry[a.index];
                  if ((ig === 4 /* Tetrahedral */ && totalBonds < 4) ||
                      (ig === 3 /* Trigonal */ && totalBonds < 3) ||
                      (ig === 2 /* Linear */ && totalBonds < 2)) {
                      addAtom(state, a);
                      addFeature(features, state);
                  }
              }
          }
          else if (an === 16) { // S
              if (a.resname === 'CYS' || a.resname === 'MET' || a.formalCharge === -1) {
                  addAtom(state, a);
                  addFeature(features, state);
              }
          }
      });
  }
  /**
   * Atom that is only bound to carbon or hydrogen
   */
  // function isHydrocarbon (atom: AtomProxy) {
  //   let flag = true
  //   atom.eachBondedAtom(ap => {
  //     const e = ap.element
  //     if (e !== 'C' && e !== 'H') flag = false
  //   })
  //   return flag
  // }
  function isHistidineNitrogen(ap) {
      return ap.resname === 'HIS' && ap.number == 7 /* N */ && ap.isRing();
  }
  function isBackboneHydrogenBond(ap1, ap2) {
      return ap1.isBackbone() && ap2.isBackbone();
  }
  function isWaterHydrogenBond(ap1, ap2) {
      return ap1.isWater() && ap2.isWater();
  }
  function isHydrogenBond(ti, tj) {
      return ((ti === 5 /* HydrogenAcceptor */ && tj === 4 /* HydrogenDonor */) ||
          (ti === 4 /* HydrogenDonor */ && tj === 5 /* HydrogenAcceptor */));
  }
  function isWeakHydrogenBond(ti, tj) {
      return ((ti === 9 /* WeakHydrogenDonor */ && tj === 5 /* HydrogenAcceptor */) ||
          (ti === 5 /* HydrogenAcceptor */ && tj === 9 /* WeakHydrogenDonor */));
  }
  function getHydrogenBondType(ap1, ap2) {
      if (isWaterHydrogenBond(ap1, ap2)) {
          return 9 /* WaterHydrogenBond */;
      }
      else if (isBackboneHydrogenBond(ap1, ap2)) {
          return 10 /* BackboneHydrogenBond */;
      }
      else {
          return 4 /* HydrogenBond */;
      }
  }
  /**
   * All pairs of hydrogen donor and acceptor atoms
   */
  function addHydrogenBonds(structure, contacts, params) {
      if ( params === void 0 ) params = {};

      var maxHbondDist = defaults(params.maxHbondDist, ContactDefaultParams.maxHbondDist);
      var maxHbondSulfurDist = defaults(params.maxHbondSulfurDist, ContactDefaultParams.maxHbondSulfurDist);
      var maxHbondAccAngle = degToRad(defaults(params.maxHbondAccAngle, ContactDefaultParams.maxHbondAccAngle));
      var maxHbondDonAngle = degToRad(defaults(params.maxHbondDonAngle, ContactDefaultParams.maxHbondDonAngle));
      var maxHbondAccPlaneAngle = degToRad(defaults(params.maxHbondAccPlaneAngle, ContactDefaultParams.maxHbondAccPlaneAngle));
      var maxHbondDonPlaneAngle = degToRad(defaults(params.maxHbondDonPlaneAngle, ContactDefaultParams.maxHbondDonPlaneAngle));
      var masterIdx = defaults(params.masterModelIndex, ContactDefaultParams.masterModelIndex);
      var maxDist = Math.max(maxHbondDist, maxHbondSulfurDist);
      var maxHbondDistSq = maxHbondDist * maxHbondDist;
      var features = contacts.features;
      var spatialHash = contacts.spatialHash;
      var contactStore = contacts.contactStore;
      var featureSet = contacts.featureSet;
      var types = features.types;
      var centers = features.centers;
      var atomSets = features.atomSets;
      var x = centers.x;
      var y = centers.y;
      var z = centers.z;
      var n = types.length;
      var ref = valenceModel(structure.data);
      var idealGeometry = ref.idealGeometry;
      var donor = structure.getAtomProxy();
      var acceptor = structure.getAtomProxy();
      var loop = function ( i ) {
          spatialHash.eachWithin(x[i], y[i], z[i], maxDist, function (j, dSq) {
              if (j <= i)
                  { return; }
              var ti = types[i];
              var tj = types[j];
              var isWeak = isWeakHydrogenBond(ti, tj);
              if (!isWeak && !isHydrogenBond(ti, tj))
                  { return; }
              var ref = tj === 5 /* HydrogenAcceptor */ ? [i, j] : [j, i];
              var l = ref[0];
              var k = ref[1];
              donor.index = atomSets[l][0];
              acceptor.index = atomSets[k][0];
              if (acceptor.index === donor.index)
                  { return; } // DA to self
              if (invalidAtomContact(donor, acceptor, masterIdx))
                  { return; }
              if (donor.number !== 16 /* S */ && acceptor.number !== 16 /* S */ && dSq > maxHbondDistSq)
                  { return; }
              if (donor.connectedTo(acceptor))
                  { return; }
              var donorAngles = calcAngles(donor, acceptor);
              var idealDonorAngle = Angles.get(idealGeometry[donor.index]) || degToRad(120);
              if (donorAngles.some(function (donorAngle) {
                  return Math.abs(idealDonorAngle - donorAngle) > maxHbondDonAngle;
              }))
                  { return; }
              if (idealGeometry[donor.index] === 3 /* Trigonal */) {
                  var outOfPlane = calcPlaneAngle(donor, acceptor);
                  if (outOfPlane !== undefined && outOfPlane > maxHbondDonPlaneAngle)
                      { return; }
              }
              var acceptorAngles = calcAngles(acceptor, donor);
              var idealAcceptorAngle = Angles.get(idealGeometry[acceptor.index]) || degToRad(120);
              if (acceptorAngles.some(function (acceptorAngle) {
                  // Do not limit large acceptor angles
                  return idealAcceptorAngle - acceptorAngle > maxHbondAccAngle;
              }))
                  { return; }
              if (idealGeometry[acceptor.index] === 3 /* Trigonal */) {
                  var outOfPlane$1 = calcPlaneAngle(acceptor, donor);
                  if (outOfPlane$1 !== undefined && outOfPlane$1 > maxHbondAccPlaneAngle)
                      { return; }
              }
              featureSet.setBits(l, k);
              var bondType = isWeak ? 8 /* WeakHydrogenBond */ : getHydrogenBondType(donor, acceptor);
              contactStore.addContact(l, k, bondType);
          });
      };

      for (var i = 0; i < n; ++i) loop( i );
  }

  /**
   * @file Metal Binding
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   */
  var IonicTypeMetals = [
      3 /* LI */, 11 /* NA */, 19 /* K */, 37 /* RB */, 55 /* CS */,
      12 /* MG */, 20 /* CA */, 38 /* SR */, 56 /* BA */, 13 /* AL */,
      31 /* GA */, 49 /* IN */, 81 /* TL */, 21 /* SC */, 50 /* SN */,
      82 /* PB */, 83 /* BI */, 51 /* SB */, 80 /* HG */
  ];
  /**
   * Metal binding partners (dative bond or ionic-type interaction)
   */
  function addMetalBinding(structure, features) {
      structure.eachAtom(function (a) {
          var dative = false;
          var ionic = false;
          var isStandardAminoacid = AA3.includes(a.resname);
          var isStandardBase = Bases.includes(a.resname);
          if (!isStandardAminoacid && !isStandardBase) {
              if (a.isHalogen() || a.number === 8 /* O */ || a.number === 16 /* S */) {
                  dative = true;
                  ionic = true;
              }
              else if (a.number === 7 /* N */) {
                  dative = true;
              }
          }
          else if (isStandardAminoacid) {
              // main chain oxygen atom or oxygen, nitrogen and sulfur from specific amino acids
              if (a.number === 8 /* O */) {
                  if (['ASP', 'GLU', 'SER', 'THR', 'TYR', 'ASN', 'GLN'].includes(a.resname) && a.isSidechain()) {
                      dative = true;
                      ionic = true;
                  }
                  else if (a.isBackbone()) {
                      dative = true;
                      ionic = true;
                  }
              }
              else if (a.number === 16 /* S */ && 'CYS' === a.resname) {
                  dative = true;
                  ionic = true;
              }
              else if (a.number === 7 /* N */) {
                  if (a.resname === 'HIS' && a.isSidechain()) {
                      dative = true;
                  }
              }
          }
          else if (isStandardBase) {
              // http://pubs.acs.org/doi/pdf/10.1021/acs.accounts.6b00253
              // http://onlinelibrary.wiley.com/doi/10.1002/anie.200900399/full
              if (a.number === 8 /* O */ && a.isBackbone()) {
                  dative = true;
                  ionic = true;
              }
              else if (['N3', 'N4', 'N7'].includes(a.atomname)) {
                  dative = true;
              }
              else if (['O2', 'O4', 'O6'].includes(a.atomname)) {
                  dative = true;
                  ionic = true;
              }
          }
          if (dative) {
              var state = createFeatureState(11 /* DativeBondPartner */);
              addAtom(state, a);
              addFeature(features, state);
          }
          if (ionic) {
              var state$1 = createFeatureState(10 /* IonicTypePartner */);
              addAtom(state$1, a);
              addFeature(features, state$1);
          }
      });
  }
  /**
   * Metal Pi complexation partner
   */
  // export function addMetalPiPartners (structure: Structure, features: Features) {
  //   const { charge } = valenceModel(structure.data)
  //   structure.eachAtom(a => {
  //     const state = createFeatureState(FeatureType.MetalPiPartner)
  //     const resname = a.resname
  //     const element = a.element
  //     const atomname = a.atomname
  //     if (!a.isPolymer()) {
  //       // water oxygen, as well as oxygen from carboxylate, phosphoryl, phenolate, alcohol;
  //       // nitrogen from imidazole; sulfur from thiolate
  //       if (element === 'O') {
  //         // Water oxygen
  //         if (a.bondCount === 0 || a.isWater()) {
  //           addAtom(state, a)
  //           addFeature(features, state)
  //           return
  //         }
  //         // Oxygen in alcohol (R-[O]-H)
  //         if (a.bondCount === 2 && charge[ a.index ] || a.hasBondToElement('H')) {
  //           addAtom(state, a)
  //           addFeature(features, state)
  //           return
  //         }
  //         // Phenolate oxygen
  //         if (hasAromaticNeighbour(a) && !a.aromatic) {
  //           addAtom(state, a)
  //           addFeature(features, state)
  //           return
  //         }
  //         // Carboxylic acid oxygen
  //         if (a.bondToElementCount('C') === 1) {
  //           let flag = false
  //           a.eachBondedAtom(ba => {
  //             if (ba.element === 'C' && ba.bondToElementCount('O') === 2 && ba.bondToElementCount('C') === 1) {
  //               flag = true
  //             }
  //           })
  //           if (flag) {
  //             addAtom(state, a)
  //             addFeature(features, state)
  //             return
  //           }
  //         }
  //         // Phosphoryl oxygen
  //         if (a.bondToElementCount('P') === 1) {
  //           let flag = false
  //           a.eachBondedAtom(ba => {
  //             if (ba.element === 'P' && ba.bondToElementCount('O') >= 3) {
  //               flag = true
  //             }
  //           })
  //           if (flag) {
  //             addAtom(state, a)
  //             addFeature(features, state)
  //             return
  //           }
  //         }
  //       } else if (element === 'N') {
  //         // Imidazole/pyrrole or similar
  //         if (a.bondToElementCount('C') === 2) {
  //           addAtom(state, a)
  //           addFeature(features, state)
  //           return
  //         }
  //       } else if (element === 'S') {
  //         // Thiolate
  //         if (hasAromaticNeighbour(a) && !a.aromatic) {
  //           addAtom(state, a)
  //           addFeature(features, state)
  //           return
  //         }
  //         // Sulfur in Iron sulfur cluster
  //         const ironCount = a.bondToElementCount('FE')
  //         if (ironCount > 0 && ironCount === a.bondCount) {
  //           addAtom(state, a)
  //           addFeature(features, state)
  //           return
  //         }
  //       }
  //     }
  //   })
  // }
  function addMetals(structure, features) {
      structure.eachAtom(function (a) {
          if (a.isTransitionMetal() || a.number === 30 /* ZN */ || a.number === 48 /* CD */) {
              var state = createFeatureState(12 /* TransitionMetal */);
              addAtom(state, a);
              addFeature(features, state);
          }
          else if (IonicTypeMetals.includes(a.number)) {
              var state$1 = createFeatureState(13 /* IonicTypeMetal */);
              addAtom(state$1, a);
              addFeature(features, state$1);
          }
      });
  }
  function isMetalComplex(ti, tj) {
      if (ti === 12 /* TransitionMetal */) {
          return (tj === 11 /* DativeBondPartner */ ||
              tj === 12 /* TransitionMetal */);
      }
      else if (ti === 13 /* IonicTypeMetal */) {
          return (tj === 10 /* IonicTypePartner */);
      }
  }
  /**
   * Metal complexes of metals and appropriate groups in protein and ligand, including water
   */
  function addMetalComplexation(structure, contacts, params) {
      if ( params === void 0 ) params = {};

      var maxMetalDist = defaults(params.maxMetalDist, ContactDefaultParams.maxMetalDist);
      var masterIdx = defaults(params.masterModelIndex, ContactDefaultParams.masterModelIndex);
      var features = contacts.features;
      var spatialHash = contacts.spatialHash;
      var contactStore = contacts.contactStore;
      var featureSet = contacts.featureSet;
      var types = features.types;
      var centers = features.centers;
      var atomSets = features.atomSets;
      var x = centers.x;
      var y = centers.y;
      var z = centers.z;
      var n = types.length;
      var ap1 = structure.getAtomProxy();
      var ap2 = structure.getAtomProxy();
      var loop = function ( i ) {
          spatialHash.eachWithin(x[i], y[i], z[i], maxMetalDist, function (j, dSq) {
              if (j <= i)
                  { return; }
              ap1.index = atomSets[i][0];
              ap2.index = atomSets[j][0];
              if (invalidAtomContact(ap1, ap2, masterIdx))
                  { return; }
              var m1 = ap1.isMetal();
              var m2 = ap2.isMetal();
              if (!m1 && !m2)
                  { return; }
              var ref = m1 ? [types[i], types[j]] : [types[j], types[i]];
              var ti = ref[0];
              var tj = ref[1];
              if (isMetalComplex(ti, tj)) {
                  featureSet.setBits(i, j);
                  contactStore.addContact(i, j, 7 /* MetalCoordination */);
              }
          });
      };

      for (var i = 0; i < n; ++i) loop( i );
  }

  /**
   * @file Hydrophobic
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   */
  /**
   * Hydrophobic carbon (only bonded to carbon or hydrogen); fluorine
   */
  function addHydrophobic(structure, features) {
      structure.eachAtom(function (a) {
          var state = createFeatureState(8 /* Hydrophobic */);
          var flag = false;
          if (a.number === 6 /* C */) {
              flag = true;
              a.eachBondedAtom(function (ap) {
                  var an = ap.number;
                  if (an !== 6 /* C */ && an !== 1 /* H */)
                      { flag = false; }
              });
          }
          else if (a.number === 9 /* F */) {
              flag = true;
          }
          if (flag) {
              addAtom(state, a);
              addFeature(features, state);
          }
      });
  }
  function isHydrophobicContact(ti, tj) {
      return ti === 8 /* Hydrophobic */ && tj === 8 /* Hydrophobic */;
  }
  /**
   * All hydrophobic contacts
   */
  function addHydrophobicContacts(structure, contacts, params) {
      if ( params === void 0 ) params = {};

      var maxHydrophobicDist = defaults(params.maxHydrophobicDist, ContactDefaultParams.maxHydrophobicDist);
      var masterIdx = defaults(params.masterModelIndex, ContactDefaultParams.masterModelIndex);
      var features = contacts.features;
      var spatialHash = contacts.spatialHash;
      var contactStore = contacts.contactStore;
      var featureSet = contacts.featureSet;
      var types = features.types;
      var centers = features.centers;
      var atomSets = features.atomSets;
      var x = centers.x;
      var y = centers.y;
      var z = centers.z;
      var n = types.length;
      var ap1 = structure.getAtomProxy();
      var ap2 = structure.getAtomProxy();
      var loop = function ( i ) {
          spatialHash.eachWithin(x[i], y[i], z[i], maxHydrophobicDist, function (j, dSq) {
              if (j <= i)
                  { return; }
              ap1.index = atomSets[i][0];
              ap2.index = atomSets[j][0];
              if (invalidAtomContact(ap1, ap2, masterIdx))
                  { return; }
              if (ap1.number === 9 /* F */ && ap2.number === 9 /* F */)
                  { return; }
              if (ap1.connectedTo(ap2))
                  { return; }
              if (isHydrophobicContact(types[i], types[j])) {
                  featureSet.setBits(i, j);
                  contactStore.addContact(i, j, 6 /* Hydrophobic */);
              }
          });
      };

      for (var i = 0; i < n; ++i) loop( i );
  }

  /**
   * @file Halogen Bonds
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @author Fred Ludlow <Fred.Ludlow@astx.com>
   */
  var halBondElements = [17, 35, 53, 85];
  /**
   * Halogen bond donors (X-C, with X one of Cl, Br, I or At) not F!
   */
  function addHalogenDonors(structure, features) {
      structure.eachAtom(function (a) {
          if (halBondElements.includes(a.number) && a.bondToElementCount(6 /* C */) === 1) {
              var state = createFeatureState(6 /* HalogenDonor */);
              addAtom(state, a);
              addFeature(features, state);
          }
      });
  }
  var X = [7 /* N */, 8 /* O */, 16 /* S */];
  var Y = [6 /* C */, 7 /* N */, 15 /* P */, 16 /* S */];
  /**
   * Halogen bond acceptors (Y-{O|N|S}, with Y=C,P,N,S)
   */
  function addHalogenAcceptors(structure, features) {
      structure.eachAtom(function (a) {
          if (X.includes(a.number)) {
              var flag = false;
              a.eachBondedAtom(function (ba) {
                  if (Y.includes(ba.number)) {
                      flag = true;
                  }
              });
              if (flag) {
                  var state = createFeatureState(7 /* HalogenAcceptor */);
                  addAtom(state, a);
                  addFeature(features, state);
              }
          }
      });
  }
  function isHalogenBond(ti, tj) {
      return ((ti === 7 /* HalogenAcceptor */ && tj === 6 /* HalogenDonor */) ||
          (ti === 6 /* HalogenDonor */ && tj === 7 /* HalogenAcceptor */));
  }
  // http://www.pnas.org/content/101/48/16789.full
  var OptimalHalogenAngle = degToRad(180); // adjusted from 165 to account for spherical statistics
  var OptimalAcceptorAngle = degToRad(120);
  /**
   * All pairs of halogen donor and acceptor atoms
   */
  function addHalogenBonds(structure, contacts, params) {
      if ( params === void 0 ) params = {};

      var maxHalogenBondDist = defaults(params.maxHalogenBondDist, ContactDefaultParams.maxHalogenBondDist);
      var maxHalogenBondAngle = degToRad(defaults(params.maxHalogenBondAngle, ContactDefaultParams.maxHalogenBondAngle));
      var masterIdx = defaults(params.masterModelIndex, ContactDefaultParams.masterModelIndex);
      var features = contacts.features;
      var spatialHash = contacts.spatialHash;
      var contactStore = contacts.contactStore;
      var featureSet = contacts.featureSet;
      var types = features.types;
      var centers = features.centers;
      var atomSets = features.atomSets;
      var x = centers.x;
      var y = centers.y;
      var z = centers.z;
      var n = types.length;
      var ap1 = structure.getAtomProxy();
      var ap2 = structure.getAtomProxy();
      var loop = function ( i ) {
          spatialHash.eachWithin(x[i], y[i], z[i], maxHalogenBondDist, function (j, dSq) {
              if (j <= i)
                  { return; }
              ap1.index = atomSets[i][0];
              ap2.index = atomSets[j][0];
              if (invalidAtomContact(ap1, ap2, masterIdx))
                  { return; }
              if (!isHalogenBond(types[i], types[j]))
                  { return; }
              var ref = types[i] === 6 /* HalogenDonor */ ? [ap1, ap2] : [ap2, ap1];
              var halogen = ref[0];
              var acceptor = ref[1];
              var halogenAngles = calcAngles(halogen, acceptor);
              // Singly bonded halogen only (not bromide ion for example)
              if (halogenAngles.length !== 1)
                  { return; }
              if (OptimalHalogenAngle - halogenAngles[0] > maxHalogenBondAngle)
                  { return; }
              var acceptorAngles = calcAngles(acceptor, halogen);
              // Angle must be defined. Excludes water as acceptor. Debatable
              if (acceptorAngles.length === 0)
                  { return; }
              if (acceptorAngles.some(function (acceptorAngle) {
                  return (OptimalAcceptorAngle - acceptorAngle > maxHalogenBondAngle);
              }))
                  { return; }
              featureSet.setBits(i, j);
              contactStore.addContact(i, j, 5 /* HalogenBond */);
          });
      };

      for (var i = 0; i < n; ++i) loop( i );
  }

  /**
   * @file Refine Contacts
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  // also allows intra-residue contacts
  function invalidAtomContact$1(ap1, ap2, masterIdx) {
      return !isMasterContact(ap1, ap2, masterIdx) && (ap1.modelIndex !== ap2.modelIndex ||
          (ap1.altloc && ap2.altloc && ap1.altloc !== ap2.altloc));
  }
  function refineLineOfSight(structure, contacts, params) {
      if ( params === void 0 ) params = {};

      if (exports.Debug)
          { Log.time('refineLineOfSight'); }
      var lineOfSightDistFactor = defaults(params.lineOfSightDistFactor, ContactDefaultParams.lineOfSightDistFactor);
      var masterIdx = defaults(params.masterModelIndex, ContactDefaultParams.masterModelIndex);
      var spatialHash = structure.spatialHash;
      var contactSet = contacts.contactSet;
      var contactStore = contacts.contactStore;
      var features = contacts.features;
      var index1 = contactStore.index1;
      var index2 = contactStore.index2;
      var centers = features.centers;
      var atomSets = features.atomSets;
      var x = centers.x;
      var y = centers.y;
      var z = centers.z;
      var ac1 = structure.getAtomProxy();
      var ac2 = structure.getAtomProxy();
      var aw = structure.getAtomProxy();
      var c1 = new Vector3();
      var c2 = new Vector3();
      var lineOfSightDist = 3 * lineOfSightDistFactor;
      var lineOfSightDistFactorSq = lineOfSightDistFactor * lineOfSightDistFactor;
      contactSet.forEach(function (i) {
          c1.set(x[index1[i]], y[index1[i]], z[index1[i]]);
          c2.set(x[index2[i]], y[index2[i]], z[index2[i]]);
          var cx = (c1.x + c2.x) / 2;
          var cy = (c1.y + c2.y) / 2;
          var cz = (c1.z + c2.z) / 2;
          var as1 = atomSets[index1[i]];
          var as2 = atomSets[index2[i]];
          ac1.index = as1[0];
          ac2.index = as2[0];
          spatialHash.eachWithin(cx, cy, cz, lineOfSightDist, function (j, dSq) {
              aw.index = j;
              if (aw.number !== 1 /* H */ &&
                  (aw.vdw * aw.vdw * lineOfSightDistFactorSq) > dSq &&
                  !invalidAtomContact$1(ac1, aw, masterIdx) &&
                  !invalidAtomContact$1(ac2, aw, masterIdx) &&
                  !as1.includes(j) &&
                  !as2.includes(j) &&
                  // to ignore atoms in the center of functional groups
                  c1.distanceToSquared(aw) > 1 &&
                  c2.distanceToSquared(aw) > 1) {
                  contactSet.clear(i);
                  if (exports.Debug)
                      { Log.log('removing', ac1.qualifiedName(), ac2.qualifiedName(), 'because', aw.qualifiedName()); }
              }
          });
      });
      if (exports.Debug)
          { Log.timeEnd('refineLineOfSight'); }
  }
  /**
   * For atoms interacting with several atoms in the same residue
   * only the one with the closest distance is kept.
   */
  function refineHydrophobicContacts(structure, contacts) {
      var contactSet = contacts.contactSet;
      var contactStore = contacts.contactStore;
      var features = contacts.features;
      var type = contactStore.type;
      var index1 = contactStore.index1;
      var index2 = contactStore.index2;
      var atomSets = features.atomSets;
      var ap1 = structure.getAtomProxy();
      var ap2 = structure.getAtomProxy();
      var residueContactDict = {};
      /* keep only closest contact between residues */
      var handleResidueContact = function (dist, i, key) {
          var ref = residueContactDict[key] || [Infinity, -1];
          var minDist = ref[0];
          var minIndex = ref[1];
          if (dist < minDist) {
              if (minIndex !== -1)
                  { contactSet.clear(minIndex); }
              residueContactDict[key] = [dist, i];
          }
          else {
              contactSet.clear(i);
          }
      };
      contactSet.forEach(function (i) {
          if (type[i] !== 6 /* Hydrophobic */)
              { return; }
          ap1.index = atomSets[index1[i]][0];
          ap2.index = atomSets[index2[i]][0];
          var dist = ap1.distanceTo(ap2);
          handleResidueContact(dist, i, ((ap1.index) + "|" + (ap2.residueIndex)));
          handleResidueContact(dist, i, ((ap2.index) + "|" + (ap1.residueIndex)));
      });
  }
  function isHydrogenBondType(type) {
      return (type === 4 /* HydrogenBond */ ||
          type === 9 /* WaterHydrogenBond */ ||
          type === 10 /* BackboneHydrogenBond */);
  }
  /**
   * Remove hydrogen bonds between groups that also form
   * a salt bridge between each other
   */
  function refineSaltBridges(structure, contacts) {
      var contactSet = contacts.contactSet;
      var contactStore = contacts.contactStore;
      var features = contacts.features;
      var type = contactStore.type;
      var index1 = contactStore.index1;
      var index2 = contactStore.index2;
      var atomSets = features.atomSets;
      var ionicInteractionDict = {};
      var add = function (idx, i) {
          if (!ionicInteractionDict[idx])
              { ionicInteractionDict[idx] = []; }
          ionicInteractionDict[idx].push(i);
      };
      contactSet.forEach(function (i) {
          if (type[i] !== 1 /* IonicInteraction */)
              { return; }
          atomSets[index1[i]].forEach(function (idx) { return add(idx, i); });
          atomSets[index2[i]].forEach(function (idx) { return add(idx, i); });
      });
      contactSet.forEach(function (i) {
          if (!isHydrogenBondType(type[i]))
              { return; }
          var iil1 = ionicInteractionDict[atomSets[index1[i]][0]];
          var iil2 = ionicInteractionDict[atomSets[index2[i]][0]];
          if (!iil1 || !iil2)
              { return; }
          var n = iil1.length;
          for (var j = 0; j < n; ++j) {
              if (iil2.includes(iil1[j])) {
                  contactSet.clear(i);
                  return;
              }
          }
      });
  }
  /**
   * Remove hydrophobic and cation-pi interactions between groups that also form
   * a pi-stacking interaction between each other
   */
  function refinePiStacking(structure, contacts) {
      var contactSet = contacts.contactSet;
      var contactStore = contacts.contactStore;
      var features = contacts.features;
      var type = contactStore.type;
      var index1 = contactStore.index1;
      var index2 = contactStore.index2;
      var atomSets = features.atomSets;
      var piStackingDict = {};
      var add = function (idx, i) {
          if (!piStackingDict[idx])
              { piStackingDict[idx] = []; }
          piStackingDict[idx].push(i);
      };
      contactSet.forEach(function (i) {
          if (type[i] !== 3 /* PiStacking */)
              { return; }
          atomSets[index1[i]].forEach(function (idx) { return add(idx, i); });
          atomSets[index2[i]].forEach(function (idx) { return add(idx, i); });
      });
      contactSet.forEach(function (i) {
          if (type[i] !== 6 /* Hydrophobic */ &&
              type[i] !== 2 /* CationPi */)
              { return; }
          var pil1 = piStackingDict[atomSets[index1[i]][0]];
          var pil2 = piStackingDict[atomSets[index2[i]][0]];
          if (!pil1 || !pil2)
              { return; }
          var n = pil1.length;
          for (var j = 0; j < n; ++j) {
              if (pil2.includes(pil1[j])) {
                  contactSet.clear(i);
                  return;
              }
          }
      });
  }
  /**
   * Remove ionic interactions between groups that also form
   * a metal coordination between each other
   */
  function refineMetalCoordination(structure, contacts) {
      var contactSet = contacts.contactSet;
      var contactStore = contacts.contactStore;
      var features = contacts.features;
      var type = contactStore.type;
      var index1 = contactStore.index1;
      var index2 = contactStore.index2;
      var atomSets = features.atomSets;
      var ionicInteractionDict = {};
      var add = function (idx, i) {
          if (!ionicInteractionDict[idx])
              { ionicInteractionDict[idx] = []; }
          ionicInteractionDict[idx].push(i);
      };
      contactSet.forEach(function (i) {
          if (type[i] !== 1 /* IonicInteraction */)
              { return; }
          atomSets[index1[i]].forEach(function (idx) { return add(idx, i); });
          atomSets[index2[i]].forEach(function (idx) { return add(idx, i); });
      });
      contactSet.forEach(function (i) {
          if (type[i] !== 7 /* MetalCoordination */)
              { return; }
          var iil1 = ionicInteractionDict[atomSets[index1[i]][0]];
          var iil2 = ionicInteractionDict[atomSets[index2[i]][0]];
          if (!iil1 || !iil2)
              { return; }
          var n = iil1.length;
          for (var j = 0; j < n; ++j) {
              if (iil2.includes(iil1[j])) {
                  contactSet.clear(iil1[j]);
                  return;
              }
          }
      });
  }
  // TODO: refactor refineSaltBridges, refinePiStacking and refineMetalCoordination to be DRY

  /**
   * @file Contact
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   */
  var ContactDefaultParams = {
      maxHydrophobicDist: 4.0,
      maxHbondDist: 3.5,
      maxHbondSulfurDist: 4.1,
      maxHbondAccAngle: 45,
      maxHbondDonAngle: 45,
      maxHbondAccPlaneAngle: 90,
      maxHbondDonPlaneAngle: 30,
      maxPiStackingDist: 5.5,
      maxPiStackingOffset: 2.0,
      maxPiStackingAngle: 30,
      maxCationPiDist: 6.0,
      maxCationPiOffset: 2.0,
      maxIonicDist: 5.0,
      maxHalogenBondDist: 4.0,
      maxHalogenBondAngle: 30,
      maxMetalDist: 3.0,
      refineSaltBridges: true,
      masterModelIndex: -1,
      lineOfSightDistFactor: 1.0
  };
  function isMasterContact(ap1, ap2, masterIdx) {
      return ((ap1.modelIndex === masterIdx && ap2.modelIndex !== masterIdx) ||
          (ap2.modelIndex === masterIdx && ap1.modelIndex !== masterIdx));
  }
  function invalidAtomContact(ap1, ap2, masterIdx) {
      return !isMasterContact(ap1, ap2, masterIdx) && (ap1.modelIndex !== ap2.modelIndex ||
          ap1.residueIndex === ap2.residueIndex ||
          (ap1.altloc && ap2.altloc && ap1.altloc !== ap2.altloc));
  }
  function createContacts(features) {
      var types = features.types;
      var centers = features.centers;
      var spatialHash = new SpatialHash(centers);
      var contactStore = new ContactStore();
      var featureSet = new BitArray(types.length, false);
      return { features: features, spatialHash: spatialHash, contactStore: contactStore, featureSet: featureSet };
  }
  function createFrozenContacts(contacts) {
      var ref = contacts.contactStore;
      var index1 = ref.index1;
      var index2 = ref.index2;
      var count = ref.count;
      var adjacencyList = createAdjacencyList({
          nodeArray1: index1,
          nodeArray2: index2,
          edgeCount: count,
          nodeCount: contacts.featureSet.length
      });
      var contactSet = new BitArray(contacts.contactStore.count, true);
      return Object.assign({ adjacencyList: adjacencyList, contactSet: contactSet }, contacts);
  }
  function calculateFeatures(structure) {
      var features = createFeatures();
      if (exports.Debug)
          { Log.time('calculateFeatures'); }
      addPositiveCharges(structure, features);
      addNegativeCharges(structure, features);
      addAromaticRings(structure, features);
      addHydrogenAcceptors(structure, features);
      addHydrogenDonors(structure, features);
      addWeakHydrogenDonors(structure, features);
      addMetalBinding(structure, features);
      addMetals(structure, features);
      addHydrophobic(structure, features);
      addHalogenAcceptors(structure, features);
      addHalogenDonors(structure, features);
      if (exports.Debug)
          { Log.timeEnd('calculateFeatures'); }
      return features;
  }
  function calculateContacts(structure, params) {
      if ( params === void 0 ) params = ContactDefaultParams;

      var features = calculateFeatures(structure);
      var contacts = createContacts(features);
      if (exports.Debug)
          { Log.time('calculateContacts'); }
      addChargedContacts(structure, contacts, params);
      addHydrogenBonds(structure, contacts, params);
      addMetalComplexation(structure, contacts, params);
      addHydrophobicContacts(structure, contacts, params);
      addHalogenBonds(structure, contacts, params);
      var frozenContacts = createFrozenContacts(contacts);
      refineLineOfSight(structure, frozenContacts, params);
      refineHydrophobicContacts(structure, frozenContacts);
      if (params.refineSaltBridges)
          { refineSaltBridges(structure, frozenContacts); }
      refinePiStacking(structure, frozenContacts);
      refineMetalCoordination(structure, frozenContacts);
      if (exports.Debug)
          { Log.timeEnd('calculateContacts'); }
      return frozenContacts;
  }
  function contactTypeName(type) {
      switch (type) {
          case 4 /* HydrogenBond */:
          case 9 /* WaterHydrogenBond */:
          case 10 /* BackboneHydrogenBond */:
              return 'hydrogen bond';
          case 6 /* Hydrophobic */:
              return 'hydrophobic contact';
          case 5 /* HalogenBond */:
              return 'halogen bond';
          case 1 /* IonicInteraction */:
              return 'ionic interaction';
          case 7 /* MetalCoordination */:
              return 'metal coordination';
          case 2 /* CationPi */:
              return 'cation-pi interaction';
          case 3 /* PiStacking */:
              return 'pi-pi stacking';
          case 8 /* WeakHydrogenBond */:
              return 'weak hydrogen bond';
          default:
              return 'unknown contact';
      }
  }
  var ContactDataDefaultParams = {
      hydrogenBond: true,
      hydrophobic: true,
      halogenBond: true,
      ionicInteraction: true,
      metalCoordination: true,
      cationPi: true,
      piStacking: true,
      weakHydrogenBond: true,
      waterHydrogenBond: true,
      backboneHydrogenBond: true,
      radius: 1,
      filterSele: ''
  };
  var tmpColor = new Color();
  function contactColor(type) {
      switch (type) {
          case 4 /* HydrogenBond */:
          case 9 /* WaterHydrogenBond */:
          case 10 /* BackboneHydrogenBond */:
              return tmpColor.setHex(0x2B83BA).toArray();
          case 6 /* Hydrophobic */:
              return tmpColor.setHex(0x808080).toArray();
          case 5 /* HalogenBond */:
              return tmpColor.setHex(0x40FFBF).toArray();
          case 1 /* IonicInteraction */:
              return tmpColor.setHex(0xF0C814).toArray();
          case 7 /* MetalCoordination */:
              return tmpColor.setHex(0x8C4099).toArray();
          case 2 /* CationPi */:
              return tmpColor.setHex(0xFF8000).toArray();
          case 3 /* PiStacking */:
              return tmpColor.setHex(0x8CB366).toArray();
          case 8 /* WeakHydrogenBond */:
              return tmpColor.setHex(0xC5DDEC).toArray();
          default:
              return tmpColor.setHex(0xCCCCCC).toArray();
      }
  }
  function getContactData(contacts, structure, params) {
      var p = createParams(params, ContactDataDefaultParams);
      var types = [];
      if (p.hydrogenBond)
          { types.push(4 /* HydrogenBond */); }
      if (p.hydrophobic)
          { types.push(6 /* Hydrophobic */); }
      if (p.halogenBond)
          { types.push(5 /* HalogenBond */); }
      if (p.ionicInteraction)
          { types.push(1 /* IonicInteraction */); }
      if (p.metalCoordination)
          { types.push(7 /* MetalCoordination */); }
      if (p.cationPi)
          { types.push(2 /* CationPi */); }
      if (p.piStacking)
          { types.push(3 /* PiStacking */); }
      if (p.weakHydrogenBond)
          { types.push(8 /* WeakHydrogenBond */); }
      if (p.waterHydrogenBond)
          { types.push(9 /* WaterHydrogenBond */); }
      if (p.backboneHydrogenBond)
          { types.push(10 /* BackboneHydrogenBond */); }
      var features = contacts.features;
      var contactSet = contacts.contactSet;
      var contactStore = contacts.contactStore;
      var centers = features.centers;
      var atomSets = features.atomSets;
      var x = centers.x;
      var y = centers.y;
      var z = centers.z;
      var index1 = contactStore.index1;
      var index2 = contactStore.index2;
      var type = contactStore.type;
      var position1 = [];
      var position2 = [];
      var color = [];
      var radius = [];
      var picking = [];
      var filterSet;
      if (p.filterSele) {
          if (Array.isArray(p.filterSele)) {
              filterSet = p.filterSele.map(function (sele) {
                  return structure.getAtomSet(new Selection(sele));
              });
          }
          else {
              filterSet = structure.getAtomSet(new Selection(p.filterSele));
          }
      }
      contactSet.forEach(function (i) {
          var ti = type[i];
          if (!types.includes(ti))
              { return; }
          if (filterSet) {
              var idx1 = atomSets[index1[i]][0];
              var idx2 = atomSets[index2[i]][0];
              if (Array.isArray(filterSet)) {
                  if (!(filterSet[0].isSet(idx1) && filterSet[1].isSet(idx2) || (filterSet[1].isSet(idx1) && filterSet[0].isSet(idx2))))
                      { return; }
              }
              else {
                  if (!filterSet.isSet(idx1) && !filterSet.isSet(idx2))
                      { return; }
              }
          }
          var k = index1[i];
          var l = index2[i];
          position1.push(x[k], y[k], z[k]);
          position2.push(x[l], y[l], z[l]);
          color.push.apply(color, contactColor(ti));
          radius.push(p.radius);
          picking.push(i);
      });
      return {
          position1: new Float32Array(position1),
          position2: new Float32Array(position2),
          color: new Float32Array(color),
          color2: new Float32Array(color),
          radius: new Float32Array(radius),
          picking: new ContactPicker(picking, contacts, structure)
      };
  }
  function getLabelData(contactData, params) {
      var position = calculateCenterArray(contactData.position1, contactData.position2);
      var text = [];
      var direction = calculateDirectionArray(contactData.position1, contactData.position2);
      var n = direction.length / 3;
      for (var i = 0; i < n; i++) {
          var j = 3 * i;
          var d = Math.sqrt(Math.pow(direction[j], 2) + Math.pow(direction[j + 1], 2) + Math.pow(direction[j + 2], 2));
          switch (params.unit) {
              case 'angstrom':
                  text[i] = d.toFixed(2) + ' ' + String.fromCharCode(0x212B);
                  break;
              case 'nm':
                  text[i] = (d / 10).toFixed(2) + ' nm';
                  break;
              default:
                  text[i] = d.toFixed(2);
                  break;
          }
      }
      return {
          position: position,
          size: uniformArray(position.length / 3, params.size),
          color: contactData.color,
          text: text
      };
  }

  /**
   * @file Picker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Picker class
   * @interface
   */
  var Picker = function Picker(array) {
      this.array = array;
  };

  var prototypeAccessors$q = { type: { configurable: true },data: { configurable: true } };
  prototypeAccessors$q.type.get = function () { return ''; };
  prototypeAccessors$q.data.get = function () { return {}; };
  /**
   * Get the index for the given picking id
   * @param  {Integer} pid - the picking id
   * @return {Integer} the index
   */
  Picker.prototype.getIndex = function getIndex (pid) {
      return this.array ? this.array[pid] : pid;
  };
  /**
   * Get object data
   * @abstract
   * @param  {Integer} pid - the picking id
   * @return {Object} the object data
   */
  Picker.prototype.getObject = function getObject (pid) {
      return {};
  };
  Picker.prototype._applyTransformations = function _applyTransformations (vector, instance, component) {
      if (instance) {
          vector.applyMatrix4(instance.matrix);
      }
      if (component) {
          vector.applyMatrix4(component.matrix);
      }
      return vector;
  };
  /**
   * Get object position
   * @abstract
   * @param  {Integer} pid - the picking id
   * @return {Vector3} the object position
   */
  Picker.prototype._getPosition = function _getPosition (pid) {
      return new Vector3();
  };
  /**
   * Get position for the given picking id
   * @param  {Integer} pid - the picking id
   * @param  {Object} instance - the instance that should be applied
   * @param  {Component} component - the component of the picked object
   * @return {Vector3} the position
   */
  Picker.prototype.getPosition = function getPosition (pid, instance, component) {
      return this._applyTransformations(this._getPosition(pid), instance, component);
  };

  Object.defineProperties( Picker.prototype, prototypeAccessors$q );
  /**
   * Shape picker class
   * @interface
   */
  var ShapePicker = /*@__PURE__*/(function (Picker) {
      function ShapePicker(shape) {
          Picker.call(this);
          this.shape = shape;
      }

      if ( Picker ) ShapePicker.__proto__ = Picker;
      ShapePicker.prototype = Object.create( Picker && Picker.prototype );
      ShapePicker.prototype.constructor = ShapePicker;

      var prototypeAccessors$1 = { primitive: { configurable: true },data: { configurable: true },type: { configurable: true } };
      prototypeAccessors$1.primitive.get = function () { return; };
      prototypeAccessors$1.data.get = function () { return this.shape; };
      prototypeAccessors$1.type.get = function () { return this.primitive.type; };
      ShapePicker.prototype.getObject = function getObject (pid) {
          return this.primitive.objectFromShape(this.shape, this.getIndex(pid));
      };
      ShapePicker.prototype._getPosition = function _getPosition (pid) {
          return this.primitive.positionFromShape(this.shape, this.getIndex(pid));
      };

      Object.defineProperties( ShapePicker.prototype, prototypeAccessors$1 );

      return ShapePicker;
  }(Picker));
  //
  var CylinderPicker = /*@__PURE__*/(function (ShapePicker) {
      function CylinderPicker () {
          ShapePicker.apply(this, arguments);
      }

      if ( ShapePicker ) CylinderPicker.__proto__ = ShapePicker;
      CylinderPicker.prototype = Object.create( ShapePicker && ShapePicker.prototype );
      CylinderPicker.prototype.constructor = CylinderPicker;

      var prototypeAccessors$2 = { primitive: { configurable: true } };

      prototypeAccessors$2.primitive.get = function () { return CylinderPrimitive; };

      Object.defineProperties( CylinderPicker.prototype, prototypeAccessors$2 );

      return CylinderPicker;
  }(ShapePicker));
  var ArrowPicker = /*@__PURE__*/(function (ShapePicker) {
      function ArrowPicker () {
          ShapePicker.apply(this, arguments);
      }

      if ( ShapePicker ) ArrowPicker.__proto__ = ShapePicker;
      ArrowPicker.prototype = Object.create( ShapePicker && ShapePicker.prototype );
      ArrowPicker.prototype.constructor = ArrowPicker;

      var prototypeAccessors$3 = { primitive: { configurable: true } };

      prototypeAccessors$3.primitive.get = function () { return ArrowPrimitive; };

      Object.defineProperties( ArrowPicker.prototype, prototypeAccessors$3 );

      return ArrowPicker;
  }(ShapePicker));
  var AtomPicker = /*@__PURE__*/(function (Picker) {
      function AtomPicker(array, structure) {
          Picker.call(this, array);
          this.structure = structure;
      }

      if ( Picker ) AtomPicker.__proto__ = Picker;
      AtomPicker.prototype = Object.create( Picker && Picker.prototype );
      AtomPicker.prototype.constructor = AtomPicker;

      var prototypeAccessors$4 = { type: { configurable: true },data: { configurable: true } };
      prototypeAccessors$4.type.get = function () { return 'atom'; };
      prototypeAccessors$4.data.get = function () { return this.structure; };
      AtomPicker.prototype.getObject = function getObject (pid) {
          return this.structure.getAtomProxy(this.getIndex(pid));
      };
      AtomPicker.prototype._getPosition = function _getPosition (pid) {
          return new Vector3().copy(this.getObject(pid));
      };

      Object.defineProperties( AtomPicker.prototype, prototypeAccessors$4 );

      return AtomPicker;
  }(Picker));
  var AxesPicker = /*@__PURE__*/(function (Picker) {
      function AxesPicker(axes) {
          Picker.call(this);
          this.axes = axes;
      }

      if ( Picker ) AxesPicker.__proto__ = Picker;
      AxesPicker.prototype = Object.create( Picker && Picker.prototype );
      AxesPicker.prototype.constructor = AxesPicker;

      var prototypeAccessors$5 = { type: { configurable: true },data: { configurable: true } };
      prototypeAccessors$5.type.get = function () { return 'axes'; };
      prototypeAccessors$5.data.get = function () { return this.axes; };
      AxesPicker.prototype.getObject = function getObject ( /* pid */) {
          return {
              axes: this.axes
          };
      };
      AxesPicker.prototype._getPosition = function _getPosition ( /* pid */) {
          return this.axes.center.clone();
      };

      Object.defineProperties( AxesPicker.prototype, prototypeAccessors$5 );

      return AxesPicker;
  }(Picker));
  var BondPicker = /*@__PURE__*/(function (Picker) {
      function BondPicker(array, structure, bondStore) {
          Picker.call(this, array);
          this.structure = structure;
          this.bondStore = bondStore || structure.bondStore;
      }

      if ( Picker ) BondPicker.__proto__ = Picker;
      BondPicker.prototype = Object.create( Picker && Picker.prototype );
      BondPicker.prototype.constructor = BondPicker;

      var prototypeAccessors$6 = { type: { configurable: true },data: { configurable: true } };
      prototypeAccessors$6.type.get = function () { return 'bond'; };
      prototypeAccessors$6.data.get = function () { return this.structure; };
      BondPicker.prototype.getObject = function getObject (pid) {
          var bp = this.structure.getBondProxy(this.getIndex(pid));
          bp.bondStore = this.bondStore;
          return bp;
      };
      BondPicker.prototype._getPosition = function _getPosition (pid) {
          var b = this.getObject(pid);
          return new Vector3()
              .copy(b.atom1)
              .add(b.atom2)
              .multiplyScalar(0.5);
      };

      Object.defineProperties( BondPicker.prototype, prototypeAccessors$6 );

      return BondPicker;
  }(Picker));
  var ContactPicker = /*@__PURE__*/(function (Picker) {
      function ContactPicker(array, contacts, structure) {
          Picker.call(this, array);
          this.contacts = contacts;
          this.structure = structure;
      }

      if ( Picker ) ContactPicker.__proto__ = Picker;
      ContactPicker.prototype = Object.create( Picker && Picker.prototype );
      ContactPicker.prototype.constructor = ContactPicker;

      var prototypeAccessors$7 = { type: { configurable: true },data: { configurable: true } };
      prototypeAccessors$7.type.get = function () { return 'contact'; };
      prototypeAccessors$7.data.get = function () { return this.contacts; };
      ContactPicker.prototype.getObject = function getObject (pid) {
          var idx = this.getIndex(pid);
          var ref = this.contacts;
          var features = ref.features;
          var contactStore = ref.contactStore;
          var centers = features.centers;
          var atomSets = features.atomSets;
          var x = centers.x;
          var y = centers.y;
          var z = centers.z;
          var index1 = contactStore.index1;
          var index2 = contactStore.index2;
          var type = contactStore.type;
          var k = index1[idx];
          var l = index2[idx];
          return {
              center1: new Vector3(x[k], y[k], z[k]),
              center2: new Vector3(x[l], y[l], z[l]),
              atom1: this.structure.getAtomProxy(atomSets[k][0]),
              atom2: this.structure.getAtomProxy(atomSets[l][0]),
              type: contactTypeName(type[idx])
          };
      };
      ContactPicker.prototype._getPosition = function _getPosition (pid) {
          var ref = this.getObject(pid);
          var center1 = ref.center1;
          var center2 = ref.center2;
          return new Vector3().addVectors(center1, center2).multiplyScalar(0.5);
      };

      Object.defineProperties( ContactPicker.prototype, prototypeAccessors$7 );

      return ContactPicker;
  }(Picker));
  var ConePicker = /*@__PURE__*/(function (ShapePicker) {
      function ConePicker () {
          ShapePicker.apply(this, arguments);
      }

      if ( ShapePicker ) ConePicker.__proto__ = ShapePicker;
      ConePicker.prototype = Object.create( ShapePicker && ShapePicker.prototype );
      ConePicker.prototype.constructor = ConePicker;

      var prototypeAccessors$8 = { primitive: { configurable: true } };

      prototypeAccessors$8.primitive.get = function () { return ConePrimitive; };

      Object.defineProperties( ConePicker.prototype, prototypeAccessors$8 );

      return ConePicker;
  }(ShapePicker));
  var ClashPicker = /*@__PURE__*/(function (Picker) {
      function ClashPicker(array, validation, structure) {
          Picker.call(this, array);
          this.validation = validation;
          this.structure = structure;
      }

      if ( Picker ) ClashPicker.__proto__ = Picker;
      ClashPicker.prototype = Object.create( Picker && Picker.prototype );
      ClashPicker.prototype.constructor = ClashPicker;

      var prototypeAccessors$9 = { type: { configurable: true },data: { configurable: true } };
      prototypeAccessors$9.type.get = function () { return 'clash'; };
      prototypeAccessors$9.data.get = function () { return this.validation; };
      ClashPicker.prototype.getObject = function getObject (pid) {
          var val = this.validation;
          var idx = this.getIndex(pid);
          return {
              validation: val,
              index: idx,
              clash: val.clashArray[idx]
          };
      };
      ClashPicker.prototype._getAtomProxyFromSele = function _getAtomProxyFromSele (sele) {
          var selection = new Selection(sele);
          var idx = this.structure.getAtomIndices(selection)[0];
          return this.structure.getAtomProxy(idx);
      };
      ClashPicker.prototype._getPosition = function _getPosition (pid) {
          var clash = this.getObject(pid).clash;
          var ap1 = this._getAtomProxyFromSele(clash.sele1);
          var ap2 = this._getAtomProxyFromSele(clash.sele2);
          return new Vector3().copy(ap1).add(ap2).multiplyScalar(0.5);
      };

      Object.defineProperties( ClashPicker.prototype, prototypeAccessors$9 );

      return ClashPicker;
  }(Picker));
  var DistancePicker = /*@__PURE__*/(function (BondPicker) {
      function DistancePicker () {
          BondPicker.apply(this, arguments);
      }

      if ( BondPicker ) DistancePicker.__proto__ = BondPicker;
      DistancePicker.prototype = Object.create( BondPicker && BondPicker.prototype );
      DistancePicker.prototype.constructor = DistancePicker;

      var prototypeAccessors$10 = { type: { configurable: true } };

      prototypeAccessors$10.type.get = function () { return 'distance'; };

      Object.defineProperties( DistancePicker.prototype, prototypeAccessors$10 );

      return DistancePicker;
  }(BondPicker));
  var EllipsoidPicker = /*@__PURE__*/(function (ShapePicker) {
      function EllipsoidPicker () {
          ShapePicker.apply(this, arguments);
      }

      if ( ShapePicker ) EllipsoidPicker.__proto__ = ShapePicker;
      EllipsoidPicker.prototype = Object.create( ShapePicker && ShapePicker.prototype );
      EllipsoidPicker.prototype.constructor = EllipsoidPicker;

      var prototypeAccessors$11 = { primitive: { configurable: true } };

      prototypeAccessors$11.primitive.get = function () { return EllipsoidPrimitive; };

      Object.defineProperties( EllipsoidPicker.prototype, prototypeAccessors$11 );

      return EllipsoidPicker;
  }(ShapePicker));
  var OctahedronPicker = /*@__PURE__*/(function (ShapePicker) {
      function OctahedronPicker () {
          ShapePicker.apply(this, arguments);
      }

      if ( ShapePicker ) OctahedronPicker.__proto__ = ShapePicker;
      OctahedronPicker.prototype = Object.create( ShapePicker && ShapePicker.prototype );
      OctahedronPicker.prototype.constructor = OctahedronPicker;

      var prototypeAccessors$12 = { primitive: { configurable: true } };

      prototypeAccessors$12.primitive.get = function () { return OctahedronPrimitive; };

      Object.defineProperties( OctahedronPicker.prototype, prototypeAccessors$12 );

      return OctahedronPicker;
  }(ShapePicker));
  var BoxPicker = /*@__PURE__*/(function (ShapePicker) {
      function BoxPicker () {
          ShapePicker.apply(this, arguments);
      }

      if ( ShapePicker ) BoxPicker.__proto__ = ShapePicker;
      BoxPicker.prototype = Object.create( ShapePicker && ShapePicker.prototype );
      BoxPicker.prototype.constructor = BoxPicker;

      var prototypeAccessors$13 = { primitive: { configurable: true } };

      prototypeAccessors$13.primitive.get = function () { return BoxPrimitive; };

      Object.defineProperties( BoxPicker.prototype, prototypeAccessors$13 );

      return BoxPicker;
  }(ShapePicker));
  var IgnorePicker = /*@__PURE__*/(function (Picker) {
      function IgnorePicker () {
          Picker.apply(this, arguments);
      }

      if ( Picker ) IgnorePicker.__proto__ = Picker;
      IgnorePicker.prototype = Object.create( Picker && Picker.prototype );
      IgnorePicker.prototype.constructor = IgnorePicker;

      var prototypeAccessors$14 = { type: { configurable: true } };

      prototypeAccessors$14.type.get = function () { return 'ignore'; };

      Object.defineProperties( IgnorePicker.prototype, prototypeAccessors$14 );

      return IgnorePicker;
  }(Picker));
  var MeshPicker = /*@__PURE__*/(function (ShapePicker) {
      function MeshPicker(shape, mesh) {
          ShapePicker.call(this, shape);
          this.mesh = mesh;
      }

      if ( ShapePicker ) MeshPicker.__proto__ = ShapePicker;
      MeshPicker.prototype = Object.create( ShapePicker && ShapePicker.prototype );
      MeshPicker.prototype.constructor = MeshPicker;

      var prototypeAccessors$15 = { type: { configurable: true } };
      prototypeAccessors$15.type.get = function () { return 'mesh'; };
      MeshPicker.prototype.getObject = function getObject ( /* pid */) {
          var m = this.mesh;
          return {
              shape: this.shape,
              name: m.name,
              serial: m.serial
          };
      };
      MeshPicker.prototype._getPosition = function _getPosition ( /* pid */) {
          if (!this.__position) {
              this.__position = calculateMeanVector3(this.mesh.position);
          }
          return this.__position;
      };

      Object.defineProperties( MeshPicker.prototype, prototypeAccessors$15 );

      return MeshPicker;
  }(ShapePicker));
  var SpherePicker = /*@__PURE__*/(function (ShapePicker) {
      function SpherePicker () {
          ShapePicker.apply(this, arguments);
      }

      if ( ShapePicker ) SpherePicker.__proto__ = ShapePicker;
      SpherePicker.prototype = Object.create( ShapePicker && ShapePicker.prototype );
      SpherePicker.prototype.constructor = SpherePicker;

      var prototypeAccessors$16 = { primitive: { configurable: true } };

      prototypeAccessors$16.primitive.get = function () { return SpherePrimitive; };

      Object.defineProperties( SpherePicker.prototype, prototypeAccessors$16 );

      return SpherePicker;
  }(ShapePicker));
  var SurfacePicker = /*@__PURE__*/(function (Picker) {
      function SurfacePicker(array, surface) {
          Picker.call(this, array);
          this.surface = surface;
      }

      if ( Picker ) SurfacePicker.__proto__ = Picker;
      SurfacePicker.prototype = Object.create( Picker && Picker.prototype );
      SurfacePicker.prototype.constructor = SurfacePicker;

      var prototypeAccessors$17 = { type: { configurable: true },data: { configurable: true } };
      prototypeAccessors$17.type.get = function () { return 'surface'; };
      prototypeAccessors$17.data.get = function () { return this.surface; };
      SurfacePicker.prototype.getObject = function getObject (pid) {
          return {
              surface: this.surface,
              index: this.getIndex(pid)
          };
      };
      SurfacePicker.prototype._getPosition = function _getPosition ( /* pid */) {
          return this.surface.center.clone();
      };

      Object.defineProperties( SurfacePicker.prototype, prototypeAccessors$17 );

      return SurfacePicker;
  }(Picker));
  var TetrahedronPicker = /*@__PURE__*/(function (ShapePicker) {
      function TetrahedronPicker () {
          ShapePicker.apply(this, arguments);
      }

      if ( ShapePicker ) TetrahedronPicker.__proto__ = ShapePicker;
      TetrahedronPicker.prototype = Object.create( ShapePicker && ShapePicker.prototype );
      TetrahedronPicker.prototype.constructor = TetrahedronPicker;

      var prototypeAccessors$18 = { primitive: { configurable: true } };

      prototypeAccessors$18.primitive.get = function () { return TetrahedronPrimitive; };

      Object.defineProperties( TetrahedronPicker.prototype, prototypeAccessors$18 );

      return TetrahedronPicker;
  }(ShapePicker));
  var TorusPicker = /*@__PURE__*/(function (ShapePicker) {
      function TorusPicker () {
          ShapePicker.apply(this, arguments);
      }

      if ( ShapePicker ) TorusPicker.__proto__ = ShapePicker;
      TorusPicker.prototype = Object.create( ShapePicker && ShapePicker.prototype );
      TorusPicker.prototype.constructor = TorusPicker;

      var prototypeAccessors$19 = { primitive: { configurable: true } };

      prototypeAccessors$19.primitive.get = function () { return TorusPrimitive; };

      Object.defineProperties( TorusPicker.prototype, prototypeAccessors$19 );

      return TorusPicker;
  }(ShapePicker));
  var UnitcellPicker = /*@__PURE__*/(function (Picker) {
      function UnitcellPicker(unitcell, structure) {
          Picker.call(this);
          this.unitcell = unitcell;
          this.structure = structure;
      }

      if ( Picker ) UnitcellPicker.__proto__ = Picker;
      UnitcellPicker.prototype = Object.create( Picker && Picker.prototype );
      UnitcellPicker.prototype.constructor = UnitcellPicker;

      var prototypeAccessors$20 = { type: { configurable: true },data: { configurable: true } };
      prototypeAccessors$20.type.get = function () { return 'unitcell'; };
      prototypeAccessors$20.data.get = function () { return this.unitcell; };
      UnitcellPicker.prototype.getObject = function getObject ( /* pid */) {
          return {
              unitcell: this.unitcell,
              structure: this.structure
          };
      };
      UnitcellPicker.prototype._getPosition = function _getPosition ( /* pid */) {
          return this.unitcell.getCenter(this.structure);
      };

      Object.defineProperties( UnitcellPicker.prototype, prototypeAccessors$20 );

      return UnitcellPicker;
  }(Picker));
  var VolumePicker = /*@__PURE__*/(function (Picker) {
      function VolumePicker(array, volume) {
          Picker.call(this, array);
          this.volume = volume;
      }

      if ( Picker ) VolumePicker.__proto__ = Picker;
      VolumePicker.prototype = Object.create( Picker && Picker.prototype );
      VolumePicker.prototype.constructor = VolumePicker;

      var prototypeAccessors$22 = { type: { configurable: true },data: { configurable: true } };
      prototypeAccessors$22.type.get = function () { return 'volume'; };
      prototypeAccessors$22.data.get = function () { return this.volume; };
      VolumePicker.prototype.getObject = function getObject (pid) {
          var vol = this.volume;
          var idx = this.getIndex(pid);
          return {
              volume: vol,
              index: idx,
              value: vol.data[idx]
          };
      };
      VolumePicker.prototype._getPosition = function _getPosition (pid) {
          var dp = this.volume.position;
          var idx = this.getIndex(pid);
          return new Vector3(dp[idx * 3], dp[idx * 3 + 1], dp[idx * 3 + 2]);
      };

      Object.defineProperties( VolumePicker.prototype, prototypeAccessors$22 );

      return VolumePicker;
  }(Picker));
  var SlicePicker = /*@__PURE__*/(function (VolumePicker) {
      function SlicePicker () {
          VolumePicker.apply(this, arguments);
      }

      if ( VolumePicker ) SlicePicker.__proto__ = VolumePicker;
      SlicePicker.prototype = Object.create( VolumePicker && VolumePicker.prototype );
      SlicePicker.prototype.constructor = SlicePicker;

      var prototypeAccessors$23 = { type: { configurable: true } };

      prototypeAccessors$23.type.get = function () { return 'slice'; };

      Object.defineProperties( SlicePicker.prototype, prototypeAccessors$23 );

      return SlicePicker;
  }(VolumePicker));
  var PointPicker = /*@__PURE__*/(function (ShapePicker) {
      function PointPicker () {
          ShapePicker.apply(this, arguments);
      }

      if ( ShapePicker ) PointPicker.__proto__ = ShapePicker;
      PointPicker.prototype = Object.create( ShapePicker && ShapePicker.prototype );
      PointPicker.prototype.constructor = PointPicker;

      var prototypeAccessors$24 = { primitive: { configurable: true } };

      prototypeAccessors$24.primitive.get = function () { return PointPrimitive; };

      Object.defineProperties( PointPicker.prototype, prototypeAccessors$24 );

      return PointPicker;
  }(ShapePicker));
  var WidelinePicker = /*@__PURE__*/(function (ShapePicker) {
      function WidelinePicker () {
          ShapePicker.apply(this, arguments);
      }

      if ( ShapePicker ) WidelinePicker.__proto__ = ShapePicker;
      WidelinePicker.prototype = Object.create( ShapePicker && ShapePicker.prototype );
      WidelinePicker.prototype.constructor = WidelinePicker;

      var prototypeAccessors$25 = { primitive: { configurable: true } };

      prototypeAccessors$25.primitive.get = function () { return WidelinePrimitive; };

      Object.defineProperties( WidelinePicker.prototype, prototypeAccessors$25 );

      return WidelinePicker;
  }(ShapePicker));
  PickerRegistry.add('arrow', ArrowPicker);
  PickerRegistry.add('box', BoxPicker);
  PickerRegistry.add('cone', ConePicker);
  PickerRegistry.add('cylinder', CylinderPicker);
  PickerRegistry.add('ellipsoid', EllipsoidPicker);
  PickerRegistry.add('octahedron', OctahedronPicker);
  PickerRegistry.add('sphere', SpherePicker);
  PickerRegistry.add('tetrahedron', TetrahedronPicker);
  PickerRegistry.add('torus', TorusPicker);
  PickerRegistry.add('point', PointPicker);
  PickerRegistry.add('wideline', WidelinePicker);

  /**
   * @file Marching Cubes
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function getEdgeTable() {
      return new Uint32Array([
          0x0, 0x109, 0x203, 0x30a, 0x406, 0x50f, 0x605, 0x70c,
          0x80c, 0x905, 0xa0f, 0xb06, 0xc0a, 0xd03, 0xe09, 0xf00,
          0x190, 0x99, 0x393, 0x29a, 0x596, 0x49f, 0x795, 0x69c,
          0x99c, 0x895, 0xb9f, 0xa96, 0xd9a, 0xc93, 0xf99, 0xe90,
          0x230, 0x339, 0x33, 0x13a, 0x636, 0x73f, 0x435, 0x53c,
          0xa3c, 0xb35, 0x83f, 0x936, 0xe3a, 0xf33, 0xc39, 0xd30,
          0x3a0, 0x2a9, 0x1a3, 0xaa, 0x7a6, 0x6af, 0x5a5, 0x4ac,
          0xbac, 0xaa5, 0x9af, 0x8a6, 0xfaa, 0xea3, 0xda9, 0xca0,
          0x460, 0x569, 0x663, 0x76a, 0x66, 0x16f, 0x265, 0x36c,
          0xc6c, 0xd65, 0xe6f, 0xf66, 0x86a, 0x963, 0xa69, 0xb60,
          0x5f0, 0x4f9, 0x7f3, 0x6fa, 0x1f6, 0xff, 0x3f5, 0x2fc,
          0xdfc, 0xcf5, 0xfff, 0xef6, 0x9fa, 0x8f3, 0xbf9, 0xaf0,
          0x650, 0x759, 0x453, 0x55a, 0x256, 0x35f, 0x55, 0x15c,
          0xe5c, 0xf55, 0xc5f, 0xd56, 0xa5a, 0xb53, 0x859, 0x950,
          0x7c0, 0x6c9, 0x5c3, 0x4ca, 0x3c6, 0x2cf, 0x1c5, 0xcc,
          0xfcc, 0xec5, 0xdcf, 0xcc6, 0xbca, 0xac3, 0x9c9, 0x8c0,
          0x8c0, 0x9c9, 0xac3, 0xbca, 0xcc6, 0xdcf, 0xec5, 0xfcc,
          0xcc, 0x1c5, 0x2cf, 0x3c6, 0x4ca, 0x5c3, 0x6c9, 0x7c0,
          0x950, 0x859, 0xb53, 0xa5a, 0xd56, 0xc5f, 0xf55, 0xe5c,
          0x15c, 0x55, 0x35f, 0x256, 0x55a, 0x453, 0x759, 0x650,
          0xaf0, 0xbf9, 0x8f3, 0x9fa, 0xef6, 0xfff, 0xcf5, 0xdfc,
          0x2fc, 0x3f5, 0xff, 0x1f6, 0x6fa, 0x7f3, 0x4f9, 0x5f0,
          0xb60, 0xa69, 0x963, 0x86a, 0xf66, 0xe6f, 0xd65, 0xc6c,
          0x36c, 0x265, 0x16f, 0x66, 0x76a, 0x663, 0x569, 0x460,
          0xca0, 0xda9, 0xea3, 0xfaa, 0x8a6, 0x9af, 0xaa5, 0xbac,
          0x4ac, 0x5a5, 0x6af, 0x7a6, 0xaa, 0x1a3, 0x2a9, 0x3a0,
          0xd30, 0xc39, 0xf33, 0xe3a, 0x936, 0x83f, 0xb35, 0xa3c,
          0x53c, 0x435, 0x73f, 0x636, 0x13a, 0x33, 0x339, 0x230,
          0xe90, 0xf99, 0xc93, 0xd9a, 0xa96, 0xb9f, 0x895, 0x99c,
          0x69c, 0x795, 0x49f, 0x596, 0x29a, 0x393, 0x99, 0x190,
          0xf00, 0xe09, 0xd03, 0xc0a, 0xb06, 0xa0f, 0x905, 0x80c,
          0x70c, 0x605, 0x50f, 0x406, 0x30a, 0x203, 0x109, 0x0
      ]);
  }
  function getTriTable() {
      return new Int32Array([
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          0, 1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          1, 8, 3, 9, 8, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          0, 8, 3, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          9, 2, 10, 0, 2, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          2, 8, 3, 2, 10, 8, 10, 9, 8, -1, -1, -1, -1, -1, -1, -1,
          3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          0, 11, 2, 8, 11, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          1, 9, 0, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          1, 11, 2, 1, 9, 11, 9, 8, 11, -1, -1, -1, -1, -1, -1, -1,
          3, 10, 1, 11, 10, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          0, 10, 1, 0, 8, 10, 8, 11, 10, -1, -1, -1, -1, -1, -1, -1,
          3, 9, 0, 3, 11, 9, 11, 10, 9, -1, -1, -1, -1, -1, -1, -1,
          9, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          4, 3, 0, 7, 3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          0, 1, 9, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          4, 1, 9, 4, 7, 1, 7, 3, 1, -1, -1, -1, -1, -1, -1, -1,
          1, 2, 10, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          3, 4, 7, 3, 0, 4, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1,
          9, 2, 10, 9, 0, 2, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1,
          2, 10, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4, -1, -1, -1, -1,
          8, 4, 7, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          11, 4, 7, 11, 2, 4, 2, 0, 4, -1, -1, -1, -1, -1, -1, -1,
          9, 0, 1, 8, 4, 7, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1,
          4, 7, 11, 9, 4, 11, 9, 11, 2, 9, 2, 1, -1, -1, -1, -1,
          3, 10, 1, 3, 11, 10, 7, 8, 4, -1, -1, -1, -1, -1, -1, -1,
          1, 11, 10, 1, 4, 11, 1, 0, 4, 7, 11, 4, -1, -1, -1, -1,
          4, 7, 8, 9, 0, 11, 9, 11, 10, 11, 0, 3, -1, -1, -1, -1,
          4, 7, 11, 4, 11, 9, 9, 11, 10, -1, -1, -1, -1, -1, -1, -1,
          9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          9, 5, 4, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          0, 5, 4, 1, 5, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          8, 5, 4, 8, 3, 5, 3, 1, 5, -1, -1, -1, -1, -1, -1, -1,
          1, 2, 10, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          3, 0, 8, 1, 2, 10, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1,
          5, 2, 10, 5, 4, 2, 4, 0, 2, -1, -1, -1, -1, -1, -1, -1,
          2, 10, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8, -1, -1, -1, -1,
          9, 5, 4, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          0, 11, 2, 0, 8, 11, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1,
          0, 5, 4, 0, 1, 5, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1,
          2, 1, 5, 2, 5, 8, 2, 8, 11, 4, 8, 5, -1, -1, -1, -1,
          10, 3, 11, 10, 1, 3, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1,
          4, 9, 5, 0, 8, 1, 8, 10, 1, 8, 11, 10, -1, -1, -1, -1,
          5, 4, 0, 5, 0, 11, 5, 11, 10, 11, 0, 3, -1, -1, -1, -1,
          5, 4, 8, 5, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1,
          9, 7, 8, 5, 7, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          9, 3, 0, 9, 5, 3, 5, 7, 3, -1, -1, -1, -1, -1, -1, -1,
          0, 7, 8, 0, 1, 7, 1, 5, 7, -1, -1, -1, -1, -1, -1, -1,
          1, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          9, 7, 8, 9, 5, 7, 10, 1, 2, -1, -1, -1, -1, -1, -1, -1,
          10, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3, -1, -1, -1, -1,
          8, 0, 2, 8, 2, 5, 8, 5, 7, 10, 5, 2, -1, -1, -1, -1,
          2, 10, 5, 2, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1,
          7, 9, 5, 7, 8, 9, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1,
          9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 11, -1, -1, -1, -1,
          2, 3, 11, 0, 1, 8, 1, 7, 8, 1, 5, 7, -1, -1, -1, -1,
          11, 2, 1, 11, 1, 7, 7, 1, 5, -1, -1, -1, -1, -1, -1, -1,
          9, 5, 8, 8, 5, 7, 10, 1, 3, 10, 3, 11, -1, -1, -1, -1,
          5, 7, 0, 5, 0, 9, 7, 11, 0, 1, 0, 10, 11, 10, 0, -1,
          11, 10, 0, 11, 0, 3, 10, 5, 0, 8, 0, 7, 5, 7, 0, -1,
          11, 10, 5, 7, 11, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          0, 8, 3, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          9, 0, 1, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          1, 8, 3, 1, 9, 8, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1,
          1, 6, 5, 2, 6, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          1, 6, 5, 1, 2, 6, 3, 0, 8, -1, -1, -1, -1, -1, -1, -1,
          9, 6, 5, 9, 0, 6, 0, 2, 6, -1, -1, -1, -1, -1, -1, -1,
          5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8, -1, -1, -1, -1,
          2, 3, 11, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          11, 0, 8, 11, 2, 0, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1,
          0, 1, 9, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1,
          5, 10, 6, 1, 9, 2, 9, 11, 2, 9, 8, 11, -1, -1, -1, -1,
          6, 3, 11, 6, 5, 3, 5, 1, 3, -1, -1, -1, -1, -1, -1, -1,
          0, 8, 11, 0, 11, 5, 0, 5, 1, 5, 11, 6, -1, -1, -1, -1,
          3, 11, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9, -1, -1, -1, -1,
          6, 5, 9, 6, 9, 11, 11, 9, 8, -1, -1, -1, -1, -1, -1, -1,
          5, 10, 6, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          4, 3, 0, 4, 7, 3, 6, 5, 10, -1, -1, -1, -1, -1, -1, -1,
          1, 9, 0, 5, 10, 6, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1,
          10, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4, -1, -1, -1, -1,
          6, 1, 2, 6, 5, 1, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1,
          1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7, -1, -1, -1, -1,
          8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6, -1, -1, -1, -1,
          7, 3, 9, 7, 9, 4, 3, 2, 9, 5, 9, 6, 2, 6, 9, -1,
          3, 11, 2, 7, 8, 4, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1,
          5, 10, 6, 4, 7, 2, 4, 2, 0, 2, 7, 11, -1, -1, -1, -1,
          0, 1, 9, 4, 7, 8, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1,
          9, 2, 1, 9, 11, 2, 9, 4, 11, 7, 11, 4, 5, 10, 6, -1,
          8, 4, 7, 3, 11, 5, 3, 5, 1, 5, 11, 6, -1, -1, -1, -1,
          5, 1, 11, 5, 11, 6, 1, 0, 11, 7, 11, 4, 0, 4, 11, -1,
          0, 5, 9, 0, 6, 5, 0, 3, 6, 11, 6, 3, 8, 4, 7, -1,
          6, 5, 9, 6, 9, 11, 4, 7, 9, 7, 11, 9, -1, -1, -1, -1,
          10, 4, 9, 6, 4, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          4, 10, 6, 4, 9, 10, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1,
          10, 0, 1, 10, 6, 0, 6, 4, 0, -1, -1, -1, -1, -1, -1, -1,
          8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 10, -1, -1, -1, -1,
          1, 4, 9, 1, 2, 4, 2, 6, 4, -1, -1, -1, -1, -1, -1, -1,
          3, 0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4, -1, -1, -1, -1,
          0, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          8, 3, 2, 8, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1,
          10, 4, 9, 10, 6, 4, 11, 2, 3, -1, -1, -1, -1, -1, -1, -1,
          0, 8, 2, 2, 8, 11, 4, 9, 10, 4, 10, 6, -1, -1, -1, -1,
          3, 11, 2, 0, 1, 6, 0, 6, 4, 6, 1, 10, -1, -1, -1, -1,
          6, 4, 1, 6, 1, 10, 4, 8, 1, 2, 1, 11, 8, 11, 1, -1,
          9, 6, 4, 9, 3, 6, 9, 1, 3, 11, 6, 3, -1, -1, -1, -1,
          8, 11, 1, 8, 1, 0, 11, 6, 1, 9, 1, 4, 6, 4, 1, -1,
          3, 11, 6, 3, 6, 0, 0, 6, 4, -1, -1, -1, -1, -1, -1, -1,
          6, 4, 8, 11, 6, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          7, 10, 6, 7, 8, 10, 8, 9, 10, -1, -1, -1, -1, -1, -1, -1,
          0, 7, 3, 0, 10, 7, 0, 9, 10, 6, 7, 10, -1, -1, -1, -1,
          10, 6, 7, 1, 10, 7, 1, 7, 8, 1, 8, 0, -1, -1, -1, -1,
          10, 6, 7, 10, 7, 1, 1, 7, 3, -1, -1, -1, -1, -1, -1, -1,
          1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7, -1, -1, -1, -1,
          2, 6, 9, 2, 9, 1, 6, 7, 9, 0, 9, 3, 7, 3, 9, -1,
          7, 8, 0, 7, 0, 6, 6, 0, 2, -1, -1, -1, -1, -1, -1, -1,
          7, 3, 2, 6, 7, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          2, 3, 11, 10, 6, 8, 10, 8, 9, 8, 6, 7, -1, -1, -1, -1,
          2, 0, 7, 2, 7, 11, 0, 9, 7, 6, 7, 10, 9, 10, 7, -1,
          1, 8, 0, 1, 7, 8, 1, 10, 7, 6, 7, 10, 2, 3, 11, -1,
          11, 2, 1, 11, 1, 7, 10, 6, 1, 6, 7, 1, -1, -1, -1, -1,
          8, 9, 6, 8, 6, 7, 9, 1, 6, 11, 6, 3, 1, 3, 6, -1,
          0, 9, 1, 11, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          7, 8, 0, 7, 0, 6, 3, 11, 0, 11, 6, 0, -1, -1, -1, -1,
          7, 11, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          3, 0, 8, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          0, 1, 9, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          8, 1, 9, 8, 3, 1, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1,
          10, 1, 2, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          1, 2, 10, 3, 0, 8, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1,
          2, 9, 0, 2, 10, 9, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1,
          6, 11, 7, 2, 10, 3, 10, 8, 3, 10, 9, 8, -1, -1, -1, -1,
          7, 2, 3, 6, 2, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          7, 0, 8, 7, 6, 0, 6, 2, 0, -1, -1, -1, -1, -1, -1, -1,
          2, 7, 6, 2, 3, 7, 0, 1, 9, -1, -1, -1, -1, -1, -1, -1,
          1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6, -1, -1, -1, -1,
          10, 7, 6, 10, 1, 7, 1, 3, 7, -1, -1, -1, -1, -1, -1, -1,
          10, 7, 6, 1, 7, 10, 1, 8, 7, 1, 0, 8, -1, -1, -1, -1,
          0, 3, 7, 0, 7, 10, 0, 10, 9, 6, 10, 7, -1, -1, -1, -1,
          7, 6, 10, 7, 10, 8, 8, 10, 9, -1, -1, -1, -1, -1, -1, -1,
          6, 8, 4, 11, 8, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          3, 6, 11, 3, 0, 6, 0, 4, 6, -1, -1, -1, -1, -1, -1, -1,
          8, 6, 11, 8, 4, 6, 9, 0, 1, -1, -1, -1, -1, -1, -1, -1,
          9, 4, 6, 9, 6, 3, 9, 3, 1, 11, 3, 6, -1, -1, -1, -1,
          6, 8, 4, 6, 11, 8, 2, 10, 1, -1, -1, -1, -1, -1, -1, -1,
          1, 2, 10, 3, 0, 11, 0, 6, 11, 0, 4, 6, -1, -1, -1, -1,
          4, 11, 8, 4, 6, 11, 0, 2, 9, 2, 10, 9, -1, -1, -1, -1,
          10, 9, 3, 10, 3, 2, 9, 4, 3, 11, 3, 6, 4, 6, 3, -1,
          8, 2, 3, 8, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1,
          0, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          1, 9, 0, 2, 3, 4, 2, 4, 6, 4, 3, 8, -1, -1, -1, -1,
          1, 9, 4, 1, 4, 2, 2, 4, 6, -1, -1, -1, -1, -1, -1, -1,
          8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 10, 1, -1, -1, -1, -1,
          10, 1, 0, 10, 0, 6, 6, 0, 4, -1, -1, -1, -1, -1, -1, -1,
          4, 6, 3, 4, 3, 8, 6, 10, 3, 0, 3, 9, 10, 9, 3, -1,
          10, 9, 4, 6, 10, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          4, 9, 5, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          0, 8, 3, 4, 9, 5, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1,
          5, 0, 1, 5, 4, 0, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1,
          11, 7, 6, 8, 3, 4, 3, 5, 4, 3, 1, 5, -1, -1, -1, -1,
          9, 5, 4, 10, 1, 2, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1,
          6, 11, 7, 1, 2, 10, 0, 8, 3, 4, 9, 5, -1, -1, -1, -1,
          7, 6, 11, 5, 4, 10, 4, 2, 10, 4, 0, 2, -1, -1, -1, -1,
          3, 4, 8, 3, 5, 4, 3, 2, 5, 10, 5, 2, 11, 7, 6, -1,
          7, 2, 3, 7, 6, 2, 5, 4, 9, -1, -1, -1, -1, -1, -1, -1,
          9, 5, 4, 0, 8, 6, 0, 6, 2, 6, 8, 7, -1, -1, -1, -1,
          3, 6, 2, 3, 7, 6, 1, 5, 0, 5, 4, 0, -1, -1, -1, -1,
          6, 2, 8, 6, 8, 7, 2, 1, 8, 4, 8, 5, 1, 5, 8, -1,
          9, 5, 4, 10, 1, 6, 1, 7, 6, 1, 3, 7, -1, -1, -1, -1,
          1, 6, 10, 1, 7, 6, 1, 0, 7, 8, 7, 0, 9, 5, 4, -1,
          4, 0, 10, 4, 10, 5, 0, 3, 10, 6, 10, 7, 3, 7, 10, -1,
          7, 6, 10, 7, 10, 8, 5, 4, 10, 4, 8, 10, -1, -1, -1, -1,
          6, 9, 5, 6, 11, 9, 11, 8, 9, -1, -1, -1, -1, -1, -1, -1,
          3, 6, 11, 0, 6, 3, 0, 5, 6, 0, 9, 5, -1, -1, -1, -1,
          0, 11, 8, 0, 5, 11, 0, 1, 5, 5, 6, 11, -1, -1, -1, -1,
          6, 11, 3, 6, 3, 5, 5, 3, 1, -1, -1, -1, -1, -1, -1, -1,
          1, 2, 10, 9, 5, 11, 9, 11, 8, 11, 5, 6, -1, -1, -1, -1,
          0, 11, 3, 0, 6, 11, 0, 9, 6, 5, 6, 9, 1, 2, 10, -1,
          11, 8, 5, 11, 5, 6, 8, 0, 5, 10, 5, 2, 0, 2, 5, -1,
          6, 11, 3, 6, 3, 5, 2, 10, 3, 10, 5, 3, -1, -1, -1, -1,
          5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2, -1, -1, -1, -1,
          9, 5, 6, 9, 6, 0, 0, 6, 2, -1, -1, -1, -1, -1, -1, -1,
          1, 5, 8, 1, 8, 0, 5, 6, 8, 3, 8, 2, 6, 2, 8, -1,
          1, 5, 6, 2, 1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          1, 3, 6, 1, 6, 10, 3, 8, 6, 5, 6, 9, 8, 9, 6, -1,
          10, 1, 0, 10, 0, 6, 9, 5, 0, 5, 6, 0, -1, -1, -1, -1,
          0, 3, 8, 5, 6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          10, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          11, 5, 10, 7, 5, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          11, 5, 10, 11, 7, 5, 8, 3, 0, -1, -1, -1, -1, -1, -1, -1,
          5, 11, 7, 5, 10, 11, 1, 9, 0, -1, -1, -1, -1, -1, -1, -1,
          10, 7, 5, 10, 11, 7, 9, 8, 1, 8, 3, 1, -1, -1, -1, -1,
          11, 1, 2, 11, 7, 1, 7, 5, 1, -1, -1, -1, -1, -1, -1, -1,
          0, 8, 3, 1, 2, 7, 1, 7, 5, 7, 2, 11, -1, -1, -1, -1,
          9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 11, 7, -1, -1, -1, -1,
          7, 5, 2, 7, 2, 11, 5, 9, 2, 3, 2, 8, 9, 8, 2, -1,
          2, 5, 10, 2, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1,
          8, 2, 0, 8, 5, 2, 8, 7, 5, 10, 2, 5, -1, -1, -1, -1,
          9, 0, 1, 5, 10, 3, 5, 3, 7, 3, 10, 2, -1, -1, -1, -1,
          9, 8, 2, 9, 2, 1, 8, 7, 2, 10, 2, 5, 7, 5, 2, -1,
          1, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          0, 8, 7, 0, 7, 1, 1, 7, 5, -1, -1, -1, -1, -1, -1, -1,
          9, 0, 3, 9, 3, 5, 5, 3, 7, -1, -1, -1, -1, -1, -1, -1,
          9, 8, 7, 5, 9, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          5, 8, 4, 5, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1,
          5, 0, 4, 5, 11, 0, 5, 10, 11, 11, 3, 0, -1, -1, -1, -1,
          0, 1, 9, 8, 4, 10, 8, 10, 11, 10, 4, 5, -1, -1, -1, -1,
          10, 11, 4, 10, 4, 5, 11, 3, 4, 9, 4, 1, 3, 1, 4, -1,
          2, 5, 1, 2, 8, 5, 2, 11, 8, 4, 5, 8, -1, -1, -1, -1,
          0, 4, 11, 0, 11, 3, 4, 5, 11, 2, 11, 1, 5, 1, 11, -1,
          0, 2, 5, 0, 5, 9, 2, 11, 5, 4, 5, 8, 11, 8, 5, -1,
          9, 4, 5, 2, 11, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          2, 5, 10, 3, 5, 2, 3, 4, 5, 3, 8, 4, -1, -1, -1, -1,
          5, 10, 2, 5, 2, 4, 4, 2, 0, -1, -1, -1, -1, -1, -1, -1,
          3, 10, 2, 3, 5, 10, 3, 8, 5, 4, 5, 8, 0, 1, 9, -1,
          5, 10, 2, 5, 2, 4, 1, 9, 2, 9, 4, 2, -1, -1, -1, -1,
          8, 4, 5, 8, 5, 3, 3, 5, 1, -1, -1, -1, -1, -1, -1, -1,
          0, 4, 5, 1, 0, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          8, 4, 5, 8, 5, 3, 9, 0, 5, 0, 3, 5, -1, -1, -1, -1,
          9, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          4, 11, 7, 4, 9, 11, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1,
          0, 8, 3, 4, 9, 7, 9, 11, 7, 9, 10, 11, -1, -1, -1, -1,
          1, 10, 11, 1, 11, 4, 1, 4, 0, 7, 4, 11, -1, -1, -1, -1,
          3, 1, 4, 3, 4, 8, 1, 10, 4, 7, 4, 11, 10, 11, 4, -1,
          4, 11, 7, 9, 11, 4, 9, 2, 11, 9, 1, 2, -1, -1, -1, -1,
          9, 7, 4, 9, 11, 7, 9, 1, 11, 2, 11, 1, 0, 8, 3, -1,
          11, 7, 4, 11, 4, 2, 2, 4, 0, -1, -1, -1, -1, -1, -1, -1,
          11, 7, 4, 11, 4, 2, 8, 3, 4, 3, 2, 4, -1, -1, -1, -1,
          2, 9, 10, 2, 7, 9, 2, 3, 7, 7, 4, 9, -1, -1, -1, -1,
          9, 10, 7, 9, 7, 4, 10, 2, 7, 8, 7, 0, 2, 0, 7, -1,
          3, 7, 10, 3, 10, 2, 7, 4, 10, 1, 10, 0, 4, 0, 10, -1,
          1, 10, 2, 8, 7, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          4, 9, 1, 4, 1, 7, 7, 1, 3, -1, -1, -1, -1, -1, -1, -1,
          4, 9, 1, 4, 1, 7, 0, 8, 1, 8, 7, 1, -1, -1, -1, -1,
          4, 0, 3, 7, 4, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          4, 8, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          9, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          3, 0, 9, 3, 9, 11, 11, 9, 10, -1, -1, -1, -1, -1, -1, -1,
          0, 1, 10, 0, 10, 8, 8, 10, 11, -1, -1, -1, -1, -1, -1, -1,
          3, 1, 10, 11, 3, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          1, 2, 11, 1, 11, 9, 9, 11, 8, -1, -1, -1, -1, -1, -1, -1,
          3, 0, 9, 3, 9, 11, 1, 2, 9, 2, 11, 9, -1, -1, -1, -1,
          0, 2, 11, 8, 0, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          3, 2, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          2, 3, 8, 2, 8, 10, 10, 8, 9, -1, -1, -1, -1, -1, -1, -1,
          9, 10, 2, 0, 9, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          2, 3, 8, 2, 8, 10, 0, 1, 8, 1, 10, 8, -1, -1, -1, -1,
          1, 10, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          1, 3, 8, 9, 1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          0, 9, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          0, 3, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
      ]);
  }
  // Triangles are constructed between points on cube edges.
  // allowedContours[edge1][edge1] indicates which lines from a given
  // triangle should be shown in line mode.
  // Values are bitmasks:
  // In loop over cubes we keep another bitmask indicating whether our current
  // cell is the first x-value (1),
  // first y-value (2) or first z-value (4) of the current loop.
  // We draw all lines on leading faces but only draw trailing face lines the first
  // time through the loop
  // A value of 8 below means the edge is always drawn (leading face)
  // E.g. the first row, lines between edge0 and other edges in the bottom
  // x-y plane are only drawn for the first value of z, edges in the
  // x-z plane are only drawn for the first value of y. No other lines
  // are drawn as they're redundant
  // The line between edge 1 and 5 is always drawn as it's on the leading edge
  function getAllowedContours() {
      return [
          [0, 4, 4, 4, 2, 0, 0, 0, 2, 2, 0, 0],
          [4, 0, 4, 4, 0, 8, 0, 0, 0, 8, 8, 0],
          [4, 4, 0, 4, 0, 0, 8, 0, 0, 0, 8, 8],
          [4, 4, 4, 0, 0, 0, 0, 1, 1, 0, 0, 1],
          [2, 0, 0, 0, 0, 8, 8, 8, 2, 2, 0, 0],
          [0, 8, 0, 0, 8, 0, 8, 8, 0, 8, 8, 0],
          [0, 0, 8, 0, 8, 8, 0, 8, 0, 0, 8, 8],
          [0, 0, 0, 1, 8, 8, 8, 0, 1, 0, 0, 1],
          [2, 0, 0, 1, 2, 0, 0, 1, 0, 2, 0, 1],
          [2, 8, 0, 0, 2, 8, 0, 0, 2, 0, 8, 0],
          [0, 8, 8, 0, 0, 8, 8, 0, 0, 8, 0, 8],
          [0, 0, 8, 1, 0, 0, 8, 1, 1, 0, 8, 0]
      ];
  }
  function MarchingCubes(field, nx, ny, nz, atomindex) {
      // Based on alteredq / http://alteredqualia.com/
      // port of greggman's ThreeD version of marching cubes to Three.js
      // http://webglsamples.googlecode.com/hg/blob/blob.html
      //
      // Adapted for NGL by Alexander Rose
      var isolevel = 0;
      var noNormals = false;
      var contour = false;
      var wrap = false;
      var isNegativeIso = false;
      var normalFactor = -1;
      var n = nx * ny * nz;
      // deltas
      var yd = nx;
      var zd = nx * ny;
      var normalCache, vertexIndex;
      var count, icount;
      var ilist = new Int32Array(12);
      var positionArray = [];
      var normalArray = [];
      var indexArray = [];
      var atomindexArray = [];
      var edgeTable = getEdgeTable();
      var triTable = getTriTable();
      var allowedContours = getAllowedContours();
      var mx, my, mz;
      //
      this.triangulate = function (_isolevel, _noNormals, _box, _contour, _wrap) {
          isolevel = _isolevel;
          isNegativeIso = isolevel < 0.0;
          contour = _contour;
          wrap = _wrap;
          // Normals currently disabled in contour mode for performance (unused)
          noNormals = _noNormals || contour;
          if (!noNormals) {
              normalFactor = isolevel > 0 ? -1.0 : 1.0;
              if (!normalCache) {
                  normalCache = new Float32Array(n * 3);
              }
          }
          var vIndexLength = n * 3;
          if (!vertexIndex || vertexIndex.length !== vIndexLength) {
              vertexIndex = new Int32Array(vIndexLength);
          }
          count = 0;
          icount = 0;
          if (_box !== undefined) {
              var min = _box[0].map(Math.round);
              var max = _box[1].map(Math.round);
              mx = nx * Math.ceil(Math.abs(min[0]) / nx);
              my = ny * Math.ceil(Math.abs(min[1]) / ny);
              mz = nz * Math.ceil(Math.abs(min[2]) / nz);
              triangulate(min[0], min[1], min[2], max[0], max[1], max[2]);
          }
          else {
              mx = my = mz = 0;
              triangulate();
          }
          positionArray.length = count * 3;
          if (!noNormals)
              { normalArray.length = count * 3; }
          indexArray.length = icount;
          if (atomindex)
              { atomindexArray.length = count; }
          return {
              position: new Float32Array(positionArray),
              normal: noNormals ? undefined : new Float32Array(normalArray),
              index: getUintArray(indexArray, positionArray.length / 3),
              atomindex: atomindex ? new Int32Array(atomindexArray) : undefined,
              contour: contour
          };
      };
      // polygonization
      function lerp(a, b, t) { return a + (b - a) * t; }
      function index(x, y, z) {
          x = (x + mx) % nx;
          y = (y + my) % ny;
          z = (z + mz) % nz;
          return ((zd * z) + yd * y) + x;
      }
      function VIntX(q, offset, x, y, z, valp1, valp2) {
          var _q = 3 * q;
          if (vertexIndex[_q] < 0) {
              var mu = (isolevel - valp1) / (valp2 - valp1);
              var nc = normalCache;
              var c = count * 3;
              positionArray[c + 0] = x + mu;
              positionArray[c + 1] = y;
              positionArray[c + 2] = z;
              if (!noNormals) {
                  var q3 = q * 3;
                  normalArray[c] = normalFactor * lerp(nc[q3], nc[q3 + 3], mu);
                  normalArray[c + 1] = normalFactor * lerp(nc[q3 + 1], nc[q3 + 4], mu);
                  normalArray[c + 2] = normalFactor * lerp(nc[q3 + 2], nc[q3 + 5], mu);
              }
              if (atomindex)
                  { atomindexArray[count] = atomindex[q + Math.round(mu)]; }
              vertexIndex[_q] = count;
              ilist[offset] = count;
              count += 1;
          }
          else {
              ilist[offset] = vertexIndex[_q];
          }
      }
      function VIntY(q, offset, x, y, z, valp1, valp2) {
          var _q = 3 * q + 1;
          if (vertexIndex[_q] < 0) {
              var mu = (isolevel - valp1) / (valp2 - valp1);
              var nc = normalCache;
              var c = count * 3;
              positionArray[c] = x;
              positionArray[c + 1] = y + mu;
              positionArray[c + 2] = z;
              if (!noNormals) {
                  var q3 = q * 3;
                  var q6 = q3 + yd * 3;
                  normalArray[c] = normalFactor * lerp(nc[q3], nc[q6], mu);
                  normalArray[c + 1] = normalFactor * lerp(nc[q3 + 1], nc[q6 + 1], mu);
                  normalArray[c + 2] = normalFactor * lerp(nc[q3 + 2], nc[q6 + 2], mu);
              }
              if (atomindex)
                  { atomindexArray[count] = atomindex[q + Math.round(mu) * yd]; }
              vertexIndex[_q] = count;
              ilist[offset] = count;
              count += 1;
          }
          else {
              ilist[offset] = vertexIndex[_q];
          }
      }
      function VIntZ(q, offset, x, y, z, valp1, valp2) {
          var _q = 3 * q + 2;
          if (vertexIndex[_q] < 0) {
              var mu = (isolevel - valp1) / (valp2 - valp1);
              var nc = normalCache;
              var c = count * 3;
              positionArray[c] = x;
              positionArray[c + 1] = y;
              positionArray[c + 2] = z + mu;
              if (!noNormals) {
                  var q3 = q * 3;
                  var q6 = q3 + zd * 3;
                  normalArray[c] = normalFactor * lerp(nc[q3], nc[q6], mu);
                  normalArray[c + 1] = normalFactor * lerp(nc[q3 + 1], nc[q6 + 1], mu);
                  normalArray[c + 2] = normalFactor * lerp(nc[q3 + 2], nc[q6 + 2], mu);
              }
              if (atomindex)
                  { atomindexArray[count] = atomindex[q + Math.round(mu) * zd]; }
              vertexIndex[_q] = count;
              ilist[offset] = count;
              count += 1;
          }
          else {
              ilist[offset] = vertexIndex[_q];
          }
      }
      function compNorm(q) {
          var q3 = q * 3;
          if (normalCache[q3] === 0.0) {
              normalCache[q3] = field[(q - 1 + n) % n] - field[(q + 1) % n];
              normalCache[q3 + 1] = field[(q - yd + n) % n] - field[(q + yd) % n];
              normalCache[q3 + 2] = field[(q - zd + n) % n] - field[(q + zd) % n];
          }
      }
      function polygonize(fx, fy, fz, q, edgeFilter) {
          // cache indices
          var q1;
          var qy;
          var qz;
          var q1y;
          var q1z;
          var qyz;
          var q1yz;
          if (wrap) {
              q = index(fx, fy, fz);
              q1 = index(fx + 1, fy, fz);
              qy = index(fx, fy + 1, fz);
              qz = index(fx, fy, fz + 1);
              q1y = index(fx + 1, fy + 1, fz);
              q1z = index(fx + 1, fy, fz + 1);
              qyz = index(fx, fy + 1, fz + 1);
              q1yz = index(fx + 1, fy + 1, fz + 1);
          }
          else {
              q1 = q + 1;
              qy = q + yd;
              qz = q + zd;
              q1y = qy + 1;
              q1z = qz + 1;
              qyz = qy + zd;
              q1yz = qyz + 1;
          }
          var cubeindex = 0;
          var field0 = field[q];
          var field1 = field[q1];
          var field2 = field[qy];
          var field3 = field[q1y];
          var field4 = field[qz];
          var field5 = field[q1z];
          var field6 = field[qyz];
          var field7 = field[q1yz];
          if (field0 < isolevel)
              { cubeindex |= 1; }
          if (field1 < isolevel)
              { cubeindex |= 2; }
          if (field2 < isolevel)
              { cubeindex |= 8; }
          if (field3 < isolevel)
              { cubeindex |= 4; }
          if (field4 < isolevel)
              { cubeindex |= 16; }
          if (field5 < isolevel)
              { cubeindex |= 32; }
          if (field6 < isolevel)
              { cubeindex |= 128; }
          if (field7 < isolevel)
              { cubeindex |= 64; }
          // if cube is entirely in/out of the surface - bail, nothing to draw
          var bits = edgeTable[cubeindex];
          if (bits === 0)
              { return 0; }
          var fx2 = fx + 1;
          var fy2 = fy + 1;
          var fz2 = fz + 1;
          // top of the cube
          if (bits & 1) {
              if (!noNormals) {
                  compNorm(q);
                  compNorm(q1);
              }
              VIntX(q, 0, fx, fy, fz, field0, field1);
          }
          if (bits & 2) {
              if (!noNormals) {
                  compNorm(q1);
                  compNorm(q1y);
              }
              VIntY(q1, 1, fx2, fy, fz, field1, field3);
          }
          if (bits & 4) {
              if (!noNormals) {
                  compNorm(qy);
                  compNorm(q1y);
              }
              VIntX(qy, 2, fx, fy2, fz, field2, field3);
          }
          if (bits & 8) {
              if (!noNormals) {
                  compNorm(q);
                  compNorm(qy);
              }
              VIntY(q, 3, fx, fy, fz, field0, field2);
          }
          // bottom of the cube
          if (bits & 16) {
              if (!noNormals) {
                  compNorm(qz);
                  compNorm(q1z);
              }
              VIntX(qz, 4, fx, fy, fz2, field4, field5);
          }
          if (bits & 32) {
              if (!noNormals) {
                  compNorm(q1z);
                  compNorm(q1yz);
              }
              VIntY(q1z, 5, fx2, fy, fz2, field5, field7);
          }
          if (bits & 64) {
              if (!noNormals) {
                  compNorm(qyz);
                  compNorm(q1yz);
              }
              VIntX(qyz, 6, fx, fy2, fz2, field6, field7);
          }
          if (bits & 128) {
              if (!noNormals) {
                  compNorm(qz);
                  compNorm(qyz);
              }
              VIntY(qz, 7, fx, fy, fz2, field4, field6);
          }
          // vertical lines of the cube
          if (bits & 256) {
              if (!noNormals) {
                  compNorm(q);
                  compNorm(qz);
              }
              VIntZ(q, 8, fx, fy, fz, field0, field4);
          }
          if (bits & 512) {
              if (!noNormals) {
                  compNorm(q1);
                  compNorm(q1z);
              }
              VIntZ(q1, 9, fx2, fy, fz, field1, field5);
          }
          if (bits & 1024) {
              if (!noNormals) {
                  compNorm(q1y);
                  compNorm(q1yz);
              }
              VIntZ(q1y, 10, fx2, fy2, fz, field3, field7);
          }
          if (bits & 2048) {
              if (!noNormals) {
                  compNorm(qy);
                  compNorm(qyz);
              }
              VIntZ(qy, 11, fx, fy2, fz, field2, field6);
          }
          var triIndex = cubeindex << 4; // re-purpose cubeindex into an offset into triTable
          var e1;
          var e2;
          var e3;
          var i = 0;
          // here is where triangles are created
          while (triTable[triIndex + i] !== -1) {
              e1 = triTable[triIndex + i];
              e2 = triTable[triIndex + i + 1];
              e3 = triTable[triIndex + i + 2];
              if (contour) {
                  if (allowedContours[e1][e2] & edgeFilter) {
                      indexArray[icount++] = ilist[e1];
                      indexArray[icount++] = ilist[e2];
                  }
                  if (allowedContours[e2][e3] & edgeFilter) {
                      indexArray[icount++] = ilist[e2];
                      indexArray[icount++] = ilist[e3];
                  }
                  if (allowedContours[e1][e3] & edgeFilter) {
                      indexArray[icount++] = ilist[e1];
                      indexArray[icount++] = ilist[e3];
                  }
              }
              else {
                  indexArray[icount++] = ilist[isNegativeIso ? e1 : e2];
                  indexArray[icount++] = ilist[isNegativeIso ? e2 : e1];
                  indexArray[icount++] = ilist[e3];
              }
              i += 3;
          }
      }
      function triangulate(xBeg, yBeg, zBeg, xEnd, yEnd, zEnd) {
          var q;
          var q3;
          var x;
          var y;
          var z;
          var yOffset;
          var zOffset;
          xBeg = xBeg !== undefined ? xBeg : 0;
          yBeg = yBeg !== undefined ? yBeg : 0;
          zBeg = zBeg !== undefined ? zBeg : 0;
          xEnd = xEnd !== undefined ? xEnd : nx - 1;
          yEnd = yEnd !== undefined ? yEnd : ny - 1;
          zEnd = zEnd !== undefined ? zEnd : nz - 1;
          if (!wrap) {
              if (noNormals) {
                  xBeg = Math.max(0, xBeg);
                  yBeg = Math.max(0, yBeg);
                  zBeg = Math.max(0, zBeg);
                  xEnd = Math.min(nx - 1, xEnd);
                  yEnd = Math.min(ny - 1, yEnd);
                  zEnd = Math.min(nz - 1, zEnd);
              }
              else {
                  xBeg = Math.max(1, xBeg);
                  yBeg = Math.max(1, yBeg);
                  zBeg = Math.max(1, zBeg);
                  xEnd = Math.min(nx - 2, xEnd);
                  yEnd = Math.min(ny - 2, yEnd);
                  zEnd = Math.min(nz - 2, zEnd);
              }
          }
          var xBeg2, yBeg2, zBeg2, xEnd2, yEnd2, zEnd2;
          if (!wrap) {
              // init part of the vertexIndex
              // (takes a significant amount of time to do for all)
              xBeg2 = Math.max(0, xBeg - 2);
              yBeg2 = Math.max(0, yBeg - 2);
              zBeg2 = Math.max(0, zBeg - 2);
              xEnd2 = Math.min(nx, xEnd + 2);
              yEnd2 = Math.min(ny, yEnd + 2);
              zEnd2 = Math.min(nz, zEnd + 2);
              for (z = zBeg2; z < zEnd2; ++z) {
                  zOffset = zd * z;
                  for (y = yBeg2; y < yEnd2; ++y) {
                      yOffset = zOffset + yd * y;
                      for (x = xBeg2; x < xEnd2; ++x) {
                          q = 3 * (yOffset + x);
                          vertexIndex[q] = -1;
                          vertexIndex[q + 1] = -1;
                          vertexIndex[q + 2] = -1;
                      }
                  }
              }
          }
          else {
              xBeg2 = xBeg - 2;
              yBeg2 = yBeg - 2;
              zBeg2 = zBeg - 2;
              xEnd2 = xEnd + 2;
              yEnd2 = yEnd + 2;
              zEnd2 = zEnd + 2;
              for (z = zBeg2; z < zEnd2; ++z) {
                  for (y = yBeg2; y < yEnd2; ++y) {
                      for (x = xBeg2; x < xEnd2; ++x) {
                          q3 = index(x, y, z) * 3;
                          vertexIndex[q3] = -1;
                          vertexIndex[q3 + 1] = -1;
                          vertexIndex[q3 + 2] = -1;
                      }
                  }
              }
          }
          if (!wrap) {
              // clip space where the isovalue is too low
              var __break;
              var __xBeg = xBeg;
              var __yBeg = yBeg;
              var __zBeg = zBeg;
              var __xEnd = xEnd;
              var __yEnd = yEnd;
              var __zEnd = zEnd;
              __break = false;
              for (z = zBeg; z < zEnd; ++z) {
                  for (y = yBeg; y < yEnd; ++y) {
                      for (x = xBeg; x < xEnd; ++x) {
                          q = ((nx * ny) * z) + (nx * y) + x;
                          if (field[q] >= isolevel) {
                              __zBeg = z;
                              __break = true;
                              break;
                          }
                      }
                      if (__break)
                          { break; }
                  }
                  if (__break)
                      { break; }
              }
              __break = false;
              for (y = yBeg; y < yEnd; ++y) {
                  for (z = __zBeg; z < zEnd; ++z) {
                      for (x = xBeg; x < xEnd; ++x) {
                          q = ((nx * ny) * z) + (nx * y) + x;
                          if (field[q] >= isolevel) {
                              __yBeg = y;
                              __break = true;
                              break;
                          }
                      }
                      if (__break)
                          { break; }
                  }
                  if (__break)
                      { break; }
              }
              __break = false;
              for (x = xBeg; x < xEnd; ++x) {
                  for (y = __yBeg; y < yEnd; ++y) {
                      for (z = __zBeg; z < zEnd; ++z) {
                          q = ((nx * ny) * z) + (nx * y) + x;
                          if (field[q] >= isolevel) {
                              __xBeg = x;
                              __break = true;
                              break;
                          }
                      }
                      if (__break)
                          { break; }
                  }
                  if (__break)
                      { break; }
              }
              __break = false;
              for (z = zEnd; z >= zBeg; --z) {
                  for (y = yEnd; y >= yBeg; --y) {
                      for (x = xEnd; x >= xBeg; --x) {
                          q = ((nx * ny) * z) + (nx * y) + x;
                          if (field[q] >= isolevel) {
                              __zEnd = z;
                              __break = true;
                              break;
                          }
                      }
                      if (__break)
                          { break; }
                  }
                  if (__break)
                      { break; }
              }
              __break = false;
              for (y = yEnd; y >= yBeg; --y) {
                  for (z = __zEnd; z >= zBeg; --z) {
                      for (x = xEnd; x >= xBeg; --x) {
                          q = ((nx * ny) * z) + (nx * y) + x;
                          if (field[q] >= isolevel) {
                              __yEnd = y;
                              __break = true;
                              break;
                          }
                      }
                      if (__break)
                          { break; }
                  }
                  if (__break)
                      { break; }
              }
              __break = false;
              for (x = xEnd; x >= xBeg; --x) {
                  for (y = __yEnd; y >= yBeg; --y) {
                      for (z = __zEnd; z >= zBeg; --z) {
                          q = ((nx * ny) * z) + (nx * y) + x;
                          if (field[q] >= isolevel) {
                              __xEnd = x;
                              __break = true;
                              break;
                          }
                      }
                      if (__break)
                          { break; }
                  }
                  if (__break)
                      { break; }
              }
              //
              if (noNormals) {
                  xBeg = Math.max(0, __xBeg - 1);
                  yBeg = Math.max(0, __yBeg - 1);
                  zBeg = Math.max(0, __zBeg - 1);
                  xEnd = Math.min(nx - 1, __xEnd + 1);
                  yEnd = Math.min(ny - 1, __yEnd + 1);
                  zEnd = Math.min(nz - 1, __zEnd + 1);
              }
              else {
                  xBeg = Math.max(1, __xBeg - 1);
                  yBeg = Math.max(1, __yBeg - 1);
                  zBeg = Math.max(1, __zBeg - 1);
                  xEnd = Math.min(nx - 2, __xEnd + 1);
                  yEnd = Math.min(ny - 2, __yEnd + 1);
                  zEnd = Math.min(nz - 2, __zEnd + 1);
              }
          }
          // polygonize part of the grid
          var edgeFilter = 15;
          for (z = zBeg; z < zEnd; ++z, edgeFilter &= ~4) {
              zOffset = zd * z;
              edgeFilter |= 2;
              for (y = yBeg; y < yEnd; ++y, edgeFilter &= ~2) {
                  yOffset = zOffset + yd * y;
                  edgeFilter |= 1;
                  for (x = xBeg; x < xEnd; ++x, edgeFilter &= ~1) {
                      q = yOffset + x;
                      polygonize(x, y, z, q, edgeFilter);
                  }
              }
          }
      }
  }
  Object.assign(MarchingCubes, { __deps: [getEdgeTable, getTriTable, getAllowedContours, getUintArray] });

  /**
   * @file Matrix Utils
   * @private
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   *
   * svd methods from Eugene Zatepyakin / http://inspirit.github.io/jsfeat/
   */
  var Matrix = function Matrix(cols, rows) {
      this.cols = cols;
      this.rows = rows;
      this.size = this.cols * this.rows;
      this.data = new Float32Array(this.size);
  };
  Matrix.prototype.copyTo = function copyTo (matrix) {
      matrix.data.set(this.data);
  };
  function transpose(At, A) {
      var i = 0;
      var j = 0;
      var nrows = A.rows;
      var ncols = A.cols;
      var Ai = 0;
      var Ati = 0;
      var pAt = 0;
      var ad = A.data;
      var atd = At.data;
      for (; i < nrows; Ati += 1, Ai += ncols, i++) {
          pAt = Ati;
          for (j = 0; j < ncols; pAt += nrows, j++)
              { atd[pAt] = ad[Ai + j]; }
      }
  }
  // C = A * B
  function multiply(C, A, B) {
      var i = 0;
      var j = 0;
      var k = 0;
      var Ap = 0;
      var pA = 0;
      var pB = 0;
      var _pB = 0;
      var Cp = 0;
      var ncols = A.cols;
      var nrows = A.rows;
      var mcols = B.cols;
      var ad = A.data;
      var bd = B.data;
      var cd = C.data;
      var sum = 0.0;
      for (; i < nrows; Ap += ncols, i++) {
          for (_pB = 0, j = 0; j < mcols; Cp++, _pB++, j++) {
              pB = _pB;
              pA = Ap;
              sum = 0.0;
              for (k = 0; k < ncols; pA++, pB += mcols, k++) {
                  sum += ad[pA] * bd[pB];
              }
              cd[Cp] = sum;
          }
      }
  }
  // C = A * B'
  function multiplyABt(C, A, B) {
      var i = 0;
      var j = 0;
      var k = 0;
      var Ap = 0;
      var pA = 0;
      var pB = 0;
      var Cp = 0;
      var ncols = A.cols;
      var nrows = A.rows;
      var mrows = B.rows;
      var ad = A.data;
      var bd = B.data;
      var cd = C.data;
      var sum = 0.0;
      for (; i < nrows; Ap += ncols, i++) {
          for (pB = 0, j = 0; j < mrows; Cp++, j++) {
              pA = Ap;
              sum = 0.0;
              for (k = 0; k < ncols; pA++, pB++, k++) {
                  sum += ad[pA] * bd[pB];
              }
              cd[Cp] = sum;
          }
      }
  }
  function invert3x3(from, to) {
      var A = from.data;
      var invA = to.data;
      var t1 = A[4];
      var t2 = A[8];
      var t4 = A[5];
      var t5 = A[7];
      var t8 = A[0];
      var t9 = t8 * t1;
      var t11 = t8 * t4;
      var t13 = A[3];
      var t14 = A[1];
      var t15 = t13 * t14;
      var t17 = A[2];
      var t18 = t13 * t17;
      var t20 = A[6];
      var t21 = t20 * t14;
      var t23 = t20 * t17;
      var t26 = 1.0 / (t9 * t2 - t11 * t5 - t15 * t2 + t18 * t5 + t21 * t4 - t23 * t1);
      invA[0] = (t1 * t2 - t4 * t5) * t26;
      invA[1] = -(t14 * t2 - t17 * t5) * t26;
      invA[2] = -(-t14 * t4 + t17 * t1) * t26;
      invA[3] = -(t13 * t2 - t4 * t20) * t26;
      invA[4] = (t8 * t2 - t23) * t26;
      invA[5] = -(t11 - t18) * t26;
      invA[6] = -(-t13 * t5 + t1 * t20) * t26;
      invA[7] = -(t8 * t5 - t21) * t26;
      invA[8] = (t9 - t15) * t26;
  }
  function mat3x3determinant(M) {
      var md = M.data;
      return md[0] * md[4] * md[8] -
          md[0] * md[5] * md[7] -
          md[3] * md[1] * md[8] +
          md[3] * md[2] * md[7] +
          md[6] * md[1] * md[5] -
          md[6] * md[2] * md[4];
  }
  // C = A * B
  function multiply3x3(C, A, B) {
      var Cd = C.data;
      var Ad = A.data;
      var Bd = B.data;
      var m10 = Ad[0];
      var m11 = Ad[1];
      var m12 = Ad[2];
      var m13 = Ad[3];
      var m14 = Ad[4];
      var m15 = Ad[5];
      var m16 = Ad[6];
      var m17 = Ad[7];
      var m18 = Ad[8];
      var m20 = Bd[0];
      var m21 = Bd[1];
      var m22 = Bd[2];
      var m23 = Bd[3];
      var m24 = Bd[4];
      var m25 = Bd[5];
      var m26 = Bd[6];
      var m27 = Bd[7];
      var m28 = Bd[8];
      Cd[0] = m10 * m20 + m11 * m23 + m12 * m26;
      Cd[1] = m10 * m21 + m11 * m24 + m12 * m27;
      Cd[2] = m10 * m22 + m11 * m25 + m12 * m28;
      Cd[3] = m13 * m20 + m14 * m23 + m15 * m26;
      Cd[4] = m13 * m21 + m14 * m24 + m15 * m27;
      Cd[5] = m13 * m22 + m14 * m25 + m15 * m28;
      Cd[6] = m16 * m20 + m17 * m23 + m18 * m26;
      Cd[7] = m16 * m21 + m17 * m24 + m18 * m27;
      Cd[8] = m16 * m22 + m17 * m25 + m18 * m28;
  }
  function meanRows(A) {
      var nrows = A.rows;
      var ncols = A.cols;
      var Ad = A.data;
      var mean = new Array(ncols);
      for (var j = 0; j < ncols; ++j) {
          mean[j] = 0.0;
      }
      for (var i = 0, p = 0; i < nrows; ++i) {
          for (var j$1 = 0; j$1 < ncols; ++j$1, ++p) {
              mean[j$1] += Ad[p];
          }
      }
      for (var j$2 = 0; j$2 < ncols; ++j$2) {
          mean[j$2] /= nrows;
      }
      return mean;
  }
  function subRows(A, row) {
      var nrows = A.rows;
      var ncols = A.cols;
      var Ad = A.data;
      for (var i = 0, p = 0; i < nrows; ++i) {
          for (var j = 0; j < ncols; ++j, ++p) {
              Ad[p] -= row[j];
          }
      }
  }
  function swap(A, i0, i1, t) {
      t = A[i0];
      A[i0] = A[i1];
      A[i1] = t;
  }
  function hypot(a, b) {
      a = Math.abs(a);
      b = Math.abs(b);
      if (a > b) {
          b /= a;
          return a * Math.sqrt(1.0 + b * b);
      }
      if (b > 0) {
          a /= b;
          return b * Math.sqrt(1.0 + a * a);
      }
      return 0.0;
  }
  var EPSILON = 0.0000001192092896;
  var FLT_MIN = 1E-37;
  function JacobiSVDImpl(At, astep, _W, Vt, vstep, m, n, n1) {
      var eps = EPSILON * 2.0;
      var minval = FLT_MIN;
      var i = 0;
      var j = 0;
      var k = 0;
      var iter = 0;
      var maxIter = Math.max(m, 30);
      var Ai = 0;
      var Aj = 0;
      var Vi = 0;
      var Vj = 0;
      var changed = 0;
      var c = 0.0;
      var s = 0.0;
      var t = 0.0;
      var t0 = 0.0;
      var t1 = 0.0;
      var sd = 0.0;
      var beta = 0.0;
      var gamma = 0.0;
      var delta = 0.0;
      var a = 0.0;
      var p = 0.0;
      var b = 0.0;
      var seed = 0x1234;
      var val = 0.0;
      var val0 = 0.0;
      var asum = 0.0;
      var W = new Float64Array(n << 3);
      for (; i < n; i++) {
          for (k = 0, sd = 0; k < m; k++) {
              t = At[i * astep + k];
              sd += t * t;
          }
          W[i] = sd;
          if (Vt) {
              for (k = 0; k < n; k++) {
                  Vt[i * vstep + k] = 0;
              }
              Vt[i * vstep + i] = 1;
          }
      }
      for (; iter < maxIter; iter++) {
          changed = 0;
          for (i = 0; i < n - 1; i++) {
              for (j = i + 1; j < n; j++) {
                  Ai = (i * astep) | 0;
                  Aj = (j * astep) | 0;
                  a = W[i];
                  p = 0;
                  b = W[j];
                  k = 2;
                  p += At[Ai] * At[Aj];
                  p += At[Ai + 1] * At[Aj + 1];
                  for (; k < m; k++) {
                      p += At[Ai + k] * At[Aj + k];
                  }
                  if (Math.abs(p) <= eps * Math.sqrt(a * b))
                      { continue; }
                  p *= 2.0;
                  beta = a - b;
                  gamma = hypot(p, beta);
                  if (beta < 0) {
                      delta = (gamma - beta) * 0.5;
                      s = Math.sqrt(delta / gamma);
                      c = (p / (gamma * s * 2.0));
                  }
                  else {
                      c = Math.sqrt((gamma + beta) / (gamma * 2.0));
                      s = (p / (gamma * c * 2.0));
                  }
                  a = 0.0;
                  b = 0.0;
                  k = 2; // unroll
                  t0 = c * At[Ai] + s * At[Aj];
                  t1 = -s * At[Ai] + c * At[Aj];
                  At[Ai] = t0;
                  At[Aj] = t1;
                  a += t0 * t0;
                  b += t1 * t1;
                  t0 = c * At[Ai + 1] + s * At[Aj + 1];
                  t1 = -s * At[Ai + 1] + c * At[Aj + 1];
                  At[Ai + 1] = t0;
                  At[Aj + 1] = t1;
                  a += t0 * t0;
                  b += t1 * t1;
                  for (; k < m; k++) {
                      t0 = c * At[Ai + k] + s * At[Aj + k];
                      t1 = -s * At[Ai + k] + c * At[Aj + k];
                      At[Ai + k] = t0;
                      At[Aj + k] = t1;
                      a += t0 * t0;
                      b += t1 * t1;
                  }
                  W[i] = a;
                  W[j] = b;
                  changed = 1;
                  if (Vt) {
                      Vi = (i * vstep) | 0;
                      Vj = (j * vstep) | 0;
                      k = 2;
                      t0 = c * Vt[Vi] + s * Vt[Vj];
                      t1 = -s * Vt[Vi] + c * Vt[Vj];
                      Vt[Vi] = t0;
                      Vt[Vj] = t1;
                      t0 = c * Vt[Vi + 1] + s * Vt[Vj + 1];
                      t1 = -s * Vt[Vi + 1] + c * Vt[Vj + 1];
                      Vt[Vi + 1] = t0;
                      Vt[Vj + 1] = t1;
                      for (; k < n; k++) {
                          t0 = c * Vt[Vi + k] + s * Vt[Vj + k];
                          t1 = -s * Vt[Vi + k] + c * Vt[Vj + k];
                          Vt[Vi + k] = t0;
                          Vt[Vj + k] = t1;
                      }
                  }
              }
          }
          if (changed === 0)
              { break; }
      }
      for (i = 0; i < n; i++) {
          for (k = 0, sd = 0; k < m; k++) {
              t = At[i * astep + k];
              sd += t * t;
          }
          W[i] = Math.sqrt(sd);
      }
      for (i = 0; i < n - 1; i++) {
          j = i;
          for (k = i + 1; k < n; k++) {
              if (W[j] < W[k]) {
                  j = k;
              }
          }
          if (i !== j) {
              swap(W, i, j, sd);
              if (Vt) {
                  for (k = 0; k < m; k++) {
                      swap(At, i * astep + k, j * astep + k, t);
                  }
                  for (k = 0; k < n; k++) {
                      swap(Vt, i * vstep + k, j * vstep + k, t);
                  }
              }
          }
      }
      for (i = 0; i < n; i++) {
          _W[i] = W[i];
      }
      if (!Vt) {
          return;
      }
      for (i = 0; i < n1; i++) {
          sd = i < n ? W[i] : 0;
          while (sd <= minval) {
              // if we got a zero singular value, then in order to get the corresponding left singular vector
              // we generate a random vector, project it to the previously computed left singular vectors,
              // subtract the projection and normalize the difference.
              val0 = (1.0 / m);
              for (k = 0; k < m; k++) {
                  seed = (seed * 214013 + 2531011);
                  val = (((seed >> 16) & 0x7fff) & 256) !== 0 ? val0 : -val0;
                  At[i * astep + k] = val;
              }
              for (iter = 0; iter < 2; iter++) {
                  for (j = 0; j < i; j++) {
                      sd = 0;
                      for (k = 0; k < m; k++) {
                          sd += At[i * astep + k] * At[j * astep + k];
                      }
                      asum = 0.0;
                      for (k = 0; k < m; k++) {
                          t = (At[i * astep + k] - sd * At[j * astep + k]);
                          At[i * astep + k] = t;
                          asum += Math.abs(t);
                      }
                      asum = asum ? 1.0 / asum : 0;
                      for (k = 0; k < m; k++) {
                          At[i * astep + k] *= asum;
                      }
                  }
              }
              sd = 0;
              for (k = 0; k < m; k++) {
                  t = At[i * astep + k];
                  sd += t * t;
              }
              sd = Math.sqrt(sd);
          }
          s = (1.0 / sd);
          for (k = 0; k < m; k++) {
              At[i * astep + k] *= s;
          }
      }
  }
  function svd(A, W, U, V) {
      var at = 0;
      var i = 0;
      var _m = A.rows;
      var _n = A.cols;
      var m = _m;
      var n = _n;
      if (m < n) {
          at = 1;
          i = m;
          m = n;
          n = i;
      }
      var amt = new Matrix(m, m);
      var wmt = new Matrix(1, n);
      var vmt = new Matrix(n, n);
      if (at === 0) {
          transpose(amt, A);
      }
      else {
          for (i = 0; i < _n * _m; i++) {
              amt.data[i] = A.data[i];
          }
          for (; i < n * m; i++) {
              amt.data[i] = 0;
          }
      }
      JacobiSVDImpl(amt.data, m, wmt.data, vmt.data, n, m, n, m);
      if (W) {
          for (i = 0; i < n; i++) {
              W.data[i] = wmt.data[i];
          }
          for (; i < _n; i++) {
              W.data[i] = 0;
          }
      }
      if (at === 0) {
          if (U)
              { transpose(U, amt); }
          if (V)
              { transpose(V, vmt); }
      }
      else {
          if (U)
              { transpose(U, vmt); }
          if (V)
              { transpose(V, amt); }
      }
  }
  //
  function m4new() {
      return new Float32Array([
          1, 0, 0, 0,
          0, 1, 0, 0,
          0, 0, 1, 0,
          0, 0, 0, 1
      ]);
  }
  function m4set(out, n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
      out[0] = n11;
      out[4] = n12;
      out[8] = n13;
      out[12] = n14;
      out[1] = n21;
      out[5] = n22;
      out[9] = n23;
      out[13] = n24;
      out[2] = n31;
      out[6] = n32;
      out[10] = n33;
      out[14] = n34;
      out[3] = n41;
      out[7] = n42;
      out[11] = n43;
      out[15] = n44;
  }
  function m4multiply(out, a, b) {
      var a11 = a[0];
      var a12 = a[4];
      var a13 = a[8];
      var a14 = a[12];
      var a21 = a[1];
      var a22 = a[5];
      var a23 = a[9];
      var a24 = a[13];
      var a31 = a[2];
      var a32 = a[6];
      var a33 = a[10];
      var a34 = a[14];
      var a41 = a[3];
      var a42 = a[7];
      var a43 = a[11];
      var a44 = a[15];
      var b11 = b[0];
      var b12 = b[4];
      var b13 = b[8];
      var b14 = b[12];
      var b21 = b[1];
      var b22 = b[5];
      var b23 = b[9];
      var b24 = b[13];
      var b31 = b[2];
      var b32 = b[6];
      var b33 = b[10];
      var b34 = b[14];
      var b41 = b[3];
      var b42 = b[7];
      var b43 = b[11];
      var b44 = b[15];
      out[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
      out[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
      out[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
      out[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
      out[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
      out[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
      out[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
      out[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
      out[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
      out[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
      out[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
      out[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
      out[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
      out[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
      out[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
      out[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
  }
  function m4makeScale(out, x, y, z) {
      m4set(out, x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1);
  }
  m4makeScale.__deps = [m4set];
  function m4makeTranslation(out, x, y, z) {
      m4set(out, 1, 0, 0, x, 0, 1, 0, y, 0, 0, 1, z, 0, 0, 0, 1);
  }
  m4makeTranslation.__deps = [m4set];
  function m4makeRotationY(out, theta) {
      var c = Math.cos(theta);
      var s = Math.sin(theta);
      m4set(out, c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1);
  }
  m4makeRotationY.__deps = [m4set];
  //
  function m3new() {
      return new Float32Array([
          1, 0, 0,
          0, 1, 0,
          0, 0, 1
      ]);
  }
  function m3makeNormal(out, m4) {
      var r0 = v3new([m4[0], m4[1], m4[2]]);
      var r1 = v3new([m4[4], m4[5], m4[6]]);
      var r2 = v3new([m4[8], m4[9], m4[10]]);
      var cp = v3new();
      //        [ r0 ]       [ r1 x r2 ]
      // M3x3 = [ r1 ]   N = [ r2 x r0 ]
      //        [ r2 ]       [ r0 x r1 ]
      v3cross(cp, r1, r2);
      out[0] = cp[0];
      out[1] = cp[1];
      out[2] = cp[2];
      v3cross(cp, r2, r0);
      out[3] = cp[0];
      out[4] = cp[1];
      out[5] = cp[2];
      v3cross(cp, r0, r1);
      out[6] = cp[0];
      out[7] = cp[1];
      out[8] = cp[2];
  }
  m3makeNormal.__deps = [v3new, v3cross];

  /**
   * @file Surface Utils
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function laplacianSmooth(verts, faces, numiter, inflate) {
      // based on D. Xu, Y. Zhang (2009) Generating Triangulated Macromolecular
      // Surfaces by Euclidean Distance Transform. PLoS ONE 4(12): e8140.
      //
      // Permission to use, copy, modify, and distribute this program for
      // any purpose, with or without fee, is hereby granted, provided that
      // the notices on the head, the reference information, and this
      // copyright notice appear in all copies or substantial portions of
      // the Software. It is provided "as is" without express or implied
      // warranty.
      //
      // ported to JavaScript and adapted to NGL by Alexander Rose
      numiter = numiter || 1;
      inflate = inflate || true;
      var nv = verts.length / 3;
      var nf = faces.length / 3;
      var norms = undefined;
      if (inflate) {
          norms = new Float32Array(nv * 3);
      }
      var tps = new Float32Array(nv * 3);
      var i;
      var ndeg = 20;
      var vertdeg = new Array(ndeg);
      for (i = 0; i < ndeg; ++i) {
          vertdeg[i] = new Uint32Array(nv);
      }
      for (i = 0; i < nv; ++i) {
          vertdeg[0][i] = 0;
      }
      var j, jl;
      var flagvert;
      // for each face
      for (i = 0; i < nf; ++i) {
          var ao = i * 3;
          var bo = i * 3 + 1;
          var co = i * 3 + 2;
          // vertex a
          flagvert = true;
          for (j = 0, jl = vertdeg[0][faces[ao]]; j < jl; ++j) {
              if (faces[bo] === vertdeg[j + 1][faces[ao]]) {
                  flagvert = false;
                  break;
              }
          }
          if (flagvert) {
              vertdeg[0][faces[ao]]++;
              vertdeg[vertdeg[0][faces[ao]]][faces[ao]] = faces[bo];
          }
          flagvert = true;
          for (j = 0, jl = vertdeg[0][faces[ao]]; j < jl; ++j) {
              if (faces[co] === vertdeg[j + 1][faces[ao]]) {
                  flagvert = false;
                  break;
              }
          }
          if (flagvert) {
              vertdeg[0][faces[ao]]++;
              vertdeg[vertdeg[0][faces[ao]]][faces[ao]] = faces[co];
          }
          // vertex b
          flagvert = true;
          for (j = 0, jl = vertdeg[0][faces[bo]]; j < jl; ++j) {
              if (faces[ao] === vertdeg[j + 1][faces[bo]]) {
                  flagvert = false;
                  break;
              }
          }
          if (flagvert) {
              vertdeg[0][faces[bo]]++;
              vertdeg[vertdeg[0][faces[bo]]][faces[bo]] = faces[ao];
          }
          flagvert = true;
          for (j = 0, jl = vertdeg[0][faces[bo]]; j < jl; ++j) {
              if (faces[co] === vertdeg[j + 1][faces[bo]]) {
                  flagvert = false;
                  break;
              }
          }
          if (flagvert) {
              vertdeg[0][faces[bo]]++;
              vertdeg[vertdeg[0][faces[bo]]][faces[bo]] = faces[co];
          }
          // vertex c
          flagvert = true;
          for (j = 0; j < vertdeg[0][faces[co]]; ++j) {
              if (faces[ao] === vertdeg[j + 1][faces[co]]) {
                  flagvert = false;
                  break;
              }
          }
          if (flagvert) {
              vertdeg[0][faces[co]]++;
              vertdeg[vertdeg[0][faces[co]]][faces[co]] = faces[ao];
          }
          flagvert = true;
          for (j = 0, jl = vertdeg[0][faces[co]]; j < jl; ++j) {
              if (faces[bo] === vertdeg[j + 1][faces[co]]) {
                  flagvert = false;
                  break;
              }
          }
          if (flagvert) {
              vertdeg[0][faces[co]]++;
              vertdeg[vertdeg[0][faces[co]]][faces[co]] = faces[bo];
          }
      }
      var wt = 1.0;
      var wt2 = 0.5;
      var i3, vi3, vdi, wtvi, wt2vi;
      var ssign = -1;
      var scaleFactor = 1;
      var outwt = 0.75 / (scaleFactor + 3.5); // area-preserving
      // smoothing iterations
      for (var k = 0; k < numiter; ++k) {
          // for each vertex
          for (i = 0; i < nv; ++i) {
              i3 = i * 3;
              vdi = vertdeg[0][i];
              if (vdi < 3) {
                  tps[i3] = verts[i3];
                  tps[i3 + 1] = verts[i3 + 1];
                  tps[i3 + 2] = verts[i3 + 2];
              }
              else if (vdi === 3 || vdi === 4) {
                  tps[i3] = 0;
                  tps[i3 + 1] = 0;
                  tps[i3 + 2] = 0;
                  for (j = 0; j < vdi; ++j) {
                      vi3 = vertdeg[j + 1][i] * 3;
                      tps[i3] += verts[vi3];
                      tps[i3 + 1] += verts[vi3 + 1];
                      tps[i3 + 2] += verts[vi3 + 2];
                  }
                  tps[i3] += wt2 * verts[i3];
                  tps[i3 + 1] += wt2 * verts[i3 + 1];
                  tps[i3 + 2] += wt2 * verts[i3 + 2];
                  wt2vi = wt2 + vdi;
                  tps[i3] /= wt2vi;
                  tps[i3 + 1] /= wt2vi;
                  tps[i3 + 2] /= wt2vi;
              }
              else {
                  tps[i3] = 0;
                  tps[i3 + 1] = 0;
                  tps[i3 + 2] = 0;
                  for (j = 0; j < vdi; ++j) {
                      vi3 = vertdeg[j + 1][i] * 3;
                      tps[i3] += verts[vi3];
                      tps[i3 + 1] += verts[vi3 + 1];
                      tps[i3 + 2] += verts[vi3 + 2];
                  }
                  tps[i3] += wt * verts[i3];
                  tps[i3 + 1] += wt * verts[i3 + 1];
                  tps[i3 + 2] += wt * verts[i3 + 2];
                  wtvi = wt + vdi;
                  tps[i3] /= wtvi;
                  tps[i3 + 1] /= wtvi;
                  tps[i3 + 2] /= wtvi;
              }
          }
          verts.set(tps); // copy smoothed positions
          if (inflate) {
              computeVertexNormals(verts, faces, norms);
              var nv3 = nv * 3;
              for (i3 = 0; i3 < nv3; i3 += 3) {
                  // if(verts[i].inout) ssign=1;
                  // else ssign=-1;
                  verts[i3] += ssign * outwt * norms[i3];
                  verts[i3 + 1] += ssign * outwt * norms[i3 + 1];
                  verts[i3 + 2] += ssign * outwt * norms[i3 + 2];
              }
          }
      }
  }
  Object.assign(laplacianSmooth, { __deps: [computeVertexNormals] });
  function computeVertexNormals(position, index, normal) {
      var i, il;
      if (normal === undefined) {
          normal = new Float32Array(position.length);
      }
      else {
          // reset existing normals to zero
          for (i = 0, il = normal.length; i < il; i++) {
              normal[i] = 0;
          }
      }
      var a = new Float32Array(3);
      var b = new Float32Array(3);
      var c = new Float32Array(3);
      var cb = new Float32Array(3);
      var ab = new Float32Array(3);
      if (index) {
          // indexed elements
          for (i = 0, il = index.length; i < il; i += 3) {
              var ai = index[i] * 3;
              var bi = index[i + 1] * 3;
              var ci = index[i + 2] * 3;
              v3fromArray(a, position, ai);
              v3fromArray(b, position, bi);
              v3fromArray(c, position, ci);
              v3sub(cb, c, b);
              v3sub(ab, a, b);
              v3cross(cb, cb, ab);
              normal[ai] += cb[0];
              normal[ai + 1] += cb[1];
              normal[ai + 2] += cb[2];
              normal[bi] += cb[0];
              normal[bi + 1] += cb[1];
              normal[bi + 2] += cb[2];
              normal[ci] += cb[0];
              normal[ci + 1] += cb[1];
              normal[ci + 2] += cb[2];
          }
      }
      else {
          // non-indexed elements (unconnected triangle soup)
          for (i = 0, il = position.length; i < il; i += 9) {
              v3fromArray(a, position, i);
              v3fromArray(b, position, i + 3);
              v3fromArray(c, position, i + 6);
              v3sub(cb, c, b);
              v3sub(ab, a, b);
              v3cross(cb, cb, ab);
              normal[i] = cb[0];
              normal[i + 1] = cb[1];
              normal[i + 2] = cb[2];
              normal[i + 3] = cb[0];
              normal[i + 4] = cb[1];
              normal[i + 5] = cb[2];
              normal[i + 6] = cb[0];
              normal[i + 7] = cb[1];
              normal[i + 8] = cb[2];
          }
      }
      normalizeVector3array(normal);
      return normal;
  }
  Object.assign(computeVertexNormals, { __deps: [
          v3sub, v3cross, v3fromArray, normalizeVector3array
      ] });
  function getRadiusDict(radiusList) {
      var radiusDict = {};
      for (var i = 0, il = radiusList.length; i < il; ++i) {
          radiusDict[radiusList[i]] = true;
      }
      return radiusDict;
  }
  function getSurfaceGrid(min, max, maxRadius, scaleFactor, extraMargin) {
      // need margin to avoid boundary/round off effects
      var margin = (1 / scaleFactor) * 3;
      margin += maxRadius;
      v3subScalar(min, min, extraMargin + margin);
      v3addScalar(max, max, extraMargin + margin);
      v3multiplyScalar(min, min, scaleFactor);
      v3floor(min, min);
      v3divideScalar(min, min, scaleFactor);
      v3multiplyScalar(max, max, scaleFactor);
      v3ceil(max, max);
      v3divideScalar(max, max, scaleFactor);
      var dim = new Float32Array(3);
      v3sub(dim, max, min);
      v3multiplyScalar(dim, dim, scaleFactor);
      v3ceil(dim, dim);
      v3addScalar(dim, dim, 1);
      var maxSize = Math.pow(10, 6) * 256;
      var tmpSize = dim[0] * dim[1] * dim[2] * 3;
      if (maxSize <= tmpSize) {
          scaleFactor *= Math.pow(maxSize / tmpSize, 1 / 3);
          v3multiplyScalar(min, min, scaleFactor);
          v3floor(min, min);
          v3divideScalar(min, min, scaleFactor);
          v3multiplyScalar(max, max, scaleFactor);
          v3ceil(max, max);
          v3divideScalar(max, max, scaleFactor);
          v3sub(dim, max, min);
          v3multiplyScalar(dim, dim, scaleFactor);
          v3ceil(dim, dim);
          v3addScalar(dim, dim, 1);
      }
      var tran = new Float32Array(min);
      v3negate(tran, tran);
      // coordinate transformation matrix
      var matrix = m4new();
      var mroty = m4new();
      m4makeRotationY(mroty, degToRad(90));
      m4multiply(matrix, matrix, mroty);
      var mscale = m4new();
      m4makeScale(mscale, -1 / scaleFactor, 1 / scaleFactor, 1 / scaleFactor);
      m4multiply(matrix, matrix, mscale);
      var mtrans = m4new();
      m4makeTranslation(mtrans, -scaleFactor * tran[2], -scaleFactor * tran[1], -scaleFactor * tran[0]);
      m4multiply(matrix, matrix, mtrans);
      return {
          dim: dim,
          tran: tran,
          matrix: matrix,
          scaleFactor: scaleFactor
      };
  }
  Object.assign(getSurfaceGrid, { '__deps': [
          degToRad,
          v3subScalar, v3addScalar, v3divideScalar, v3multiplyScalar,
          v3floor, v3ceil, v3sub, v3negate,
          m4new, m4multiply, m4makeTranslation, m4makeScale, m4makeRotationY
      ] });

  /**
   * @file Surface
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Surface
   */
  var Surface = function Surface(name, path, data) {
      this.name = name || '';
      this.path = path || '';
      this.info = {};
      this.center = new Vector3();
      this.boundingBox = new Box3();
      if (data instanceof Geometry ||
          data instanceof BufferGeometry ||
          data instanceof Group) {
          // to be removed
          this.fromGeometry(data);
      }
      else if (data) {
          this.set(data.position, data.index, data.normal, data.color, data.atomindex, data.contour);
          this.boundingBox.setFromArray(data.position);
          this.boundingBox.getCenter(this.center);
      }
  };

  var prototypeAccessors$p = { type: { configurable: true } };
  prototypeAccessors$p.type.get = function () { return 'Surface'; };
  /**
   * set surface data
   * @param {Float32Array} position - surface positions
   * @param {Int32Array} index - surface indices
   * @param {Float32Array} normal - surface normals
   * @param {Float32Array} color - surface colors
   * @param {Int32Array} atomindex - atom indices
   * @param {boolean} contour - contour mode flag
   * @return {undefined}
   */
  Surface.prototype.set = function set (position, index, normal, color, atomindex, contour) {
          if ( contour === void 0 ) contour = false;

      /**
       * @type {Float32Array}
       */
      this.position = position;
      /**
       * @type {Uint32Array|Uint16Array|undefined}
       */
      this.index = index;
      /**
       * @type {Float32Array|undefined}
       */
      this.normal = normal;
      /**
       * @type {Float32Array|undefined}
       */
      this.color = color;
      /**
       * @type {Int32Array|undefined}
       */
      this.atomindex = atomindex;
      this.size = position.length / 3;
      this.contour = contour;
  };
  Surface.prototype.fromGeometry = function fromGeometry (geometry) {
      if (exports.Debug)
          { Log.time('GeometrySurface.fromGeometry'); }
      var geo;
      if (geometry instanceof Geometry) {
          geometry.computeVertexNormals(true);
          geo = new BufferGeometry().fromGeometry(geometry);
      }
      else if (geometry instanceof BufferGeometry) {
          geo = geometry;
      }
      else {
          geo = geometry[0];
      }
      if (!geo.boundingBox)
          { geo.computeBoundingBox(); }
      this.boundingBox.copy(geo.boundingBox);
      this.boundingBox.getCenter(this.center);
      var position, color, index, normal;
      if (geo instanceof BufferGeometry) {
          var attr = geo.attributes;
          var an = attr.normal ? attr.normal.array : false;
          // assume there are no normals if the first is zero
          if (!an || (an[0] === 0 && an[1] === 0 && an[2] === 0)) {
              geo.computeVertexNormals();
          }
          position = attr.position.array;
          index = attr.index ? attr.index.array : null;
          normal = attr.normal.array;
      }
      this.set(position, index, normal, color, undefined);
      if (exports.Debug)
          { Log.timeEnd('GeometrySurface.setGeometry'); }
  };
  Surface.prototype.getPosition = function getPosition () {
      return this.position;
  };
  Surface.prototype.getColor = function getColor (params) {
      var p = params || {};
      p.surface = this;
      var n = this.size;
      var array = new Float32Array(n * 3);
      var colormaker = ColormakerRegistry.getScheme(p);
      if (colormaker.volumeColor || p.scheme === 'random') {
          for (var i = 0; i < n; ++i) {
              colormaker.volumeColorToArray(i, array, i * 3);
          }
      }
      else if (colormaker.positionColor) {
          var v = new Vector3();
          var pos = this.position;
          for (var i$1 = 0; i$1 < n; ++i$1) {
              var i3 = i$1 * 3;
              v.set(pos[i3], pos[i3 + 1], pos[i3 + 2]);
              colormaker.positionColorToArray(v, array, i3);
          }
      }
      else if (colormaker.atomColor && this.atomindex) {
          var atomProxy = p.structure.getAtomProxy();
          var atomindex = this.atomindex;
          for (var i$2 = 0; i$2 < n; ++i$2) {
              atomProxy.index = atomindex[i$2];
              colormaker.atomColorToArray(atomProxy, array, i$2 * 3);
          }
      }
      else {
          var tc = new Color(p.value);
          uniformArray3(n, tc.r, tc.g, tc.b, array);
      }
      return array;
  };
  Surface.prototype.getPicking = function getPicking (structure) {
      if (this.atomindex && structure) {
          return new AtomPicker(this.atomindex, structure);
      }
      else {
          return new SurfacePicker(serialArray(this.size), this);
      }
  };
  Surface.prototype.getNormal = function getNormal () {
      return this.normal;
  };
  Surface.prototype.getSize = function getSize (size, scale) {
      return uniformArray(this.size, size * scale);
  };
  Surface.prototype.getIndex = function getIndex () {
      return this.index;
  };
  Surface.prototype.getFilteredIndex = function getFilteredIndex (sele, structure) {
      if (sele && this.atomindex) {
          var selection = new Selection(sele);
          var atomSet = structure.getAtomSet(selection);
          var filteredIndex = [];
          var atomindex = this.atomindex;
          var index = this.index;
          var n = index.length;
          var elementSize = this.contour ? 2 : 3;
          var j = 0;
          for (var i = 0; i < n; i += elementSize) {
              var include = true;
              for (var a = 0; a < elementSize; a++) {
                  var idx = index[i + a];
                  var ai = atomindex[idx];
                  if (!atomSet.get(ai)) {
                      include = false;
                      break;
                  }
              }
              if (!include) {
                  continue;
              }
              for (var a$1 = 0; a$1 < elementSize; a$1++, j++) {
                  filteredIndex[j] = index[i + a$1];
              }
          }
          return getUintArray(filteredIndex, this.position.length / 3);
      }
      else {
          return this.index;
      }
  };
  Surface.prototype.getAtomindex = function getAtomindex () {
      return this.atomindex;
  };
  Surface.prototype.dispose = function dispose () {
      //
  };

  Object.defineProperties( Surface.prototype, prototypeAccessors$p );

  /**
   * @file Volume
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function VolumeSurface(data, nx, ny, nz, atomindex) {
      var mc = new MarchingCubes(data, nx, ny, nz, atomindex);
      function getSurface(isolevel, smooth, box, matrix, contour, wrap) {
          if ( wrap === void 0 ) wrap = false;

          var sd = mc.triangulate(isolevel, smooth, box, contour, wrap);
          if (smooth && !contour) {
              laplacianSmooth(sd.position, sd.index, smooth, true);
              sd.normal = computeVertexNormals(sd.position, sd.index);
          }
          if (matrix) {
              applyMatrix4toVector3array(matrix, sd.position);
              if (sd.normal) {
                  var normalMatrix = m3new();
                  m3makeNormal(normalMatrix, matrix);
                  applyMatrix3toVector3array(normalMatrix, sd.normal);
              }
          }
          return sd;
      }
      this.getSurface = getSurface;
  }
  Object.assign(VolumeSurface, { __deps: [
          laplacianSmooth, computeVertexNormals, MarchingCubes,
          applyMatrix4toVector3array, applyMatrix3toVector3array,
          m3new, m3makeNormal
      ] });
  WorkerRegistry.add('surf', function func(e, callback) {
      var a = e.data.args;
      var p = e.data.params;
      if (a) {
          /* global self */
          self.volsurf = new VolumeSurface(a[0], a[1], a[2], a[3], a[4]);
      }
      if (p) {
          var sd = self.volsurf.getSurface(p.isolevel, p.smooth, p.box, p.matrix, p.contour, p.wrap);
          var transferList = [sd.position.buffer, sd.index.buffer];
          if (sd.normal)
              { transferList.push(sd.normal.buffer); }
          if (sd.atomindex)
              { transferList.push(sd.atomindex.buffer); }
          var data = {
              sd: sd,
              p: p
          };
          callback(data, transferList);
      }
  }, [VolumeSurface]);
  /**
   * Volume
   */
  var Volume = function Volume(name, path, data, nx, ny, nz, atomindex) {
      this.name = name;
      this.path = path;
      this.matrix = new Matrix4();
      this.normalMatrix = new Matrix3();
      this.inverseMatrix = new Matrix4();
      this.center = new Vector3();
      this.boundingBox = new Box3();
      this.setData(data, nx, ny, nz, atomindex);
  };

  var prototypeAccessors$o = { type: { configurable: true },position: { configurable: true },min: { configurable: true },max: { configurable: true },sum: { configurable: true },mean: { configurable: true },rms: { configurable: true } };
  prototypeAccessors$o.type.get = function () { return 'Volume'; };
  /**
   * set volume data
   * @param {Float32array} data - volume 3d grid
   * @param {Integer} nx - x dimension of the 3d volume
   * @param {Integer} ny - y dimension of the 3d volume
   * @param {Integer} nz - z dimension of the 3d volume
   * @param {Int32Array} atomindex - atom indices corresponding to the cells in the 3d grid
   * @return {undefined}
   */
  Volume.prototype.setData = function setData (data, nx, ny, nz, atomindex) {
      this.nx = nx || 1;
      this.ny = ny || 1;
      this.nz = nz || 1;
      this.data = data || new Float32Array(1);
      this.setAtomindex(atomindex);
      delete this._position;
      delete this._min;
      delete this._max;
      delete this._mean;
      delete this._rms;
      if (this.worker)
          { this.worker.terminate(); }
  };
  /**
   * Set statistics, which can be different from the data in this volume,
   * if this volume is a slice of a bigger volume
   * @param {Number|undefined} min - minimum value of the whole data set
   * @param {Number|undefined} max - maximum value of the whole data set
   * @param {Number|undefined} mean - average value of the whole data set
   * @param {Number|undefined} rms - sigma value of the whole data set
   */
  Volume.prototype.setStats = function setStats (min, max, mean, rms) {
      this._min = min;
      this._max = max;
      this._mean = mean;
      this._rms = rms;
  };
  /**
   * set transformation matrix
   * @param {Matrix4} matrix - 4x4 transformation matrix
   * @return {undefined}
   */
  Volume.prototype.setMatrix = function setMatrix (matrix) {
      this.matrix.copy(matrix);
      var bb = this.boundingBox;
      var v = this.center; // temporary re-purposing
      var x = this.nx - 1;
      var y = this.ny - 1;
      var z = this.nz - 1;
      bb.makeEmpty();
      bb.expandByPoint(v.set(x, y, z));
      bb.expandByPoint(v.set(x, y, 0));
      bb.expandByPoint(v.set(x, 0, z));
      bb.expandByPoint(v.set(x, 0, 0));
      bb.expandByPoint(v.set(0, y, z));
      bb.expandByPoint(v.set(0, 0, z));
      bb.expandByPoint(v.set(0, y, 0));
      bb.expandByPoint(v.set(0, 0, 0));
      bb.applyMatrix4(this.matrix);
      bb.getCenter(this.center);
      // make normal matrix
      var me = this.matrix.elements;
      var r0 = new Vector3(me[0], me[1], me[2]);
      var r1 = new Vector3(me[4], me[5], me[6]);
      var r2 = new Vector3(me[8], me[9], me[10]);
      var cp = new Vector3();
      //    [ r0 ]   [ r1 x r2 ]
      // M3x3 = [ r1 ]   N = [ r2 x r0 ]
      //    [ r2 ]   [ r0 x r1 ]
      var ne = this.normalMatrix.elements;
      cp.crossVectors(r1, r2);
      ne[0] = cp.x;
      ne[1] = cp.y;
      ne[2] = cp.z;
      cp.crossVectors(r2, r0);
      ne[3] = cp.x;
      ne[4] = cp.y;
      ne[5] = cp.z;
      cp.crossVectors(r0, r1);
      ne[6] = cp.x;
      ne[7] = cp.y;
      ne[8] = cp.z;
      this.inverseMatrix.getInverse(this.matrix);
  };
  /**
   * set atom indices
   * @param {Int32Array} atomindex - atom indices corresponding to the cells in the 3d grid
   * @return {undefined}
     */
  Volume.prototype.setAtomindex = function setAtomindex (atomindex) {
      this.atomindex = atomindex;
  };
  Volume.prototype.getBox = function getBox (center, size, target) {
      if (!target)
          { target = new Box3(); }
      target.set(center, center);
      target.expandByScalar(size);
      target.applyMatrix4(this.inverseMatrix);
      target.min.round();
      target.max.round();
      return target;
  };
  Volume.prototype._getBox = function _getBox (center, size) {
      if (!center || !size)
          { return; }
      if (!this.__box)
          { this.__box = new Box3(); }
      var box = this.getBox(center, size, this.__box);
      return [box.min.toArray(), box.max.toArray()];
  };
  Volume.prototype._makeSurface = function _makeSurface (sd, isolevel, smooth) {
      var name = this.name + '@' + isolevel.toPrecision(2);
      var surface = new Surface(name, '', sd);
      surface.info.isolevel = isolevel;
      surface.info.smooth = smooth;
      surface.info.volume = this;
      return surface;
  };
  Volume.prototype.getSurface = function getSurface (isolevel, smooth, center, size, contour, wrap) {
          if ( wrap === void 0 ) wrap = false;

      isolevel = isNaN(isolevel) ? this.getValueForSigma(2) : isolevel;
      smooth = defaults(smooth, 0);
      //
      if (this.volsurf === undefined) {
          this.volsurf = new VolumeSurface(this.data, this.nx, this.ny, this.nz, this.atomindex);
      }
      var box = this._getBox(center, size);
      var sd = this.volsurf.getSurface(isolevel, smooth, box, this.matrix.elements, contour, wrap);
      return this._makeSurface(sd, isolevel, smooth);
  };
  Volume.prototype.getSurfaceWorker = function getSurfaceWorker (isolevel, smooth, center, size, contour, wrap, callback) {
          var this$1$1 = this;

      isolevel = isNaN(isolevel) ? this.getValueForSigma(2) : isolevel;
      smooth = smooth || 0;
      //
      if (window.hasOwnProperty('Worker')) {
          if (this.workerPool === undefined) {
              this.workerPool = new WorkerPool('surf', 2);
          }
          var msg = {};
          var worker = this.workerPool.getNextWorker();
          if (worker.postCount === 0) {
              Object.assign(msg, {
                  args: [
                      this.data, this.nx, this.ny, this.nz, this.atomindex
                  ]
              });
          }
          Object.assign(msg, {
              params: {
                  isolevel: isolevel,
                  smooth: smooth,
                  box: this._getBox(center, size),
                  matrix: this.matrix.elements,
                  contour: contour,
                  wrap: wrap
              }
          });
          worker.post(msg, undefined, function (e) {
              var sd = e.data.sd;
              var p = e.data.p;
              callback(this$1$1._makeSurface(sd, p.isolevel, p.smooth));
          }, function (e) {
              console.warn('Volume.getSurfaceWorker error - trying without worker', e);
              var surface = this$1$1.getSurface(isolevel, smooth, center, size, contour, wrap);
              callback(surface);
          });
      }
      else {
          var surface = this.getSurface(isolevel, smooth, center, size, contour, wrap);
          callback(surface);
      }
  };
  Volume.prototype.getValueForSigma = function getValueForSigma (sigma) {
      return this.mean + defaults(sigma, 2) * this.rms;
  };
  Volume.prototype.getSigmaForValue = function getSigmaForValue (value) {
      return (defaults(value, 0) - this.mean) / this.rms;
  };
  prototypeAccessors$o.position.get = function () {
      if (!this._position) {
          var nz = this.nz;
          var ny = this.ny;
          var nx = this.nx;
          var position = new Float32Array(nx * ny * nz * 3);
          var p = 0;
          for (var z = 0; z < nz; ++z) {
              for (var y = 0; y < ny; ++y) {
                  for (var x = 0; x < nx; ++x) {
                      position[p + 0] = x;
                      position[p + 1] = y;
                      position[p + 2] = z;
                      p += 3;
                  }
              }
          }
          applyMatrix4toVector3array(this.matrix.elements, position);
          this._position = position;
      }
      return this._position;
  };
  Volume.prototype.getDataAtomindex = function getDataAtomindex () {
      return this.atomindex;
  };
  Volume.prototype.getDataPosition = function getDataPosition () {
      return this.position;
  };
  Volume.prototype.getDataColor = function getDataColor (params) {
      var p = params || {};
      p.volume = this;
      p.scale = p.scale || 'Spectral';
      p.domain = p.domain || [this.min, this.max];
      var colormaker = ColormakerRegistry.getScheme(p);
      var n = this.position.length / 3;
      var array = new Float32Array(n * 3);
      // var atoms = p.structure.atoms;
      // var atomindex = this.atomindex;
      for (var i = 0; i < n; ++i) {
          colormaker.volumeColorToArray(i, array, i * 3);
          // a = atoms[ atomindex[ i ] ];
          // if( a ) colormaker.atomColorToArray( a, array, i * 3 );
      }
      return array;
  };
  Volume.prototype.getDataPicking = function getDataPicking () {
      var picking = serialArray(this.position.length / 3);
      return new VolumePicker(picking, this);
  };
  Volume.prototype.getDataSize = function getDataSize (size, scale) {
      var data = this.data;
      var n = this.position.length / 3;
      var array;
      switch (size) {
          case 'value':
              array = new Float32Array(data);
              break;
          case 'abs-value':
              array = new Float32Array(data);
              for (var i = 0; i < n; ++i) {
                  array[i] = Math.abs(array[i]);
              }
              break;
          case 'value-min': {
              array = new Float32Array(data);
              var min = this.min;
              for (var i$1 = 0; i$1 < n; ++i$1) {
                  array[i$1] -= min;
              }
              break;
          }
          case 'deviation':
              array = new Float32Array(data);
              break;
          default:
              array = uniformArray(n, size);
              break;
      }
      if (scale !== 1.0) {
          for (var i$2 = 0; i$2 < n; ++i$2) {
              array[i$2] *= scale;
          }
      }
      return array;
  };
  prototypeAccessors$o.min.get = function () {
      if (this._min === undefined) {
          this._min = arrayMin(this.data);
      }
      return this._min;
  };
  prototypeAccessors$o.max.get = function () {
      if (this._max === undefined) {
          this._max = arrayMax(this.data);
      }
      return this._max;
  };
  prototypeAccessors$o.sum.get = function () {
      if (this._sum === undefined) {
          this._sum = arraySum(this.data);
      }
      return this._sum;
  };
  prototypeAccessors$o.mean.get = function () {
      if (this._mean === undefined) {
          this._mean = arrayMean(this.data);
      }
      return this._mean;
  };
  prototypeAccessors$o.rms.get = function () {
      if (this._rms === undefined) {
          this._rms = arrayRms(this.data);
      }
      return this._rms;
  };
  Volume.prototype.clone = function clone () {
      var vol = new Volume(this.name, this.path, this.data, this.nx, this.ny, this.nz, this.atomindex);
      vol.matrix.copy(this.matrix);
      vol.header = Object.assign({}, this.header);
      return vol;
  };
  Volume.prototype.dispose = function dispose () {
      if (this.workerPool)
          { this.workerPool.terminate(); }
  };

  Object.defineProperties( Volume.prototype, prototypeAccessors$o );

  ShaderRegistry.add('shader/Mesh.vert', "#define STANDARD\nuniform float clipNear;\nuniform vec3 clipCenter;\n#if defined( NEAR_CLIP ) || defined( RADIUS_CLIP ) || ( !defined( PICKING ) && !defined( NOLIGHT ) )\nvarying vec3 vViewPosition;\n#endif\n#if defined( RADIUS_CLIP )\nvarying vec3 vClipCenter;\n#endif\n#if defined( PICKING )\n#include unpack_color\nattribute float primitiveId;\nvarying vec3 vPickingColor;\n#elif defined( NOLIGHT )\nvarying vec3 vColor;\n#else\n#include color_pars_vertex\n#ifndef FLAT_SHADED\nvarying vec3 vNormal;\n#endif\n#endif\n#include common\nvoid main(){\n#if defined( PICKING )\nvPickingColor = unpackColor( primitiveId );\n#elif defined( NOLIGHT )\nvColor = color;\n#else\n#include color_vertex\n#include beginnormal_vertex\n#include defaultnormal_vertex\n#ifndef FLAT_SHADED\nvNormal = normalize( transformedNormal );\n#endif\n#endif\n#include begin_vertex\n#include project_vertex\n#if defined( NEAR_CLIP ) || defined( RADIUS_CLIP ) || ( !defined( PICKING ) && !defined( NOLIGHT ) )\nvViewPosition = -mvPosition.xyz;\n#endif\n#if defined( RADIUS_CLIP )\nvClipCenter = -( modelViewMatrix * vec4( clipCenter, 1.0 ) ).xyz;\n#endif\n#include nearclip_vertex\n}");

  ShaderRegistry.add('shader/Mesh.frag', "#define STANDARD\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 interiorColor;\nuniform float interiorDarkening;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\nuniform float clipNear;\nuniform float clipRadius;\n#if defined( NEAR_CLIP ) || defined( RADIUS_CLIP ) || ( !defined( PICKING ) && !defined( NOLIGHT ) )\nvarying vec3 vViewPosition;\n#endif\n#if defined( RADIUS_CLIP )\nvarying vec3 vClipCenter;\n#endif\n#if defined( PICKING )\nuniform float objectId;\nvarying vec3 vPickingColor;\n#elif defined( NOLIGHT )\nvarying vec3 vColor;\n#else\n#ifndef FLAT_SHADED\nvarying vec3 vNormal;\n#endif\n#include common\n#include color_pars_fragment\n#include fog_pars_fragment\n#include bsdfs\n#include lights_pars_begin\n#include lights_physical_pars_fragment\n#endif\nvoid main(){\n#include nearclip_fragment\n#include radiusclip_fragment\n#if defined( PICKING )\nif( opacity < 0.3 )\ndiscard;\ngl_FragColor = vec4( vPickingColor, objectId );\n#elif defined( NOLIGHT )\ngl_FragColor = vec4( vColor, opacity );\n#else\nvec4 diffuseColor = vec4( diffuse, opacity );\nReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\nvec3 totalEmissiveLight = emissive;\n#include color_fragment\n#include roughnessmap_fragment\n#include metalnessmap_fragment\n#include normal_fragment_begin\n#include lights_physical_fragment\n#include lights_fragment_begin\n#include lights_fragment_end\nvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveLight;\n#include interior_fragment\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );\n#include premultiplied_alpha_fragment\n#include tonemapping_fragment\n#include encodings_fragment\n#include fog_fragment\n#include opaque_back_fragment\n#endif\n}");

  /**
   * @file Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function getThreeSide(side) {
      if (side === 'front') {
          return FrontSide;
      }
      else if (side === 'back') {
          return BackSide;
      }
      else if (side === 'double') {
          return DoubleSide;
      }
      else {
          return DoubleSide;
      }
  }
  var itemSize = {
      'f': 1, 'v2': 2, 'v3': 3, 'c': 3
  };
  function setObjectMatrix(object, matrix) {
      object.matrix.copy(matrix);
      object.matrix.decompose(object.position, object.quaternion, object.scale);
      object.matrixWorldNeedsUpdate = true;
  }
  var BufferDefaultParameters = {
      opaqueBack: false,
      side: 'double',
      opacity: 1.0,
      depthWrite: true,
      clipNear: 0,
      clipRadius: 0,
      clipCenter: new Vector3(),
      flatShaded: false,
      wireframe: false,
      roughness: 0.4,
      metalness: 0.0,
      diffuse: 0xffffff,
      diffuseInterior: false,
      useInteriorColor: false,
      interiorColor: 0xdddddd,
      interiorDarkening: 0,
      forceTransparent: false,
      matrix: new Matrix4(),
      disablePicking: false,
      sortParticles: false,
      background: false
  };
  var BufferParameterTypes = {
      opaqueBack: { updateShader: true },
      side: { updateShader: true, property: true },
      opacity: { uniform: true },
      depthWrite: { property: true },
      clipNear: { updateShader: true, property: true },
      clipRadius: { updateShader: true, uniform: true },
      clipCenter: { uniform: true },
      flatShaded: { updateShader: true },
      background: { updateShader: true },
      wireframe: { updateVisibility: true },
      roughness: { uniform: true },
      metalness: { uniform: true },
      diffuse: { uniform: true },
      diffuseInterior: { updateShader: true },
      useInteriorColor: { updateShader: true },
      interiorColor: { uniform: true },
      interiorDarkening: { uniform: true },
      matrix: {}
  };
  /**
   * Buffer class. Base class for buffers.
   * @interface
   */
  var Buffer = function Buffer(data, params) {
      if ( params === void 0 ) params = {};

      this.parameterTypes = BufferParameterTypes;
      this.geometry = new BufferGeometry();
      this.indexVersion = 0;
      this.wireframeIndexVersion = -1;
      this.group = new Group();
      this.wireframeGroup = new Group();
      this.pickingGroup = new Group();
      this.vertexShader = '';
      this.fragmentShader = '';
      this.isImpostor = false;
      this.isText = false;
      this.isSurface = false;
      this.isPoint = false;
      this.isLine = false;
      this.dynamic = true;
      this.visible = true;
      this.wireframeIndexCount = 0;
      this.parameters = createParams(params, this.defaultParameters);
      this.uniforms = UniformsUtils.merge([
          UniformsLib.common,
          {
              fogColor: { value: new Color(0x000000) },
              fogNear: { value: 0.0 },
              fogFar: { value: 0.0 },
              opacity: { value: this.parameters.opacity },
              clipNear: { value: 0.0 },
              clipRadius: { value: this.parameters.clipRadius },
              clipCenter: { value: this.parameters.clipCenter }
          },
          {
              emissive: { value: new Color(0x000000) },
              roughness: { value: this.parameters.roughness },
              metalness: { value: this.parameters.metalness },
              interiorColor: { value: new Color(this.parameters.interiorColor) },
              interiorDarkening: { value: this.parameters.interiorDarkening },
          },
          UniformsLib.lights
      ]);
      this.uniforms.diffuse.value.set(this.parameters.diffuse);
      this.pickingUniforms = {
          clipNear: { value: 0.0 },
          objectId: { value: 0 },
          opacity: { value: this.parameters.opacity }
      };
      //
      var position = data.position || data.position1;
      this._positionDataSize = position ? position.length / 3 : 0;
      if (!data.primitiveId) {
          data.primitiveId = serialArray(this._positionDataSize);
      }
      this.addAttributes({
          position: { type: 'v3', value: data.position },
          color: { type: 'c', value: data.color },
          primitiveId: { type: 'f', value: data.primitiveId }
      });
      if (params.matrix) {
          this.matrix = params.matrix;
      }
      if (data.index) {
          this.initIndex(data.index);
      }
      this.picking = data.picking;
      this.makeWireframeGeometry();
  };

  var prototypeAccessors$n = { defaultParameters: { configurable: true },matrix: { configurable: true },transparent: { configurable: true },size: { configurable: true },attributeSize: { configurable: true },pickable: { configurable: true } };
  prototypeAccessors$n.defaultParameters.get = function () { return BufferDefaultParameters; };
  prototypeAccessors$n.matrix.set = function (m) {
      this.setMatrix(m);
  };
  prototypeAccessors$n.matrix.get = function () {
      return this.group.matrix.clone();
  };
  prototypeAccessors$n.transparent.get = function () {
      return this.parameters.opacity < 1 || this.parameters.forceTransparent;
  };
  prototypeAccessors$n.size.get = function () {
      return this._positionDataSize;
  };
  prototypeAccessors$n.attributeSize.get = function () {
      return this.size;
  };
  prototypeAccessors$n.pickable.get = function () {
      return !!this.picking && !this.parameters.disablePicking;
  };
  Buffer.prototype.setMatrix = function setMatrix (m) {
      setObjectMatrix(this.group, m);
      setObjectMatrix(this.wireframeGroup, m);
      setObjectMatrix(this.pickingGroup, m);
  };
  Buffer.prototype.initIndex = function initIndex (index) {
      this.geometry.setIndex(new BufferAttribute(index, 1));
      var nindex = this.geometry.getIndex();
      if (!nindex) {
          Log.error('Index is null');
          return;
      }
      nindex.setUsage(this.dynamic ? WebGLRenderingContext.DYNAMIC_DRAW : 0);
  };
  Buffer.prototype.makeMaterial = function makeMaterial () {
      var side = getThreeSide(this.parameters.side);
      var m = new ShaderMaterial({
          uniforms: this.uniforms,
          vertexShader: '',
          fragmentShader: '',
          depthTest: true,
          transparent: this.transparent,
          depthWrite: this.parameters.depthWrite,
          lights: true,
          fog: true,
          side: side
      });
      m.vertexColors = true;
      m.extensions.derivatives = true;
      m.extensions.fragDepth = this.isImpostor;
      var wm = new ShaderMaterial({
          uniforms: this.uniforms,
          vertexShader: '',
          fragmentShader: '',
          depthTest: true,
          transparent: this.transparent,
          depthWrite: this.parameters.depthWrite,
          lights: false,
          fog: true,
          side: side
      });
      wm.vertexColors = true;
      var pm = new ShaderMaterial({
          uniforms: this.pickingUniforms,
          vertexShader: '',
          fragmentShader: '',
          depthTest: true,
          transparent: false,
          depthWrite: this.parameters.depthWrite,
          lights: false,
          fog: false,
          side: side,
          blending: NoBlending
      });
      pm.vertexColors = true;
      pm.extensions.fragDepth = this.isImpostor;
      m.clipNear = this.parameters.clipNear;
      wm.clipNear = this.parameters.clipNear;
      pm.clipNear = this.parameters.clipNear;
      this.material = m;
      this.wireframeMaterial = wm;
      this.pickingMaterial = pm;
      // also sets vertexShader/fragmentShader
      this.updateShader();
  };
  Buffer.prototype.makeWireframeGeometry = function makeWireframeGeometry () {
      this.makeWireframeIndex();
      var geometry = this.geometry;
      var wireframeIndex = this.wireframeIndex;
      var wireframeGeometry = new BufferGeometry();
      wireframeGeometry.attributes = geometry.attributes;
      if (wireframeIndex) {
          wireframeGeometry.setIndex(new BufferAttribute(wireframeIndex, 1).setUsage(this.dynamic ? WebGLRenderingContext.DYNAMIC_DRAW : 0));
          wireframeGeometry.setDrawRange(0, this.wireframeIndexCount);
      }
      this.wireframeGeometry = wireframeGeometry;
  };
  Buffer.prototype.makeWireframeIndex = function makeWireframeIndex () {
      var edges = [];
      function checkEdge(a, b) {
          if (a > b) {
              var tmp = a;
              a = b;
              b = tmp;
          }
          var list = edges[a];
          if (list === undefined) {
              edges[a] = [b];
              return true;
          }
          else if (!list.includes(b)) {
              list.push(b);
              return true;
          }
          return false;
      }
      var geometry = this.geometry;
      var index = geometry.index;
      if (!this.parameters.wireframe) {
          this.wireframeIndex = new Uint16Array(0);
          this.wireframeIndexCount = 0;
      }
      else if (index) {
          var array = index.array;
          var n = array.length;
          if (geometry.drawRange.count !== Infinity) {
              n = geometry.drawRange.count;
          }
          var wireframeIndex;
          if (this.wireframeIndex && this.wireframeIndex.length > n * 2) {
              wireframeIndex = this.wireframeIndex;
          }
          else {
              var count = geometry.attributes.position.count; // TODO
              wireframeIndex = getUintArray(n * 2, count);
          }
          var j = 0;
          edges.length = 0;
          for (var i = 0; i < n; i += 3) {
              var a = array[i + 0];
              var b = array[i + 1];
              var c = array[i + 2];
              if (checkEdge(a, b)) {
                  wireframeIndex[j + 0] = a;
                  wireframeIndex[j + 1] = b;
                  j += 2;
              }
              if (checkEdge(b, c)) {
                  wireframeIndex[j + 0] = b;
                  wireframeIndex[j + 1] = c;
                  j += 2;
              }
              if (checkEdge(c, a)) {
                  wireframeIndex[j + 0] = c;
                  wireframeIndex[j + 1] = a;
                  j += 2;
              }
          }
          this.wireframeIndex = wireframeIndex;
          this.wireframeIndexCount = j;
          this.wireframeIndexVersion = this.indexVersion;
      }
      else {
          var n$1 = geometry.attributes.position.count; // TODO
          var wireframeIndex$1;
          if (this.wireframeIndex && this.wireframeIndex.length > n$1 * 2) {
              wireframeIndex$1 = this.wireframeIndex;
          }
          else {
              wireframeIndex$1 = getUintArray(n$1 * 2, n$1);
          }
          for (var i$1 = 0, j$1 = 0; i$1 < n$1; i$1 += 3) {
              wireframeIndex$1[j$1 + 0] = i$1;
              wireframeIndex$1[j$1 + 1] = i$1 + 1;
              wireframeIndex$1[j$1 + 2] = i$1 + 1;
              wireframeIndex$1[j$1 + 3] = i$1 + 2;
              wireframeIndex$1[j$1 + 4] = i$1 + 2;
              wireframeIndex$1[j$1 + 5] = i$1;
              j$1 += 6;
          }
          this.wireframeIndex = wireframeIndex$1;
          this.wireframeIndexCount = n$1 * 2;
          this.wireframeIndexVersion = this.indexVersion;
      }
  };
  Buffer.prototype.updateWireframeIndex = function updateWireframeIndex () {
      if (!this.wireframeGeometry || !this.wireframeIndex)
          { return; }
      this.wireframeGeometry.setDrawRange(0, Infinity);
      if (this.wireframeIndexVersion < this.indexVersion)
          { this.makeWireframeIndex(); }
      if (this.wireframeGeometry.index &&
          this.wireframeIndex.length > this.wireframeGeometry.index.array.length) {
          this.wireframeGeometry.setIndex(new BufferAttribute(this.wireframeIndex, 1).setUsage(this.dynamic ? WebGLRenderingContext.DYNAMIC_DRAW : 0));
      }
      else {
          var index = this.wireframeGeometry.getIndex();
          if (!index) {
              Log.error('Index is null');
              return;
          }
          index.set(this.wireframeIndex);
          index.needsUpdate = this.wireframeIndexCount > 0;
          index.updateRange.count = this.wireframeIndexCount;
      }
      this.wireframeGeometry.setDrawRange(0, this.wireframeIndexCount);
  };
  Buffer.prototype.getRenderOrder = function getRenderOrder () {
      var renderOrder = 0;
      if (this.isText) {
          renderOrder = 1;
      }
      else if (this.transparent) {
          if (this.isSurface) {
              renderOrder = 3;
          }
          else {
              renderOrder = 2;
          }
      }
      return renderOrder;
  };
  Buffer.prototype._getMesh = function _getMesh (materialName) {
      if (!this.material)
          { this.makeMaterial(); }
      var g = this.geometry;
      var m = this[materialName];
      var mesh;
      if (this.isLine) {
          mesh = new LineSegments(g, m);
      }
      else if (this.isPoint) {
          mesh = new Points(g, m);
      }
      else {
          mesh = new Mesh(g, m);
      }
      mesh.frustumCulled = false;
      mesh.renderOrder = this.getRenderOrder();
      return mesh;
  };
  Buffer.prototype.getMesh = function getMesh () {
      return this._getMesh('material');
  };
  Buffer.prototype.getWireframeMesh = function getWireframeMesh () {
      var mesh;
      if (!this.material)
          { this.makeMaterial(); }
      if (!this.wireframeGeometry)
          { this.makeWireframeGeometry(); }
      mesh = new LineSegments(this.wireframeGeometry, this.wireframeMaterial);
      mesh.frustumCulled = false;
      mesh.renderOrder = this.getRenderOrder();
      return mesh;
  };
  Buffer.prototype.getPickingMesh = function getPickingMesh () {
      return this._getMesh('pickingMaterial');
  };
  Buffer.prototype.getShader = function getShader$1 (name, type) {
      return getShader(name, this.getDefines(type));
  };
  Buffer.prototype.getVertexShader = function getVertexShader (type) {
      return this.getShader(this.vertexShader, type);
  };
  Buffer.prototype.getFragmentShader = function getFragmentShader (type) {
      return this.getShader(this.fragmentShader, type);
  };
  Buffer.prototype.getDefines = function getDefines (type) {
      var defines = {};
      if (this.parameters.clipNear) {
          defines.NEAR_CLIP = 1;
      }
      if (this.parameters.clipRadius) {
          defines.RADIUS_CLIP = 1;
      }
      if (type === 'picking') {
          defines.PICKING = 1;
      }
      else {
          if (type === 'background' || this.parameters.background) {
              defines.NOLIGHT = 1;
          }
          if (this.parameters.flatShaded) {
              defines.FLAT_SHADED = 1;
          }
          if (this.parameters.opaqueBack) {
              defines.OPAQUE_BACK = 1;
          }
          if (this.parameters.diffuseInterior) {
              defines.DIFFUSE_INTERIOR = 1;
          }
          if (this.parameters.useInteriorColor) {
              defines.USE_INTERIOR_COLOR = 1;
          }
      }
      return defines;
  };
  Buffer.prototype.getParameters = function getParameters () {
      return this.parameters;
  };
  Buffer.prototype.addUniforms = function addUniforms (uniforms) {
      this.uniforms = UniformsUtils.merge([this.uniforms, uniforms]);
      this.pickingUniforms = UniformsUtils.merge([this.pickingUniforms, uniforms]);
  };
  Buffer.prototype.addAttributes = function addAttributes (attributes) {
      for (var name in attributes) {
          var buf = (void 0);
          var a = attributes[name];
          var arraySize = this.attributeSize * itemSize[a.type];
          if (a.value) {
              if (arraySize !== a.value.length) {
                  Log.error('attribute value has wrong length', name);
              }
              buf = a.value;
          }
          else {
              buf = getTypedArray('float32', arraySize);
          }
          this.geometry.setAttribute(name, new BufferAttribute(buf, itemSize[a.type]).setUsage(this.dynamic ? WebGLRenderingContext.DYNAMIC_DRAW : 0));
      }
  };
  Buffer.prototype.updateRenderOrder = function updateRenderOrder () {
      var renderOrder = this.getRenderOrder();
      function setRenderOrder(mesh) {
          mesh.renderOrder = renderOrder;
      }
      this.group.children.forEach(setRenderOrder);
      if (this.pickingGroup) {
          this.pickingGroup.children.forEach(setRenderOrder);
      }
  };
  Buffer.prototype.updateShader = function updateShader () {
      var m = this.material;
      var wm = this.wireframeMaterial;
      var pm = this.pickingMaterial;
      m.vertexShader = this.getVertexShader();
      m.fragmentShader = this.getFragmentShader();
      m.needsUpdate = true;
      wm.vertexShader = this.getShader('Line.vert');
      wm.fragmentShader = this.getShader('Line.frag');
      wm.needsUpdate = true;
      pm.vertexShader = this.getVertexShader('picking');
      pm.fragmentShader = this.getFragmentShader('picking');
      pm.needsUpdate = true;
  };
  /**
   * Set buffer parameters
   * @param {BufferParameters} params - buffer parameters object
   * @return {undefined}
   */
  Buffer.prototype.setParameters = function setParameters (params) {
      var p = params;
      var pt = this.parameterTypes;
      var pv = this.parameters;
      var propertyData = {};
      var uniformData = {};
      var doShaderUpdate = false;
      var doVisibilityUpdate = false;
      for (var name in p) {
          var value = p[name];
          if (value === undefined)
              { continue; }
          pv[name] = value;
          if (pt[name] === undefined)
              { continue; }
          if (pt[name].property) {
              if (pt[name].property !== true) {
                  propertyData[pt[name].property] = value;
              }
              else {
                  propertyData[name] = value;
              }
          }
          if (pt[name].uniform) {
              if (pt[name].uniform !== true) {
                  uniformData[pt[name].uniform] = value;
              }
              else {
                  uniformData[name] = value;
              }
          }
          if (pt[name].updateShader) {
              doShaderUpdate = true;
          }
          if (pt[name].updateVisibility) {
              doVisibilityUpdate = true;
          }
          if (this.dynamic && name === 'wireframe' && value === true) {
              this.updateWireframeIndex();
          }
          if (name === 'forceTransparent') {
              propertyData.transparent = this.transparent;
          }
          if (name === 'matrix') {
              this.matrix = value;
          }
      }
      this.setProperties(propertyData);
      this.setUniforms(uniformData);
      if (doShaderUpdate)
          { this.updateShader(); }
      if (doVisibilityUpdate)
          { this.setVisibility(this.visible); }
  };
  /**
   * Sets buffer attributes
   * @param {Object} data - An object where the keys are the attribute names
   *  and the values are the attribute data.
   * @example
   * var buffer = new Buffer();
   * buffer.setAttributes({ attrName: attrData });
   */
  Buffer.prototype.setAttributes = function setAttributes (data) {
      var geometry = this.geometry;
      var attributes = geometry.attributes; // TODO
      for (var name in data) {
          if (name === 'picking')
              { continue; }
          var array = data[name];
          var length = array.length;
          if (name === 'index') {
              var index = geometry.getIndex();
              if (!index) {
                  Log.error('Index is null');
                  continue;
              }
              geometry.setDrawRange(0, Infinity);
              if (length > index.array.length) {
                  geometry.setIndex(new BufferAttribute(array, 1)
                      .setUsage(this.dynamic ? WebGLRenderingContext.DYNAMIC_DRAW : 0));
              }
              else {
                  index.set(array);
                  index.count = length;
                  index.needsUpdate = length > 0;
                  index.updateRange.count = length;
                  geometry.setDrawRange(0, length);
              }
              this.indexVersion++;
              if (this.parameters.wireframe)
                  { this.updateWireframeIndex(); }
          }
          else {
              var attribute = attributes[name];
              if (length > attribute.array.length) {
                  geometry.setAttribute(name, new BufferAttribute(array, attribute.itemSize)
                      .setUsage(this.dynamic ? WebGLRenderingContext.DYNAMIC_DRAW : 0));
              }
              else {
                  attributes[name].set(array);
                  attributes[name].needsUpdate = length > 0;
                  attributes[name].updateRange.count = length;
              }
          }
      }
  };
  Buffer.prototype.setUniforms = function setUniforms (data) {
      if (!data)
          { return; }
      var u = this.material.uniforms;
      var wu = this.wireframeMaterial.uniforms;
      var pu = this.pickingMaterial.uniforms;
      for (var name in data) {
          if (name === 'opacity') {
              this.setProperties({ transparent: this.transparent });
          }
          if (u[name] !== undefined) {
              if (u[name].value.isVector3) {
                  u[name].value.copy(data[name]);
              }
              else if (u[name].value.set) {
                  u[name].value.set(data[name]);
              }
              else {
                  u[name].value = data[name];
              }
          }
          if (wu[name] !== undefined) {
              if (wu[name].value.isVector3) {
                  wu[name].value.copy(data[name]);
              }
              else if (wu[name].value.set) {
                  wu[name].value.set(data[name]);
              }
              else {
                  wu[name].value = data[name];
              }
          }
          if (pu[name] !== undefined) {
              if (pu[name].value.isVector3) {
                  pu[name].value.copy(data[name]);
              }
              else if (pu[name].value.set) {
                  pu[name].value.set(data[name]);
              }
              else {
                  pu[name].value = data[name];
              }
          }
      }
  };
  Buffer.prototype.setProperties = function setProperties (data) {
      if (!data)
          { return; }
      var m = this.material;
      var wm = this.wireframeMaterial;
      var pm = this.pickingMaterial;
      for (var _name in data) {
          var name = _name; // TODO
          var value = data[name];
          if (name === 'transparent') {
              this.updateRenderOrder();
          }
          else if (name === 'side') {
              value = getThreeSide(value);
          }
          m[name] = value;
          wm[name] = value;
          pm[name] = value;
      }
      m.needsUpdate = true;
      wm.needsUpdate = true;
      pm.needsUpdate = true;
  };
  /**
   * Set buffer visibility
   * @param {Boolean} value - visibility value
   * @return {undefined}
   */
  Buffer.prototype.setVisibility = function setVisibility (value) {
      this.visible = value;
      if (this.parameters.wireframe) {
          this.group.visible = false;
          this.wireframeGroup.visible = value;
          if (this.pickable) {
              this.pickingGroup.visible = false;
          }
      }
      else {
          this.group.visible = value;
          this.wireframeGroup.visible = false;
          if (this.pickable) {
              this.pickingGroup.visible = value;
          }
      }
  };
  /**
   * Free buffer resources
   * @return {undefined}
   */
  Buffer.prototype.dispose = function dispose () {
      if (this.material)
          { this.material.dispose(); }
      if (this.wireframeMaterial)
          { this.wireframeMaterial.dispose(); }
      if (this.pickingMaterial)
          { this.pickingMaterial.dispose(); }
      this.geometry.dispose();
      if (this.wireframeGeometry)
          { this.wireframeGeometry.dispose(); }
  };
  /**
   * Customize JSON serialization to avoid circular references
   */
  Buffer.prototype.toJSON = function toJSON () {
      var result = {};
      for (var x in this) {
          if (x !== "group" && x !== "wireframeGroup" && x != "pickingGroup"
              && x !== "picking") {
              result[x] = this[x];
          }
      }
      return result;
  };

  Object.defineProperties( Buffer.prototype, prototypeAccessors$n );

  /**
   * @file Mesh Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Mesh buffer. Draws a triangle mesh.
   *
   * @example
   * var meshBuffer = new MeshBuffer({
   *   position: new Float32Array(
   *     [ 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1 ]
   *   ),
   *   color: new Float32Array(
   *     [ 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0 ]
   *   )
   * });
   */
  var MeshBuffer = /*@__PURE__*/(function (Buffer) {
      function MeshBuffer(data, params) {
          if ( params === void 0 ) params = {};

          Buffer.call(this, data, params);
          this.vertexShader = 'Mesh.vert';
          this.fragmentShader = 'Mesh.frag';
          this.addAttributes({
              'normal': { type: 'v3', value: data.normal }
          });
          if (data.normal === undefined) {
              this.geometry.computeVertexNormals();
          }
      }

      if ( Buffer ) MeshBuffer.__proto__ = Buffer;
      MeshBuffer.prototype = Object.create( Buffer && Buffer.prototype );
      MeshBuffer.prototype.constructor = MeshBuffer;

      return MeshBuffer;
  }(Buffer));

  /**
   * @file Surface Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Surface buffer. Like a {@link MeshBuffer}, but with `.isSurface` set to `true`.
   */
  var SurfaceBuffer = /*@__PURE__*/(function (MeshBuffer) {
      function SurfaceBuffer() {
          MeshBuffer.apply(this, arguments);
          this.isSurface = true;
      }

      if ( MeshBuffer ) SurfaceBuffer.__proto__ = MeshBuffer;
      SurfaceBuffer.prototype = Object.create( MeshBuffer && MeshBuffer.prototype );
      SurfaceBuffer.prototype.constructor = SurfaceBuffer;

      return SurfaceBuffer;
  }(MeshBuffer));

  /**
   * @file Double Sided Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function setVisibilityTrue(m) { m.visible = true; }
  function setVisibilityFalse(m) { m.visible = false; }
  /**
   * A double-sided mesh buffer. Takes a buffer and renders the front and
   * the back as seperate objects to avoid some artifacts when rendering
   * transparent meshes. Also allows to render the back of a mesh opaque
   * while the front is transparent.
   * @implements {Buffer}
   *
   * @example
   * var sphereGeometryBuffer = new SphereGeometryBuffer({
   *   position: new Float32Array([ 0, 0, 0 ]),
   *   color: new Float32Array([ 1, 0, 0 ]),
   *   radius: new Float32Array([ 1 ])
   * });
   * var doubleSidedBuffer = new DoubleSidedBuffer(sphereGeometryBuffer);
   */
  var DoubleSidedBuffer = function DoubleSidedBuffer(buffer) {
      this.group = new Group();
      this.wireframeGroup = new Group();
      this.pickingGroup = new Group();
      this.frontMeshes = [];
      this.backMeshes = [];
      this.size = buffer.size;
      this.side = buffer.parameters.side;
      this.visible = buffer.visible;
      this.geometry = buffer.geometry;
      this.picking = buffer.picking;
      this.group = new Group();
      this.wireframeGroup = new Group();
      this.pickingGroup = new Group();
      // requires Group objects to be present
      this.matrix = buffer.matrix;
      var frontBuffer = buffer;
      var backBuffer = new buffer.constructor({
          position: new Float32Array(0)
      });
      frontBuffer.makeMaterial();
      backBuffer.makeMaterial();
      backBuffer.picking = buffer.picking;
      backBuffer.geometry = buffer.geometry;
      backBuffer.wireframeGeometry = buffer.wireframeGeometry;
      backBuffer.setParameters(buffer.getParameters());
      backBuffer.updateShader();
      frontBuffer.setParameters({
          side: 'front'
      });
      backBuffer.setParameters({
          side: 'back',
          opacity: backBuffer.parameters.opacity
      });
      this.buffer = buffer;
      this.frontBuffer = frontBuffer;
      this.backBuffer = backBuffer;
  };

  var prototypeAccessors$m = { matrix: { configurable: true },pickable: { configurable: true },parameters: { configurable: true } };
  prototypeAccessors$m.matrix.set = function (m) {
      Buffer.prototype.setMatrix.call(this, m);
  };
  prototypeAccessors$m.matrix.get = function () {
      return this.group.matrix.clone();
  };
  prototypeAccessors$m.pickable.get = function () {
      return !!this.picking && !this.parameters.disablePicking;
  };
  prototypeAccessors$m.parameters.get = function () {
      return this.buffer.parameters;
  };
  DoubleSidedBuffer.prototype.getParameters = function getParameters () {
      var p = Object.assign({}, this.buffer.parameters);
      p.side = this.side;
      return p;
  };
  DoubleSidedBuffer.prototype.getMesh = function getMesh (picking) {
      var front, back;
      if (picking) {
          back = this.backBuffer.getPickingMesh();
          front = this.frontBuffer.getPickingMesh();
      }
      else {
          back = this.backBuffer.getMesh();
          front = this.frontBuffer.getMesh();
      }
      this.frontMeshes.push(front);
      this.backMeshes.push(back);
      this.setParameters({ side: this.side });
      return new Group().add(back, front);
  };
  DoubleSidedBuffer.prototype.getWireframeMesh = function getWireframeMesh () {
      return this.buffer.getWireframeMesh();
  };
  DoubleSidedBuffer.prototype.getPickingMesh = function getPickingMesh () {
      return this.getMesh(true);
  };
  DoubleSidedBuffer.prototype.setAttributes = function setAttributes (data) {
      this.buffer.setAttributes(data);
  };
  DoubleSidedBuffer.prototype.setParameters = function setParameters (data) {
      data = Object.assign({}, data);
      if (data.side === 'front') {
          this.frontMeshes.forEach(setVisibilityTrue);
          this.backMeshes.forEach(setVisibilityFalse);
      }
      else if (data.side === 'back') {
          this.frontMeshes.forEach(setVisibilityFalse);
          this.backMeshes.forEach(setVisibilityTrue);
      }
      else if (data.side === 'double') {
          this.frontMeshes.forEach(setVisibilityTrue);
          this.backMeshes.forEach(setVisibilityTrue);
      }
      if (data.side !== undefined) {
          this.side = data.side;
      }
      delete data.side;
      if (data.matrix !== undefined) {
          this.matrix = data.matrix;
      }
      delete data.matrix;
      this.frontBuffer.setParameters(data);
      if (data.wireframe !== undefined) {
          this.wireframe = data.wireframe;
          this.setVisibility(this.visible);
      }
      delete data.wireframe;
      this.backBuffer.setParameters(data);
  };
  DoubleSidedBuffer.prototype.setVisibility = function setVisibility (value) {
      this.visible = value;
      if (this.parameters.wireframe) {
          this.group.visible = false;
          this.wireframeGroup.visible = value;
          if (this.pickable) {
              this.pickingGroup.visible = false;
          }
      }
      else {
          this.group.visible = value;
          this.wireframeGroup.visible = false;
          if (this.pickable) {
              this.pickingGroup.visible = value;
          }
      }
  };
  DoubleSidedBuffer.prototype.dispose = function dispose () {
      this.frontBuffer.dispose();
      this.backBuffer.dispose();
  };
  /**
   * Customize JSON serialization to avoid circular references.
   * Only export simple params which could be useful.
   */
  DoubleSidedBuffer.prototype.toJSON = function toJSON () {
      var result = {};
      for (var x in this) {
          if (['side', 'size', 'visible', 'matrix', 'parameters'].includes(x)) {
              result[x] = this[x];
          }
      }
      return result;
  };

  Object.defineProperties( DoubleSidedBuffer.prototype, prototypeAccessors$m );

  ShaderRegistry.add('shader/Line.vert', "uniform float clipNear;\nuniform vec3 clipCenter;\nvarying vec3 vViewPosition;\n#if defined( RADIUS_CLIP )\nvarying vec3 vClipCenter;\n#endif\n#include color_pars_vertex\nvoid main(){\n#include color_vertex\n#include begin_vertex\n#include project_vertex\nvViewPosition = -mvPosition.xyz;\n#if defined( RADIUS_CLIP )\nvClipCenter = -( modelViewMatrix * vec4( clipCenter, 1.0 ) ).xyz;\n#endif\n#include nearclip_vertex\n}");

  ShaderRegistry.add('shader/Line.frag', "uniform float opacity;\nuniform float clipNear;\nuniform float clipRadius;\nvarying vec3 vViewPosition;\n#if defined( RADIUS_CLIP )\nvarying vec3 vClipCenter;\n#endif\n#include common\n#include color_pars_fragment\n#include fog_pars_fragment\nvoid main(){\n#include nearclip_fragment\n#include radiusclip_fragment\ngl_FragColor = vec4( vColor, opacity );\n#include premultiplied_alpha_fragment\n#include tonemapping_fragment\n#include encodings_fragment\n#include fog_fragment\n}");

  /**
   * @file Contour Buffer
   * @author Fred ludlow <fred.ludlow@gmail.com>
   * @private
   */
  /**
   * Contour buffer. A buffer that draws lines (instead of triangle meshes).
   */
  var ContourBuffer = /*@__PURE__*/(function (Buffer) {
      function ContourBuffer() {
          Buffer.apply(this, arguments);
          this.isLine = true;
          this.vertexShader = 'Line.vert';
          this.fragmentShader = 'Line.frag';
      }

      if ( Buffer ) ContourBuffer.__proto__ = Buffer;
      ContourBuffer.prototype = Object.create( Buffer && Buffer.prototype );
      ContourBuffer.prototype.constructor = ContourBuffer;

      return ContourBuffer;
  }(Buffer));

  /**
   * @file Surface Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Surface representation
   */
  /**
     * Create Surface representation object
     * @param {Surface|Volume} surface - the surface or volume to be represented
     * @param {Viewer} viewer - a viewer object
     * @param {SurfaceRepresentationParameters} params - surface representation parameters
     */
  var SurfaceRepresentation = /*@__PURE__*/(function (Representation) {
     function SurfaceRepresentation(surface, viewer, params) {
          Representation.call(this, surface, viewer, params);
          this.type = 'surface';
          this.parameters = Object.assign({
              isolevelType: {
                  type: 'select',
                  options: {
                      'value': 'value', 'sigma': 'sigma'
                  }
              },
              isolevel: {
                  type: 'number', precision: 2, max: 1000, min: -1000
              },
              negateIsolevel: {
                  type: 'boolean'
              },
              isolevelScroll: {
                  type: 'boolean'
              },
              smooth: {
                  type: 'integer', precision: 1, max: 10, min: 0
              },
              background: {
                  type: 'boolean', rebuild: true // FIXME
              },
              opaqueBack: {
                  type: 'boolean', buffer: true
              },
              boxSize: {
                  type: 'integer', precision: 1, max: 100, min: 0
              },
              colorVolume: {
                  type: 'hidden'
              },
              contour: {
                  type: 'boolean', rebuild: true
              },
              useWorker: {
                  type: 'boolean', rebuild: true
              },
              wrap: {
                  type: 'boolean', rebuild: true
              }
          }, this.parameters);
          if (surface instanceof Volume) {
              this.surface = undefined;
              this.volume = surface;
          }
          else {
              this.surface = surface;
              this.volume = undefined;
          }
          this.boxCenter = new Vector3();
          this.__boxCenter = new Vector3();
          this.box = new Box3();
          this.__box = new Box3();
          this._position = new Vector3();
          this.inverseMatrix = new Matrix4();
          this.setBox = function setBox() {
              this._position.copy(viewer.translationGroup.position).negate();
              this._position.applyMatrix4(this.inverseMatrix);
              if (!this._position.equals(this.boxCenter)) {
                  this.setParameters({ 'boxCenter': this._position });
              }
          };
          this.toBePrepared = true;
          this.viewer.signals.ticked.add(this.setBox, this);
          this.init(params);
      }

     if ( Representation ) SurfaceRepresentation.__proto__ = Representation;
     SurfaceRepresentation.prototype = Object.create( Representation && Representation.prototype );
     SurfaceRepresentation.prototype.constructor = SurfaceRepresentation;
      SurfaceRepresentation.prototype.init = function init (params) {
          var p = params || {};
          p.colorScheme = defaults(p.colorScheme, 'uniform');
          p.colorValue = defaults(p.colorValue, 0xDDDDDD);
          this.isolevelType = defaults(p.isolevelType, 'sigma');
          this.isolevel = defaults(p.isolevel, 2.0);
          this.negateIsolevel = defaults(p.negateIsolevel, false);
          this.isolevelScroll = defaults(p.isolevelScroll, false);
          this.smooth = defaults(p.smooth, 0);
          this.background = defaults(p.background, false);
          this.opaqueBack = defaults(p.opaqueBack, true);
          this.boxSize = defaults(p.boxSize, 0);
          this.colorVolume = defaults(p.colorVolume, undefined);
          this.contour = defaults(p.contour, false);
          this.useWorker = defaults(p.useWorker, true);
          this.wrap = defaults(p.wrap, false);
          Representation.prototype.init.call(this, p);
          this.inverseMatrix.getInverse(this.matrix);
          this.build();
      };
      SurfaceRepresentation.prototype.attach = function attach (callback) {
          var this$1$1 = this;

          this.bufferList.forEach(function (buffer) {
              this$1$1.viewer.add(buffer);
          });
          this.setVisibility(this.visible);
          callback();
      };
      SurfaceRepresentation.prototype.prepare = function prepare (callback) {
          var this$1$1 = this;

          if (this.volume) {
              var isolevel;
              if (this.isolevelType === 'sigma') {
                  isolevel = this.volume.getValueForSigma(this.isolevel);
              }
              else {
                  isolevel = this.isolevel;
              }
              if (this.negateIsolevel)
                  { isolevel *= -1; }
              if (!this.surface ||
                  this.__isolevel !== isolevel ||
                  this.__smooth !== this.smooth ||
                  this.__contour !== this.contour ||
                  this.__wrap !== this.wrap ||
                  this.__boxSize !== this.boxSize ||
                  (this.boxSize > 0 &&
                      !this.__boxCenter.equals(this.boxCenter))) {
                  this.__isolevel = isolevel;
                  this.__smooth = this.smooth;
                  this.__contour = this.contour;
                  this.__wrap = this.wrap;
                  this.__boxSize = this.boxSize;
                  this.__boxCenter.copy(this.boxCenter);
                  this.__box.copy(this.box);
                  var onSurfaceFinish = function (surface) {
                      this$1$1.surface = surface;
                      callback();
                  };
                  if (this.useWorker) {
                      this.volume.getSurfaceWorker(isolevel, this.smooth, this.boxCenter, this.boxSize, this.contour, this.wrap, onSurfaceFinish);
                  }
                  else {
                      onSurfaceFinish(this.volume.getSurface(isolevel, this.smooth, this.boxCenter, this.boxSize, this.contour, this.wrap));
                  }
              }
              else {
                  callback();
              }
          }
          else {
              callback();
          }
      };
      SurfaceRepresentation.prototype.create = function create () {
          var sd = {
              position: this.surface.getPosition(),
              color: this.surface.getColor(this.getColorParams()),
              index: this.surface.getIndex()
          };
          var buffer;
          if (this.contour) {
              buffer = new ContourBuffer(sd, this.getBufferParams({ wireframe: false }));
          }
          else {
              Object.assign(sd, {
                  normal: this.surface.getNormal(),
                  picking: this.surface.getPicking()
              });
              var surfaceBuffer = new SurfaceBuffer(sd, this.getBufferParams({
                  background: this.background,
                  opaqueBack: this.opaqueBack,
                  dullInterior: false
              }));
              buffer = new DoubleSidedBuffer(surfaceBuffer);
          }
          this.bufferList.push(buffer);
      };
      SurfaceRepresentation.prototype.update = function update (what) {
          if (this.bufferList.length === 0)
              { return; }
          what = what || {};
          var surfaceData = {};
          if (what.position) {
              surfaceData.position = this.surface.getPosition();
          }
          if (what.color) {
              surfaceData.color = this.surface.getColor(this.getColorParams());
          }
          if (what.index) {
              surfaceData.index = this.surface.getIndex();
          }
          if (what.normal) {
              surfaceData.normal = this.surface.getNormal();
          }
          this.bufferList.forEach(function (buffer) {
              buffer.setAttributes(surfaceData);
          });
      };
      /**
       * Set representation parameters
       * @alias SurfaceRepresentation#setParameters
       * @param {SurfaceRepresentationParameters} params - surface parameter object
       * @param {Object} [what] - buffer data attributes to be updated,
       *                        note that this needs to be implemented in the
       *                        derived classes. Generally it allows more
       *                        fine-grained control over updating than
       *                        forcing a rebuild.
       * @param {Boolean} what.position - update position data
       * @param {Boolean} what.color - update color data
       * @param {Boolean} [rebuild] - whether or not to rebuild the representation
       * @return {SurfaceRepresentation} this object
       */
      SurfaceRepresentation.prototype.setParameters = function setParameters (params, what, rebuild) {
          if (params && params.isolevelType !== undefined &&
              this.volume) {
              if (this.isolevelType === 'value' &&
                  params.isolevelType === 'sigma') {
                  this.isolevel = this.volume.getSigmaForValue(this.isolevel);
              }
              else if (this.isolevelType === 'sigma' &&
                  params.isolevelType === 'value') {
                  this.isolevel = this.volume.getValueForSigma(this.isolevel);
              }
              this.isolevelType = params.isolevelType;
          }
          if (params && params.boxCenter) {
              this.boxCenter.copy(params.boxCenter);
              delete params.boxCenter;
          }
          // Forbid wireframe && contour as in molsurface
          if (params && params.wireframe && (params.contour || (params.contour === undefined && this.contour))) {
              params.wireframe = false;
          }
          Representation.prototype.setParameters.call(this, params, what, rebuild);
          if (params.matrix) {
              this.inverseMatrix.getInverse(params.matrix);
          }
          if (this.volume) {
              this.volume.getBox(this.boxCenter, this.boxSize, this.box);
          }
          if (params && params.colorVolume !== undefined) {
              if (what)
                  { what.color = true; }
          }
          if (this.surface && (params.isolevel !== undefined ||
              params.negateIsolevel !== undefined ||
              params.smooth !== undefined ||
              params.wrap !== undefined ||
              params.boxSize !== undefined ||
              (this.boxSize > 0 &&
                  !this.__box.equals(this.box)))) {
              this.build({
                  'position': true,
                  'color': true,
                  'index': true,
                  'normal': !this.contour
              });
          }
          return this;
      };
      SurfaceRepresentation.prototype.getColorParams = function getColorParams () {
          var p = Representation.prototype.getColorParams.call(this);
          p.volume = this.colorVolume;
          return p;
      };
      SurfaceRepresentation.prototype.dispose = function dispose () {
          this.viewer.signals.ticked.remove(this.setBox, this);
          Representation.prototype.dispose.call(this);
      };

     return SurfaceRepresentation;
  }(Representation));

  /**
   * @file Mouse Actions
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Mouse actions provided as static methods
   */
  var MouseActions = function MouseActions () {};

  MouseActions.zoomScroll = function zoomScroll (stage, delta) {
      stage.trackballControls.zoom(delta);
  };
  /**
   * Move near clipping plane based on scroll-delta
   * @param {Stage} stage - the stage
   * @param {Number} delta - amount to move clipping plane
   * @return {undefined}
   */
  MouseActions.clipNearScroll = function clipNearScroll (stage, delta) {
      var sp = stage.getParameters();
      stage.setParameters({ clipNear: sp.clipNear + delta / 10 });
  };
  /**
   * Move clipping planes based on scroll-delta.
   * @param {Stage} stage - the stage
   * @param {Number} delta - direction to move planes
   * @return {undefined}
   */
  MouseActions.focusScroll = function focusScroll (stage, delta) {
      var focus = stage.getFocus();
      var sign = Math.sign(delta);
      var step = sign * almostIdentity((100 - focus) / 10, 5, 0.2);
      stage.setFocus(focus + step);
  };
  /**
   * Zoom scene based on scroll-delta and
   * move focus planes based on camera position (zoom)
   * @param {Stage} stage - the stage
   * @param {Number} delta - amount to move focus planes and zoom
   * @return {undefined}
   */
  MouseActions.zoomFocusScroll = function zoomFocusScroll (stage, delta) {
      stage.trackballControls.zoom(delta);
      var z = stage.viewer.camera.position.z;
      stage.setFocus(100 - Math.abs(z / 8));
  };
  /**
   * Change isolevel of volume surfaces based on scroll-delta
   * @param {Stage} stage - the stage
   * @param {Number} delta - amount to change isolevel
   * @return {undefined}
   */
  MouseActions.isolevelScroll = function isolevelScroll (stage, delta) {
      var d = Math.sign(delta) / 10;
      stage.eachRepresentation(function (reprElem, comp) {
          if (reprElem.repr instanceof SurfaceRepresentation) {
              var p = reprElem.getParameters(); // TODO
              if (p.isolevelScroll) {
                  reprElem.setParameters({ isolevel: p.isolevel + d });
              }
          }
      });
  };
  /**
   * Pan scene based on mouse coordinate changes
   * @param {Stage} stage - the stage
   * @param {Number} dx - amount to pan in x direction
   * @param {Number} dy - amount to pan in y direction
   * @return {undefined}
   */
  MouseActions.panDrag = function panDrag (stage, dx, dy) {
      stage.trackballControls.pan(dx, dy);
  };
  /**
   * Rotate scene based on mouse coordinate changes
   * @param {Stage} stage - the stage
   * @param {Number} dx - amount to rotate in x direction
   * @param {Number} dy - amount to rotate in y direction
   * @return {undefined}
   */
  MouseActions.rotateDrag = function rotateDrag (stage, dx, dy) {
      stage.trackballControls.rotate(dx, dy);
  };
  /**
   * Rotate scene around z axis based on mouse coordinate changes
   * @param {Stage} stage - the stage
   * @param {Number} dx - amount to rotate in x direction
   * @param {Number} dy - amount to rotate in y direction
   * @return {undefined}
   */
  MouseActions.zRotateDrag = function zRotateDrag (stage, dx, dy) {
      stage.trackballControls.zRotate(dx, dy);
  };
  /**
   * Zoom scene based on mouse coordinate changes
   * @param {Stage} stage - the stage
   * @param {Number} dx - amount to zoom
   * @param {Number} dy - amount to zoom
   * @return {undefined}
   */
  MouseActions.zoomDrag = function zoomDrag (stage, dx, dy) {
      stage.trackballControls.zoom((dx + dy) / -2);
  };
  /**
   * Zoom scene based on mouse coordinate changes and
   * move focus planes based on camera position (zoom)
   * @param {Stage} stage - the stage
   * @param {Number} dx - amount to zoom and focus
   * @param {Number} dy - amount to zoom and focus
   * @return {undefined}
   */
  MouseActions.zoomFocusDrag = function zoomFocusDrag (stage, dx, dy) {
      stage.trackballControls.zoom((dx + dy) / -2);
      var z = stage.viewer.camera.position.z;
      stage.setFocus(100 - Math.abs(z / 8));
  };
  /**
   * Pan picked component based on mouse coordinate changes
   * @param {Stage} stage - the stage
   * @param {Number} dx - amount to pan in x direction
   * @param {Number} dy - amount to pan in y direction
   * @return {undefined}
   */
  MouseActions.panComponentDrag = function panComponentDrag (stage, dx, dy) {
      stage.trackballControls.panComponent(dx, dy);
  };
  /**
   * Pan picked atom based on mouse coordinate changes
   * @param {Stage} stage - the stage
   * @param {Number} dx - amount to pan in x direction
   * @param {Number} dy - amount to pan in y direction
   * @return {undefined}
   */
  MouseActions.panAtomDrag = function panAtomDrag (stage, dx, dy) {
      stage.trackballControls.panAtom(dx, dy);
  };
  /**
   * Rotate picked component based on mouse coordinate changes
   * @param {Stage} stage - the stage
   * @param {Number} dx - amount to rotate in x direction
   * @param {Number} dy - amount to rotate in y direction
   * @return {undefined}
   */
  MouseActions.rotateComponentDrag = function rotateComponentDrag (stage, dx, dy) {
      stage.trackballControls.rotateComponent(dx, dy);
  };
  /**
   * Move picked element to the center of the screen
   * @param {Stage} stage - the stage
   * @param {PickingProxy} pickingProxy - the picking data object
   * @return {undefined}
   */
  MouseActions.movePick = function movePick (stage, pickingProxy) {
      if (pickingProxy) {
          stage.animationControls.move(pickingProxy.position.clone());
      }
  };
  /**
   * Show tooltip with information of picked element
   * @param {Stage} stage - the stage
   * @param {PickingProxy} pickingProxy - the picking data object
   * @return {undefined}
   */
  MouseActions.tooltipPick = function tooltipPick (stage, pickingProxy) {
      var tt = stage.tooltip;
      var sp = stage.getParameters();
      if (sp.tooltip && pickingProxy) {
          var mp = pickingProxy.mouse.position;
          tt.innerText = pickingProxy.getLabel();
          tt.style.bottom = (window.innerHeight - mp.y + 3) + 'px';
          tt.style.left = (mp.x + 3) + 'px';
          tt.style.display = 'block';
      }
      else {
          tt.style.display = 'none';
      }
  };
  MouseActions.measurePick = function measurePick (stage, pickingProxy) {
      if (pickingProxy && (pickingProxy.atom || pickingProxy.bond)) {
          var atom = pickingProxy.atom || pickingProxy.closestBondAtom;
          var sc = pickingProxy.component;
          sc.measurePick(atom);
      }
      else {
          stage.measureClear();
      }
  };
  var MouseActionPresets = {
      default: [
          ['scroll', MouseActions.zoomScroll],
          ['scroll-shift', MouseActions.focusScroll],
          ['scroll-ctrl', MouseActions.isolevelScroll],
          ['scroll-shift-ctrl', MouseActions.zoomFocusScroll],
          ['drag-left', MouseActions.rotateDrag],
          ['drag-right', MouseActions.panDrag],
          ['drag-ctrl-left', MouseActions.panDrag],
          ['drag-ctrl-right', MouseActions.zRotateDrag],
          ['drag-shift-left', MouseActions.zoomDrag],
          ['drag-middle', MouseActions.zoomFocusDrag],
          ['drag-ctrl-shift-right', MouseActions.panComponentDrag],
          ['drag-ctrl-shift-left', MouseActions.rotateComponentDrag],
          ['clickPick-right', MouseActions.measurePick],
          ['clickPick-ctrl-left', MouseActions.measurePick],
          ['clickPick-middle', MouseActions.movePick],
          ['clickPick-left', MouseActions.movePick],
          ['hoverPick', MouseActions.tooltipPick]
      ],
      pymol: [
          ['drag-left', MouseActions.rotateDrag],
          ['drag-middle', MouseActions.panDrag],
          ['drag-right', MouseActions.zoomDrag],
          ['drag-shift-right', MouseActions.focusScroll],
          ['clickPick-ctrl+shift-middle', MouseActions.movePick],
          ['hoverPick', MouseActions.tooltipPick]
      ],
      coot: [
          ['scroll', MouseActions.isolevelScroll],
          ['drag-left', MouseActions.rotateDrag],
          ['drag-middle', MouseActions.panDrag],
          ['drag-ctrl-left', MouseActions.panDrag],
          ['drag-right', MouseActions.zoomFocusDrag],
          ['drag-ctrl-right', MouseActions.focusScroll],
          ['clickPick-middle', MouseActions.movePick],
          ['hoverPick', MouseActions.tooltipPick]
      ],
      astexviewer: [
          ['drag-left', MouseActions.rotateDrag],
          ['drag-ctrl-left', MouseActions.panDrag],
          ['drag-shift-left', MouseActions.zoomDrag],
          ['scroll', MouseActions.focusScroll],
          ['clickPick-middle', MouseActions.movePick],
          ['hoverPick', MouseActions.tooltipPick]
      ]
  };

  /**
   * @file Mouse Controls
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Strings to describe mouse events (including optional keyboard modifiers).
   * Must contain an event type: "scroll", "drag", "click", "doubleClick",
   * "hover", "clickPick" or "hoverPick". Optionally contain one or more
   * (seperated by plus signs) keyboard modifiers: "alt", "ctrl", "meta" or
   * "shift". Can contain the mouse button performing the event: "left",
   * "middle" or "right". The type, key and button parts must be seperated by
   * dashes.
   *
   * @example
   * // triggered on scroll event (no key or button)
   * "scroll"
   *
   * @example
   * // triggered on scroll event while shift key is pressed
   * "scroll-shift"
   *
   * @example
   * // triggered on drag event with left mouse button
   * "drag-left"
   *
   * @example
   * // triggered on drag event with right mouse button
   * // while ctrl and shift keys are pressed
   * "drag-right-ctrl+shift"
   *
   * @typedef {String} TriggerString
   */
  /**
   * Get event type, key and button
   * @param  {TriggerString} str - input trigger string
   * @return {Array} event type, key and button
   */
  function triggerFromString(str) {
      var tokens = str.split(/[-+]/);
      var type = '';
      if (tokens.includes('scroll'))
          { type = 'scroll'; }
      if (tokens.includes('drag'))
          { type = 'drag'; }
      if (tokens.includes('click'))
          { type = 'click'; }
      if (tokens.includes('doubleClick'))
          { type = 'doubleClick'; }
      if (tokens.includes('hover'))
          { type = 'hover'; }
      if (tokens.includes('clickPick'))
          { type = 'clickPick'; }
      if (tokens.includes('hoverPick'))
          { type = 'hoverPick'; }
      var key = 0;
      if (tokens.includes('alt'))
          { key += 1; }
      if (tokens.includes('ctrl'))
          { key += 2; }
      if (tokens.includes('meta'))
          { key += 4; }
      if (tokens.includes('shift'))
          { key += 8; }
      var button = 0;
      if (tokens.includes('left'))
          { button += 1; }
      if (tokens.includes('right'))
          { button += 2; }
      if (tokens.includes('middle'))
          { button += 4; }
      return [type, key, button];
  }
  /**
   * Mouse controls
   */
  var MouseControls = function MouseControls(stage, params) {
      if ( params === void 0 ) params = {};

      this.stage = stage;
      this.actionList = [];
      this.mouse = stage.mouseObserver;
      this.disabled = params.disabled || false;
      this.preset(params.preset || 'default');
  };
  MouseControls.prototype.run = function run (type) {
          var this$1$1 = this;
          var args = [], len = arguments.length - 1;
          while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];

      if (this.disabled)
          { return; }
      var key = this.mouse.key || 0;
      var button = this.mouse.buttons || 0;
      this.actionList.forEach(function (a) {
          if (a.type === type && a.key === key && a.button === button) {
              a.callback.apply(a, [ this$1$1.stage ].concat( args )); // TODO
          }
      });
  };
  /**
   * Add a new mouse action triggered by an event, key and button combination.
   * The {@link MouseActions} class provides a number of static methods for
   * use as callback functions.
   *
   * @example
   * // change ambient light intensity on mouse scroll
   * // while the ctrl and shift keys are pressed
   * stage.mouseControls.add( "scroll-ctrl+shift", function( stage, delta ){
   * var ai = stage.getParameters().ambientIntensity;
   * stage.setParameters( { ambientIntensity: Math.max( 0, ai + delta / 50 ) } );
   * } );
   *
   * @example
   * // Call the MouseActions.zoomDrag method on mouse drag events
   * // with left and right mouse buttons simultaneous
   * stage.mouseControls.add( "drag-left+right", MouseActions.zoomDrag );
   *
   * @param {TriggerString} triggerStr - the trigger for the action
   * @param {function(stage: Stage, ...args: Any)} callback - the callback function for the action
   * @return {undefined}
   */
  MouseControls.prototype.add = function add (triggerStr, callback) {
      var ref = triggerFromString(triggerStr);
          var type = ref[0];
          var key = ref[1];
          var button = ref[2];
      this.actionList.push({ type: type, key: key, button: button, callback: callback });
  };
  /**
   * Remove a mouse action. The trigger string can contain an asterix (*)
   * as a wildcard for any key or mouse button. When the callback function
   * is given, only actions that call that function are removed.
   *
   * @example
   * // remove actions triggered solely by a scroll event
   * stage.mouseControls.remove( "scroll" );
   *
   * @example
   * // remove actions triggered by a scroll event, including
   * // those requiring a key pressed or mouse button used
   * stage.mouseControls.remove( "scroll-*" );
   *
   * @example
   * // remove actions triggered by a scroll event
   * // while the shift key is pressed
   * stage.mouseControls.remove( "scroll-shift" );
   *
   * @param {TriggerString} triggerStr - the trigger for the action
   * @param {Function} [callback] - the callback function for the action
   * @return {undefined}
   */
  MouseControls.prototype.remove = function remove (triggerStr, callback) {
      var wildcard = triggerStr.includes('*');
      var ref = triggerFromString(triggerStr);
          var type = ref[0];
          var key = ref[1];
          var button = ref[2];
      var actionList = this.actionList.filter(function (a) {
          return !((a.type === type || (wildcard && type === '')) &&
              (a.key === key || (wildcard && key === 0)) &&
              (a.button === button || (wildcard && button === 0)) &&
              (a.callback === callback || callback === undefined));
      });
      this.actionList = actionList;
  };
  /**
   * Set mouse action preset
   * @param  {String} name - one of "default", "pymol", "coot"
   * @return {undefined}
   */
  MouseControls.prototype.preset = function preset (name) {
          var this$1$1 = this;

      this.clear();
      var list = MouseActionPresets[name] || [];
      list.forEach(function (action) { return this$1$1.add(action[0], action[1]); });
  };
  /**
   * Remove all mouse actions
   * @return {undefined}
   */
  MouseControls.prototype.clear = function clear () {
      this.actionList.length = 0;
  };

  /**
   * @file Key Actions
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Key actions provided as static methods
   */
  var KeyActions = function KeyActions () {};

  KeyActions.autoView = function autoView (stage) {
      stage.autoView(1000);
  };
  /**
   * Toggle stage animations
   */
  KeyActions.toggleAnimations = function toggleAnimations (stage) {
      stage.animationControls.toggle();
  };
  /**
   * Toggle stage rocking
   */
  KeyActions.toggleRock = function toggleRock (stage) {
      stage.toggleRock();
  };
  /**
   * Toggle stage spinning
   */
  KeyActions.toggleSpin = function toggleSpin (stage) {
      stage.toggleSpin();
  };
  /**
   * Toggle anti-aliasing
   */
  KeyActions.toggleAntialiasing = function toggleAntialiasing (stage) {
      var p = stage.getParameters();
      stage.setParameters({ sampleLevel: p.sampleLevel === -1 ? 0 : -1 });
  };
  var KeyActionPresets = {
      default: [
          ['i', KeyActions.toggleSpin],
          ['k', KeyActions.toggleRock],
          ['p', KeyActions.toggleAnimations],
          ['a', KeyActions.toggleAntialiasing],
          ['r', KeyActions.autoView]
      ]
  };

  /**
   * @file Key Controls
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Mouse controls
   */
  var KeyControls = function KeyControls(stage, params) {
      if ( params === void 0 ) params = {};

      this.stage = stage;
      this.actionList = [];
      this.disabled = params.disabled || false;
      this.preset(params.preset || 'default');
  };
  KeyControls.prototype.run = function run (key) {
          var this$1$1 = this;

      if (this.disabled)
          { return; }
      this.actionList.forEach(function (a) {
          if (a.key === key) {
              a.callback(this$1$1.stage);
          }
      });
  };
  /**
   * Add a key action triggered by pressing the given character.
   * The {@link KeyActions} class provides a number of static methods for
   * use as callback functions.
   *
   * @example
   * // call KeyActions.toggleRock when "k" is pressed
   * stage.keyControls.remove( "k", KeyActions.toggleRock );
   *
   * @param {Char} char - the key/character
   * @param {Function} callback - the callback function for the action
   * @return {undefined}
   */
  KeyControls.prototype.add = function add (char, callback) {
      this.actionList.push({ key: char, callback: callback });
  };
  /**
   * Remove a key action. When the callback function
   * is given, only actions that call that function are removed.
   *
   * @example
   * // remove all actions triggered by pressing "k"
   * stage.keyControls.remove( "k" );
   *
   * @example
   * // remove action `toggleRock` triggered by pressing "k"
   * stage.keyControls.remove( "k", toggleRock );
   *
   * @param {Char} char - the key/character
   * @param {Function} [callback] - the callback function for the action
   * @return {undefined}
   */
  KeyControls.prototype.remove = function remove (char, callback) {
      var actionList = this.actionList.filter(function (a) {
          return !((a.key === char) &&
              (a.callback === callback || callback === undefined));
      });
      this.actionList = actionList;
  };
  /**
   * Set key action preset
   * @param  {String} name - one of "default"
   * @return {undefined}
   */
  KeyControls.prototype.preset = function preset (name) {
          var this$1$1 = this;

      this.clear();
      var list = KeyActionPresets[name] || [];
      list.forEach(function (action) { return this$1$1.add(action[0], action[1]); });
  };
  /**
   * Remove all key actions
   * @return {undefined}
   */
  KeyControls.prototype.clear = function clear () {
      this.actionList.length = 0;
  };

  /**
   * @file Picking Behavior
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var PickingBehavior = function PickingBehavior(stage) {
      this.stage = stage;
      this.stage = stage;
      this.mouse = stage.mouseObserver;
      this.controls = stage.mouseControls;
      this.mouse.signals.clicked.add(this._onClick, this);
      this.mouse.signals.hovered.add(this._onHover, this);
  };
  PickingBehavior.prototype._onClick = function _onClick (x, y) {
      var pickingProxy = this.stage.pickingControls.pick(x, y);
      this.stage.signals.clicked.dispatch(pickingProxy);
      this.controls.run('clickPick', pickingProxy);
  };
  PickingBehavior.prototype._onHover = function _onHover (x, y) {
      var pickingProxy = this.stage.pickingControls.pick(x, y);
      if (pickingProxy && this.mouse.down.equals(this.mouse.position)) {
          this.stage.transformComponent = pickingProxy.component;
          this.stage.transformAtom = pickingProxy.atom;
      }
      this.stage.signals.hovered.dispatch(pickingProxy);
      this.controls.run('hoverPick', pickingProxy);
  };
  PickingBehavior.prototype.dispose = function dispose () {
      this.mouse.signals.clicked.remove(this._onClick, this);
      this.mouse.signals.hovered.remove(this._onHover, this);
  };

  /**
   * @file Mouse Behavior
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var MouseBehavior = function MouseBehavior(stage) {
      this.stage = stage;
      this.stage = stage;
      this.mouse = stage.mouseObserver;
      this.controls = stage.mouseControls;
      this.mouse.signals.moved.add(this._onMove, this);
      this.mouse.signals.scrolled.add(this._onScroll, this);
      this.mouse.signals.dragged.add(this._onDrag, this);
      this.mouse.signals.clicked.add(this._onClick, this);
      this.mouse.signals.hovered.add(this._onHover, this);
      this.mouse.signals.doubleClicked.add(this._onDblclick, this);
  };
  MouseBehavior.prototype._onMove = function _onMove ( /* x, y */) {
      this.stage.tooltip.style.display = 'none';
  };
  MouseBehavior.prototype._onScroll = function _onScroll (delta) {
      this.controls.run('scroll', delta);
  };
  MouseBehavior.prototype._onDrag = function _onDrag (dx, dy) {
      this.controls.run('drag', dx, dy);
  };
  MouseBehavior.prototype._onClick = function _onClick (x, y) {
      this.controls.run('click', x, y);
  };
  MouseBehavior.prototype._onDblclick = function _onDblclick (x, y) {
      this.controls.run('doubleClick', x, y);
  };
  MouseBehavior.prototype._onHover = function _onHover (x, y) {
      this.controls.run('hover', x, y);
  };
  MouseBehavior.prototype.dispose = function dispose () {
      this.mouse.signals.moved.remove(this._onMove, this);
      this.mouse.signals.scrolled.remove(this._onScroll, this);
      this.mouse.signals.dragged.remove(this._onDrag, this);
      this.mouse.signals.clicked.remove(this._onClick, this);
      this.mouse.signals.hovered.remove(this._onHover, this);
  };

  /**
   * @file Animation Behavior
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var AnimationBehavior = function AnimationBehavior(stage) {
      this.stage = stage;
      this.viewer = stage.viewer;
      this.animationControls = stage.animationControls;
      this.viewer.signals.ticked.add(this._onTick, this);
  };
  AnimationBehavior.prototype._onTick = function _onTick (stats) {
      this.animationControls.run(stats);
  };
  AnimationBehavior.prototype.dispose = function dispose () {
      this.viewer.signals.ticked.remove(this._onTick, this);
  };

  /**
   * @file Key Behavior
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var passive = SupportsPassiveEventHandler ? { passive: true } : false;
  var KeyBehavior = function KeyBehavior(stage) {
      this.stage = stage;
      this.stage = stage;
      this.controls = stage.keyControls;
      this.domElement = stage.viewer.renderer.domElement;
      // ensure the domElement is focusable
      this.domElement.setAttribute('tabIndex', '-1');
      this.domElement.style.outline = 'none';
      this._focusDomElement = this._focusDomElement.bind(this);
      this._onKeydown = this._onKeydown.bind(this);
      this._onKeyup = this._onKeyup.bind(this);
      this._onKeypress = this._onKeypress.bind(this);
      this.domElement.addEventListener('mousedown', this._focusDomElement);
      this.domElement.addEventListener('touchstart', this._focusDomElement, passive); // TODO
      this.domElement.addEventListener('keydown', this._onKeydown);
      this.domElement.addEventListener('keyup', this._onKeyup);
      this.domElement.addEventListener('keypress', this._onKeypress);
  };
  /**
   * handle key down
   * @param  {Event} event - key event
   * @return {undefined}
   */
  KeyBehavior.prototype._onKeydown = function _onKeydown ( /* event */) {
      // console.log( "down", event.keyCode, String.fromCharCode( event.keyCode ) );
  };
  /**
   * handle key up
   * @param  {Event} event - key event
   * @return {undefined}
   */
  KeyBehavior.prototype._onKeyup = function _onKeyup ( /* event */) {
      // console.log( "up", event.keyCode, String.fromCharCode( event.keyCode ) );
  };
  /**
   * handle key press
   * @param  {Event} event - key event
   * @return {undefined}
   */
  KeyBehavior.prototype._onKeypress = function _onKeypress (event) {
      // console.log( "press", event.keyCode, String.fromCharCode( event.keyCode ) );
      var pressedKey;
      if ("key" in KeyboardEvent.prototype) {
          pressedKey = event.key;
          // some mobile browsers don't support this attribute
      }
      else {
          pressedKey = String.fromCharCode(event.which || event.keyCode);
      }
      this.controls.run(pressedKey);
  };
  KeyBehavior.prototype._focusDomElement = function _focusDomElement () {
      this.domElement.focus();
  };
  KeyBehavior.prototype.dispose = function dispose () {
      this.domElement.removeEventListener('mousedown', this._focusDomElement);
      this.domElement.removeEventListener('touchstart', this._focusDomElement, passive); // TODO
      this.domElement.removeEventListener('keydown', this._onKeypress);
      this.domElement.removeEventListener('keyup', this._onKeypress);
      this.domElement.removeEventListener('keypress', this._onKeypress);
  };

  /**
   * @file Annotation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Annotation HTML element floating on top of a position rendered in 3d
   */
  var Annotation = function Annotation(component, position, content, params) {
      if ( params === void 0 ) params = {};

      this.component = component;
      this.position = position;
      this.offsetX = defaults(params.offsetX, 0);
      this.offsetY = defaults(params.offsetY, 0);
      this.visible = defaults(params.visible, true);
      this.stage = component.stage;
      this.viewer = component.stage.viewer;
      this._viewerPosition = new Vector3();
      this._updateViewerPosition();
      this._canvasPosition = new Vector2();
      this._cameraPosition = new Vector3();
      this.element = document.createElement('div');
      Object.assign(this.element.style, {
          display: 'block',
          position: 'absolute',
          pointerEvents: 'none',
          whiteSpace: 'nowrap',
          left: '-10000px'
      });
      this.viewer.wrapper.appendChild(this.element);
      this.setContent(content);
      this.updateVisibility();
      this.viewer.signals.rendered.add(this._update, this);
      this.component.signals.matrixChanged.add(this._updateViewerPosition, this);
  };
  /**
   * Set HTML content of the annotation
   * @param {String|Element} value - HTML content
   * @return {undefined}
   */
  Annotation.prototype.setContent = function setContent (value) {
      var displayValue = this.element.style.display;
      if (displayValue === 'none') {
          this.element.style.left = '-10000px';
          this.element.style.display = 'block';
      }
      if (value instanceof HTMLElement) {
          this.element.appendChild(value);
      }
      else {
          var content = document.createElement('div');
          content.innerText = value;
          Object.assign(content.style, {
              backgroundColor: 'rgba( 0, 0, 0, 0.6 )',
              color: 'lightgrey',
              padding: '8px',
              fontFamily: 'sans-serif',
          });
          this.element.appendChild(content);
      }
      this._clientRect = this.element.getBoundingClientRect();
      if (displayValue === 'none') {
          this.element.style.display = displayValue;
      }
  };
  /**
   * Set visibility of the annotation
   * @param {Boolean} value - visibility flag
   * @return {undefined}
   */
  Annotation.prototype.setVisibility = function setVisibility (value) {
      this.visible = value;
      this.updateVisibility();
  };
  Annotation.prototype.getVisibility = function getVisibility () {
      return this.visible && this.component.parameters.visible;
  };
  Annotation.prototype.updateVisibility = function updateVisibility () {
      this.element.style.display = this.getVisibility() ? 'block' : 'none';
  };
  Annotation.prototype._updateViewerPosition = function _updateViewerPosition () {
      this._viewerPosition
          .copy(this.position)
          .applyMatrix4(this.component.matrix);
  };
  Annotation.prototype._update = function _update () {
      if (!this.getVisibility())
          { return; }
      var s = this.element.style;
      var cp = this._canvasPosition;
      var vp = this._viewerPosition;
      var cr = this._clientRect;
      this._cameraPosition.copy(vp)
          .add(this.viewer.translationGroup.position)
          .applyMatrix4(this.viewer.rotationGroup.matrix)
          .sub(this.viewer.camera.position);
      if (this._cameraPosition.z < 0) {
          s.display = 'none';
          return;
      }
      else {
          s.display = 'block';
      }
      var depth = this._cameraPosition.length();
      var fog = this.viewer.scene.fog; // TODO
      s.opacity = (1 - smoothstep(fog.near, fog.far, depth)).toString();
      s.zIndex = (Math.round((fog.far - depth) * 100)).toString();
      this.stage.viewerControls.getPositionOnCanvas(vp, cp);
      s.bottom = (this.offsetX + cp.y + cr.height / 2) + 'px';
      s.left = (this.offsetY + cp.x - cr.width / 2) + 'px';
  };
  /**
   * Safely remove the annotation
   * @return {undefined}
   */
  Annotation.prototype.dispose = function dispose () {
      this.viewer.wrapper.removeChild(this.element);
      this.viewer.signals.ticked.remove(this._update, this);
      this.component.signals.matrixChanged.remove(this._updateViewerPosition, this);
  };

  /**
   * @file Component Controls
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var tmpRotateMatrix = new Matrix4();
  var tmpRotateVector = new Vector3();
  var tmpRotateQuaternion = new Quaternion();
  /**
   * Component controls
   */
  var ComponentControls = function ComponentControls(component) {
      this.component = component;
      this.signals = {
          changed: new signals.Signal()
      };
      this.stage = component.stage;
      this.viewer = component.stage.viewer;
  };

  var prototypeAccessors$l = { position: { configurable: true },rotation: { configurable: true } };
  /**
   * component center position
   * @type {Vector3}
   */
  prototypeAccessors$l.position.get = function () {
      return this.component.position;
  };
  /**
   * component rotation
   * @type {Quaternion}
   */
  prototypeAccessors$l.rotation.get = function () {
      return this.component.quaternion;
  };
  /**
   * Trigger render and emit changed event
   * @emits {ComponentControls.signals.changed}
   * @return {undefined}
   */
  ComponentControls.prototype.changed = function changed () {
      this.component.updateMatrix();
      this.viewer.requestRender();
      this.signals.changed.dispatch();
  };
  /**
   * spin component on axis
   * @param  {Vector3|Array} axis - rotation axis
   * @param  {Number} angle - amount to spin
   * @return {undefined}
   */
  ComponentControls.prototype.spin = function spin (axis, angle) {
      tmpRotateMatrix.getInverse(this.viewer.rotationGroup.matrix);
      tmpRotateVector
          .copy(ensureVector3(axis)).applyMatrix4(tmpRotateMatrix);
      tmpRotateMatrix.extractRotation(this.component.transform);
      tmpRotateMatrix.premultiply(this.viewer.rotationGroup.matrix);
      tmpRotateMatrix.getInverse(tmpRotateMatrix);
      tmpRotateVector.copy(ensureVector3(axis));
      tmpRotateVector.applyMatrix4(tmpRotateMatrix);
      tmpRotateMatrix.makeRotationAxis(tmpRotateVector, angle);
      tmpRotateQuaternion.setFromRotationMatrix(tmpRotateMatrix);
      this.component.quaternion.premultiply(tmpRotateQuaternion);
      this.changed();
  };

  Object.defineProperties( ComponentControls.prototype, prototypeAccessors$l );

  /**
   * @file Radius Factory
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var RadiusFactoryTypes = {
      '': '',
      'vdw': 'by vdW radius',
      'covalent': 'by covalent radius',
      'sstruc': 'by secondary structure',
      'bfactor': 'by bfactor',
      'size': 'size',
      'data': 'data',
      'explicit': 'explicit'
  };
  var RadiusFactory = function RadiusFactory(params) {
      if ( params === void 0 ) params = {};

      this.max = 10;
      this.type = defaults(params.type, 'size');
      this.scale = defaults(params.scale, 1);
      this.size = defaults(params.size, 1);
      this.data = defaults(params.data, {});
  };
  RadiusFactory.prototype.atomRadius = function atomRadius (a) {
      var r;
      switch (this.type) {
          case 'vdw':
              r = a.vdw;
              break;
          case 'covalent':
              r = a.covalent;
              break;
          case 'bfactor':
              r = a.bfactor || 1.0;
              break;
          case 'sstruc':
              var sstruc = a.sstruc;
              if (sstruc === 'h') {
                  r = 0.25;
              }
              else if (sstruc === 'g') {
                  r = 0.25;
              }
              else if (sstruc === 'i') {
                  r = 0.25;
              }
              else if (sstruc === 'e') {
                  r = 0.25;
              }
              else if (sstruc === 'b') {
                  r = 0.25;
              }
              else if (NucleicBackboneAtoms.includes(a.atomname)) {
                  r = 0.4;
              }
              else {
                  r = 0.1;
              }
              break;
          case 'data':
              r = defaults(this.data[a.index], 1.0);
              break;
          case 'explicit':
              // defaults is inappropriate as AtomProxy.radius returns
              // null for missing radii
              r = a.radius;
              if (r === null)
                  { r = this.size; }
              break;
          default:
              r = this.size;
              break;
      }
      return Math.min(r * this.scale, this.max);
  };
  RadiusFactory.types = RadiusFactoryTypes;

  /**
   * @file Principal Axes
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var negateVector = new Vector3(-1, -1, -1);
  var tmpMatrix = new Matrix4();
  /**
   * Principal axes
   */
  var PrincipalAxes = function PrincipalAxes(points) {
      // console.time( "PrincipalAxes" );
      var n = points.rows;
      var n3 = n / 3;
      var pointsT = new Matrix(n, 3);
      var A = new Matrix(3, 3);
      var W = new Matrix(1, 3);
      var U = new Matrix(3, 3);
      var V = new Matrix(3, 3);
      // calculate
      var mean = meanRows(points);
      subRows(points, mean);
      transpose(pointsT, points);
      multiplyABt(A, pointsT, pointsT);
      svd(A, W, U, V);
      // console.log( points, pointsT, mean )
      // console.log( n, A, W, U, V );
      // center
      var vm = new Vector3(mean[0], mean[1], mean[2]);
      // normalized
      var van = new Vector3(U.data[0], U.data[3], U.data[6]);
      var vbn = new Vector3(U.data[1], U.data[4], U.data[7]);
      var vcn = new Vector3(U.data[2], U.data[5], U.data[8]);
      // scaled
      var va = van.clone().multiplyScalar(Math.sqrt(W.data[0] / n3));
      var vb = vbn.clone().multiplyScalar(Math.sqrt(W.data[1] / n3));
      var vc = vcn.clone().multiplyScalar(Math.sqrt(W.data[2] / n3));
      // points
      this.begA = vm.clone().sub(va);
      this.endA = vm.clone().add(va);
      this.begB = vm.clone().sub(vb);
      this.endB = vm.clone().add(vb);
      this.begC = vm.clone().sub(vc);
      this.endC = vm.clone().add(vc);
      //
      this.center = vm;
      this.vecA = va;
      this.vecB = vb;
      this.vecC = vc;
      this.normVecA = van;
      this.normVecB = vbn;
      this.normVecC = vcn;
      // console.timeEnd( "PrincipalAxes" );
  };
  /**
   * Get the basis matrix descriping the axes
   * @param  {Matrix4} [optionalTarget] - target object
   * @return {Matrix4} the basis
   */
  PrincipalAxes.prototype.getBasisMatrix = function getBasisMatrix (optionalTarget) {
          if ( optionalTarget === void 0 ) optionalTarget = new Matrix4();

      var basis = optionalTarget;
      basis.makeBasis(this.normVecB, this.normVecA, this.normVecC);
      if (basis.determinant() < 0) {
          basis.scale(negateVector);
      }
      return basis;
  };
  /**
   * Get a quaternion descriping the axes rotation
   * @param  {Quaternion} [optionalTarget] - target object
   * @return {Quaternion} the rotation
   */
  PrincipalAxes.prototype.getRotationQuaternion = function getRotationQuaternion (optionalTarget) {
          if ( optionalTarget === void 0 ) optionalTarget = new Quaternion();

      var q = optionalTarget;
      q.setFromRotationMatrix(this.getBasisMatrix(tmpMatrix));
      return q.inverse();
  };
  /**
   * Get the scale/length for each dimension for a box around the axes
   * to enclose the atoms of a structure
   * @param  {Structure|StructureView} structure - the structure
   * @return {{d1a: Number, d2a: Number, d3a: Number, d1b: Number, d2b: Number, d3b: Number}} scale
   */
  PrincipalAxes.prototype.getProjectedScaleForAtoms = function getProjectedScaleForAtoms (structure) {
      var d1a = -Infinity;
      var d1b = -Infinity;
      var d2a = -Infinity;
      var d2b = -Infinity;
      var d3a = -Infinity;
      var d3b = -Infinity;
      var p = new Vector3();
      var t = new Vector3();
      var center = this.center;
      var ax1 = this.normVecA;
      var ax2 = this.normVecB;
      var ax3 = this.normVecC;
      structure.eachAtom(function (ap) {
          projectPointOnVector(p.copy(ap), ax1, center); // TODO
          var dp1 = t.subVectors(p, center).normalize().dot(ax1);
          var dt1 = p.distanceTo(center);
          if (dp1 > 0) {
              if (dt1 > d1a)
                  { d1a = dt1; }
          }
          else {
              if (dt1 > d1b)
                  { d1b = dt1; }
          }
          projectPointOnVector(p.copy(ap), ax2, center);
          var dp2 = t.subVectors(p, center).normalize().dot(ax2);
          var dt2 = p.distanceTo(center);
          if (dp2 > 0) {
              if (dt2 > d2a)
                  { d2a = dt2; }
          }
          else {
              if (dt2 > d2b)
                  { d2b = dt2; }
          }
          projectPointOnVector(p.copy(ap), ax3, center);
          var dp3 = t.subVectors(p, center).normalize().dot(ax3);
          var dt3 = p.distanceTo(center);
          if (dp3 > 0) {
              if (dt3 > d3a)
                  { d3a = dt3; }
          }
          else {
              if (dt3 > d3b)
                  { d3b = dt3; }
          }
      });
      return {
          d1a: d1a,
          d2a: d2a,
          d3a: d3a,
          d1b: -d1b,
          d2b: -d2b,
          d3b: -d3b
      };
  };

  /**
   * @file Filtered Volume
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var FilteredVolume = function FilteredVolume(volume, minValue, maxValue, outside) {
      this.volume = volume;
      this.setFilter(minValue, maxValue, outside);
  };

  var prototypeAccessors$k = { header: { configurable: true },matrix: { configurable: true },normalMatrix: { configurable: true },inverseMatrix: { configurable: true },center: { configurable: true },boundingBox: { configurable: true },min: { configurable: true },max: { configurable: true },mean: { configurable: true },rms: { configurable: true } };
  prototypeAccessors$k.header.get = function () { return this.volume.header; };
  prototypeAccessors$k.matrix.get = function () { return this.volume.matrix; };
  prototypeAccessors$k.normalMatrix.get = function () { return this.volume.normalMatrix; };
  prototypeAccessors$k.inverseMatrix.get = function () { return this.volume.inverseMatrix; };
  prototypeAccessors$k.center.get = function () { return this.volume.center; };
  prototypeAccessors$k.boundingBox.get = function () { return this.volume.boundingBox; };
  prototypeAccessors$k.min.get = function () { return this.volume.min; };
  prototypeAccessors$k.max.get = function () { return this.volume.max; };
  prototypeAccessors$k.mean.get = function () { return this.volume.mean; };
  prototypeAccessors$k.rms.get = function () { return this.volume.rms; };
  FilteredVolume.prototype._getFilterHash = function _getFilterHash (minValue, maxValue, outside) {
      return JSON.stringify([minValue, maxValue, outside]);
  };
  FilteredVolume.prototype.setFilter = function setFilter (minValue, maxValue, outside) {
      if (isNaN(minValue) && this.header) {
          minValue = this.header.DMEAN + 2.0 * this.header.ARMS;
      }
      minValue = (minValue !== undefined && !isNaN(minValue)) ? minValue : -Infinity;
      maxValue = defaults(maxValue, Infinity);
      outside = defaults(outside, false);
      var data = this.volume.data;
      var position = this.volume.position;
      var atomindex = this.volume.atomindex;
      var filterHash = this._getFilterHash(minValue, maxValue, outside);
      if (filterHash === this._filterHash) {
          // already filtered
          return;
      }
      else if (minValue === -Infinity && maxValue === Infinity) {
          this.data = data;
          this.position = position;
          this.atomindex = atomindex;
      }
      else {
          var n = data.length;
          if (!this._dataBuffer) {
              // ArrayBuffer for re-use as Float32Array backend
              this._dataBuffer = new ArrayBuffer(n * 4);
              this._positionBuffer = new ArrayBuffer(n * 3 * 4);
              if (atomindex)
                  { this._atomindexBuffer = new ArrayBuffer(n * 4); }
          }
          var filteredData = new Float32Array(this._dataBuffer);
          var filteredPosition = new Float32Array(this._positionBuffer);
          var filteredAtomindex;
          if (atomindex)
              { filteredAtomindex = new Uint32Array(this._atomindexBuffer); }
          var j = 0;
          for (var i = 0; i < n; ++i) {
              var i3 = i * 3;
              var v = data[i];
              if ((!outside && v >= minValue && v <= maxValue) ||
                  (outside && (v < minValue || v > maxValue))) {
                  var j3 = j * 3;
                  filteredData[j] = v;
                  filteredPosition[j3 + 0] = position[i3 + 0];
                  filteredPosition[j3 + 1] = position[i3 + 1];
                  filteredPosition[j3 + 2] = position[i3 + 2];
                  if (atomindex && filteredAtomindex)
                      { filteredAtomindex[j] = atomindex[i]; }
                  j += 1;
              }
          }
          // set views
          this.data = new Float32Array(this._dataBuffer, 0, j);
          this.position = new Float32Array(this._positionBuffer, 0, j * 3);
          if (atomindex)
              { this.atomindex = new Int32Array(this._atomindexBuffer, 0, j); }
      }
      this._filterHash = filterHash;
  };

  Object.defineProperties( FilteredVolume.prototype, prototypeAccessors$k );
  FilteredVolume.prototype.getValueForSigma = Volume.prototype.getValueForSigma;
  FilteredVolume.prototype.getSigmaForValue = Volume.prototype.getSigmaForValue;
  FilteredVolume.prototype.getDataAtomindex = Volume.prototype.getDataAtomindex;
  FilteredVolume.prototype.getDataPosition = Volume.prototype.getDataPosition;
  FilteredVolume.prototype.getDataColor = Volume.prototype.getDataColor;
  FilteredVolume.prototype.getDataPicking = Volume.prototype.getDataPicking;
  FilteredVolume.prototype.getDataSize = Volume.prototype.getDataSize;

  /**
   * @file Bond Hash
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var BondHash = function BondHash(bondStore, atomCount) {
      var al = createAdjacencyList({
          nodeArray1: bondStore.atomIndex1,
          nodeArray2: bondStore.atomIndex2,
          edgeCount: bondStore.count,
          nodeCount: atomCount
      });
      this.countArray = al.countArray;
      this.offsetArray = al.offsetArray;
      this.indexArray = al.indexArray;
  };

  /**
   * @file Bond Store
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Bond store
   */
  var BondStore = /*@__PURE__*/(function (Store) {
      function BondStore () {
          Store.apply(this, arguments);
      }

      if ( Store ) BondStore.__proto__ = Store;
      BondStore.prototype = Object.create( Store && Store.prototype );
      BondStore.prototype.constructor = BondStore;

      var prototypeAccessors = { _defaultFields: { configurable: true } };

      prototypeAccessors._defaultFields.get = function () {
          return [
              ['atomIndex1', 1, 'int32'],
              ['atomIndex2', 1, 'int32'],
              ['bondOrder', 1, 'int8']
          ];
      };
      BondStore.prototype.addBond = function addBond (atom1, atom2, bondOrder) {
          this.growIfFull();
          var i = this.count;
          var ai1 = atom1.index;
          var ai2 = atom2.index;
          if (ai1 < ai2) {
              this.atomIndex1[i] = ai1;
              this.atomIndex2[i] = ai2;
          }
          else {
              this.atomIndex2[i] = ai1;
              this.atomIndex1[i] = ai2;
          }
          if (bondOrder)
              { this.bondOrder[i] = bondOrder; }
          this.count += 1;
      };
      BondStore.prototype.addBondIfConnected = function addBondIfConnected (atom1, atom2, bondOrder) {
          if (atom1.connectedTo(atom2)) {
              this.addBond(atom1, atom2, bondOrder);
              return true;
          }
          return false;
      };

      Object.defineProperties( BondStore.prototype, prototypeAccessors );

      return BondStore;
  }(Store));

  /**
   * @file Atom Store
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Atom store
   */
  var AtomStore = /*@__PURE__*/(function (Store) {
      function AtomStore () {
          Store.apply(this, arguments);
      }

      if ( Store ) AtomStore.__proto__ = Store;
      AtomStore.prototype = Object.create( Store && Store.prototype );
      AtomStore.prototype.constructor = AtomStore;

      var prototypeAccessors = { _defaultFields: { configurable: true } };

      prototypeAccessors._defaultFields.get = function () {
          return [
              ['residueIndex', 1, 'uint32'],
              ['atomTypeId', 1, 'uint16'],
              ['x', 1, 'float32'],
              ['y', 1, 'float32'],
              ['z', 1, 'float32'],
              ['serial', 1, 'int32'],
              ['bfactor', 1, 'float32'],
              ['altloc', 1, 'uint8'],
              ['occupancy', 1, 'float32']
          ];
      };
      AtomStore.prototype.setAltloc = function setAltloc (i, str) {
          this.altloc[i] = str.charCodeAt(0);
      };
      AtomStore.prototype.getAltloc = function getAltloc (i) {
          var code = this.altloc[i];
          return code ? String.fromCharCode(code) : '';
      };

      Object.defineProperties( AtomStore.prototype, prototypeAccessors );

      return AtomStore;
  }(Store));

  /**
   * @file Residue Store
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Residue store
   */
  var ResidueStore = /*@__PURE__*/(function (Store) {
      function ResidueStore () {
          Store.apply(this, arguments);
      }

      if ( Store ) ResidueStore.__proto__ = Store;
      ResidueStore.prototype = Object.create( Store && Store.prototype );
      ResidueStore.prototype.constructor = ResidueStore;

      var prototypeAccessors = { _defaultFields: { configurable: true } };

      prototypeAccessors._defaultFields.get = function () {
          return [
              ['chainIndex', 1, 'uint32'],
              ['atomOffset', 1, 'uint32'],
              ['atomCount', 1, 'uint32'],
              ['residueTypeId', 1, 'uint16'],
              ['resno', 1, 'int32'],
              ['sstruc', 1, 'uint8'],
              ['inscode', 1, 'uint8']
          ];
      };
      ResidueStore.prototype.setSstruc = function setSstruc (i, str) {
          this.sstruc[i] = str.charCodeAt(0);
      };
      ResidueStore.prototype.getSstruc = function getSstruc (i) {
          var code = this.sstruc[i];
          return code ? String.fromCharCode(code) : '';
      };
      ResidueStore.prototype.setInscode = function setInscode (i, str) {
          this.inscode[i] = str.charCodeAt(0);
      };
      ResidueStore.prototype.getInscode = function getInscode (i) {
          var code = this.inscode[i];
          return code ? String.fromCharCode(code) : '';
      };

      Object.defineProperties( ResidueStore.prototype, prototypeAccessors );

      return ResidueStore;
  }(Store));

  /**
   * @file Chain Store
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Chain store
   */
  var ChainStore = /*@__PURE__*/(function (Store) {
      function ChainStore () {
          Store.apply(this, arguments);
      }

      if ( Store ) ChainStore.__proto__ = Store;
      ChainStore.prototype = Object.create( Store && Store.prototype );
      ChainStore.prototype.constructor = ChainStore;

      var prototypeAccessors = { _defaultFields: { configurable: true } };

      prototypeAccessors._defaultFields.get = function () {
          return [
              ['entityIndex', 1, 'uint16'],
              ['modelIndex', 1, 'uint16'],
              ['residueOffset', 1, 'uint32'],
              ['residueCount', 1, 'uint32'],
              ['chainname', 4, 'uint8'],
              ['chainid', 4, 'uint8']
          ];
      };
      ChainStore.prototype.setChainname = function setChainname (i, str) {
          var j = 4 * i;
          this.chainname[j] = str.charCodeAt(0);
          this.chainname[j + 1] = str.charCodeAt(1);
          this.chainname[j + 2] = str.charCodeAt(2);
          this.chainname[j + 3] = str.charCodeAt(3);
      };
      ChainStore.prototype.getChainname = function getChainname (i) {
          var chainname = '';
          for (var k = 0; k < 4; ++k) {
              var code = this.chainname[4 * i + k];
              if (code) {
                  chainname += String.fromCharCode(code);
              }
              else {
                  break;
              }
          }
          return chainname;
      };
      ChainStore.prototype.setChainid = function setChainid (i, str) {
          var j = 4 * i;
          this.chainid[j] = str.charCodeAt(0);
          this.chainid[j + 1] = str.charCodeAt(1);
          this.chainid[j + 2] = str.charCodeAt(2);
          this.chainid[j + 3] = str.charCodeAt(3);
      };
      ChainStore.prototype.getChainid = function getChainid (i) {
          var chainid = '';
          for (var k = 0; k < 4; ++k) {
              var code = this.chainid[4 * i + k];
              if (code) {
                  chainid += String.fromCharCode(code);
              }
              else {
                  break;
              }
          }
          return chainid;
      };

      Object.defineProperties( ChainStore.prototype, prototypeAccessors );

      return ChainStore;
  }(Store));

  /**
   * @file Model Store
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Model store
   */
  var ModelStore = /*@__PURE__*/(function (Store) {
      function ModelStore () {
          Store.apply(this, arguments);
      }

      if ( Store ) ModelStore.__proto__ = Store;
      ModelStore.prototype = Object.create( Store && Store.prototype );
      ModelStore.prototype.constructor = ModelStore;

      var prototypeAccessors = { _defaultFields: { configurable: true } };

      prototypeAccessors._defaultFields.get = function () {
          return [
              ['chainOffset', 1, 'uint32'],
              ['chainCount', 1, 'uint32']
          ];
      };

      Object.defineProperties( ModelStore.prototype, prototypeAccessors );

      return ModelStore;
  }(Store));

  /**
   * @file Helixorient
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var Helixorient = function Helixorient(polymer) {
      this.polymer = polymer;
      this.size = polymer.residueCount;
  };
  Helixorient.prototype.getCenterIterator = function getCenterIterator (smooth) {
          if ( smooth === void 0 ) smooth = 0;

      var center = this.getPosition().center;
      var size = center.length / 3;
      var i = 0;
      var j = -1;
      var cache = [
          new Vector3(),
          new Vector3(),
          new Vector3(),
          new Vector3()
      ];
      function next() {
          var vector = this.get(j);
          j += 1;
          return vector;
      }
      function get(idx) {
          idx = Math.min(size - 1, Math.max(0, idx));
          var v = cache[i % 4];
          var idx3 = 3 * idx;
          v.fromArray(center, idx3); // TODO
          if (smooth) {
              var w = Math.min(smooth, idx, size - idx - 1);
              for (var k = 1; k <= w; ++k) {
                  var l = k * 3;
                  var t = (w + 1 - k) / (w + 1);
                  v.x += t * center[idx3 - l + 0] + t * center[idx3 + l + 0];
                  v.y += t * center[idx3 - l + 1] + t * center[idx3 + l + 1];
                  v.z += t * center[idx3 - l + 2] + t * center[idx3 + l + 2];
              }
              v.x /= w + 1;
              v.y /= w + 1;
              v.z /= w + 1;
          }
          i += 1;
          return v;
      }
      function reset() {
          i = 0;
          j = -1;
      }
      return { size: size, next: next, get: get, reset: reset };
  };
  Helixorient.prototype.getColor = function getColor (params) {
      var polymer = this.polymer;
      var structure = polymer.structure;
      var n = polymer.residueCount;
      var residueIndexStart = polymer.residueIndexStart;
      var col = new Float32Array(n * 3);
      var p = params || {};
      p.structure = structure;
      var colormaker = ColormakerRegistry.getScheme(p);
      var rp = structure.getResidueProxy();
      var ap = structure.getAtomProxy();
      for (var i = 0; i < n; ++i) {
          rp.index = residueIndexStart + i;
          ap.index = rp.traceAtomIndex;
          colormaker.atomColorToArray(ap, col, i * 3);
      }
      return {
          'color': col
      };
  };
  Helixorient.prototype.getPicking = function getPicking () {
      var polymer = this.polymer;
      var structure = polymer.structure;
      var n = polymer.residueCount;
      var residueIndexStart = polymer.residueIndexStart;
      var pick = new Float32Array(n);
      var rp = structure.getResidueProxy();
      for (var i = 0; i < n; ++i) {
          rp.index = residueIndexStart + i;
          pick[i] = rp.traceAtomIndex;
      }
      return {
          'picking': new AtomPicker(pick, structure)
      };
  };
  Helixorient.prototype.getSize = function getSize (params) {
      var polymer = this.polymer;
      var structure = polymer.structure;
      var n = polymer.residueCount;
      var residueIndexStart = polymer.residueIndexStart;
      var size = new Float32Array(n);
      var radiusFactory = new RadiusFactory(params);
      var rp = structure.getResidueProxy();
      var ap = structure.getAtomProxy();
      for (var i = 0; i < n; ++i) {
          rp.index = residueIndexStart + i;
          ap.index = rp.traceAtomIndex;
          size[i] = radiusFactory.atomRadius(ap);
      }
      return { size: size };
  };
  Helixorient.prototype.getPosition = function getPosition () {
      var polymer = this.polymer;
      var structure = polymer.structure;
      var n = polymer.residueCount;
      var n3 = n - 3;
      var center = new Float32Array(3 * n);
      var axis = new Float32Array(3 * n);
      var diff = new Float32Array(n);
      var radius = new Float32Array(n);
      var rise = new Float32Array(n);
      var twist = new Float32Array(n);
      var resdir = new Float32Array(3 * n);
      var r12 = new Vector3();
      var r23 = new Vector3();
      var r34 = new Vector3();
      var diff13 = new Vector3();
      var diff24 = new Vector3();
      var v1 = new Vector3();
      var v2 = new Vector3();
      var vt = new Vector3();
      var _axis = new Vector3();
      var _prevAxis = new Vector3();
      var _resdir = new Vector3();
      var _center = new Vector3(0, 0, 0);
      var type = 'trace';
      var a1 = structure.getAtomProxy();
      var a2 = structure.getAtomProxy(polymer.getAtomIndexByType(0, type));
      var a3 = structure.getAtomProxy(polymer.getAtomIndexByType(1, type));
      var a4 = structure.getAtomProxy(polymer.getAtomIndexByType(2, type));
      for (var i = 0; i < n3; ++i) {
          a1.index = a2.index;
          a2.index = a3.index;
          a3.index = a4.index;
          a4.index = polymer.getAtomIndexByType(i + 3, type); // TODO
          var j = 3 * i;
          // ported from GROMACS src/tools/gmx_helixorient.c
          r12.subVectors(a2, a1); // TODO
          r23.subVectors(a3, a2); // TODO
          r34.subVectors(a4, a3); // TODO
          diff13.subVectors(r12, r23);
          diff24.subVectors(r23, r34);
          _axis.crossVectors(diff13, diff24).normalize();
          _axis.toArray(axis, j); // TODO
          if (i > 0) {
              diff[i] = _axis.angleTo(_prevAxis);
          }
          var tmp = Math.cos(diff13.angleTo(diff24));
          twist[i] = 180.0 / Math.PI * Math.acos(tmp);
          var diff13Length = diff13.length();
          var diff24Length = diff24.length();
          radius[i] = (Math.sqrt(diff24Length * diff13Length) /
              // clamp, to avoid instabilities for when
              // angle between diff13 and diff24 is near 0
              Math.max(2.0, 2.0 * (1.0 - tmp)));
          rise[i] = Math.abs(r23.dot(_axis));
          //
          v1.copy(diff13).multiplyScalar(radius[i] / diff13Length);
          v2.copy(diff24).multiplyScalar(radius[i] / diff24Length);
          v1.subVectors(a2, v1); // TODO
          v2.subVectors(a3, v2); // TODO
          v1.toArray(center, j + 3); // TODO
          v2.toArray(center, j + 6); // TODO
          //
          _resdir.subVectors(a1, _center); // TODO
          _resdir.toArray(resdir, j); // TODO
          _prevAxis.copy(_axis);
          _center.copy(v1);
      }
      //
      // calc axis as dir of second and third center pos
      // project first traceAtom onto axis to get first center pos
      v1.fromArray(center, 3); // TODO
      v2.fromArray(center, 6); // TODO
      _axis.subVectors(v1, v2).normalize();
      // _center.copy( res[ 0 ].getTraceAtom() );
      a1.index = polymer.getAtomIndexByType(0, type); // TODO
      _center.copy(a1); // TODO
      vt.copy(a1); // TODO
      projectPointOnVector(vt, _axis, v1);
      vt.toArray(center, 0); // TODO
      // calc first resdir
      _resdir.subVectors(_center, v1);
      _resdir.toArray(resdir, 0); // TODO
      // calc axis as dir of n-1 and n-2 center pos
      // project last traceAtom onto axis to get last center pos
      v1.fromArray(center, 3 * n - 6); // TODO
      v2.fromArray(center, 3 * n - 9); // TODO
      _axis.subVectors(v1, v2).normalize();
      // _center.copy( res[ n - 1 ].getTraceAtom() );
      a1.index = polymer.getAtomIndexByType(n - 1, type); // TODO
      _center.copy(a1); // TODO
      vt.copy(a1); // TODO
      projectPointOnVector(vt, _axis, v1);
      vt.toArray(center, 3 * n - 3); // TODO
      // calc last three resdir
      for (var i$1 = n - 3; i$1 < n; ++i$1) {
          v1.fromArray(center, 3 * i$1); // TODO
          // _center.copy( res[ i ].getTraceAtom() );
          a1.index = polymer.getAtomIndexByType(i$1, type); // TODO
          _center.copy(a1); // TODO
          _resdir.subVectors(_center, v1);
          _resdir.toArray(resdir, 3 * i$1); // TODO
      }
      // average measures to define them on the residues
      var resRadius = new Float32Array(n);
      var resTwist = new Float32Array(n);
      var resRise = new Float32Array(n);
      var resBending = new Float32Array(n);
      resRadius[1] = radius[0];
      resTwist[1] = twist[0];
      resRise[1] = radius[0];
      for (var i$2 = 2; i$2 < n - 2; ++i$2) {
          resRadius[i$2] = 0.5 * (radius[i$2 - 2] + radius[i$2 - 1]);
          resTwist[i$2] = 0.5 * (twist[i$2 - 2] + twist[i$2 - 1]);
          resRise[i$2] = 0.5 * (rise[i$2 - 2] + rise[i$2 - 1]);
          v1.fromArray(axis, 3 * (i$2 - 2)); // TODO
          v2.fromArray(axis, 3 * (i$2 - 1)); // TODO
          resBending[i$2] = 180.0 / Math.PI * Math.acos(Math.cos(v1.angleTo(v2)));
      }
      resRadius[n - 2] = radius[n - 4];
      resTwist[n - 2] = twist[n - 4];
      resRise[n - 2] = rise[n - 4];
      // average helix axes to define them on the residues
      var resAxis = new Float32Array(3 * n);
      copyArray(axis, resAxis, 0, 0, 3);
      copyArray(axis, resAxis, 0, 3, 3);
      for (var i$3 = 2; i$3 < n - 2; ++i$3) {
          v1.fromArray(axis, 3 * (i$3 - 2)); // TODO
          v2.fromArray(axis, 3 * (i$3 - 1)); // TODO
          _axis.addVectors(v2, v1).multiplyScalar(0.5).normalize();
          _axis.toArray(resAxis, 3 * i$3); // TODO
      }
      copyArray(axis, resAxis, 3 * n - 12, 3 * n - 6, 3);
      copyArray(axis, resAxis, 3 * n - 12, 3 * n - 3, 3);
      return {
          center: center,
          axis: resAxis,
          bending: resBending,
          radius: resRadius,
          rise: resRise,
          twist: resTwist,
          resdir: resdir
      };
  };

  /**
   * @file Helixbundle
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var Helixbundle = function Helixbundle(polymer) {
      this.polymer = polymer;
      this.helixorient = new Helixorient(polymer);
      this.position = this.helixorient.getPosition();
  };
  Helixbundle.prototype.getAxis = function getAxis (localAngle, centerDist, ssBorder, colorParams, radiusParams) {
      localAngle = localAngle || 30;
      centerDist = centerDist || 2.5;
      ssBorder = ssBorder === undefined ? false : ssBorder;
      var polymer = this.polymer;
      var structure = polymer.structure;
      var n = polymer.residueCount;
      var residueIndexStart = polymer.residueIndexStart;
      var pos = this.position;
      var cp = colorParams || {};
      cp.structure = structure;
      var colormaker = ColormakerRegistry.getScheme(cp);
      var radiusFactory = new RadiusFactory(radiusParams);
      var j = 0;
      var k = 0;
      var axis = [];
      var center = [];
      var beg = [];
      var end = [];
      var col = [];
      var pick = [];
      var size = [];
      var residueOffset = [];
      var residueCount = [];
      var tmpAxis = new Float32Array(n * 3);
      var tmpCenter = new Float32Array(n * 3);
      var _axis, _center;
      var _beg = new Vector3();
      var _end = new Vector3();
      var rp1 = structure.getResidueProxy();
      var rp2 = structure.getResidueProxy();
      var ap = structure.getAtomProxy();
      var c1 = new Vector3();
      var c2 = new Vector3();
      var split = false;
      for (var i = 0; i < n; ++i) {
          rp1.index = residueIndexStart + i;
          c1.fromArray(pos.center, i * 3);
          if (i === n - 1) {
              split = true;
          }
          else {
              rp2.index = residueIndexStart + i + 1;
              c2.fromArray(pos.center, i * 3 + 3);
              if (ssBorder && rp1.sstruc !== rp2.sstruc) {
                  split = true;
              }
              else if (c1.distanceTo(c2) > centerDist) {
                  split = true;
              }
              else if (pos.bending[i] > localAngle) {
                  split = true;
              }
          }
          if (split) {
              if (i - j < 4) {
                  j = i;
                  split = false;
                  continue;
              }
              ap.index = rp1.traceAtomIndex;
              // ignore first and last axis
              tmpAxis = pos.axis.subarray(j * 3 + 3, i * 3);
              tmpCenter = pos.center.subarray(j * 3, i * 3 + 3);
              _axis = calculateMeanVector3(tmpAxis).normalize();
              _center = calculateMeanVector3(tmpCenter);
              _beg.fromArray(tmpCenter);
              projectPointOnVector(_beg, _axis, _center);
              _end.fromArray(tmpCenter, tmpCenter.length - 3);
              projectPointOnVector(_end, _axis, _center);
              _axis.subVectors(_end, _beg);
              _axis.toArray(axis, k);
              _center.toArray(center, k);
              _beg.toArray(beg, k);
              _end.toArray(end, k);
              colormaker.atomColorToArray(ap, col, k);
              pick.push(ap.index);
              size.push(radiusFactory.atomRadius(ap));
              residueOffset.push(residueIndexStart + j);
              residueCount.push(residueIndexStart + i + 1 - j);
              k += 3;
              j = i;
              split = false;
          }
      }
      var picking = new Float32Array(pick);
      return {
          axis: new Float32Array(axis),
          center: new Float32Array(center),
          begin: new Float32Array(beg),
          end: new Float32Array(end),
          color: new Float32Array(col),
          picking: new AtomPicker(picking, structure),
          size: new Float32Array(size),
          residueOffset: residueOffset,
          residueCount: residueCount
      };
  };

  /**
   * @file Binary Heap
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Binary heap implementation
   * @class
   * @author http://eloquentjavascript.net/appendix2.htm
   * @param {Function} scoreFunction - the heap scoring function
   */
  var BinaryHeap = function BinaryHeap(scoreFunction) {
      this.scoreFunction = scoreFunction;
      this.content = [];
      this.scoreFunction = scoreFunction;
  };
  BinaryHeap.prototype.push = function push (element) {
      // Add the new element to the end of the array.
      this.content.push(element);
      // Allow it to bubble up.
      this.bubbleUp(this.content.length - 1);
  };
  BinaryHeap.prototype.pop = function pop () {
      // Store the first element so we can return it later.
      var result = this.content[0];
      // Get the element at the end of the array.
      var end = this.content.pop();
      // If there are any elements left, put the end element at the
      // start, and let it sink down.
      if (end && this.content.length > 0) {
          this.content[0] = end;
          this.sinkDown(0);
      }
      return result;
  };
  BinaryHeap.prototype.peek = function peek () {
      return this.content[0];
  };
  BinaryHeap.prototype.remove = function remove (element) {
      var len = this.content.length;
      // To remove a value, we must search through the array to find it.
      for (var i = 0; i < len; i++) {
          if (this.content[i] === element) {
              // When it is found, the process seen in 'pop' is repeated
              // to fill up the hole.
              var end = this.content.pop();
              if (end && i !== len - 1) {
                  this.content[i] = end;
                  if (this.scoreFunction(end) < this.scoreFunction(element)) {
                      this.bubbleUp(i);
                  }
                  else {
                      this.sinkDown(i);
                  }
              }
              return;
          }
      }
      throw new Error('Node not found.');
  };
  BinaryHeap.prototype.size = function size () {
      return this.content.length;
  };
  BinaryHeap.prototype.bubbleUp = function bubbleUp (n) {
      // Fetch the element that has to be moved.
      var element = this.content[n];
      // When at 0, an element can not go up any further.
      while (n > 0) {
          // Compute the parent element's index, and fetch it.
          var parentN = Math.floor((n + 1) / 2) - 1;
          var parent = this.content[parentN];
          // Swap the elements if the parent is greater.
          if (this.scoreFunction(element) < this.scoreFunction(parent)) {
              this.content[parentN] = element;
              this.content[n] = parent;
              // Update 'n' to continue at the new position.
              n = parentN;
          }
          else {
              // Found a parent that is less, no need to move it further.
              break;
          }
      }
  };
  BinaryHeap.prototype.sinkDown = function sinkDown (n) {
      // Look up the target element and its score.
      var length = this.content.length;
      var element = this.content[n];
      var elemScore = this.scoreFunction(element);
      var child1Score = 0;
      var child2Score = 0;
      while (true) {
          // Compute the indices of the child elements.
          var child2N = (n + 1) * 2;
          var child1N = child2N - 1;
          // This is used to store the new position of the element, if any.
          var swap = null;
          // If the first child exists (is inside the array)...
          if (child1N < length) {
              // Look it up and compute its score.
              var child1 = this.content[child1N];
              child1Score = this.scoreFunction(child1);
              // If the score is less than our element's, we need to swap.
              if (child1Score < elemScore)
                  { swap = child1N; }
          }
          // Do the same checks for the other child.
          if (child2N < length) {
              var child2 = this.content[child2N];
              child2Score = this.scoreFunction(child2);
              if (child2Score < (swap === null ? elemScore : child1Score))
                  { swap = child2N; }
          }
          // If the element needs to be moved, swap it, and continue.
          if (swap !== null) {
              this.content[n] = this.content[swap];
              this.content[swap] = element;
              n = swap;
          }
          else {
              // Otherwise, we are done.
              break;
          }
      }
  };

  /**
   * @file Kdtree
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Kdtree
   * @class
   * @author Alexander Rose <alexander.rose@weirdbyte.de>, 2016
   * @author Roman Bolzern <roman.bolzern@fhnw.ch>, 2013
   * @author I4DS http://www.fhnw.ch/i4ds, 2013
   * @license MIT License <http://www.opensource.org/licenses/mit-license.php>
   * @description
   * k-d Tree for typed arrays of 3d points (e.g. for Float32Array), in-place
   * provides fast nearest neighbour search
   *
   * Based on https://github.com/ubilabs/kd-tree-javascript by Ubilabs
   *
   * Further information (including mathematical properties)
   * http://en.wikipedia.org/wiki/Binary_tree
   * http://en.wikipedia.org/wiki/K-d_tree
   *
   * @example
   * points: [x, y, z, x, y, z, x, y, z, ...]
   * metric: function(a, b){
   *    return Math.pow(a[0]-b[0], 2) + Math.pow(a[1]-b[1], 2) + Math.pow(a[2]-b[2], 2);
   * }
   *
   * @param {Float32Array} points - points
   * @param {Function} metric - metric
   */
  var Kdtree$1 = function Kdtree(points, metric) {
      this.points = points;
      this.metric = metric;
      this.maxDepth = 0;
      this.currentNode = 0;
      var n = points.length / 3;
      var indices = new Uint32Array(n);
      for (var i = 0; i < n; ++i) {
          indices[i] = i;
      }
      this.indices = indices;
      this.nodes = new Int32Array(n * 4);
      this.rootIndex = this.buildTree(0, -1, 0, n);
  };
  Kdtree$1.prototype.buildTree = function buildTree (depth, parent, arrBegin, arrEnd) {
      if (depth > this.maxDepth)
          { this.maxDepth = depth; }
      var plength = arrEnd - arrBegin;
      if (plength === 0) {
          return -1;
      }
      var nodeIndex = this.currentNode * 4;
      var nodes = this.nodes;
      this.currentNode += 1;
      if (plength === 1) {
          nodes[nodeIndex] = arrBegin;
          nodes[nodeIndex + 1] = -1;
          nodes[nodeIndex + 2] = -1;
          nodes[nodeIndex + 3] = parent;
          return nodeIndex;
      }
      // if(plength <= 32){
      //   return nodeIndex;
      // }
      var indices = this.indices;
      var points = this.points;
      var arrMedian = arrBegin + Math.floor(plength / 2);
      var currentDim = depth % 3;
      // inlined quickselect function
      var j, tmp, pivotIndex, pivotValue, storeIndex;
      var left = arrBegin;
      var right = arrEnd - 1;
      while (right > left) {
          pivotIndex = (left + right) >> 1;
          pivotValue = points[indices[pivotIndex] * 3 + currentDim];
          // swap( pivotIndex, right );
          tmp = indices[pivotIndex];
          indices[pivotIndex] = indices[right];
          indices[right] = tmp;
          storeIndex = left;
          for (j = left; j < right; ++j) {
              if (points[indices[j] * 3 + currentDim] < pivotValue) {
                  // swap( storeIndex, j );
                  tmp = indices[storeIndex];
                  indices[storeIndex] = indices[j];
                  indices[j] = tmp;
                  ++storeIndex;
              }
          }
          // swap( right, storeIndex );
          tmp = indices[right];
          indices[right] = indices[storeIndex];
          indices[storeIndex] = tmp;
          pivotIndex = storeIndex;
          if (arrMedian === pivotIndex) {
              break;
          }
          else if (arrMedian < pivotIndex) {
              right = pivotIndex - 1;
          }
          else {
              left = pivotIndex + 1;
          }
      }
      nodes[nodeIndex] = arrMedian;
      nodes[nodeIndex + 1] = this.buildTree(depth + 1, nodeIndex, arrBegin, arrMedian);
      nodes[nodeIndex + 2] = this.buildTree(depth + 1, nodeIndex, arrMedian + 1, arrEnd);
      nodes[nodeIndex + 3] = parent;
      return nodeIndex;
  };
  Kdtree$1.prototype.getNodeDepth = function getNodeDepth (nodeIndex) {
      var parentIndex = this.nodes[nodeIndex + 3];
      return (parentIndex === -1) ? 0 : this.getNodeDepth(parentIndex) + 1;
  };
  // TODO
  // function getNodePos (node) {}
  /**
   * find nearest points
   * @param {Array} point - array of size 3
   * @param {Integer} maxNodes - max amount of nodes to return
   * @param {Float} maxDistance - maximum distance of point to result nodes
   * @return {Array} array of point, distance pairs
   */
  Kdtree$1.prototype.nearest = function nearest (point, maxNodes, maxDistance) {
          var this$1$1 = this;

      var bestNodes = new BinaryHeap(function (e) { return -e[1]; });
      var nodes = this.nodes;
      var points = this.points;
      var indices = this.indices;
      var nearestSearch = function (nodeIndex) {
          var bestChild, otherChild;
          var dimension = this$1$1.getNodeDepth(nodeIndex) % 3;
          var pointIndex = indices[nodes[nodeIndex]] * 3;
          var ownPoint = [
              points[pointIndex + 0],
              points[pointIndex + 1],
              points[pointIndex + 2]
          ];
          var ownDistance = this$1$1.metric(point, ownPoint);
          function saveNode(nodeIndex, distance) {
              bestNodes.push([nodeIndex, distance]);
              if (bestNodes.size() > maxNodes) {
                  bestNodes.pop();
              }
          }
          var leftIndex = nodes[nodeIndex + 1];
          var rightIndex = nodes[nodeIndex + 2];
          // if it's a leaf
          if (rightIndex === -1 && leftIndex === -1) {
              if ((bestNodes.size() < maxNodes || ownDistance < bestNodes.peek()[1]) &&
                  ownDistance <= maxDistance) {
                  saveNode(nodeIndex, ownDistance);
              }
              return;
          }
          if (rightIndex === -1) {
              bestChild = leftIndex;
          }
          else if (leftIndex === -1) {
              bestChild = rightIndex;
          }
          else {
              if (point[dimension] <= points[pointIndex + dimension]) {
                  bestChild = leftIndex;
              }
              else {
                  bestChild = rightIndex;
              }
          }
          // recursive search
          nearestSearch(bestChild);
          if ((bestNodes.size() < maxNodes || ownDistance < bestNodes.peek()[1]) &&
              ownDistance <= maxDistance) {
              saveNode(nodeIndex, ownDistance);
          }
          // if there's still room or the current distance is nearer than the best distance
          var linearPoint = [];
          for (var i = 0; i < 3; i += 1) {
              if (i === dimension) {
                  linearPoint[i] = point[i];
              }
              else {
                  linearPoint[i] = points[pointIndex + i];
              }
          }
          var linearDistance = this$1$1.metric(linearPoint, ownPoint);
          if ((bestNodes.size() < maxNodes || Math.abs(linearDistance) < bestNodes.peek()[1]) &&
              Math.abs(linearDistance) <= maxDistance) {
              if (bestChild === leftIndex) {
                  otherChild = rightIndex;
              }
              else {
                  otherChild = leftIndex;
              }
              if (otherChild !== -1) {
                  nearestSearch(otherChild);
              }
          }
      };
      nearestSearch(this.rootIndex);
      var result = [];
      for (var i = 0, il = Math.min(bestNodes.size(), maxNodes); i < il; i += 1) {
          result.push(bestNodes.content[i]);
      }
      return result;
  };
  Kdtree$1.prototype.verify = function verify (nodeIndex, depth) {
          if ( depth === void 0 ) depth = 0;

      var count = 1;
      if (nodeIndex === undefined) {
          nodeIndex = this.rootIndex;
      }
      if (nodeIndex === -1) {
          throw new Error('node is null');
      }
      var dim = depth % 3;
      var nodes = this.nodes;
      var points = this.points;
      var indices = this.indices;
      var leftIndex = nodes[nodeIndex + 1];
      var rightIndex = nodes[nodeIndex + 2];
      if (leftIndex !== -1) {
          if (points[indices[nodes[leftIndex]] * 3 + dim] >
              points[indices[nodes[nodeIndex]] * 3 + dim]) {
              throw new Error('left child is > parent!');
          }
          count += this.verify(leftIndex, depth + 1);
      }
      if (rightIndex !== -1) {
          if (points[indices[nodes[rightIndex]] * 3 + dim] <
              points[indices[nodes[nodeIndex]] * 3 + dim]) {
              throw new Error('right child is < parent!');
          }
          count += this.verify(rightIndex, depth + 1);
      }
      return count;
  };

  /**
   * @file Atom Proxy
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Atom proxy
   */
  var AtomProxy = function AtomProxy(structure, index) {
      if ( index === void 0 ) index = 0;

      this.structure = structure;
      this.index = index;
      this.chainStore = structure.chainStore;
      this.residueStore = structure.residueStore;
      this.atomStore = structure.atomStore;
      this.residueMap = structure.residueMap;
      this.atomMap = structure.atomMap;
  };

  var prototypeAccessors$j = { bondHash: { configurable: true },entity: { configurable: true },entityIndex: { configurable: true },modelIndex: { configurable: true },chainIndex: { configurable: true },residue: { configurable: true },residueIndex: { configurable: true },sstruc: { configurable: true },inscode: { configurable: true },resno: { configurable: true },chainname: { configurable: true },chainid: { configurable: true },residueType: { configurable: true },atomType: { configurable: true },residueAtomOffset: { configurable: true },resname: { configurable: true },hetero: { configurable: true },atomname: { configurable: true },number: { configurable: true },element: { configurable: true },vdw: { configurable: true },covalent: { configurable: true },x: { configurable: true },y: { configurable: true },z: { configurable: true },serial: { configurable: true },bfactor: { configurable: true },occupancy: { configurable: true },altloc: { configurable: true },partialCharge: { configurable: true },radius: { configurable: true },formalCharge: { configurable: true },aromatic: { configurable: true },bondCount: { configurable: true } };
  /**
   * @type {BondHash}
   */
  prototypeAccessors$j.bondHash.get = function () { return this.structure.bondHash; };
  /**
   * Molecular enity
   * @type {Entity}
   */
  prototypeAccessors$j.entity.get = function () {
      return this.structure.entityList[this.entityIndex];
  };
  prototypeAccessors$j.entityIndex.get = function () {
      return this.chainStore.entityIndex[this.chainIndex];
  };
  prototypeAccessors$j.modelIndex.get = function () {
      return this.chainStore.modelIndex[this.chainIndex];
  };
  prototypeAccessors$j.chainIndex.get = function () {
      return this.residueStore.chainIndex[this.residueIndex];
  };
  /**
   * @type {ResidueProxy}
   */
  prototypeAccessors$j.residue.get = function () {
      console.warn('residue - might be expensive');
      return this.structure.getResidueProxy(this.residueIndex);
  };
  prototypeAccessors$j.residueIndex.get = function () {
      return this.atomStore.residueIndex[this.index];
  };
  prototypeAccessors$j.residueIndex.set = function (value) {
      this.atomStore.residueIndex[this.index] = value;
  };
  //
  /**
   * Secondary structure code
   * @type {String}
   */
  prototypeAccessors$j.sstruc.get = function () {
      return this.residueStore.getSstruc(this.residueIndex);
  };
  /**
   * Insertion code
   * @type {String}
   */
  prototypeAccessors$j.inscode.get = function () {
      return this.residueStore.getInscode(this.residueIndex);
  };
  /**
   * Residue number/label
   * @type {Integer}
   */
  prototypeAccessors$j.resno.get = function () {
      return this.residueStore.resno[this.residueIndex];
  };
  /**
   * Chain name
   * @type {String}
   */
  prototypeAccessors$j.chainname.get = function () {
      return this.chainStore.getChainname(this.chainIndex);
  };
  /**
   * Chain id
   * @type {String}
   */
  prototypeAccessors$j.chainid.get = function () {
      return this.chainStore.getChainid(this.chainIndex);
  };
  //
  /**
   * @type {ResidueType}
   */
  prototypeAccessors$j.residueType.get = function () {
      return this.residueMap.get(this.residueStore.residueTypeId[this.residueIndex]);
  };
  /**
   * @type {AtomType}
   */
  prototypeAccessors$j.atomType.get = function () {
      return this.atomMap.get(this.atomStore.atomTypeId[this.index]);
  };
  prototypeAccessors$j.residueAtomOffset.get = function () {
      return this.residueStore.atomOffset[this.residueIndex];
  };
  //
  /**
   * Residue name
   */
  prototypeAccessors$j.resname.get = function () {
      return this.residueType.resname;
  };
  /**
   * Hetero flag
   */
  prototypeAccessors$j.hetero.get = function () {
      return this.residueType.hetero;
  };
  //
  /**
   * Atom name
   */
  prototypeAccessors$j.atomname.get = function () {
      return this.atomType.atomname;
  };
  /**
   * Atomic number
   */
  prototypeAccessors$j.number.get = function () {
      return this.atomType.number;
  };
  /**
   * Element
   */
  prototypeAccessors$j.element.get = function () {
      return this.atomType.element;
  };
  /**
   * Van-der-Waals radius
   */
  prototypeAccessors$j.vdw.get = function () {
      return this.atomType.vdw;
  };
  /**
   * Covalent radius
   */
  prototypeAccessors$j.covalent.get = function () {
      return this.atomType.covalent;
  };
  //
  /**
   * X coordinate
   */
  prototypeAccessors$j.x.get = function () {
      return this.atomStore.x[this.index];
  };
  prototypeAccessors$j.x.set = function (value) {
      this.atomStore.x[this.index] = value;
  };
  /**
   * Y coordinate
   */
  prototypeAccessors$j.y.get = function () {
      return this.atomStore.y[this.index];
  };
  prototypeAccessors$j.y.set = function (value) {
      this.atomStore.y[this.index] = value;
  };
  /**
   * Z coordinate
   */
  prototypeAccessors$j.z.get = function () {
      return this.atomStore.z[this.index];
  };
  prototypeAccessors$j.z.set = function (value) {
      this.atomStore.z[this.index] = value;
  };
  /**
   * Serial number
   */
  prototypeAccessors$j.serial.get = function () {
      return this.atomStore.serial[this.index];
  };
  prototypeAccessors$j.serial.set = function (value) {
      this.atomStore.serial[this.index] = value;
  };
  /**
   * B-factor value
   */
  prototypeAccessors$j.bfactor.get = function () {
      return this.atomStore.bfactor[this.index];
  };
  prototypeAccessors$j.bfactor.set = function (value) {
      this.atomStore.bfactor[this.index] = value;
  };
  /**
   * Occupancy value
   */
  prototypeAccessors$j.occupancy.get = function () {
      return this.atomStore.occupancy[this.index];
  };
  prototypeAccessors$j.occupancy.set = function (value) {
      this.atomStore.occupancy[this.index] = value;
  };
  /**
   * Alternate location identifier
   */
  prototypeAccessors$j.altloc.get = function () {
      return this.atomStore.getAltloc(this.index);
  };
  prototypeAccessors$j.altloc.set = function (value) {
      this.atomStore.setAltloc(this.index, value);
  };
  /**
   * Partial charge
   */
  prototypeAccessors$j.partialCharge.get = function () {
      return this.atomStore.partialCharge ? this.atomStore.partialCharge[this.index] : null;
  };
  prototypeAccessors$j.partialCharge.set = function (value) {
      if (this.atomStore.partialCharge) {
          this.atomStore.partialCharge[this.index] = value;
      }
  };
  /**
   * Explicit radius
   */
  prototypeAccessors$j.radius.get = function () {
      return this.atomStore.radius ? this.atomStore.radius[this.index] : null;
  };
  prototypeAccessors$j.radius.set = function (value) {
      if (this.atomStore.radius) {
          this.atomStore.radius[this.index] = value;
      }
  };
  /**
   * Formal charge
   */
  prototypeAccessors$j.formalCharge.get = function () {
      return this.atomStore.formalCharge ? this.atomStore.formalCharge[this.index] : null;
  };
  prototypeAccessors$j.formalCharge.set = function (value) {
      if (this.atomStore.formalCharge) {
          this.atomStore.formalCharge[this.index] = value;
      }
  };
  /**
   * Aromaticity flag
   */
  prototypeAccessors$j.aromatic.get = function () {
      if (this.atomStore.aromatic) {
          return this.atomStore.aromatic[this.index];
      }
      else {
          return this.residueType.isAromatic(this) ? 1 : 0;
      }
  };
  prototypeAccessors$j.aromatic.set = function (value) {
      if (this.atomStore.aromatic) {
          this.atomStore.aromatic[this.index] = value;
      }
  };
  //
  prototypeAccessors$j.bondCount.get = function () {
      return this.bondHash.countArray[this.index]; // TODO
  };
  //
  /**
   * Iterate over each bond
   * @param  {function(bond: BondProxy)} callback - iterator callback function
   * @param  {BondProxy} [bp] - optional target bond proxy for use in the callback
   * @return {undefined}
   */
  AtomProxy.prototype.eachBond = function eachBond (callback, bp) {
      bp = bp || this.structure._bp;
      var idx = this.index;
      var bondHash = this.bondHash; // TODO
      var indexArray = bondHash.indexArray;
      var n = bondHash.countArray[idx];
      var offset = bondHash.offsetArray[idx];
      for (var i = 0; i < n; ++i) {
          bp.index = indexArray[offset + i];
          callback(bp);
      }
  };
  /**
   * Iterate over each bonded atom
   * @param  {function(atom: AtomProxy)} callback - iterator callback function
   * @param  {AtomProxy} [ap] - optional target atom proxy for use in the callback
   * @return {undefined}
   */
  AtomProxy.prototype.eachBondedAtom = function eachBondedAtom (callback, _ap) {
      var ap = _ap ? _ap : this.structure._ap;
      var idx = this.index;
      this.eachBond(function (bp) {
          ap.index = idx !== bp.atomIndex1 ? bp.atomIndex1 : bp.atomIndex2;
          callback(ap);
      });
      this.index = idx;
  };
  /**
   * Check if this atom is bonded to the given atom,
   * assumes both atoms are from the same structure
   * @param  {AtomProxy} ap - the given atom
   * @return {Boolean} whether a bond exists or not
   */
  AtomProxy.prototype.hasBondTo = function hasBondTo (ap) {
      var flag = false;
      this.eachBondedAtom(function (bap) {
          if (ap.index === bap.index)
              { flag = true; }
      });
      return flag;
  };
  AtomProxy.prototype.bondToElementCount = function bondToElementCount (element) {
      var count = 0;
      var idx = this.index; // Avoid reentrancy problems
      this.eachBondedAtom(function (bap) {
          if (bap.number === element)
              { count += 1; }
      });
      this.index = idx;
      return count;
  };
  AtomProxy.prototype.hasBondToElement = function hasBondToElement (element) {
      return this.bondToElementCount(element) > 0;
  };
  //
  /**
   * If atom is part of a backbone
   * @return {Boolean} flag
   */
  AtomProxy.prototype.isBackbone = function isBackbone () {
      var backboneIndexList = this.residueType.backboneIndexList;
      if (backboneIndexList.length > 0) {
          return backboneIndexList.includes(this.index - this.residueAtomOffset);
      }
      else {
          return false;
      }
  };
  /**
   * If atom is part of a polymer
   * @return {Boolean} flag
   */
  AtomProxy.prototype.isPolymer = function isPolymer () {
      if (this.structure.entityList.length > 0) {
          return this.entity.isPolymer();
      }
      else {
          var moleculeType = this.residueType.moleculeType;
          return (moleculeType === ProteinType ||
              moleculeType === RnaType ||
              moleculeType === DnaType);
      }
  };
  /**
   * If atom is part of a sidechin
   * @return {Boolean} flag
   */
  AtomProxy.prototype.isSidechain = function isSidechain () {
      return this.isPolymer() && !this.isBackbone();
  };
  /**
   * If atom is part of a coarse-grain group
   * @return {Boolean} flag
   */
  AtomProxy.prototype.isCg = function isCg () {
      var backboneType = this.residueType.backboneType;
      return (backboneType === CgProteinBackboneType ||
          backboneType === CgRnaBackboneType ||
          backboneType === CgDnaBackboneType);
  };
  AtomProxy.prototype.isTrace = function isTrace () {
      return this.index === (this.residueType.traceAtomIndex + this.residueAtomOffset);
  };
  /**
   * If atom is part of a hetero group
   * @return {Boolean} flag
   */
  AtomProxy.prototype.isHetero = function isHetero () {
      return this.residueType.hetero === 1;
  };
  /**
   * If atom is part of a protein molecule
   * @return {Boolean} flag
   */
  AtomProxy.prototype.isProtein = function isProtein () {
      return this.residueType.moleculeType === ProteinType;
  };
  /**
   * If atom is part of a nucleic molecule
   * @return {Boolean} flag
   */
  AtomProxy.prototype.isNucleic = function isNucleic () {
      var moleculeType = this.residueType.moleculeType;
      return moleculeType === RnaType || moleculeType === DnaType;
  };
  /**
   * If atom is part of a rna
   * @return {Boolean} flag
   */
  AtomProxy.prototype.isRna = function isRna () {
      return this.residueType.moleculeType === RnaType;
  };
  /**
   * If atom is part of a dna
   * @return {Boolean} flag
   */
  AtomProxy.prototype.isDna = function isDna () {
      return this.residueType.moleculeType === DnaType;
  };
  /**
   * If atom is part of a water molecule
   * @return {Boolean} flag
   */
  AtomProxy.prototype.isWater = function isWater () {
      return this.residueType.moleculeType === WaterType;
  };
  /**
   * If atom is part of an ion
   * @return {Boolean} flag
   */
  AtomProxy.prototype.isIon = function isIon () {
      return this.residueType.moleculeType === IonType;
  };
  /**
   * If atom is part of a saccharide
   * @return {Boolean} flag
   */
  AtomProxy.prototype.isSaccharide = function isSaccharide () {
      return this.residueType.moleculeType === SaccharideType;
  };
  /**
   * If atom is part of a helix
   * @return {Boolean} flag
   */
  AtomProxy.prototype.isHelix = function isHelix () {
      return SecStrucHelix.includes(this.sstruc);
  };
  /**
   * If atom is part of a sheet
   * @return {Boolean} flag
   */
  AtomProxy.prototype.isSheet = function isSheet () {
      return SecStrucSheet.includes(this.sstruc);
  };
  /**
   * If atom is part of a turn
   * @return {Boolean} flag
   */
  AtomProxy.prototype.isTurn = function isTurn () {
      return SecStrucTurn.includes(this.sstruc) && this.isProtein();
  };
  AtomProxy.prototype.isBonded = function isBonded () {
      return this.bondHash.countArray[this.index] !== 0; // TODO
  };
  /**
   * If atom is part of a ring
   * @return {Boolean} flag
   */
  AtomProxy.prototype.isRing = function isRing () {
      var atomRings = this.residueType.getRings().atomRings; // TODO
      return atomRings[this.index - this.residueAtomOffset] !== undefined;
  };
  AtomProxy.prototype.isAromatic = function isAromatic () {
      return this.aromatic === 1;
  };
  AtomProxy.prototype.isPolarHydrogen = function isPolarHydrogen () {
      var result = false;
      if (this.number !== 1)
          { return result; }
      result = !this.hasBondToElement(6 /* C */);
      return result;
  };
  AtomProxy.prototype.isMetal = function isMetal () { return this.atomType.isMetal(); };
  AtomProxy.prototype.isNonmetal = function isNonmetal () { return this.atomType.isNonmetal(); };
  AtomProxy.prototype.isMetalloid = function isMetalloid () { return this.atomType.isMetalloid(); };
  AtomProxy.prototype.isHalogen = function isHalogen () { return this.atomType.isHalogen(); };
  AtomProxy.prototype.isDiatomicNonmetal = function isDiatomicNonmetal () { return this.atomType.isDiatomicNonmetal(); };
  AtomProxy.prototype.isPolyatomicNonmetal = function isPolyatomicNonmetal () { return this.atomType.isPolyatomicNonmetal(); };
  AtomProxy.prototype.isAlkaliMetal = function isAlkaliMetal () { return this.atomType.isAlkaliMetal(); };
  AtomProxy.prototype.isAlkalineEarthMetal = function isAlkalineEarthMetal () { return this.atomType.isAlkalineEarthMetal(); };
  AtomProxy.prototype.isNobleGas = function isNobleGas () { return this.atomType.isNobleGas(); };
  AtomProxy.prototype.isTransitionMetal = function isTransitionMetal () { return this.atomType.isTransitionMetal(); };
  AtomProxy.prototype.isPostTransitionMetal = function isPostTransitionMetal () { return this.atomType.isPostTransitionMetal(); };
  AtomProxy.prototype.isLanthanide = function isLanthanide () { return this.atomType.isLanthanide(); };
  AtomProxy.prototype.isActinide = function isActinide () { return this.atomType.isActinide(); };
  AtomProxy.prototype.getDefaultValence = function getDefaultValence () { return this.atomType.getDefaultValence(); };
  AtomProxy.prototype.getValenceList = function getValenceList () { return this.atomType.getValenceList(); };
  AtomProxy.prototype.getOuterShellElectronCount = function getOuterShellElectronCount () { return this.atomType.getOuterShellElectronCount(); };
  /**
   * Distance to another atom
   * @param  {AtomProxy} atom - the other atom
   * @return {Number} the distance
   */
  AtomProxy.prototype.distanceTo = function distanceTo (atom) {
      var taa = this.atomStore;
      var aaa = atom.atomStore;
      var ti = this.index;
      var ai = atom.index;
      var x = taa.x[ti] - aaa.x[ai];
      var y = taa.y[ti] - aaa.y[ai];
      var z = taa.z[ti] - aaa.z[ai];
      var distSquared = x * x + y * y + z * z;
      return Math.sqrt(distSquared);
  };
  /**
   * If connected to another atom
   * @param  {AtomProxy} atom - the other atom
   * @return {Boolean} flag
   */
  AtomProxy.prototype.connectedTo = function connectedTo (atom) {
      var taa = this.atomStore;
      var aaa = atom.atomStore;
      var ti = this.index;
      var ai = atom.index;
      if (taa.altloc && aaa.altloc) {
          var ta = taa.altloc[ti]; // use Uint8 value to compare
          var aa = aaa.altloc[ai]; // no need to convert to char
          // 0 is the Null character, 32 is the space character
          if (!(ta === 0 || aa === 0 || ta === 32 || aa === 32 || (ta === aa)))
              { return false; }
      }
      var x = taa.x[ti] - aaa.x[ai];
      var y = taa.y[ti] - aaa.y[ai];
      var z = taa.z[ti] - aaa.z[ai];
      var distSquared = x * x + y * y + z * z;
      // if( this.isCg() ) console.log( this.qualifiedName(), Math.sqrt( distSquared ), distSquared )
      if (distSquared < 48.0 && this.isCg())
          { return true; }
      if (isNaN(distSquared))
          { return false; }
      var d = this.covalent + atom.covalent;
      var d1 = d + 0.3;
      var d2 = d - 0.5;
      return distSquared < (d1 * d1) && distSquared > (d2 * d2);
  };
  /**
   * Set atom position from array
   * @param  {Array|TypedArray} array - input array
   * @param  {Integer} [offset] - the offset
   * @return {AtomProxy} this object
   */
  AtomProxy.prototype.positionFromArray = function positionFromArray (array, offset) {
          if ( offset === void 0 ) offset = 0;

      this.x = array[offset + 0];
      this.y = array[offset + 1];
      this.z = array[offset + 2];
      return this;
  };
  /**
   * Write atom position to array
   * @param  {Array|TypedArray} [array] - target array
   * @param  {Integer} [offset] - the offset
   * @return {Array|TypedArray} target array
   */
  AtomProxy.prototype.positionToArray = function positionToArray (array, offset) {
          if ( array === void 0 ) array = [];
          if ( offset === void 0 ) offset = 0;

      var index = this.index;
      var atomStore = this.atomStore;
      array[offset + 0] = atomStore.x[index];
      array[offset + 1] = atomStore.y[index];
      array[offset + 2] = atomStore.z[index];
      return array;
  };
  /**
   * Write atom position to vector
   * @param  {Vector3} [v] - target vector
   * @return {Vector3} target vector
   */
  AtomProxy.prototype.positionToVector3 = function positionToVector3 (v) {
      if (v === undefined)
          { v = new Vector3(); }
      v.x = this.x;
      v.y = this.y;
      v.z = this.z;
      return v;
  };
  /**
   * Set atom position from vector
   * @param  {Vector3} v - input vector
   * @return {AtomProxy} this object
   */
  AtomProxy.prototype.positionFromVector3 = function positionFromVector3 (v) {
      this.x = v.x;
      this.y = v.y;
      this.z = v.z;
      return this;
  };
  /**
   * Add vector to atom position
   * @param  {Vector3} v - input vector
   * @return {AtomProxy} this object
   */
  AtomProxy.prototype.positionAdd = function positionAdd (v) {
      this.x += v.x;
      this.y += v.y;
      this.z += v.z;
      return this;
  };
  /**
   * Subtract vector from atom position
   * @param  {Vector3} v - input vector
   * @return {AtomProxy} this object
   */
  AtomProxy.prototype.positionSub = function positionSub (v) {
      this.x -= v.x;
      this.y -= v.y;
      this.z -= v.z;
      return this;
  };
  /**
   * Get intra group/residue bonds
   * @param  {Boolean} firstOnly - immediately return the first connected atomIndex
   * @return {Integer[]|Integer|undefined} connected atomIndices
   */
  AtomProxy.prototype.getResidueBonds = function getResidueBonds (firstOnly) {
          if ( firstOnly === void 0 ) firstOnly = false;

      var residueAtomOffset = this.residueAtomOffset;
      var relativeIndex = this.index - this.residueAtomOffset;
      var bonds = this.residueType.getBonds(); // TODO
      var atomIndices1 = bonds.atomIndices1;
      var atomIndices2 = bonds.atomIndices2;
      var idx1, idx2, connectedAtomIndex;
      var connectedAtomIndices;
      if (!firstOnly)
          { connectedAtomIndices = []; }
      idx1 = atomIndices1.indexOf(relativeIndex);
      while (idx1 !== -1) {
          connectedAtomIndex = atomIndices2[idx1] + residueAtomOffset;
          if (connectedAtomIndices) {
              connectedAtomIndices.push(connectedAtomIndex);
              idx1 = atomIndices1.indexOf(relativeIndex, idx1 + 1);
          }
          else {
              return connectedAtomIndex;
          }
      }
      idx2 = atomIndices2.indexOf(relativeIndex);
      while (idx2 !== -1) {
          connectedAtomIndex = atomIndices1[idx2] + residueAtomOffset;
          if (connectedAtomIndices) {
              connectedAtomIndices.push(connectedAtomIndex);
              idx2 = atomIndices2.indexOf(relativeIndex, idx2 + 1);
          }
          else {
              return connectedAtomIndex;
          }
      }
      return connectedAtomIndices;
  };
  //
  AtomProxy.prototype.qualifiedName = function qualifiedName (noResname) {
          if ( noResname === void 0 ) noResname = false;

      var name = '';
      if (this.resname && !noResname)
          { name += '[' + this.resname + ']'; }
      if (this.resno !== undefined)
          { name += this.resno; }
      if (this.inscode)
          { name += '^' + this.inscode; }
      if (this.chainname)
          { name += ':' + this.chainname; }
      if (this.atomname)
          { name += '.' + this.atomname; }
      if (this.altloc)
          { name += '%' + this.altloc; }
      if (this.structure.modelStore.count > 1)
          { name += '/' + this.modelIndex; }
      return name;
  };
  /**
   * Clone object
   * @return {AtomProxy} cloned atom
   */
  AtomProxy.prototype.clone = function clone () {
      return new AtomProxy(this.structure, this.index);
  };
  AtomProxy.prototype.toObject = function toObject () {
      return {
          index: this.index,
          residueIndex: this.residueIndex,
          resname: this.resname,
          x: this.x,
          y: this.y,
          z: this.z,
          element: this.element,
          chainname: this.chainname,
          resno: this.resno,
          serial: this.serial,
          vdw: this.vdw,
          covalent: this.covalent,
          hetero: this.hetero,
          bfactor: this.bfactor,
          altloc: this.altloc,
          atomname: this.atomname,
          modelIndex: this.modelIndex
      };
  };

  Object.defineProperties( AtomProxy.prototype, prototypeAccessors$j );

  /**
   * @file Kdtree
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function euclideanDistSq(a, b) {
      var dx = a[0] - b[0];
      var dy = a[1] - b[1];
      var dz = a[2] - b[2];
      return dx * dx + dy * dy + dz * dz;
  }
  function euclideanDist(a, b) {
      return Math.sqrt(euclideanDistSq(a, b));
  }
  var pointArray = new Float32Array(3);
  var Kdtree = function Kdtree(structure, useSquaredDist) {
      if ( useSquaredDist === void 0 ) useSquaredDist = false;

      if (exports.Debug)
          { Log.time('Kdtree build'); }
      var metric = useSquaredDist ? euclideanDistSq : euclideanDist;
      var points = new Float32Array(structure.atomCount * 3);
      var atomIndices = new Uint32Array(structure.atomCount);
      var i = 0;
      structure.eachAtom(function (ap) {
          points[i + 0] = ap.x;
          points[i + 1] = ap.y;
          points[i + 2] = ap.z;
          atomIndices[i / 3] = ap.index;
          i += 3;
      });
      this.atomIndices = atomIndices;
      this.points = points;
      this.kdtree = new Kdtree$1(points, metric);
      if (exports.Debug)
          { Log.timeEnd('Kdtree build'); }
      // console.log("this.kdtree.verify()", this.kdtree.verify())
  };
  Kdtree.prototype.nearest = function nearest (point, maxNodes, maxDistance) {
      // Log.time( "Kdtree nearest" );
      if (point instanceof Vector3) {
          point.toArray(pointArray);
      }
      else if (point instanceof AtomProxy) {
          point.positionToArray(pointArray);
      }
      var nodeList = this.kdtree.nearest(pointArray, maxNodes, maxDistance);
      var indices = this.kdtree.indices;
      var nodes = this.kdtree.nodes;
      var atomIndices = this.atomIndices;
      var resultList = [];
      for (var i = 0, n = nodeList.length; i < n; ++i) {
          var d = nodeList[i];
          var nodeIndex = d[0];
          var dist = d[1];
          resultList.push({
              index: atomIndices[indices[nodes[nodeIndex]]],
              distance: dist
          });
      }
      // Log.timeEnd( "Kdtree nearest" );
      return resultList;
  };

  /**
   * @file Symmetry Constants
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var SymOpCode = {
      ' ': 'X',
      '!': 'Y',
      '#': 'Z',
      '$': '-X',
      '%': '-Y',
      '&': '-Z',
      "'": 'Y+1/2',
      '(': '1/2+X',
      ')': '1/2+Y',
      '*': '1/2-X',
      '+': '1/2+Z',
      ',': '1/2-Y',
      '-': '1/2-Z',
      '.': 'X+1/2',
      '/': 'Z+1/2',
      '0': '-X+1/2',
      '1': '-Y+1/2',
      '2': '-Z+1/2',
      '3': '1/4+X',
      '4': '1/4-Y',
      '5': '1/4+Z',
      '6': '1/4-X',
      '7': '1/4+Y',
      '8': '3/4-Y',
      '9': '3/4+Z',
      ':': '3/4+Y',
      ';': '3/4+X',
      '<': '3/4-X',
      '=': '1/4-Z',
      '>': '3/4-Z',
      '?': 'X-Y',
      '@': 'Y-X',
      'A': 'Z+1/3',
      'B': 'Z+2/3',
      'C': 'X+2/3',
      'D': 'Y+1/3',
      'E': '-Y+2/3',
      'F': 'X-Y+1/3',
      'G': 'Y-X+2/3',
      'H': '-X+1/3',
      'I': 'X+1/3',
      'J': 'Y+2/3',
      'K': '-Y+1/3',
      'L': 'X-Y+2/3',
      'M': 'Y-X+1/3',
      'N': '-X+2/3',
      'O': '2/3+X',
      'P': '1/3+Y',
      'Q': '1/3+Z',
      'R': '2/3-Y',
      'S': '1/3+X-Y',
      'T': '2/3+Y-X',
      'U': '1/3-X',
      'V': '2/3-X',
      'W': '1/3-Y',
      'X': '1/3-Z',
      'Y': '2/3+Y',
      'Z': '1/3+Y-X',
      '[': '2/3+X-Y',
      ']': '1/3+X',
      '^': '2/3+Z',
      '_': '2/3-Z',
      '`': '5/6+Z',
      'a': '1/6+Z',
      'b': '5/6-Z',
      'c': '1/6-Z',
      'd': 'Z+5/6',
      'e': 'Z+1/6',
      'f': 'Z+1/4',
      'g': '+Y'
  };
  // encoded, originally from CCP4 symop.lib
  var EncodedSymOp = {
      'P 1': ' !#',
      'P -1': ' !#$%&',
      'P 1 2 1': ' !#$!&',
      'P 1 21 1': " !#$'&",
      'C 1 2 1': ' !#$!&()#*)&',
      'P 1 m 1': ' !# %#',
      'P 1 c 1': ' !# %+',
      'C 1 m 1': ' !# %#()#(,#',
      'C 1 c 1': ' !# %+()#(,+',
      'P 1 2/m 1': ' !# %#$!&$%&',
      'P 1 21/m 1': ' !#$)&$%& ,#',
      'C 1 2/m 1': ' !# %#$!&$%&()#(,#*)&*,&',
      'P 1 2/c 1': ' !#$!-$%& %+',
      'P 1 21/c 1': ' !#$%&$)- ,+',
      'C 1 2/c 1': ' !#$!-$%& %+()#*)-*,&(,+',
      'P 2 2 2': ' !#$%#$!& %&',
      'P 2 2 21': ' !#$%+$!- %&',
      'P 21 21 2': ' !#$%#*)&(,&',
      'P 21 21 21': ' !#*%+$)-(,&',
      'C 2 2 21': ' !#$%+$!- %&()#*,+*)-(,&',
      'C 2 2 2': ' !#$%#$!& %&()#*,#*)&(,&',
      'F 2 2 2': ' !#$%#$!& %& )+$,+$)- ,-(!+*%+*!-(%-()#*,#*)&(,&',
      'I 2 2 2': " !#$%# %&$!&.'/01/.120'2",
      'I 21 21 21': ' !#*%+$)-(,&()+$,#*!& %-',
      'P m m 2': ' !#$%# %#$!#',
      'P m c 21': ' !#$%+ %+$!#',
      'P c c 2': ' !#$%# %+$!+',
      'P m a 2': ' !#$%#(%#*!#',
      'P c a 21': ' !#$%+(%#*!+',
      'P n c 2': ' !#$%# ,+$)+',
      'P m n 21': ' !#*%+(%+$!#',
      'P b a 2': ' !#$%#(,#*)#',
      'P n a 21': ' !#$%+(,#*)+',
      'P n n 2': ' !#$%#(,+*)+',
      'C m m 2': ' !#$%# %#$!#()#*,#(,#*)#',
      'C m c 21': ' !#$%+ %+$!#()#*,+(,+*)#',
      'C c c 2': ' !#$%# %+$!+()#*,#(,+*)+',
      'A m m 2': ' !#$%# %#$!# )+$,+ ,+$)+',
      'A b m 2': ' !#$%# ,#$)# )+$,+ %+$!+',
      'A m a 2': ' !#$%#(%#*!# )+$,+(,+*)+',
      'A b a 2': ' !#$%#(,#*)# )+$,+(%+*!+',
      'F m m 2': ' !#$%# %#$!# )+$,+ ,+$)+(!+*%+(%+*!+()#*,#(,#*)#',
      'F d d 2': ' !#$%#345675 )+$,+3896:9(!+*%+;49<79()#*,#;85<:5',
      'I m m 2': ' !#$%# %#$!#()+*,+(,+*)+',
      'I b a 2': ' !#$%#(,#*)#()+*,+ %+$!+',
      'I m a 2': ' !#$%#(%#*!#()+*,+ ,+$)+',
      'P 2/m 2/m 2/m': ' !#$%#$!& %&$%& !& %#$!#',
      'P 2/n 2/n 2/n': ' !#$%#$!& %&*,-()-(,+*)+',
      'P 2/c 2/c 2/m': ' !#$%#$!- %-$%& !& %+$!+',
      'P 2/b 2/a 2/n': ' !#$%#$!& %&*,&()&(,#*)#',
      'P 21/m 2/m 2/a': ' !#*%#$!&(%&$%&(!& %#*!#',
      'P 2/n 21/n 2/a': ' !#*%#*)- ,-$%&(!&(,+$)+',
      'P 2/m 2/n 21/a': ' !#*%+*!- %&$%&(!-(%+$!#',
      'P 21/c 2/c 2/a': ' !#*%#$!-(%-$%&(!& %+*!+',
      'P 21/b 21/a 2/m': ' !#$%#*)&(,&$%& !&(,#*)#',
      'P 21/c 21/c 2/n': ' !#*,#$)-(%-$%&()& ,+*!+',
      'P 2/b 21/c 21/m': ' !#$%+$)- ,&$%& !- ,+$)#',
      'P 21/n 21/n 2/m': ' !#$%#*)-(,-$%& !&(,+*)+',
      'P 21/m 21/m 2/n': " !#$%#*'&.,&*,&.'& %#$!#",
      'P 21/b 2/c 21/n': ' !#*,+$!-(,&$%&()- %+*)#',
      'P 21/b 21/c 21/a': ' !#*%+$)-(,&$%&(!- ,+*)#',
      'P 21/n 21/m 21/a': " !#0%/$'&.12$%&.!2 1#0'/",
      'C 2/m 2/c 21/m': ' !#$%+$!- %&$%& !- %+$!#()#*,+*)-(,&*,&()-(,+*)#',
      'C 2/m 2/c 21/a': ' !#$,+$)- %&$%& )- ,+$!#()#*%+*!-(,&*,&(!-(%+*)#',
      'C 2/m 2/m 2/m': ' !#$%#$!& %&$%& !& %#$!#()#*,#*)&(,&*,&()&(,#*)#',
      'C 2/c 2/c 2/m': ' !#$%#$!- %-$%& !& %+$!+()#*,#*)-(,-*,&()&(,+*)+',
      'C 2/m 2/m 2/a': ' !#$,#$)& %&$%& )& ,#$!#()#*%#*!&(,&*,&(!&(%#*)#',
      'C 2/c 2/c 2/a': ' !#*,#$!&(,&$,-(!- ,+*!+()#$%#*)& %&*%- )-(%+$)+',
      'F 2/m 2/m 2/m': ' !#$%#$!& %&$%& !& %#$!# )+$,+$)- ,-$,- )- ,+$)+(!+*%+*!-(%-*%-(!-(%+*!+()#*,#*)&(,&*,&()&(,#*)#',
      'F 2/d 2/d 2/d': ' !#$%#$!& %&64=37=345675 )+$,+$)- ,-68>3:>3896:9(!+*%+*!-(%-<4>;7>;49<79()#*,#*)&(,&<8=;:=;85<:5',
      'I 2/m 2/m 2/m': ' !#$%#$!& %&$%& !& %#$!#()+*,+*)-(,-*,-()-(,+*)+',
      'I 2/b 2/a 2/m': ' !#$%#*)&(,&$%& !&(,#*)#()+*,+$!- %-*,-()- %+$!+',
      'I 21/b 21/c 21/a': ' !#*%+$)-(,&$%&(!- ,+*)#()+$,#*!& %-*,- )&(%#$!+',
      'I 21/m 21/m 21/a': ' !#$,#$)& %&$%& )& ,#$!#()+*%+*!-(,-*,-(!-(%+*)+',
      'P 4': ' !#$%#% #!$#',
      'P 41': ' !#$%+% 5!$9',
      'P 42': ' !#$%#% +!$+',
      'P 43': ' !#$%+% 9!$5',
      'I 4': ' !#$%#% #!$#()+*,+,(+)*+',
      'I 41': ' !#*,+%(5)$9()+$%#, 9!*5',
      'P -4': ' !#$%#!$&% &',
      'I -4': ' !#$%#!$&% &()+*,+)*-,(-',
      'P 4/m': ' !#$%#% #!$#$%& !&!$&% &',
      'P 42/m': ' !#$%#% +!$+$%& !&!$-% -',
      'P 4/n': ' !#$%#,(#)*#*,&()&!$&% &',
      'P 42/n': ' !#$%#,(+)*+*,-()-!$&% &',
      'I 4/m': ' !#$%#% #!$#$%& !&!$&% &()+*,+,(+)*+*,-()-)*-,(-',
      'I 41/a': ' !#*,+%(5)$9$,=(!>!$&,(-()+$%#, 9!*5*%> )=)*-% &',
      'P 4 2 2': ' !#$%#% #!$#$!& %&! &%$&',
      'P 4 21 2': ' !#$%#,(#)*#*)&(,&! &%$&',
      'P 41 2 2': ' !#$%+% 5!$9$!& %-! >%$=',
      'P 41 21 2': ' !#$%+,(5)*9*)=(,>! &%$-',
      'P 42 2 2': ' !#$%#% +!$+$!& %&! -%$-',
      'P 42 21 2': ' !#$%#,(+)*+*)-(,-! &%$&',
      'P 43 2 2': ' !#$%+% 9!$5$!& %-! =%$>',
      'P 43 21 2': ' !#$%+,(9)*5*)>(,=! &%$-',
      'I 4 2 2': ' !#$%#% #!$#$!& %&! &%$&()+*,+,(+)*+*)-(,-)(-,*-',
      'I 41 2 2': ' !#*,+%(5)$9*!> ,=)(-%$&()+$%#, 9!*5$)=(%>! &,*-',
      'P 4 m m': ' !#$%#% #!$# %#$!#%$#! #',
      'P 4 b m': ' !#$%#% #!$#(,#*)#,*#)(#',
      'P 42 c m': ' !#$%#% +!$+ %+$!+%$#! #',
      'P 42 n m': ' !#$%#,(+)*+(,+*)+%$#! #',
      'P 4 c c': ' !#$%#% #!$# %+$!+%$+! +',
      'P 4 n c': ' !#$%#% #!$#(,+*)+,*+)(+',
      'P 42 m c': ' !#$%#% +!$+ %#$!#%$+! +',
      'P 42 b c': ' !#$%#% +!$+(,#*)#,*+)(+',
      'I 4 m m': ' !#$%#% #!$# %#$!#%$#! #()+*,+,(+)*+(,+*)+,*+)(+',
      'I 4 c m': ' !#$%#% #!$# %+$!+%$+! +()+*,+,(+)*+(,#*)#,*#)(#',
      'I 41 m d': ' !#*,+%(5)$9 %#*)+%*5) 9()+$%#, 9!*5(,+$!#,$9!(5',
      'I 41 c d': ' !#*,+%(5)$9 %+*)#%*9) 5()+$%#, 9!*5(,#$!+,$5!(9',
      'P -4 2 m': ' !#$%#% &!$&$!& %&%$#! #',
      'P -4 2 c': ' !#$%#% &!$&$!- %-%$+! +',
      'P -4 21 m': ' !#$%#% &!$&*)&(,&,*#)(#',
      'P -4 21 c': ' !#$%#% &!$&*)-(,-,*+)(+',
      'P -4 m 2': ' !#$%#!$&% & %#$!#! &%$&',
      'P -4 c 2': ' !#$%#% &!$& %+$!+! -%$-',
      'P -4 b 2': ' !#$%#% &!$&(,#*)#)(&,*&',
      'P -4 n 2': ' !#$%#% &!$&(,+*)+)(-,*-',
      'I -4 m 2': ' !#$%#% &!$& %#$!#! &%$&()+*,+,(-)*-(,+*)+)(-,*-',
      'I -4 c 2': ' !#$%#% &!$& %+$!+! -%$-()+*,+,(-)*-(,#*)#)(&,*&',
      'I -4 2 m': ' !#$%#% &!$&$!& %&%$#! #()+*,+,(-)*-*)-(,-,*+)(+',
      'I -4 2 d': ' !#$%#% &!$&*!>(%>,$9) 9()+*,+,(-)*-$)= ,=%*5!(5',
      'P 4/m 2/m 2/m': ' !#$%#% #!$#$!& %&! &%$&$%& !&!$&% & %#$!#%$#! #',
      'P 4/m 2/c 2/c': ' !#$%#% #!$#$!- %-! -%$-$%& !&!$&% & %+$!+%$+! +',
      'P 4/n 2/b 2/m': ' !#$%#% #!$#$!& %&! &%$&*,&()&)*&,(&(,#*)#,*#)(#',
      'P 4/n 2/n 2/c': ' !#$%#% #!$#$!& %&! &%$&*,-()-)*-,(-(,+*)+,*+)(+',
      'P 4/m 21/b 2/m': ' !#$%#% #!$#*)&(,&)(&,*&$%& !&!$&% &(,#*)#,*#)(#',
      'P 4/m 21/n 2/c': ' !#$%#% #!$#*)-(,-)(-,*-$%& !&!$&% &(,+*)+,*+)(+',
      'P 4/n 21/m 2/m': ' !#$%#,(#)*#*)&(,&! &%$&*,&()&!$&% & %#$!#,*#)(#',
      'P 4/n 2/c 2/c': ' !#$%#,(#)*#*)-(,-! -%$-*,&()&!$&% & %+$!+,*+)(+',
      'P 42/m 2/m 2/c': ' !#$%#% +!$+$!& %&! -%$-$%& !&!$-% - %#$!#%$+! +',
      'P 42/m 2/c 2/m': ' !#$%#% +!$+$!- %-! &%$&$%& !&!$-% - %+$!+%$#! #',
      'P 42/n 2/b 2/c': ' !#$%#,(+)*+$!- %-)(&,*&*,-()-!$&% &(,#*)#%$+! +',
      'P 42/n 2/n 2/m': ' !#$%#,(+)*+$!& %&)(-,*-*,-()-!$&% &(,+*)+%$#! #',
      'P 42/m 21/b 2/c': ' !#$%#% +!$+*)&(,&)(-,*-$%& !&!$-% -(,#*)#,*+)(+',
      'P 42/m 21/n 2/m': " !#$%#,./'*/*'-.,-! &%$&$%& !&'*-,.-.,/*'/%$#! #",
      'P 42/n 21/m 2/c': ' !#$%#,(+)*+*)-(,-! &%$&*,-()-!$&% & %#$!#,*+)(+',
      'P 42/n 21/c 2/m': ' !#$%#,(+)*+*)&(,&! -%$-*,-()-!$&% & %+$!+,*#)(#',
      'I 4/m 2/m 2/m': ' !#$%#% #!$#$!& %&! &%$&$%& !&!$&% & %#$!#%$#! #()+*,+,(+)*+*)-(,-)(-,*-*,-()-)*-,(-(,+*)+,*+)(+',
      'I 4/m 2/c 2/m': ' !#$%#% #!$#$!- %-! -%$-$%& !&!$&% & %+$!+%$+! +()+*,+,(+)*+*)&(,&)(&,*&*,-()-)*-,(-(,#*)#,*#)(#',
      'I 41/a 2/m 2/d': ' !#*,+%(5)$9*!> ,=)(-%$&$,=(!>!$&,(-(,+$!#,$9!(5()+$%#, 9!*5$)=(%>! &,*-*%> )=)*-% & %#*)+%*5) 9',
      'I 41/a 2/c 2/d': ' !#*,+%(5)$9*!= ,>)(&%$-$,=(!>!$&,(-(,#$!+,$5!(9()+$%#, 9!*5$)>(%=! -,*&*%> )=)*-% & %+*)#%*9) 5',
      'P 3': ' !#%?#@$#',
      'P 31': ' !#%?A@$B',
      'P 32': ' !#%?B@$A',
      'H 3': ' !#%?#@$#CDAEFAGHAIJBKLBMNB',
      'R 3': ' !## !!# ',
      'P -3': ' !#%?#@$#$%&!@&? &',
      'H -3': ' !#%?#@$#$%&!@&? &OPQRSQTUQVWXYZX[]X]Y^W[^ZV^UR_PT_SO_',
      'R -3': ' !## !!# $%&&$%%&$',
      'P 3 1 2': ' !#%?#@$#%$&@!& ?&',
      'P 3 2 1': ' !#%?#@$#! &?%&$@&',
      'P 31 1 2': ' !#%?Q@$^%$_@!X ?&',
      'P 31 2 1': ' !#%?A@$B! &?%_$@X',
      'P 32 1 2': ' !#%?^@$Q%$X@!_ ?&',
      'P 32 2 1': ' !#%?B@$A! &?%X$@_',
      'H 3 2': ' !#%?#@$#! &?%&$@&OPQRSQTUQY]X[WXVZX]Y^W[^ZV^PO_SR_UT_',
      'R 3 2': ' !## !!# %$&$&%&%$',
      'P 3 m 1': ' !#%?#@$#%$#@!# ?#',
      'P 3 1 m': ' !#%?#@$#! #?%#$@#',
      'P 3 c 1': ' !#%?#@$#%$+@!+ ?+',
      'P 3 1 c': ' !#%?#@$#! +?%+$@+',
      'H 3 m': ' !#%?#@$#%$#@!# ?#OPQRSQTUQRUQTPQOSQ]Y^W[^ZV^WV^ZY^][^',
      'R 3 m': ' !## !!# ! # #!#! ',
      'H 3 c': ' !#%?#@$#%$+@!+ ?+OPQRSQTUQRU`TP`OS`]Y^W[^ZV^WVaZYa][a',
      'R 3 c': " !## !!# '././'/'.",
      'P -3 1 2/m': ' !#%?#@$#%$&@!& ?&$%&!@&? &! #?%#$@#',
      'P -3 1 2/c': ' !#%?#@$#%$-@!- ?-$%&!@&? &! +?%+$@+',
      'P -3 2/m 1': ' !#%?#@$#! &?%&$@&$%&!@&? &%$#@!# ?#',
      'P -3 2/c 1': ' !#%?#@$#! -?%-$@-$%&!@&? &%$+@!+ ?+',
      'H -3 2/m': ' !#%?#@$#! &?%&$@&$%&!@&? &%$#@!# ?#OPQRSQTUQY]X[WXVZXVWXYZX[]XRUQTPQOSQ]Y^W[^ZV^PO_SR_UT_UR_PT_SO_WV^ZY^][^',
      'R -3 2/m': ' !## !!# %$&$&%&%$$%&&$%%&$! # #!#! ',
      'H -3 2/c': ' !#%?#@$#! -?%-$@-$%&!@&? &%$+@!+ ?+OPQRSQTUQY]b[WbVZbVWXYZX[]XRU`TP`OS`]Y^W[^ZV^POcSRcUTcUR_PT_SO_WVaZYa][a',
      'R -3 2/c': " !## !!# 102021210$%&&$%%&$'././'/'.",
      'P 6': ' !#%?#@$#$%#!@#? #',
      'P 61': ' !#%?A@$B$%/!@d? e',
      'P 65': ' !#%?B@$A$%/!@e? d',
      'P 62': ' !#%?^@$Q$%#!@^? Q',
      'P 64': ' !#%?Q@$^$%#!@Q? ^',
      'P 63': ' !#%?#@$#$%+!@+? +',
      'P -6': ' !#%?#@$# !&%?&@$&',
      'P 6/m': ' !#%?#@$#$%#!@#? #$%&!@&? & !&%?&@$&',
      'P 63/m': ' !#%?#@$#$%+!@+? +$%&!@&? & !-%?-@$-',
      'P 6 2 2': ' !#%?#@$#$%#!@#? #! &?%&$@&%$&@!& ?&',
      'P 61 2 2': ' !#%?Q@$^$%+!@`? a! X?%&$@_%$b@!- ?c',
      'P 65 2 2': ' !#%?^@$Q$%+!@a? `! _?%&$@X%$c@!- ?b',
      'P 62 2 2': ' !#%?^@$Q$%#!@^? Q! _?%&$@X%$_@!& ?X',
      'P 64 2 2': ' !#%?Q@$^$%#!@Q? ^! X?%&$@_%$X@!& ?_',
      'P 63 2 2': ' !#%?#@$#$%+!@+? +! &?%&$@&%$-@!- ?-',
      'P 6 m m': ' !#%?#@$#$%#!@#? #%$#@!# ?#! #?%#$@#',
      'P 6 c c': ' !#%?#@$#$%#!@#? #%$+@!+ ?+! +?%+$@+',
      'P 63 c m': ' !#%?#@$#$%+!@+? +%$+@!+ ?+! #?%#$@#',
      'P 63 m c': ' !#%?#@$#$%+!@+? +%$#@!# ?#! +?%+$@+',
      'P -6 m 2': ' !#%?#@$# !&%?&@$&%$#@!# ?#%$&@!& ?&',
      'P -6 c 2': ' !#%?#@$# !-%?-@$-%$+@!+ ?+%$&@!& ?&',
      'P -6 2 m': ' !#%?#@$# !&%?&@$&! &?%&$@&! #?%#$@#',
      'P -6 2 c': ' !#%?#@$# !-%?-@$-! &?%&$@&! +?%+$@+',
      'P 6/m 2/m 2/m': ' !#%?#@$#$%#!@#? #! &?%&$@&%$&@!& ?&$%&!@&? & !&@$&%?&%$#@!# ?#! #?%#$@#',
      'P 6/m 2/c 2/c': ' !#%?#@$#$%#!@#? #! -?%-$@-%$-@!- ?-$%&!@&? & !&@$&%?&%$+@!+ ?+! +?%+$@+',
      'P 63/m 2/c 2/m': ' !#%?#@$#$%+!@+? +! -?%-$@-%$&@!& ?&$%&!@&? & !-@$-%?-%$+@!+ ?+! #?%#$@#',
      'P 63/m 2/m 2/c': ' !#%?#@$#$%+!@+? +! &?%&$@&%$-@!- ?-$%&!@&? & !-@$-%?-%$#@!# ?#! +?%+$@+',
      'P 2 3': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ',
      'F 2 3': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%&  )+$,+$)- ,-#()#*,&*)&(,!+(%+*!-*%-((!+*%+*!-(%-+ )+$,-$)- ,)#(,#*)&*,&(()#*,#*)&(,&+(!+*%-*!-(%)+ ,+$)-$,- ',
      'I 2 3': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ()+*,+*)-(,-+()+*,-*)-(,)+(,+*)-*,-(',
      'P 21 3': ' !#*%+$)-(,&# !+*%-$)&(,!# %+*)-$,&(',
      'I 21 3': ' !#*%+$)-(,&# !+*%-$)&(,!# %+*)-$,&(()+$,#*!& %-+()#$,&*!- %)+(,#$!&*%- ',
      'P 2/m -3': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& $%& !& %#$!#&$%& !# %#$!%&$!& %# !#$',
      'P 2/n -3': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& *,-()-(,+*)+-*,-()+(,+*),-*)-(,+()+*',
      'F 2/m -3': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& $%& !& %#$!#&$%& !# %#$!%&$!& %# !#$ )+$,+$)- ,-#()#*,&*)&(,!+(%+*!-*%-($,- )- ,+$)+&*,&()#(,#*)%-*!-(%+(!+*(!+*%+*!-(%-+ )+$,-$)- ,)#(,#*)&*,&(*%-(!-(%+*!+-$,- )+ ,+$),&*)&(,#()#*()#*,#*)&(,&+(!+*%-*!-(%)+ ,+$)-$,- *,&()&(,#*)#-*%-(!+(%+*!,-$)- ,+ )+$',
      'F 2/d -3': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& 64=37=345675=64=375345674=67=3453756 )+$,+$)- ,-#()#*,&*)&(,!+(%+*!-*%-(68>3:>3896:9=<8=;:5;85<:4><7>;49;79<(!+*%+*!-(%-+ )+$,-$)- ,)#(,#*)&*,&(<4>;7>;49<79>68>3:93896:8=<:=;85;:5<()#*,#*)&(,&+(!+*%-*!-(%)+ ,+$)-$,- <8=;:=;8f<:f><4>;79;49<78>6:>3893:96',
      'I 2/m -3': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& $%& !& %#$!#&$%& !# %#$!%&$!& %# !#$()+*,+*)-(,-+()+*,-*)-(,)+(,+*)-*,-(*,-()-(,+*)+-*,-()+(,+*),-*)-(,+()+*',
      'P 21/a -3': ' !#*%+$)-(,&# !+*%-$)&(,!# %+*)-$,&($%&(!- ,+*)#&$%-(!+ ,#*)%&$!-(,+ )#*',
      'I 21/a -3': ' !#*%+$)-(,&# !+*%-$)&(,!# %+*)-$,&($%&(!- ,+*)#&$%-(!+ ,#*)%&$!-(,+ )#*()+$,#*g& %-+()#$,&*!- %)+(,#$!&*%- *,- )&(%#$!+-*,& )#(%+$!,-*)& %#(!+$',
      'P 4 3 2': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ! &%$&!$#% # #%$#!$&% &!#!$#% &! &%$',
      'P 42 3 2': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& )(-,*-)*+,(+(+,*+)*-,(-)+)*+,(-)(-,*',
      'F 4 3 2': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ! &%$&!$#% # #%$#!$&% &!#!$#% &! &%$ )+$,+$)- ,-#()#*,&*)&(,!+(%+*!-*%-(!(-%*-!*+%(+ +,$+)$-, -)#)*#,(&)(&,*(!+*%+*!-(%-+ )+$,-$)- ,)#(,#*)&*,&() -,$-)$+, +(#,*#)*&,(&)+!*+%(-!(-%*()#*,#*)&(,&+(!+*%-*!-(%)+ ,+$)-$,- )(&,*&)*#,(#(+%*+!*-%(-!+)$+, -) -,$',
      'F 41 3 2': ' !#$,+*)&(%-# !+$,&*)-(%!# ,+$)&*%-(:3>46=7<98;5;58<976=43>:97<58;>:3=46 )+$%#*!-(,&#()+*%&$!- ,!+(,#*)-$%& :;=4<>765839;94<5:6>83=79:6543>7;=8<(!+*,#$)- %&+ )#$%-*!&(,)#(%+*!&$,- 73=86>:<54;935469:<=8;>7576983=:;>4<()#*%+$!& ,-+(!#*,-$)& %)+ %#$!-*,&(7;>8<=:69435398657<>4;=:5:<94;=73>86',
      'I 4 3 2': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ! &%$&!$#% # #%$#!$&% &!#!$#% &! &%$()+*,+*)-(,-+()+*,-*)-(,)+(,+*)-*,-()(-,*-)*+,(+(+,*+)*-,(-)+)*+,(-)(-,*',
      'P 43 3 2': ' !#*%+$)-(,&# !+*%-$)&(,!# %+*)-$,&(7;>46=:<5839398<5:6=4;>75:<983>7;=46',
      'P 41 3 2': ' !#*%+$)-(,&# !+*%-$)&(,!# %+*)-$,&(:3=8<>7694;5;54697<>83=:97654;=:3>8<',
      'I 41 3 2': ' !#*%+$)-(,&# !+*%-$)&(,!# %+*)-$,&(:3=8<>7694;5;54697<>83=:97654;=:3>8<()+$,#*!& %-+()#$,&*!- %)+(,#$!&*%- 7;>46=:<5839398<5:6=4;>75:<983>7;=46',
      'P -4 3 m': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ! #%$#!$&% & #!$#%$&! &%#! #%$&!$&% ',
      'F -4 3 m': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ! #%$#!$&% & #!$#%$&! &%#! #%$&!$&%  )+$,+$)- ,-#()#*,&*)&(,!+(%+*!-*%-(!(+%*+!*-%(- +)$+,$-) -,#)(#,*&)*&,((!+*%+*!-(%-+ )+$,-$)- ,)#(,#*)&*,&() +,$+)$-, -(#)*#,*&)(&,+!(+%*-!*-%(()#*,#*)&(,&+(!+*%-*!-(%)+ ,+$)-$,- )(#,*#)*&,(&(+!*+%*-!(-%+) +,$-)$-, ',
      'I -4 3 m': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ! #%$#!$&% & #!$#%$&! &%#! #%$&!$&% ()+*,+*)-(,-+()+*,-*)-(,)+(,+*)-*,-()(+,*+)*-,(-(+)*+,*-)(-,+)(+,*-)*-,(',
      'P -4 3 n': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& )(+,*+)*-,(-(+)*+,*-)(-,+)(+,*-)*-,(',
      'F -4 3 c': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& )(+,*+)*-,(-(+)*+,*-)(-,+)(+,*-)*-,( )+$,+$)- ,-#()#*,&*)&(,!+(%+*!-*%-() #,$#)$&, &(#!*#%*&!(&%+! +%$-!$-% (!+*%+*!-(%-+ )+$,-$)- ,)#(,#*)&*,&(!(#%*#!*&%(& +!$+%$-! -%#) #,$&)$&, ()#*,#*)&(,&+(!+*%-*!-(%)+ ,+$)-$,- ! +%$+!$-% - #)$#,$&) &,#!(#%*&!*&%(',
      'I -4 3 d': ' !#*%+$)-(,&# !+*%-$)&(,!# %+*)-$,&(7354<9:6>8;=357<946>:;=857394<>:6=8;()+$,#*!& %-+()#$,&*!- %)+(,#$!&*%- :;98657<=43>;9:658<=73>49:;586=7<>43',
      'P 4/m -3 2/m': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ! &%$&!$#% # #%$#!$&% &!#!$#% &! &%$$%& !& %#$!#&$%& !# %#$!%&$!& %# !#$%$#! #% &!$&$&! &% #!$#%&% &!$#%$#! ',
      'P 4/n -3 2/n': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ! &%$&!$#% # #%$#!$&% &!#!$#% &! &%$*,-()-(,+*)+-*,-()+(,+*),-*)-(,+()+*,*+)(+,(-)*-*-)(-,(+)*+,-,(-)*+,*+)(',
      'P 42/m -3 2/n': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& )(-,*-)*+,(+(+,*+)*-,(-)+)*+,(-)(-,*$%& !& %#$!#&$%& !# %#$!%&$!& %# !#$,*+)(+,(-)*-*-)(-,(+)*+,-,(-)*+,*+)(',
      'P 42/n -3 2/m': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& )(-,*-)*+,(+(+,*+)*-,(-)+)*+,(-)(-,**,-()-(,+*)+-*,-()+(,+*),-*)-(,+()+*%$#! #% &!$&$&! &% #!$#%&% &!$#%$#! ',
      'F 4/m -3 2/m
      'F 4/m -3 2/c
      'F 41/d -3 2/m
      'F 41/d -3 2/c
      'I 4/m -3 2/m': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ! &%$&!$#% # #%$#!$&% &!#!$#% &! &%$$%& !& %#$!#&$%& !# %#$!%&$!& %# !#$%$#! #% &!$&$&! &% #!$#%&% &!$#%$#! ()+*,+*)-(,-+()+*,-*)-(,)+(,+*)-*,-()(-,*-)*+,(+(+,*+)*-,(-)+)*+,(-)(-,**,-()-(,+*)+-*,-()+(,+*),-*)-(,+()+*,*+)(+,(-)*-*-)(-,(+)*+,-,(-)*+,*+)(',
      'I 41/a -3 2/d': ' !#*%+$)-(,&# !+*%-$)&(,!# %+*)-$,&(:3=8<>7694;5;54697<>83=:97654;=:3>8<$%&(!- ,+*)#&$%-(!+ ,#*)%&$!-(,+ )#*4<97358;=:6>6>:;=8357<94=8;>:694<573()+$,#*!& %-+()#$,&*!- %)+(,#$!&*%- 7;>46=:<5839398<5:6=4;>75:<983>7;=46*,- )&(%#$!+-*,& )#(%+$!,-*)& %#(!+$865:;943>7<=<=73>4;9:658>43=7<5869:;',
      'P 1 1 2': ' !#$%#',
      'P 1 1 21': ' !#$%+',
      'B 1 1 2': ' !#$%#(g+*%+',
      'A 1 2 1': ' !#$!& )+$)-',
      'C 1 21 1': ' !#$)&()#*!&',
      'I 1 2 1': " !#$!&.'/0'2",
      'I 1 21 1': " !#$)&.'/0!-",
      'P 1 1 m': ' !# !&',
      'P 1 1 b': ' !# )&',
      'B 1 1 m': ' !# !&(!+(!-',
      'B 1 1 b': ' !# )&(!+()-',
      'P 1 1 2/m': ' !# !&$%#$%&',
      'P 1 1 21/m': ' !#$%+$%& !-',
      'B 1 1 2/m': ' !# !&$%#$%&(!+(!-*%+*%-',
      'P 1 1 2/b': ' !#$,#$%& )&',
      'P 1 1 21/b': ' !#$%&$,+ )-',
      'B 1 1 2/b': ' !#$,#$%& )&(!+*,+*%-()-',
      'P 21 2 2': ' !#$!&(%&*%#',
      'P 2 21 2': ' !# ,&$)&$%#',
      'P 21 21 2 (a)': " !#*,#.%&$'&",
      'P 21 2 21': ' !#$!&(%-*%+',
      'P 2 21 21': ' !# %&$)-$,+',
      'C 2 2 21a)': ' !#*%+(,&$)-()#$,+ %&*!-',
      'C 2 2 2a': " !#*,#.%&$'&()#$%# ,&*!&",
      'F 2 2 2a': " !#*,#.%&$'& '/*%/.12$!2.!/$,/ %20'2.'#$%# 1&0!&",
      'I 2 2 2a': " !#*,#.%&$'&()+$%+*!- ,-",
      'P 21/m 21/m 2/n a': " !#*,#$)&(%&$%&.'& ,#*!#",
      'P 42 21 2a': " !#*,#%.+'$+$'&.%&! -,*-",
      'I 2 3a': " !#*,#.%&$'&!# ,- '&$%/$# !-*!/$%&.%()+$%+ ,-*!-)+(%&(!-*,#*+()&$)#*,- ,"
  };

  /**
   * @file Symmetry Utils
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var reInteger = /^[1-9]$/;
  function getSymmetryOperations(spacegroup) {
      var encodedSymopList = EncodedSymOp[spacegroup];
      var matrixDict = {};
      if (encodedSymopList === undefined) {
          console.warn(("spacegroup '" + spacegroup + "' not found in symop library"));
          return matrixDict;
      }
      var symopList = [];
      for (var i = 0, il = encodedSymopList.length; i < il; i += 3) {
          var symop = [];
          for (var j = 0; j < 3; ++j) {
              symop.push(SymOpCode[encodedSymopList[i + j]]);
          }
          symopList.push(symop);
      }
      symopList.forEach(function (symop) {
          var row = 0;
          var matrix = new Matrix4().set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1);
          var me = matrix.elements;
          matrixDict[symop.toString()] = matrix;
          symop.forEach(function (elm) {
              var negate = false;
              var denominator = false;
              for (var i = 0, n = elm.length; i < n; ++i) {
                  var c = elm[i];
                  if (c === '-') {
                      negate = true;
                  }
                  else if (c === '+') {
                      negate = false;
                  }
                  else if (c === '/') {
                      denominator = true;
                  }
                  else if (c === 'X') {
                      me[0 + row] = negate ? -1 : 1;
                  }
                  else if (c === 'Y') {
                      me[4 + row] = negate ? -1 : 1;
                  }
                  else if (c === 'Z') {
                      me[8 + row] = negate ? -1 : 1;
                  }
                  else if (reInteger.test(c)) {
                      var integer = parseInt(c);
                      if (denominator) {
                          me[12 + row] /= integer;
                      }
                      else {
                          me[12 + row] = integer;
                      }
                  }
                  else {
                      Log.warn(("getSymmetryOperations: unknown token '" + c + "'"));
                  }
              }
              row += 1;
          });
      });
      return matrixDict;
  }

  /**
   * @file Assembly
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function selectionFromChains(chainList) {
      var sele = '';
      if (chainList.length > 0) {
          sele = ':' + uniqueArray(chainList).join(' OR :');
      }
      return new Selection(sele);
  }
  /**
   * Assembly of transformed parts of a {@link Structure}
   */
  var Assembly = function Assembly(name) {
      if ( name === void 0 ) name = '';

      this.name = name;
      this.partList = [];
  };

  var prototypeAccessors$i = { type: { configurable: true } };
  prototypeAccessors$i.type.get = function () { return 'Assembly'; };
  /**
   * Add transformed parts to the assembly
   * @example
   * var m1 = new NGL.Matrix4().set( ... );
   * var m2 = new NGL.Matrix4().set( ... );
   * var assembly = new NGL.Assembly( "myAssembly" );
   * // add part that transforms chain 'A' and 'B' using matrices `m1` and `m2`
   * assembly.addPart( [ m1, m2 ], [ "A", "B" ] )
   *
   * @param {Matrix4[]} matrixList - array of 4x4 transformation matrices
   * @param {String[]} chainList - array of chain names
   * @return {AssemblyPart} the added assembly part
   */
  Assembly.prototype.addPart = function addPart (matrixList, chainList) {
      var part = new AssemblyPart(matrixList, chainList);
      this.partList.push(part);
      return part;
  };
  /**
   * Get the number of atom for a given structure
   * @param  {Structure} structure - the given structure
   * @return {Integer} number of atoms in the assembly
   */
  Assembly.prototype.getAtomCount = function getAtomCount (structure) {
      return this.partList.reduce(function (count, part) { return count + part.getAtomCount(structure); }, 0);
  };
  /**
   * Get the number of residues for a given structure
   * @param  {Structure} structure - the given structure
   * @return {Integer} number of residues in the assembly
   */
  Assembly.prototype.getResidueCount = function getResidueCount (structure) {
      return this.partList.reduce(function (count, part) { return count + part.getResidueCount(structure); }, 0);
  };
  /**
   * Get number of instances the assembly will produce, i.e.
   * the number of transformations performed by the assembly
   * @return {Integer} number of instances
   */
  Assembly.prototype.getInstanceCount = function getInstanceCount () {
      var instanceCount = 0;
      this.partList.forEach(function (part) {
          instanceCount += part.matrixList.length;
      });
      return instanceCount;
  };
  /**
   * Determine if the assembly is the full and untransformed structure
   * @param  {Structure}  structure - the given structure
   * @return {Boolean} whether the assembly is identical to the structure
   */
  Assembly.prototype.isIdentity = function isIdentity (structure) {
      if (this.partList.length !== 1)
          { return false; }
      var part = this.partList[0];
      if (part.matrixList.length !== 1)
          { return false; }
      var identityMatrix = new Matrix4();
      if (!identityMatrix.equals(part.matrixList[0]))
          { return false; }
      var structureChainList = [];
      structure.eachChain(function (cp) {
          structureChainList.push(cp.chainname);
      });
      structureChainList = uniqueArray(structureChainList);
      if (part.chainList.length !== structureChainList.length)
          { return false; }
      return true;
  };
  Assembly.prototype.getBoundingBox = function getBoundingBox (structure) {
      var boundingBox = new Box3();
      this.partList.forEach(function (part) {
          var partBox = part.getBoundingBox(structure);
          boundingBox.expandByPoint(partBox.min);
          boundingBox.expandByPoint(partBox.max);
      });
      return boundingBox;
  };
  Assembly.prototype.getCenter = function getCenter (structure) {
      return this.getBoundingBox(structure).getCenter(new Vector3());
  };
  Assembly.prototype.getSelection = function getSelection () {
      var chainList = [];
      this.partList.forEach(function (part) {
          chainList = chainList.concat(part.chainList);
      });
      return selectionFromChains(chainList);
  };

  Object.defineProperties( Assembly.prototype, prototypeAccessors$i );
  var AssemblyPart = function AssemblyPart(matrixList, chainList) {
      if ( matrixList === void 0 ) matrixList = [];
      if ( chainList === void 0 ) chainList = [];

      this.matrixList = matrixList;
      this.chainList = chainList;
  };

  var prototypeAccessors$1$1 = { type: { configurable: true } };
  prototypeAccessors$1$1.type.get = function () { return 'AssemblyPart'; };
  AssemblyPart.prototype._getCount = function _getCount (structure, propertyName) {
          var this$1$1 = this;

      var count = 0;
      structure.eachChain(function (cp) {
          if (this$1$1.chainList.length === 0 || this$1$1.chainList.includes(cp.chainname)) {
              count += cp[propertyName];
          }
      });
      return this.matrixList.length * count;
  };
  AssemblyPart.prototype.getAtomCount = function getAtomCount (structure) {
      return this._getCount(structure, 'atomCount');
  };
  AssemblyPart.prototype.getResidueCount = function getResidueCount (structure) {
      return this._getCount(structure, 'residueCount');
  };
  AssemblyPart.prototype.getBoundingBox = function getBoundingBox (structure) {
      var partBox = new Box3();
      var instanceBox = new Box3();
      var selection = this.getSelection();
      var structureBox = structure.getBoundingBox(selection);
      this.matrixList.forEach(function (matrix) {
          instanceBox.copy(structureBox).applyMatrix4(matrix);
          partBox.expandByPoint(instanceBox.min);
          partBox.expandByPoint(instanceBox.max);
      });
      return partBox;
  };
  AssemblyPart.prototype.getSelection = function getSelection () {
      return selectionFromChains(this.chainList);
  };
  AssemblyPart.prototype.getView = function getView (structure) {
      var selection = this.getSelection();
      if (selection) {
          return structure.getView(selection);
      }
      else {
          return structure;
      }
  };
  AssemblyPart.prototype.getInstanceList = function getInstanceList () {
      var instanceList = [];
      for (var j = 0, jl = this.matrixList.length; j < jl; ++j) {
          instanceList.push({
              id: j + 1,
              name: j,
              matrix: this.matrixList[j]
          });
      }
      return instanceList;
  };

  Object.defineProperties( AssemblyPart.prototype, prototypeAccessors$1$1 );

  /**
   * @file Structure Builder
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var StructureBuilder = function StructureBuilder(structure) {
      this.structure = structure;
      this.currentModelindex = null;
      this.currentChainid = null;
      this.currentResname = null;
      this.currentResno = null;
      this.currentInscode = undefined;
      this.currentHetero = null;
      this.previousResname = '';
      this.previousHetero = null;
      this.ai = -1;
      this.ri = -1;
      this.ci = -1;
      this.mi = -1;
  };
  StructureBuilder.prototype.addResidueType = function addResidueType (ri) {
      var atomStore = this.structure.atomStore;
      var residueStore = this.structure.residueStore;
      var residueMap = this.structure.residueMap;
      var count = residueStore.atomCount[ri];
      var offset = residueStore.atomOffset[ri];
      var atomTypeIdList = new Array(count);
      for (var i = 0; i < count; ++i) {
          atomTypeIdList[i] = atomStore.atomTypeId[offset + i];
      }
      residueStore.residueTypeId[ri] = residueMap.add(this.previousResname, atomTypeIdList, this.previousHetero // TODO
      );
  };
  StructureBuilder.prototype.addAtom = function addAtom (modelindex, chainname, chainid, resname, resno, hetero, sstruc, inscode) {
      var atomStore = this.structure.atomStore;
      var residueStore = this.structure.residueStore;
      var chainStore = this.structure.chainStore;
      var modelStore = this.structure.modelStore;
      var addModel = false;
      var addChain = false;
      var addResidue = false;
      if (this.currentModelindex !== modelindex) {
          addModel = true;
          addChain = true;
          addResidue = true;
          this.mi += 1;
          this.ci += 1;
          this.ri += 1;
      }
      else if (this.currentChainid !== chainid) {
          addChain = true;
          addResidue = true;
          this.ci += 1;
          this.ri += 1;
      }
      else if (this.currentResno !== resno || this.currentResname !== resname || this.currentInscode !== inscode) {
          addResidue = true;
          this.ri += 1;
      }
      this.ai += 1;
      if (addModel) {
          modelStore.growIfFull();
          modelStore.chainOffset[this.mi] = this.ci;
          modelStore.chainCount[this.mi] = 0;
          modelStore.count += 1;
          chainStore.modelIndex[this.ci] = this.mi;
      }
      if (addChain) {
          chainStore.growIfFull();
          chainStore.setChainname(this.ci, chainname);
          chainStore.setChainid(this.ci, chainid);
          chainStore.residueOffset[this.ci] = this.ri;
          chainStore.residueCount[this.ci] = 0;
          chainStore.count += 1;
          chainStore.modelIndex[this.ci] = this.mi;
          modelStore.chainCount[this.mi] += 1;
          residueStore.chainIndex[this.ri] = this.ci;
      }
      if (addResidue) {
          this.previousResname = this.currentResname;
          this.previousHetero = this.currentHetero;
          if (this.ri > 0)
              { this.addResidueType(this.ri - 1); }
          residueStore.growIfFull();
          residueStore.resno[this.ri] = resno;
          if (sstruc !== undefined) {
              residueStore.sstruc[this.ri] = sstruc.charCodeAt(0);
          }
          if (inscode !== undefined) {
              residueStore.inscode[this.ri] = inscode.charCodeAt(0);
          }
          residueStore.atomOffset[this.ri] = this.ai;
          residueStore.atomCount[this.ri] = 0;
          residueStore.count += 1;
          residueStore.chainIndex[this.ri] = this.ci;
          chainStore.residueCount[this.ci] += 1;
      }
      atomStore.count += 1;
      atomStore.residueIndex[this.ai] = this.ri;
      residueStore.atomCount[this.ri] += 1;
      this.currentModelindex = modelindex;
      this.currentChainid = chainid;
      this.currentResname = resname;
      this.currentResno = resno;
      this.currentInscode = inscode;
      this.currentHetero = hetero;
  };
  StructureBuilder.prototype.finalize = function finalize () {
      this.previousResname = this.currentResname;
      this.previousHetero = this.currentHetero;
      if (this.ri > -1)
          { this.addResidueType(this.ri); }
  };

  /**
   * @file Structure Utils
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function assignSecondaryStructure(structure, secStruct) {
      if (!secStruct)
          { return; }
      if (exports.Debug)
          { Log.time('assignSecondaryStructure'); }
      var chainnames = [];
      structure.eachModel(function (mp) {
          mp.eachChain(function (cp) {
              chainnames.push(cp.chainname);
          });
      });
      var chainnamesSorted = chainnames.slice().sort();
      var chainnamesIndex = [];
      chainnamesSorted.forEach(function (c) {
          chainnamesIndex.push(chainnames.indexOf(c));
      });
      // helix assignment
      var helices = secStruct.helices.filter(function (h) {
          return binarySearchIndexOf(chainnamesSorted, h[0]) >= 0;
      });
      helices.sort(function (h1, h2) {
          var c1 = h1[0];
          var c2 = h2[0];
          var r1 = h1[1];
          var r2 = h2[1];
          if (c1 === c2) {
              if (r1 === r2) {
                  return 0;
              }
              else {
                  return r1 < r2 ? -1 : 1;
              }
          }
          else {
              var idx1 = binarySearchIndexOf(chainnamesSorted, c1);
              var idx2 = binarySearchIndexOf(chainnamesSorted, c2);
              return chainnamesIndex[idx1] < chainnamesIndex[idx2] ? -1 : 1;
          }
      });
      var residueStore = structure.residueStore;
      structure.eachModel(function (mp) {
          var i = 0;
          var n = helices.length;
          if (n === 0)
              { return; }
          var helix = helices[i];
          var helixRun = false;
          var done = false;
          mp.eachChain(function (cp) {
              var chainChange = false;
              if (cp.chainname === helix[0]) {
                  var count = cp.residueCount;
                  var offset = cp.residueOffset;
                  var end = offset + count;
                  for (var j = offset; j < end; ++j) {
                      if (residueStore.resno[j] === helix[1] && // resnoBeg
                          residueStore.getInscode(j) === helix[2] // inscodeBeg
                      ) {
                          helixRun = true;
                      }
                      if (helixRun) {
                          residueStore.sstruc[j] = helix[6];
                          if (residueStore.resno[j] === helix[4] && // resnoEnd
                              residueStore.getInscode(j) === helix[5] // inscodeEnd
                          ) {
                              helixRun = false;
                              i += 1;
                              if (i < n) {
                                  // must look at previous residues as
                                  // residues may not be ordered by resno
                                  j = offset - 1;
                                  helix = helices[i];
                                  chainChange = cp.chainname !== helix[0];
                              }
                              else {
                                  done = true;
                              }
                          }
                      }
                      if (chainChange || done)
                          { return; }
                  }
              }
          });
      });
      // sheet assignment
      var sheets = secStruct.sheets.filter(function (s) {
          return binarySearchIndexOf(chainnamesSorted, s[0]) >= 0;
      });
      sheets.sort(function (s1, s2) {
          var c1 = s1[0];
          var c2 = s2[0];
          if (c1 === c2)
              { return 0; }
          var idx1 = binarySearchIndexOf(chainnamesSorted, c1);
          var idx2 = binarySearchIndexOf(chainnamesSorted, c2);
          return chainnamesIndex[idx1] < chainnamesIndex[idx2] ? -1 : 1;
      });
      var strandCharCode = 'e'.charCodeAt(0);
      structure.eachModel(function (mp) {
          var i = 0;
          var n = sheets.length;
          if (n === 0)
              { return; }
          var sheet = sheets[i];
          var sheetRun = false;
          var done = false;
          mp.eachChain(function (cp) {
              var chainChange = false;
              if (cp.chainname === sheet[0]) {
                  var count = cp.residueCount;
                  var offset = cp.residueOffset;
                  var end = offset + count;
                  for (var j = offset; j < end; ++j) {
                      if (residueStore.resno[j] === sheet[1] && // resnoBeg
                          residueStore.getInscode(j) === sheet[2] // inscodeBeg
                      ) {
                          sheetRun = true;
                      }
                      if (sheetRun) {
                          residueStore.sstruc[j] = strandCharCode;
                          if (residueStore.resno[j] === sheet[4] && // resnoEnd
                              residueStore.getInscode(j) === sheet[5] // inscodeEnd
                          ) {
                              sheetRun = false;
                              i += 1;
                              if (i < n) {
                                  // must look at previous residues as
                                  // residues may not be ordered by resno
                                  j = offset - 1;
                                  sheet = sheets[i];
                                  chainChange = cp.chainname !== sheet[0];
                              }
                              else {
                                  done = true;
                              }
                          }
                      }
                      if (chainChange || done)
                          { return; }
                  }
              }
          });
      });
      if (exports.Debug)
          { Log.timeEnd('assignSecondaryStructure'); }
  }
  var calculateSecondaryStructure = (function () {
      // Implementation for proteins based on "pv"
      //
      // assigns secondary structure information based on a simple and very fast
      // algorithm published by Zhang and Skolnick in their TM-align paper.
      // Reference:
      //
      // TM-align: a protein structure alignment algorithm based on the Tm-score
      // (2005) NAR, 33(7) 2302-2309
      var zhangSkolnickSS = function (polymer, i, distances, delta) {
          var structure = polymer.structure;
          var offset = polymer.residueIndexStart;
          var rp1 = structure.getResidueProxy();
          var rp2 = structure.getResidueProxy();
          var ap1 = structure.getAtomProxy();
          var ap2 = structure.getAtomProxy();
          for (var j = Math.max(0, i - 2); j <= i; ++j) {
              for (var k = 2; k < 5; ++k) {
                  if (j + k >= polymer.residueCount) {
                      continue;
                  }
                  rp1.index = offset + j;
                  rp2.index = offset + j + k;
                  ap1.index = rp1.traceAtomIndex;
                  ap2.index = rp2.traceAtomIndex;
                  var d = ap1.distanceTo(ap2);
                  if (Math.abs(d - distances[k - 2]) > delta) {
                      return false;
                  }
              }
          }
          return true;
      };
      var isHelical = function (polymer, i) {
          var helixDistances = [5.45, 5.18, 6.37];
          var helixDelta = 2.1;
          return zhangSkolnickSS(polymer, i, helixDistances, helixDelta);
      };
      var isSheet = function (polymer, i) {
          var sheetDistances = [6.1, 10.4, 13.0];
          var sheetDelta = 1.42;
          return zhangSkolnickSS(polymer, i, sheetDistances, sheetDelta);
      };
      var proteinPolymer = function (p) {
          var residueStore = p.residueStore;
          var offset = p.residueIndexStart;
          for (var i = 0, il = p.residueCount; i < il; ++i) {
              var sstruc = 'c';
              if (isHelical(p, i)) {
                  sstruc = 'h';
              }
              else if (isSheet(p, i)) {
                  sstruc = 'e';
              }
              residueStore.sstruc[offset + i] = sstruc.charCodeAt(0);
          }
      };
      var cgPolymer = function (p) {
          var localAngle = 20;
          var centerDist = 2.0;
          var residueStore = p.residueStore;
          var offset = p.residueIndexStart;
          var helixbundle = new Helixbundle(p);
          var pos = helixbundle.position;
          var c1 = new Vector3();
          var c2 = new Vector3();
          for (var i = 0, il = p.residueCount; i < il; ++i) {
              c1.fromArray(pos.center, i * 3); // TODO
              c2.fromArray(pos.center, i * 3 + 3); // TODO
              var d = c1.distanceTo(c2);
              if (d < centerDist && d > 1.0 && pos.bending[i] < localAngle) {
                  residueStore.sstruc[offset + i] = 'h'.charCodeAt(0);
                  residueStore.sstruc[offset + i + 1] = 'h'.charCodeAt(0);
              }
          }
      };
      return function calculateSecondaryStructure(structure) {
          if (exports.Debug)
              { Log.time('calculateSecondaryStructure'); }
          structure.eachPolymer(function (p) {
              // assign secondary structure
              if (p.residueCount < 4)
                  { return; }
              if (p.isCg()) {
                  cgPolymer(p);
              }
              else if (p.isProtein()) {
                  proteinPolymer(p);
              }
              else {
                  return;
              }
              // set lone secondary structure assignments to "c"
              var prevSstruc;
              var sstrucCount = 0;
              p.eachResidue(function (r) {
                  if (r.sstruc === prevSstruc) {
                      sstrucCount += 1;
                  }
                  else {
                      if (sstrucCount === 1) {
                          r.index -= 1;
                          r.sstruc = 'c';
                      }
                      sstrucCount = 1;
                      prevSstruc = r.sstruc;
                  }
              });
          });
          if (exports.Debug)
              { Log.timeEnd('calculateSecondaryStructure'); }
      };
  }());
  // const ChainnameAlphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" +
  //                           "abcdefghijklmnopqrstuvwxyz" +
  //                           "0123456789";
  var ChainnameAlphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  function getChainname(index) {
      var n = ChainnameAlphabet.length;
      var j = index;
      var k = 0;
      var chainname = ChainnameAlphabet[j % n];
      while (j >= n) {
          j = Math.floor(j / n);
          chainname += ChainnameAlphabet[j % n];
          k += 1;
      }
      if (k >= 5) {
          Log.warn('chainname overflow');
      }
      return chainname;
  }
  function calculateChainnames(structure, useExistingBonds) {
      if ( useExistingBonds === void 0 ) useExistingBonds = false;

      if (exports.Debug)
          { Log.time('calculateChainnames'); }
      var doAutoChainName = true;
      structure.eachChain(function (c) {
          if (c.chainname)
              { doAutoChainName = false; }
      });
      if (doAutoChainName) {
          var modelStore = structure.modelStore;
          var chainStore = structure.chainStore;
          var residueStore = structure.residueStore;
          var addChain = function (mIndex, chainname, rOffset, rCount) {
              var ci = chainStore.count;
              for (var i = 0; i < rCount; ++i) {
                  residueStore.chainIndex[rOffset + i] = ci;
              }
              chainStore.growIfFull();
              chainStore.modelIndex[ci] = mIndex;
              chainStore.setChainname(ci, chainname);
              chainStore.setChainid(ci, chainname);
              chainStore.residueOffset[ci] = rOffset;
              chainStore.residueCount[ci] = rCount;
              chainStore.count += 1;
              modelStore.chainCount[mIndex] += 1;
          };
          var ap1 = structure.getAtomProxy();
          var ap2 = structure.getAtomProxy();
          var i = 0;
          var mi = 0;
          var rStart = 0;
          var rEnd = 0;
          var chainData = [];
          if (residueStore.count === 1) {
              chainData.push({
                  mIndex: 0,
                  chainname: 'A',
                  rStart: 0,
                  rCount: 1
              });
          }
          else {
              structure.eachResidueN(2, function (rp1, rp2) {
                  var newChain = false;
                  var bbType1 = rp1.backboneType;
                  var bbType2 = rp2.backboneType;
                  var bbTypeUnk = UnknownBackboneType;
                  rEnd = rp1.index;
                  if (rp1.modelIndex !== rp2.modelIndex) {
                      newChain = true;
                  }
                  else if (rp1.moleculeType !== rp2.moleculeType) {
                      newChain = true;
                  }
                  else if (bbType1 !== bbTypeUnk && bbType1 === bbType2) {
                      ap1.index = rp1.backboneEndAtomIndex;
                      ap2.index = rp2.backboneStartAtomIndex;
                      if (useExistingBonds) {
                          newChain = !ap1.hasBondTo(ap2);
                      }
                      else {
                          newChain = !ap1.connectedTo(ap2);
                      }
                  }
                  // current chain goes to end of the structure
                  if (!newChain && rp2.index === residueStore.count - 1) {
                      newChain = true;
                      rEnd = rp2.index;
                  }
                  if (newChain) {
                      chainData.push({
                          mIndex: mi,
                          chainname: getChainname(i),
                          rStart: rStart,
                          rCount: rEnd - rStart + 1
                      });
                      i += 1;
                      if (rp1.modelIndex !== rp2.modelIndex) {
                          i = 0;
                          mi += 1;
                      }
                      // new chain for the last residue of the structure
                      if (rp2.index === residueStore.count - 1 && rEnd !== rp2.index) {
                          chainData.push({
                              mIndex: mi,
                              chainname: getChainname(i),
                              rStart: residueStore.count - 1,
                              rCount: 1
                          });
                      }
                      rStart = rp2.index;
                      rEnd = rp2.index;
                  }
              });
          }
          //
          chainStore.count = 0;
          chainData.forEach(function (d) {
              addChain(d.mIndex, d.chainname, d.rStart, d.rCount);
          });
          var chainOffset = 0;
          structure.eachModel(function (mp) {
              modelStore.chainOffset[mp.index] = chainOffset;
              modelStore.chainCount[mp.index] -= 1;
              chainOffset += modelStore.chainCount[mp.index];
          });
      }
      if (exports.Debug)
          { Log.timeEnd('calculateChainnames'); }
  }
  function calculateBonds(structure) {
      if (exports.Debug)
          { Log.time('calculateBonds'); }
      calculateBondsWithin(structure);
      calculateBondsBetween(structure);
      if (exports.Debug)
          { Log.timeEnd('calculateBonds'); }
  }
  var BondOrderTable = {
      'HIS|CD2|CG': 2,
      'HIS|CE1|ND1': 2,
      'ARG|CZ|NH2': 2,
      'PHE|CE1|CZ': 2,
      'PHE|CD2|CE2': 2,
      'PHE|CD1|CG': 2,
      'TRP|CD1|CG': 2,
      'TRP|CD2|CE2': 2,
      'TRP|CE3|CZ3': 2,
      'TRP|CH2|CZ2': 2,
      'ASN|CG|OD1': 2,
      'GLN|CD|OE1': 2,
      'TYR|CD1|CG': 2,
      'TYR|CD2|CE2': 2,
      'TYR|CE1|CZ': 2,
      'ASP|CG|OD1': 2,
      'GLU|CD|OE1': 2,
      'G|C8|N7': 2,
      'G|C4|C5': 2,
      'G|C2|N3': 2,
      'G|C6|O6': 2,
      'C|C4|N3': 2,
      'C|C5|C6': 2,
      'C|C2|O2': 2,
      'A|C2|N3': 2,
      'A|C6|N1': 2,
      'A|C4|C5': 2,
      'A|C8|N7': 2,
      'U|C5|C6': 2,
      'U|C2|O2': 2,
      'U|C4|O4': 2,
      'DG|C8|N7': 2,
      'DG|C4|C5': 2,
      'DG|C2|N3': 2,
      'DG|C6|O6': 2,
      'DC|C4|N3': 2,
      'DC|C5|C6': 2,
      'DC|C2|O2': 2,
      'DA|C2|N3': 2,
      'DA|C6|N1': 2,
      'DA|C4|C5': 2,
      'DA|C8|N7': 2,
      'DT|C5|C6': 2,
      'DT|C2|O2': 2,
      'DT|C4|O4': 2
  };
  function getBondOrderFromTable(resname, atomname1, atomname2) {
      var assign;

      (assign = atomname1 < atomname2 ? [atomname1, atomname2] : [atomname2, atomname1], atomname1 = assign[0], atomname2 = assign[1]);
      if (AA3.includes(resname) && atomname1 === 'C' && atomname2 === 'O')
          { return 2; }
      if (Bases.includes(resname) && atomname1 === 'OP1' && atomname2 === 'P')
          { return 2; }
      return BondOrderTable[(resname + "|" + atomname1 + "|" + atomname2)] || 1;
  }
  function calculateResidueBonds(r) {
      var structure = r.structure;
      var a1 = structure.getAtomProxy();
      var a2 = structure.getAtomProxy();
      var count = r.atomCount;
      var offset = r.atomOffset;
      var end = offset + count;
      var end1 = end - 1;
      var atomIndices1 = [];
      var atomIndices2 = [];
      var bondOrders = [];
      if (count > 500) {
          if (exports.Debug)
              { Log.warn('more than 500 atoms, skip residue for auto-bonding', r.qualifiedName()); }
      }
      else {
          if (count > 50) {
              var kdtree = new Kdtree(r, true);
              var radius = r.isCg() ? 1.2 : 2.3;
              for (var i = offset; i < end1; ++i) {
                  a1.index = i;
                  var maxd = a1.covalent + radius + 0.3;
                  var nearestAtoms = kdtree.nearest(a1, Infinity, maxd * maxd); // TODO
                  var m = nearestAtoms.length;
                  for (var j = 0; j < m; ++j) {
                      a2.index = nearestAtoms[j].index;
                      if (a1.index < a2.index) {
                          if (a1.connectedTo(a2)) {
                              atomIndices1.push(a1.index - offset);
                              atomIndices2.push(a2.index - offset);
                              bondOrders.push(getBondOrderFromTable(a1.resname, a1.atomname, a2.atomname));
                          }
                      }
                  }
              }
          }
          else {
              for (var i$1 = offset; i$1 < end1; ++i$1) {
                  a1.index = i$1;
                  for (var j$1 = i$1 + 1; j$1 <= end1; ++j$1) {
                      a2.index = j$1;
                      if (a1.connectedTo(a2)) {
                          atomIndices1.push(i$1 - offset);
                          atomIndices2.push(j$1 - offset);
                          bondOrders.push(getBondOrderFromTable(a1.resname, a1.atomname, a2.atomname));
                      }
                  }
              }
          }
      }
      return {
          atomIndices1: atomIndices1,
          atomIndices2: atomIndices2,
          bondOrders: bondOrders
      };
  }
  function calculateAtomBondMap(structure) {
      if (exports.Debug)
          { Log.time('calculateAtomBondMap'); }
      var atomBondMap = [];
      structure.eachBond(function (bp) {
          var ai1 = bp.atomIndex1;
          var ai2 = bp.atomIndex2;
          if (atomBondMap[ai1] === undefined)
              { atomBondMap[ai1] = []; }
          atomBondMap[ai1][ai2] = bp.index;
      });
      if (exports.Debug)
          { Log.timeEnd('calculateAtomBondMap'); }
      return atomBondMap;
  }
  function calculateBondsWithin(structure, onlyAddRung) {
      if ( onlyAddRung === void 0 ) onlyAddRung = false;

      if (exports.Debug)
          { Log.time('calculateBondsWithin'); }
      var bondStore = structure.bondStore;
      var rungBondStore = structure.rungBondStore;
      var rungAtomSet = structure.getAtomSet(false);
      var a1 = structure.getAtomProxy();
      var a2 = structure.getAtomProxy();
      var bp = structure.getBondProxy();
      var atomBondMap = onlyAddRung ? null : calculateAtomBondMap(structure);
      structure.eachResidue(function (r) {
          if (!onlyAddRung && atomBondMap) {
              var count = r.atomCount;
              var offset = r.atomOffset;
              if (count > 500) {
                  Log.warn('more than 500 atoms, skip residue for auto-bonding', r.qualifiedName());
                  return;
              }
              var bonds = r.getBonds();
              var atomIndices1 = bonds.atomIndices1;
              var atomIndices2 = bonds.atomIndices2;
              var bondOrders = bonds.bondOrders;
              var nn = atomIndices1.length;
              for (var i = 0; i < nn; ++i) {
                  var rai1 = atomIndices1[i];
                  var rai2 = atomIndices2[i];
                  var ai1 = rai1 + offset;
                  var ai2 = rai2 + offset;
                  var tmp = atomBondMap[ai1];
                  if (tmp !== undefined && tmp[ai2] !== undefined) {
                      bp.index = tmp[ai2];
                      var residueTypeBondIndex = r.residueType.getBondIndex(rai1, rai2); // TODO
                      // overwrite residueType bondOrder with value from existing bond
                      bondOrders[residueTypeBondIndex] = bp.bondOrder;
                  }
                  else {
                      a1.index = ai1;
                      a2.index = ai2;
                      // only add bond if not already in bondStore
                      bondStore.addBond(a1, a2, bondOrders[i]);
                  }
              }
          }
          // get RNA/DNA rung pseudo bonds
          var traceAtomIndex = r.residueType.traceAtomIndex;
          var rungEndAtomIndex = r.residueType.rungEndAtomIndex;
          if (traceAtomIndex !== -1 && rungEndAtomIndex !== -1) {
              a1.index = r.traceAtomIndex;
              a2.index = r.rungEndAtomIndex;
              rungBondStore.addBond(a1, a2);
              rungAtomSet.set(a1.index);
              rungAtomSet.set(a2.index);
          }
      });
      structure.atomSetDict.rung = rungAtomSet;
      if (exports.Debug)
          { Log.timeEnd('calculateBondsWithin'); }
  }
  function calculateBondsBetween(structure, onlyAddBackbone, useExistingBonds) {
      if ( onlyAddBackbone === void 0 ) onlyAddBackbone = false;
      if ( useExistingBonds === void 0 ) useExistingBonds = false;

      if (exports.Debug)
          { Log.time('calculateBondsBetween'); }
      var bondStore = structure.bondStore;
      var backboneBondStore = structure.backboneBondStore;
      var backboneAtomSet = structure.getAtomSet(false);
      var ap1 = structure.getAtomProxy();
      var ap2 = structure.getAtomProxy();
      if (backboneBondStore.count === 0) {
          backboneBondStore.resize(structure.residueStore.count);
      }
      function addBondIfConnected(rp1, rp2) {
          var bbType1 = rp1.backboneType;
          var bbType2 = rp2.backboneType;
          if (bbType1 !== UnknownBackboneType && bbType1 === bbType2) {
              ap1.index = rp1.backboneEndAtomIndex;
              ap2.index = rp2.backboneStartAtomIndex;
              if ((useExistingBonds && ap1.hasBondTo(ap2)) || ap1.connectedTo(ap2)) {
                  if (!onlyAddBackbone) {
                      bondStore.addBond(ap1, ap2, 1); // assume single bond
                  }
                  ap1.index = rp1.traceAtomIndex;
                  ap2.index = rp2.traceAtomIndex;
                  backboneBondStore.addBond(ap1, ap2);
                  backboneAtomSet.set(ap1.index);
                  backboneAtomSet.set(ap2.index);
              }
          }
      }
      structure.eachResidueN(2, addBondIfConnected);
      var rp1 = structure.getResidueProxy();
      var rp2 = structure.getResidueProxy();
      // check for cyclic chains
      structure.eachChain(function (cp) {
          if (cp.residueCount === 0)
              { return; }
          rp1.index = cp.residueOffset;
          rp2.index = cp.residueOffset + cp.residueCount - 1;
          addBondIfConnected(rp2, rp1);
      });
      structure.atomSetDict.backbone = backboneAtomSet;
      if (!onlyAddBackbone) {
          if (exports.Debug)
              { Log.time('calculateBondsBetween inter'); }
          var spatialHash = structure.spatialHash;
          structure.eachResidue(function (rp) {
              if (rp.backboneType === UnknownBackboneType && !rp.isWater()) {
                  rp.eachAtom(function (ap) {
                      if (ap.isMetal())
                          { return; }
                      spatialHash.eachWithin(ap.x, ap.y, ap.z, 4, function (idx) {
                          ap2.index = idx;
                          if (ap.modelIndex === ap2.modelIndex &&
                              ap.residueIndex !== ap2.residueIndex &&
                              !ap2.isMetal()) {
                              bondStore.addBondIfConnected(ap, ap2, 1); // assume single bond
                          }
                      });
                  });
              }
          });
          if (exports.Debug)
              { Log.timeEnd('calculateBondsBetween inter'); }
      }
      if (exports.Debug)
          { Log.timeEnd('calculateBondsBetween'); }
  }
  function buildUnitcellAssembly(structure) {
      if (!structure.unitcell)
          { return; }
      if (exports.Debug)
          { Log.time('buildUnitcellAssembly'); }
      var uc = structure.unitcell;
      var structureCenterFrac = structure.center.clone().applyMatrix4(uc.cartToFrac);
      var centerFrac = structureCenterFrac.clone().floor();
      var symopDict = getSymmetryOperations(uc.spacegroup);
      var centerFracSymop = new Vector3();
      var positionFracSymop = new Vector3();
      function getMatrixList(shift) {
          var matrixList = [];
          Object.keys(symopDict).forEach(function (name) {
              var m = symopDict[name].clone();
              centerFracSymop.copy(structureCenterFrac).applyMatrix4(m).floor();
              positionFracSymop.setFromMatrixPosition(m);
              positionFracSymop.sub(centerFracSymop);
              positionFracSymop.add(centerFrac);
              if (shift)
                  { positionFracSymop.add(shift); }
              m.setPosition(positionFracSymop);
              m.multiplyMatrices(uc.fracToCart, m);
              m.multiply(uc.cartToFrac);
              matrixList.push(m);
          });
          return matrixList;
      }
      var unitcellAssembly = new Assembly('UNITCELL');
      var unitcellMatrixList = getMatrixList();
      var ncsMatrixList = [];
      if (structure.biomolDict.NCS) {
          ncsMatrixList.push.apply(ncsMatrixList, [ new Matrix4() ].concat( structure.biomolDict.NCS.partList[0].matrixList ));
          var ncsUnitcellMatrixList = [];
          unitcellMatrixList.forEach(function (sm) {
              ncsMatrixList.forEach(function (nm) {
                  ncsUnitcellMatrixList.push(sm.clone().multiply(nm));
              });
          });
          unitcellAssembly.addPart(ncsUnitcellMatrixList);
      }
      else {
          unitcellAssembly.addPart(unitcellMatrixList);
      }
      var vec = new Vector3();
      var supercellAssembly = new Assembly('SUPERCELL');
      var supercellMatrixList = Array.prototype.concat.call(getMatrixList(vec.set(1, 0, 0)), // 655
      getMatrixList(vec.set(0, 1, 0)), // 565
      getMatrixList(vec.set(0, 0, 1)), // 556
      getMatrixList(vec.set(-1, 0, 0)), // 455
      getMatrixList(vec.set(0, -1, 0)), // 545
      getMatrixList(vec.set(0, 0, -1)), // 554
      getMatrixList(vec.set(1, 1, 0)), // 665
      getMatrixList(vec.set(1, 0, 1)), // 656
      getMatrixList(vec.set(0, 1, 1)), // 566
      getMatrixList(vec.set(-1, -1, 0)), // 445
      getMatrixList(vec.set(-1, 0, -1)), // 454
      getMatrixList(vec.set(0, -1, -1)), // 544
      getMatrixList(vec.set(1, -1, -1)), // 644
      getMatrixList(vec.set(1, 1, -1)), // 664
      getMatrixList(vec.set(1, -1, 1)), // 646
      getMatrixList(vec.set(-1, 1, 1)), // 466
      getMatrixList(vec.set(-1, -1, 1)), // 446
      getMatrixList(vec.set(-1, 1, -1)), // 464
      getMatrixList(vec.set(0, 1, -1)), // 564
      getMatrixList(vec.set(0, -1, 1)), // 546
      getMatrixList(vec.set(1, 0, -1)), // 654
      getMatrixList(vec.set(-1, 0, 1)), // 456
      getMatrixList(vec.set(1, -1, 0)), // 645
      getMatrixList(vec.set(-1, 1, 0)), // 465
      getMatrixList(), // 555
      getMatrixList(vec.set(1, 1, 1)), // 666
      getMatrixList(vec.set(-1, -1, -1)) // 444
      );
      if (structure.biomolDict.NCS) {
          var ncsSupercellMatrixList = [];
          supercellMatrixList.forEach(function (sm) {
              ncsMatrixList.forEach(function (nm) {
                  ncsSupercellMatrixList.push(sm.clone().multiply(nm));
              });
          });
          supercellAssembly.addPart(ncsSupercellMatrixList);
      }
      else {
          supercellAssembly.addPart(supercellMatrixList);
      }
      structure.biomolDict.UNITCELL = unitcellAssembly;
      structure.biomolDict.SUPERCELL = supercellAssembly;
      if (exports.Debug)
          { Log.timeEnd('buildUnitcellAssembly'); }
  }
  var elm1 = ['H', 'C', 'O', 'N', 'S', 'P'];
  var elm2 = ['NA', 'CL', 'FE'];
  function guessElement(atomName) {
      var at = atomName.trim().toUpperCase();
      // parseInt('C') -> NaN; (NaN > -1) -> false
      if (parseInt(at.charAt(0)) > -1)
          { at = at.substr(1); }
      // parse again to check for a second integer
      if (parseInt(at.charAt(0)) > -1)
          { at = at.substr(1); }
      var n = at.length;
      if (n === 0)
          { return ''; }
      if (n === 1)
          { return at; }
      if (n === 2) {
          if (elm2.indexOf(at) !== -1)
              { return at; }
          if (elm1.indexOf(at[0]) !== -1)
              { return at[0]; }
      }
      if (n >= 3) {
          if (elm1.indexOf(at[0]) !== -1)
              { return at[0]; }
      }
      return '';
  }
  /**
   * Assigns ResidueType bonds.
   * @param {Structure} structure - the structure object
   * @return {undefined}
   */
  function assignResidueTypeBonds(structure) {
      // if( Debug ) Log.time( "assignResidueTypeBonds" )
      var bondHash = structure.bondHash; // TODO
      var countArray = bondHash.countArray;
      var offsetArray = bondHash.offsetArray;
      var indexArray = bondHash.indexArray;
      var bp = structure.getBondProxy();
      structure.eachResidue(function (rp) {
          var residueType = rp.residueType;
          if (residueType.bonds !== undefined)
              { return; }
          var atomOffset = rp.atomOffset;
          var atomIndices1 = [];
          var atomIndices2 = [];
          var bondOrders = [];
          var bondDict = {};
          var nextAtomOffset = atomOffset + rp.atomCount;
          rp.eachAtom(function (ap) {
              var index = ap.index;
              var offset = offsetArray[index];
              var count = countArray[index];
              for (var i = 0, il = count; i < il; ++i) {
                  bp.index = indexArray[offset + i];
                  var idx1 = bp.atomIndex1;
                  if (idx1 < atomOffset || idx1 >= nextAtomOffset) {
                      // Don't add bonds outside of this resiude
                      continue;
                  }
                  var idx2 = bp.atomIndex2;
                  if (idx2 < atomOffset || idx2 >= nextAtomOffset) {
                      continue;
                  }
                  if (idx1 > idx2) {
                      var tmp = idx2;
                      idx2 = idx1;
                      idx1 = tmp;
                  }
                  var hash = idx1 + '|' + idx2;
                  if (bondDict[hash] === undefined) {
                      bondDict[hash] = true;
                      atomIndices1.push(idx1 - atomOffset);
                      atomIndices2.push(idx2 - atomOffset);
                      bondOrders.push(bp.bondOrder);
                  }
              }
          });
          residueType.bonds = {
              atomIndices1: atomIndices1,
              atomIndices2: atomIndices2,
              bondOrders: bondOrders
          };
      });
      // if( Debug ) Log.timeEnd( "assignResidueTypeBonds" )
  }
  function concatStructures(name) {
      var structures = [], len = arguments.length - 1;
      while ( len-- > 0 ) structures[ len ] = arguments[ len + 1 ];

      if (exports.Debug)
          { Log.time("concatStructures"); }
      var s = new Structure(name, '');
      var sb = new StructureBuilder(s);
      var atomStore = s.atomStore;
      var atomMap = s.atomMap;
      atomStore.addField('formalCharge', 1, 'int8');
      atomStore.addField('partialCharge', 1, 'float32');
      var atomIndexDict = {};
      var idx = 0;
      var atomCount = 0;
      var modelCount = 0;
      structures.forEach(function (structure) {
          structure.eachAtom(function (a) {
              atomStore.growIfFull();
              atomStore.atomTypeId[idx] = atomMap.add(a.atomname, a.element);
              atomStore.x[idx] = a.x;
              atomStore.y[idx] = a.y;
              atomStore.z[idx] = a.z;
              atomStore.serial[idx] = a.serial;
              atomStore.formalCharge[idx] = a.formalCharge;
              atomStore.partialCharge[idx] = a.partialCharge;
              atomStore.altloc[idx] = a.altloc;
              atomStore.occupancy[idx] = a.occupancy;
              atomStore.bfactor[idx] = a.bfactor;
              sb.addAtom(a.modelIndex + modelCount, a.chainname, a.chainid, a.resname, a.resno, a.hetero === 1, a.sstruc, a.inscode);
              atomIndexDict[a.index + atomCount] = idx;
              idx += 1;
          });
          atomCount += structure.atomStore.count;
          modelCount += structure.modelStore.count;
      });
      var bondStore = s.bondStore;
      var a1 = s.getAtomProxy();
      var a2 = s.getAtomProxy();
      atomCount = 0;
      structures.forEach(function (structure) {
          structure.eachBond(function (b) {
              a1.index = atomIndexDict[b.atomIndex1 + atomCount];
              a2.index = atomIndexDict[b.atomIndex2 + atomCount];
              bondStore.addBond(a1, a2, b.bondOrder);
          });
          atomCount += structure.atomStore.count;
      });
      sb.finalize();
      calculateBondsBetween(s, true); // calculate backbone bonds
      calculateBondsWithin(s, true); // calculate rung bonds
      s.finalizeAtoms();
      s.finalizeBonds();
      assignResidueTypeBonds(s);
      if (exports.Debug)
          { Log.timeEnd("concatStructures"); }
      return s;
  }

  /**
   * @file Atom Type
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  // Li, Na, K, Rb, Cs Fr
  var AlkaliMetals = [3, 11, 19, 37, 55, 87];
  // Be, Mg, Ca, Sr, Ba, Ra
  var AlkalineEarthMetals = [4, 12, 20, 38, 56, 88];
  // C, P, S, Se
  var PolyatomicNonmetals = [6, 15, 16, 34 ];
  // H, N, O, F, Cl, Br, I
  var DiatomicNonmetals = [1, 7, 8, 9, 17, 35, 53];
  // He, Ne, Ar, Kr, Xe, Rn
  var NobleGases = [2, 10, 18, 36, 54, 86];
  // Zn, Ga, Cd, In, Sn, Hg, Ti, Pb, Bi, Po, Cn
  var PostTransitionMetals = [13, 30, 31, 48, 49, 50, 80, 81, 82, 83, 84, 85, 112];
  // B, Si, Ge, As, Sb, Te, At
  var Metalloids = [5, 14, 32, 33, 51, 52, 85];
  // F, Cl, Br, I, At
  var Halogens = [9, 17, 35, 53, 85];
  /**
   * Atom type
   */
  var AtomType = function AtomType(structure, atomname, element) {
      this.structure = structure;
      this.atomname = atomname;
      element = element || guessElement(atomname);
      this.element = element;
      this.number = AtomicNumbers[element] || DefaultAtomicNumber;
      this.vdw = VdwRadii[this.number] || DefaultVdwRadius;
      this.covalent = CovalentRadii[this.number] || DefaultCovalentRadius;
  };
  AtomType.prototype.getDefaultValence = function getDefaultValence () {
      var vl = Valences[this.number];
      return vl ? vl[0] : DefaultValence;
  };
  AtomType.prototype.getValenceList = function getValenceList () {
      return Valences[this.number] || [];
  };
  AtomType.prototype.getOuterShellElectronCount = function getOuterShellElectronCount () {
      return OuterShellElectronCounts[this.number] || DefaultOuterShellElectronCount;
  };
  AtomType.prototype.isMetal = function isMetal () {
      return (this.isAlkaliMetal() ||
          this.isAlkalineEarthMetal() ||
          this.isLanthanide() ||
          this.isActinide() ||
          this.isTransitionMetal() ||
          this.isPostTransitionMetal());
  };
  AtomType.prototype.isNonmetal = function isNonmetal () {
      return (this.isDiatomicNonmetal() ||
          this.isPolyatomicNonmetal() ||
          this.isNobleGas());
  };
  AtomType.prototype.isMetalloid = function isMetalloid () {
      return Metalloids.includes(this.number);
  };
  AtomType.prototype.isHalogen = function isHalogen () {
      return Halogens.includes(this.number);
  };
  AtomType.prototype.isDiatomicNonmetal = function isDiatomicNonmetal () {
      return DiatomicNonmetals.includes(this.number);
  };
  AtomType.prototype.isPolyatomicNonmetal = function isPolyatomicNonmetal () {
      return PolyatomicNonmetals.includes(this.number);
  };
  AtomType.prototype.isAlkaliMetal = function isAlkaliMetal () {
      return AlkaliMetals.includes(this.number);
  };
  AtomType.prototype.isAlkalineEarthMetal = function isAlkalineEarthMetal () {
      return AlkalineEarthMetals.includes(this.number);
  };
  AtomType.prototype.isNobleGas = function isNobleGas () {
      return NobleGases.includes(this.number);
  };
  AtomType.prototype.isTransitionMetal = function isTransitionMetal () {
      var no = this.number;
      return ((no >= 21 && no <= 29) ||
          (no >= 39 && no <= 47) ||
          (no >= 72 && no <= 79) ||
          (no >= 104 && no <= 108));
  };
  AtomType.prototype.isPostTransitionMetal = function isPostTransitionMetal () {
      return PostTransitionMetals.includes(this.number);
  };
  AtomType.prototype.isLanthanide = function isLanthanide () {
      return this.number >= 57 && this.number <= 71;
  };
  AtomType.prototype.isActinide = function isActinide () {
      return this.number >= 89 && this.number <= 103;
  };

  /**
   * @file Atom Map
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function getHash$1(atomname, element) {
      return atomname + '|' + element;
  }
  var AtomMap = function AtomMap(structure) {
      this.structure = structure;
      this.dict = {};
      this.list = [];
      this.structure = structure;
  };
  AtomMap.prototype.add = function add (atomname, element) {
      atomname = atomname.toUpperCase();
      if (!element) {
          element = guessElement(atomname);
      }
      else {
          element = element.toUpperCase();
      }
      var hash = getHash$1(atomname, element);
      var id = this.dict[hash];
      if (id === undefined) {
          var atomType = new AtomType(this.structure, atomname, element);
          id = this.list.length;
          this.dict[hash] = id;
          this.list.push(atomType);
      }
      return id;
  };
  AtomMap.prototype.get = function get (id) {
      return this.list[id];
  };

  /**
   * @file Residue Type
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @author Fred Ludlow
   * @private
   */
  /**
   * Residue type
   */
  var ResidueType = function ResidueType(structure, resname, atomTypeIdList, hetero, chemCompType, bonds) {
      this.structure = structure;
      // Sparse array containing the reference atom index for each bond.
      this.bondReferenceAtomIndices = [];
      this.resname = resname;
      this.atomTypeIdList = atomTypeIdList;
      this.hetero = hetero ? 1 : 0;
      this.chemCompType = chemCompType;
      this.bonds = bonds;
      this.atomCount = atomTypeIdList.length;
      this.moleculeType = this.getMoleculeType();
      this.backboneType = this.getBackboneType(0);
      this.backboneEndType = this.getBackboneType(-1);
      this.backboneStartType = this.getBackboneType(1);
      this.backboneIndexList = this.getBackboneIndexList();
      var atomnames = ResidueTypeAtoms[this.backboneType];
      var atomnamesStart = ResidueTypeAtoms[this.backboneStartType];
      var atomnamesEnd = ResidueTypeAtoms[this.backboneEndType];
      var traceIndex = this.getAtomIndexByName(atomnames.trace);
      this.traceAtomIndex = defaults(traceIndex, -1);
      var dir1Index = this.getAtomIndexByName(atomnames.direction1);
      this.direction1AtomIndex = defaults(dir1Index, -1);
      var dir2Index = this.getAtomIndexByName(atomnames.direction2);
      this.direction2AtomIndex = defaults(dir2Index, -1);
      var bbStartIndex = this.getAtomIndexByName(atomnamesStart.backboneStart);
      this.backboneStartAtomIndex = defaults(bbStartIndex, -1);
      var bbEndIndex = this.getAtomIndexByName(atomnamesEnd.backboneEnd);
      this.backboneEndAtomIndex = defaults(bbEndIndex, -1);
      var rungEndIndex;
      if (PurinBases.includes(resname)) {
          rungEndIndex = this.getAtomIndexByName('N1');
      }
      else {
          rungEndIndex = this.getAtomIndexByName('N3');
      }
      this.rungEndAtomIndex = defaults(rungEndIndex, -1);
  };
  ResidueType.prototype.getBackboneIndexList = function getBackboneIndexList () {
      var backboneIndexList = [];
      var atomnameList;
      switch (this.moleculeType) {
          case ProteinType:
              atomnameList = ProteinBackboneAtoms;
              break;
          case RnaType:
          case DnaType:
              atomnameList = NucleicBackboneAtoms;
              break;
          default:
              return backboneIndexList;
      }
      var atomMap = this.structure.atomMap;
      var atomTypeIdList = this.atomTypeIdList;
      for (var i = 0, il = this.atomCount; i < il; ++i) {
          var atomType = atomMap.get(atomTypeIdList[i]);
          if (atomnameList.includes(atomType.atomname)) {
              backboneIndexList.push(i);
          }
      }
      return backboneIndexList;
  };
  ResidueType.prototype.getMoleculeType = function getMoleculeType () {
      if (this.isProtein()) {
          return ProteinType;
      }
      else if (this.isRna()) {
          return RnaType;
      }
      else if (this.isDna()) {
          return DnaType;
      }
      else if (this.isWater()) {
          return WaterType;
      }
      else if (this.isIon()) {
          return IonType;
      }
      else if (this.isSaccharide()) {
          return SaccharideType;
      }
      else {
          return UnknownType;
      }
  };
  ResidueType.prototype.getBackboneType = function getBackboneType (position) {
      if (this.hasProteinBackbone(position)) {
          return ProteinBackboneType;
      }
      else if (this.hasRnaBackbone(position)) {
          return RnaBackboneType;
      }
      else if (this.hasDnaBackbone(position)) {
          return DnaBackboneType;
      }
      else if (this.hasCgProteinBackbone(position)) {
          return CgProteinBackboneType;
      }
      else if (this.hasCgRnaBackbone(position)) {
          return CgRnaBackboneType;
      }
      else if (this.hasCgDnaBackbone(position)) {
          return CgDnaBackboneType;
      }
      else {
          return UnknownBackboneType;
      }
  };
  ResidueType.prototype.isProtein = function isProtein () {
      if (this.chemCompType) {
          return ChemCompProtein.includes(this.chemCompType);
      }
      else {
          return (this.hasAtomWithName('CA', 'C', 'N') ||
              AA3.includes(this.resname));
      }
  };
  ResidueType.prototype.isCg = function isCg () {
      var backboneType = this.backboneType;
      return (backboneType === CgProteinBackboneType ||
          backboneType === CgRnaBackboneType ||
          backboneType === CgDnaBackboneType);
  };
  ResidueType.prototype.isNucleic = function isNucleic () {
      return this.isRna() || this.isDna();
  };
  ResidueType.prototype.isRna = function isRna () {
      if (this.chemCompType) {
          return ChemCompRna.includes(this.chemCompType);
      }
      else if (this.hetero === 1) {
          return false;
      }
      else {
          return (this.hasAtomWithName(['P', "O3'", 'O3*'], ["C4'", 'C4*'], ["O2'", 'O2*', "F2'", 'F2*']) ||
              (RnaBases.includes(this.resname) &&
                  (this.hasAtomWithName(["O2'", 'O2*', "F2'", 'F2*']))));
      }
  };
  ResidueType.prototype.isDna = function isDna () {
      if (this.chemCompType) {
          return ChemCompDna.includes(this.chemCompType);
      }
      else if (this.hetero === 1) {
          return false;
      }
      else {
          return ((this.hasAtomWithName(['P', "O3'", 'O3*'], ["C3'", 'C3*']) &&
              !this.hasAtomWithName(["O2'", 'O2*', "F2'", 'F2*'])) ||
              DnaBases.includes(this.resname));
      }
  };
  ResidueType.prototype.isHetero = function isHetero () {
      return this.hetero === 1;
  };
  ResidueType.prototype.isIon = function isIon () {
      return IonNames.includes(this.resname);
  };
  ResidueType.prototype.isWater = function isWater () {
      return WaterNames.includes(this.resname);
  };
  ResidueType.prototype.isSaccharide = function isSaccharide () {
      if (this.chemCompType) {
          return ChemCompSaccharide.includes(this.chemCompType);
      }
      else {
          return SaccharideNames.includes(this.resname);
      }
  };
  ResidueType.prototype.isStandardAminoacid = function isStandardAminoacid () {
      return AA3.includes(this.resname);
  };
  ResidueType.prototype.isStandardBase = function isStandardBase () {
      return Bases.includes(this.resname);
  };
  ResidueType.prototype.hasBackboneAtoms = function hasBackboneAtoms (position, type) {
      var atomnames = ResidueTypeAtoms[type];
      if (position === -1) {
          return this.hasAtomWithName(atomnames.trace, atomnames.backboneEnd, atomnames.direction1, atomnames.direction2);
      }
      else if (position === 0) {
          return this.hasAtomWithName(atomnames.trace, atomnames.direction1, atomnames.direction2);
      }
      else if (position === 1) {
          return this.hasAtomWithName(atomnames.trace, atomnames.backboneStart, atomnames.direction1, atomnames.direction2);
      }
      else {
          return this.hasAtomWithName(atomnames.trace, atomnames.backboneStart, atomnames.backboneEnd, atomnames.direction1, atomnames.direction2);
      }
  };
  ResidueType.prototype.hasProteinBackbone = function hasProteinBackbone (position) {
      return (this.isProtein() &&
          this.hasBackboneAtoms(position, ProteinBackboneType));
  };
  ResidueType.prototype.hasRnaBackbone = function hasRnaBackbone (position) {
      return (this.isRna() &&
          this.hasBackboneAtoms(position, RnaBackboneType));
  };
  ResidueType.prototype.hasDnaBackbone = function hasDnaBackbone (position) {
      return (this.isDna() &&
          this.hasBackboneAtoms(position, DnaBackboneType));
  };
  ResidueType.prototype.hasCgProteinBackbone = function hasCgProteinBackbone (position) {
      return (this.atomCount < 7 &&
          this.isProtein() &&
          this.hasBackboneAtoms(position, CgProteinBackboneType));
  };
  ResidueType.prototype.hasCgRnaBackbone = function hasCgRnaBackbone (position) {
      return (this.atomCount < 11 &&
          this.isRna() &&
          this.hasBackboneAtoms(position, CgRnaBackboneType));
  };
  ResidueType.prototype.hasCgDnaBackbone = function hasCgDnaBackbone (position) {
      return (this.atomCount < 11 &&
          this.isDna() &&
          this.hasBackboneAtoms(position, CgDnaBackboneType));
  };
  ResidueType.prototype.hasBackbone = function hasBackbone (position) {
      return (this.hasProteinBackbone(position) ||
          this.hasRnaBackbone(position) ||
          this.hasDnaBackbone(position) ||
          this.hasCgProteinBackbone(position) ||
          this.hasCgRnaBackbone(position) ||
          this.hasCgDnaBackbone(position));
  };
  ResidueType.prototype.getAtomIndexByName = function getAtomIndexByName (atomname) {
      var n = this.atomCount;
      var atomMap = this.structure.atomMap;
      var atomTypeIdList = this.atomTypeIdList;
      if (Array.isArray(atomname)) {
          for (var i = 0; i < n; ++i) {
              var index = atomTypeIdList[i];
              if (atomname.includes(atomMap.get(index).atomname)) {
                  return i;
              }
          }
      }
      else {
          for (var i$1 = 0; i$1 < n; ++i$1) {
              var index$1 = atomTypeIdList[i$1];
              if (atomname === atomMap.get(index$1).atomname) {
                  return i$1;
              }
          }
      }
      return undefined;
  };
  ResidueType.prototype.hasAtomWithName = function hasAtomWithName () {
          var atomnames = [], len = arguments.length;
          while ( len-- ) atomnames[ len ] = arguments[ len ];

      var n = atomnames.length;
      for (var i = 0; i < n; ++i) {
          if (atomnames[i] === undefined)
              { continue; }
          if (this.getAtomIndexByName(atomnames[i]) === undefined) {
              return false;
          }
      }
      return true;
  };
  ResidueType.prototype.getBonds = function getBonds (r) {
      if (this.bonds === undefined) {
          this.bonds = calculateResidueBonds(r); // TODO
      }
      return this.bonds;
  };
  ResidueType.prototype.getRings = function getRings () {
      if (this.rings === undefined) {
          this.calculateRings();
      }
      return this.rings;
  };
  ResidueType.prototype.getBondGraph = function getBondGraph () {
      if (this.bondGraph === undefined) {
          this.calculateBondGraph();
      }
      return this.bondGraph;
  };
  ResidueType.prototype.getAromatic = function getAromatic (a) {
      if (this.aromaticAtoms === undefined) {
          this.calculateAromatic(this.structure.getResidueProxy((a).residueIndex)); // TODO
      }
      return this.aromaticAtoms;
  };
  ResidueType.prototype.getAromaticRings = function getAromaticRings (r) {
      if (this.aromaticRings === undefined) {
          this.calculateAromatic(r); // TODO
      }
      return this.aromaticRings;
  };
  /**
   * @return {Object} bondGraph - represents the bonding in this
   *   residue: { ai1: [ ai2, ai3, ...], ...}
   */
  ResidueType.prototype.calculateBondGraph = function calculateBondGraph () {
      var bondGraph = this.bondGraph = {};
      var bonds = this.getBonds();
      var nb = bonds.atomIndices1.length;
      var atomIndices1 = bonds.atomIndices1;
      var atomIndices2 = bonds.atomIndices2;
      for (var i = 0; i < nb; ++i) {
          var ai1 = atomIndices1[i];
          var ai2 = atomIndices2[i];
          var a1 = bondGraph[ai1] = bondGraph[ai1] || [];
          a1.push(ai2);
          var a2 = bondGraph[ai2] = bondGraph[ai2] || [];
          a2.push(ai1);
      }
  };
  /**
   * Find all rings up to 2 * RingFinderMaxDepth
   */
  ResidueType.prototype.calculateRings = function calculateRings () {
      var bondGraph = this.getBondGraph(); // TODO
      var state = RingFinderState(bondGraph, this.atomCount);
      for (var i = 0; i < state.count; i++) {
          if (state.visited[i] >= 0)
              { continue; }
          findRings(state, i);
      }
      this.rings = { atomRings: state.atomRings, rings: state.rings };
  };
  ResidueType.prototype.isAromatic = function isAromatic (atom) {
      this.aromaticAtoms = this.getAromatic(atom); // TODO
      return this.aromaticAtoms[atom.index - atom.residueAtomOffset] === 1;
  };
  ResidueType.prototype.calculateAromatic = function calculateAromatic (r) {
          var this$1$1 = this;

      var aromaticAtoms = this.aromaticAtoms = new Uint8Array(this.atomCount);
      var rings = this.getRings().rings;
      var aromaticRingFlags = rings.map(function (ring) {
          return isRingAromatic(ring.map(function (idx) {
              return this$1$1.structure.getAtomProxy(idx + r.atomOffset);
          }));
      });
      var aromaticRings = this.aromaticRings = [];
      rings.forEach(function (ring, i) {
          if (aromaticRingFlags[i]) {
              aromaticRings.push(ring);
              ring.forEach(function (idx) { return aromaticAtoms[idx] = 1; });
          }
      });
  };
  /**
   * For bonds with order > 1, pick a reference atom
   * @return {undefined}
   */
  ResidueType.prototype.assignBondReferenceAtomIndices = function assignBondReferenceAtomIndices () {
      var bondGraph = this.getBondGraph(); // TODO
      var rings = this.getRings(); // TODO
      var atomRings = rings.atomRings;
      var ringData = rings.rings;
      var bonds = this.bonds; // TODO
      var atomIndices1 = bonds.atomIndices1;
      var atomIndices2 = bonds.atomIndices2;
      var bondOrders = bonds.bondOrders;
      var bondReferenceAtomIndices = this.bondReferenceAtomIndices;
      var nb = bonds.atomIndices1.length;
      bondReferenceAtomIndices.length = 0; // reset array
      for (var i = 0; i < nb; ++i) {
          // Not required for single bonds
          if (bondOrders[i] <= 1)
              { continue; }
          var refRing = (void 0);
          var ai1 = atomIndices1[i];
          var ai2 = atomIndices2[i];
          var rings1 = atomRings[ai1];
          var rings2 = atomRings[ai2];
          // Are both atoms in a ring?
          if (rings1 && rings2) {
              // Are they in the same ring? (If not, ignore ring info)
              for (var ri1 = 0; ri1 < rings1.length; ri1++) {
                  if (rings2.indexOf(rings1[ri1]) !== -1) {
                      refRing = ringData[rings1[ri1]];
                      break;
                  }
              }
          }
          // Find the first neighbour.
          if (bondGraph[ai1].length > 1) {
              for (var j = 0; j < bondGraph[ai1].length; ++j) {
                  var ai3 = bondGraph[ai1][j];
                  if (ai3 !== ai2) {
                      if (refRing === undefined || refRing.indexOf(ai3) !== -1) {
                          bondReferenceAtomIndices[i] = ai3;
                          break;
                      }
                  }
              }
          }
          else if (bondGraph[ai2].length > 1) {
              for (var j$1 = 0; j$1 < bondGraph[ai2].length; ++j$1) {
                  var ai3$1 = bondGraph[ai2][j$1];
                  if (ai3$1 !== ai1) {
                      if (refRing === undefined || refRing.indexOf(ai3$1) !== -1) {
                          bondReferenceAtomIndices[i] = ai3$1;
                          break;
                      }
                  }
              }
          } // No reference atom could be found (e.g. diatomic molecule/fragment)
      }
  };
  ResidueType.prototype.getBondIndex = function getBondIndex (atomIndex1, atomIndex2) {
      var bonds = this.bonds; // TODO
      var atomIndices1 = bonds.atomIndices1;
      var atomIndices2 = bonds.atomIndices2;
      var idx1 = atomIndices1.indexOf(atomIndex1);
      var idx2 = atomIndices2.indexOf(atomIndex2);
      var _idx2 = idx2;
      while (idx1 !== -1) {
          while (idx2 !== -1) {
              if (idx1 === idx2)
                  { return idx1; }
              idx2 = atomIndices2.indexOf(atomIndex2, idx2 + 1);
          }
          idx1 = atomIndices1.indexOf(atomIndex1, idx1 + 1);
          idx2 = _idx2;
      }
      // returns undefined when no bond is found
  };
  ResidueType.prototype.getBondReferenceAtomIndex = function getBondReferenceAtomIndex (atomIndex1, atomIndex2) {
      var bondIndex = this.getBondIndex(atomIndex1, atomIndex2);
      if (bondIndex === undefined)
          { return undefined; }
      if (this.bondReferenceAtomIndices.length === 0) {
          this.assignBondReferenceAtomIndices();
      }
      return this.bondReferenceAtomIndices[bondIndex];
  };
  //
  var AromaticRingElements = [
      5 /* B */, 6 /* C */, 7 /* N */, 8 /* O */,
      14 /* SI */, 15 /* P */, 16 /* S */,
      32 /* GE */, 33 /* AS */,
      50 /* SN */, 51 /* SB */,
      83 /* BI */
  ];
  var AromaticRingPlanarityThreshold = 0.05;
  function isRingAromatic(ring) {
      if (ring.some(function (a) { return !AromaticRingElements.includes(a.number); }))
          { return false; }
      var i = 0;
      var coords = new Matrix(3, ring.length);
      var cd = coords.data;
      ring.forEach(function (a) {
          cd[i + 0] = a.x;
          cd[i + 1] = a.y;
          cd[i + 2] = a.z;
          i += 3;
      });
      var pa = new PrincipalAxes(coords);
      return pa.vecC.length() < AromaticRingPlanarityThreshold;
  }
  //
  /**
   * Ring finding code below adapted from MolQL
   * Copyright (c) 2017 MolQL contributors, licensed under MIT
   * @author David Sehnal <david.sehnal@gmail.com>
   */
  function addRing(state, a, b) {
      // only "monotonous" rings
      if (b < a)
          { return; }
      var pred = state.pred;
      var color = state.color;
      var left = state.left;
      var right = state.right;
      var nc = ++state.currentColor;
      var current = a;
      for (var t = 0; t < RingFinderMaxDepth; t++) {
          color[current] = nc;
          current = pred[current];
          if (current < 0)
              { break; }
      }
      var leftOffset = 0;
      var rightOffset = 0;
      var found = false;
      var target = 0;
      current = b;
      for (var t$1 = 0; t$1 < RingFinderMaxDepth; t$1++) {
          if (color[current] === nc) {
              target = current;
              found = true;
              break;
          }
          right[rightOffset++] = current;
          current = pred[current];
          if (current < 0)
              { break; }
      }
      if (!found)
          { return; }
      current = a;
      for (var t$2 = 0; t$2 < RingFinderMaxDepth; t$2++) {
          left[leftOffset++] = current;
          if (target === current)
              { break; }
          current = pred[current];
          if (current < 0)
              { break; }
      }
      var rn = leftOffset + rightOffset;
      var ring = new Array(rn);
      var ringOffset = 0;
      for (var t$3 = 0; t$3 < leftOffset; t$3++) {
          ring[ringOffset++] = left[t$3];
      }
      for (var t$4 = rightOffset - 1; t$4 >= 0; t$4--) {
          ring[ringOffset++] = right[t$4];
      }
      var ri = state.rings.length;
      // set atomRing indices:
      for (var i = 0; i < rn; ++i) {
          var ai = ring[i];
          if (state.atomRings[ai]) {
              state.atomRings[ai].push(ri);
          }
          else {
              state.atomRings[ai] = [ri];
          }
      }
      state.rings.push(ring);
  }
  function findRings(state, from) {
      var bonds = state.bonds;
      var visited = state.visited;
      var queue = state.queue;
      var pred = state.pred;
      visited[from] = 1;
      queue[0] = from;
      var head = 0;
      var size = 1;
      while (head < size) {
          var top = queue[head++];
          var start = 0;
          if (bonds[top] === undefined) {
              continue;
          }
          var end = bonds[top].length;
          for (var i = start; i < end; i++) {
              var other = bonds[top][i];
              if (visited[other] > 0) {
                  if (pred[other] !== top && pred[top] !== other) {
                      addRing(state, top, other);
                  }
                  continue;
              }
              visited[other] = 1;
              queue[size++] = other;
              pred[other] = top;
          }
      }
  }
  var RingFinderMaxDepth = 4;
  function RingFinderState(bonds, capacity) {
      var state = {
          count: capacity,
          visited: new Int32Array(capacity),
          queue: new Int32Array(capacity),
          pred: new Int32Array(capacity),
          left: new Int32Array(RingFinderMaxDepth),
          right: new Int32Array(RingFinderMaxDepth),
          color: new Int32Array(capacity),
          currentColor: 0,
          rings: [],
          atomRings: [],
          bonds: bonds
      };
      for (var i = 0; i < capacity; i++) {
          state.visited[i] = -1;
          state.pred[i] = -1;
      }
      return state;
  }

  /**
   * @file Residue Map
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function getHash(resname, atomTypeIdList, hetero, chemCompType) {
      if ( chemCompType === void 0 ) chemCompType = '';

      return (resname + '|' +
          atomTypeIdList.join(',') + '|' +
          (hetero ? 1 : 0) + '|' +
          chemCompType);
  }
  var ResidueMap = function ResidueMap(structure) {
      this.structure = structure;
      this.dict = {};
      this.list = [];
  };
  ResidueMap.prototype.add = function add (resname, atomTypeIdList, hetero, chemCompType, bonds) {
          if ( chemCompType === void 0 ) chemCompType = '';

      resname = resname.toUpperCase();
      var hash = getHash(resname, atomTypeIdList, hetero, chemCompType);
      var id = this.dict[hash];
      if (id === undefined) {
          var residueType = new ResidueType(this.structure, resname, atomTypeIdList, hetero, chemCompType, bonds);
          id = this.list.length;
          this.dict[hash] = id;
          this.list.push(residueType);
      }
      return id;
  };
  ResidueMap.prototype.get = function get (id) {
      return this.list[id];
  };

  /**
   * @file Bond Proxy
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Bond proxy
   */
  var BondProxy = function BondProxy(structure, index) {
      if ( index === void 0 ) index = 0;

      this.structure = structure;
      this.index = index;
      this.bondStore = structure.bondStore;
      this._v12 = new Vector3();
      this._v13 = new Vector3();
      this._ap1 = this.structure.getAtomProxy();
      this._ap2 = this.structure.getAtomProxy();
      this._ap3 = this.structure.getAtomProxy();
  };

  var prototypeAccessors$h = { atom1: { configurable: true },atom2: { configurable: true },atomIndex1: { configurable: true },atomIndex2: { configurable: true },bondOrder: { configurable: true } };
  /**
   * @type {AtomProxy}
   */
  prototypeAccessors$h.atom1.get = function () {
      return this.structure.getAtomProxy(this.atomIndex1);
  };
  /**
   * @type {AtomProxy}
   */
  prototypeAccessors$h.atom2.get = function () {
      return this.structure.getAtomProxy(this.atomIndex2);
  };
  /**
   * @type {Integer}
   */
  prototypeAccessors$h.atomIndex1.get = function () {
      return this.bondStore.atomIndex1[this.index];
  };
  prototypeAccessors$h.atomIndex1.set = function (value) {
      this.bondStore.atomIndex1[this.index] = value;
  };
  /**
   * @type {Integer}
   */
  prototypeAccessors$h.atomIndex2.get = function () {
      return this.bondStore.atomIndex2[this.index];
  };
  prototypeAccessors$h.atomIndex2.set = function (value) {
      this.bondStore.atomIndex2[this.index] = value;
  };
  /**
   * @type {Integer}
   */
  prototypeAccessors$h.bondOrder.get = function () {
      return this.bondStore.bondOrder[this.index];
  };
  prototypeAccessors$h.bondOrder.set = function (value) {
      this.bondStore.bondOrder[this.index] = value;
  };
  BondProxy.prototype.getOtherAtomIndex = function getOtherAtomIndex (atomIndex) {
      return atomIndex === this.atomIndex1 ? this.atomIndex2 : this.atomIndex1;
  };
  BondProxy.prototype.getOtherAtom = function getOtherAtom (atom) {
      return this.structure.getAtomProxy(this.getOtherAtomIndex(atom.index));
  };
  /**
   * Get reference atom index for the bond
   * @return {Integer|undefined} atom index, or `undefined` if unavailable
   */
  BondProxy.prototype.getReferenceAtomIndex = function getReferenceAtomIndex () {
      var ap1 = this._ap1;
      var ap2 = this._ap2;
      ap1.index = this.atomIndex1;
      ap2.index = this.atomIndex2;
      if (ap1.residueIndex !== ap2.residueIndex) {
          return undefined; // Bond between residues, for now ignore (could detect)
      }
      var typeAtomIndex1 = ap1.index - ap1.residueAtomOffset;
      var typeAtomIndex2 = ap2.index - ap2.residueAtomOffset;
      var residueType = ap1.residueType;
      var ix = residueType.getBondReferenceAtomIndex(typeAtomIndex1, typeAtomIndex2);
      if (ix !== undefined) {
          return ix + ap1.residueAtomOffset;
      }
      else {
          console.warn('No reference atom found', ap1.index, ap2.index);
      }
  };
  /**
   * calculate shift direction for displaying double/triple bonds
   * @param  {Vector3} [v] pre-allocated output vector
   * @return {Vector3} the shift direction vector
   */
  BondProxy.prototype.calculateShiftDir = function calculateShiftDir (v) {
          if ( v === void 0 ) v = new Vector3();

      var ap1 = this._ap1;
      var ap2 = this._ap2;
      var ap3 = this._ap3;
      var v12 = this._v12;
      var v13 = this._v13;
      ap1.index = this.atomIndex1;
      ap2.index = this.atomIndex2;
      var ai3 = this.getReferenceAtomIndex();
      v12.subVectors(ap1, ap2).normalize(); // TODO
      if (ai3 !== undefined) {
          ap3.index = ai3;
          v13.subVectors(ap1, ap3); // TODO
      }
      else {
          v13.copy(ap1); // no reference point, use origin  // TODO
      }
      v13.normalize();
      // make sure v13 and v12 are not colinear
      var dp = v12.dot(v13);
      if (1 - Math.abs(dp) < 1e-5) {
          v13.set(1, 0, 0);
          dp = v12.dot(v13);
          if (1 - Math.abs(dp) < 1e-5) {
              v13.set(0, 1, 0);
              dp = v12.dot(v13);
          }
      }
      return v.copy(v13.sub(v12.multiplyScalar(dp))).normalize();
  };
  BondProxy.prototype.qualifiedName = function qualifiedName () {
      return this.atomIndex1 + '=' + this.atomIndex2;
  };
  /**
   * Clone object
   * @return {BondProxy} cloned bond
   */
  BondProxy.prototype.clone = function clone () {
      return new BondProxy(this.structure, this.index);
  };
  BondProxy.prototype.toObject = function toObject () {
      return {
          atomIndex1: this.atomIndex1,
          atomIndex2: this.atomIndex2,
          bondOrder: this.bondOrder
      };
  };

  Object.defineProperties( BondProxy.prototype, prototypeAccessors$h );

  /**
   * @file Residue Proxy
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Residue proxy
   */
  var ResidueProxy = function ResidueProxy(structure, index) {
      if ( index === void 0 ) index = 0;

      this.structure = structure;
      this.index = index;
      this.chainStore = structure.chainStore;
      this.residueStore = structure.residueStore;
      this.atomStore = structure.atomStore;
      this.residueMap = structure.residueMap;
      this.atomMap = structure.atomMap;
  };

  var prototypeAccessors$g = { entity: { configurable: true },entityIndex: { configurable: true },chain: { configurable: true },chainIndex: { configurable: true },atomOffset: { configurable: true },atomCount: { configurable: true },atomEnd: { configurable: true },modelIndex: { configurable: true },chainname: { configurable: true },chainid: { configurable: true },resno: { configurable: true },sstruc: { configurable: true },inscode: { configurable: true },residueType: { configurable: true },resname: { configurable: true },hetero: { configurable: true },moleculeType: { configurable: true },backboneType: { configurable: true },backboneStartType: { configurable: true },backboneEndType: { configurable: true },traceAtomIndex: { configurable: true },direction1AtomIndex: { configurable: true },direction2AtomIndex: { configurable: true },backboneStartAtomIndex: { configurable: true },backboneEndAtomIndex: { configurable: true },rungEndAtomIndex: { configurable: true },x: { configurable: true },y: { configurable: true },z: { configurable: true } };
  /**
   * Entity
   * @type {Entity}
   */
  prototypeAccessors$g.entity.get = function () {
      return this.structure.entityList[this.entityIndex];
  };
  prototypeAccessors$g.entityIndex.get = function () {
      return this.chainStore.entityIndex[this.chainIndex];
  };
  /**
   * Chain
   * @type {ChainProxy}
   */
  prototypeAccessors$g.chain.get = function () {
      return this.structure.getChainProxy(this.chainIndex);
  };
  prototypeAccessors$g.chainIndex.get = function () {
      return this.residueStore.chainIndex[this.index];
  };
  prototypeAccessors$g.chainIndex.set = function (value) {
      this.residueStore.chainIndex[this.index] = value;
  };
  prototypeAccessors$g.atomOffset.get = function () {
      return this.residueStore.atomOffset[this.index];
  };
  prototypeAccessors$g.atomOffset.set = function (value) {
      this.residueStore.atomOffset[this.index] = value;
  };
  /**
   * Atom count
   * @type {Integer}
   */
  prototypeAccessors$g.atomCount.get = function () {
      return this.residueStore.atomCount[this.index];
  };
  prototypeAccessors$g.atomCount.set = function (value) {
      this.residueStore.atomCount[this.index] = value;
  };
  prototypeAccessors$g.atomEnd.get = function () {
      return this.atomOffset + this.atomCount - 1;
  };
  //
  prototypeAccessors$g.modelIndex.get = function () {
      return this.chainStore.modelIndex[this.chainIndex];
  };
  /**
   * Chain name
   * @type {String}
   */
  prototypeAccessors$g.chainname.get = function () {
      return this.chainStore.getChainname(this.chainIndex);
  };
  /**
   * Chain id
   * @type {String}
   */
  prototypeAccessors$g.chainid.get = function () {
      return this.chainStore.getChainid(this.chainIndex);
  };
  //
  /**
   * Residue number/label
   * @type {Integer}
   */
  prototypeAccessors$g.resno.get = function () {
      return this.residueStore.resno[this.index];
  };
  prototypeAccessors$g.resno.set = function (value) {
      this.residueStore.resno[this.index] = value;
  };
  /**
   * Secondary structure code
   * @type {String}
   */
  prototypeAccessors$g.sstruc.get = function () {
      return this.residueStore.getSstruc(this.index);
  };
  prototypeAccessors$g.sstruc.set = function (value) {
      this.residueStore.setSstruc(this.index, value);
  };
  /**
   * Insertion code
   * @type {String}
   */
  prototypeAccessors$g.inscode.get = function () {
      return this.residueStore.getInscode(this.index);
  };
  prototypeAccessors$g.inscode.set = function (value) {
      this.residueStore.setInscode(this.index, value);
  };
  //
  prototypeAccessors$g.residueType.get = function () {
      return this.residueMap.get(this.residueStore.residueTypeId[this.index]);
  };
  /**
   * Residue name
   * @type {String}
   */
  prototypeAccessors$g.resname.get = function () {
      return this.residueType.resname;
  };
  /**
   * Hetero flag
   * @type {Boolean}
   */
  prototypeAccessors$g.hetero.get = function () {
      return this.residueType.hetero;
  };
  prototypeAccessors$g.moleculeType.get = function () {
      return this.residueType.moleculeType;
  };
  prototypeAccessors$g.backboneType.get = function () {
      return this.residueType.backboneType;
  };
  prototypeAccessors$g.backboneStartType.get = function () {
      return this.residueType.backboneStartType;
  };
  prototypeAccessors$g.backboneEndType.get = function () {
      return this.residueType.backboneEndType;
  };
  prototypeAccessors$g.traceAtomIndex.get = function () {
      return this.residueType.traceAtomIndex + this.atomOffset;
  };
  prototypeAccessors$g.direction1AtomIndex.get = function () {
      return this.residueType.direction1AtomIndex + this.atomOffset;
  };
  prototypeAccessors$g.direction2AtomIndex.get = function () {
      return this.residueType.direction2AtomIndex + this.atomOffset;
  };
  prototypeAccessors$g.backboneStartAtomIndex.get = function () {
      return this.residueType.backboneStartAtomIndex + this.atomOffset;
  };
  prototypeAccessors$g.backboneEndAtomIndex.get = function () {
      return this.residueType.backboneEndAtomIndex + this.atomOffset;
  };
  prototypeAccessors$g.rungEndAtomIndex.get = function () {
      return this.residueType.rungEndAtomIndex + this.atomOffset;
  };
  //
  prototypeAccessors$g.x.get = function () {
      var x = 0;
      for (var i = this.atomOffset; i <= this.atomEnd; ++i) {
          x += this.atomStore.x[i];
      }
      return x / this.atomCount;
  };
  prototypeAccessors$g.y.get = function () {
      var y = 0;
      for (var i = this.atomOffset; i <= this.atomEnd; ++i) {
          y += this.atomStore.y[i];
      }
      return y / this.atomCount;
  };
  prototypeAccessors$g.z.get = function () {
      var z = 0;
      for (var i = this.atomOffset; i <= this.atomEnd; ++i) {
          z += this.atomStore.z[i];
      }
      return z / this.atomCount;
  };
  //
  /**
   * Atom iterator
   * @param  {function(atom: AtomProxy)} callback - the callback
   * @param  {Selection} [selection] - the selection
   * @return {undefined}
   */
  ResidueProxy.prototype.eachAtom = function eachAtom (callback, selection) {
      var count = this.atomCount;
      var offset = this.atomOffset;
      var ap = this.structure._ap;
      var end = offset + count;
      if (selection && selection.atomOnlyTest) {
          var atomOnlyTest = selection.atomOnlyTest;
          for (var i = offset; i < end; ++i) {
              ap.index = i;
              if (atomOnlyTest(ap))
                  { callback(ap); }
          }
      }
      else {
          for (var i$1 = offset; i$1 < end; ++i$1) {
              ap.index = i$1;
              callback(ap);
          }
      }
  };
  //
  /**
   * Write residue center position to array
   * @param  {Array|TypedArray} [array] - target array
   * @param  {Integer} [offset] - the offset
   * @return {Array|TypedArray} target array
   */
  ResidueProxy.prototype.positionToArray = function positionToArray (array, offset) {
          if ( array === void 0 ) array = [];
          if ( offset === void 0 ) offset = 0;

      array[offset + 0] = this.x;
      array[offset + 1] = this.y;
      array[offset + 2] = this.z;
      return array;
  };
  //
  /**
   * If residue is from a protein
   * @return {Boolean} flag
   */
  ResidueProxy.prototype.isProtein = function isProtein () {
      return this.residueType.moleculeType === ProteinType;
  };
  /**
   * If residue is nucleic
   * @return {Boolean} flag
   */
  ResidueProxy.prototype.isNucleic = function isNucleic () {
      var moleculeType = this.residueType.moleculeType;
      return moleculeType === RnaType || moleculeType === DnaType;
  };
  /**
   * If residue is rna
   * @return {Boolean} flag
   */
  ResidueProxy.prototype.isRna = function isRna () {
      return this.residueType.moleculeType === RnaType;
  };
  /**
   * If residue is dna
   * @return {Boolean} flag
   */
  ResidueProxy.prototype.isDna = function isDna () {
      return this.residueType.moleculeType === DnaType;
  };
  /**
   * If residue is coarse-grain
   * @return {Boolean} flag
   */
  ResidueProxy.prototype.isCg = function isCg () {
      var backboneType = this.residueType.backboneType;
      return (backboneType === CgProteinBackboneType ||
          backboneType === CgRnaBackboneType ||
          backboneType === CgDnaBackboneType);
  };
  /**
   * If residue is from a polymer
   * @return {Boolean} flag
   */
  ResidueProxy.prototype.isPolymer = function isPolymer () {
      if (this.structure.entityList.length > 0) {
          return this.entity.isPolymer();
      }
      else {
          var moleculeType = this.residueType.moleculeType;
          return (moleculeType === ProteinType ||
              moleculeType === RnaType ||
              moleculeType === DnaType);
      }
  };
  /**
   * If residue is hetero
   * @return {Boolean} flag
   */
  ResidueProxy.prototype.isHetero = function isHetero () {
      return this.residueType.hetero === 1;
  };
  /**
   * If residue is a water molecule
   * @return {Boolean} flag
   */
  ResidueProxy.prototype.isWater = function isWater () {
      return this.residueType.moleculeType === WaterType;
  };
  /**
   * If residue is an ion
   * @return {Boolean} flag
   */
  ResidueProxy.prototype.isIon = function isIon () {
      return this.residueType.moleculeType === IonType;
  };
  /**
   * If residue is a saccharide
   * @return {Boolean} flag
   */
  ResidueProxy.prototype.isSaccharide = function isSaccharide () {
      return this.residueType.moleculeType === SaccharideType;
  };
  ResidueProxy.prototype.isStandardAminoacid = function isStandardAminoacid () {
      return this.residueType.isStandardAminoacid();
  };
  ResidueProxy.prototype.isStandardBase = function isStandardBase () {
      return this.residueType.isStandardBase();
  };
  /**
   * If residue is part of a helix
   * @return {Boolean} flag
   */
  ResidueProxy.prototype.isHelix = function isHelix () {
      return SecStrucHelix.includes(this.sstruc);
  };
  /**
   * If residue is part of a sheet
   * @return {Boolean} flag
   */
  ResidueProxy.prototype.isSheet = function isSheet () {
      return SecStrucSheet.includes(this.sstruc);
  };
  /**
   * If residue is part of a turn
   * @return {Boolean} flag
   */
  ResidueProxy.prototype.isTurn = function isTurn () {
      return SecStrucTurn.includes(this.sstruc) && this.isProtein();
  };
  ResidueProxy.prototype.getAtomType = function getAtomType (index) {
      return this.atomMap.get(this.atomStore.atomTypeId[index]);
  };
  ResidueProxy.prototype.getResname1 = function getResname1 () {
      // FIXME nucleic support
      return AA1[this.resname.toUpperCase()] || 'X';
  };
  ResidueProxy.prototype.getBackboneType = function getBackboneType (position) {
      switch (position) {
          case -1:
              return this.residueType.backboneStartType;
          case 1:
              return this.residueType.backboneEndType;
          default:
              return this.residueType.backboneType;
      }
  };
  ResidueProxy.prototype.getAtomIndexByName = function getAtomIndexByName (atomname) {
      var index = this.residueType.getAtomIndexByName(atomname);
      if (index !== undefined) {
          index += this.atomOffset;
      }
      return index;
  };
  ResidueProxy.prototype.hasAtomWithName = function hasAtomWithName (atomname) {
      return this.residueType.hasAtomWithName(atomname);
  };
  ResidueProxy.prototype.getAtomnameList = function getAtomnameList () {
      console.warn('getAtomnameList - might be expensive');
      var n = this.atomCount;
      var offset = this.atomOffset;
      var list = new Array(n);
      for (var i = 0; i < n; ++i) {
          list[i] = this.getAtomType(offset + i).atomname;
      }
      return list;
  };
  /**
   * If residue is connected to another
   * @param  {ResidueProxy} rNext - the other residue
   * @return {Boolean} - flag
   */
  ResidueProxy.prototype.connectedTo = function connectedTo (rNext) {
      var bbAtomEnd = this.structure.getAtomProxy(this.backboneEndAtomIndex);
      var bbAtomStart = this.structure.getAtomProxy(rNext.backboneStartAtomIndex);
      if (bbAtomEnd && bbAtomStart) {
          return bbAtomEnd.connectedTo(bbAtomStart);
      }
      else {
          return false;
      }
  };
  ResidueProxy.prototype.getNextConnectedResidue = function getNextConnectedResidue () {
      var rOffset = this.chainStore.residueOffset[this.chainIndex];
      var rCount = this.chainStore.residueCount[this.chainIndex];
      var nextIndex = this.index + 1;
      if (nextIndex < rOffset + rCount) {
          var rpNext = this.structure.getResidueProxy(nextIndex);
          if (this.connectedTo(rpNext)) {
              return rpNext;
          }
      }
      else if (nextIndex === rOffset + rCount) { // cyclic
          var rpFirst = this.structure.getResidueProxy(rOffset);
          if (this.connectedTo(rpFirst)) {
              return rpFirst;
          }
      }
      return undefined;
  };
  ResidueProxy.prototype.getPreviousConnectedResidue = function getPreviousConnectedResidue (residueProxy) {
      var rOffset = this.chainStore.residueOffset[this.chainIndex];
      var prevIndex = this.index - 1;
      if (prevIndex >= rOffset) {
          var rpPrev = defaults(residueProxy, this.structure.getResidueProxy());
          rpPrev.index = prevIndex;
          if (rpPrev.connectedTo(this)) {
              return rpPrev;
          }
      }
      else if (prevIndex === rOffset - 1) { // cyclic
          var rCount = this.chainStore.residueCount[this.chainIndex];
          var rpLast = defaults(residueProxy, this.structure.getResidueProxy());
          rpLast.index = rOffset + rCount - 1;
          if (rpLast.connectedTo(this)) {
              return rpLast;
          }
      }
      return undefined;
  };
  ResidueProxy.prototype.getBonds = function getBonds () {
      return this.residueType.getBonds(this);
  };
  ResidueProxy.prototype.getRings = function getRings () {
      return this.residueType.getRings();
  };
  ResidueProxy.prototype.getAromaticRings = function getAromaticRings () {
      return this.residueType.getAromaticRings(this);
  };
  ResidueProxy.prototype.qualifiedName = function qualifiedName (noResname) {
          if ( noResname === void 0 ) noResname = false;

      var name = '';
      if (this.resname && !noResname)
          { name += '[' + this.resname + ']'; }
      if (this.resno !== undefined)
          { name += this.resno; }
      if (this.inscode)
          { name += '^' + this.inscode; }
      if (this.chain)
          { name += ':' + this.chainname; }
      name += '/' + this.modelIndex;
      return name;
  };
  /**
   * Clone object
   * @return {ResidueProxy} cloned residue
   */
  ResidueProxy.prototype.clone = function clone () {
      return new ResidueProxy(this.structure, this.index);
  };
  ResidueProxy.prototype.toObject = function toObject () {
      return {
          index: this.index,
          chainIndex: this.chainIndex,
          atomOffset: this.atomOffset,
          atomCount: this.atomCount,
          resno: this.resno,
          resname: this.resname,
          sstruc: this.sstruc
      };
  };

  Object.defineProperties( ResidueProxy.prototype, prototypeAccessors$g );

  /**
   * @file Polymer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Polymer
   */
  var Polymer = function Polymer(structure, residueIndexStart, residueIndexEnd) {
      this.structure = structure;
      this.residueIndexStart = residueIndexStart;
      this.residueIndexEnd = residueIndexEnd;
      this.chainStore = structure.chainStore;
      this.residueStore = structure.residueStore;
      this.atomStore = structure.atomStore;
      /**
       * @type {Integer}
       */
      this.residueCount = residueIndexEnd - residueIndexStart + 1;
      var rpStart = this.structure.getResidueProxy(this.residueIndexStart);
      var rpEnd = this.structure.getResidueProxy(this.residueIndexEnd);
      this.isPrevConnected = rpStart.getPreviousConnectedResidue() !== undefined;
      var rpNext = rpEnd.getNextConnectedResidue();
      this.isNextConnected = rpNext !== undefined;
      this.isNextNextConnected = rpNext !== undefined && rpNext.getNextConnectedResidue() !== undefined;
      this.isCyclic = rpEnd.connectedTo(rpStart);
      this.__residueProxy = this.structure.getResidueProxy();
      // console.log( this.qualifiedName(), this );
  };

  var prototypeAccessors$f = { chainIndex: { configurable: true },modelIndex: { configurable: true },chainname: { configurable: true } };
  prototypeAccessors$f.chainIndex.get = function () {
      return this.residueStore.chainIndex[this.residueIndexStart];
  };
  prototypeAccessors$f.modelIndex.get = function () {
      return this.chainStore.modelIndex[this.chainIndex];
  };
  /**
   * @type {String}
   */
  prototypeAccessors$f.chainname.get = function () {
      return this.chainStore.getChainname(this.chainIndex);
  };
  //
  /**
   * If first residue is from aprotein
   * @return {Boolean} flag
   */
  Polymer.prototype.isProtein = function isProtein () {
      this.__residueProxy.index = this.residueIndexStart;
      return this.__residueProxy.isProtein();
  };
  /**
   * If atom is part of a coarse-grain group
   * @return {Boolean} flag
   */
  Polymer.prototype.isCg = function isCg () {
      this.__residueProxy.index = this.residueIndexStart;
      return this.__residueProxy.isCg();
  };
  /**
   * If atom is part of a nucleic molecule
   * @return {Boolean} flag
   */
  Polymer.prototype.isNucleic = function isNucleic () {
      this.__residueProxy.index = this.residueIndexStart;
      return this.__residueProxy.isNucleic();
  };
  Polymer.prototype.getMoleculeType = function getMoleculeType () {
      this.__residueProxy.index = this.residueIndexStart;
      return this.__residueProxy.moleculeType;
  };
  Polymer.prototype.getBackboneType = function getBackboneType (position) {
      this.__residueProxy.index = this.residueIndexStart;
      return this.__residueProxy.getBackboneType(position);
  };
  Polymer.prototype.getAtomIndexByType = function getAtomIndexByType (index, type) {
      // TODO pre-calculate, add to residueStore???
      if (this.isCyclic) {
          if (index === -1) {
              index = this.residueCount - 1;
          }
          else if (index === this.residueCount) {
              index = 0;
          }
      }
      else {
          if (index === -1 && !this.isPrevConnected)
              { index += 1; }
          if (index === this.residueCount && !this.isNextNextConnected)
              { index -= 1; }
          // if( index === this.residueCount - 1 && !this.isNextConnected ) index -= 1;
      }
      var rp = this.__residueProxy;
      rp.index = this.residueIndexStart + index;
      var aIndex;
      switch (type) {
          case 'trace':
              aIndex = rp.traceAtomIndex;
              break;
          case 'direction1':
              aIndex = rp.direction1AtomIndex;
              break;
          case 'direction2':
              aIndex = rp.direction2AtomIndex;
              break;
          default:
              aIndex = rp.getAtomIndexByName(type);
      }
      // if (!ap){
      //   console.log(this, type, rp.residueType)
      //   // console.log(rp.qualifiedName(), rp.index, index, this.residueCount - 1)
      //   // rp.index = this.residueIndexStart;
      //   // console.log(rp.qualifiedName(), this.residueIndexStart)
      //   // rp.index = this.residueIndexEnd;
      //   // console.log(rp.qualifiedName(), this.residueIndexEnd)
      // }
      return aIndex;
  };
  /**
   * Atom iterator
   * @param  {function(atom: AtomProxy)} callback - the callback
   * @param  {Selection} [selection] - the selection
   * @return {undefined}
   */
  Polymer.prototype.eachAtom = function eachAtom (callback, selection) {
      this.eachResidue(function (rp) {
          rp.eachAtom(callback, selection);
      });
  };
  Polymer.prototype.eachAtomN = function eachAtomN (n, callback, type) {
      var m = this.residueCount;
      var array = new Array(n);
      for (var i = 0; i < n; ++i) {
          array[i] = this.structure.getAtomProxy(this.getAtomIndexByType(i, type));
      }
      callback.apply(this, array);
      for (var j = n; j < m; ++j) {
          for (var i$1 = 1; i$1 < n; ++i$1) {
              array[i$1 - 1].index = array[i$1].index;
          }
          array[n - 1].index = this.getAtomIndexByType(j, type); // TODO
          callback.apply(this, array);
      }
  };
  /**
   * Residue iterator
   * @param  {function(residue: ResidueProxy)} callback - the callback
   * @return {undefined}
   */
  Polymer.prototype.eachResidue = function eachResidue (callback) {
      var rp = this.structure.getResidueProxy();
      var n = this.residueCount;
      var rStartIndex = this.residueIndexStart;
      for (var i = 0; i < n; ++i) {
          rp.index = rStartIndex + i;
          callback(rp);
      }
  };
  Polymer.prototype.qualifiedName = function qualifiedName () {
      var rpStart = this.structure.getResidueProxy(this.residueIndexStart);
      var rpEnd = this.structure.getResidueProxy(this.residueIndexEnd);
      return rpStart.qualifiedName() + ' - ' + rpEnd.qualifiedName();
  };

  Object.defineProperties( Polymer.prototype, prototypeAccessors$f );

  /**
   * @file Chain Proxy
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Chain proxy
   */
  var ChainProxy = function ChainProxy(structure, index) {
      if ( index === void 0 ) index = 0;

      this.structure = structure;
      this.index = index;
      this.chainStore = structure.chainStore;
      this.residueStore = structure.residueStore;
  };

  var prototypeAccessors$e = { entity: { configurable: true },model: { configurable: true },entityIndex: { configurable: true },modelIndex: { configurable: true },residueOffset: { configurable: true },residueCount: { configurable: true },residueEnd: { configurable: true },atomOffset: { configurable: true },atomEnd: { configurable: true },atomCount: { configurable: true },chainname: { configurable: true },chainid: { configurable: true } };
  /**
   * Entity
   * @type {Entity}
   */
  prototypeAccessors$e.entity.get = function () {
      return this.structure.entityList[this.entityIndex];
  };
  /**
   * Model
   * @type {ModelProxy}
   */
  prototypeAccessors$e.model.get = function () {
      return this.structure.getModelProxy(this.modelIndex);
  };
  prototypeAccessors$e.entityIndex.get = function () {
      return this.chainStore.entityIndex[this.index];
  };
  prototypeAccessors$e.entityIndex.set = function (value) {
      this.chainStore.entityIndex[this.index] = value;
  };
  prototypeAccessors$e.modelIndex.get = function () {
      return this.chainStore.modelIndex[this.index];
  };
  prototypeAccessors$e.modelIndex.set = function (value) {
      this.chainStore.modelIndex[this.index] = value;
  };
  prototypeAccessors$e.residueOffset.get = function () {
      return this.chainStore.residueOffset[this.index];
  };
  prototypeAccessors$e.residueOffset.set = function (value) {
      this.chainStore.residueOffset[this.index] = value;
  };
  /**
   * Residue count
   * @type {Integer}
   */
  prototypeAccessors$e.residueCount.get = function () {
      return this.chainStore.residueCount[this.index];
  };
  prototypeAccessors$e.residueCount.set = function (value) {
      this.chainStore.residueCount[this.index] = value;
  };
  prototypeAccessors$e.residueEnd.get = function () {
      return this.residueOffset + this.residueCount - 1;
  };
  prototypeAccessors$e.atomOffset.get = function () {
      return this.residueStore.atomOffset[this.residueOffset];
  };
  prototypeAccessors$e.atomEnd.get = function () {
      return (this.residueStore.atomOffset[this.residueEnd] +
          this.residueStore.atomCount[this.residueEnd] - 1);
  };
  /**
   * Atom count
   * @type {Integer}
   */
  prototypeAccessors$e.atomCount.get = function () {
      if (this.residueCount === 0) {
          return 0;
      }
      else {
          return this.atomEnd - this.atomOffset + 1;
      }
  };
  //
  /**
   * Chain name
   * @type {String}
   */
  prototypeAccessors$e.chainname.get = function () {
      return this.chainStore.getChainname(this.index);
  };
  prototypeAccessors$e.chainname.set = function (value) {
      this.chainStore.setChainname(this.index, value);
  };
  /**
   * Chain id
   * @type {String}
   */
  prototypeAccessors$e.chainid.get = function () {
      return this.chainStore.getChainid(this.index);
  };
  prototypeAccessors$e.chainid.set = function (value) {
      this.chainStore.setChainid(this.index, value);
  };
  //
  /**
   * Atom iterator
   * @param  {function(atom: AtomProxy)} callback - the callback
   * @param  {Selection} [selection] - the selection
   * @return {undefined}
   */
  ChainProxy.prototype.eachAtom = function eachAtom (callback, selection) {
      this.eachResidue(function (rp) {
          rp.eachAtom(callback, selection);
      }, selection);
  };
  /**
   * Residue iterator
   * @param  {function(residue: ResidueProxy)} callback - the callback
   * @param  {Selection} [selection] - the selection
   * @return {undefined}
   */
  ChainProxy.prototype.eachResidue = function eachResidue (callback, selection) {
      var count = this.residueCount;
      var offset = this.residueOffset;
      var rp = this.structure._rp;
      var end = offset + count;
      if (selection && selection.test) {
          var residueOnlyTest = selection.residueOnlyTest;
          if (residueOnlyTest) {
              for (var i = offset; i < end; ++i) {
                  rp.index = i;
                  if (residueOnlyTest(rp)) {
                      callback(rp);
                  }
              }
          }
          else {
              for (var i$1 = offset; i$1 < end; ++i$1) {
                  rp.index = i$1;
                  callback(rp);
              }
          }
      }
      else {
          for (var i$2 = offset; i$2 < end; ++i$2) {
              rp.index = i$2;
              callback(rp);
          }
      }
  };
  /**
   * Multi-residue iterator
   * @param {Integer} n - window size
   * @param  {function(residueList: ResidueProxy[])} callback - the callback
   * @return {undefined}
   */
  ChainProxy.prototype.eachResidueN = function eachResidueN (n, callback) {
      var count = this.residueCount;
      var offset = this.residueOffset;
      var end = offset + count;
      if (count < n)
          { return; }
      var array = new Array(n);
      for (var i = 0; i < n; ++i) {
          array[i] = this.structure.getResidueProxy(offset + i);
      }
      callback.apply(this, array);
      for (var j = offset + n; j < end; ++j) {
          for (var i$1 = 0; i$1 < n; ++i$1) {
              array[i$1].index += 1;
          }
          callback.apply(this, array);
      }
  };
  /**
   * Polymer iterator
   * @param  {function(polymer: Polymer)} callback - the callback
   * @param  {Selection} [selection] - the selection
   * @return {undefined}
   */
  ChainProxy.prototype.eachPolymer = function eachPolymer (callback, selection) {
      var rStartIndex = 0;
      var rNextIndex = 0;
      var test = selection ? selection.residueOnlyTest : undefined;
      var structure = this.model.structure;
      var count = this.residueCount;
      var offset = this.residueOffset;
      var end = offset + count;
      var rp1 = this.structure.getResidueProxy();
      var rp2 = this.structure.getResidueProxy(offset);
      var ap1 = this.structure.getAtomProxy();
      var ap2 = this.structure.getAtomProxy();
      var first = true;
      for (var i = offset + 1; i < end; ++i) {
          rp1.index = rp2.index;
          rp2.index = i;
          var bbType1 = first ? rp1.backboneEndType : rp1.backboneType;
          var bbType2 = rp2.backboneType;
          if (first) {
              rStartIndex = rp1.index;
              first = false;
          }
          rNextIndex = rp2.index;
          if (bbType1 !== UnknownBackboneType && bbType1 === bbType2) {
              ap1.index = rp1.backboneEndAtomIndex;
              ap2.index = rp2.backboneStartAtomIndex;
          }
          else {
              if (bbType1 !== UnknownBackboneType) {
                  if (rp1.index - rStartIndex > 1) {
                      // console.log("FOO1",rStartIndex, rp1.index)
                      callback(new Polymer(structure, rStartIndex, rp1.index));
                  }
              }
              rStartIndex = rNextIndex;
              continue;
          }
          if (!ap1 || !ap2 || !ap1.connectedTo(ap2) ||
              (test && (!test(rp1) || !test(rp2)))) {
              if (rp1.index - rStartIndex > 1) {
                  // console.log("FOO2",rStartIndex, rp1.index)
                  callback(new Polymer(structure, rStartIndex, rp1.index));
              }
              rStartIndex = rNextIndex;
          }
      }
      if (rNextIndex - rStartIndex > 1) {
          if (this.structure.getResidueProxy(rStartIndex).backboneEndType) {
              // console.log("FOO3",rStartIndex, rNextIndex)
              callback(new Polymer(structure, rStartIndex, rNextIndex));
          }
      }
  };
  //
  ChainProxy.prototype.qualifiedName = function qualifiedName () {
      var name = ':' + this.chainname + '/' + this.modelIndex;
      return name;
  };
  /**
   * Clone object
   * @return {ChainProxy} cloned chain
   */
  ChainProxy.prototype.clone = function clone () {
      return new ChainProxy(this.structure, this.index);
  };
  ChainProxy.prototype.toObject = function toObject () {
      return {
          index: this.index,
          residueOffset: this.residueOffset,
          residueCount: this.residueCount,
          chainname: this.chainname
      };
  };

  Object.defineProperties( ChainProxy.prototype, prototypeAccessors$e );

  /**
   * @file Model Proxy
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Model proxy
   */
  var ModelProxy = function ModelProxy(structure, index) {
      if ( index === void 0 ) index = 0;

      this.structure = structure;
      this.index = index;
      this.modelStore = structure.modelStore;
      this.chainStore = structure.chainStore;
      this.residueStore = structure.residueStore;
  };

  var prototypeAccessors$d = { chainOffset: { configurable: true },chainCount: { configurable: true },residueOffset: { configurable: true },atomOffset: { configurable: true },chainEnd: { configurable: true },residueEnd: { configurable: true },atomEnd: { configurable: true },residueCount: { configurable: true },atomCount: { configurable: true } };
  prototypeAccessors$d.chainOffset.get = function () {
      return this.modelStore.chainOffset[this.index];
  };
  prototypeAccessors$d.chainOffset.set = function (value) {
      this.modelStore.chainOffset[this.index] = value;
  };
  prototypeAccessors$d.chainCount.get = function () {
      return this.modelStore.chainCount[this.index];
  };
  prototypeAccessors$d.chainCount.set = function (value) {
      this.modelStore.chainCount[this.index] = value;
  };
  prototypeAccessors$d.residueOffset.get = function () {
      return this.chainStore.residueOffset[this.chainOffset];
  };
  prototypeAccessors$d.atomOffset.get = function () {
      return this.residueStore.atomOffset[this.residueOffset];
  };
  prototypeAccessors$d.chainEnd.get = function () {
      return this.chainOffset + this.chainCount - 1;
  };
  prototypeAccessors$d.residueEnd.get = function () {
      return (this.chainStore.residueOffset[this.chainEnd] +
          this.chainStore.residueCount[this.chainEnd] - 1);
  };
  prototypeAccessors$d.atomEnd.get = function () {
      return (this.residueStore.atomOffset[this.residueEnd] +
          this.residueStore.atomCount[this.residueEnd] - 1);
  };
  /**
   * Residue count
   * @type {Integer}
   */
  prototypeAccessors$d.residueCount.get = function () {
      if (this.chainCount === 0) {
          return 0;
      }
      else {
          return this.residueEnd - this.residueOffset + 1;
      }
  };
  /**
   * Atom count
   * @type {Integer}
   */
  prototypeAccessors$d.atomCount.get = function () {
      if (this.residueCount === 0) {
          return 0;
      }
      else {
          return this.atomEnd - this.atomOffset + 1;
      }
  };
  //
  /**
   * Atom iterator
   * @param  {function(atom: AtomProxy)} callback - the callback
   * @param  {Selection} [selection] - the selection
   * @return {undefined}
   */
  ModelProxy.prototype.eachAtom = function eachAtom (callback, selection) {
      this.eachChain(function (cp) {
          cp.eachAtom(callback, selection);
      }, selection);
  };
  /**
   * Residue iterator
   * @param  {function(residue: ResidueProxy)} callback - the callback
   * @param  {Selection} [selection] - the selection
   * @return {undefined}
   */
  ModelProxy.prototype.eachResidue = function eachResidue (callback, selection) {
      this.eachChain(function (cp) {
          cp.eachResidue(callback, selection);
      }, selection);
  };
  /**
   * Polymer iterator
   * @param  {function(polymer: Polymer)} callback - the callback
   * @param  {Selection} [selection] - the selection
   * @return {undefined}
   */
  ModelProxy.prototype.eachPolymer = function eachPolymer (callback, selection) {
      if (selection && selection.chainOnlyTest) {
          var chainOnlyTest = selection.chainOnlyTest;
          this.eachChain(function (cp) {
              if (chainOnlyTest(cp)) {
                  cp.eachPolymer(callback, selection);
              }
          });
      }
      else {
          this.eachChain(function (cp) {
              cp.eachPolymer(callback, selection);
          });
      }
  };
  /**
   * Chain iterator
   * @param  {function(chain: ChainProxy)} callback - the callback
   * @param  {Selection} [selection] - the selection
   * @return {undefined}
   */
  ModelProxy.prototype.eachChain = function eachChain (callback, selection) {
      var count = this.chainCount;
      var offset = this.chainOffset;
      var cp = this.structure._cp;
      var end = offset + count;
      if (selection && selection.test) {
          var chainOnlyTest = selection.chainOnlyTest;
          if (chainOnlyTest) {
              for (var i = offset; i < end; ++i) {
                  cp.index = i;
                  if (chainOnlyTest(cp)) {
                      callback(cp);
                  }
              }
          }
          else {
              for (var i$1 = offset; i$1 < end; ++i$1) {
                  cp.index = i$1;
                  callback(cp);
              }
          }
      }
      else {
          for (var i$2 = offset; i$2 < end; ++i$2) {
              cp.index = i$2;
              callback(cp);
          }
      }
  };
  //
  ModelProxy.prototype.qualifiedName = function qualifiedName () {
      var name = '/' + this.index;
      return name;
  };
  /**
   * Clone object
   * @return {ModelProxy} cloned model
   */
  ModelProxy.prototype.clone = function clone () {
      return new ModelProxy(this.structure, this.index);
  };
  ModelProxy.prototype.toObject = function toObject () {
      return {
          index: this.index,
          chainOffset: this.chainOffset,
          chainCount: this.chainCount
      };
  };

  Object.defineProperties( ModelProxy.prototype, prototypeAccessors$d );

  /**
   * @file Structure
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Structure
   */
  var Structure = function Structure(name, path) {
      if ( name === void 0 ) name = '';
      if ( path === void 0 ) path = '';

      this.signals = {
          refreshed: new signals.Signal()
      };
      this.init(name, path);
  };

  var prototypeAccessors$c = { type: { configurable: true } };
  Structure.prototype.init = function init (name, path) {
      this.name = name;
      this.path = path;
      this.title = '';
      this.id = '';
      this.data = createData(this);
      this.header = {};
      this.extraData = {};
      this.atomSetCache = {};
      this.atomSetDict = {};
      this.biomolDict = {};
      this.entityList = [];
      this.unitcell = undefined;
      this.frames = [];
      this.boxes = [];
      this.validation = undefined;
      this.bondStore = new BondStore(0);
      this.backboneBondStore = new BondStore(0);
      this.rungBondStore = new BondStore(0);
      this.atomStore = new AtomStore(0);
      this.residueStore = new ResidueStore(0);
      this.chainStore = new ChainStore(0);
      this.modelStore = new ModelStore(0);
      this.atomMap = new AtomMap(this);
      this.residueMap = new ResidueMap(this);
      this.bondHash = undefined;
      this.spatialHash = undefined;
      this.atomSet = undefined;
      this.bondSet = undefined;
      this.center = new Vector3();
      this.boundingBox = new Box3();
      this._bp = this.getBondProxy();
      this._ap = this.getAtomProxy();
      this._rp = this.getResidueProxy();
      this._cp = this.getChainProxy();
  };
  prototypeAccessors$c.type.get = function () { return 'Structure'; };
  Structure.prototype.finalizeAtoms = function finalizeAtoms () {
      this.atomSet = this.getAtomSet();
      this.atomCount = this.atomStore.count;
      this.boundingBox = this.getBoundingBox(undefined, this.boundingBox);
      this.center = this.boundingBox.getCenter(new Vector3());
      this.spatialHash = new SpatialHash(this.atomStore, this.boundingBox);
  };
  Structure.prototype.finalizeBonds = function finalizeBonds () {
      this.bondSet = this.getBondSet();
      this.bondCount = this.bondStore.count;
      this.bondHash = new BondHash(this.bondStore, this.atomStore.count);
      this.atomSetCache = {};
      if (!this.atomSetDict.rung) {
          this.atomSetDict.rung = this.getAtomSet(false);
      }
      for (var name in this.atomSetDict) {
          this.atomSetCache['__' + name] = this.atomSetDict[name].clone();
      }
  };
  //
  Structure.prototype.getBondProxy = function getBondProxy (index) {
      return new BondProxy(this, index);
  };
  Structure.prototype.getAtomProxy = function getAtomProxy (index) {
      return new AtomProxy(this, index);
  };
  Structure.prototype.getResidueProxy = function getResidueProxy (index) {
      return new ResidueProxy(this, index);
  };
  Structure.prototype.getChainProxy = function getChainProxy (index) {
      return new ChainProxy(this, index);
  };
  Structure.prototype.getModelProxy = function getModelProxy (index) {
      return new ModelProxy(this, index);
  };
  //
  Structure.prototype.getBondSet = function getBondSet ( /* selection */) {
      // TODO implement selection parameter
      var n = this.bondStore.count;
      var bondSet = new BitArray(n);
      var atomSet = this.atomSet;
      if (atomSet) {
          if (atomSet.isAllSet()) {
              bondSet.setAll();
          }
          else if (atomSet.isAllClear()) {
              bondSet.clearAll();
          }
          else {
              var bp = this.getBondProxy();
              for (var i = 0; i < n; ++i) {
                  bp.index = i;
                  if (atomSet.isSet(bp.atomIndex1, bp.atomIndex2)) {
                      bondSet.set(bp.index);
                  }
              }
          }
      }
      else {
          bondSet.setAll();
      }
      return bondSet;
  };
  Structure.prototype.getBackboneBondSet = function getBackboneBondSet ( /* selection */) {
      // TODO implement selection parameter
      var n = this.backboneBondStore.count;
      var backboneBondSet = new BitArray(n);
      var backboneAtomSet = this.atomSetCache.__backbone;
      if (backboneAtomSet) {
          var bp = this.getBondProxy();
          bp.bondStore = this.backboneBondStore;
          for (var i = 0; i < n; ++i) {
              bp.index = i;
              if (backboneAtomSet.isSet(bp.atomIndex1, bp.atomIndex2)) {
                  backboneBondSet.set(bp.index);
              }
          }
      }
      else {
          backboneBondSet.setAll();
      }
      return backboneBondSet;
  };
  Structure.prototype.getRungBondSet = function getRungBondSet ( /* selection */) {
      // TODO implement selection parameter
      var n = this.rungBondStore.count;
      var rungBondSet = new BitArray(n);
      var rungAtomSet = this.atomSetCache.__rung;
      if (rungAtomSet) {
          var bp = this.getBondProxy();
          bp.bondStore = this.rungBondStore;
          for (var i = 0; i < n; ++i) {
              bp.index = i;
              if (rungAtomSet.isSet(bp.atomIndex1, bp.atomIndex2)) {
                  rungBondSet.set(bp.index);
              }
          }
      }
      else {
          rungBondSet.setAll();
      }
      return rungBondSet;
  };
  /**
   * Get a set of atoms
   * @param  {Boolean|Selection|BitArray} selection - object defining how to
   *                                  initialize the atom set.
   *                                  Boolean: init with value;
   *                                  Selection: init with selection;
   *                                  BitArray: return bit array
   * @return {BitArray} set of atoms
   */
  Structure.prototype.getAtomSet = function getAtomSet (selection) {
      var n = this.atomStore.count;
      if (selection === undefined) {
          return new BitArray(n, true);
      }
      else if (selection instanceof BitArray) {
          return selection;
      }
      else if (selection === true) {
          return new BitArray(n, true);
      }
      else if (selection && selection.test) {
          var seleString = selection.string;
          if (seleString in this.atomSetCache) {
              return this.atomSetCache[seleString];
          }
          else {
              if (seleString === '') {
                  return new BitArray(n, true);
              }
              else {
                  var atomSet = new BitArray(n);
                  this.eachAtom(function (ap) {
                      atomSet.set(ap.index);
                  }, selection);
                  this.atomSetCache[seleString] = atomSet;
                  return atomSet;
              }
          }
      }
      else if (selection === false) {
          return new BitArray(n);
      }
      return new BitArray(n, true);
  };
  /**
   * Get set of atoms around a set of atoms from a selection
   * @param  {Selection} selection - the selection object
   * @param  {Number} radius - radius to select within
   * @return {BitArray} set of atoms
   */
  Structure.prototype.getAtomSetWithinSelection = function getAtomSetWithinSelection (selection, radius) {
      var spatialHash = this.spatialHash;
      var atomSet = this.getAtomSet(false);
      var ap = this.getAtomProxy();
      if (!spatialHash)
          { return atomSet; }
      this.getAtomSet(selection).forEach(function (idx) {
          ap.index = idx;
          spatialHash.within(ap.x, ap.y, ap.z, radius).forEach(function (idx2) {
              atomSet.set(idx2);
          });
      });
      return atomSet;
  };
  /**
   * Get set of atoms around a point
   * @param  {Vector3|AtomProxy} point - the point
   * @param  {Number} radius - radius to select within
   * @return {BitArray} set of atoms
   */
  Structure.prototype.getAtomSetWithinPoint = function getAtomSetWithinPoint (point, radius) {
      var p = point;
      var atomSet = this.getAtomSet(false);
      if (!this.spatialHash)
          { return atomSet; }
      this.spatialHash.within(p.x, p.y, p.z, radius).forEach(function (idx) {
          atomSet.set(idx);
      });
      return atomSet;
  };
  /**
   * Get set of atoms within a volume
   * @param  {Volume} volume - the volume
   * @param  {Number} radius - radius to select within
   * @param  {[type]} minValue - minimum value to be considered as within the volume
   * @param  {[type]} maxValue - maximum value to be considered as within the volume
   * @param  {[type]} outside - use only values falling outside of the min/max values
   * @return {BitArray} set of atoms
   */
  Structure.prototype.getAtomSetWithinVolume = function getAtomSetWithinVolume (volume, radius, minValue, maxValue, outside) {
      var fv = new FilteredVolume(volume, minValue, maxValue, outside); // TODO
      var dp = fv.getDataPosition();
      var n = dp.length;
      var r = fv.matrix.getMaxScaleOnAxis();
      var atomSet = this.getAtomSet(false);
      if (!this.spatialHash)
          { return atomSet; }
      for (var i = 0; i < n; i += 3) {
          this.spatialHash.within(dp[i], dp[i + 1], dp[i + 2], r).forEach(function (idx) {
              atomSet.set(idx);
          });
      }
      return atomSet;
  };
  /**
   * Get set of all atoms within the groups of a selection
   * @param  {Selection} selection - the selection object
   * @return {BitArray} set of atoms
   */
  Structure.prototype.getAtomSetWithinGroup = function getAtomSetWithinGroup (selection) {
      var atomResidueIndex = this.atomStore.residueIndex;
      var atomSet = this.getAtomSet(false);
      var rp = this.getResidueProxy();
      this.getAtomSet(selection).forEach(function (idx) {
          rp.index = atomResidueIndex[idx];
          for (var idx2 = rp.atomOffset; idx2 <= rp.atomEnd; ++idx2) {
              atomSet.set(idx2);
          }
      });
      return atomSet;
  };
  //
  Structure.prototype.getSelection = function getSelection () {
      return;
  };
  Structure.prototype.getStructure = function getStructure () {
      return this;
  };
  /**
   * Entity iterator
   * @param  {function(entity: Entity)} callback - the callback
   * @param  {EntityType} type - entity type
   * @return {undefined}
   */
  Structure.prototype.eachEntity = function eachEntity (callback, type) {
      this.entityList.forEach(function (entity) {
          if (type === undefined || entity.getEntityType() === type) {
              callback(entity);
          }
      });
  };
  /**
   * Bond iterator
   * @param  {function(bond: BondProxy)} callback - the callback
   * @param  {Selection} [selection] - the selection
   * @return {undefined}
   */
  Structure.prototype.eachBond = function eachBond (callback, selection) {
      var bp = this.getBondProxy();
      var bondSet;
      if (selection && selection.test) {
          bondSet = this.getBondSet( /*selection*/);
          if (this.bondSet) {
              bondSet.intersection(this.bondSet);
          }
      }
      if (bondSet) {
          bondSet.forEach(function (index) {
              bp.index = index;
              callback(bp);
          });
      }
      else {
          var n = this.bondStore.count;
          for (var i = 0; i < n; ++i) {
              bp.index = i;
              callback(bp);
          }
      }
  };
  /**
   * Atom iterator
   * @param  {function(atom: AtomProxy)} callback - the callback
   * @param  {Selection} [selection] - the selection
   * @return {undefined}
   */
  Structure.prototype.eachAtom = function eachAtom (callback, selection) {
      if (selection && selection.test) {
          this.eachModel(function (mp) {
              mp.eachAtom(callback, selection);
          }, selection);
      }
      else {
          var an = this.atomStore.count;
          var ap = this.getAtomProxy();
          for (var i = 0; i < an; ++i) {
              ap.index = i;
              callback(ap);
          }
      }
  };
  /**
   * Residue iterator
   * @param  {function(residue: ResidueProxy)} callback - the callback
   * @param  {Selection} [selection] - the selection
   * @return {undefined}
   */
  Structure.prototype.eachResidue = function eachResidue (callback, selection) {
      if (selection && selection.test) {
          var mn = this.modelStore.count;
          var mp = this.getModelProxy();
          var modelOnlyTest = selection.modelOnlyTest;
          if (modelOnlyTest) {
              for (var i = 0; i < mn; ++i) {
                  mp.index = i;
                  if (modelOnlyTest(mp)) {
                      mp.eachResidue(callback, selection);
                  }
              }
          }
          else {
              for (var i$1 = 0; i$1 < mn; ++i$1) {
                  mp.index = i$1;
                  mp.eachResidue(callback, selection);
              }
          }
      }
      else {
          var rn = this.residueStore.count;
          var rp = this.getResidueProxy();
          for (var i$2 = 0; i$2 < rn; ++i$2) {
              rp.index = i$2;
              callback(rp);
          }
      }
  };
  /**
   * Multi-residue iterator
   * @param {Integer} n - window size
   * @param  {function(residueList: ResidueProxy[])} callback - the callback
   * @return {undefined}
   */
  Structure.prototype.eachResidueN = function eachResidueN (n, callback) {
      var rn = this.residueStore.count;
      if (rn < n)
          { return; }
      var array = new Array(n);
      for (var i = 0; i < n; ++i) {
          array[i] = this.getResidueProxy(i);
      }
      callback.apply(this, array);
      for (var j = n; j < rn; ++j) {
          for (var i$1 = 0; i$1 < n; ++i$1) {
              array[i$1].index += 1;
          }
          callback.apply(this, array);
      }
  };
  /**
   * Polymer iterator
   * @param  {function(polymer: Polymer)} callback - the callback
   * @param  {Selection} [selection] - the selection
   * @return {undefined}
   */
  Structure.prototype.eachPolymer = function eachPolymer (callback, selection) {
      if (selection && selection.modelOnlyTest) {
          var modelOnlyTest = selection.modelOnlyTest;
          this.eachModel(function (mp) {
              if (modelOnlyTest(mp)) {
                  mp.eachPolymer(callback, selection);
              }
          });
      }
      else {
          this.eachModel(function (mp) {
              mp.eachPolymer(callback, selection);
          });
      }
  };
  /**
   * Chain iterator
   * @param  {function(chain: ChainProxy)} callback - the callback
   * @param  {Selection} [selection] - the selection
   * @return {undefined}
   */
  Structure.prototype.eachChain = function eachChain (callback, selection) {
      if (selection && selection.test) {
          this.eachModel(function (mp) {
              mp.eachChain(callback, selection);
          });
      }
      else {
          var cn = this.chainStore.count;
          var cp = this.getChainProxy();
          for (var i = 0; i < cn; ++i) {
              cp.index = i;
              callback(cp);
          }
      }
  };
  /**
   * Model iterator
   * @param  {function(model: ModelProxy)} callback - the callback
   * @param  {Selection} [selection] - the selection
   * @return {undefined}
   */
  Structure.prototype.eachModel = function eachModel (callback, selection) {
      var n = this.modelStore.count;
      var mp = this.getModelProxy();
      if (selection && selection.test) {
          var modelOnlyTest = selection.modelOnlyTest;
          if (modelOnlyTest) {
              for (var i = 0; i < n; ++i) {
                  mp.index = i;
                  if (modelOnlyTest(mp)) {
                      callback(mp);
                  }
              }
          }
          else {
              for (var i$1 = 0; i$1 < n; ++i$1) {
                  mp.index = i$1;
                  callback(mp);
              }
          }
      }
      else {
          for (var i$2 = 0; i$2 < n; ++i$2) {
              mp.index = i$2;
              callback(mp);
          }
      }
  };
  //
  Structure.prototype.getAtomData = function getAtomData (params) {
      var p = Object.assign({}, params);
      if (p.colorParams)
          { p.colorParams.structure = this.getStructure(); }
      var what = p.what;
      var atomSet = defaults(p.atomSet, this.atomSet);
      var radiusFactory; // TODO
      var colormaker; // TODO
      var atomData = {};
      var ap = this.getAtomProxy();
      var atomCount = atomSet.getSize();
      if (!what || what.position) {
          atomData.position = new Float32Array(atomCount * 3);
      }
      if ((!what || what.color) && p.colorParams) {
          atomData.color = new Float32Array(atomCount * 3);
          colormaker = ColormakerRegistry.getScheme(p.colorParams);
      }
      if (!what || what.picking) {
          atomData.picking = new AtomPicker(new Float32Array(atomCount), this.getStructure());
      }
      if (!what || what.radius) {
          atomData.radius = new Float32Array(atomCount);
          radiusFactory = new RadiusFactory(p.radiusParams);
      }
      if (!what || what.index) {
          atomData.index = new Uint32Array(atomCount);
      }
      var position = atomData.position;
          var color = atomData.color;
          var picking = atomData.picking;
          var radius = atomData.radius;
          var index = atomData.index;
      atomSet.forEach(function (idx, i) {
          var i3 = i * 3;
          ap.index = idx;
          if (position) {
              ap.positionToArray(position, i3);
          }
          if (color) {
              colormaker.atomColorToArray(ap, color, i3);
          }
          if (picking) {
              picking.array[i] = idx;
          }
          if (radius) {
              radius[i] = radiusFactory.atomRadius(ap);
          }
          if (index) {
              index[i] = idx;
          }
      });
      return atomData;
  };
  Structure.prototype.getBondData = function getBondData (params) {
      var p = Object.assign({}, params);
      if (p.colorParams)
          { p.colorParams.structure = this.getStructure(); }
      var what = p.what;
      var bondSet = defaults(p.bondSet, this.bondSet);
      var multipleBond = defaults(p.multipleBond, 'off');
      var isMulti = multipleBond !== 'off';
      var isOffset = multipleBond === 'offset';
      var bondScale = defaults(p.bondScale, 0.4);
      var bondSpacing = defaults(p.bondSpacing, 1.0);
      var radiusFactory; // TODO
      var colormaker; // TODO
      var bondData = {};
      var bp = this.getBondProxy();
      if (p.bondStore)
          { bp.bondStore = p.bondStore; }
      var ap1 = this.getAtomProxy();
      var ap2 = this.getAtomProxy();
      var bondCount;
      if (isMulti) {
          var storeBondOrder = bp.bondStore.bondOrder;
          bondCount = 0;
          bondSet.forEach(function (index) {
              bondCount += storeBondOrder[index];
          });
      }
      else {
          bondCount = bondSet.getSize();
      }
      if (!what || what.position) {
          bondData.position1 = new Float32Array(bondCount * 3);
          bondData.position2 = new Float32Array(bondCount * 3);
      }
      if ((!what || what.color) && p.colorParams) {
          bondData.color = new Float32Array(bondCount * 3);
          bondData.color2 = new Float32Array(bondCount * 3);
          colormaker = ColormakerRegistry.getScheme(p.colorParams);
      }
      if (!what || what.picking) {
          bondData.picking = new BondPicker(new Float32Array(bondCount), this.getStructure(), p.bondStore);
      }
      if (!what || what.radius || (isMulti && what.position)) {
          radiusFactory = new RadiusFactory(p.radiusParams);
      }
      if (!what || what.radius) {
          bondData.radius = new Float32Array(bondCount);
          if (p.radius2) {
              bondData.radius2 = new Float32Array(bondCount);
          }
      }
      var position1 = bondData.position1;
          var position2 = bondData.position2;
          var color = bondData.color;
          var color2 = bondData.color2;
          var picking = bondData.picking;
          var radius = bondData.radius;
          var radius2 = bondData.radius2;
      var i = 0;
      var j, i3, k, bondOrder, absOffset;
      var multiRadius;
      var vt = new Vector3();
      var vShortening = new Vector3();
      var vShift = new Vector3();
      bondSet.forEach(function (index) {
          i3 = i * 3;
          bp.index = index;
          ap1.index = bp.atomIndex1;
          ap2.index = bp.atomIndex2;
          bondOrder = bp.bondOrder;
          if (position1) {
              if (isMulti && bondOrder > 1) {
                  var atomRadius = radiusFactory.atomRadius(ap1);
                  multiRadius = atomRadius * bondScale / (0.5 * bondOrder);
                  bp.calculateShiftDir(vShift);
                  if (isOffset) {
                      absOffset = 2 * bondSpacing * atomRadius;
                      vShift.multiplyScalar(absOffset);
                      vShift.negate();
                      // Shortening is calculated so that neighbouring double
                      // bonds on tetrahedral geometry (e.g. sulphonamide)
                      // are not quite touching (arccos(1.9 / 2) ~ 109deg)
                      // but don't shorten beyond 10% each end or it looks odd
                      vShortening.subVectors(ap2, ap1).multiplyScalar(// TODO
                      Math.max(0.1, absOffset / 1.88));
                      ap1.positionToArray(position1, i3);
                      ap2.positionToArray(position2, i3);
                      if (bondOrder >= 2) {
                          vt.addVectors(ap1, vShift).add(vShortening).toArray(position1, i3 + 3); // TODO
                          vt.addVectors(ap2, vShift).sub(vShortening).toArray(position2, i3 + 3); // TODO
                          if (bondOrder >= 3) {
                              vt.subVectors(ap1, vShift).add(vShortening).toArray(position1, i3 + 6); // TODO
                              vt.subVectors(ap2, vShift).sub(vShortening).toArray(position2, i3 + 6); // TODO
                          }
                      }
                  }
                  else {
                      absOffset = (bondSpacing - bondScale) * atomRadius;
                      vShift.multiplyScalar(absOffset);
                      if (bondOrder === 2) {
                          vt.addVectors(ap1, vShift).toArray(position1, i3); // TODO
                          vt.subVectors(ap1, vShift).toArray(position1, i3 + 3); // TODO
                          vt.addVectors(ap2, vShift).toArray(position2, i3); // TODO
                          vt.subVectors(ap2, vShift).toArray(position2, i3 + 3); // TODO
                      }
                      else if (bondOrder === 3) {
                          ap1.positionToArray(position1, i3);
                          vt.addVectors(ap1, vShift).toArray(position1, i3 + 3); // TODO
                          vt.subVectors(ap1, vShift).toArray(position1, i3 + 6); // TODO
                          ap2.positionToArray(position2, i3);
                          vt.addVectors(ap2, vShift).toArray(position2, i3 + 3); // TODO
                          vt.subVectors(ap2, vShift).toArray(position2, i3 + 6); // TODO
                      }
                      else {
                          // todo, better fallback
                          ap1.positionToArray(position1, i3);
                          ap2.positionToArray(position2, i3);
                      }
                  }
              }
              else {
                  ap1.positionToArray(position1, i3);
                  ap2.positionToArray(position2, i3);
              }
          }
          if (color && color2) {
              colormaker.bondColorToArray(bp, 1, color, i3);
              colormaker.bondColorToArray(bp, 0, color2, i3);
              if (isMulti && bondOrder > 1) {
                  for (j = 1; j < bondOrder; ++j) {
                      k = j * 3 + i3;
                      copyWithin(color, i3, k, 3);
                      copyWithin(color2, i3, k, 3);
                  }
              }
          }
          if (picking && picking.array) {
              picking.array[i] = index;
              if (isMulti && bondOrder > 1) {
                  for (j = 1; j < bondOrder; ++j) {
                      picking.array[i + j] = index;
                  }
              }
          }
          if (radius) {
              radius[i] = radiusFactory.atomRadius(ap1);
              if (isMulti && bondOrder > 1) {
                  multiRadius = radius[i] * bondScale / (isOffset ? 1 : (0.5 * bondOrder));
                  for (j = isOffset ? 1 : 0; j < bondOrder; ++j) {
                      radius[i + j] = multiRadius;
                  }
              }
          }
          if (radius2) {
              radius2[i] = radiusFactory.atomRadius(ap2);
              if (isMulti && bondOrder > 1) {
                  multiRadius = radius2[i] * bondScale / (isOffset ? 1 : (0.5 * bondOrder));
                  for (j = isOffset ? 1 : 0; j < bondOrder; ++j) {
                      radius2[i + j] = multiRadius;
                  }
              }
          }
          i += isMulti ? bondOrder : 1;
      });
      return bondData;
  };
  Structure.prototype.getBackboneAtomData = function getBackboneAtomData (params) {
      params = Object.assign({
          atomSet: this.atomSetCache.__backbone
      }, params);
      return this.getAtomData(params);
  };
  Structure.prototype.getBackboneBondData = function getBackboneBondData (params) {
      params = Object.assign({
          bondSet: this.getBackboneBondSet(),
          bondStore: this.backboneBondStore
      }, params);
      return this.getBondData(params);
  };
  Structure.prototype.getRungAtomData = function getRungAtomData (params) {
      params = Object.assign({
          atomSet: this.atomSetCache.__rung
      }, params);
      return this.getAtomData(params);
  };
  Structure.prototype.getRungBondData = function getRungBondData (params) {
      params = Object.assign({
          bondSet: this.getRungBondSet(),
          bondStore: this.rungBondStore
      }, params);
      return this.getBondData(params);
  };
  //
  /**
   * Gets the bounding box of the (selected) structure atoms
   * @param  {Selection} [selection] - the selection
   * @param  {Box3} [box] - optional target
   * @return {Vector3} the box
   */
  Structure.prototype.getBoundingBox = function getBoundingBox (selection, box) {
      if (exports.Debug)
          { Log.time('getBoundingBox'); }
      box = box || new Box3();
      var minX = +Infinity;
      var minY = +Infinity;
      var minZ = +Infinity;
      var maxX = -Infinity;
      var maxY = -Infinity;
      var maxZ = -Infinity;
      this.eachAtom(function (ap) {
          var x = ap.x;
          var y = ap.y;
          var z = ap.z;
          if (x < minX)
              { minX = x; }
          if (y < minY)
              { minY = y; }
          if (z < minZ)
              { minZ = z; }
          if (x > maxX)
              { maxX = x; }
          if (y > maxY)
              { maxY = y; }
          if (z > maxZ)
              { maxZ = z; }
      }, selection);
      box.min.set(minX, minY, minZ);
      box.max.set(maxX, maxY, maxZ);
      if (exports.Debug)
          { Log.timeEnd('getBoundingBox'); }
      return box;
  };
  /**
   * Gets the principal axes of the (selected) structure atoms
   * @param  {Selection} [selection] - the selection
   * @return {PrincipalAxes} the principal axes
   */
  Structure.prototype.getPrincipalAxes = function getPrincipalAxes (selection) {
      if (exports.Debug)
          { Log.time('getPrincipalAxes'); }
      var i = 0;
      var coords = new Matrix(3, this.atomCount);
      var cd = coords.data;
      this.eachAtom(function (a) {
          cd[i + 0] = a.x;
          cd[i + 1] = a.y;
          cd[i + 2] = a.z;
          i += 3;
      }, selection);
      if (exports.Debug)
          { Log.timeEnd('getPrincipalAxes'); }
      return new PrincipalAxes(coords);
  };
  /**
   * Gets the center of the (selected) structure atoms
   * @param  {Selection} [selection] - the selection
   * @return {Vector3} the center
   */
  Structure.prototype.atomCenter = function atomCenter (selection) {
      if (selection) {
          return this.getBoundingBox(selection).getCenter(new Vector3());
      }
      else {
          return this.center.clone();
      }
  };
  Structure.prototype.hasCoords = function hasCoords () {
      if (this._hasCoords === undefined) {
          var atomStore = this.atomStore;
          this._hasCoords = (arrayMin(atomStore.x) !== 0 || arrayMax(atomStore.x) !== 0 ||
              arrayMin(atomStore.y) !== 0 || arrayMax(atomStore.y) !== 0 ||
              arrayMin(atomStore.z) !== 0 || arrayMax(atomStore.z) !== 0) || (
          // allow models with a single atom at the origin
          atomStore.count / this.modelStore.count === 1);
      }
      return this._hasCoords;
  };
  Structure.prototype.getSequence = function getSequence (selection) {
      var seq = [];
      var rp = this.getResidueProxy();
      this.eachAtom(function (ap) {
          rp.index = ap.residueIndex;
          if (ap.index === rp.traceAtomIndex) {
              seq.push(rp.getResname1());
          }
      }, selection);
      return seq;
  };
  Structure.prototype.getAtomIndices = function getAtomIndices (selection) {
      if (selection && selection.string) {
          var indices = [];
          this.eachAtom(function (ap) {
              indices.push(ap.index);
          }, selection);
          return new Uint32Array(indices);
      }
      else {
          var p = { what: { index: true } };
          return this.getAtomData(p).index;
      }
  };
  /**
   * Get number of unique chainnames
   * @param  {Selection} selection - limit count to selection
   * @return {Integer} count
   */
  Structure.prototype.getChainnameCount = function getChainnameCount (selection) {
      var chainnames = new Set();
      this.eachChain(function (cp) {
          if (cp.residueCount) {
              chainnames.add(cp.chainname);
          }
      }, selection);
      return chainnames.size;
  };
  //
  Structure.prototype.updatePosition = function updatePosition (position) {
      var i = 0;
      this.eachAtom(function (ap) {
          ap.positionFromArray(position, i);
          i += 3;
      }, undefined);
      this._hasCoords = undefined; // to trigger recalculation
  };
  Structure.prototype.refreshPosition = function refreshPosition () {
      this.getBoundingBox(undefined, this.boundingBox);
      this.boundingBox.getCenter(this.center);
      this.spatialHash = new SpatialHash(this.atomStore, this.boundingBox);
  };
  /**
   * Calls dispose() method of property objects.
   * Unsets properties to help garbage collection.
   * @return {undefined}
   */
  Structure.prototype.dispose = function dispose () {
      if (this.frames)
          { this.frames.length = 0; }
      if (this.boxes)
          { this.boxes.length = 0; }
      this.bondStore.dispose();
      this.backboneBondStore.dispose();
      this.rungBondStore.dispose();
      this.atomStore.dispose();
      this.residueStore.dispose();
      this.chainStore.dispose();
      this.modelStore.dispose();
      delete this.bondStore;
      delete this.atomStore;
      delete this.residueStore;
      delete this.chainStore;
      delete this.modelStore;
      delete this.frames;
      delete this.boxes;
      delete this.bondSet;
      delete this.atomSet;
  };

  Object.defineProperties( Structure.prototype, prototypeAccessors$c );

  /**
   * @file Shape
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var tmpBox = new Box3();
  var Primitives = [
      ArrowPrimitive, BoxPrimitive, ConePrimitive, CylinderPrimitive,
      EllipsoidPrimitive, OctahedronPrimitive, SpherePrimitive, TetrahedronPrimitive,
      TextPrimitive, TorusPrimitive, PointPrimitive, WidelinePrimitive
  ];
  var ShapeDefaultParameters = {
      aspectRatio: 1.5,
      sphereDetail: 2,
      radialSegments: 50,
      disableImpostor: false,
      openEnded: false,
      dashedCylinder: false,
      labelParams: {},
      pointSize: 2,
      sizeAttenuation: false,
      useTexture: true,
      linewidth: 2
  };
  /**
   * Class for building custom shapes.
   *
   * @example
   * var shape = new NGL.Shape('shape', { disableImpostor: true });
   * shape.addSphere([ 0, 0, 9 ], [ 1, 0, 0 ], 1.5 );
   * shape.addEllipsoid([ 6, 0, 0 ], [ 1, 0, 0 ], 1.5, [ 3, 0, 0 ], [ 0, 2, 0 ]);
   * shape.addCylinder([ 0, 2, 7 ], [ 0, 0, 9 ], [ 1, 1, 0 ], 0.5);
   * shape.addCone([ 0, 2, 7 ], [ 0, 3, 3 ], [ 1, 1, 0 ], 1.5);
   * shape.addArrow([ 1, 2, 7 ], [ 30, 3, 3 ], [ 1, 0, 1 ], 1.0);
   * shape.addBox([ 0, 3, 0 ], [ 1, 0, 1 ], 2, [ 0, 1, 1 ], [ 1, 0, 1 ]);
   * var shapeComp = stage.addComponentFromObject(shape);
   * geoComp.addRepresentation('buffer');
   */
  var Shape = function Shape(name, params) {
      var this$1$1 = this;
      if ( name === void 0 ) name = 'shape';
      if ( params === void 0 ) params = {};

      this.boundingBox = new Box3();
      this.bufferList = [];
      this.meshCount = 0;
      this._primitiveData = {};
      this.name = name;
      this.parameters = createParams(params, ShapeDefaultParameters);
      Primitives.forEach(function (P) {
          Object.keys(P.fields).forEach(function (name) {
              this$1$1._primitiveData[P.getShapeKey(name)] = [];
          });
          this$1$1._primitiveData[P.getShapeKey('name')] = [];
      });
  };

  var prototypeAccessors$b = { center: { configurable: true },type: { configurable: true } };
  /**
   * Add a buffer
   * @param {Buffer} buffer - buffer object
   * @return {Shape} this object
   */
  Shape.prototype.addBuffer = function addBuffer (buffer) {
      this.bufferList.push(buffer);
      var geometry = buffer.geometry; // TODO
      if (!geometry.boundingBox) {
          geometry.computeBoundingBox();
      }
      this.boundingBox.union(geometry.boundingBox);
      return this;
  };
  /**
   * Add a mesh
   * @example
   * shape.addMesh(
   *   [ 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1 ],
   *   [ 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0 ]
   * );
   *
   * @param {Float32Array|Array} position - positions
   * @param {Float32Array|Array} color - colors
   * @param {Uint32Array|Uint16Array|Array} [index] - indices
   * @param {Float32Array|Array} [normal] - normals
   * @param {String} [name] - text
   * @return {Shape} this object
   */
  Shape.prototype.addMesh = function addMesh (position, color, index, normal, name) {
      position = ensureFloat32Array(position);
      color = ensureFloat32Array(color);
      if (Array.isArray(index)) {
          index = getUintArray(index, position.length);
      }
      if (normal) {
          normal = ensureFloat32Array(normal);
      }
      var data;
      if (normal === undefined || normal.length == 0) {
          data = { position: position, color: color, index: index };
      }
      else {
          data = { position: position, color: color, index: index, normal: normal };
      }
      //const data = { position, color, index, normal }
      var picking = new MeshPicker(this, Object.assign({ serial: this.meshCount, name: name }, data));
      var meshBuffer = new MeshBuffer(Object.assign({ picking: picking }, data));
      this.bufferList.push(meshBuffer);
      tmpBox.setFromArray(position);
      this.boundingBox.union(tmpBox);
      this.meshCount += 1;
      return this;
  };
  /**
   * Add a sphere
   * @example
   * shape.addSphere([ 0, 0, 9 ], [ 1, 0, 0 ], 1.5);
   *
   * @param {Vector3|Array} position - position vector or array
   * @param {Color|Array} color - color object or array
   * @param {Float} radius - radius value
   * @param {String} [name] - text
   * @return {Shape} this object
   */
  Shape.prototype.addSphere = function addSphere (position, color, radius, name) {
      SpherePrimitive.objectToShape(this, { position: position, color: color, radius: radius, name: name });
      return this;
  };
  /**
   * Add an ellipsoid
   * @example
   * shape.addEllipsoid([ 6, 0, 0 ], [ 1, 0, 0 ], 1.5, [ 3, 0, 0 ], [ 0, 2, 0 ]);
   *
   * @param {Vector3|Array} position - position vector or array
   * @param {Color|Array} color - color object or array
   * @param {Float} radius - radius value
   * @param {Vector3|Array} majorAxis - major axis vector or array
   * @param {Vector3|Array} minorAxis - minor axis vector or array
   * @param {String} [name] - text
   * @return {Shape} this object
   */
  Shape.prototype.addEllipsoid = function addEllipsoid (position, color, radius, majorAxis, minorAxis, name) {
      EllipsoidPrimitive.objectToShape(this, { position: position, color: color, radius: radius, majorAxis: majorAxis, minorAxis: minorAxis, name: name });
      return this;
  };
  /**
   * Add a torus
   * @example
   * shape.addTorus([ 6, 0, 0 ], [ 1, 0, 0 ], 1.5, [ 3, 0, 0 ], [ 0, 2, 0 ]);
   *
   * @param {Vector3|Array} position - position vector or array
   * @param {Color|Array} color - color object or array
   * @param {Float} radius - radius value
   * @param {Vector3|Array} majorAxis - major axis vector or array
   * @param {Vector3|Array} minorAxis - minor axis vector or array
   * @param {String} [name] - text
   * @return {Shape} this object
   */
  Shape.prototype.addTorus = function addTorus (position, color, radius, majorAxis, minorAxis, name) {
      TorusPrimitive.objectToShape(this, { position: position, color: color, radius: radius, majorAxis: majorAxis, minorAxis: minorAxis, name: name });
      return this;
  };
  /**
   * Add a cylinder
   * @example
   * shape.addCylinder([ 0, 2, 7 ], [ 0, 0, 9 ], [ 1, 1, 0 ], 0.5);
   *
   * @param {Vector3|Array} position1 - from position vector or array
   * @param {Vector3|Array} position2 - to position vector or array
   * @param {Color|Array} color - color object or array
   * @param {Float} radius - radius value
   * @param {String} [name] - text
   * @return {Shape} this object
   */
  Shape.prototype.addCylinder = function addCylinder (position1, position2, color, radius, name) {
      CylinderPrimitive.objectToShape(this, { position1: position1, position2: position2, color: color, radius: radius, name: name });
      return this;
  };
  /**
   * Add a cone
   * @example
   * shape.addCone([ 0, 2, 7 ], [ 0, 3, 3 ], [ 1, 1, 0 ], 1.5);
   *
   * @param {Vector3|Array} position1 - from position vector or array
   * @param {Vector3|Array} position2 - to position vector or array
   * @param {Color|Array} color - color object or array
   * @param {Float} radius - radius value
   * @param {String} [name] - text
   * @return {Shape} this object
   */
  Shape.prototype.addCone = function addCone (position1, position2, color, radius, name) {
      ConePrimitive.objectToShape(this, { position1: position1, position2: position2, color: color, radius: radius, name: name });
      return this;
  };
  /**
   * Add an arrow
   * @example
   * shape.addArrow([ 0, 2, 7 ], [ 0, 0, 9 ], [ 1, 1, 0 ], 0.5);
   *
   * @param {Vector3|Array} position1 - from position vector or array
   * @param {Vector3|Array} position2 - to position vector or array
   * @param {Color|Array} color - color object or array
   * @param {Float} radius - radius value
   * @param {String} [name] - text
   * @return {Shape} this object
   */
  Shape.prototype.addArrow = function addArrow (position1, position2, color, radius, name) {
      ArrowPrimitive.objectToShape(this, { position1: position1, position2: position2, color: color, radius: radius, name: name });
      return this;
  };
  /**
   * Add a box
   * @example
   * shape.addBox([ 0, 3, 0 ], [ 1, 0, 1 ], 2, [ 0, 1, 1 ], [ 1, 0, 1 ]);
   *
   * @param {Vector3|Array} position - position vector or array
   * @param {Color|Array} color - color object or array
   * @param {Float} size - size value
   * @param {Vector3|Array} heightAxis - height axis vector or array
   * @param {Vector3|Array} depthAxis - depth axis vector or array
   * @param {String} [name] - text
   * @return {Shape} this object
   */
  Shape.prototype.addBox = function addBox (position, color, size, heightAxis, depthAxis, name) {
      BoxPrimitive.objectToShape(this, { position: position, color: color, size: size, heightAxis: heightAxis, depthAxis: depthAxis, name: name });
      return this;
  };
  /**
   * Add an octahedron
   * @example
   * shape.addOctahedron([ 0, 3, 0 ], [ 1, 0, 1 ], 2, [ 0, 1, 1 ], [ 1, 0, 1 ]);
   *
   * @param {Vector3|Array} position - position vector or array
   * @param {Color|Array} color - color object or array
   * @param {Float} size - size value
   * @param {Vector3|Array} heightAxis - height axis vector or array
   * @param {Vector3|Array} depthAxis - depth axis vector or array
   * @param {String} [name] - text
   * @return {Shape} this object
   */
  Shape.prototype.addOctahedron = function addOctahedron (position, color, size, heightAxis, depthAxis, name) {
      OctahedronPrimitive.objectToShape(this, { position: position, color: color, size: size, heightAxis: heightAxis, depthAxis: depthAxis, name: name });
      return this;
  };
  /**
   * Add a tetrahedron
   * @example
   * shape.addTetrahedron([ 0, 3, 0 ], [ 1, 0, 1 ], 2, [ 0, 1, 1 ], [ 1, 0, 1 ]);
   *
   * @param {Vector3|Array} position - position vector or array
   * @param {Color|Array} color - color object or array
   * @param {Float} size - size value
   * @param {Vector3|Array} heightAxis - height axis vector or array
   * @param {Vector3|Array} depthAxis - depth axis vector or array
   * @param {String} [name] - text
   * @return {Shape} this object
   */
  Shape.prototype.addTetrahedron = function addTetrahedron (position, color, size, heightAxis, depthAxis, name) {
      TetrahedronPrimitive.objectToShape(this, { position: position, color: color, size: size, heightAxis: heightAxis, depthAxis: depthAxis, name: name });
      return this;
  };
  /**
   * Add text
   * @example
   * shape.addText([ 10, -2, 4 ], [ 0.2, 0.5, 0.8 ], 0.5, "Hello");
   *
   * @param {Vector3|Array} position - position vector or array
   * @param {Color|Array} color - color object or array
   * @param {Float} size - size value
   * @param {String} text - text value
   * @return {Shape} this object
   */
  Shape.prototype.addText = function addText (position, color, size, text) {
      TextPrimitive.objectToShape(this, { position: position, color: color, size: size, text: text });
      return this;
  };
  /**
   * Add point
   * @example
   * shape.addPoint([ 10, -2, 4 ], [ 0.2, 0.5, 0.8 ]);
   *
   * @param {Vector3|Array} position - position vector or array
   * @param {Color|Array} color - color object or array
   * @param {String} [name] - text
   * @return {Shape} this object
   */
  Shape.prototype.addPoint = function addPoint (position, color, name) {
      PointPrimitive.objectToShape(this, { position: position, color: color, name: name });
      return this;
  };
  /**
   * Add a wideline
   * @example
   * shape.addWideline([ 0, 2, 7 ], [ 0, 0, 9 ], [ 1, 1, 0 ]);
   *
   * @param {Vector3|Array} position1 - from position vector or array
   * @param {Vector3|Array} position2 - to position vector or array
   * @param {Color|Array} color - color object or array
   * @param {String} [name] - text
   * @return {Shape} this object
   */
  Shape.prototype.addWideline = function addWideline (position1, position2, color, linewidth, name) {
      this.parameters.linewidth = linewidth;
      WidelinePrimitive.objectToShape(this, { position1: position1, position2: position2, color: color, name: name });
      return this;
  };
  /**
   * Deprecated, use `.addText`
   */
  Shape.prototype.addLabel = function addLabel (position, color, size, text) {
      console.warn('Shape.addLabel is deprecated, use .addText instead');
      return this.addText(position, color, size, text);
  };
  Shape.prototype.getBufferList = function getBufferList () {
          var this$1$1 = this;

      var buffers = [];
      Primitives.forEach(function (P) {
          if (this$1$1._primitiveData[P.getShapeKey('color')].length) {
              buffers.push(P.bufferFromShape(this$1$1, this$1$1.parameters));
          }
      });
      return this.bufferList.concat(buffers);
  };
  Shape.prototype.dispose = function dispose () {
          var this$1$1 = this;

      this.bufferList.forEach(function (buffer) {
          buffer.dispose();
      });
      this.bufferList.length = 0;
      Primitives.forEach(function (P) {
          Object.keys(P.fields).forEach(function (name) {
              this$1$1._primitiveData[P.getShapeKey(name)].length = 0;
          });
          this$1$1._primitiveData[P.getShapeKey('name')].length = 0;
      });
  };
  prototypeAccessors$b.center.get = function () {
      if (!this._center) {
          this._center = this.boundingBox.getCenter(new Vector3());
      }
      return this._center;
  };
  prototypeAccessors$b.type.get = function () { return 'Shape'; };

  Object.defineProperties( Shape.prototype, prototypeAccessors$b );

  /**
   * @file Buffer Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Representation for showing buffer objects. Good for efficiently showing
   * large amounts of geometric primitives e.g. spheres via {@link SphereBuffer}.
   * Smaller numbers of geometric primitives are more easily shown with help
   * from the {@link Shape} class.
   *
   * __Name:__ _buffer_
   *
   * @example
   * // add a single red sphere from a buffer to a shape instance
   * var shape = new NGL.Shape( "shape" );
   * var sphereBuffer = new NGL.SphereBuffer( {
   *     position: new Float32Array( [ 0, 0, 0 ] ),
   *     color: new Float32Array( [ 1, 0, 0 ] ),
   *     radius: new Float32Array( [ 1 ] )
   * } );
   * shape.addBuffer( sphereBuffer );
   * var shapeComp = stage.addComponentFromObject( shape );
   * shapeComp.addRepresentation( "buffer" );
   *
   * @example
   * // add a single red sphere from a buffer to a structure component instance
   * stage.loadFile( "rcsb://1crn" ).then( function( o ){
   *     var sphereBuffer = new NGL.SphereBuffer( {
   *         position: new Float32Array( [ 0, 0, 0 ] ),
   *         color: new Float32Array( [ 1, 0, 0 ] ),
   *         radius: new Float32Array( [ 1 ] )
   *     } );
   *     o.addBufferRepresentation( sphereBuffer, { opacity: 0.5 } );
   * } );
   */
  var BufferRepresentation = /*@__PURE__*/(function (Representation) {
      function BufferRepresentation(buffer, viewer, params) {
          if (!Array.isArray(buffer)) {
              buffer = [buffer];
          }
          Representation.call(this, buffer, viewer, params);
          this.type = 'buffer';
          this.parameters = Object.assign({}, this.parameters, {
              colorScheme: null,
              colorScale: null,
              colorValue: null,
              colorDomain: null,
              colorMode: null
          });
          this.buffer = buffer;
          this.init(params);
      }

      if ( Representation ) BufferRepresentation.__proto__ = Representation;
      BufferRepresentation.prototype = Object.create( Representation && Representation.prototype );
      BufferRepresentation.prototype.constructor = BufferRepresentation;
      BufferRepresentation.prototype.init = function init (params) {
          Representation.prototype.init.call(this, params);
          this.build();
      };
      BufferRepresentation.prototype.create = function create () {
          this.bufferList.push.apply(this.bufferList, this.buffer);
      };
      BufferRepresentation.prototype.attach = function attach (callback) {
          var this$1$1 = this;

          this.bufferList.forEach(function (buffer) {
              this$1$1.viewer.add(buffer);
              buffer.setParameters(this$1$1.getBufferParams());
          });
          this.setVisibility(this.visible);
          callback();
      };

      return BufferRepresentation;
  }(Representation));

  /**
   * @file Geometry Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var matrix = new Matrix4();
  var normalMatrix = new Matrix3();
  function getData$2(data, geo) {
      var geoPosition = geo.attributes.position.array;
      var geoIndex = geo.index ? geo.index.array : undefined;
      var n = data.position.length / 3;
      var m = geoPosition.length / 3;
      var size = n * m;
      var meshPosition = new Float32Array(size * 3);
      var meshNormal = new Float32Array(size * 3);
      var meshColor = new Float32Array(size * 3);
      var meshIndex;
      if (geoIndex) {
          meshIndex = getUintArray(n * geoIndex.length, size);
      }
      return {
          position: meshPosition,
          color: meshColor,
          index: meshIndex,
          normal: meshNormal,
          primitiveId: data.primitiveId || serialBlockArray(n, m),
          picking: data.picking
      };
  }
  /**
   * Geometry buffer. Base class for geometry-based buffers. Used to draw
   * geometry primitives given a mesh.
   * @interface
   */
  var GeometryBuffer = /*@__PURE__*/(function (MeshBuffer) {
      function GeometryBuffer(data, params, geo) {
          if ( params === void 0 ) params = {};

          MeshBuffer.call(this, getData$2(data, geo), params);
          this.updateNormals = false;
          var geoPosition = geo.attributes.position.array;
          var geoNormal = geo.attributes.normal.array;
          var geoIndex = geo.index ? geo.index.array : undefined;
          this.geoPosition = geoPosition;
          this.geoNormal = geoNormal;
          this.geoIndex = geoIndex;
          this.positionCount = data.position.length / 3;
          this.geoPositionCount = geoPosition.length / 3;
          this.transformedGeoPosition = new Float32Array(this.geoPositionCount * 3);
          this.transformedGeoNormal = new Float32Array(this.geoPositionCount * 3);
          var attributes = this.geometry.attributes; // TODO
          this.meshPosition = attributes.position.array;
          this.meshColor = attributes.color.array;
          this.meshNormal = attributes.normal.array;
          this.setAttributes(data);
          if (geoIndex) {
              var index = this.geometry.getIndex();
              if (!index) {
                  Log.error('Index is null');
                  return;
              }
              this.meshIndex = index.array;
              this.makeIndex();
          }
      }

      if ( MeshBuffer ) GeometryBuffer.__proto__ = MeshBuffer;
      GeometryBuffer.prototype = Object.create( MeshBuffer && MeshBuffer.prototype );
      GeometryBuffer.prototype.constructor = GeometryBuffer;
      GeometryBuffer.prototype.setAttributes = function setAttributes (data, initNormals) {
          if ( data === void 0 ) data = {};
          if ( initNormals === void 0 ) initNormals = false;

          var attributes = this.geometry.attributes; // TODO
          var position, color;
          var geoPosition, geoNormal;
          var transformedGeoPosition, transformedGeoNormal;
          var meshPosition, meshColor, meshNormal;
          var updateNormals = this.updateNormals;
          if (data.position) {
              position = data.position;
              geoPosition = this.geoPosition;
              meshPosition = this.meshPosition;
              transformedGeoPosition = this.transformedGeoPosition;
              attributes.position.needsUpdate = true;
              if (updateNormals || initNormals) {
                  geoNormal = this.geoNormal;
                  meshNormal = this.meshNormal;
                  transformedGeoNormal = this.transformedGeoNormal;
                  attributes.normal.needsUpdate = true;
              }
          }
          if (data.color) {
              color = data.color;
              meshColor = this.meshColor;
              attributes.color.needsUpdate = true;
          }
          var n = this.positionCount;
          var m = this.geoPositionCount;
          for (var i = 0; i < n; ++i) {
              var j = (void 0), l = (void 0);
              var k = i * m * 3;
              var i3 = i * 3;
              if (position && transformedGeoPosition && meshPosition && meshNormal && geoPosition && geoNormal) {
                  transformedGeoPosition.set(geoPosition);
                  matrix.makeTranslation(position[i3], position[i3 + 1], position[i3 + 2]);
                  this.applyPositionTransform(matrix, i, i3);
                  applyMatrix4toVector3array(matrix.elements, transformedGeoPosition);
                  meshPosition.set(transformedGeoPosition, k);
                  if (updateNormals && transformedGeoNormal) {
                      transformedGeoNormal.set(geoNormal);
                      normalMatrix.getNormalMatrix(matrix);
                      applyMatrix3toVector3array(normalMatrix.elements, transformedGeoNormal);
                      meshNormal.set(transformedGeoNormal, k);
                  }
                  else if (initNormals) {
                      meshNormal.set(geoNormal, k);
                  }
              }
              if (color && meshColor) {
                  for (j = 0; j < m; ++j) {
                      l = k + 3 * j;
                      meshColor[l] = color[i3];
                      meshColor[l + 1] = color[i3 + 1];
                      meshColor[l + 2] = color[i3 + 2];
                  }
              }
          }
      };
      GeometryBuffer.prototype.makeIndex = function makeIndex () {
          var geoIndex = this.geoIndex;
          var meshIndex = this.meshIndex;
          if (!geoIndex)
              { return; }
          var n = this.positionCount;
          var m = this.geoPositionCount;
          var o = geoIndex.length / 3;
          var o3 = o * 3;
          for (var i = 0; i < n; ++i) {
              var j = i * o3;
              var q = j + o3;
              meshIndex.set(geoIndex, j);
              for (var p = j; p < q; ++p)
                  { meshIndex[p] += i * m; }
          }
      };

      return GeometryBuffer;
  }(MeshBuffer));

  /**
   * @file Sphere Geometry Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var scale$7 = new Vector3();
  var SphereGeometryBufferDefaultParameters = Object.assign({
      sphereDetail: 1
  }, BufferDefaultParameters);
  /**
   * Sphere geometry buffer.
   *
   * @example
   * var sphereGeometryBuffer = new SphereGeometryBuffer({
   *   position: new Float32Array([ 0, 0, 0 ]),
   *   color: new Float32Array([ 1, 0, 0 ]),
   *   radius: new Float32Array([ 1 ])
   * });
   */
  var SphereGeometryBuffer = /*@__PURE__*/(function (GeometryBuffer) {
      function SphereGeometryBuffer(data, params) {
          if ( params === void 0 ) params = {};

          GeometryBuffer.call(this, data, params, new IcosahedronBufferGeometry(1, defaults(params.sphereDetail, 1)));
          this.setAttributes(data, true);
      }

      if ( GeometryBuffer ) SphereGeometryBuffer.__proto__ = GeometryBuffer;
      SphereGeometryBuffer.prototype = Object.create( GeometryBuffer && GeometryBuffer.prototype );
      SphereGeometryBuffer.prototype.constructor = SphereGeometryBuffer;

      var prototypeAccessors = { defaultParameters: { configurable: true } };
      prototypeAccessors.defaultParameters.get = function () { return SphereGeometryBufferDefaultParameters; };
      SphereGeometryBuffer.prototype.applyPositionTransform = function applyPositionTransform (matrix, i) {
          var r = this._radius[i];
          scale$7.set(r, r, r);
          matrix.scale(scale$7);
      };
      SphereGeometryBuffer.prototype.setAttributes = function setAttributes (data, initNormals) {
          if ( data === void 0 ) data = {};

          if (data.radius)
              { this._radius = data.radius; }
          GeometryBuffer.prototype.setAttributes.call(this, data, initNormals);
      };

      Object.defineProperties( SphereGeometryBuffer.prototype, prototypeAccessors );

      return SphereGeometryBuffer;
  }(GeometryBuffer));

  ShaderRegistry.add('shader/SphereImpostor.vert', "uniform mat4 projectionMatrixInverse;\nuniform float clipNear;\nvarying float vRadius;\nvarying float vRadiusSq;\nvarying vec3 vPoint;\nvarying vec3 vPointViewPosition;\nattribute vec2 mapping;\nattribute float radius;\n#ifdef PICKING\n#include unpack_color\nattribute float primitiveId;\nvarying vec3 vPickingColor;\n#else\n#include color_pars_vertex\n#endif\n#include matrix_scale\nconst mat4 D = mat4(\n1.0, 0.0, 0.0, 0.0,\n0.0, 1.0, 0.0, 0.0,\n0.0, 0.0, 1.0, 0.0,\n0.0, 0.0, 0.0, -1.0\n);\nmat4 transposeM( in mat4 inMatrix ) {\nvec4 i0 = inMatrix[0];\nvec4 i1 = inMatrix[1];\nvec4 i2 = inMatrix[2];\nvec4 i3 = inMatrix[3];\nmat4 outMatrix = mat4(\nvec4(i0.x, i1.x, i2.x, i3.x),\nvec4(i0.y, i1.y, i2.y, i3.y),\nvec4(i0.z, i1.z, i2.z, i3.z),\nvec4(i0.w, i1.w, i2.w, i3.w)\n);\nreturn outMatrix;\n}\nvoid ComputePointSizeAndPositionInClipCoordSphere(){\nvec2 xbc;\nvec2 ybc;\nmat4 T = mat4(\nradius, 0.0, 0.0, 0.0,\n0.0, radius, 0.0, 0.0,\n0.0, 0.0, radius, 0.0,\nposition.x, position.y, position.z, 1.0\n);\nmat4 R = transposeM( projectionMatrix * modelViewMatrix * T );\nfloat A = dot( R[ 3 ], D * R[ 3 ] );\nfloat B = -2.0 * dot( R[ 0 ], D * R[ 3 ] );\nfloat C = dot( R[ 0 ], D * R[ 0 ] );\nxbc[ 0 ] = ( -B - sqrt( B * B - 4.0 * A * C ) ) / ( 2.0 * A );\nxbc[ 1 ] = ( -B + sqrt( B * B - 4.0 * A * C ) ) / ( 2.0 * A );\nfloat sx = abs( xbc[ 0 ] - xbc[ 1 ] ) * 0.5;\nA = dot( R[ 3 ], D * R[ 3 ] );\nB = -2.0 * dot( R[ 1 ], D * R[ 3 ] );\nC = dot( R[ 1 ], D * R[ 1 ] );\nybc[ 0 ] = ( -B - sqrt( B * B - 4.0 * A * C ) ) / ( 2.0 * A );\nybc[ 1 ] = ( -B + sqrt( B * B - 4.0 * A * C ) ) / ( 2.0 * A );\nfloat sy = abs( ybc[ 0 ] - ybc[ 1 ] ) * 0.5;\ngl_Position.xy = vec2( 0.5 * ( xbc.x + xbc.y ), 0.5 * ( ybc.x + ybc.y ) );\ngl_Position.xy -= mapping * vec2( sx, sy );\ngl_Position.xy *= gl_Position.w;\n}\nvoid main(void){\n#ifdef PICKING\nvPickingColor = unpackColor( primitiveId );\n#else\n#include color_vertex\n#endif\nvRadius = radius * matrixScale( modelViewMatrix );\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\nmvPosition.z -= vRadius;\ngl_Position = projectionMatrix * vec4( mvPosition.xyz, 1.0 );\nComputePointSizeAndPositionInClipCoordSphere();\nvRadiusSq = vRadius * vRadius;\nvec4 vPoint4 = projectionMatrixInverse * gl_Position;\nvPoint = vPoint4.xyz / vPoint4.w;\nvPointViewPosition = -mvPosition.xyz / mvPosition.w;\n}");

  ShaderRegistry.add('shader/SphereImpostor.frag', "#define STANDARD\n#define IMPOSTOR\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 interiorColor;\nuniform float interiorDarkening;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\nuniform float clipNear;\nuniform mat4 projectionMatrix;\nuniform float ortho;\nvarying float vRadius;\nvarying float vRadiusSq;\nvarying vec3 vPoint;\nvarying vec3 vPointViewPosition;\n#ifdef PICKING\nuniform float objectId;\nvarying vec3 vPickingColor;\n#else\n#include common\n#include color_pars_fragment\n#include fog_pars_fragment\n#include bsdfs\n#include lights_pars_begin\n#include lights_physical_pars_fragment\n#endif\nbool flag2 = false;\nbool interior = false;\nvec3 cameraPos;\nvec3 cameraNormal;\nfloat calcDepth( in vec3 cameraPos ){\nvec2 clipZW = cameraPos.z * projectionMatrix[2].zw + projectionMatrix[3].zw;\nreturn 0.5 + 0.5 * clipZW.x / clipZW.y;\n}\nfloat calcClip( vec3 cameraPos ){\nreturn dot( vec4( cameraPos, 1.0 ), vec4( 0.0, 0.0, 1.0, clipNear - 0.5 ) );\n}\nbool Impostor( out vec3 cameraPos, out vec3 cameraNormal ){\nvec3 cameraSpherePos = -vPointViewPosition;\ncameraSpherePos.z += vRadius;\nvec3 rayOrigin = mix( vec3( 0.0, 0.0, 0.0 ), vPoint, ortho );\nvec3 rayDirection = mix( normalize( vPoint ), vec3( 0.0, 0.0, 1.0 ), ortho );\nvec3 cameraSphereDir = mix( cameraSpherePos, rayOrigin - cameraSpherePos, ortho );\nfloat B = dot( rayDirection, cameraSphereDir );\nfloat det = B * B + vRadiusSq - dot( cameraSphereDir, cameraSphereDir );\nif( det < 0.0 ){\ndiscard;\nreturn false;\n}\nfloat sqrtDet = sqrt( det );\nfloat posT = mix( B + sqrtDet, B + sqrtDet, ortho );\nfloat negT = mix( B - sqrtDet, sqrtDet - B, ortho );\ncameraPos = rayDirection * negT + rayOrigin;\n#ifdef NEAR_CLIP\nif( calcDepth( cameraPos ) <= 0.0 ){\ncameraPos = rayDirection * posT + rayOrigin;\ninterior = true;\n}else if( calcClip( cameraPos ) > 0.0 ){\ncameraPos = rayDirection * posT + rayOrigin;\ninterior = true;\nflag2 = true;\n}\n#else\nif( calcDepth( cameraPos ) <= 0.0 ){\ncameraPos = rayDirection * posT + rayOrigin;\ninterior = true;\n}\n#endif\ncameraNormal = normalize( cameraPos - cameraSpherePos );\ncameraNormal *= float(!interior) * 2.0 - 1.0;\nreturn !interior;\n}\nvoid main(void){\nbool flag = Impostor( cameraPos, cameraNormal );\n#ifdef NEAR_CLIP\nif( calcClip( cameraPos ) > 0.0 )\ndiscard;\n#endif\ngl_FragDepthEXT = calcDepth( cameraPos );\nif( !flag ){\n#ifdef NEAR_CLIP\nif( flag2 ){\ngl_FragDepthEXT = max( 0.0, calcDepth( vec3( - ( clipNear - 0.5 ) ) ) + ( 0.0000001 / vRadius ) );\n}else if( gl_FragDepthEXT >= 0.0 ){\ngl_FragDepthEXT = 0.0 + ( 0.0000001 / vRadius );\n}\n#else\nif( gl_FragDepthEXT >= 0.0 ){\ngl_FragDepthEXT = 0.0 + ( 0.0000001 / vRadius );\n}\n#endif\n}\nif (gl_FragDepthEXT < 0.0)\ndiscard;\nif (gl_FragDepthEXT > 1.0)\ndiscard;\n#ifdef PICKING\nif( opacity < 0.3 )\ndiscard;\ngl_FragColor = vec4( vPickingColor, objectId );\n#else\nvec3 vNormal = cameraNormal;\nvec3 vViewPosition = -cameraPos;\nvec4 diffuseColor = vec4( diffuse, opacity );\nReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\nvec3 totalEmissiveLight = emissive;\n#include color_fragment\n#include roughnessmap_fragment\n#include metalnessmap_fragment\n#include normal_fragment_begin\n#include lights_physical_fragment\n#include lights_fragment_begin\n#include lights_fragment_end\nvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveLight;\nif( interior ){\n#ifdef USE_INTERIOR_COLOR\noutgoingLight.xyz = interiorColor;\n#else\n#ifdef DIFFUSE_INTERIOR\noutgoingLight.xyz = vColor;\n#endif\n#endif\noutgoingLight.xyz *= 1.0 - interiorDarkening;\n}\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );\n#include premultiplied_alpha_fragment\n#include tonemapping_fragment\n#include encodings_fragment\n#include fog_fragment\n#endif\n}");

  /**
   * @file Mapped Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Mapped buffer. Sends mapping attribute to the GPU and repeats data in
   * others attributes. Used to render imposters.
   * @interface
   */
  var MappedBuffer = /*@__PURE__*/(function (Buffer) {
      function MappedBuffer(mappingType, data, params) {
          if ( params === void 0 ) params = {};

          Buffer.call(this, data, params);
          this.index = getUintArray(this.indexSize, this.attributeSize);
          this.makeIndex();
          this.initIndex(this.index);
          this.addAttributes({
              'mapping': { type: mappingType, value: null }
          });
          this.setAttributes({ primitiveId: serialArray(this.size) });
      }

      if ( Buffer ) MappedBuffer.__proto__ = Buffer;
      MappedBuffer.prototype = Object.create( Buffer && Buffer.prototype );
      MappedBuffer.prototype.constructor = MappedBuffer;

      var prototypeAccessors = { attributeSize: { configurable: true },indexSize: { configurable: true } };
      prototypeAccessors.attributeSize.get = function () {
          return this.size * this.mappingSize;
      };
      prototypeAccessors.indexSize.get = function () {
          return this.size * this.mappingIndicesSize;
      };
      MappedBuffer.prototype.addAttributes = function addAttributes (attributes) {
          var nullValueAttributes = {};
          for (var name in attributes) {
              var a = attributes[name];
              nullValueAttributes[name] = {
                  type: a.type,
                  value: null
              };
          }
          Buffer.prototype.addAttributes.call(this, nullValueAttributes);
      };
      MappedBuffer.prototype.getAttributeIndex = function getAttributeIndex (dataIndex) {
          return dataIndex * 3 * this.mappingSize;
      };
      MappedBuffer.prototype.setAttributes = function setAttributes (data) {
          if (data && !data.position && data.position1 && data.position2) {
              data.position = calculateCenterArray(data.position1, data.position2);
          }
          var size = this.size;
          var mappingSize = this.mappingSize;
          var attributes = this.geometry.attributes; // TODO
          var a, d, itemSize, array, n, i, j;
          for (var name in data) {
              if (name === 'index' || name === 'picking')
                  { continue; }
              d = data[name];
              a = attributes[name];
              itemSize = a.itemSize;
              array = a.array;
              for (var k = 0; k < size; ++k) {
                  n = k * itemSize;
                  i = n * mappingSize;
                  for (var l = 0; l < mappingSize; ++l) {
                      j = i + (itemSize * l);
                      for (var m = 0; m < itemSize; ++m) {
                          array[j + m] = d[n + m];
                      }
                  }
              }
              a.needsUpdate = true;
          }
      };
      MappedBuffer.prototype.makeMapping = function makeMapping () {
          var size = this.size;
          var mapping = this.mapping;
          var mappingSize = this.mappingSize;
          var mappingItemSize = this.mappingItemSize;
          var attributes = this.geometry.attributes; // TODO
          var aMapping = attributes.mapping.array;
          for (var v = 0; v < size; v++) {
              aMapping.set(mapping, v * mappingItemSize * mappingSize);
          }
      };
      MappedBuffer.prototype.makeIndex = function makeIndex () {
          var size = this.size;
          var mappingSize = this.mappingSize;
          var mappingIndices = this.mappingIndices;
          var mappingIndicesSize = this.mappingIndicesSize;
          var index = this.index;
          for (var v = 0; v < size; v++) {
              var ix = v * mappingIndicesSize;
              var it = v * mappingSize;
              index.set(mappingIndices, ix);
              for (var s = 0; s < mappingIndicesSize; ++s) {
                  index[ix + s] += it;
              }
          }
      };

      Object.defineProperties( MappedBuffer.prototype, prototypeAccessors );

      return MappedBuffer;
  }(Buffer));

  /**
   * @file Mapped Quad Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var mapping$2 = new Float32Array([
      -1.0, 1.0,
      -1.0, -1.0,
      1.0, 1.0,
      1.0, -1.0
  ]);
  var mappingIndices$2 = new Uint16Array([
      0, 1, 2,
      1, 3, 2
  ]);
  /**
   * Mapped Quad buffer. Draws screen-aligned quads. Used to render impostors.
   * @interface
   */
  var MappedQuadBuffer = /*@__PURE__*/(function (MappedBuffer) {
      function MappedQuadBuffer(data, params) {
          if ( params === void 0 ) params = {};

          MappedBuffer.call(this, 'v2', data, params);
      }

      if ( MappedBuffer ) MappedQuadBuffer.__proto__ = MappedBuffer;
      MappedQuadBuffer.prototype = Object.create( MappedBuffer && MappedBuffer.prototype );
      MappedQuadBuffer.prototype.constructor = MappedQuadBuffer;

      var prototypeAccessors = { mapping: { configurable: true },mappingIndices: { configurable: true },mappingIndicesSize: { configurable: true },mappingSize: { configurable: true },mappingItemSize: { configurable: true } };
      prototypeAccessors.mapping.get = function () { return mapping$2; };
      prototypeAccessors.mappingIndices.get = function () { return mappingIndices$2; };
      prototypeAccessors.mappingIndicesSize.get = function () { return 6; };
      prototypeAccessors.mappingSize.get = function () { return 4; };
      prototypeAccessors.mappingItemSize.get = function () { return 2; };

      Object.defineProperties( MappedQuadBuffer.prototype, prototypeAccessors );

      return MappedQuadBuffer;
  }(MappedBuffer));

  /**
   * @file Sphere Impostor Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Sphere impostor buffer.
   *
   * @example
   * var sphereImpostorBuffer = new SphereImpostorBuffer({
   *   position: new Float32Array([ 0, 0, 0 ]),
   *   color: new Float32Array([ 1, 0, 0 ]),
   *   radius: new Float32Array([ 1 ])
   * });
   */
  var SphereImpostorBuffer = /*@__PURE__*/(function (MappedQuadBuffer) {
      function SphereImpostorBuffer(data, params) {
          if ( params === void 0 ) params = {};

          MappedQuadBuffer.call(this, data, params);
          this.isImpostor = true;
          this.vertexShader = 'SphereImpostor.vert';
          this.fragmentShader = 'SphereImpostor.frag';
          this.addUniforms({
              'projectionMatrixInverse': { value: new Matrix4() },
              'ortho': { value: 0.0 }
          });
          this.addAttributes({
              'radius': { type: 'f', value: null }
          });
          this.setAttributes(data);
          this.makeMapping();
      }

      if ( MappedQuadBuffer ) SphereImpostorBuffer.__proto__ = MappedQuadBuffer;
      SphereImpostorBuffer.prototype = Object.create( MappedQuadBuffer && MappedQuadBuffer.prototype );
      SphereImpostorBuffer.prototype.constructor = SphereImpostorBuffer;

      return SphereImpostorBuffer;
  }(MappedQuadBuffer));

  /**
   * @file Sphere Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  Object.assign({
      disableImpostor: false
  }, SphereGeometryBufferDefaultParameters);
  /**
   * Sphere buffer. Depending on the value {@link ExtensionFragDepth} and
   * `params.disableImpostor` the constructor returns either a
   * {@link SphereGeometryBuffer} or a {@link SphereImpostorBuffer}
   * @implements {Buffer}
   *
   * @example
   * var sphereBuffer = new SphereBuffer( {
   *     position: new Float32Array( [ 0, 0, 0 ] ),
   *     color: new Float32Array( [ 1, 0, 0 ] ),
   *     radius: new Float32Array( [ 1 ] )
   * } );
   */
  var SphereBuffer = function SphereBuffer(data, params) {
      if (!ExtensionFragDepth || (params && params.disableImpostor)) {
          return new SphereGeometryBuffer(data, params);
      }
      else {
          return new SphereImpostorBuffer(data, params);
      }
  };
  BufferRegistry.add('sphere', SphereBuffer);

  ShaderRegistry.add('shader/Point.vert', "uniform float clipNear;\nuniform float clipRadius;\nuniform vec3 clipCenter;\nuniform float size;\nuniform float canvasHeight;\nuniform float pixelRatio;\n#if defined( RADIUS_CLIP )\nvarying vec3 vClipCenter;\n#endif\n#if defined( PICKING )\n#include unpack_color\nattribute float primitiveId;\nvarying vec3 vPickingColor;\n#else\n#include color_pars_vertex\nvarying vec3 vViewPosition;\n#endif\n#include common\nvoid main(){\n#if defined( PICKING )\nvPickingColor = unpackColor( primitiveId );\n#else\n#include color_vertex\n#endif\n#include begin_vertex\n#include project_vertex\n#ifdef USE_SIZEATTENUATION\ngl_PointSize = size * pixelRatio * ( ( canvasHeight / 2.0 ) / -mvPosition.z );\n#else\ngl_PointSize = size * pixelRatio;\n#endif\n#ifndef PICKING\nvViewPosition = -mvPosition.xyz;\n#endif\n#if defined( RADIUS_CLIP )\nvClipCenter = -( modelViewMatrix * vec4( clipCenter, 1.0 ) ).xyz;\n#endif\n#include nearclip_vertex\n#include radiusclip_vertex\n}");

  ShaderRegistry.add('shader/Point.frag', "uniform vec3 diffuse;\nuniform float opacity;\nuniform float clipNear;\nuniform float clipRadius;\n#if defined( RADIUS_CLIP )\nvarying vec3 vClipCenter;\n#endif\n#ifdef USE_MAP\nuniform sampler2D map;\n#endif\n#if defined( PICKING )\nuniform float objectId;\nvarying vec3 vPickingColor;\n#else\n#include common\n#include color_pars_fragment\n#include fog_pars_fragment\nvarying vec3 vViewPosition;\n#endif\nvoid main(){\n#include nearclip_fragment\n#include radiusclip_fragment\n#if defined( PICKING )\n#ifdef USE_MAP\nif( texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) ).a < 0.5 )\ndiscard;\n#endif\nif( opacity < 0.3 )\ndiscard;\ngl_FragColor = vec4( vPickingColor, objectId );\n#else\nvec3 outgoingLight = vec3( 0.0 );\nvec4 diffuseColor = vec4( diffuse, 1.0 );\n#ifdef USE_MAP\ndiffuseColor *= texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) );\n#endif\n#include color_fragment\n#include alphatest_fragment\noutgoingLight = diffuseColor.rgb;\ngl_FragColor = vec4( outgoingLight, diffuseColor.a * opacity );\n#include premultiplied_alpha_fragment\n#include tonemapping_fragment\n#include encodings_fragment\n#include fog_fragment\n#endif\n}");

  /**
   * @file Point Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function distance(x0, y0, x1, y1) {
      var dx = x1 - x0;
      var dy = y1 - y0;
      return Math.sqrt(dx * dx + dy * dy);
  }
  function makePointTexture(params) {
      var p = params || {};
      var width = defaults(p.width, 256);
      var height = defaults(p.height, 256);
      var center = [width / 2, height / 2];
      var radius = Math.min(width / 2, height / 2);
      var delta = defaults(p.delta, 1 / (radius + 1)) * radius;
      var x = 0;
      var y = 0;
      var data = new Uint8Array(width * height * 4);
      for (var i = 0, il = data.length; i < il; i += 4) {
          var dist = distance(x, y, center[0], center[1]);
          var value = 1 - smoothstep(radius - delta, radius, dist);
          data[i] = value * 255;
          data[i + 1] = value * 255;
          data[i + 2] = value * 255;
          data[i + 3] = value * 255;
          if (++x === width) {
              x = 0;
              y++;
          }
      }
      var tex = new DataTexture(data, width, height);
      tex.needsUpdate = true;
      return tex;
  }
  var PointBufferDefaultParameters = Object.assign({
      pointSize: 1,
      sizeAttenuation: true,
      sortParticles: false,
      alphaTest: 0.5,
      useTexture: false,
      forceTransparent: false,
      edgeBleach: 0.0
  }, BufferDefaultParameters);
  var PointBufferParameterTypes = Object.assign({
      pointSize: { uniform: 'size' },
      sizeAttenuation: { updateShader: true },
      sortParticles: {},
      alphaTest: { updateShader: true },
      useTexture: { updateShader: true },
      forceTransparent: {},
      edgeBleach: { uniform: true }
  }, BufferParameterTypes);
  /**
   * Point buffer. Draws points. Optionally textured.
   *
   * @example
   * var pointBuffer = new PointBuffer( {
   *     position: new Float32Array( [ 0, 0, 0 ] ),
   *     color: new Float32Array( [ 1, 0, 0 ] )
   * } );
   */
  var PointBuffer = /*@__PURE__*/(function (Buffer) {
      function PointBuffer(data, params) {
          if ( params === void 0 ) params = {};

          Buffer.call(this, data, params);
          this.parameterTypes = PointBufferParameterTypes;
          this.vertexShader = 'Point.vert';
          this.fragmentShader = 'Point.frag';
          this.isPoint = true;
          this.addUniforms({
              'size': { value: this.parameters.pointSize },
              'canvasHeight': { value: 1.0 },
              'pixelRatio': { value: 1.0 },
              'map': { value: null }
          });
      }

      if ( Buffer ) PointBuffer.__proto__ = Buffer;
      PointBuffer.prototype = Object.create( Buffer && Buffer.prototype );
      PointBuffer.prototype.constructor = PointBuffer;

      var prototypeAccessors = { defaultParameters: { configurable: true } };
      prototypeAccessors.defaultParameters.get = function () { return PointBufferDefaultParameters; };
      PointBuffer.prototype.makeMaterial = function makeMaterial () {
          Buffer.prototype.makeMaterial.call(this);
          this.makeTexture();
          var m = this.material;
          var wm = this.wireframeMaterial;
          var pm = this.pickingMaterial;
          m.uniforms.map.value = this.tex;
          m.needsUpdate = true;
          wm.uniforms.map.value = this.tex;
          wm.needsUpdate = true;
          pm.uniforms.map.value = this.tex;
          pm.needsUpdate = true;
      };
      PointBuffer.prototype.makeTexture = function makeTexture () {
          if (this.tex)
              { this.tex.dispose(); }
          this.tex = makePointTexture({ delta: this.parameters.edgeBleach });
      };
      PointBuffer.prototype.getDefines = function getDefines (type) {
          var defines = Buffer.prototype.getDefines.call(this, type);
          if (this.parameters.sizeAttenuation) {
              defines.USE_SIZEATTENUATION = 1;
          }
          if (this.parameters.useTexture) {
              defines.USE_MAP = 1;
          }
          if (this.parameters.alphaTest > 0 && this.parameters.alphaTest <= 1) {
              defines.ALPHATEST = this.parameters.alphaTest.toPrecision(2);
          }
          return defines;
      };
      PointBuffer.prototype.setUniforms = function setUniforms (data) {
          if (data && data.edgeBleach !== undefined) {
              this.makeTexture();
              data.map = this.tex;
          }
          Buffer.prototype.setUniforms.call(this, data);
      };
      PointBuffer.prototype.dispose = function dispose () {
          Buffer.prototype.dispose.call(this);
          if (this.tex)
              { this.tex.dispose(); }
      };

      Object.defineProperties( PointBuffer.prototype, prototypeAccessors );

      return PointBuffer;
  }(Buffer));
  BufferRegistry.add('point', PointBuffer);

  /**
   * @file Dot Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Dot representation
   */
  var DotRepresentation = /*@__PURE__*/(function (Representation) {
      function DotRepresentation(surface, viewer, params) {
          Representation.call(this, surface, viewer, params);
          this.type = 'dot';
          this.parameters = Object.assign({
              thresholdType: {
                  type: 'select',
                  rebuild: true,
                  options: {
                      'value': 'value', 'sigma': 'sigma'
                  }
              },
              thresholdMin: {
                  type: 'number', precision: 3, max: Infinity, min: -Infinity, rebuild: true
              },
              thresholdMax: {
                  type: 'number', precision: 3, max: Infinity, min: -Infinity, rebuild: true
              },
              thresholdOut: {
                  type: 'boolean', rebuild: true
              },
              dotType: {
                  type: 'select',
                  rebuild: true,
                  options: {
                      '': '',
                      'sphere': 'sphere',
                      'point': 'point'
                  }
              },
              radiusType: {
                  type: 'select',
                  options: {
                      '': '',
                      'value': 'value',
                      'abs-value': 'abs-value',
                      'value-min': 'value-min',
                      'deviation': 'deviation',
                      'size': 'size'
                  }
              },
              radius: {
                  type: 'number', precision: 3, max: 10.0, min: 0.001, property: 'size'
              },
              scale: {
                  type: 'number', precision: 3, max: 10.0, min: 0.001
              },
              sphereDetail: true,
              disableImpostor: true,
              pointSize: {
                  type: 'number', precision: 1, max: 100, min: 0, buffer: true
              },
              sizeAttenuation: {
                  type: 'boolean', buffer: true
              },
              sortParticles: {
                  type: 'boolean', rebuild: true
              },
              useTexture: {
                  type: 'boolean', buffer: true
              },
              alphaTest: {
                  type: 'range', step: 0.001, max: 1, min: 0, buffer: true
              },
              forceTransparent: {
                  type: 'boolean', buffer: true
              },
              edgeBleach: {
                  type: 'range', step: 0.001, max: 1, min: 0, buffer: true
              }
          }, this.parameters, {
              colorScheme: {
                  type: 'select',
                  update: 'color',
                  options: {
                      '': '',
                      'value': 'value',
                      'uniform': 'uniform',
                      'random': 'random'
                  }
              }
          });
          if (surface instanceof Volume) {
              this.surface = undefined;
              this.volume = new FilteredVolume(surface);
          }
          else {
              this.surface = surface;
              this.volume = undefined;
          }
          this.init(params);
      }

      if ( Representation ) DotRepresentation.__proto__ = Representation;
      DotRepresentation.prototype = Object.create( Representation && Representation.prototype );
      DotRepresentation.prototype.constructor = DotRepresentation;
      DotRepresentation.prototype.init = function init (params) {
          var p = params || {};
          p.colorScheme = defaults(p.colorScheme, 'uniform');
          p.colorValue = defaults(p.colorValue, 0xDDDDDD);
          this.thresholdType = defaults(p.thresholdType, 'sigma');
          this.thresholdMin = defaults(p.thresholdMin, 2.0);
          this.thresholdMax = defaults(p.thresholdMax, Infinity);
          this.thresholdOut = defaults(p.thresholdOut, false);
          this.dotType = defaults(p.dotType, 'point');
          this.radius = defaults(p.radius, 0.1);
          this.scale = defaults(p.scale, 1.0);
          this.pointSize = defaults(p.pointSize, 1);
          this.sizeAttenuation = defaults(p.sizeAttenuation, true);
          this.sortParticles = defaults(p.sortParticles, false);
          this.useTexture = defaults(p.useTexture, false);
          this.alphaTest = defaults(p.alphaTest, 0.5);
          this.forceTransparent = defaults(p.forceTransparent, false);
          this.edgeBleach = defaults(p.edgeBleach, 0.0);
          Representation.prototype.init.call(this, p);
          this.build();
      };
      DotRepresentation.prototype.attach = function attach (callback) {
          var this$1$1 = this;

          this.bufferList.forEach(function (buffer) {
              this$1$1.viewer.add(buffer);
          });
          this.setVisibility(this.visible);
          callback();
      };
      DotRepresentation.prototype.create = function create () {
          var dotData = {};
          if (this.volume) {
              var volume = this.volume;
              var thresholdMin, thresholdMax;
              if (this.thresholdType === 'sigma') {
                  thresholdMin = volume.getValueForSigma(this.thresholdMin);
                  thresholdMax = volume.getValueForSigma(this.thresholdMax);
              }
              else {
                  thresholdMin = this.thresholdMin;
                  thresholdMax = this.thresholdMax;
              }
              volume.setFilter(thresholdMin, thresholdMax, this.thresholdOut);
              Object.assign(dotData, {
                  position: volume.getDataPosition(),
                  color: volume.getDataColor(this.getColorParams())
              });
              if (this.dotType === 'sphere') {
                  Object.assign(dotData, {
                      radius: volume.getDataSize(this.radius, this.scale),
                      picking: volume.getDataPicking()
                  });
              }
          }
          else {
              var surface = this.surface;
              Object.assign(dotData, {
                  position: surface.getPosition(),
                  color: surface.getColor(this.getColorParams())
              });
              if (this.dotType === 'sphere') {
                  Object.assign(dotData, {
                      radius: surface.getSize(this.radius, this.scale),
                      picking: surface.getPicking()
                  });
              }
          }
          if (this.dotType === 'sphere') {
              this.dotBuffer = new SphereBuffer(dotData, this.getBufferParams({
                  sphereDetail: this.sphereDetail,
                  disableImpostor: this.disableImpostor,
                  dullInterior: false
              }));
          }
          else {
              this.dotBuffer = new PointBuffer(dotData, this.getBufferParams({
                  pointSize: this.pointSize,
                  sizeAttenuation: this.sizeAttenuation,
                  sortParticles: this.sortParticles,
                  useTexture: this.useTexture,
                  alphaTest: this.alphaTest,
                  forceTransparent: this.forceTransparent,
                  edgeBleach: this.edgeBleach
              }));
          }
          this.bufferList.push(this.dotBuffer);
      };
      DotRepresentation.prototype.update = function update (what) {
          if ( what === void 0 ) what = {};

          if (this.bufferList.length === 0)
              { return; }
          var dotData = {};
          if (what.color) {
              if (this.volume) {
                  Object.assign(dotData, {
                      color: this.volume.getDataColor(this.getColorParams())
                  });
              }
              else {
                  Object.assign(dotData, {
                      color: this.surface.getColor(this.getColorParams())
                  });
              }
          }
          if (this.dotType === 'sphere' && (what.radius || what.scale)) {
              if (this.volume) {
                  Object.assign(dotData, {
                      radius: this.volume.getDataSize(this.radius, this.scale)
                  });
              }
              else {
                  Object.assign(dotData, {
                      radius: this.surface.getSize(this.radius, this.scale)
                  });
              }
          }
          this.dotBuffer.setAttributes(dotData);
      };
      DotRepresentation.prototype.setParameters = function setParameters (params, what, rebuild) {
          if ( what === void 0 ) what = {};

          if (params && params.thresholdType !== undefined &&
              this.volume instanceof Volume) {
              if (this.thresholdType === 'value' &&
                  params.thresholdType === 'sigma') {
                  this.thresholdMin = this.volume.getSigmaForValue(this.thresholdMin);
                  this.thresholdMax = this.volume.getSigmaForValue(this.thresholdMax);
              }
              else if (this.thresholdType === 'sigma' &&
                  params.thresholdType === 'value') {
                  this.thresholdMin = this.volume.getValueForSigma(this.thresholdMin);
                  this.thresholdMax = this.volume.getValueForSigma(this.thresholdMax);
              }
              this.thresholdType = params.thresholdType;
          }
          if (params && params.radiusType !== undefined) {
              if (params.radiusType === 'radius') {
                  this.radius = 0.1;
              }
              else {
                  this.radius = parseFloat(params.radiusType);
              }
              what.radius = true;
              if (this.dotType === 'sphere' &&
                  (!ExtensionFragDepth || this.disableImpostor)) {
                  rebuild = true;
              }
          }
          if (params && params.radius !== undefined) {
              what.radius = true;
              if (this.dotType === 'sphere' &&
                  (!ExtensionFragDepth || this.disableImpostor)) {
                  rebuild = true;
              }
          }
          if (params && params.scale !== undefined) {
              what.scale = true;
              if (this.dotType === 'sphere' &&
                  (!ExtensionFragDepth || this.disableImpostor)) {
                  rebuild = true;
              }
          }
          Representation.prototype.setParameters.call(this, params, what, rebuild);
          return this;
      };

      return DotRepresentation;
  }(Representation));

  ShaderRegistry.add('shader/Image.vert', "uniform float clipRadius;\nuniform vec3 clipCenter;\nvarying vec2 vUv;\n#if defined( NEAR_CLIP ) || defined( RADIUS_CLIP ) || !defined( PICKING )\nvarying vec3 vViewPosition;\n#endif\n#if defined( RADIUS_CLIP )\nvarying vec3 vClipCenter;\n#endif\nvoid main() {\n#include begin_vertex\n#include project_vertex\nvUv = uv;\n#if defined( NEAR_CLIP ) || defined( RADIUS_CLIP ) || !defined( PICKING )\nvViewPosition = -mvPosition.xyz;\n#endif\n#if defined( RADIUS_CLIP )\nvClipCenter = -( modelViewMatrix * vec4( clipCenter, 1.0 ) ).xyz;\n#endif\n}");

  ShaderRegistry.add('shader/Image.frag', "uniform sampler2D map;\nuniform float opacity;\nuniform vec2 mapSize;\nuniform float clipNear;\nuniform float clipRadius;\nvarying vec2 vUv;\n#if defined( NEAR_CLIP ) || defined( RADIUS_CLIP ) || !defined( PICKING )\nvarying vec3 vViewPosition;\n#endif\n#if defined( RADIUS_CLIP )\nvarying vec3 vClipCenter;\n#endif\n#if defined( PICKING )\nuniform sampler2D pickingMap;\nuniform float objectId;\n#else\n#include fog_pars_fragment\n#endif\n#if defined( CUBIC_INTERPOLATION )\n#if defined( CATMULROM_FILTER ) || defined( MITCHELL_FILTER )\n#if defined( CATMULROM_FILTER )\nconst float B = 0.0;\nconst float C = 0.5;\n#elif defined( MITCHELL_FILTER )\nconst float B = 0.333;\nconst float C = 0.333;\n#endif\nfloat filter( float x ){\nfloat f = x;\nif( f < 0.0 ){\nf = -f;\n}\nif( f < 1.0 ){\nreturn ( ( 12.0 - 9.0 * B - 6.0 * C ) * ( f * f * f ) +\n( -18.0 + 12.0 * B + 6.0 *C ) * ( f * f ) +\n( 6.0 - 2.0 * B ) ) / 6.0;\n}else if( f >= 1.0 && f < 2.0 ){\nreturn ( ( -B - 6.0 * C ) * ( f * f * f )\n+ ( 6.0 * B + 30.0 * C ) * ( f *f ) +\n( - ( 12.0 * B ) - 48.0 * C ) * f +\n8.0 * B + 24.0 * C ) / 6.0;\n}else{\nreturn 0.0;\n}\n}\n#elif defined( BSPLINE_FILTER )\nfloat filter( float x ){\nfloat f = x;\nif( f < 0.0 ){\nf = -f;\n}\nif( f >= 0.0 && f <= 1.0 ){\nreturn ( 2.0 / 3.0 ) + ( 0.5 ) * ( f * f * f ) - ( f * f );\n}else if( f > 1.0 && f <= 2.0 ){\nreturn 1.0 / 6.0 * pow( ( 2.0 - f ), 3.0 );\n}\nreturn 1.0;\n}\n#else\nfloat filter( float x ){\nreturn 1.0;\n}\n#endif\nvec4 biCubic( sampler2D tex, vec2 texCoord ){\nvec2 texelSize = 1.0 / mapSize;\ntexCoord -= texelSize / 2.0;\nvec4 nSum = vec4( 0.0 );\nfloat nDenom = 0.0;\nvec2 cell = fract( texCoord * mapSize );\nfor( float m = -1.0; m <= 2.0; ++m ){\nfor( float n = -1.0; n <= 2.0; ++n ){\nvec4 vecData = texture2D(\ntex, texCoord + texelSize * vec2( m, n )\n);\nfloat c = filter( m - cell.x ) * filter( -n + cell.y );\nnSum += vecData * c;\nnDenom += c;\n}\n}\nreturn nSum / nDenom;\n}\n#endif\nvoid main(){\n#include nearclip_fragment\n#include radiusclip_fragment\n#if defined( CUBIC_INTERPOLATION )\ngl_FragColor = biCubic( map, vUv );\n#else\ngl_FragColor = texture2D( map, vUv );\n#endif\n#if defined( PICKING )\nif( gl_FragColor.a < 0.3 )\ndiscard;\ngl_FragColor = vec4( texture2D( pickingMap, vUv ).xyz, objectId );\n#else\nif( gl_FragColor.a < 0.01 )\ndiscard;\ngl_FragColor.a *= opacity;\n#include fog_fragment\n#endif\n}");

  /**
   * @file Image Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var quadIndices$1 = new Uint16Array([
      0, 1, 2,
      1, 3, 2
  ]);
  var quadUvs = new Float32Array([
      0, 1,
      0, 0,
      1, 1,
      1, 0
  ]);
  var ImageBufferDefaultParameters = Object.assign({
      filter: 'nearest',
      forceTransparent: true
  }, BufferDefaultParameters);
  var ImageBufferParameterTypes = Object.assign({
      filter: { updateShader: true, uniform: true }
  }, BufferParameterTypes);
  /**
   * Image buffer. Draw a single image. Optionally interpolate.
   */
  var ImageBuffer = /*@__PURE__*/(function (Buffer) {
      function ImageBuffer(data, params) {
          Buffer.call(this, {
              position: data.position,
              index: quadIndices$1,
              picking: data.picking
          }, params);
          this.parameterTypes = ImageBufferParameterTypes;
          this.alwaysTransparent = true;
          this.hasWireframe = false;
          this.vertexShader = 'Image.vert';
          this.fragmentShader = 'Image.frag';
          var imageData = data.imageData;
          var width = data.width;
          var height = data.height;
          var tex = new DataTexture(imageData, width, height);
          tex.flipY = true;
          this.tex = tex;
          var n = imageData.length;
          var pickingData = new Uint8Array(n);
          for (var i = 0; i < n; i += 4) {
              var j = i / 4;
              pickingData[i] = j >> 16 & 255;
              pickingData[i + 1] = j >> 8 & 255;
              pickingData[i + 2] = j & 255;
          }
          var pickingTex = new DataTexture(pickingData, width, height);
          pickingTex.flipY = true;
          pickingTex.minFilter = NearestFilter;
          pickingTex.magFilter = NearestFilter;
          this.pickingTex = pickingTex;
          this.addUniforms({
              'map': { value: tex },
              'pickingMap': { value: pickingTex },
              'mapSize': { value: new Vector2(width, height) }
          });
          this.geometry.setAttribute('uv', new BufferAttribute(quadUvs, 2));
      }

      if ( Buffer ) ImageBuffer.__proto__ = Buffer;
      ImageBuffer.prototype = Object.create( Buffer && Buffer.prototype );
      ImageBuffer.prototype.constructor = ImageBuffer;

      var prototypeAccessors = { defaultParameters: { configurable: true } };
      prototypeAccessors.defaultParameters.get = function () { return ImageBufferDefaultParameters; };
      ImageBuffer.prototype.getDefines = function getDefines (type) {
          var defines = Buffer.prototype.getDefines.call(this, type);
          var filter = this.parameters.filter;
          if (filter.startsWith('cubic')) {
              defines.CUBIC_INTERPOLATION = 1;
              if (filter.endsWith('bspline')) {
                  defines.BSPLINE_FILTER = 1;
              }
              else if (filter.endsWith('catmulrom')) {
                  defines.CATMULROM_FILTER = 1;
              }
              else if (filter.endsWith('mitchell')) {
                  defines.MITCHELL_FILTER = 1;
              }
          }
          return defines;
      };
      ImageBuffer.prototype.updateTexture = function updateTexture () {
          var tex = this.tex;
          var filter = this.parameters.filter;
          if (filter.startsWith('cubic')) {
              tex.minFilter = NearestFilter;
              tex.magFilter = NearestFilter;
          }
          else if (filter === 'linear') {
              tex.minFilter = LinearFilter;
              tex.magFilter = LinearFilter;
          }
          else { // filter === "nearest"
              tex.minFilter = NearestFilter;
              tex.magFilter = NearestFilter;
          }
          tex.needsUpdate = true;
          this.pickingTex.needsUpdate = true;
      };
      ImageBuffer.prototype.makeMaterial = function makeMaterial () {
          Buffer.prototype.makeMaterial.call(this);
          this.updateTexture();
          var m = this.material;
          m.uniforms.map.value = this.tex;
          m.blending = NormalBlending;
          m.needsUpdate = true;
          var wm = this.wireframeMaterial;
          wm.uniforms.map.value = this.tex;
          wm.blending = NormalBlending;
          wm.needsUpdate = true;
          var pm = this.pickingMaterial;
          pm.uniforms.map.value = this.tex;
          pm.uniforms.pickingMap.value = this.pickingTex;
          pm.blending = NormalBlending;
          pm.needsUpdate = true;
      };
      ImageBuffer.prototype.setUniforms = function setUniforms (data) {
          if (data && data.filter !== undefined) {
              this.updateTexture();
              data.map = this.tex;
          }
          Buffer.prototype.setUniforms.call(this, data);
      };

      Object.defineProperties( ImageBuffer.prototype, prototypeAccessors );

      return ImageBuffer;
  }(Buffer));

  /**
   * @file Volume Slice
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var VolumeSlice = function VolumeSlice(volume, params) {
      var p = params || {};
      this.dimension = defaults(p.dimension, 'x');
      this.positionType = defaults(p.positionType, 'percent');
      this.position = defaults(p.position, 30);
      this.thresholdType = defaults(p.thresholdType, 'sigma');
      this.thresholdMin = defaults(p.thresholdMin, -Infinity);
      this.thresholdMax = defaults(p.thresholdMax, Infinity);
      this.normalize = defaults(p.normalize, false);
      this.volume = volume;
  };
  VolumeSlice.prototype.getPositionFromCoordinate = function getPositionFromCoordinate (coord) {
      var dim = this.dimension;
      var v = this.volume;
      var m = v.matrix;
      var mp = new Vector3().setFromMatrixPosition(m)[dim];
      var ms = new Vector3().setFromMatrixScale(m)[dim];
      var vn;
      if (dim === 'x') {
          vn = v.nx;
      }
      else if (dim === 'y') {
          vn = v.ny;
      }
      else {
          vn = v.nz;
      }
      return Math.round((((coord - mp) / (vn / 100)) + 1) / ms);
  };
  VolumeSlice.prototype.getData = function getData (params) {
      params = params || {};
      var v = this.volume;
      var d = v.data;
      var m = v.matrix;
      var p;
      if (this.positionType === 'coordinate') {
          p = this.getPositionFromCoordinate(this.position);
      }
      else {
          p = this.position;
      }
      function pos(dimLen) {
          return Math.round((dimLen / 100) * (p - 1));
      }
      function index(x, y, z, i) {
          return (z * v.ny * v.nx + y * v.nx + x) * 3 + i;
      }
      var position = new Float32Array(4 * 3);
      var vec = new Vector3();
      var width, height;
      var x;
      var y;
      var z;
      var x0 = 0;
      var y0 = 0;
      var z0 = 0;
      var nx = v.nx;
      var ny = v.ny;
      var nz = v.nz;
      function setVec(x, y, z, offset) {
          vec.set(x, y, z).applyMatrix4(m).toArray(position, offset);
      }
      if (this.dimension === 'x') {
          x = pos(v.nx);
          y = v.ny - 1;
          z = v.nz - 1;
          width = v.nz;
          height = v.ny;
          x0 = x;
          nx = x0 + 1;
          setVec(x, 0, 0, 0);
          setVec(x, y, 0, 3);
          setVec(x, 0, z, 6);
          setVec(x, y, z, 9);
      }
      else if (this.dimension === 'y') {
          x = v.nx - 1;
          y = pos(v.ny);
          z = v.nz - 1;
          width = v.nz;
          height = v.nx;
          y0 = y;
          ny = y0 + 1;
          setVec(0, y, 0, 0);
          setVec(x, y, 0, 3);
          setVec(0, y, z, 6);
          setVec(x, y, z, 9);
      }
      else if (this.dimension === 'z') {
          x = v.nx - 1;
          y = v.ny - 1;
          z = pos(v.nz);
          width = v.nx;
          height = v.ny;
          z0 = z;
          nz = z0 + 1;
          setVec(0, 0, z, 0);
          setVec(0, y, z, 3);
          setVec(x, 0, z, 6);
          setVec(x, y, z, 9);
      }
      var i = 0;
      var j = 0;
      var imageData = new Uint8Array(width * height * 4);
      var pickingArray = new Float32Array(width * height);
      var tMin, tMax;
      if (this.thresholdType === 'sigma') {
          tMin = v.getValueForSigma(this.thresholdMin);
          tMax = v.getValueForSigma(this.thresholdMax);
      }
      else {
          tMin = this.thresholdMin;
          tMax = this.thresholdMax;
      }
      var cp = Object.assign({}, params.colorParams, { volume: v });
      if (this.normalize) {
          cp.domain = [0, 1];
      }
      var colormaker = ColormakerRegistry.getScheme(cp);
      var tmp = new Float32Array(3);
      var scale = colormaker.getScale();
      var min = 0, max, diff = 0;
      if (this.normalize) {
          min = +Infinity;
          max = -Infinity;
          for (var iy = y0; iy < ny; ++iy) {
              for (var ix = x0; ix < nx; ++ix) {
                  for (var iz = z0; iz < nz; ++iz) {
                      var idx = index(ix, iy, iz, 0) / 3;
                      var val = d[idx];
                      if (val < min)
                          { min = val; }
                      if (val > max)
                          { max = val; }
                  }
              }
          }
          diff = max - min;
      }
      for (var iy$1 = y0; iy$1 < ny; ++iy$1) {
          for (var ix$1 = x0; ix$1 < nx; ++ix$1) {
              for (var iz$1 = z0; iz$1 < nz; ++iz$1) {
                  var idx$1 = index(ix$1, iy$1, iz$1, 0) / 3;
                  var val$1 = d[idx$1];
                  if (this.normalize) {
                      val$1 = (val$1 - min) / diff;
                  }
                  colormaker.colorToArray(scale(val$1), tmp);
                  imageData[i] = Math.round(tmp[0] * 255);
                  imageData[i + 1] = Math.round(tmp[1] * 255);
                  imageData[i + 2] = Math.round(tmp[2] * 255);
                  imageData[i + 3] = (val$1 > tMin && val$1 < tMax) ? 255 : 0;
                  pickingArray[j] = idx$1;
                  ++j;
                  i += 4;
              }
          }
      }
      var picking = new SlicePicker(pickingArray, v);
      return { position: position, imageData: imageData, width: width, height: height, picking: picking };
  };

  /**
   * @file Slice Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Slice representation
   */
  var SliceRepresentation = /*@__PURE__*/(function (Representation) {
      function SliceRepresentation(volume, viewer, params) {
          Representation.call(this, volume, viewer, params);
          this.type = 'slice';
          this.parameters = Object.assign({
              filter: {
                  type: 'select',
                  buffer: true,
                  options: {
                      'nearest': 'nearest',
                      'linear': 'linear',
                      'cubic-bspline': 'cubic-bspline',
                      'cubic-catmulrom': 'cubic-catmulrom',
                      'cubic-mitchell': 'cubic-mitchell'
                  }
              },
              positionType: {
                  type: 'select',
                  rebuild: true,
                  options: {
                      'percent': 'percent', 'coordinate': 'coordinate'
                  }
              },
              position: {
                  type: 'range',
                  step: 0.1,
                  max: 100,
                  min: 1,
                  rebuild: true
              },
              dimension: {
                  type: 'select',
                  rebuild: true,
                  options: {
                      'x': 'x', 'y': 'y', 'z': 'z'
                  }
              },
              thresholdType: {
                  type: 'select',
                  rebuild: true,
                  options: {
                      'value': 'value', 'sigma': 'sigma'
                  }
              },
              thresholdMin: {
                  type: 'number', precision: 3, max: Infinity, min: -Infinity, rebuild: true
              },
              thresholdMax: {
                  type: 'number', precision: 3, max: Infinity, min: -Infinity, rebuild: true
              },
              normalize: {
                  type: 'boolean', rebuild: true
              }
          }, this.parameters, {
              flatShaded: null,
              side: null,
              wireframe: null,
              linewidth: null,
              colorScheme: null,
              roughness: null,
              metalness: null,
              diffuse: null
          });
          this.volume = volume;
          this.init(params);
      }

      if ( Representation ) SliceRepresentation.__proto__ = Representation;
      SliceRepresentation.prototype = Object.create( Representation && Representation.prototype );
      SliceRepresentation.prototype.constructor = SliceRepresentation;
      SliceRepresentation.prototype.init = function init (params) {
          var v = this.volume;
          var p = params || {};
          p.colorDomain = defaults(p.colorDomain, [v.min, v.max]);
          p.colorScheme = defaults(p.colorScheme, 'value');
          p.colorScale = defaults(p.colorScale, 'Spectral');
          this.colorScheme = 'value';
          this.dimension = defaults(p.dimension, 'x');
          this.filter = defaults(p.filter, 'cubic-bspline');
          this.positionType = defaults(p.positionType, 'percent');
          this.position = defaults(p.position, 30);
          this.thresholdType = defaults(p.thresholdType, 'sigma');
          this.thresholdMin = defaults(p.thresholdMin, -Infinity);
          this.thresholdMax = defaults(p.thresholdMax, Infinity);
          this.normalize = defaults(p.normalize, false);
          Representation.prototype.init.call(this, p);
          this.build();
      };
      SliceRepresentation.prototype.attach = function attach (callback) {
          var this$1$1 = this;

          this.bufferList.forEach(function (buffer) {
              this$1$1.viewer.add(buffer);
          });
          this.setVisibility(this.visible);
          callback();
      };
      SliceRepresentation.prototype.create = function create () {
          var volumeSlice = new VolumeSlice(this.volume, {
              positionType: this.positionType,
              position: this.position,
              dimension: this.dimension,
              thresholdType: this.thresholdType,
              thresholdMin: this.thresholdMin,
              thresholdMax: this.thresholdMax,
              normalize: this.normalize
          });
          var sliceBuffer = new ImageBuffer(volumeSlice.getData({ colorParams: this.getColorParams() }), this.getBufferParams({
              filter: this.filter
          }));
          this.bufferList.push(sliceBuffer);
      };

      return SliceRepresentation;
  }(Representation));

  /**
   * @file Representation Utils
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function logReprUnknown(type) {
      Log.error(("makeRepresentation: representation type " + type + " unknown"));
  }
  function makeRepresentation(type, object, viewer, params) {
      if (exports.Debug)
          { Log.time('makeRepresentation ' + type); }
      var ReprClass;
      if (object instanceof Structure) {
          ReprClass = RepresentationRegistry.get(type);
          if (!ReprClass) {
              logReprUnknown(type);
              return;
          }
      }
      else if (object instanceof Surface) {
          if (type === 'surface') {
              ReprClass = SurfaceRepresentation;
          }
          else if (type === 'dot') {
              ReprClass = DotRepresentation;
          }
          else {
              logReprUnknown(type);
              return;
          }
      }
      else if (object instanceof Volume) {
          if (type === 'surface') {
              ReprClass = SurfaceRepresentation;
          }
          else if (type === 'dot') {
              ReprClass = DotRepresentation;
          }
          else if (type === 'slice') {
              ReprClass = SliceRepresentation;
          }
          else {
              logReprUnknown(type);
              return;
          }
      }
      else if (object instanceof Shape) {
          ReprClass = BufferRepresentation;
          object = object.getBufferList();
      }
      else if (type === 'buffer') {
          ReprClass = BufferRepresentation;
      }
      else {
          Log.error('makeRepresentation: object ' + object + ' unknown');
          return;
      }
      var repr = new ReprClass(object, viewer, params);
      if (exports.Debug)
          { Log.timeEnd('makeRepresentation ' + type); }
      return repr;
  }

  /**
   * @file Element
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var ElementDefaultParameters = {
      name: 'some element',
      status: ''
  };
  /**
   * Element base class
   */
  var Element = function Element(stage, params) {
      if ( params === void 0 ) params = {};

      this.stage = stage;
      /**
       * Events emitted by the element
       */
      this.signals = {
          statusChanged: new signals.Signal(),
          nameChanged: new signals.Signal(),
          disposed: new signals.Signal()
      };
      this.parameters = createParams(params, this.defaultParameters);
      this.uuid = generateUUID();
  };

  var prototypeAccessors$a = { defaultParameters: { configurable: true },name: { configurable: true } };
  prototypeAccessors$a.defaultParameters.get = function () { return ElementDefaultParameters; };
  prototypeAccessors$a.name.get = function () { return this.parameters.name; };
  Element.prototype.setStatus = function setStatus (value) {
      this.parameters.status = value;
      this.signals.statusChanged.dispatch(value);
      return this;
  };
  Element.prototype.setName = function setName (value) {
      this.parameters.name = value;
      this.signals.nameChanged.dispatch(value);
      return this;
  };
  Element.prototype.dispose = function dispose () {
      this.signals.disposed.dispatch();
  };

  Object.defineProperties( Element.prototype, prototypeAccessors$a );

  /**
   * @file Representation Element
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var RepresentationElementDefaultParameters = Object.assign({
      visible: true
  }, ElementDefaultParameters);
  /**
   * Element wrapping a {@link Representation} object
   */
  var RepresentationElement = /*@__PURE__*/(function (Element) {
      function RepresentationElement(stage, repr, params, parent) {
          if ( params === void 0 ) params = {};

          Element.call(this, stage, Object.assign({ name: repr.type }, params));
          this.parent = parent;
          this.signals = Object.assign({
              visibilityChanged: new signals.Signal(),
              parametersChanged: new signals.Signal()
          }, this.signals);
          this.setRepresentation(repr);
      }

      if ( Element ) RepresentationElement.__proto__ = Element;
      RepresentationElement.prototype = Object.create( Element && Element.prototype );
      RepresentationElement.prototype.constructor = RepresentationElement;

      var prototypeAccessors = { defaultParameters: { configurable: true },visible: { configurable: true },type: { configurable: true } };
      prototypeAccessors.defaultParameters.get = function () { return RepresentationElementDefaultParameters; };
      prototypeAccessors.visible.get = function () { return this.parameters.visible; };
      /**
       * Component type
       * @type {String}
       */
      prototypeAccessors.type.get = function () { return 'representation'; };
      RepresentationElement.prototype.getType = function getType () {
          return this.repr.type;
      };
      RepresentationElement.prototype.setRepresentation = function setRepresentation (repr) {
          this._disposeRepresentation();
          this.repr = repr;
          // this.name = repr.type;
          this.stage.tasks.listen(this.repr.tasks);
          this.updateVisibility();
      };
      RepresentationElement.prototype._disposeRepresentation = function _disposeRepresentation () {
          if (this.repr) {
              this.stage.tasks.unlisten(this.repr.tasks);
              this.repr.dispose();
          }
      };
      RepresentationElement.prototype.dispose = function dispose () {
          if (this.parent && this.parent.hasRepresentation(this)) {
              this.parent.removeRepresentation(this);
          }
          else {
              this._disposeRepresentation();
              this.signals.disposed.dispatch();
          }
      };
      /**
       * Set the visibility of the component, takes parent visibility into account
       * @param {Boolean} value - visibility flag
       * @return {RepresentationElement} this object
       */
      RepresentationElement.prototype.setVisibility = function setVisibility (value) {
          this.parameters.visible = value;
          this.updateVisibility();
          this.signals.visibilityChanged.dispatch(this.parameters.visible);
          return this;
      };
      RepresentationElement.prototype.getVisibility = function getVisibility () {
          if (this.parent) {
              return this.parent.parameters.visible && this.parameters.visible;
          }
          else {
              return this.parameters.visible;
          }
      };
      /**
       * Toggle visibility of the component, takes parent visibility into account
       * @return {RepresentationElement} this object
       */
      RepresentationElement.prototype.toggleVisibility = function toggleVisibility () {
          return this.setVisibility(!this.parameters.visible);
      };
      RepresentationElement.prototype.updateVisibility = function updateVisibility () {
          this.repr.setVisibility(this.getVisibility());
      };
      /**
       * Set selection
       * @param {Object} what - flags indicating what attributes to update
       * @param {Boolean} what.position - update position attribute
       * @param {Boolean} what.color - update color attribute
       * @param {Boolean} what.radius - update radius attribute
       * @return {RepresentationElement} this object
       */
      RepresentationElement.prototype.update = function update (what) {
          this.repr.update(what); // TODO
          return this;
      };
      RepresentationElement.prototype.build = function build (params) {
          this.repr.build(params);
          return this;
      };
      /**
       * Set selection
       * @param {String} string - selection string
       * @return {RepresentationElement} this object
       */
      RepresentationElement.prototype.setSelection = function setSelection (string) {
          var repr = this.repr; // TODO
          if (repr.setSelection) {
              repr.setSelection(string);
          }
          return this;
      };
      /**
       * Set representation parameters
       * @param {RepresentationParameters} params - parameter object
       * @return {RepresentationElement} this object
       */
      RepresentationElement.prototype.setParameters = function setParameters (params) {
          this.repr.setParameters(params);
          this.signals.parametersChanged.dispatch(this.repr.getParameters());
          return this;
      };
      /**
       * Get representation parameters
       * @return {RepresentationParameters} parameter object
       */
      RepresentationElement.prototype.getParameters = function getParameters () {
          return this.repr.getParameters();
      };
      /**
       * Set color
       * @param {String|Color|Hex} value - color value
       * @return {RepresentationElement} this object
       */
      RepresentationElement.prototype.setColor = function setColor (value) {
          this.repr.setColor(value);
          return this;
      };

      Object.defineProperties( RepresentationElement.prototype, prototypeAccessors );

      return RepresentationElement;
  }(Element));

  /**
   * @file Component
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var _m = new Matrix4();
  var _v = new Vector3();
  var ComponentDefaultParameters = {
      name: '',
      status: '',
      visible: true
  };
  /**
   * Base class for components
   */
  var Component = function Component(stage, object, params) {
      if ( params === void 0 ) params = {};

      this.stage = stage;
      this.object = object;
      /**
       * Events emitted by the component
       */
      this.signals = {
          representationAdded: new signals.Signal(),
          representationRemoved: new signals.Signal(),
          visibilityChanged: new signals.Signal(),
          matrixChanged: new signals.Signal(),
          statusChanged: new signals.Signal(),
          nameChanged: new signals.Signal(),
          disposed: new signals.Signal()
      };
      this.reprList = [];
      this.annotationList = [];
      this.matrix = new Matrix4();
      this.position = new Vector3();
      this.quaternion = new Quaternion();
      this.scale = new Vector3(1, 1, 1);
      this.transform = new Matrix4();
      this.parameters = createParams(params, this.defaultParameters);
      this.uuid = generateUUID();
      this.viewer = stage.viewer;
      this.controls = new ComponentControls(this);
  };

  var prototypeAccessors$9 = { defaultParameters: { configurable: true },name: { configurable: true },status: { configurable: true },visible: { configurable: true } };
  prototypeAccessors$9.defaultParameters.get = function () { return ComponentDefaultParameters; };
  prototypeAccessors$9.name.get = function () { return this.parameters.name; };
  prototypeAccessors$9.status.get = function () { return this.parameters.status; };
  prototypeAccessors$9.visible.get = function () { return this.parameters.visible; };
  /**
   * Set position transform
   *
   * @example
   * // translate by 25 angstrom along x axis
   * component.setPosition([ 25, 0, 0 ]);
   *
   * @param {Vector3|Array} p - the coordinates
   * @return {Component} this object
   */
  Component.prototype.setPosition = function setPosition (p) {
      if (Array.isArray(p)) {
          this.position.fromArray(p);
      }
      else {
          this.position.copy(p);
      }
      this.updateMatrix();
      return this;
  };
  /**
   * Set local rotation transform
   * (for global rotation use setTransform)
   *
   * @example
   * // rotate by 2 degree radians on x axis
   * component.setRotation( [ 2, 0, 0 ] );
   *
   * @param {Quaternion|Euler|Array} r - the rotation
   * @return {Component} this object
   */
  Component.prototype.setRotation = function setRotation (r) {
      if (Array.isArray(r)) {
          if (r.length === 3) {
              var e = new Euler().fromArray(r);
              this.quaternion.setFromEuler(e);
          }
          else {
              this.quaternion.fromArray(r);
          }
      }
      else if (r instanceof Euler) {
          this.quaternion.setFromEuler(r);
      }
      else {
          this.quaternion.copy(r);
      }
      this.updateMatrix();
      return this;
  };
  /**
   * Set scale transform
   *
   * @example
   * // scale by factor of two
   * component.setScale( 2 );
   *
   * @param {Number} s - the scale
   * @return {Component} this object
   */
  Component.prototype.setScale = function setScale (s) {
      this.scale.set(s, s, s);
      this.updateMatrix();
      return this;
  };
  /**
   * Set general transform. Is applied before and in addition
   * to the position, rotation and scale transformations
   *
   * @example
   * component.setTransform( matrix );
   *
   * @param {Matrix4} m - the matrix
   * @return {Component} this object
   */
  Component.prototype.setTransform = function setTransform (m) {
      this.transform.copy(m);
      this.updateMatrix();
      return this;
  };
  Component.prototype.updateMatrix = function updateMatrix () {
      var c = this.getCenterUntransformed(_v);
      this.matrix.makeTranslation(-c.x, -c.y, -c.z);
      _m.makeRotationFromQuaternion(this.quaternion);
      this.matrix.premultiply(_m);
      _m.makeScale(this.scale.x, this.scale.y, this.scale.z);
      this.matrix.premultiply(_m);
      var p = this.position;
      _m.makeTranslation(p.x + c.x, p.y + c.y, p.z + c.z);
      this.matrix.premultiply(_m);
      this.matrix.premultiply(this.transform);
      this.updateRepresentationMatrices();
      this.stage.viewer.updateBoundingBox();
      this.signals.matrixChanged.dispatch(this.matrix);
  };
  /**
   * Propogates our matrix to each representation
   */
  Component.prototype.updateRepresentationMatrices = function updateRepresentationMatrices () {
          var this$1$1 = this;

      this.reprList.forEach(function (repr) {
          repr.setParameters({ matrix: this$1$1.matrix });
      });
  };
  /**
   * Add an anotation object
   * @param {Vector3} position - the 3d position
   * @param {String|Element} content - the HTML content
   * @param {Object} [params] - parameters
   * @param {Integer} params.offsetX - 2d offset in x direction
   * @param {Integer} params.offsetY - 2d offset in y direction
   * @return {Annotation} the added annotation object
   */
  Component.prototype.addAnnotation = function addAnnotation (position, content, params) {
      var annotation = new Annotation(this, position, content, params);
      this.annotationList.push(annotation);
      return annotation;
  };
  /**
   * Iterator over each annotation and executing the callback
   * @param  {Function} callback - function to execute
   * @return {undefined}
   */
  Component.prototype.eachAnnotation = function eachAnnotation (callback) {
      this.annotationList.slice().forEach(callback);
  };
  /**
   * Remove the give annotation from the component
   * @param {Annotation} annotation - the annotation to remove
   * @return {undefined}
   */
  Component.prototype.removeAnnotation = function removeAnnotation (annotation) {
      var idx = this.annotationList.indexOf(annotation);
      if (idx !== -1) {
          this.annotationList.splice(idx, 1);
          annotation.dispose();
      }
  };
  /**
   * Remove all annotations from the component
   * @return {undefined}
   */
  Component.prototype.removeAllAnnotations = function removeAllAnnotations () {
      this.eachAnnotation(function (annotation) { return annotation.dispose(); });
      this.annotationList.length = 0;
  };
  /**
   * Add a new representation to the component
   * @param {String} type - the name of the representation
   * @param {Object} object - the object on which the representation should be based
   * @param {RepresentationParameters} [params] - representation parameters
   * @return {RepresentationElement} the created representation wrapped into
   *                               a representation element object
   */
  Component.prototype._addRepresentation = function _addRepresentation (type, object, params, hidden) {
          if ( hidden === void 0 ) hidden = false;

      var p = params || {};
      var sp = this.stage.getParameters(); // TODO
      p.matrix = this.matrix.clone();
      p.quality = p.quality || sp.quality;
      p.disableImpostor = defaults(p.disableImpostor, !sp.impostor);
      p.useWorker = defaults(p.useWorker, sp.workerDefault);
      p.visible = defaults(p.visible, true);
      var p2 = Object.assign({}, p, { visible: this.parameters.visible && p.visible });
      var repr = makeRepresentation(type, object, this.viewer, p2);
      var reprElem = new RepresentationElement(this.stage, repr, p, this);
      if (!hidden) {
          this.reprList.push(reprElem);
          this.signals.representationAdded.dispatch(reprElem);
      }
      return reprElem;
  };
  Component.prototype.addBufferRepresentation = function addBufferRepresentation (buffer, params) {
      return this._addRepresentation.call(this, 'buffer', buffer, params);
  };
  Component.prototype.hasRepresentation = function hasRepresentation (repr) {
      return this.reprList.indexOf(repr) !== -1;
  };
  /**
   * Iterator over each representation and executing the callback
   * @param  {Function} callback - function to execute
   * @return {undefined}
   */
  Component.prototype.eachRepresentation = function eachRepresentation (callback) {
      this.reprList.slice().forEach(callback);
  };
  /**
   * Removes a representation component
   * @param {RepresentationElement} repr - the representation element
   * @return {undefined}
   */
  Component.prototype.removeRepresentation = function removeRepresentation (repr) {
      var idx = this.reprList.indexOf(repr);
      if (idx !== -1) {
          this.reprList.splice(idx, 1);
          repr.dispose();
          this.signals.representationRemoved.dispatch(repr);
      }
  };
  Component.prototype.updateRepresentations = function updateRepresentations (what) {
      this.reprList.forEach(function (repr) { return repr.update(what); });
      this.stage.viewer.requestRender();
  };
  /**
   * Removes all representation components
   * @return {undefined}
   */
  Component.prototype.removeAllRepresentations = function removeAllRepresentations () {
      this.eachRepresentation(function (repr) { return repr.dispose(); });
  };
  Component.prototype.dispose = function dispose () {
      this.removeAllAnnotations();
      this.removeAllRepresentations();
      delete this.annotationList;
      delete this.reprList;
      this.signals.disposed.dispatch();
  };
  /**
   * Set the visibility of the component, including added representations
   * @param {Boolean} value - visibility flag
   * @return {Component} this object
   */
  Component.prototype.setVisibility = function setVisibility (value) {
      this.parameters.visible = value;
      this.eachRepresentation(function (repr) { return repr.updateVisibility(); });
      this.eachAnnotation(function (annotation) { return annotation.updateVisibility(); });
      this.signals.visibilityChanged.dispatch(value);
      return this;
  };
  Component.prototype.setStatus = function setStatus (value) {
      this.parameters.status = value;
      this.signals.statusChanged.dispatch(value);
      return this;
  };
  Component.prototype.setName = function setName (value) {
      this.parameters.name = value;
      this.signals.nameChanged.dispatch(value);
      return this;
  };
  /**
   * @return {Box3} the component's bounding box
   */
  Component.prototype.getBox = function getBox () {
          var ref;

          var args = [], len = arguments.length;
          while ( len-- ) args[ len ] = arguments[ len ];
      return (ref = this).getBoxUntransformed.apply(ref, args)
          .clone().applyMatrix4(this.matrix);
  };
  /**
   * @return {Vector3} the component's center position
   */
  Component.prototype.getCenter = function getCenter () {
          var ref;

          var args = [], len = arguments.length;
          while ( len-- ) args[ len ] = arguments[ len ];
      return (ref = this).getCenterUntransformed.apply(ref, args)
          .clone().applyMatrix4(this.matrix);
  };
  Component.prototype.getZoom = function getZoom () {
          var ref;

          var args = [], len = arguments.length;
          while ( len-- ) args[ len ] = arguments[ len ];
      return this.stage.getZoomForBox((ref = this).getBox.apply(ref, args));
  };
  /**
   * @abstract
   * @return {Box3} the untransformed component's bounding box
   */
  Component.prototype.getBoxUntransformed = function getBoxUntransformed () {
          var args = [], len = arguments.length;
          while ( len-- ) args[ len ] = arguments[ len ];

      return new Box3();
  };
  Component.prototype.getCenterUntransformed = function getCenterUntransformed () {
          var args = [], len = arguments.length;
          while ( len-- ) args[ len ] = arguments[ len ];

      return this.getBoxUntransformed().getCenter(new Vector3());
  };
  /**
   * Automatically center and zoom the component
   * @param  {Integer} [duration] - duration of the animation, defaults to 0
   * @return {undefined}
   */
  Component.prototype.autoView = function autoView (duration) {
      this.stage.animationControls.zoomMove(this.getCenter(), this.getZoom(), defaults(duration, 0));
  };

  Object.defineProperties( Component.prototype, prototypeAccessors$9 );

  /**
   * @file Collection
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var Collection = function Collection(list) {
      if ( list === void 0 ) list = [];

      this.list = list;
      // remove elements from list when they get disposed
      var n = list.length;
      for (var i = 0; i < n; ++i) {
          var elm = list[i];
          elm.signals.disposed.add(this._remove, this);
      }
  };

  var prototypeAccessors$8 = { first: { configurable: true } };
  Collection.prototype._remove = function _remove (elm) {
      var idx = this.list.indexOf(elm);
      if (idx !== -1) {
          this.list.splice(idx, 1);
      }
  };
  prototypeAccessors$8.first.get = function () {
      return this.list.length > 0 ? this.list[0] : undefined;
  };
  Collection.prototype.forEach = function forEach (fn) {
      this.list.forEach(fn);
      return this;
  };
  Collection.prototype.dispose = function dispose () {
      return this.forEach(function (elm) { return elm.dispose(); });
  };

  Object.defineProperties( Collection.prototype, prototypeAccessors$8 );

  /**
   * @file Component Collection
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var RepresentationCollection = /*@__PURE__*/(function (Collection) {
      function RepresentationCollection () {
          Collection.apply(this, arguments);
      }

      if ( Collection ) RepresentationCollection.__proto__ = Collection;
      RepresentationCollection.prototype = Object.create( Collection && Collection.prototype );
      RepresentationCollection.prototype.constructor = RepresentationCollection;

      RepresentationCollection.prototype.setParameters = function setParameters (params) {
          return this.forEach(function (repr) { return repr.setParameters(params); });
      };
      RepresentationCollection.prototype.setVisibility = function setVisibility (value) {
          return this.forEach(function (repr) { return repr.setVisibility(value); });
      };
      RepresentationCollection.prototype.setSelection = function setSelection (string) {
          return this.forEach(function (repr) { return repr.setSelection(string); });
      };
      RepresentationCollection.prototype.setColor = function setColor (color) {
          return this.forEach(function (repr) { return repr.setColor(color); });
      };
      RepresentationCollection.prototype.update = function update (what) {
          return this.forEach(function (repr) { return repr.update(what); });
      };
      RepresentationCollection.prototype.build = function build (params) {
          return this.forEach(function (repr) { return repr.build(params); });
      };
      RepresentationCollection.prototype.dispose = function dispose (params) {
          return this.forEach(function (repr) { return repr.dispose(); });
      };

      return RepresentationCollection;
  }(Collection));

  /**
   * @file Trajectory Component
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Trajectory component parameter object.
   * @typedef {Object} TrajectoryComponentParameters - component parameters
   *
   * @property {String} name - component name
   * @property {Integer} initialFrame - initial frame the trajectory is set to
   * @property {Integer} defaultStep - default step size to be used by trajectory players
   * @property {Integer} defaultTimeout - default timeout to be used by trajectory players
   * @property {String} defaultInterpolateType - one of "" (empty string), "linear" or "spline"
   * @property {Integer} defaultInterpolateStep - window size used for interpolation
   * @property {String} defaultMode - either "loop" or "once"
   * @property {String} defaultDirection - either "forward" or "backward"
   */
  var TrajectoryElementDefaultParameters = Object.assign({
      defaultStep: 1,
      defaultTimeout: 50,
      defaultInterpolateType: '',
      defaultInterpolateStep: 5,
      defaultMode: 'loop',
      defaultDirection: 'forward',
      initialFrame: 0
  }, ElementDefaultParameters);
  /**
   * Component wrapping a {@link Trajectory} object
   */
  var TrajectoryElement = /*@__PURE__*/(function (Element) {
      function TrajectoryElement(stage, trajectory, params) {
          var this$1$1 = this;
          if ( params === void 0 ) params = {};

          Element.call(this, stage, Object.assign({ name: trajectory.name }, params));
          this.trajectory = trajectory;
          this.signals = Object.assign(this.signals, {
              frameChanged: new signals.Signal(),
              playerChanged: new signals.Signal(),
              countChanged: new signals.Signal(),
              parametersChanged: new signals.Signal()
          });
          // signals
          trajectory.signals.frameChanged.add(function (i) {
              this$1$1.signals.frameChanged.dispatch(i);
          });
          trajectory.signals.playerChanged.add(function (player) {
              this$1$1.signals.playerChanged.dispatch(player);
          });
          trajectory.signals.countChanged.add(function (n) {
              this$1$1.signals.countChanged.dispatch(n);
          });
          //
          if (params.initialFrame !== undefined) {
              this.setFrame(params.initialFrame);
          }
      }

      if ( Element ) TrajectoryElement.__proto__ = Element;
      TrajectoryElement.prototype = Object.create( Element && Element.prototype );
      TrajectoryElement.prototype.constructor = TrajectoryElement;

      var prototypeAccessors = { defaultParameters: { configurable: true },type: { configurable: true } };
      prototypeAccessors.defaultParameters.get = function () { return TrajectoryElementDefaultParameters; };
      /**
       * Component type
       * @type {String}
       */
      prototypeAccessors.type.get = function () { return 'trajectory'; };
      /**
       * Set the frame of the trajectory
       * @param {Integer} i - frame number
       * @return {undefined}
       */
      TrajectoryElement.prototype.setFrame = function setFrame (i) {
          this.trajectory.setFrame(i);
      };
      /**
       * Set trajectory parameters
       * @param {TrajectoryParameters} params - trajectory parameters
       * @return {undefined}
       */
      TrajectoryElement.prototype.setParameters = function setParameters (params) {
          if ( params === void 0 ) params = {};

          this.trajectory.setParameters(params);
          this.signals.parametersChanged.dispatch(params);
      };
      TrajectoryElement.prototype.dispose = function dispose () {
          this.trajectory.dispose();
          Element.prototype.dispose.call(this);
      };

      Object.defineProperties( TrajectoryElement.prototype, prototypeAccessors );

      return TrajectoryElement;
  }(Element));

  /**
   * @file Frames
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var Frames = function Frames(name, path) {
      this.name = name;
      this.path = path;
      this.coordinates = [];
      this.boxes = [];
      this.times = [];
      this.timeOffset = 0;
      this.deltaTime = 1;
  };

  var prototypeAccessors$7 = { type: { configurable: true } };
  prototypeAccessors$7.type.get = function () { return 'Frames'; };

  Object.defineProperties( Frames.prototype, prototypeAccessors$7 );

  /**
   * @file Superposition
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var Superposition = function Superposition(atoms1, atoms2) {
      // allocate & init data structures
      this.A = new Matrix(3, 3);
      this.W = new Matrix(1, 3);
      this.U = new Matrix(3, 3);
      this.V = new Matrix(3, 3);
      this.VH = new Matrix(3, 3);
      this.R = new Matrix(3, 3);
      this.tmp = new Matrix(3, 3);
      this.c = new Matrix(3, 3);
      var n1;
      if (atoms1 instanceof Structure) {
          n1 = atoms1.atomCount;
      }
      else if (atoms1 instanceof Float32Array) {
          n1 = atoms1.length / 3;
      }
      else {
          return;
      }
      var n2;
      if (atoms2 instanceof Structure) {
          n2 = atoms2.atomCount;
      }
      else if (atoms2 instanceof Float32Array) {
          n2 = atoms2.length / 3;
      }
      else {
          return;
      }
      var n = Math.min(n1, n2);
      var coords1 = new Matrix(3, n);
      var coords2 = new Matrix(3, n);
      this.coords1t = new Matrix(n, 3);
      this.coords2t = new Matrix(n, 3);
      this.transformationMatrix = new Matrix4();
      this.c.data.set([1, 0, 0, 0, 1, 0, 0, 0, -1]);
      // prep coords
      this.prepCoords(atoms1, coords1, n, false);
      this.prepCoords(atoms2, coords2, n, false);
      // superpose
      this._superpose(coords1, coords2);
  };
  Superposition.prototype._superpose = function _superpose (coords1, coords2) {
      this.mean1 = meanRows(coords1);
      this.mean2 = meanRows(coords2);
      subRows(coords1, this.mean1);
      subRows(coords2, this.mean2);
      transpose(this.coords1t, coords1);
      transpose(this.coords2t, coords2);
      multiplyABt(this.A, this.coords2t, this.coords1t);
      svd(this.A, this.W, this.U, this.V);
      invert3x3(this.V, this.VH);
      multiply3x3(this.R, this.U, this.VH);
      if (mat3x3determinant(this.R) < 0.0) {
          if (exports.Debug)
              { Log.log('R not a right handed system'); }
          multiply3x3(this.tmp, this.c, this.VH);
          multiply3x3(this.R, this.U, this.tmp);
      }
      //get the transformation matrix
      var transformMat_ = new Matrix(4, 4);
      var tmp_1 = new Matrix(4, 4);
      var tmp_2 = new Matrix(4, 4);
      var sub = new Matrix(4, 4);
      var mult = new Matrix(4, 4);
      var add = new Matrix(4, 4);
      var R = this.R.data;
      var M1 = this.mean1;
      var M2 = this.mean2;
      sub.data.set([1, 0, 0, -M1[0],
          0, 1, 0, -M1[1],
          0, 0, 1, -M1[2],
          0, 0, 0, 1]);
      mult.data.set([R[0], R[1], R[2], 0,
          R[3], R[4], R[5], 0,
          R[6], R[7], R[8], 0,
          0, 0, 0, 1]);
      add.data.set([1, 0, 0, M2[0],
          0, 1, 0, M2[1],
          0, 0, 1, M2[2],
          0, 0, 0, 1]);
      transpose(tmp_1, sub);
      multiplyABt(transformMat_, mult, tmp_1);
      transpose(tmp_2, transformMat_);
      multiplyABt(tmp_1, add, tmp_2);
      transpose(transformMat_, tmp_1);
      this.transformationMatrix.elements = transformMat_.data;
  };
  Superposition.prototype.prepCoords = function prepCoords (atoms, coords, n, is4X4) {
      var i = 0;
      var cd = coords.data;
      var c = 3;
      var d = n * 3;
      if (is4X4) {
          d = n * 4;
          c = 4;
      }
      if (atoms instanceof Structure) {
          atoms.eachAtom(function (a) {
              if (i < d) {
                  cd[i + 0] = a.x;
                  cd[i + 1] = a.y;
                  cd[i + 2] = a.z;
                  if (is4X4)
                      { cd[i + 3] = 1; }
                  i += c;
              }
          });
      }
      else if (atoms instanceof Float32Array) {
          for (; i < d; i += c) {
              if (i < d) {
                  cd[i] = atoms[i];
                  cd[i + 1] = atoms[i + 1];
                  cd[i + 2] = atoms[i + 2];
                  if (is4X4)
                      { cd[i + 3] = 1; }
              }
          }
      }
      else {
          Log.warn('prepCoords: input type unknown');
      }
  };
  Superposition.prototype.transform = function transform (atoms) {
      // allocate data structures
      var n;
      if (atoms instanceof Structure) {
          n = atoms.atomCount;
      }
      else if (atoms instanceof Float32Array) {
          n = atoms.length / 3;
      }
      else {
          return;
      }
      var coords = new Matrix(4, n);
      var tCoords = new Matrix(n, 4);
      // prep coords
      this.prepCoords(atoms, coords, n, true);
      // check for transformation matrix correctness
      var transform = this.transformationMatrix;
      var det = transform.determinant();
      if (!det) {
          return det;
      }
      // do transform
      var mult = new Matrix(4, 4);
      mult.data = transform.elements;
      multiply(tCoords, coords, mult);
      var i = 0;
      var cd = tCoords.data;
      if (atoms instanceof Structure) {
          atoms.eachAtom(function (a) {
              a.x = cd[i];
              a.y = cd[i + 1];
              a.z = cd[i + 2];
              i += 4;
          });
          //update transformation matrices for each assembly
          var invertTrasform = new Matrix4();
          invertTrasform.getInverse(transform);
          var biomolDict = atoms.biomolDict;
          for (var key in biomolDict) {
              if (biomolDict.hasOwnProperty(key)) {
                  var assembly = biomolDict[key];
                  assembly.partList.forEach(function (part) {
                      part.matrixList.forEach(function (mat) {
                          mat.premultiply(transform);
                          mat.multiply(invertTrasform);
                      });
                  });
              }
          }
      }
      else if (atoms instanceof Float32Array) {
          var n4 = n * 4;
          for (; i < n4; i += 4) {
              atoms[i] = cd[i];
              atoms[i + 1] = cd[i + 1];
              atoms[i + 2] = cd[i + 2];
          }
      }
      else {
          Log.warn('transform: input type unknown');
      }
      return this.transformationMatrix;
  };

  /**
   * @file Trajectory Player
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var TrajectoryPlayerDefaultParameters = {
      step: 1,
      timeout: 50,
      start: 0,
      end: 0,
      interpolateType: '',
      interpolateStep: 5,
      mode: 'loop',
      direction: 'forward'
  };
  /**
   * Trajectory player for animating coordinate frames
   * @example
   * var player = new TrajectoryPlayer(trajectory, {step: 1, timeout: 50});
   * player.play();
   */
  var TrajectoryPlayer = function TrajectoryPlayer(traj, params) {
      var this$1$1 = this;
      if ( params === void 0 ) params = {};

      this.signals = {
          startedRunning: new signals.Signal(),
          haltedRunning: new signals.Signal()
      };
      this._run = false;
      this._previousTime = 0;
      this._currentTime = 0;
      this._currentStep = 1;
      traj.signals.playerChanged.add(function (player) {
          if (player !== this$1$1) {
              this$1$1.pause();
          }
      }, this);
      var n = defaults(traj.frameCount, 1);
      this.traj = traj;
      this.parameters = createParams(params, TrajectoryPlayerDefaultParameters);
      this.parameters.end = Math.min(defaults(params.end, n - 1), n - 1);
      this.parameters.step = defaults(params.step, Math.ceil((n + 1) / 100));
      this._currentFrame = this.parameters.start;
      this._direction = this.parameters.direction === 'bounce' ? 'forward' : this.parameters.direction;
      traj.signals.countChanged.add(function (n) {
          this$1$1.parameters.end = Math.min(defaults(this$1$1.parameters.end, n - 1), n - 1);
      }, this);
      this._animate = this._animate.bind(this);
  };

  var prototypeAccessors$6 = { isRunning: { configurable: true } };
  prototypeAccessors$6.isRunning.get = function () { return this._run; };
  /**
   * set player parameters
   * @param {TrajectoryPlayerParameters} [params] - parameter object
   */
  TrajectoryPlayer.prototype.setParameters = function setParameters (params) {
          if ( params === void 0 ) params = {};

      updateParams(this.parameters, params);
      if (params.direction !== undefined && this.parameters.direction !== 'bounce') {
          this._direction = this.parameters.direction;
      }
  };
  TrajectoryPlayer.prototype._animate = function _animate () {
      if (!this._run)
          { return; }
      this._currentTime = window.performance.now();
      var dt = this._currentTime - this._previousTime;
      var step = this.parameters.interpolateType ? this.parameters.interpolateStep : 1;
      var timeout = this.parameters.timeout / step;
      var traj = this.traj;
      if (traj && traj.frameCount && !traj.inProgress && dt >= timeout) {
          if (this.parameters.interpolateType) {
              if (this._currentStep > this.parameters.interpolateStep) {
                  this._currentStep = 1;
              }
              if (this._currentStep === 1) {
                  this._currentFrame = this._nextInterpolated();
              }
              if (traj.hasFrame(this._currentFrame)) {
                  this._currentStep += 1;
                  var t = this._currentStep / (this.parameters.interpolateStep + 1);
                  var ref = this._currentFrame;
                      var i = ref[0];
                      var ip = ref[1];
                      var ipp = ref[2];
                      var ippp = ref[3];
                  traj.setFrameInterpolated(i, ip, ipp, ippp, t, this.parameters.interpolateType);
                  this._previousTime = this._currentTime;
              }
              else {
                  traj.loadFrame(this._currentFrame);
              }
          }
          else {
              var i$1 = this._next();
              if (traj.hasFrame(i$1)) {
                  traj.setFrame(i$1);
                  this._previousTime = this._currentTime;
              }
              else {
                  traj.loadFrame(i$1);
              }
          }
      }
      window.requestAnimationFrame(this._animate);
  };
  TrajectoryPlayer.prototype._next = function _next () {
      var p = this.parameters;
      var i;
      if (this._direction === 'forward') {
          i = this.traj.currentFrame + p.step;
      }
      else {
          i = this.traj.currentFrame - p.step;
      }
      if (i > p.end || i < p.start) {
          if (p.direction === 'bounce') {
              if (this._direction === 'forward') {
                  this._direction = 'backward';
              }
              else {
                  this._direction = 'forward';
              }
          }
          if (p.mode === 'once') {
              this.pause();
              if (p.direction === 'forward') {
                  i = p.end;
              }
              else if (p.direction === 'backward') {
                  i = p.start;
              }
              else {
                  if (this._direction === 'forward') {
                      i = p.start;
                  }
                  else {
                      i = p.end;
                  }
              }
          }
          else {
              if (this._direction === 'forward') {
                  i = p.start;
                  if (p.interpolateType) {
                      i = Math.min(p.end, i + p.step);
                  }
              }
              else {
                  i = p.end;
                  if (p.interpolateType) {
                      i = Math.max(p.start, i - p.step);
                  }
              }
          }
      }
      return i;
  };
  TrajectoryPlayer.prototype._nextInterpolated = function _nextInterpolated () {
      var p = this.parameters;
      var i = this._next();
      var ip, ipp, ippp;
      if (this._direction === 'forward') {
          ip = Math.max(p.start, i - p.step);
          ipp = Math.max(p.start, i - 2 * p.step);
          ippp = Math.max(p.start, i - 3 * p.step);
      }
      else {
          ip = Math.min(p.end, i + p.step);
          ipp = Math.min(p.end, i + 2 * p.step);
          ippp = Math.min(p.end, i + 3 * p.step);
      }
      return [i, ip, ipp, ippp];
  };
  /**
   * toggle between playing and pausing the animation
   * @return {undefined}
   */
  TrajectoryPlayer.prototype.toggle = function toggle () {
      if (this._run) {
          this.pause();
      }
      else {
          this.play();
      }
  };
  /**
   * start the animation
   * @return {undefined}
   */
  TrajectoryPlayer.prototype.play = function play () {
      if (!this._run) {
          if (this.traj.player !== this) {
              this.traj.setPlayer(this);
          }
          this._currentStep = 1;
          var p = this.parameters;
          var frame = this.traj.currentFrame;
          // snap to the grid implied by this.step division and multiplication
          // thus minimizing cache misses
          var i = Math.ceil(frame / p.step) * p.step;
          // wrap when restarting from the limit (i.e. end or start)
          if (p.direction === 'forward' && frame >= p.end) {
              i = p.start;
          }
          else if (p.direction === 'backward' && frame <= p.start) {
              i = p.end;
          }
          this.traj.setFrame(i);
          this._run = true;
          this._animate();
          this.signals.startedRunning.dispatch();
      }
  };
  /**
   * pause the animation
   * @return {undefined}
   */
  TrajectoryPlayer.prototype.pause = function pause () {
      this._run = false;
      this.signals.haltedRunning.dispatch();
  };
  /**
   * stop the animation (pause and go to start-frame)
   * @return {undefined}
   */
  TrajectoryPlayer.prototype.stop = function stop () {
      this.pause();
      this.traj.setFrame(this.parameters.start);
  };

  Object.defineProperties( TrajectoryPlayer.prototype, prototypeAccessors$6 );

  /**
   * @file Trajectory
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function centerPbc(coords, mean, box) {
      if (box[0] === 0 || box[8] === 0 || box[4] === 0) {
          return;
      }
      var n = coords.length;
      var bx = box[0];
      var by = box[1];
      var bz = box[2];
      var mx = mean[0];
      var my = mean[1];
      var mz = mean[2];
      var fx = -mx + bx + bx / 2;
      var fy = -my + by + by / 2;
      var fz = -mz + bz + bz / 2;
      for (var i = 0; i < n; i += 3) {
          coords[i + 0] = (coords[i + 0] + fx) % bx;
          coords[i + 1] = (coords[i + 1] + fy) % by;
          coords[i + 2] = (coords[i + 2] + fz) % bz;
      }
  }
  function removePbc(x, box) {
      if (box[0] === 0 || box[8] === 0 || box[4] === 0) {
          return;
      }
      // ported from GROMACS src/gmxlib/rmpbc.c:rm_gropbc()
      // in-place
      var n = x.length;
      for (var i = 3; i < n; i += 3) {
          for (var j = 0; j < 3; ++j) {
              var dist = x[i + j] - x[i - 3 + j];
              if (Math.abs(dist) > 0.9 * box[j * 3 + j]) {
                  if (dist > 0) {
                      for (var d = 0; d < 3; ++d) {
                          x[i + d] -= box[j * 3 + d];
                      }
                  }
                  else {
                      for (var d$1 = 0; d$1 < 3; ++d$1) {
                          x[i + d$1] += box[j * 3 + d$1];
                      }
                  }
              }
          }
      }
      return x;
  }
  function removePeriodicity(x, box, mean) {
      if (box[0] === 0 || box[8] === 0 || box[4] === 0) {
          return;
      }
      var n = x.length;
      for (var i = 3; i < n; i += 3) {
          for (var j = 0; j < 3; ++j) {
              var f = (x[i + j] - mean[j]) / box[j * 3 + j];
              if (Math.abs(f) > 0.5) {
                  x[i + j] -= box[j * 3 + j] * Math.round(f);
              }
          }
      }
      return x;
  }
  function circularMean3(indices, coords, box) {
      return [
          circularMean(coords, box[0], 3, 0, indices),
          circularMean(coords, box[1], 3, 1, indices),
          circularMean(coords, box[2], 3, 2, indices)
      ];
  }
  function arrayMean3(coords) {
      return [
          arrayMean(coords, 3, 0),
          arrayMean(coords, 3, 1),
          arrayMean(coords, 3, 2)
      ];
  }
  function interpolateSpline(c, cp, cpp, cppp, t) {
      var m = c.length;
      var coords = new Float32Array(m);
      for (var j0 = 0; j0 < m; j0 += 3) {
          var j1 = j0 + 1;
          var j2 = j0 + 2;
          coords[j0] = spline(cppp[j0], cpp[j0], cp[j0], c[j0], t, 1);
          coords[j1] = spline(cppp[j1], cpp[j1], cp[j1], c[j1], t, 1);
          coords[j2] = spline(cppp[j2], cpp[j2], cp[j2], c[j2], t, 1);
      }
      return coords;
  }
  function interpolateLerp(c, cp, t) {
      var m = c.length;
      var coords = new Float32Array(m);
      for (var j0 = 0; j0 < m; j0 += 3) {
          var j1 = j0 + 1;
          var j2 = j0 + 2;
          coords[j0] = lerp(cp[j0], c[j0], t);
          coords[j1] = lerp(cp[j1], c[j1], t);
          coords[j2] = lerp(cp[j2], c[j2], t);
      }
      return coords;
  }
  /**
   * Base class for trajectories, tying structures and coordinates together
   * @interface
   */
  var Trajectory = function Trajectory(trajPath, structure, params) {
      var this$1$1 = this;
      if ( params === void 0 ) params = {};

      this.signals = {
          countChanged: new signals.Signal(),
          frameChanged: new signals.Signal(),
          playerChanged: new signals.Signal()
      };
      this.frameCache = {};
      this.loadQueue = {};
      this.boxCache = {};
      this.pathCache = {};
      this.frameCacheSize = 0;
      this._frameCount = 0;
      this._currentFrame = -1;
      this._disposed = false;
      this.deltaTime = defaults(params.deltaTime, 0);
      this.timeOffset = defaults(params.timeOffset, 0);
      this.centerPbc = defaults(params.centerPbc, false);
      this.removePbc = defaults(params.removePbc, false);
      this.removePeriodicity = defaults(params.removePeriodicity, false);
      this.superpose = defaults(params.superpose, false);
      this.name = trajPath.replace(/^.*[\\/]/, '');
      this.trajPath = trajPath;
      this.selection = new Selection(defaults(params.sele, 'backbone and not hydrogen'));
      this.selection.signals.stringChanged.add(function () {
          this$1$1.selectionIndices = this$1$1.structure.getAtomIndices(this$1$1.selection);
          this$1$1._resetCache();
          this$1$1._saveInitialCoords();
          this$1$1.setFrame(this$1$1._currentFrame);
      });
  };

  var prototypeAccessors$5 = { frameCount: { configurable: true },currentFrame: { configurable: true } };
  /**
   * Number of frames in the trajectory
   */
  prototypeAccessors$5.frameCount.get = function () {
      return this._frameCount;
  };
  /**
   * Currently set frame of the trajectory
   */
  prototypeAccessors$5.currentFrame.get = function () {
      return this._currentFrame;
  };
  Trajectory.prototype._init = function _init (structure) {
      this.setStructure(structure);
      this._loadFrameCount();
      this.setPlayer(new TrajectoryPlayer(this));
  };
  Trajectory.prototype._loadFrameCount = function _loadFrameCount () { };
  Trajectory.prototype.setStructure = function setStructure (structure) {
      this.structure = structure;
      this.atomCount = structure.atomCount;
      this.backboneIndices = this._getIndices(new Selection('backbone and not hydrogen'));
      this._makeAtomIndices();
      this._saveStructureCoords();
      this.selectionIndices = this._getIndices(this.selection);
      this._resetCache();
      this._saveInitialCoords();
      this.setFrame(this._currentFrame);
  };
  Trajectory.prototype._saveInitialCoords = function _saveInitialCoords () {
          var this$1$1 = this;

      if (this.structure.hasCoords()) {
          this.initialCoords = new Float32Array(this.structureCoords);
          this._makeSuperposeCoords();
      }
      else if (this.frameCache[0]) {
          this.initialCoords = new Float32Array(this.frameCache[0]);
          this._makeSuperposeCoords();
      }
      else {
          this.loadFrame(0, function () { return this$1$1._saveInitialCoords(); });
      }
  };
  Trajectory.prototype._saveStructureCoords = function _saveStructureCoords () {
      var p = { what: { position: true } };
      this.structureCoords = this.structure.getAtomData(p).position;
  };
  Trajectory.prototype.setSelection = function setSelection (string) {
      this.selection.setString(string);
      return this;
  };
  Trajectory.prototype._getIndices = function _getIndices (selection) {
      var i = 0;
      var test = selection.test;
      var indices = [];
      if (test) {
          this.structure.eachAtom(function (ap) {
              if (test(ap))
                  { indices.push(i); }
              i += 1;
          });
      }
      return indices;
  };
  Trajectory.prototype._makeSuperposeCoords = function _makeSuperposeCoords () {
      var n = this.selectionIndices.length * 3;
      this.coords1 = new Float32Array(n);
      this.coords2 = new Float32Array(n);
      var y = this.initialCoords;
      var coords2 = this.coords2;
      for (var i = 0; i < n; i += 3) {
          var j = this.selectionIndices[i / 3] * 3;
          coords2[i + 0] = y[j + 0];
          coords2[i + 1] = y[j + 1];
          coords2[i + 2] = y[j + 2];
      }
  };
  Trajectory.prototype._makeAtomIndices = function _makeAtomIndices () {
      Log.error('Trajectory._makeAtomIndices not implemented');
  };
  Trajectory.prototype._resetCache = function _resetCache () {
      this.frameCache = {};
      this.loadQueue = {};
      this.boxCache = {};
      this.pathCache = {};
      this.frameCacheSize = 0;
      this.initialCoords = new Float32Array(0);
  };
  Trajectory.prototype.setParameters = function setParameters (params) {
          if ( params === void 0 ) params = {};

      var resetCache = false;
      if (params.centerPbc !== undefined && params.centerPbc !== this.centerPbc) {
          this.centerPbc = params.centerPbc;
          resetCache = true;
      }
      if (params.removePeriodicity !== undefined && params.removePeriodicity !== this.removePeriodicity) {
          this.removePeriodicity = params.removePeriodicity;
          resetCache = true;
      }
      if (params.removePbc !== undefined && params.removePbc !== this.removePbc) {
          this.removePbc = params.removePbc;
          resetCache = true;
      }
      if (params.superpose !== undefined && params.superpose !== this.superpose) {
          this.superpose = params.superpose;
          resetCache = true;
      }
      this.deltaTime = defaults(params.deltaTime, this.deltaTime);
      this.timeOffset = defaults(params.timeOffset, this.timeOffset);
      if (resetCache) {
          this._resetCache();
          this.setFrame(this._currentFrame);
      }
  };
  /**
   * Check if a frame is available
   * @param  {Integer|Integer[]} i - the frame index
   * @return {Boolean} frame availability
   */
  Trajectory.prototype.hasFrame = function hasFrame (i) {
          var this$1$1 = this;

      if (Array.isArray(i)) {
          return i.every(function (j) { return !!this$1$1.frameCache[j]; });
      }
      else {
          return !!this.frameCache[i];
      }
  };
  /**
   * Set trajectory to a frame index
   * @param {Integer} i - the frame index
   * @param {Function} [callback] - fired when the frame has been set
   */
  Trajectory.prototype.setFrame = function setFrame (i, callback) {
          var this$1$1 = this;

      if (i === undefined)
          { return this; }
      this.inProgress = true;
      // i = parseInt(i)  // TODO
      if (i === -1 || this.frameCache[i]) {
          this._updateStructure(i);
          if (callback)
              { callback(); }
      }
      else {
          this.loadFrame(i, function () {
              this$1$1._updateStructure(i);
              if (callback)
                  { callback(); }
          });
      }
      return this;
  };
  Trajectory.prototype._interpolate = function _interpolate (i, ip, ipp, ippp, t, type) {
      var fc = this.frameCache;
      var coords;
      if (type === 'spline') {
          coords = interpolateSpline(fc[i], fc[ip], fc[ipp], fc[ippp], t);
      }
      else {
          coords = interpolateLerp(fc[i], fc[ip], t);
      }
      this.structure.updatePosition(coords);
      this._currentFrame = i;
      this.signals.frameChanged.dispatch(i);
  };
  /**
   * Interpolated and set trajectory to frame indices
   * @param {Integer} i - the frame index
   * @param {Integer} ip - one before frame index
   * @param {Integer} ipp - two before frame index
   * @param {Integer} ippp - three before frame index
   * @param {Number} t - interpolation step [0,1]
   * @param {String} type - interpolation type, '', 'spline' or 'linear'
   * @param {Function} callback - fired when the frame has been set
   */
  Trajectory.prototype.setFrameInterpolated = function setFrameInterpolated (i, ip, ipp, ippp, t, type, callback) {
          var this$1$1 = this;

      if (i === undefined)
          { return this; }
      var fc = this.frameCache;
      var iList = [];
      if (!fc[ippp])
          { iList.push(ippp); }
      if (!fc[ipp])
          { iList.push(ipp); }
      if (!fc[ip])
          { iList.push(ip); }
      if (!fc[i])
          { iList.push(i); }
      if (iList.length) {
          this.loadFrame(iList, function () {
              this$1$1._interpolate(i, ip, ipp, ippp, t, type);
              if (callback)
                  { callback(); }
          });
      }
      else {
          this._interpolate(i, ip, ipp, ippp, t, type);
          if (callback)
              { callback(); }
      }
      return this;
  };
  /**
   * Load frame index
   * @param {Integer|Integer[]} i - the frame index
   * @param {Function} callback - fired when the frame has been loaded
   */
  Trajectory.prototype.loadFrame = function loadFrame (i, callback) {
          var this$1$1 = this;

      if (Array.isArray(i)) {
          i.forEach(function (j) {
              if (!this$1$1.loadQueue[j] && !this$1$1.frameCache[j]) {
                  this$1$1.loadQueue[j] = true;
                  this$1$1._loadFrame(j, function () {
                      delete this$1$1.loadQueue[j];
                  });
              }
          });
      }
      else {
          if (!this.loadQueue[i] && !this.frameCache[i]) {
              this.loadQueue[i] = true;
              this._loadFrame(i, function () {
                  delete this$1$1.loadQueue[i];
                  if (callback)
                      { callback(); }
              });
          }
      }
  };
  /**
   * Load frame index
   * @abstract
   * @param {Integer} i - the frame index
   * @param {Function} callback - fired when the frame has been loaded
   */
  Trajectory.prototype._loadFrame = function _loadFrame (i, callback) {
      Log.error('Trajectory._loadFrame not implemented', i, callback);
  };
  Trajectory.prototype._updateStructure = function _updateStructure (i) {
      if (this._disposed) {
          console.error('updateStructure: traj disposed');
          return;
      }
      if (i === -1) {
          if (this.structureCoords) {
              this.structure.updatePosition(this.structureCoords);
          }
      }
      else {
          this.structure.updatePosition(this.frameCache[i]);
      }
      this.structure.trajectory = {
          name: this.trajPath,
          frame: i
      };
      this._currentFrame = i;
      this.inProgress = false;
      this.signals.frameChanged.dispatch(i);
  };
  Trajectory.prototype._doSuperpose = function _doSuperpose (x) {
      var n = this.selectionIndices.length * 3;
      var coords1 = this.coords1;
      var coords2 = this.coords2;
      for (var i = 0; i < n; i += 3) {
          var j = this.selectionIndices[i / 3] * 3;
          coords1[i + 0] = x[j + 0];
          coords1[i + 1] = x[j + 1];
          coords1[i + 2] = x[j + 2];
      }
      // TODO re-use superposition object
      var sp = new Superposition(coords1, coords2);
      sp.transform(x);
  };
  Trajectory.prototype._process = function _process (i, box, coords, frameCount) {
      this._setFrameCount(frameCount);
      if (box) {
          if (this.backboneIndices.length > 0 && this.centerPbc) {
              var box2 = [box[0], box[4], box[8]];
              var circMean = circularMean3(this.backboneIndices, coords, box2);
              centerPbc(coords, circMean, box2);
          }
          if (this.removePeriodicity) {
              var mean = arrayMean3(coords);
              removePeriodicity(coords, box, mean);
          }
          if (this.removePbc) {
              removePbc(coords, box);
          }
      }
      if (this.selectionIndices.length > 0 && this.coords1 && this.superpose) {
          this._doSuperpose(coords);
      }
      this.frameCache[i] = coords;
      this.boxCache[i] = box;
      this.frameCacheSize += 1;
  };
  Trajectory.prototype._setFrameCount = function _setFrameCount (n) {
      if (n !== this._frameCount) {
          this._frameCount = n;
          this.signals.countChanged.dispatch(n);
      }
  };
  /**
   * Dispose of the trajectory object
   * @return {undefined}
   */
  Trajectory.prototype.dispose = function dispose () {
      this._resetCache(); // aid GC
      this._disposed = true;
      if (this.player)
          { this.player.stop(); }
  };
  /**
   * Set player for this trajectory
   * @param {TrajectoryPlayer} player - the player
   */
  Trajectory.prototype.setPlayer = function setPlayer (player) {
      this.player = player;
      this.signals.playerChanged.dispatch(player);
  };
  /**
   * Get time for frame
   * @param  {Integer} i - frame index
   * @return {Number} time in picoseconds
   */
  Trajectory.prototype.getFrameTime = function getFrameTime (i) {
      return this.timeOffset + i * this.deltaTime;
  };

  Object.defineProperties( Trajectory.prototype, prototypeAccessors$5 );

  /**
   * @file Frames Trajectory
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Frames trajectory class. Gets data from a frames object.
   */
  var FramesTrajectory = /*@__PURE__*/(function (Trajectory) {
      function FramesTrajectory(frames, structure, params) {
          var p = params || {};
          p.timeOffset = defaults(p.timeOffset, frames.timeOffset);
          p.deltaTime = defaults(p.deltaTime, frames.deltaTime);
          Trajectory.call(this, '', structure, p);
          this.name = frames.name;
          this.path = frames.path;
          this.frames = frames.coordinates;
          this.boxes = frames.boxes;
          this._init(structure);
      }

      if ( Trajectory ) FramesTrajectory.__proto__ = Trajectory;
      FramesTrajectory.prototype = Object.create( Trajectory && Trajectory.prototype );
      FramesTrajectory.prototype.constructor = FramesTrajectory;

      var prototypeAccessors = { type: { configurable: true } };
      prototypeAccessors.type.get = function () { return 'frames'; };
      FramesTrajectory.prototype._makeAtomIndices = function _makeAtomIndices () {
          if (this.structure.type === 'StructureView') {
              this.atomIndices = this.structure.getAtomIndices();
          }
          else {
              this.atomIndices = undefined;
          }
      };
      FramesTrajectory.prototype._loadFrame = function _loadFrame (i, callback) {
          var coords;
          var frame = this.frames[i];
          if (this.atomIndices) {
              var indices = this.atomIndices;
              var m = indices.length;
              coords = new Float32Array(m * 3);
              for (var j = 0; j < m; ++j) {
                  var j3 = j * 3;
                  var idx3 = indices[j] * 3;
                  coords[j3 + 0] = frame[idx3 + 0];
                  coords[j3 + 1] = frame[idx3 + 1];
                  coords[j3 + 2] = frame[idx3 + 2];
              }
          }
          else {
              coords = new Float32Array(frame);
          }
          var box = this.boxes[i];
          var frameCount = this.frames.length;
          this._process(i, box, coords, frameCount);
          if (typeof callback === 'function') {
              callback();
          }
      };
      FramesTrajectory.prototype._loadFrameCount = function _loadFrameCount () {
          if (this.frames) {
              this._setFrameCount(this.frames.length);
          }
      };

      Object.defineProperties( FramesTrajectory.prototype, prototypeAccessors );

      return FramesTrajectory;
  }(Trajectory));

  /**
   * @file Structure Trajectory
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Structure trajectory class. Gets data from a structure object.
   */
  var StructureTrajectory = /*@__PURE__*/(function (Trajectory) {
      function StructureTrajectory(trajPath, structure, params) {
          Trajectory.call(this, '', structure, params);
          this._init(structure);
      }

      if ( Trajectory ) StructureTrajectory.__proto__ = Trajectory;
      StructureTrajectory.prototype = Object.create( Trajectory && Trajectory.prototype );
      StructureTrajectory.prototype.constructor = StructureTrajectory;

      var prototypeAccessors = { type: { configurable: true } };
      prototypeAccessors.type.get = function () { return 'structure'; };
      StructureTrajectory.prototype._makeAtomIndices = function _makeAtomIndices () {
          if (this.structure.atomSet && this.structure.atomSet.getSize() < this.structure.atomStore.count) {
              this.atomIndices = this.structure.getAtomIndices();
          }
          else {
              this.atomIndices = undefined;
          }
      };
      StructureTrajectory.prototype._loadFrame = function _loadFrame (i, callback) {
          var coords;
          var structure = this.structure;
          var frame = structure.frames[i];
          if (this.atomIndices) {
              var indices = this.atomIndices;
              var m = indices.length;
              coords = new Float32Array(m * 3);
              for (var j = 0; j < m; ++j) {
                  var j3 = j * 3;
                  var idx3 = indices[j] * 3;
                  coords[j3 + 0] = frame[idx3 + 0];
                  coords[j3 + 1] = frame[idx3 + 1];
                  coords[j3 + 2] = frame[idx3 + 2];
              }
          }
          else {
              coords = new Float32Array(frame);
          }
          var box = structure.boxes[i];
          var frameCount = structure.frames.length;
          this._process(i, box, coords, frameCount);
          if (typeof callback === 'function') {
              callback();
          }
      };
      StructureTrajectory.prototype._loadFrameCount = function _loadFrameCount () {
          this._setFrameCount(this.structure.frames.length);
      };

      Object.defineProperties( StructureTrajectory.prototype, prototypeAccessors );

      return StructureTrajectory;
  }(Trajectory));

  /**
   * @file Remote Trajectory
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Remote trajectory class. Gets data from an MDsrv instance.
   */
  var RemoteTrajectory = /*@__PURE__*/(function (Trajectory) {
      function RemoteTrajectory(trajPath, structure, params) {
          Trajectory.call(this, trajPath, structure, params);
          this._init(structure);
      }

      if ( Trajectory ) RemoteTrajectory.__proto__ = Trajectory;
      RemoteTrajectory.prototype = Object.create( Trajectory && Trajectory.prototype );
      RemoteTrajectory.prototype.constructor = RemoteTrajectory;

      var prototypeAccessors = { type: { configurable: true } };
      prototypeAccessors.type.get = function () { return 'remote'; };
      RemoteTrajectory.prototype._makeAtomIndices = function _makeAtomIndices () {
          var atomIndices = [];
          if (this.structure.type === 'StructureView') {
              var indices = this.structure.getAtomIndices(); // TODO
              var n = indices.length;
              var p = indices[0];
              var q = indices[0];
              for (var i = 1; i < n; ++i) {
                  var r = indices[i];
                  if (q + 1 < r) {
                      atomIndices.push([p, q + 1]);
                      p = r;
                  }
                  q = r;
              }
              atomIndices.push([p, q + 1]);
          }
          else {
              atomIndices.push([0, this.atomCount]);
          }
          this.atomIndices = atomIndices;
      };
      RemoteTrajectory.prototype._loadFrame = function _loadFrame (i, callback) {
          var this$1$1 = this;

          // TODO implement max frameCache size, re-use arrays
          var request = new XMLHttpRequest();
          var url = exports.TrajectoryDatasource.getFrameUrl(this.trajPath, i);
          var params = exports.TrajectoryDatasource.getFrameParams(this.trajPath, this.atomIndices);
          request.open('POST', url, true);
          request.responseType = 'arraybuffer';
          request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
          request.addEventListener('load', function () {
              var arrayBuffer = request.response;
              if (!arrayBuffer) {
                  Log.error(("empty arrayBuffer for '" + url + "'"));
                  return;
              }
              var frameCount = new Int32Array(arrayBuffer, 0, 1)[0];
              // const time = new Float32Array( arrayBuffer, 1 * 4, 1 )[ 0 ];
              var box = new Float32Array(arrayBuffer, 2 * 4, 9);
              var coords = new Float32Array(arrayBuffer, 11 * 4);
              this$1$1._process(i, box, coords, frameCount);
              if (typeof callback === 'function') {
                  callback();
              }
          }, false);
          request.send(params);
      };
      RemoteTrajectory.prototype._loadFrameCount = function _loadFrameCount () {
          var this$1$1 = this;

          var request = new XMLHttpRequest();
          var url = exports.TrajectoryDatasource.getCountUrl(this.trajPath);
          request.open('GET', url, true);
          request.addEventListener('load', function () {
              this$1$1._setFrameCount(parseInt(request.response));
          }, false);
          request.send();
      };

      Object.defineProperties( RemoteTrajectory.prototype, prototypeAccessors );

      return RemoteTrajectory;
  }(Trajectory));

  /**
   * @file Callback Trajectory
   * @author Tarn W. Burton <twburton@gmail.com>
   * @private
   */
  /**
   * Callback trajectory class. Gets data from an JavaScript function.
   */
  var CallbackTrajectory = /*@__PURE__*/(function (Trajectory) {
      function CallbackTrajectory(requestCallback, structure, params) {
          Trajectory.call(this, '', structure, params);
          this.requestCallback = requestCallback;
          this._init(structure);
      }

      if ( Trajectory ) CallbackTrajectory.__proto__ = Trajectory;
      CallbackTrajectory.prototype = Object.create( Trajectory && Trajectory.prototype );
      CallbackTrajectory.prototype.constructor = CallbackTrajectory;

      var prototypeAccessors = { type: { configurable: true } };
      prototypeAccessors.type.get = function () { return 'callback'; };
      CallbackTrajectory.prototype._makeAtomIndices = function _makeAtomIndices () {
          var atomIndices = [];
          if (this.structure.type === 'StructureView') {
              var indices = this.structure.getAtomIndices(); // TODO
              var n = indices.length;
              var p = indices[0];
              var q = indices[0];
              for (var i = 1; i < n; ++i) {
                  var r = indices[i];
                  if (q + 1 < r) {
                      atomIndices.push([p, q + 1]);
                      p = r;
                  }
                  q = r;
              }
              atomIndices.push([p, q + 1]);
          }
          else {
              atomIndices.push([0, this.atomCount]);
          }
          this.atomIndices = atomIndices;
      };
      CallbackTrajectory.prototype._loadFrame = function _loadFrame (i, callback) {
          var this$1$1 = this;

          this.requestCallback(function (i, box, coords, frameCount) {
              this$1$1._process(i, box, coords, frameCount);
              if (typeof callback === 'function') {
                  callback();
              }
          }, i, this.atomIndices);
      };
      CallbackTrajectory.prototype._loadFrameCount = function _loadFrameCount () {
          var this$1$1 = this;

          this.requestCallback(function (count) { return this$1$1._setFrameCount(count); });
      };

      Object.defineProperties( CallbackTrajectory.prototype, prototypeAccessors );

      return CallbackTrajectory;
  }(Trajectory));

  /**
   * @file Trajectory Utils
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function makeTrajectory(trajSrc, structure, params) {
      var traj;
      if (trajSrc && trajSrc instanceof Frames) {
          traj = new FramesTrajectory(trajSrc, structure, params);
      }
      else if (!trajSrc && structure.frames) {
          traj = new StructureTrajectory(trajSrc, structure, params);
      }
      else if (trajSrc && typeof trajSrc === 'function') {
          traj = new CallbackTrajectory(trajSrc, structure, params);
      }
      else {
          traj = new RemoteTrajectory(trajSrc, structure, params);
      }
      return traj;
  }

  /**
   * @file Structure View
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Get view on structure restricted to the selection
   * @param  {Selection} selection - the selection
   * @return {StructureView} the view on the structure
   */
  Structure.prototype.getView = function (selection) {
      // added here to avoid cyclic import dependency
      return new StructureView(this, selection);
  };
  /**
   * View on the structure, restricted to the selection
   */
  var StructureView = /*@__PURE__*/(function (Structure) {
      function StructureView(structure, selection) {
          Structure.call(this);
          this.structure = structure;
          this.selection = selection;
          this.center = new Vector3();
          this.boundingBox = new Box3();
          this._bp = this.getBondProxy();
          this._ap = this.getAtomProxy();
          this._rp = this.getResidueProxy();
          this._cp = this.getChainProxy();
          if (this.selection) {
              this.selection.signals.stringChanged.add(this.refresh, this);
          }
          this.structure.signals.refreshed.add(this.refresh, this);
          this.refresh();
      }

      if ( Structure ) StructureView.__proto__ = Structure;
      StructureView.prototype = Object.create( Structure && Structure.prototype );
      StructureView.prototype.constructor = StructureView;

      var prototypeAccessors = { type: { configurable: true },name: { configurable: true },path: { configurable: true },title: { configurable: true },id: { configurable: true },data: { configurable: true },atomSetDict: { configurable: true },biomolDict: { configurable: true },entityList: { configurable: true },unitcell: { configurable: true },frames: { configurable: true },boxes: { configurable: true },validation: { configurable: true },bondStore: { configurable: true },backboneBondStore: { configurable: true },rungBondStore: { configurable: true },atomStore: { configurable: true },residueStore: { configurable: true },chainStore: { configurable: true },modelStore: { configurable: true },atomMap: { configurable: true },residueMap: { configurable: true },bondHash: { configurable: true },spatialHash: { configurable: true },_hasCoords: { configurable: true } };
      StructureView.prototype.init = function init () { };
      prototypeAccessors.type.get = function () { return 'StructureView'; };
      prototypeAccessors.name.get = function () { return this.structure.name; };
      prototypeAccessors.path.get = function () { return this.structure.path; };
      prototypeAccessors.title.get = function () { return this.structure.title; };
      prototypeAccessors.id.get = function () { return this.structure.id; };
      prototypeAccessors.data.get = function () { return this.structure.data; };
      prototypeAccessors.atomSetDict.get = function () { return this.structure.atomSetDict; };
      prototypeAccessors.biomolDict.get = function () { return this.structure.biomolDict; };
      prototypeAccessors.entityList.get = function () { return this.structure.entityList; };
      prototypeAccessors.unitcell.get = function () { return this.structure.unitcell; };
      prototypeAccessors.frames.get = function () { return this.structure.frames; };
      prototypeAccessors.boxes.get = function () { return this.structure.boxes; };
      prototypeAccessors.validation.get = function () { return this.structure.validation; };
      prototypeAccessors.bondStore.get = function () { return this.structure.bondStore; };
      prototypeAccessors.backboneBondStore.get = function () { return this.structure.backboneBondStore; };
      prototypeAccessors.rungBondStore.get = function () { return this.structure.rungBondStore; };
      prototypeAccessors.atomStore.get = function () { return this.structure.atomStore; };
      prototypeAccessors.residueStore.get = function () { return this.structure.residueStore; };
      prototypeAccessors.chainStore.get = function () { return this.structure.chainStore; };
      prototypeAccessors.modelStore.get = function () { return this.structure.modelStore; };
      prototypeAccessors.atomMap.get = function () { return this.structure.atomMap; };
      prototypeAccessors.residueMap.get = function () { return this.structure.residueMap; };
      prototypeAccessors.bondHash.get = function () { return this.structure.bondHash; };
      prototypeAccessors.spatialHash.get = function () { return this.structure.spatialHash; };
      prototypeAccessors._hasCoords.get = function () { return this.structure._hasCoords; };
      prototypeAccessors._hasCoords.set = function (value) { this.structure._hasCoords = value; };
      /**
       * Updates atomSet, bondSet, atomSetCache, atomCount, bondCount, boundingBox, center.
       * @emits {Structure.signals.refreshed} when refreshed
       * @return {undefined}
       */
      StructureView.prototype.refresh = function refresh () {
          if (exports.Debug)
              { Log.time('StructureView.refresh'); }
          this.atomSetCache = {};
          var structure = this.structure;
          if (this.selection.isAllSelection() &&
              structure !== this && structure.atomSet && structure.bondSet) {
              this.atomSet = structure.atomSet.clone();
              this.bondSet = structure.bondSet.clone();
              for (var name in this.atomSetDict) {
                  var atomSet = this.atomSetDict[name];
                  this.atomSetCache['__' + name] = atomSet.clone();
              }
              this.atomCount = structure.atomCount;
              this.bondCount = structure.bondCount;
              this.boundingBox.copy(structure.boundingBox);
              this.center.copy(structure.center);
          }
          else if (this.selection.isNoneSelection() &&
              structure !== this && structure.atomSet && structure.bondSet) {
              this.atomSet = new BitArray(structure.atomCount);
              this.bondSet = new BitArray(structure.bondCount);
              for (var name$1 in this.atomSetDict) {
                  this.atomSetCache['__' + name$1] = new BitArray(structure.atomCount);
              }
              this.atomCount = 0;
              this.bondCount = 0;
              this.boundingBox.makeEmpty();
              this.center.set(0, 0, 0);
          }
          else {
              this.atomSet = this.getAtomSet(this.selection, true);
              if (structure.atomSet) {
                  this.atomSet = this.atomSet.intersection(structure.atomSet);
              }
              this.bondSet = this.getBondSet();
              for (var name$2 in this.atomSetDict) {
                  var atomSet$1 = this.atomSetDict[name$2];
                  this.atomSetCache['__' + name$2] = atomSet$1.makeIntersection(this.atomSet);
              }
              this.atomCount = this.atomSet.getSize();
              this.bondCount = this.bondSet.getSize();
              this.boundingBox = this.getBoundingBox();
              this.center = this.boundingBox.getCenter(new Vector3());
          }
          if (exports.Debug)
              { Log.timeEnd('StructureView.refresh'); }
          this.signals.refreshed.dispatch();
      };
      //
      StructureView.prototype.setSelection = function setSelection (selection) {
          this.selection = selection;
          this.refresh();
      };
      StructureView.prototype.getSelection = function getSelection (selection) {
          var seleList = [];
          if (selection && selection.string) {
              seleList.push(selection.string);
          }
          var parentSelection = this.structure.getSelection();
          if (parentSelection && parentSelection.string) {
              seleList.push(parentSelection.string);
          }
          if (this.selection && this.selection.string) {
              seleList.push(this.selection.string);
          }
          var sele = '';
          if (seleList.length > 0) {
              sele = "( " + (seleList.join(' ) AND ( ')) + " )";
          }
          return new Selection(sele);
      };
      StructureView.prototype.getStructure = function getStructure () {
          return this.structure.getStructure();
      };
      //
      StructureView.prototype.eachBond = function eachBond (callback, selection) {
          this.structure.eachBond(callback, this.getSelection(selection));
      };
      StructureView.prototype.eachAtom = function eachAtom (callback, selection) {
          var ap = this.getAtomProxy();
          var atomSet = this.getAtomSet(selection);
          var n = this.atomStore.count;
          if (atomSet.getSize() < n) {
              atomSet.forEach(function (index) {
                  ap.index = index;
                  callback(ap);
              });
          }
          else {
              for (var i = 0; i < n; ++i) {
                  ap.index = i;
                  callback(ap);
              }
          }
      };
      StructureView.prototype.eachResidue = function eachResidue (callback, selection) {
          this.structure.eachResidue(callback, this.getSelection(selection));
      };
      /**
       * Not implemented
       * @alias StructureView#eachResidueN
       * @return {undefined}
       */
      StructureView.prototype.eachResidueN = function eachResidueN (n, callback) {
          console.error('StructureView.eachResidueN() not implemented');
      };
      StructureView.prototype.eachChain = function eachChain (callback, selection) {
          this.structure.eachChain(callback, this.getSelection(selection));
      };
      StructureView.prototype.eachModel = function eachModel (callback, selection) {
          this.structure.eachModel(callback, this.getSelection(selection));
      };
      //
      StructureView.prototype.getAtomSet = function getAtomSet (selection, ignoreView) {
          if ( ignoreView === void 0 ) ignoreView = false;

          var atomSet = this.structure.getAtomSet(selection);
          if (!ignoreView && this.atomSet) {
              atomSet = atomSet.makeIntersection(this.atomSet);
          }
          return atomSet;
      };
      //
      StructureView.prototype.getAtomIndices = function getAtomIndices (selection) {
          return this.structure.getAtomIndices(this.getSelection(selection));
      };
      StructureView.prototype.refreshPosition = function refreshPosition () {
          return this.structure.refreshPosition();
      };
      //
      StructureView.prototype.dispose = function dispose () {
          if (this.selection) {
              this.selection.signals.stringChanged.remove(this.refresh, this);
          }
          this.structure.signals.refreshed.remove(this.refresh, this);
          delete this.structure;
          delete this.atomSet;
          delete this.bondSet;
          delete this.atomCount;
          delete this.bondCount;
      };

      Object.defineProperties( StructureView.prototype, prototypeAccessors );

      return StructureView;
  }(Structure));

  /**
   * @file Alignment
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  // const nucleotides = 'ACTG';
  var aminoacidsX = 'ACDEFGHIKLMNPQRSTVWY';
  var aminoacids = 'ARNDCQEGHILKMFPSTWYVBZ?';
  var blosum62x = [
      [4, 0, -2, -1, -2, 0, -2, -1, -1, -1, -1, -2, -1, -1, -1, 1, 0, 0, -3, -2],
      [0, 9, -3, -4, -2, -3, -3, -1, -3, -1, -1, -3, -3, -3, -3, -1, -1, -1, -2, -2],
      [-2, -3, 6, 2, -3, -1, -1, -3, -1, -4, -3, 1, -1, 0, -2, 0, -1, -3, -4, -3],
      [-1, -4, 2, 5, -3, -2, 0, -3, 1, -3, -2, 0, -1, 2, 0, 0, -1, -2, -3, -2],
      [-2, -2, -3, -3, 6, -3, -1, 0, -3, 0, 0, -3, -4, -3, -3, -2, -2, -1, 1, 3],
      [0, -3, -1, -2, -3, 6, -2, -4, -2, -4, -3, 0, -2, -2, -2, 0, -2, -3, -2, -3],
      [-2, -3, -1, 0, -1, -2, 8, -3, -1, -3, -2, 1, -2, 0, 0, -1, -2, -3, -2, 2],
      [-1, -1, -3, -3, 0, -4, -3, 4, -3, 2, 1, -3, -3, -3, -3, -2, -1, 3, -3, -1],
      [-1, -3, -1, 1, -3, -2, -1, -3, 5, -2, -1, 0, -1, 1, 2, 0, -1, -2, -3, -2],
      [-1, -1, -4, -3, 0, -4, -3, 2, -2, 4, 2, -3, -3, -2, -2, -2, -1, 1, -2, -1],
      [-1, -1, -3, -2, 0, -3, -2, 1, -1, 2, 5, -2, -2, 0, -1, -1, -1, 1, -1, -1],
      [-2, -3, 1, 0, -3, 0, 1, -3, 0, -3, -2, 6, -2, 0, 0, 1, 0, -3, -4, -2],
      [-1, -3, -1, -1, -4, -2, -2, -3, -1, -3, -2, -2, 7, -1, -2, -1, -1, -2, -4, -3],
      [-1, -3, 0, 2, -3, -2, 0, -3, 1, -2, 0, 0, -1, 5, 1, 0, -1, -2, -2, -1],
      [-1, -3, -2, 0, -3, -2, 0, -3, 2, -2, -1, 0, -2, 1, 5, -1, -1, -3, -3, -2],
      [1, -1, 0, 0, -2, 0, -1, -2, 0, -2, -1, 1, -1, 0, -1, 4, 1, -2, -3, -2],
      [0, -1, -1, -1, -2, -2, -2, -1, -1, -1, -1, 0, -1, -1, -1, 1, 5, 0, -2, -2],
      [0, -1, -3, -2, -1, -3, -3, 3, -2, 1, 1, -3, -2, -2, -3, -2, 0, 4, -3, -1],
      [-3, -2, -4, -3, 1, -2, -2, -3, -3, -2, -1, -4, -4, -2, -3, -3, -2, -3, 11, 2],
      [-2, -2, -3, -2, 3, -3, 2, -1, -2, -1, -1, -2, -3, -1, -2, -2, -2, -1, 2, 7] // Y
  ];
  var blosum62 = [
      // A  R  N  D  C  Q  E  G  H  I  L  K  M  F  P  S  T  W  Y  V  B  Z  X
      [4, -1, -2, -2, 0, -1, -1, 0, -2, -1, -1, -1, -1, -2, -1, 1, 0, -3, -2, 0, -2, -1, 0],
      [-1, 5, 0, -2, -3, 1, 0, -2, 0, -3, -2, 2, -1, -3, -2, -1, -1, -3, -2, -3, -1, 0, -1],
      [-2, 0, 6, 1, -3, 0, 0, 0, 1, -3, -3, 0, -2, -3, -2, 1, 0, -4, -2, -3, 3, 0, -1],
      [-2, -2, 1, 6, -3, 0, 2, -1, -1, -3, -4, -1, -3, -3, -1, 0, -1, -4, -3, -3, 4, 1, -1],
      [0, -3, -3, -3, 9, -3, -4, -3, -3, -1, -1, -3, -1, -2, -3, -1, -1, -2, -2, -1, -3, -3, -2],
      [-1, 1, 0, 0, -3, 5, 2, -2, 0, -3, -2, 1, 0, -3, -1, 0, -1, -2, -1, -2, 0, 3, -1],
      [-1, 0, 0, 2, -4, 2, 5, -2, 0, -3, -3, 1, -2, -3, -1, 0, -1, -3, -2, -2, 1, 4, -1],
      [0, -2, 0, -1, -3, -2, -2, 6, -2, -4, -4, -2, -3, -3, -2, 0, -2, -2, -3, -3, -1, -2, -1],
      [-2, 0, 1, -1, -3, 0, 0, -2, 8, -3, -3, -1, -2, -1, -2, -1, -2, -2, 2, -3, 0, 0, -1],
      [-1, -3, -3, -3, -1, -3, -3, -4, -3, 4, 2, -3, 1, 0, -3, -2, -1, -3, -1, 3, -3, -3, -1],
      [-1, -2, -3, -4, -1, -2, -3, -4, -3, 2, 4, -2, 2, 0, -3, -2, -1, -2, -1, 1, -4, -3, -1],
      [-1, 2, 0, -1, -3, 1, 1, -2, -1, -3, -2, 5, -1, -3, -1, 0, -1, -3, -2, -2, 0, 1, -1],
      [-1, -1, -2, -3, -1, 0, -2, -3, -2, 1, 2, -1, 5, 0, -2, -1, -1, -1, -1, 1, -3, -1, -1],
      [-2, -3, -3, -3, -2, -3, -3, -3, -1, 0, 0, -3, 0, 6, -4, -2, -2, 1, 3, -1, -3, -3, -1],
      [-1, -2, -2, -1, -3, -1, -1, -2, -2, -3, -3, -1, -2, -4, 7, -1, -1, -4, -3, -2, -2, -1, -2],
      [1, -1, 1, 0, -1, 0, 0, 0, -1, -2, -2, 0, -1, -2, -1, 4, 1, -3, -2, -2, 0, 0, 0],
      [0, -1, 0, -1, -1, -1, -1, -2, -2, -1, -1, -1, -1, -2, -1, 1, 5, -2, -2, 0, -1, -1, 0],
      [-3, -3, -4, -4, -2, -2, -3, -2, -2, -3, -2, -3, -1, 1, -4, -3, -2, 11, 2, -3, -4, -3, -2],
      [-2, -2, -2, -3, -2, -1, -2, -3, 2, -1, -1, -2, -1, 3, -3, -2, -2, 2, 7, -1, -3, -2, -1],
      [0, -3, -3, -3, -1, -2, -2, -3, -3, 3, 1, -2, 1, -1, -2, -2, 0, -3, -1, 4, -3, -2, -1],
      [-2, -1, 3, 4, -3, 0, 1, -1, 0, -3, -4, 0, -3, -3, -2, 0, -1, -4, -3, -3, 4, 1, -1],
      [-1, 0, 0, 1, -3, 3, 4, -2, 0, -3, -3, 1, -1, -3, -1, 0, -1, -3, -2, -2, 1, 4, -1],
      [0, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, 0, 0, -2, -1, -1, -1, -1, -1] // X
  ];
  function prepareMatrix(cellNames, mat) {
      var j;
      var i = 0;
      var matDict = {};
      mat.forEach(function (row) {
          j = 0;
          var rowDict = {};
          row.forEach(function (elm) {
              rowDict[cellNames[j++]] = elm;
          });
          matDict[cellNames[i++]] = rowDict;
      });
      return matDict;
  }
  var SubstitutionMatrices = (function () {
      return {
          blosum62: prepareMatrix(aminoacids, blosum62),
          blosum62x: prepareMatrix(aminoacidsX, blosum62x)
      };
  }());
  var Alignment = function Alignment(seq1, seq2, gapPenalty, gapExtensionPenalty, substMatrix) {
      if ( gapPenalty === void 0 ) gapPenalty = -10;
      if ( gapExtensionPenalty === void 0 ) gapExtensionPenalty = -1;
      if ( substMatrix === void 0 ) substMatrix = 'blosum62';

      // TODO try encoding seqs as integers and use array subst matrix, maybe faster
      this.seq1 = seq1;
      this.seq2 = seq2;
      this.gapPenalty = gapPenalty;
      this.gapExtensionPenalty = gapExtensionPenalty;
      if (substMatrix) {
          this.substMatrix = SubstitutionMatrices[substMatrix];
      }
  };
  Alignment.prototype.initMatrices = function initMatrices () {
      this.n = this.seq1.length;
      this.m = this.seq2.length;
      // Log.log(this.n, this.m);
      this.score = undefined;
      this.ali = '';
      this.S = [];
      this.V = [];
      this.H = [];
      for (var i = 0; i <= this.n; ++i) {
          this.S[i] = [];
          this.V[i] = [];
          this.H[i] = [];
          for (var j = 0; j <= this.m; ++j) {
              this.S[i][j] = 0;
              this.V[i][j] = 0;
              this.H[i][j] = 0;
          }
      }
      for (var i$1 = 0; i$1 <= this.n; ++i$1) {
          this.S[i$1][0] = this.gap(0);
          this.H[i$1][0] = -Infinity;
      }
      for (var j$1 = 0; j$1 <= this.m; ++j$1) {
          this.S[0][j$1] = this.gap(0);
          this.V[0][j$1] = -Infinity;
      }
      this.S[0][0] = 0;
      // Log.log(this.S, this.V, this.H);
  };
  Alignment.prototype.gap = function gap (len) {
      return this.gapPenalty + len * this.gapExtensionPenalty;
  };
  Alignment.prototype.makeScoreFn = function makeScoreFn () {
      var seq1 = this.seq1;
      var seq2 = this.seq2;
      var substMatrix = this.substMatrix;
      if (substMatrix) {
          return function score(i, j) {
              var c1 = seq1[i];
              var c2 = seq2[j];
              try {
                  return substMatrix[c1][c2];
              }
              catch (e) {
                  return -4;
              }
          };
      }
      else {
          Log.warn('Alignment: no subst matrix');
          return function scoreNoSubstMat(i, j) {
              var c1 = seq1[i];
              var c2 = seq2[j];
              return c1 === c2 ? 5 : -3;
          };
      }
  };
  Alignment.prototype.calc = function calc () {
      if (exports.Debug)
          { Log.time('Alignment.calc'); }
      this.initMatrices();
      var gap0 = this.gap(0);
      var scoreFn = this.makeScoreFn();
      var gapExtensionPenalty = this.gapExtensionPenalty;
      var V = this.V;
      var H = this.H;
      var S = this.S;
      var n = this.n;
      var m = this.m;
      var Vi1, Si1, Vi, Hi, Si;
      for (var i = 1; i <= n; ++i) {
          Si1 = S[i - 1];
          Vi1 = V[i - 1];
          Vi = V[i];
          Hi = H[i];
          Si = S[i];
          for (var j = 1; j <= m; ++j) {
              Vi[j] = Math.max(Si1[j] + gap0, Vi1[j] + gapExtensionPenalty);
              Hi[j] = Math.max(Si[j - 1] + gap0, Hi[j - 1] + gapExtensionPenalty);
              Si[j] = Math.max(Si1[j - 1] + scoreFn(i - 1, j - 1), // match
              Vi[j], // del
              Hi[j] // ins
              );
          }
      }
      if (exports.Debug)
          { Log.timeEnd('Alignment.calc'); }
      if (exports.Debug)
          { Log.log(this.S, this.V, this.H); }
  };
  Alignment.prototype.trace = function trace () {
      if (exports.Debug)
          { Log.time('Alignment.trace'); }
      this.ali1 = '';
      this.ali2 = '';
      var scoreFn = this.makeScoreFn();
      var i = this.n;
      var j = this.m;
      var mat;
      if (this.S[i][j] >= this.V[i][j]) {
          mat = 'S';
          this.score = this.S[i][j];
      }
      else if (this.V[i][j] >= this.H[i][j]) {
          mat = 'V';
          this.score = this.V[i][j];
      }
      else {
          mat = 'H';
          this.score = this.H[i][j];
      }
      if (exports.Debug)
          { Log.log('Alignment: SCORE', this.score); }
      if (exports.Debug)
          { Log.log('Alignment: S, V, H', this.S[i][j], this.V[i][j], this.H[i][j]); }
      while (i > 0 && j > 0) {
          if (mat === 'S') {
              if (this.S[i][j] === this.S[i - 1][j - 1] + scoreFn(i - 1, j - 1)) {
                  this.ali1 = this.seq1[i - 1] + this.ali1;
                  this.ali2 = this.seq2[j - 1] + this.ali2;
                  --i;
                  --j;
                  mat = 'S';
              }
              else if (this.S[i][j] === this.V[i][j]) {
                  mat = 'V';
              }
              else if (this.S[i][j] === this.H[i][j]) {
                  mat = 'H';
              }
              else {
                  // Log.debug('Alignment: S');
                  --i;
                  --j;
              }
          }
          else if (mat === 'V') {
              if (this.V[i][j] === this.V[i - 1][j] + this.gapExtensionPenalty) {
                  this.ali1 = this.seq1[i - 1] + this.ali1;
                  this.ali2 = '-' + this.ali2;
                  --i;
                  mat = 'V';
              }
              else if (this.V[i][j] === this.S[i - 1][j] + this.gap(0)) {
                  this.ali1 = this.seq1[i - 1] + this.ali1;
                  this.ali2 = '-' + this.ali2;
                  --i;
                  mat = 'S';
              }
              else {
                  // Log.debug('Alignment: V');
                  --i;
              }
          }
          else if (mat === 'H') {
              if (this.H[i][j] === this.H[i][j - 1] + this.gapExtensionPenalty) {
                  this.ali1 = '-' + this.ali1;
                  this.ali2 = this.seq2[j - 1] + this.ali2;
                  --j;
                  mat = 'H';
              }
              else if (this.H[i][j] === this.S[i][j - 1] + this.gap(0)) {
                  this.ali1 = '-' + this.ali1;
                  this.ali2 = this.seq2[j - 1] + this.ali2;
                  --j;
                  mat = 'S';
              }
              else {
                  // Log.debug('Alignment: H');
                  --j;
              }
          }
          else {
              Log.error('Alignment: no matrix');
          }
      }
      while (i > 0) {
          this.ali1 = this.seq1[i - 1] + this.ali1;
          this.ali2 = '-' + this.ali2;
          --i;
      }
      while (j > 0) {
          this.ali1 = '-' + this.ali1;
          this.ali2 = this.seq2[j - 1] + this.ali2;
          --j;
      }
      if (exports.Debug)
          { Log.timeEnd('Alignment.trace'); }
      if (exports.Debug)
          { Log.log([this.ali1, this.ali2]); }
  };

  /**
   * @file Align Utils
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Perform structural superposition of two structures,
   * optionally guided by a sequence alignment
   * @param  {Structure|StructureView} s1 - structure 1 which is superposed onto structure 2
   * @param  {Structure|StructureView} s2 - structure 2 onto which structure 1 is superposed
   * @param  {Boolean} [align] - guide the superposition by a sequence alignment
   * @param  {String} [sele1] - selection string for structure 1
   * @param  {String} [sele2] - selection string for structure 2
   * @return {undefined}
   */
  function superpose(s1, s2, align, sele1, sele2) {
      if ( align === void 0 ) align = false;
      if ( sele1 === void 0 ) sele1 = '';
      if ( sele2 === void 0 ) sele2 = '';

      var i;
      var j;
      var n;
      var atoms1;
      var atoms2;
      if (align) {
          var _s1 = s1;
          var _s2 = s2;
          if (sele1 && sele2) {
              _s1 = s1.getView(new Selection(sele1));
              _s2 = s2.getView(new Selection(sele2));
          }
          var seq1 = _s1.getSequence();
          var seq2 = _s2.getSequence();
          // Log.log( seq1.join("") );
          // Log.log( seq2.join("") );
          var ali = new Alignment(seq1.join(''), seq2.join(''));
          ali.calc();
          ali.trace();
          // Log.log( "superpose alignment score", ali.score );
          // Log.log( ali.ali1 );
          // Log.log( ali.ali2 );
          var _i, _j;
          i = 0;
          j = 0;
          n = ali.ali1.length;
          var aliIdx1 = [];
          var aliIdx2 = [];
          for (var l = 0; l < n; ++l) {
              var x = ali.ali1[l];
              var y = ali.ali2[l];
              _i = 0;
              _j = 0;
              if (x === '-') {
                  aliIdx2[j] = false;
              }
              else {
                  aliIdx2[j] = true;
                  _i = 1;
              }
              if (y === '-') {
                  aliIdx1[i] = false;
              }
              else {
                  aliIdx1[i] = true;
                  _j = 1;
              }
              i += _i;
              j += _j;
          }
          // Log.log( i, j );
          // Log.log( aliIdx1 );
          // Log.log( aliIdx2 );
          var _atoms1 = [];
          var _atoms2 = [];
          var ap1 = _s1.getAtomProxy();
          var ap2 = _s2.getAtomProxy();
          i = 0;
          _s1.eachResidue(function (r) {
              if (r.traceAtomIndex === undefined ||
                  r.traceAtomIndex !== r.getAtomIndexByName('CA'))
                  { return; }
              if (aliIdx1[i]) {
                  ap1.index = r.getAtomIndexByName('CA'); // TODO
                  _atoms1.push(ap1.x, ap1.y, ap1.z);
              }
              i += 1;
          });
          i = 0;
          _s2.eachResidue(function (r) {
              if (r.traceAtomIndex === undefined ||
                  r.traceAtomIndex !== r.getAtomIndexByName('CA'))
                  { return; }
              if (aliIdx2[i]) {
                  ap2.index = r.getAtomIndexByName('CA'); // TODO
                  _atoms2.push(ap2.x, ap2.y, ap2.z);
              }
              i += 1;
          });
          atoms1 = new Float32Array(_atoms1);
          atoms2 = new Float32Array(_atoms2);
      }
      else {
          var sviewCa1 = s1.getView(new Selection((sele1 + " and .CA")));
          var sviewCa2 = s2.getView(new Selection((sele2 + " and .CA")));
          atoms1 = sviewCa1;
          atoms2 = sviewCa2;
      }
      var superpose = new Superposition(atoms1, atoms2);
      var result = superpose.transform(s1);
      s1.refreshPosition();
      return result;
  }

  /**
   * @file Sturucture Component
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var StructureComponentDefaultParameters = Object.assign({
      sele: '',
      defaultAssembly: ''
  }, ComponentDefaultParameters);
  /**
   * Component wrapping a {@link Structure} object
   *
   * @example
   * // get a structure component by loading a structure file into the stage
   * stage.loadFile( "rcsb://4opj" ).then( function( structureComponent ){
   *     structureComponent.addRepresentation( "cartoon" );
   *     structureComponent.autoView();
   * } );
   */
  var StructureComponent = /*@__PURE__*/(function (Component) {
      function StructureComponent(stage, structure, params) {
          if ( params === void 0 ) params = {};

          Component.call(this, stage, structure, Object.assign({ name: structure.name }, params));
          this.structure = structure;
          this.trajList = [];
          this.signals = Object.assign(this.signals, {
              trajectoryAdded: new signals.Signal(),
              trajectoryRemoved: new signals.Signal(),
              defaultAssemblyChanged: new signals.Signal()
          });
          this.initSelection(this.parameters.sele);
          //
          this.pickBuffer = createRingBuffer(4);
          this.pickDict = createSimpleDict();
          this.spacefillRepresentation = this.addRepresentation('spacefill', {
              sele: 'none',
              opacity: MeasurementDefaultParams.opacity,
              color: MeasurementDefaultParams.color,
              disablePicking: true,
              radiusType: 'data'
          }, true);
          this.distanceRepresentation = this.addRepresentation('distance', MeasurementDefaultParams, true);
          this.angleRepresentation = this.addRepresentation('angle', MeasurementDefaultParams, true);
          this.dihedralRepresentation = this.addRepresentation('dihedral', MeasurementDefaultParams, true);
          this.measureRepresentations = new RepresentationCollection([
              this.spacefillRepresentation,
              this.distanceRepresentation,
              this.angleRepresentation,
              this.dihedralRepresentation
          ]);
          //
          this.setDefaultAssembly(this.parameters.defaultAssembly);
      }

      if ( Component ) StructureComponent.__proto__ = Component;
      StructureComponent.prototype = Object.create( Component && Component.prototype );
      StructureComponent.prototype.constructor = StructureComponent;

      var prototypeAccessors = { defaultParameters: { configurable: true },type: { configurable: true } };
      prototypeAccessors.defaultParameters.get = function () { return StructureComponentDefaultParameters; };
      /**
       * Component type
       * @type {String}
       */
      prototypeAccessors.type.get = function () { return 'structure'; };
      /**
       * Initialize selection
       * @private
       * @param {String} sele - selection string
       * @return {undefined}
       */
      StructureComponent.prototype.initSelection = function initSelection (sele) {
          var this$1$1 = this;

          /**
           * Selection for {@link StructureComponent#structureView}
           * @private
           * @type {Selection}
           */
          this.selection = new Selection(sele);
          /**
           * View on {@link StructureComponent#structure}.
           * Change its selection via {@link StructureComponent#setSelection}.
           * @type {StructureView}
           */
          this.structureView = new StructureView(this.structure, this.selection);
          this.selection.signals.stringChanged.add(function () {
              this$1$1.structureView.setSelection(this$1$1.selection);
              this$1$1.rebuildRepresentations();
              this$1$1.rebuildTrajectories();
          });
      };
      /**
       * Set selection of {@link StructureComponent#structureView}
       * @param {String} string - selection string
       * @return {StructureComponent} this object
       */
      StructureComponent.prototype.setSelection = function setSelection (string) {
          this.parameters.sele = string;
          this.selection.setString(string);
          return this;
      };
      /**
       * Set the default assembly
       * @param {String} value - assembly name
       * @return {undefined}
       */
      StructureComponent.prototype.setDefaultAssembly = function setDefaultAssembly (value) {
          // filter out non-exsisting assemblies
          if (this.structure.biomolDict[value] === undefined)
              { value = ''; }
          // only set default assembly when changed
          if (this.parameters.defaultAssembly !== value) {
              var reprParams = { defaultAssembly: value };
              this.reprList.forEach(function (repr) { return repr.setParameters(reprParams); });
              this.measureRepresentations.setParameters(reprParams);
              this.parameters.defaultAssembly = value;
              this.signals.defaultAssemblyChanged.dispatch(value);
          }
          return this;
      };
      /**
       * Rebuild all representations
       * @return {undefined}
       */
      StructureComponent.prototype.rebuildRepresentations = function rebuildRepresentations () {
          this.reprList.forEach(function (repr) {
              repr.build();
          });
          this.measureRepresentations.build();
      };
      /**
       * Rebuild all trajectories
       * @return {undefined}
       */
      StructureComponent.prototype.rebuildTrajectories = function rebuildTrajectories () {
          var this$1$1 = this;

          this.trajList.forEach(function (trajComp) {
              trajComp.trajectory.setStructure(this$1$1.structureView);
          });
      };
      StructureComponent.prototype.updateRepresentations = function updateRepresentations (what) {
          Component.prototype.updateRepresentations.call(this, what);
          this.measureRepresentations.update(what);
      };
      /**
       * Overrides {@link Component.updateRepresentationMatrices}
       * to also update matrix for measureRepresentations
       */
      StructureComponent.prototype.updateRepresentationMatrices = function updateRepresentationMatrices () {
          Component.prototype.updateRepresentationMatrices.call(this);
          this.measureRepresentations.setParameters({ matrix: this.matrix });
      };
      StructureComponent.prototype.addRepresentation = function addRepresentation (type, params, hidden) {
          var this$1$1 = this;
          if ( params === void 0 ) params = {};
          if ( hidden === void 0 ) hidden = false;

          params.defaultAssembly = this.parameters.defaultAssembly;
          var reprComp = this._addRepresentation(type, this.structureView, params, hidden);
          if (!hidden) {
              reprComp.signals.parametersChanged.add(function () { return this$1$1.measureUpdate(); });
          }
          return reprComp;
      };
      /**
       * Add a new trajectory component to the structure
       */
      StructureComponent.prototype.addTrajectory = function addTrajectory (trajPath, params) {
          var this$1$1 = this;
          if ( trajPath === void 0 ) trajPath = '';
          if ( params === void 0 ) params = {};

          var traj = makeTrajectory(trajPath, this.structureView, params);
          traj.signals.frameChanged.add(function () {
              this$1$1.updateRepresentations({ 'position': true });
          });
          var trajComp = new TrajectoryElement(this.stage, traj, params);
          this.trajList.push(trajComp);
          this.signals.trajectoryAdded.dispatch(trajComp);
          return trajComp;
      };
      StructureComponent.prototype.removeTrajectory = function removeTrajectory (traj) {
          var idx = this.trajList.indexOf(traj);
          if (idx !== -1) {
              this.trajList.splice(idx, 1);
          }
          traj.dispose();
          this.signals.trajectoryRemoved.dispatch(traj);
      };
      StructureComponent.prototype.dispose = function dispose () {
          // copy via .slice because side effects may change trajList
          this.trajList.slice().forEach(function (traj) { return traj.dispose(); });
          this.trajList.length = 0;
          this.structure.dispose();
          this.measureRepresentations.dispose();
          Component.prototype.dispose.call(this);
      };
      StructureComponent.prototype.autoView = function autoView (sele, duration) {
          if (typeof sele === 'number') {
              duration = sele;
              sele = '';
          }
          this.stage.animationControls.zoomMove(this.getCenter(sele), this.getZoom(sele), defaults(duration, 0));
      };
      StructureComponent.prototype.getBoxUntransformed = function getBoxUntransformed (sele) {
          var bb;
          if (sele) {
              bb = this.structureView.getBoundingBox(new Selection(sele));
          }
          else {
              bb = this.structureView.boundingBox;
          }
          return bb;
      };
      StructureComponent.prototype.getCenterUntransformed = function getCenterUntransformed (sele) {
          if (sele && typeof sele === 'string') {
              return this.structure.atomCenter(new Selection(sele));
          }
          else {
              return this.structure.center;
          }
      };
      StructureComponent.prototype.superpose = function superpose$1 (component, align, sele1, sele2) {
          superpose(this.structureView, component.structureView, align, sele1, sele2);
          this.updateRepresentations({ 'position': true });
          return this;
      };
      StructureComponent.prototype.getMaxRepresentationRadius = function getMaxRepresentationRadius (atomIndex) {
          var maxRadius = 0;
          var atom = this.structure.getAtomProxy(atomIndex);
          this.eachRepresentation(function (reprElem) {
              if (reprElem.getVisibility()) {
                  var repr = reprElem.repr; // TODO
                  maxRadius = Math.max(repr.getAtomRadius(atom), maxRadius);
              }
          });
          return maxRadius;
      };
      StructureComponent.prototype.measurePick = function measurePick (atom) {
          var pickCount = this.pickBuffer.count;
          if (this.lastPick === atom.index && pickCount >= 1) {
              if (pickCount > 1) {
                  var atomList = this.pickBuffer.data;
                  var atomListSorted = this.pickBuffer.data.sort();
                  if (this.pickDict.has(atomListSorted)) {
                      this.pickDict.del(atomListSorted);
                  }
                  else {
                      this.pickDict.add(atomListSorted, atomList);
                  }
                  if (pickCount === 2) {
                      this.distanceRepresentation.setParameters({
                          atomPair: this.pickDict.values.filter(function (l) { return l.length === 2; })
                      });
                  }
                  else if (pickCount === 3) {
                      this.angleRepresentation.setParameters({
                          atomTriple: this.pickDict.values.filter(function (l) { return l.length === 3; })
                      });
                  }
                  else if (pickCount === 4) {
                      this.dihedralRepresentation.setParameters({
                          atomQuad: this.pickDict.values.filter(function (l) { return l.length === 4; })
                      });
                  }
              }
              this.pickBuffer.clear();
              this.lastPick = undefined;
          }
          else {
              if (!this.pickBuffer.has(atom.index)) {
                  this.pickBuffer.push(atom.index);
              }
              this.lastPick = atom.index;
          }
          this.measureUpdate();
      };
      StructureComponent.prototype.measureClear = function measureClear () {
          this.pickBuffer.clear();
          this.lastPick = undefined;
          this.spacefillRepresentation.setSelection('none');
      };
      StructureComponent.prototype.measureBuild = function measureBuild () {
          var md = this.measureData();
          this.distanceRepresentation.setParameters({ atomPair: md.distance });
          this.angleRepresentation.setParameters({ atomTriple: md.angle });
          this.dihedralRepresentation.setParameters({ atomQuad: md.dihedral });
      };
      StructureComponent.prototype.measureUpdate = function measureUpdate () {
          var this$1$1 = this;

          var pickData = this.pickBuffer.data;
          var radiusData = {};
          pickData.forEach(function (ai) {
              var r = Math.max(0.1, this$1$1.getMaxRepresentationRadius(ai));
              radiusData[ai] = r * (2.3 - smoothstep(0.1, 2, r));
          });
          this.spacefillRepresentation.setSelection(pickData.length ? ('@' + pickData.join(',')) : 'none');
          if (pickData.length)
              { this.spacefillRepresentation.setParameters({ radiusData: radiusData }); }
      };
      StructureComponent.prototype.measureData = function measureData () {
          var pv = this.pickDict.values;
          return {
              distance: pv.filter(function (l) { return l.length === 2; }),
              angle: pv.filter(function (l) { return l.length === 3; }),
              dihedral: pv.filter(function (l) { return l.length === 4; })
          };
      };
      /**
       * Remove all measurements, optionally limit to distance, angle or dihedral
       */
      StructureComponent.prototype.removeAllMeasurements = function removeAllMeasurements (type) {
          var pd = this.pickDict;
          var pv = pd.values;
          var remove = function (len) {
              pv.filter(function (l) { return l.length === len; }).forEach(function (l) { return pd.del(l.slice().sort()); });
          };
          if (!type || type & 1 /* Distance */)
              { remove(2); }
          if (!type || type & 2 /* Angle */)
              { remove(3); }
          if (!type || type & 4 /* Dihedral */)
              { remove(4); }
          this.measureBuild();
      };
      /**
       * Remove a measurement given as a pair, triple, quad of atom indices
       */
      StructureComponent.prototype.removeMeasurement = function removeMeasurement (atomList) {
          this.pickDict.del(atomList.slice().sort());
          this.measureBuild();
      };
      /**
       * Add a measurement given as a pair, triple, quad of atom indices
       */
      StructureComponent.prototype.addMeasurement = function addMeasurement (atomList) {
          if (atomList.length < 2 || atomList.length > 4)
              { return; }
          var atomListSorted = atomList.slice().sort();
          if (!this.pickDict.has(atomListSorted)) {
              this.pickDict.add(atomListSorted, atomList);
          }
          this.measureBuild();
      };

      Object.defineProperties( StructureComponent.prototype, prototypeAccessors );

      return StructureComponent;
  }(Component));
  ComponentRegistry.add('structure', StructureComponent);
  ComponentRegistry.add('structureview', StructureComponent);

  /**
   * @file Surface Component
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Component wrapping a {@link Surface} object
   *
   * @example
   * // get a surface component by loading a surface file into the stage
   * stage.loadFile( "url/for/surface" ).then( function( surfaceComponent ){
   *     surfaceComponent.addRepresentation( "surface" );
   *     surfaceComponent.autoView();
   * } );
   */
  var SurfaceComponent = /*@__PURE__*/(function (Component) {
      function SurfaceComponent(stage, surface, params) {
          if ( params === void 0 ) params = {};

          Component.call(this, stage, surface, Object.assign({ name: surface.name }, params));
          this.surface = surface;
      }

      if ( Component ) SurfaceComponent.__proto__ = Component;
      SurfaceComponent.prototype = Object.create( Component && Component.prototype );
      SurfaceComponent.prototype.constructor = SurfaceComponent;

      var prototypeAccessors = { type: { configurable: true } };
      /**
       * Component type
       * @type {String}
       */
      prototypeAccessors.type.get = function () { return 'surface'; };
      /**
       * Add a new surface representation to the component
       * @param {String} type - the name of the representation, one of:
       *                        surface, dot.
       * @param {SurfaceRepresentationParameters} params - representation parameters
       * @return {RepresentationComponent} the created representation wrapped into
       *                                   a representation component object
       */
      SurfaceComponent.prototype.addRepresentation = function addRepresentation (type, params) {
          if ( params === void 0 ) params = {};

          return this._addRepresentation(type, this.surface, params);
      };
      SurfaceComponent.prototype.getBoxUntransformed = function getBoxUntransformed () {
          return this.surface.boundingBox;
      };
      SurfaceComponent.prototype.getCenterUntransformed = function getCenterUntransformed () {
          return this.surface.center;
      };
      SurfaceComponent.prototype.dispose = function dispose () {
          this.surface.dispose();
          Component.prototype.dispose.call(this);
      };

      Object.defineProperties( SurfaceComponent.prototype, prototypeAccessors );

      return SurfaceComponent;
  }(Component));
  ComponentRegistry.add('surface', SurfaceComponent);

  /**
   * @file Volume Component
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Component wrapping a {@link Volume} object
   *
   * @example
   * // get a volume component by loading a volume file into the stage
   * stage.loadFile( "url/for/volume" ).then(function(volumeComponent){
   *   volumeComponent.addRepresentation('surface');
   *   volumeComponent.autoView();
   * });
   */
  var VolumeComponent = /*@__PURE__*/(function (Component) {
      function VolumeComponent(stage, volume, params) {
          if ( params === void 0 ) params = {};

          Component.call(this, stage, volume, Object.assign({ name: volume.name }, params));
          this.volume = volume;
      }

      if ( Component ) VolumeComponent.__proto__ = Component;
      VolumeComponent.prototype = Object.create( Component && Component.prototype );
      VolumeComponent.prototype.constructor = VolumeComponent;

      var prototypeAccessors = { type: { configurable: true } };
      /**
       * Component type
       * @type {String}
       */
      prototypeAccessors.type.get = function () { return 'volume'; };
      /**
       * Add a new volume representation to the component
       */
      VolumeComponent.prototype.addRepresentation = function addRepresentation (type, params) {
          if ( params === void 0 ) params = {};

          return this._addRepresentation(type, this.volume, params);
      };
      VolumeComponent.prototype.getBoxUntransformed = function getBoxUntransformed () {
          return this.volume.boundingBox;
      };
      VolumeComponent.prototype.getCenterUntransformed = function getCenterUntransformed () {
          return this.volume.center;
      };
      VolumeComponent.prototype.dispose = function dispose () {
          this.volume.dispose();
          Component.prototype.dispose.call(this);
      };

      Object.defineProperties( VolumeComponent.prototype, prototypeAccessors );

      return VolumeComponent;
  }(Component));
  ComponentRegistry.add('volume', VolumeComponent);

  /**
   * @file Component Collection
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var ComponentCollection = /*@__PURE__*/(function (Collection) {
      function ComponentCollection () {
          Collection.apply(this, arguments);
      }

      if ( Collection ) ComponentCollection.__proto__ = Collection;
      ComponentCollection.prototype = Object.create( Collection && Collection.prototype );
      ComponentCollection.prototype.constructor = ComponentCollection;

      ComponentCollection.prototype.addRepresentation = function addRepresentation (name, params) {
          return this.forEach(function (comp) { return comp.addRepresentation(name, params); });
      };
      ComponentCollection.prototype.autoView = function autoView (duration) {
          return this.forEach(function (comp) { return comp.autoView(duration); });
      };

      return ComponentCollection;
  }(Collection));

  /**
   * @file Stage
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function matchName(name, object) {
      if (name instanceof RegExp) {
          return object.name.match(name) !== null;
      }
      else {
          return object.name === name;
      }
  }
  var tmpZoomVector = new Vector3();
  var StageDefaultParameters = {
      impostor: true,
      quality: 'medium',
      workerDefault: true,
      sampleLevel: 0,
      backgroundColor: 'black',
      rotateSpeed: 2.0,
      zoomSpeed: 1.2,
      panSpeed: 1.0,
      clipNear: 0,
      clipFar: 100,
      clipDist: 10,
      clipMode: 'scene',
      clipScale: 'relative',
      fogNear: 50,
      fogFar: 100,
      cameraFov: 40,
      cameraEyeSep: 0.3,
      cameraType: 'perspective',
      lightColor: 0xdddddd,
      lightIntensity: 1.0,
      ambientColor: 0xdddddd,
      ambientIntensity: 0.2,
      hoverTimeout: 0,
      tooltip: true,
      mousePreset: 'default'
  };
  /**
   * Stage class, central for creating molecular scenes with NGL.
   *
   * @example
   * var stage = new Stage( "elementId", { backgroundColor: "white" } );
   */
  var Stage = function Stage(idOrElement, params) {
      if ( params === void 0 ) params = {};

      this.signals = {
          parametersChanged: new signals.Signal(),
          fullscreenChanged: new signals.Signal(),
          componentAdded: new signals.Signal(),
          componentRemoved: new signals.Signal(),
          clicked: new signals.Signal(),
          hovered: new signals.Signal()
      };
      /**
       * Counter that keeps track of various potentially long-running tasks,
       * including file loading and surface calculation.
       */
      this.tasks = new Counter();
      this.compList = [];
      this.defaultFileParams = {};
      this.logList = [];
      this.viewer = new Viewer(idOrElement);
      if (!this.viewer.renderer)
          { return; }
      this.tooltip = document.createElement('div');
      Object.assign(this.tooltip.style, {
          display: 'none',
          position: 'fixed',
          zIndex: '1000000',
          pointerEvents: 'none',
          backgroundColor: 'rgba( 0, 0, 0, 0.6 )',
          color: 'lightgrey',
          padding: '8px',
          fontFamily: 'sans-serif'
      });
      this.viewer.container.appendChild(this.tooltip);
      this.mouseObserver = new MouseObserver(this.viewer.renderer.domElement);
      this.viewerControls = new ViewerControls(this);
      this.trackballControls = new TrackballControls(this);
      this.pickingControls = new PickingControls(this);
      this.animationControls = new AnimationControls(this);
      this.mouseControls = new MouseControls(this);
      this.keyControls = new KeyControls(this);
      this.pickingBehavior = new PickingBehavior(this);
      this.mouseBehavior = new MouseBehavior(this);
      this.animationBehavior = new AnimationBehavior(this);
      this.keyBehavior = new KeyBehavior(this);
      this.spinAnimation = this.animationControls.spin([0, 1, 0], 0.005);
      this.spinAnimation.pause(true);
      this.rockAnimation = this.animationControls.rock([0, 1, 0], 0.005);
      this.rockAnimation.pause(true);
      // must come after the viewer has been instantiated
      this.parameters = createParams(params, StageDefaultParameters);
      this.setParameters(this.parameters);
      this.viewer.animate();
  };
  /**
   * Set stage parameters
   */
  Stage.prototype.setParameters = function setParameters (params) {
          if ( params === void 0 ) params = {};

      updateParams(this.parameters, params);
      var p = params;
      var tp = this.parameters;
      var viewer = this.viewer;
      var controls = this.trackballControls;
      // apply parameters
      if (p.quality !== undefined)
          { this.setQuality(tp.quality); }
      if (p.impostor !== undefined)
          { this.setImpostor(tp.impostor); }
      if (p.rotateSpeed !== undefined)
          { controls.rotateSpeed = tp.rotateSpeed; }
      if (p.zoomSpeed !== undefined)
          { controls.zoomSpeed = tp.zoomSpeed; }
      if (p.panSpeed !== undefined)
          { controls.panSpeed = tp.panSpeed; }
      if (p.mousePreset !== undefined)
          { this.mouseControls.preset(tp.mousePreset); }
      this.mouseObserver.setParameters({ hoverTimeout: tp.hoverTimeout });
      viewer.setClip(tp.clipNear, tp.clipFar, tp.clipDist, tp.clipMode, tp.clipScale);
      viewer.setFog(undefined, tp.fogNear, tp.fogFar);
      viewer.setCamera(tp.cameraType, tp.cameraFov, tp.cameraEyeSep);
      viewer.setSampling(tp.sampleLevel);
      viewer.setBackground(tp.backgroundColor);
      viewer.setLight(tp.lightColor, tp.lightIntensity, tp.ambientColor, tp.ambientIntensity);
      this.signals.parametersChanged.dispatch(this.getParameters());
      return this;
  };
  Stage.prototype.log = function log (msg) {
      console.log('STAGE LOG', msg);
      this.logList.push(msg);
  };
  /**
   * Get stage parameters
   */
  Stage.prototype.getParameters = function getParameters () {
      return Object.assign({}, this.parameters);
  };
  /**
   * Create default representations for the given component
   * @param  {StructureComponent|SurfaceComponent} object - component to create the representations for
   * @return {undefined}
   */
  Stage.prototype.defaultFileRepresentation = function defaultFileRepresentation (component) {
      if (component instanceof StructureComponent) {
          component.setSelection('/0');
          var atomCount, residueCount, instanceCount;
          var structure = component.structure;
          if (structure.biomolDict.BU1) {
              var assembly = structure.biomolDict.BU1;
              atomCount = assembly.getAtomCount(structure);
              residueCount = assembly.getResidueCount(structure);
              instanceCount = assembly.getInstanceCount();
              component.setDefaultAssembly('BU1');
          }
          else {
              atomCount = structure.getModelProxy(0).atomCount;
              residueCount = structure.getModelProxy(0).residueCount;
              instanceCount = 1;
          }
          var sizeScore = atomCount;
          if (Mobile) {
              sizeScore *= 4;
          }
          var backboneOnly = structure.atomStore.count / structure.residueStore.count < 2;
          if (backboneOnly) {
              sizeScore *= 10;
          }
          var colorScheme = 'chainname';
          var colorScale = 'RdYlBu';
          var colorReverse = false;
          if (structure.getChainnameCount(new Selection('polymer and /0')) === 1) {
              colorScheme = 'residueindex';
              colorScale = 'Spectral';
              colorReverse = true;
          }
          if (exports.Debug)
              { console.log(sizeScore, atomCount, instanceCount, backboneOnly); }
          if (residueCount / instanceCount < 4) {
              component.addRepresentation('ball+stick', {
                  colorScheme: 'element',
                  radiusScale: 2.0,
                  aspectRatio: 1.5,
                  bondScale: 0.3,
                  bondSpacing: 0.75,
                  quality: 'auto'
              });
          }
          else if ((instanceCount > 5 && sizeScore > 15000) || sizeScore > 700000) {
              var scaleFactor = (Math.min(2.0, Math.max(0.1, 6000 / (sizeScore / instanceCount))));
              if (backboneOnly)
                  { scaleFactor = Math.min(scaleFactor, 0.5); }
              component.addRepresentation('surface', {
                  colorScheme: colorScheme, colorScale: colorScale, colorReverse: colorReverse,
                  sele: 'polymer',
                  surfaceType: 'av',
                  probeRadius: 1.4,
                  scaleFactor: scaleFactor,
                  useWorker: false
              });
          }
          else if (sizeScore > 250000) {
              component.addRepresentation('backbone', {
                  colorScheme: colorScheme, colorScale: colorScale, colorReverse: colorReverse,
                  lineOnly: true
              });
          }
          else if (sizeScore > 100000) {
              component.addRepresentation('backbone', {
                  colorScheme: colorScheme, colorScale: colorScale, colorReverse: colorReverse,
                  quality: 'low',
                  disableImpostor: true,
                  radiusScale: 2.0
              });
          }
          else if (sizeScore > 80000) {
              component.addRepresentation('backbone', {
                  colorScheme: colorScheme, colorScale: colorScale, colorReverse: colorReverse,
                  radiusScale: 2.0
              });
          }
          else {
              component.addRepresentation('cartoon', {
                  colorScheme: colorScheme, colorScale: colorScale, colorReverse: colorReverse,
                  radiusScale: 0.7,
                  aspectRatio: 5,
                  quality: 'auto'
              });
              if (sizeScore < 50000) {
                  component.addRepresentation('base', {
                      colorScheme: colorScheme, colorScale: colorScale, colorReverse: colorReverse,
                      quality: 'auto'
                  });
              }
              component.addRepresentation('ball+stick', {
                  sele: 'ligand',
                  colorScheme: 'element',
                  radiusScale: 2.0,
                  aspectRatio: 1.5,
                  bondScale: 0.3,
                  bondSpacing: 0.75,
                  quality: 'auto'
              });
          }
          // add frames as trajectory
          if (component.structure.frames.length) {
              component.addTrajectory();
          }
      }
      else if (component instanceof SurfaceComponent) {
          component.addRepresentation('surface');
      }
      else if (component instanceof VolumeComponent) {
          component.addRepresentation('surface');
      }
      this.tasks.onZeroOnce(this.autoView, this);
  };
  /**
   * Load a file onto the stage
   *
   * @example
   * // load from URL
   * stage.loadFile( "http://files.rcsb.org/download/5IOS.cif" );
   *
   * @example
   * // load binary data in CCP4 format via a Blob
   * var binaryBlob = new Blob( [ ccp4Data ], { type: 'application/octet-binary'} );
   * stage.loadFile( binaryBlob, { ext: "ccp4" } );
   *
   * @example
   * // load string data in PDB format via a Blob
   * var stringBlob = new Blob( [ pdbData ], { type: 'text/plain'} );
   * stage.loadFile( stringBlob, { ext: "pdb" } );
   *
   * @example
   * // load a File object
   * stage.loadFile( file );
   *
   * @example
   * // load from URL and add a 'ball+stick' representation with double/triple bonds
   * stage.loadFile( "http://files.rcsb.org/download/1crn.cif" ).then( function( comp ){
   * comp.addRepresentation( "ball+stick", { multipleBond: true } );
   * } );
   *
   * @param  {String|File|Blob} path - either a URL or an object containing the file data
   * @param  {LoaderParameters} params - loading parameters
   * @param  {Boolean} params.asTrajectory - load multi-model structures as a trajectory
   * @return {Promise} A Promise object that resolves to a {@link StructureComponent},
   *               a {@link SurfaceComponent} or a {@link ScriptComponent} object,
   *               depending on the type of the loaded file.
   */
  Stage.prototype.loadFile = function loadFile (path, params) {
          var this$1$1 = this;
          if ( params === void 0 ) params = {};

      var p = Object.assign({}, this.defaultFileParams, params);
      var name = getFileInfo(path).name;
      this.tasks.increment();
      this.log(("loading file '" + name + "'"));
      var onLoadFn = function (object) {
          this$1$1.log(("loaded '" + name + "'"));
          var component = this$1$1.addComponentFromObject(object, p);
          if (p.defaultRepresentation) {
              this$1$1.defaultFileRepresentation(component);
          }
          this$1$1.tasks.decrement();
          return component;
      };
      var onErrorFn = function (e) {
          this$1$1.tasks.decrement();
          var errorMsg = "error loading file: '" + e + "'";
          this$1$1.log(errorMsg);
          throw errorMsg; // throw so it can be catched
      };
      var ext = defaults(p.ext, getFileInfo(path).ext);
      var promise;
      if (ParserRegistry.isTrajectory(ext)) {
          promise = Promise.reject(new Error(("loadFile: ext '" + ext + "' is a trajectory and must be loaded into a structure component")));
      }
      else {
          promise = autoLoad(path, p);
      }
      return promise.then(onLoadFn, onErrorFn);
  };
  Stage.prototype.loadScript = function loadScript (path) {
          var this$1$1 = this;

      var name = getFileInfo(path).name;
      this.log(("loading script '" + name + "'"));
      return autoLoad(path).then(function (script) {
          this$1$1.tasks.increment();
          this$1$1.log(("running script '" + name + "'"));
          script.run(this$1$1).then(function () {
              this$1$1.tasks.decrement();
              this$1$1.log(("finished script '" + name + "'"));
          });
          this$1$1.log(("called script '" + name + "'"));
      }, function (error) {
          this$1$1.tasks.decrement();
          var errorMsg = "errored script '" + name + "' \"" + error + "\"";
          this$1$1.log(errorMsg);
          throw errorMsg; // throw so it can be catched
      });
  };
  /**
   * Add the given component to the stage
   * @param {Component} component - the component to add
   * @return {undefined}
   */
  Stage.prototype.addComponent = function addComponent (component) {
      if (!component) {
          Log.warn('Stage.addComponent: no component given');
          return;
      }
      this.compList.push(component);
      this.signals.componentAdded.dispatch(component);
  };
  /**
   * Create a component from the given object and add to the stage
   */
  Stage.prototype.addComponentFromObject = function addComponentFromObject (object, params) {
          if ( params === void 0 ) params = {};

      var CompClass = ComponentRegistry.get(object.type);
      if (CompClass) {
          var component = new CompClass(this, object, params);
          this.addComponent(component);
          return component;
      }
      Log.warn('no component for object type', object.type);
  };
  /**
   * Remove the given component
   * @param  {Component} component - the component to remove
   * @return {undefined}
   */
  Stage.prototype.removeComponent = function removeComponent (component) {
      var idx = this.compList.indexOf(component);
      if (idx !== -1) {
          this.compList.splice(idx, 1);
          component.dispose();
          this.signals.componentRemoved.dispatch(component);
      }
  };
  /**
   * Remove all components from the stage
   */
  Stage.prototype.removeAllComponents = function removeAllComponents () {
          var this$1$1 = this;

      this.compList.slice().forEach(function (o) { return this$1$1.removeComponent(o); });
  };
  /**
   * Handle any size-changes of the container element
   * @return {undefined}
   */
  Stage.prototype.handleResize = function handleResize () {
      this.viewer.handleResize();
  };
  /**
   * Set width and height
   * @param {String} width - CSS width value
   * @param {String} height - CSS height value
   * @return {undefined}
   */
  Stage.prototype.setSize = function setSize (width, height) {
      var container = this.viewer.container;
      if (container !== document.body) {
          if (width !== undefined)
              { container.style.width = width; }
          if (height !== undefined)
              { container.style.height = height; }
          this.handleResize();
      }
  };
  /**
   * Toggle fullscreen
   * @param  {Element} [element] - document element to put into fullscreen,
   *                           defaults to the viewer container
   * @return {undefined}
   */
  Stage.prototype.toggleFullscreen = function toggleFullscreen (element) {
      if (!document.fullscreenEnabled && !document.mozFullScreenEnabled &&
          !document.webkitFullscreenEnabled && !document.msFullscreenEnabled) {
          Log.log('fullscreen mode (currently) not possible');
          return;
      }
      var self = this;
      element = element || this.viewer.container;
      this.lastFullscreenElement = element;
      //
      function getFullscreenElement() {
          return document.fullscreenElement || document.mozFullScreenElement ||
              document.webkitFullscreenElement || document.msFullscreenElement;
      }
      function resizeElement() {
          if (!getFullscreenElement() && self.lastFullscreenElement) {
              var element = self.lastFullscreenElement;
              element.style.width = element.dataset.normalWidth || '';
              element.style.height = element.dataset.normalHeight || '';
              document.removeEventListener('fullscreenchange', resizeElement);
              document.removeEventListener('mozfullscreenchange', resizeElement);
              document.removeEventListener('webkitfullscreenchange', resizeElement);
              document.removeEventListener('MSFullscreenChange', resizeElement);
              self.handleResize();
              self.signals.fullscreenChanged.dispatch(false);
          }
      }
      //
      if (!getFullscreenElement()) {
          element.dataset.normalWidth = element.style.width || '';
          element.dataset.normalHeight = element.style.height || '';
          element.style.width = window.screen.width + 'px';
          element.style.height = window.screen.height + 'px';
          if (element.requestFullscreen) {
              element.requestFullscreen();
          }
          else if (element.msRequestFullscreen) {
              element.msRequestFullscreen();
          }
          else if (element.mozRequestFullScreen) {
              element.mozRequestFullScreen();
          }
          else if (element.webkitRequestFullscreen) {
              element.webkitRequestFullscreen();
          }
          document.addEventListener('fullscreenchange', resizeElement);
          document.addEventListener('mozfullscreenchange', resizeElement);
          document.addEventListener('webkitfullscreenchange', resizeElement);
          document.addEventListener('MSFullscreenChange', resizeElement);
          this.handleResize();
          this.signals.fullscreenChanged.dispatch(true);
          // workaround for Safari
          setTimeout(function () { self.handleResize(); }, 100);
      }
      else {
          if (document.exitFullscreen) {
              document.exitFullscreen();
          }
          else if (document.msExitFullscreen) {
              document.msExitFullscreen();
          }
          else if (document.mozCancelFullScreen) {
              document.mozCancelFullScreen();
          }
          else if (document.webkitExitFullscreen) {
              document.webkitExitFullscreen();
          }
      }
  };
  /**
   * Set spin
   * @param {Boolean} flag - if true start rocking and stop spinning
   * @return {undefined}
   */
  Stage.prototype.setSpin = function setSpin (flag) {
      if (flag) {
          this.spinAnimation.resume(true);
          this.rockAnimation.pause(true);
      }
      else {
          this.spinAnimation.pause(true);
      }
  };
  /**
   * Set rock
   * @param {Boolean} flag - if true start rocking and stop spinning
   * @return {undefined}
   */
  Stage.prototype.setRock = function setRock (flag) {
      if (flag) {
          this.rockAnimation.resume(true);
          this.spinAnimation.pause(true);
      }
      else {
          this.rockAnimation.pause(true);
      }
  };
  /**
   * Toggle spin
   * @return {undefined}
   */
  Stage.prototype.toggleSpin = function toggleSpin () {
      this.setSpin(this.spinAnimation.paused);
  };
  /**
   * Toggle rock
   * @return {undefined}
   */
  Stage.prototype.toggleRock = function toggleRock () {
      this.setRock(this.rockAnimation.paused);
  };
  /**
   * Get the current focus from the current clipNear value expressed
   * as 0 (full view) to 100 (completely clipped)
   * Negative values may be returned in some cases.
   *
   * In 'camera' clipMode focus isn't applicable, this method returns 0.0
   *
   * @return {number} focus
   */
  Stage.prototype.getFocus = function getFocus () {
      var p = this.parameters;
      if (p.clipMode !== 'scene')
          { return 0.0; }
      var clipNear = p.clipNear;
      if (p.clipScale === 'absolute') {
          clipNear = this.viewer.absoluteToRelative(clipNear);
      }
      return clipNear * 2;
  };
  /**
   * Set the focus, a value of 0 sets clipping planes to show full scene,
   * while a value of 100 will compltely clip the scene.
   *
   * @param {number} value focus
   */
  Stage.prototype.setFocus = function setFocus (value) {
      if (this.parameters.clipMode !== 'scene')
          { return; }
      var clipNear;
      var clipFar;
      var fogNear;
      var fogFar;
      if (this.parameters.clipScale === 'relative') {
          clipNear = clamp(value / 2.0, 0.0, 49.9);
          clipFar = 100 - clipNear;
          fogNear = 50;
          fogFar = pclamp(2 * clipFar - 50);
      }
      else {
          clipNear = this.viewer.relativeToAbsolute(value / 2.0);
          clipFar = clipNear;
          fogNear = 0;
          fogFar = 2 * clipFar;
      }
      this.setParameters({ clipNear: clipNear, clipFar: clipFar, fogNear: fogNear, fogFar: fogFar });
  };
  Stage.prototype.getZoomForBox = function getZoomForBox (boundingBox) {
      var bbSize = boundingBox.getSize(tmpZoomVector);
      var maxSize = Math.max(bbSize.x, bbSize.y, bbSize.z);
      var minSize = Math.min(bbSize.x, bbSize.y, bbSize.z);
      var distance = maxSize + Math.sqrt(minSize);
      var fov = degToRad(this.viewer.perspectiveCamera.fov);
      var width = this.viewer.width;
      var height = this.viewer.height;
      var aspect = width / height;
      var aspectFactor = (height < width ? 1 : aspect);
      distance = Math.abs(((distance * 0.5) / aspectFactor) / Math.sin(fov / 2));
      distance += this.parameters.clipDist;
      return -distance;
  };
  Stage.prototype.getBox = function getBox () {
      return this.viewer.boundingBox;
  };
  Stage.prototype.getZoom = function getZoom () {
      return this.getZoomForBox(this.getBox());
  };
  Stage.prototype.getCenter = function getCenter (optionalTarget) {
      return this.getBox().getCenter(optionalTarget || new Vector3());
  };
  /**
   * Add a zoom and a move animation with automatic targets
   * @param  {Integer} duration - animation time in milliseconds
   * @return {undefined}
   */
  Stage.prototype.autoView = function autoView (duration) {
      this.animationControls.zoomMove(this.getCenter(), this.getZoom(), defaults(duration, 0));
  };
  /**
   * Make image from what is shown in a viewer canvas
   */
  Stage.prototype.makeImage = function makeImage (params) {
          var this$1$1 = this;
          if ( params === void 0 ) params = {};

      return new Promise(function (resolve, reject) {
          this$1$1.tasks.onZeroOnce(function () {
              this$1$1.tasks.increment();
              this$1$1.viewer.makeImage(params).then(function (blob) {
                  this$1$1.tasks.decrement();
                  resolve(blob);
              }).catch(function (e) {
                  this$1$1.tasks.decrement();
                  reject(e);
              });
          });
      });
  };
  Stage.prototype.setImpostor = function setImpostor (value) {
      this.parameters.impostor = value;
      var types = [
          'spacefill', 'ball+stick', 'licorice', 'hyperball',
          'backbone', 'rocket', 'helixorient', 'contact', 'distance',
          'dot'
      ];
      this.eachRepresentation(function (reprElem) {
          if (!types.includes(reprElem.getType()))
              { return; }
          var p = reprElem.getParameters(); // TODO
          p.disableImpostor = !value;
          reprElem.build(p);
      });
  };
  Stage.prototype.setQuality = function setQuality (value) {
      this.parameters.quality = value;
      var types = [
          'tube', 'cartoon', 'ribbon', 'trace', 'rope'
      ];
      var impostorTypes = [
          'spacefill', 'ball+stick', 'licorice', 'hyperball',
          'backbone', 'rocket', 'helixorient', 'contact', 'distance',
          'dot'
      ];
      this.eachRepresentation(function (repr) {
          var p = repr.getParameters(); // TODO
          if (!types.includes(repr.getType())) {
              if (!impostorTypes.includes(repr.getType()))
                  { return; }
              if (!p.disableImpostor) {
                  repr.repr.quality = value; // TODO
                  return;
              }
          }
          p.quality = value;
          repr.build(p);
      });
  };
  /**
   * Iterator over each component and executing the callback
   */
  Stage.prototype.eachComponent = function eachComponent (callback, type) {
      this.compList.slice().forEach(function (comp) {
          if (type === undefined || type === comp.type)
              { callback(comp); }
      });
  };
  /**
   * Iterator over each representation and executing the callback
   */
  Stage.prototype.eachRepresentation = function eachRepresentation (callback, type) {
      this.eachComponent(function (comp) {
          comp.reprList.slice().forEach(function (reprElem) {
              if (type === undefined || type === reprElem.getType())
                  { callback(reprElem, comp); }
          });
      });
  };
  /**
   * Get collection of components by name
   */
  Stage.prototype.getComponentsByName = function getComponentsByName (name) {
      var compList = [];
      this.eachComponent(function (comp) {
          if (name === undefined || matchName(name, comp))
              { compList.push(comp); }
      });
      return new ComponentCollection(compList);
  };
  /**
   * Get collection of components by object
   */
  Stage.prototype.getComponentsByObject = function getComponentsByObject (object) {
      var compList = [];
      this.eachComponent(function (comp) {
          if (comp.object === object)
              { compList.push(comp); }
      });
      return new ComponentCollection(compList);
  };
  /**
   * Get collection of representations by name
   */
  Stage.prototype.getRepresentationsByName = function getRepresentationsByName (name) {
      var reprList = [];
      this.eachRepresentation(function (repr, comp) {
          if (name === undefined || matchName(name, repr))
              { reprList.push(repr); }
      });
      return new RepresentationCollection(reprList);
  };
  Stage.prototype.measureClear = function measureClear () {
      this.eachComponent(function (sc) { return sc.measureClear(); }, 'structure');
  };
  Stage.prototype.measureUpdate = function measureUpdate () {
      this.eachComponent(function (sc) { return sc.measureUpdate(); }, 'structure');
  };
  /**
   * Cleanup when disposing of a stage object
   */
  Stage.prototype.dispose = function dispose () {
      this.tasks.dispose();
      this.viewer.dispose();
      this.mouseObserver.dispose();
  };

  /**
   * @file Shape Component
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Component wrapping a {@link Shape} object
   *
   * @example
   * // get a shape component by adding a shape object to the stage
   * var shape = new NGL.Shape( "shape" );
   * shape.addSphere( [ 0, 0, 0 ], [ 1, 0, 0 ], 1.5 );
   * var shapeComponent = stage.addComponentFromObject( shape );
   * shapeComponent.addRepresentation( "buffer" );
   */
  var ShapeComponent = /*@__PURE__*/(function (Component) {
      function ShapeComponent(stage, shape, params) {
          if ( params === void 0 ) params = {};

          Component.call(this, stage, shape, Object.assign({ name: shape.name }, params));
          this.shape = shape;
      }

      if ( Component ) ShapeComponent.__proto__ = Component;
      ShapeComponent.prototype = Object.create( Component && Component.prototype );
      ShapeComponent.prototype.constructor = ShapeComponent;

      var prototypeAccessors = { type: { configurable: true } };
      /**
       * Component type
       * @type {String}
       */
      prototypeAccessors.type.get = function () { return 'shape'; };
      /**
       * Add a new shape representation to the component
       * @param {String} type - the name of the representation, one of:
       *                        buffer.
       * @param {BufferRepresentationParameters} params - representation parameters
       * @return {RepresentationComponent} the created representation wrapped into
       *                                   a representation component object
       */
      ShapeComponent.prototype.addRepresentation = function addRepresentation (type, params) {
          if ( params === void 0 ) params = {};

          return this._addRepresentation(type, this.shape, params);
      };
      ShapeComponent.prototype.getBoxUntransformed = function getBoxUntransformed () {
          return this.shape.boundingBox;
      };
      ShapeComponent.prototype.getCenterUntransformed = function getCenterUntransformed () {
          return this.shape.center;
      };
      ShapeComponent.prototype.dispose = function dispose () {
          this.shape.dispose();
          Component.prototype.dispose.call(this);
      };

      Object.defineProperties( ShapeComponent.prototype, prototypeAccessors );

      return ShapeComponent;
  }(Component));
  ComponentRegistry.add('shape', ShapeComponent);

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */

  function __decorate(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function") { r = Reflect.decorate(decorators, target, key, desc); }
      else { for (var i = decorators.length - 1; i >= 0; i--) { if (d = decorators[i]) { r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r; } } }
      return c > 3 && r && Object.defineProperty(target, key, r), r;
  }

  /**
   * @file Atomindex Colormaker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Color by atom index. The {@link AtomProxy.index} property is used for coloring.
   * Each {@link ModelProxy} of a {@link Structure} is colored seperately. The
   * `params.domain` parameter is ignored.
   *
   * __Name:__ _atomindex_
   *
   * @example
   * stage.loadFile( "rcsb://1crn" ).then( function( o ){
   *     o.addRepresentation( "ball+stick", { colorScheme: "atomindex" } );
   *     o.autoView();
   * } );
   */
  var AtomindexColormaker = /*@__PURE__*/(function (Colormaker) {
      function AtomindexColormaker(params) {
          var this$1$1 = this;

          Colormaker.call(this, params);
          if (!params.scale) {
              this.parameters.scale = 'rainbow';
              this.parameters.reverse = defaults(params.reverse, true);
          }
          this.scalePerModel = {};
          params.structure.eachModel(function (mp) {
              this$1$1.parameters.domain = [mp.atomOffset, mp.atomEnd];
              this$1$1.scalePerModel[mp.index] = this$1$1.getScale(); // TODO
          });
      }

      if ( Colormaker ) AtomindexColormaker.__proto__ = Colormaker;
      AtomindexColormaker.prototype = Object.create( Colormaker && Colormaker.prototype );
      AtomindexColormaker.prototype.constructor = AtomindexColormaker;
      /**
       * get color for an atom
       * @param  {AtomProxy} atom - atom to get color for
       * @return {Integer} hex atom color
       */
      AtomindexColormaker.prototype.atomColor = function atomColor (atom) {
          return this.scalePerModel[atom.modelIndex](atom.index);
      };

      return AtomindexColormaker;
  }(Colormaker));
  __decorate([
      manageColor
  ], AtomindexColormaker.prototype, "atomColor", null);
  ColormakerRegistry.add('atomindex', AtomindexColormaker); // TODO

  /**
   * @file Bfactor Colormaker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Color by b-factor. The {@link AtomProxy.bfactor} property is used for coloring.
   * By default the min and max b-factor values are used for the scale`s domain.
   *
   * __Name:__ _bfactor_
   *
   * @example
   * stage.loadFile( "rcsb://1crn" ).then( function( o ){
   *     o.addRepresentation( "ball+stick", { colorScheme: "bfactor" } );
   *     o.autoView();
   * } );
   */
  var BfactorColormaker = /*@__PURE__*/(function (Colormaker) {
      function BfactorColormaker(params) {
          Colormaker.call(this, params);
          if (!params.scale) {
              this.parameters.scale = 'OrRd';
          }
          if (!params.domain) {
              var selection;
              var min = Infinity;
              var max = -Infinity;
              if (params.sele) {
                  selection = new Selection(params.sele);
              }
              params.structure.eachAtom(function (a) {
                  var bfactor = a.bfactor;
                  min = Math.min(min, bfactor);
                  max = Math.max(max, bfactor);
              }, selection);
              this.parameters.domain = [min, max];
          }
          this.bfactorScale = this.getScale();
      }

      if ( Colormaker ) BfactorColormaker.__proto__ = Colormaker;
      BfactorColormaker.prototype = Object.create( Colormaker && Colormaker.prototype );
      BfactorColormaker.prototype.constructor = BfactorColormaker;
      BfactorColormaker.prototype.atomColor = function atomColor (a) {
          return this.bfactorScale(a.bfactor);
      };

      return BfactorColormaker;
  }(Colormaker));
  __decorate([
      manageColor
  ], BfactorColormaker.prototype, "atomColor", null);
  ColormakerRegistry.add('bfactor', BfactorColormaker);

  /**
   * @file Chainid Colormaker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Color by chain id
   */
  var ChainidColormaker = /*@__PURE__*/(function (Colormaker) {
      function ChainidColormaker(params) {
          var this$1$1 = this;

          Colormaker.call(this, params);
          this.chainidDictPerModel = {};
          this.scalePerModel = {};
          if (!params.scale) {
              this.parameters.scale = 'Spectral';
          }
          params.structure.eachModel(function (mp) {
              var i = 0;
              var chainidDict = {};
              mp.eachChain(function (cp) {
                  if (chainidDict[cp.chainid] === undefined) {
                      chainidDict[cp.chainid] = i;
                      i += 1;
                  }
              });
              this$1$1.parameters.domain = [0, i - 1];
              this$1$1.chainidDictPerModel[mp.index] = chainidDict;
              this$1$1.scalePerModel[mp.index] = this$1$1.getScale();
          });
      }

      if ( Colormaker ) ChainidColormaker.__proto__ = Colormaker;
      ChainidColormaker.prototype = Object.create( Colormaker && Colormaker.prototype );
      ChainidColormaker.prototype.constructor = ChainidColormaker;
      ChainidColormaker.prototype.atomColor = function atomColor (a) {
          var chainidDict = this.chainidDictPerModel[a.modelIndex];
          return this.scalePerModel[a.modelIndex](chainidDict[a.chainid]);
      };

      return ChainidColormaker;
  }(Colormaker));
  __decorate([
      manageColor
  ], ChainidColormaker.prototype, "atomColor", null);
  ColormakerRegistry.add('chainid', ChainidColormaker);

  /**
   * @file Chainindex Colormaker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Color by chain index
   */
  var ChainindexColormaker = /*@__PURE__*/(function (Colormaker) {
      function ChainindexColormaker(params) {
          var this$1$1 = this;

          Colormaker.call(this, params);
          this.scalePerModel = {};
          if (!params.scale) {
              this.parameters.scale = 'Spectral';
          }
          params.structure.eachModel(function (mp) {
              this$1$1.parameters.domain = [mp.chainOffset, mp.chainEnd];
              this$1$1.scalePerModel[mp.index] = this$1$1.getScale();
          });
      }

      if ( Colormaker ) ChainindexColormaker.__proto__ = Colormaker;
      ChainindexColormaker.prototype = Object.create( Colormaker && Colormaker.prototype );
      ChainindexColormaker.prototype.constructor = ChainindexColormaker;
      ChainindexColormaker.prototype.atomColor = function atomColor (a) {
          return this.scalePerModel[a.modelIndex](a.chainIndex);
      };

      return ChainindexColormaker;
  }(Colormaker));
  __decorate([
      manageColor
  ], ChainindexColormaker.prototype, "atomColor", null);
  ColormakerRegistry.add('chainindex', ChainindexColormaker);

  /**
   * @file Chainname Colormaker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Color by chain name
   */
  var ChainnameColormaker = /*@__PURE__*/(function (Colormaker) {
      function ChainnameColormaker(params) {
          var this$1$1 = this;

          Colormaker.call(this, params);
          this.chainnameDictPerModel = {};
          this.scalePerModel = {};
          if (!params.scale) {
              this.parameters.scale = 'Spectral';
          }
          params.structure.eachModel(function (mp) {
              var i = 0;
              var chainnameDict = {};
              mp.eachChain(function (cp) {
                  if (chainnameDict[cp.chainname] === undefined) {
                      chainnameDict[cp.chainname] = i;
                      i += 1;
                  }
              });
              this$1$1.parameters.domain = [0, i - 1];
              this$1$1.chainnameDictPerModel[mp.index] = chainnameDict;
              this$1$1.scalePerModel[mp.index] = this$1$1.getScale();
          });
      }

      if ( Colormaker ) ChainnameColormaker.__proto__ = Colormaker;
      ChainnameColormaker.prototype = Object.create( Colormaker && Colormaker.prototype );
      ChainnameColormaker.prototype.constructor = ChainnameColormaker;
      ChainnameColormaker.prototype.atomColor = function atomColor (a) {
          var chainnameDict = this.chainnameDictPerModel[a.modelIndex];
          return this.scalePerModel[a.modelIndex](chainnameDict[a.chainname]);
      };

      return ChainnameColormaker;
  }(Colormaker));
  __decorate([
      manageColor
  ], ChainnameColormaker.prototype, "atomColor", null);
  ColormakerRegistry.add('chainname', ChainnameColormaker);

  /**
   * @file Densityfit Colormaker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Color by validation density fit
   */
  var DensityfitColormaker = /*@__PURE__*/(function (Colormaker) {
      function DensityfitColormaker(params) {
          Colormaker.call(this, params);
          this.rsrzDict = {};
          this.rsccDict = {};
          if (!params.scale) {
              this.parameters.scale = 'RdYlBu';
          }
          this.rsrzScale = this.getScale({ domain: [2, 0] });
          this.rsccScale = this.getScale({ domain: [0.678, 1.0] });
          var val = params.structure.validation;
          if (val) {
              this.rsrzDict = val.rsrzDict;
              this.rsccDict = val.rsccDict;
          }
      }

      if ( Colormaker ) DensityfitColormaker.__proto__ = Colormaker;
      DensityfitColormaker.prototype = Object.create( Colormaker && Colormaker.prototype );
      DensityfitColormaker.prototype.constructor = DensityfitColormaker;
      DensityfitColormaker.prototype.atomColor = function atomColor (atom) {
          var sele = atom.resno + '';
          if (atom.inscode)
              { sele += '^' + atom.inscode; }
          if (atom.chainname)
              { sele += ':' + atom.chainname; }
          sele += '/' + atom.modelIndex;
          var rsrz = this.rsrzDict[sele];
          if (rsrz !== undefined) {
              return this.rsrzScale(rsrz);
          }
          var rscc = this.rsccDict[sele];
          if (rscc !== undefined) {
              return this.rsccScale(rscc);
          }
          return 0x909090;
      };

      return DensityfitColormaker;
  }(Colormaker));
  __decorate([
      manageColor
  ], DensityfitColormaker.prototype, "atomColor", null);
  ColormakerRegistry.add('densityfit', DensityfitColormaker);

  /**
   * @file Atomindex Colormaker
   * @author Fred Ludlow <Fred.Ludlow@astx.com>
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  // from CHARMM
  var partialCharges = {
      'ARG': {
          'CD': 0.1,
          'CZ': 0.5,
          'NE': -0.1
      },
      'ASN': {
          'CG': 0.55,
          'OD1': -0.55
      },
      'ASP': {
          'CB': -0.16,
          'CG': 0.36,
          'OD1': -0.6,
          'OD2': -0.6
      },
      'CYS': {
          'CB': 0.19,
          'SG': -0.19
      },
      'GLN': {
          'CD': 0.55,
          'OE1': -0.55
      },
      'GLU': {
          'CD': 0.36,
          'CG': -0.16,
          'OE1': -0.6,
          'OE2': -0.6
      },
      'HIS': {
          'CB': 0.1,
          'CD2': 0.2,
          'CE1': 0.45,
          'CG': 0.15,
          'ND1': 0.05,
          'NE2': 0.05
      },
      'LYS': {
          'CE': 0.25,
          'NZ': 0.75
      },
      'MET': {
          'CE': 0.06,
          'CG': 0.06,
          'SD': -0.12
      },
      'PTR': {
          'C': 0.55,
          'CA': 0.1,
          'CZ': 0.25,
          'N': -0.35,
          'O': -0.55,
          'O1P': -0.85,
          'O2P': -0.85,
          'O3P': -0.85,
          'OG1': -1.1,
          'P': 1.4
      },
      'SEP': {
          'C': 0.55,
          'CA': 0.1,
          'CB': 0.25,
          'N': -0.35,
          'O': -0.55,
          'O1P': -0.85,
          'O2P': -0.85,
          'O3P': -0.85,
          'OG1': -1.1,
          'P': 1.4
      },
      'SER': {
          'CB': 0.25,
          'OG': -0.25
      },
      'THR': {
          'CB': 0.25,
          'OG1': -0.25
      },
      'TPO': {
          'C': 0.55,
          'CA': 0.1,
          'CB': 0.25,
          'N': -0.35,
          'O': -0.55,
          'OG1': -1.1,
          'O1P': -0.85,
          'O2P': -0.85,
          'O3P': -0.85,
          'P': 1.4
      },
      'TRP': {
          'CD1': 0.06,
          'CD2': 0.1,
          'CE2': -0.04,
          'CE3': -0.03,
          'CG': -0.03,
          'NE1': -0.06
      },
      'TYR': {
          'CZ': 0.25,
          'OH': -0.25
      },
      'backbone': {
          'C': 0.55,
          'O': -0.55,
          'N': -0.35,
          'CA': 0.1
      }
  };
  var maxRadius = 12.0;
  var nHBondDistance = 1.04;
  var nHCharge = 0.25;
  /**
   * Populates position vector with location of implicit or explicit H
   * Returns position or undefined if not able to locate H
   *
   * @param {AtomProxy} ap - the nitrogen atom
   * @param {Vector3} [position] - optional target
   * @return {Vectors|undefined} the hydrogen atom position
   */
  function backboneNHPosition(ap, position) {
      if ( position === void 0 ) position = new Vector3();

      var h = false;
      var ca = false;
      var c = false;
      position.set(2 * ap.x, 2 * ap.y, 2 * ap.z);
      ap.eachBondedAtom(function (a2) {
          // Any time we detect H, reset position and skip
          // future tests
          if (h)
              { return; }
          if (a2.atomname === 'H') {
              position.set(a2.x, a2.y, a2.z);
              h = true;
              return;
          }
          if (!ca && a2.atomname === 'CA') {
              position.sub(a2); // TODO
              ca = true;
          }
          else if (!c && a2.atomname === 'C') {
              c = true;
              position.sub(a2); // TODO
          }
      });
      if (h) {
          return position;
      }
      if (ca && c) {
          position.normalize();
          position.multiplyScalar(nHBondDistance);
          position.add(ap);
          return position;
      }
  }
  /**
   * Takes an array of Vector3 objects and
   * converts to an object that looks like an AtomStore
   *
   * @param {Vector3[]} positions - array of positions
   * @return {Object} AtomStore-like object
   */
  function buildStoreLike(positions) {
      var n = positions.length;
      var x = new Float32Array(n);
      var y = new Float32Array(n);
      var z = new Float32Array(n);
      for (var i = 0; i < positions.length; i++) {
          var v = positions[i];
          x[i] = v.x;
          y[i] = v.y;
          z[i] = v.z;
      }
      return { x: x, y: y, z: z, count: n };
  }
  function chargeForAtom(a) {
      if (a.partialCharge !== null)
          { return a.partialCharge; }
      if (!a.isProtein()) {
          return 0.0;
      }
      return ((partialCharges[a.resname] &&
          partialCharges[a.resname][a.atomname]) ||
          partialCharges['backbone'][a.atomname] || 0.0);
  }
  /**
   * Color a surface by electrostatic charge. This is a highly approximate
   * calculation! The partial charges are CHARMM with hydrogens added to heavy
   * atoms and hydrogen positions generated for amides.
   *
   * __Name:__ _electrostatic_
   *
   * @example
   * stage.loadFile( "rcsb://3dqb" ).then( function( o ){
   *     o.addRepresentation( "surface", { colorScheme: "electrostatic" } );
   *     o.autoView();
   * } );
   */
  var ElectrostaticColormaker = /*@__PURE__*/(function (Colormaker) {
      function ElectrostaticColormaker(params) {
          var this$1$1 = this;

          Colormaker.call(this, params);
          this.delta = new Vector3();
          this.hCharges = [];
          if (!params.scale) {
              this.parameters.scale = 'rwb';
          }
          if (!params.domain) {
              this.parameters.domain = [-50, 50];
          }
          this.scale = this.getScale();
          this.charges = new Float32Array(params.structure.atomCount);
          var hPositions = [];
          params.structure.eachAtom(function (ap) {
              this$1$1.charges[ap.index] = chargeForAtom(ap) * ap.occupancy;
              if (ap.atomname === 'N') {
                  // In the specific case where N forms two bonds to
                  // CA and C, try and place a dummy hydrogen
                  if (ap.bondCount >= 3)
                      { return; } // Skip if 3 bonds already (e.g. PRO)
                  if (ap.bondToElementCount(1))
                      { return; } // Skip if any H specificed
                  var hPos = backboneNHPosition(ap);
                  if (hPos !== undefined) {
                      hPositions.push(hPos);
                      this$1$1.hCharges.push(nHCharge * ap.occupancy);
                  }
              }
          });
          var bbox = params.structure.getBoundingBox();
          bbox.expandByScalar(nHBondDistance); // Worst case
          // SpatialHash requires x,y,z and count
          this.hStore = buildStoreLike(hPositions);
          this.hHash = new SpatialHash(this.hStore, bbox); // TODO
          this.hash = new SpatialHash(params.structure.atomStore, bbox);
      }

      if ( Colormaker ) ElectrostaticColormaker.__proto__ = Colormaker;
      ElectrostaticColormaker.prototype = Object.create( Colormaker && Colormaker.prototype );
      ElectrostaticColormaker.prototype.constructor = ElectrostaticColormaker;
      ElectrostaticColormaker.prototype.positionColor = function positionColor (v) {
          var charges = this.charges;
          var hCharges = this.hCharges;
          var p = 0.0;
          this.hash.eachWithin(v.x, v.y, v.z, maxRadius, function (atomIndex, dSq) {
              var charge = charges[atomIndex];
              if (charge === 0.0)
                  { return; }
              p += charge / dSq;
          });
          this.hHash.eachWithin(v.x, v.y, v.z, maxRadius, function (atomIndex, dSq) {
              var charge = hCharges[atomIndex];
              if (charge === 0.0)
                  { return; }
              p += charge / dSq;
          });
          return this.scale(p * 332); // 332 to convert to kcal/mol
      };

      return ElectrostaticColormaker;
  }(Colormaker));
  __decorate([
      manageColor
  ], ElectrostaticColormaker.prototype, "positionColor", null);
  ColormakerRegistry.add('electrostatic', ElectrostaticColormaker);

  /**
   * @file Element Colormaker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  // from Jmol http://jmol.sourceforge.net/jscolors/ (or 0xFFFFFF)
  var ElementColors = {
      'H': 0xFFFFFF,
      'HE': 0xD9FFFF,
      'LI': 0xCC80FF,
      'BE': 0xC2FF00,
      'B': 0xFFB5B5,
      'C': 0x909090,
      'N': 0x3050F8,
      'O': 0xFF0D0D,
      'F': 0x90E050,
      'NE': 0xB3E3F5,
      'NA': 0xAB5CF2,
      'MG': 0x8AFF00,
      'AL': 0xBFA6A6,
      'SI': 0xF0C8A0,
      'P': 0xFF8000,
      'S': 0xFFFF30,
      'CL': 0x1FF01F,
      'AR': 0x80D1E3,
      'K': 0x8F40D4,
      'CA': 0x3DFF00,
      'SC': 0xE6E6E6,
      'TI': 0xBFC2C7,
      'V': 0xA6A6AB,
      'CR': 0x8A99C7,
      'MN': 0x9C7AC7,
      'FE': 0xE06633,
      'CO': 0xF090A0,
      'NI': 0x50D050,
      'CU': 0xC88033,
      'ZN': 0x7D80B0,
      'GA': 0xC28F8F,
      'GE': 0x668F8F,
      'AS': 0xBD80E3,
      'SE': 0xFFA100,
      'BR': 0xA62929,
      'KR': 0x5CB8D1,
      'RB': 0x702EB0,
      'SR': 0x00FF00,
      'Y': 0x94FFFF,
      'ZR': 0x94E0E0,
      'NB': 0x73C2C9,
      'MO': 0x54B5B5,
      'TC': 0x3B9E9E,
      'RU': 0x248F8F,
      'RH': 0x0A7D8C,
      'PD': 0x006985,
      'AG': 0xC0C0C0,
      'CD': 0xFFD98F,
      'IN': 0xA67573,
      'SN': 0x668080,
      'SB': 0x9E63B5,
      'TE': 0xD47A00,
      'I': 0x940094,
      'XE': 0x940094,
      'CS': 0x57178F,
      'BA': 0x00C900,
      'LA': 0x70D4FF,
      'CE': 0xFFFFC7,
      'PR': 0xD9FFC7,
      'ND': 0xC7FFC7,
      'PM': 0xA3FFC7,
      'SM': 0x8FFFC7,
      'EU': 0x61FFC7,
      'GD': 0x45FFC7,
      'TB': 0x30FFC7,
      'DY': 0x1FFFC7,
      'HO': 0x00FF9C,
      'ER': 0x00E675,
      'TM': 0x00D452,
      'YB': 0x00BF38,
      'LU': 0x00AB24,
      'HF': 0x4DC2FF,
      'TA': 0x4DA6FF,
      'W': 0x2194D6,
      'RE': 0x267DAB,
      'OS': 0x266696,
      'IR': 0x175487,
      'PT': 0xD0D0E0,
      'AU': 0xFFD123,
      'HG': 0xB8B8D0,
      'TL': 0xA6544D,
      'PB': 0x575961,
      'BI': 0x9E4FB5,
      'PO': 0xAB5C00,
      'AT': 0x754F45,
      'RN': 0x428296,
      'FR': 0x420066,
      'RA': 0x007D00,
      'AC': 0x70ABFA,
      'TH': 0x00BAFF,
      'PA': 0x00A1FF,
      'U': 0x008FFF,
      'NP': 0x0080FF,
      'PU': 0x006BFF,
      'AM': 0x545CF2,
      'CM': 0x785CE3,
      'BK': 0x8A4FE3,
      'CF': 0xA136D4,
      'ES': 0xB31FD4,
      'FM': 0xB31FBA,
      'MD': 0xB30DA6,
      'NO': 0xBD0D87,
      'LR': 0xC70066,
      'RF': 0xCC0059,
      'DB': 0xD1004F,
      'SG': 0xD90045,
      'BH': 0xE00038,
      'HS': 0xE6002E,
      'MT': 0xEB0026,
      'DS': 0xFFFFFF,
      'RG': 0xFFFFFF,
      'CN': 0xFFFFFF,
      'UUT': 0xFFFFFF,
      'FL': 0xFFFFFF,
      'UUP': 0xFFFFFF,
      'LV': 0xFFFFFF,
      'UUH': 0xFFFFFF,
      'D': 0xFFFFC0,
      'T': 0xFFFFA0
  };
  var DefaultElementColor = 0xFFFFFF;
  /**
   * Color by element
   */
  var ElementColormaker = /*@__PURE__*/(function (Colormaker) {
      function ElementColormaker(params) {
          params.value = defaults(params.value, ElementColors.C);
          Colormaker.call(this, params);
      }

      if ( Colormaker ) ElementColormaker.__proto__ = Colormaker;
      ElementColormaker.prototype = Object.create( Colormaker && Colormaker.prototype );
      ElementColormaker.prototype.constructor = ElementColormaker;
      ElementColormaker.prototype.atomColor = function atomColor (a) {
          var element = a.element;
          if (element === 'C') {
              return this.parameters.value;
          }
          else {
              return ElementColors[element] || DefaultElementColor;
          }
      };

      return ElementColormaker;
  }(Colormaker));
  __decorate([
      manageColor
  ], ElementColormaker.prototype, "atomColor", null);
  ColormakerRegistry.add('element', ElementColormaker);

  /**
   * @file Entityindex Colormaker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Color by entity index
   */
  var EntityindexColormaker = /*@__PURE__*/(function (Colormaker) {
      function EntityindexColormaker(params) {
          Colormaker.call(this, params);
          if (!params.scale) {
              this.parameters.scale = 'Spectral';
          }
          if (!params.domain) {
              this.parameters.domain = [0, params.structure.entityList.length - 1];
          }
          this.entityindexScale = this.getScale();
      }

      if ( Colormaker ) EntityindexColormaker.__proto__ = Colormaker;
      EntityindexColormaker.prototype = Object.create( Colormaker && Colormaker.prototype );
      EntityindexColormaker.prototype.constructor = EntityindexColormaker;
      EntityindexColormaker.prototype.atomColor = function atomColor (a) {
          return this.entityindexScale(a.entityIndex);
      };

      return EntityindexColormaker;
  }(Colormaker));
  __decorate([
      manageColor
  ], EntityindexColormaker.prototype, "atomColor", null);
  ColormakerRegistry.add('entityindex', EntityindexColormaker);

  /**
   * @file Entitytype Colormaker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Color by entity type
   */
  var EntitytypeColormaker = /*@__PURE__*/(function (Colormaker) {
      function EntitytypeColormaker () {
          Colormaker.apply(this, arguments);
      }

      if ( Colormaker ) EntitytypeColormaker.__proto__ = Colormaker;
      EntitytypeColormaker.prototype = Object.create( Colormaker && Colormaker.prototype );
      EntitytypeColormaker.prototype.constructor = EntitytypeColormaker;

      EntitytypeColormaker.prototype.atomColor = function atomColor (a) {
          var e = a.entity;
          var et = e ? e.entityType : undefined;
          switch (et) {
              case PolymerEntity:
                  return 0x7fc97f;
              case NonPolymerEntity:
                  return 0xfdc086;
              case MacrolideEntity:
                  return 0xbeaed4;
              case WaterEntity:
                  return 0x386cb0;
              default:
                  return 0xffff99;
          }
      };

      return EntitytypeColormaker;
  }(Colormaker));
  __decorate([
      manageColor
  ], EntitytypeColormaker.prototype, "atomColor", null);
  ColormakerRegistry.add('entitytype', EntitytypeColormaker);

  /**
   * @file Geoquality Colormaker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Color by validation gometry quality
   */
  var GeoqualityColormaker = /*@__PURE__*/(function (Colormaker) {
      function GeoqualityColormaker(params) {
          Colormaker.call(this, params);
          this.geoAtomDict = {};
          this.geoDict = {};
          var val = params.structure.validation;
          if (val) {
              this.geoAtomDict = val.geoAtomDict;
              this.geoDict = val.geoDict;
          }
      }

      if ( Colormaker ) GeoqualityColormaker.__proto__ = Colormaker;
      GeoqualityColormaker.prototype = Object.create( Colormaker && Colormaker.prototype );
      GeoqualityColormaker.prototype.constructor = GeoqualityColormaker;
      GeoqualityColormaker.prototype.atomColor = function atomColor (atom) {
          var sele = atom.resno + '';
          if (atom.inscode)
              { sele += '^' + atom.inscode; }
          if (atom.chainname)
              { sele += ':' + atom.chainname; }
          sele += '/' + atom.modelIndex;
          var geoProblemCount;
          var geoAtom = this.geoAtomDict[sele];
          if (geoAtom !== undefined) {
              var atomProblems = geoAtom[atom.atomname] || 0;
              geoProblemCount = countSetBits(atomProblems);
          }
          else {
              geoProblemCount = this.geoDict[sele] || 0;
          }
          if (geoProblemCount === 0) {
              return 0x2166ac;
          }
          else if (geoProblemCount === 1) {
              return 0xfee08b;
          }
          else if (geoProblemCount === 2) {
              return 0xf46d43;
          }
          else if (geoProblemCount >= 3) {
              return 0xa50026;
          }
          return 0x909090;
      };

      return GeoqualityColormaker;
  }(Colormaker));
  __decorate([
      manageColor
  ], GeoqualityColormaker.prototype, "atomColor", null);
  ColormakerRegistry.add('geoquality', GeoqualityColormaker);

  /**
   * @file Hydrophobicity Colormaker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Color by hydrophobicity
   */
  var HydrophobicityColormaker = /*@__PURE__*/(function (Colormaker) {
      function HydrophobicityColormaker(params) {
          Colormaker.call(this, params);
          this.resHF = {};
          if (!params.scale) {
              this.parameters.scale = 'RdYlGn';
          }
          var idx = 0; // 0: DGwif, 1: DGwoct, 2: Oct-IF
          for (var name in ResidueHydrophobicity) {
              this.resHF[name] = ResidueHydrophobicity[name][idx];
          }
          this.defaultResidueHydrophobicity = DefaultResidueHydrophobicity[idx];
          if (!params.domain) {
              var min = Infinity;
              var max = -Infinity;
              for (var name$1 in this.resHF) {
                  var val = this.resHF[name$1];
                  min = Math.min(min, val);
                  max = Math.max(max, val);
              }
              this.parameters.domain = [min, 0, max];
          }
          this.hfScale = this.getScale();
      }

      if ( Colormaker ) HydrophobicityColormaker.__proto__ = Colormaker;
      HydrophobicityColormaker.prototype = Object.create( Colormaker && Colormaker.prototype );
      HydrophobicityColormaker.prototype.constructor = HydrophobicityColormaker;
      HydrophobicityColormaker.prototype.atomColor = function atomColor (a) {
          return this.hfScale(this.resHF[a.resname] || this.defaultResidueHydrophobicity);
      };

      return HydrophobicityColormaker;
  }(Colormaker));
  __decorate([
      manageColor
  ], HydrophobicityColormaker.prototype, "atomColor", null);
  ColormakerRegistry.add('hydrophobicity', HydrophobicityColormaker);

  /**
   * @file Modelindex Colormaker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Color by model index
   */
  var ModelindexColormaker = /*@__PURE__*/(function (Colormaker) {
      function ModelindexColormaker(params) {
          Colormaker.call(this, params);
          if (!params.scale) {
              this.parameters.scale = 'rainbow';
          }
          if (!params.domain) {
              this.parameters.domain = [0, params.structure.modelStore.count];
          }
          this.modelindexScale = this.getScale();
      }

      if ( Colormaker ) ModelindexColormaker.__proto__ = Colormaker;
      ModelindexColormaker.prototype = Object.create( Colormaker && Colormaker.prototype );
      ModelindexColormaker.prototype.constructor = ModelindexColormaker;
      ModelindexColormaker.prototype.atomColor = function atomColor (a) {
          return this.modelindexScale(a.modelIndex);
      };

      return ModelindexColormaker;
  }(Colormaker));
  __decorate([
      manageColor
  ], ModelindexColormaker.prototype, "atomColor", null);
  ColormakerRegistry.add('modelindex', ModelindexColormaker);

  /**
   * @file Moleculetype Colormaker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Color by molecule type
   */
  var MoleculetypeColormaker = /*@__PURE__*/(function (Colormaker) {
      function MoleculetypeColormaker () {
          Colormaker.apply(this, arguments);
      }

      if ( Colormaker ) MoleculetypeColormaker.__proto__ = Colormaker;
      MoleculetypeColormaker.prototype = Object.create( Colormaker && Colormaker.prototype );
      MoleculetypeColormaker.prototype.constructor = MoleculetypeColormaker;

      MoleculetypeColormaker.prototype.atomColor = function atomColor (a) {
          switch (a.residueType.moleculeType) {
              case WaterType:
                  return 0x386cb0;
              case IonType:
                  return 0xf0027f;
              case ProteinType:
                  return 0xbeaed4;
              case RnaType:
                  return 0xfdc086;
              case DnaType:
                  return 0xbf5b17;
              case SaccharideType:
                  return 0x7fc97f;
              default:
                  return 0xffff99;
          }
      };

      return MoleculetypeColormaker;
  }(Colormaker));
  __decorate([
      manageColor
  ], MoleculetypeColormaker.prototype, "atomColor", null);
  ColormakerRegistry.add('moleculetype', MoleculetypeColormaker);

  /**
   * @file Occupancy Colormaker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Color by occupancy
   */
  var OccupancyColormaker = /*@__PURE__*/(function (Colormaker) {
      function OccupancyColormaker(params) {
          Colormaker.call(this, params);
          if (!params.scale) {
              this.parameters.scale = 'PuBu';
          }
          if (!params.domain) {
              this.parameters.domain = [0.0, 1.0];
          }
          this.occupancyScale = this.getScale();
      }

      if ( Colormaker ) OccupancyColormaker.__proto__ = Colormaker;
      OccupancyColormaker.prototype = Object.create( Colormaker && Colormaker.prototype );
      OccupancyColormaker.prototype.constructor = OccupancyColormaker;
      OccupancyColormaker.prototype.atomColor = function atomColor (a) {
          return this.occupancyScale(a.occupancy);
      };

      return OccupancyColormaker;
  }(Colormaker));
  __decorate([
      manageColor
  ], OccupancyColormaker.prototype, "atomColor", null);
  ColormakerRegistry.add('occupancy', OccupancyColormaker);

  /**
   * @file Partialcharge Colormaker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Color by partial charge. The {@link AtomProxy.partialCharge} property is used for coloring.
   * The default domain is [-1, 1].
   *
   * __Name:__ _partialCharge_
   *
   * @example
   * stage.loadFile("rcsb://1crn").then(function (o) {
   *   o.addRepresentation("ball+stick", {colorScheme: "partialCharge"});
   *   o.autoView();
   * });
   */
  var PartialchargeColormaker = /*@__PURE__*/(function (Colormaker) {
      function PartialchargeColormaker(params) {
          Colormaker.call(this, params);
          if (!params.scale) {
              this.parameters.scale = 'rwb';
          }
          if (!params.domain) {
              this.parameters.domain = [-1, 1];
          }
          this.partialchargeScale = this.getScale();
      }

      if ( Colormaker ) PartialchargeColormaker.__proto__ = Colormaker;
      PartialchargeColormaker.prototype = Object.create( Colormaker && Colormaker.prototype );
      PartialchargeColormaker.prototype.constructor = PartialchargeColormaker;
      PartialchargeColormaker.prototype.atomColor = function atomColor (a) {
          return this.partialchargeScale(a.partialCharge || 0);
      };

      return PartialchargeColormaker;
  }(Colormaker));
  __decorate([
      manageColor
  ], PartialchargeColormaker.prototype, "atomColor", null);
  ColormakerRegistry.add('partialcharge', PartialchargeColormaker);

  /**
   * @file Random Colormaker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function randomColor() {
      return Math.random() * 0xFFFFFF;
  }
  /**
   * Class by random color
   */
  var RandomColormaker = /*@__PURE__*/(function (Colormaker) {
      function RandomColormaker () {
          Colormaker.apply(this, arguments);
      }

      if ( Colormaker ) RandomColormaker.__proto__ = Colormaker;
      RandomColormaker.prototype = Object.create( Colormaker && Colormaker.prototype );
      RandomColormaker.prototype.constructor = RandomColormaker;

      RandomColormaker.prototype.atomColor = function atomColor () {
          return randomColor();
      };
      /**
       * get color for volume cell
       * @return {Integer} random hex color
       */
      RandomColormaker.prototype.volumeColor = function volumeColor () {
          return randomColor();
      };
      /**
       * get color for coordinates in space
       * @return {Integer} random hex color
       */
      RandomColormaker.prototype.positionColor = function positionColor () {
          return randomColor();
      };

      return RandomColormaker;
  }(Colormaker));
  __decorate([
      manageColor
  ], RandomColormaker.prototype, "atomColor", null);
  __decorate([
      manageColor
  ], RandomColormaker.prototype, "volumeColor", null);
  __decorate([
      manageColor
  ], RandomColormaker.prototype, "positionColor", null);
  ColormakerRegistry.add('random', RandomColormaker);

  /**
   * @file Randomcoilindex Colormaker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Color by random coil index
   */
  var RandomcoilindexColormaker = /*@__PURE__*/(function (Colormaker) {
      function RandomcoilindexColormaker(params) {
          Colormaker.call(this, params);
          this.rciDict = {};
          if (!params.scale) {
              this.parameters.scale = 'RdYlBu';
          }
          this.rciScale = this.getScale({ domain: [0.6, 0] });
          var val = params.structure.validation;
          if (val)
              { this.rciDict = val.rciDict; }
      }

      if ( Colormaker ) RandomcoilindexColormaker.__proto__ = Colormaker;
      RandomcoilindexColormaker.prototype = Object.create( Colormaker && Colormaker.prototype );
      RandomcoilindexColormaker.prototype.constructor = RandomcoilindexColormaker;
      RandomcoilindexColormaker.prototype.atomColor = function atomColor (atom) {
          var sele = "[" + (atom.resname) + "]" + (atom.resno);
          if (atom.chainname)
              { sele += ':' + atom.chainname; }
          var rci = this.rciDict[sele];
          return rci !== undefined ? this.rciScale(rci) : 0x909090;
      };

      return RandomcoilindexColormaker;
  }(Colormaker));
  __decorate([
      manageColor
  ], RandomcoilindexColormaker.prototype, "atomColor", null);
  ColormakerRegistry.add('randomcoilindex', RandomcoilindexColormaker);

  /**
   * @file Residueindex Colormaker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Color by residue index
   */
  var ResidueindexColormaker = /*@__PURE__*/(function (Colormaker) {
      function ResidueindexColormaker(params) {
          var this$1$1 = this;

          Colormaker.call(this, params);
          this.scalePerChain = {};
          if (!params.scale) {
              this.parameters.scale = 'rainbow';
              this.parameters.reverse = defaults(params.reverse, true);
          }
          params.structure.eachChain(function (cp) {
              this$1$1.parameters.domain = [cp.residueOffset, cp.residueEnd];
              this$1$1.scalePerChain[cp.index] = this$1$1.getScale();
          });
      }

      if ( Colormaker ) ResidueindexColormaker.__proto__ = Colormaker;
      ResidueindexColormaker.prototype = Object.create( Colormaker && Colormaker.prototype );
      ResidueindexColormaker.prototype.constructor = ResidueindexColormaker;
      ResidueindexColormaker.prototype.atomColor = function atomColor (a) {
          return this.scalePerChain[a.chainIndex](a.residueIndex);
      };

      return ResidueindexColormaker;
  }(Colormaker));
  __decorate([
      manageColor
  ], ResidueindexColormaker.prototype, "atomColor", null);
  ColormakerRegistry.add('residueindex', ResidueindexColormaker);

  /**
   * @file Resname Colormaker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  // protein colors from Jmol http://jmol.sourceforge.net/jscolors/
  var ResidueColors = {
      'ALA': 0x8CFF8C,
      'ARG': 0x00007C,
      'ASN': 0xFF7C70,
      'ASP': 0xA00042,
      'CYS': 0xFFFF70,
      'GLN': 0xFF4C4C,
      'GLU': 0x660000,
      'GLY': 0xFFFFFF,
      'HIS': 0x7070FF,
      'ILE': 0x004C00,
      'LEU': 0x455E45,
      'LYS': 0x4747B8,
      'MET': 0xB8A042,
      'PHE': 0x534C52,
      'PRO': 0x525252,
      'SER': 0xFF7042,
      'THR': 0xB84C00,
      'TRP': 0x4F4600,
      'TYR': 0x8C704C,
      'VAL': 0xFF8CFF,
      'ASX': 0xFF00FF,
      'GLX': 0xFF00FF,
      'ASH': 0xFF00FF,
      'GLH': 0xFF00FF,
      'A': 0xDC143C,
      'G': 0x32CD32,
      'I': 0x9ACD32,
      'X': 0x7CFC00,
      'C': 0xFFD700,
      'T': 0x4169E1,
      'U': 0x40E0D0,
      'D': 0x008B8B,
      'DA': 0xDC143C,
      'DG': 0x32CD32,
      'DI': 0x9ACD32,
      'DX': 0x7CFC00,
      'DC': 0xFFD700,
      'DT': 0x4169E1,
      'DU': 0x40E0D0,
      'DD': 0x008B8B
  };
  var DefaultResidueColor = 0xFF00FF;
  /**
   * Color by residue name
   */
  var ResnameColormaker = /*@__PURE__*/(function (Colormaker) {
      function ResnameColormaker () {
          Colormaker.apply(this, arguments);
      }

      if ( Colormaker ) ResnameColormaker.__proto__ = Colormaker;
      ResnameColormaker.prototype = Object.create( Colormaker && Colormaker.prototype );
      ResnameColormaker.prototype.constructor = ResnameColormaker;

      ResnameColormaker.prototype.atomColor = function atomColor (a) {
          return ResidueColors[a.resname] || DefaultResidueColor;
      };

      return ResnameColormaker;
  }(Colormaker));
  __decorate([
      manageColor
  ], ResnameColormaker.prototype, "atomColor", null);
  ColormakerRegistry.add('resname', ResnameColormaker);

  /**
   * @file Sstruc Colormaker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  // from Jmol http://jmol.sourceforge.net/jscolors/ (shapely)
  var StructureColors = {
      'alphaHelix': 0xFF0080,
      'threeTenHelix': 0xA00080,
      'piHelix': 0x600080,
      'betaStrand': 0xFFC800,
      'betaTurn': 0x6080FF,
      'coil': 0xFFFFFF,
      'dna': 0xAE00FE,
      'rna': 0xFD0162,
      'carbohydrate': 0xA6A6FA
  };
  var DefaultStructureColor = 0x808080;
  /**
   * Color by secondary structure
   */
  var SstrucColormaker = /*@__PURE__*/(function (Colormaker) {
      function SstrucColormaker(params) {
          Colormaker.call(this, params);
          this.residueProxy = params.structure.getResidueProxy();
      }

      if ( Colormaker ) SstrucColormaker.__proto__ = Colormaker;
      SstrucColormaker.prototype = Object.create( Colormaker && Colormaker.prototype );
      SstrucColormaker.prototype.constructor = SstrucColormaker;
      SstrucColormaker.prototype.atomColor = function atomColor (ap) {
          var sstruc = ap.sstruc;
          var rp = this.residueProxy;
          if (sstruc === 'h') {
              return StructureColors.alphaHelix;
          }
          else if (sstruc === 'g') {
              return StructureColors.threeTenHelix;
          }
          else if (sstruc === 'i') {
              return StructureColors.piHelix;
          }
          else if (sstruc === 'e' || sstruc === 'b') {
              return StructureColors.betaStrand;
          }
          else if (sstruc === 't') {
              return StructureColors.betaTurn;
          }
          else {
              rp.index = ap.residueIndex;
              if (rp.isDna()) {
                  return StructureColors.dna;
              }
              else if (rp.isRna()) {
                  return StructureColors.rna;
              }
              else if (rp.isSaccharide()) {
                  return StructureColors.carbohydrate;
              }
              else if (rp.isProtein() || sstruc === 's' || sstruc === 'l') {
                  return StructureColors.coil;
              }
              else {
                  return DefaultStructureColor;
              }
          }
      };

      return SstrucColormaker;
  }(Colormaker));
  __decorate([
      manageColor
  ], SstrucColormaker.prototype, "atomColor", null);
  ColormakerRegistry.add('sstruc', SstrucColormaker);

  /**
   * @file Colordata Colormaker
   * @author Fred Ludlow <fred.ludlow@gmail.com>
   * @private
   */
  var StructuredataColormaker = /*@__PURE__*/(function (Colormaker) {
      function StructuredataColormaker(params) {
          var _a, _b;
          Colormaker.call(this, params);
          if (!params.scale) {
              this.parameters.scale = 'rwb';
          }
          this.atomData = (_a = this.parameters.data) === null || _a === void 0 ? void 0 : _a.atomData;
          this.bondData = (_b = this.parameters.data) === null || _b === void 0 ? void 0 : _b.bondData;
          this.scale = this.getScale(this.parameters);
      }

      if ( Colormaker ) StructuredataColormaker.__proto__ = Colormaker;
      StructuredataColormaker.prototype = Object.create( Colormaker && Colormaker.prototype );
      StructuredataColormaker.prototype.constructor = StructuredataColormaker;
      StructuredataColormaker.prototype.atomColor = function atomColor (a) {
          var _a;
          var val = (_a = this.atomData) === null || _a === void 0 ? void 0 : _a[a.index];
          return (val !== undefined) ? this.scale(val) : this.parameters.value;
      };
      StructuredataColormaker.prototype.bondColor = function bondColor (bond, fromTo) {
          var _a;
          var val = (_a = this.bondData) === null || _a === void 0 ? void 0 : _a[bond.index];
          // Explicit bond data?
          if (val !== undefined)
              { return this.scale(val); }
          if (this.atomProxy) {
              this.atomProxy.index = fromTo ? bond.atomIndex1 : bond.atomIndex2;
              return this.atomColor(this.atomProxy);
          }
          // Fallback
          return this.parameters.value;
      };

      return StructuredataColormaker;
  }(Colormaker));
  __decorate([
      manageColor
  ], StructuredataColormaker.prototype, "atomColor", null);
  __decorate([
      manageColor
  ], StructuredataColormaker.prototype, "bondColor", null);
  ColormakerRegistry.add('structuredata', StructuredataColormaker);

  /**
   * @file Uniform Colormaker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Color by uniform color
   */
  var UniformColormaker = /*@__PURE__*/(function (Colormaker) {
      function UniformColormaker () {
          Colormaker.apply(this, arguments);
      }

      if ( Colormaker ) UniformColormaker.__proto__ = Colormaker;
      UniformColormaker.prototype = Object.create( Colormaker && Colormaker.prototype );
      UniformColormaker.prototype.constructor = UniformColormaker;

      UniformColormaker.prototype.atomColor = function atomColor () {
          return this.parameters.value;
      };
      UniformColormaker.prototype.bondColor = function bondColor () {
          return this.parameters.value;
      };
      UniformColormaker.prototype.valueColor = function valueColor () {
          return this.parameters.value;
      };
      UniformColormaker.prototype.volumeColor = function volumeColor () {
          return this.parameters.value;
      };

      return UniformColormaker;
  }(Colormaker));
  __decorate([
      manageColor
  ], UniformColormaker.prototype, "atomColor", null);
  __decorate([
      manageColor
  ], UniformColormaker.prototype, "bondColor", null);
  __decorate([
      manageColor
  ], UniformColormaker.prototype, "valueColor", null);
  __decorate([
      manageColor
  ], UniformColormaker.prototype, "volumeColor", null);
  ColormakerRegistry.add('uniform', UniformColormaker);

  /**
   * @file Value Colormaker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Color by volume value
   */
  var ValueColormaker = /*@__PURE__*/(function (Colormaker) {
      function ValueColormaker(params) {
          Colormaker.call(this, params);
          this.valueScale = this.getScale();
      }

      if ( Colormaker ) ValueColormaker.__proto__ = Colormaker;
      ValueColormaker.prototype = Object.create( Colormaker && Colormaker.prototype );
      ValueColormaker.prototype.constructor = ValueColormaker;
      /**
       * return the color for a volume cell
       * @param  {Integer} index - volume cell index
       * @return {Integer} hex cell color
       */
      ValueColormaker.prototype.volumeColor = function volumeColor (index) {
          return this.valueScale(this.parameters.volume.data[index]); // TODO
      };

      return ValueColormaker;
  }(Colormaker));
  __decorate([
      manageColor
  ], ValueColormaker.prototype, "volumeColor", null);
  ColormakerRegistry.add('value', ValueColormaker);

  /**
   * @file Volume Colormaker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Color by volume position
   */
  var VolumeColormaker = /*@__PURE__*/(function (Colormaker) {
      function VolumeColormaker(params) {
          Colormaker.call(this, params);
          this.vec = new Vector3();
          this.valueScale = this.getScale();
      }

      if ( Colormaker ) VolumeColormaker.__proto__ = Colormaker;
      VolumeColormaker.prototype = Object.create( Colormaker && Colormaker.prototype );
      VolumeColormaker.prototype.constructor = VolumeColormaker;
      /**
       * return the color for coordinates in space
       * @param  {Vector3} coords - xyz coordinates
       * @return {Integer} hex coords color
       */
      VolumeColormaker.prototype.positionColor = function positionColor (coords) {
          var volume = this.parameters.volume; // TODO
          if (!volume || !volume.inverseMatrix) {
              return this.parameters.value;
          }
          var vec = this.vec;
          var data = volume.data;
          var nx = volume.nx;
          var ny = volume.ny;
          var nxy = nx * ny;
          vec.copy(coords);
          vec.applyMatrix4(volume.inverseMatrix);
          // position of grid cell
          var x0 = Math.floor(vec.x);
          var y0 = Math.floor(vec.y);
          var z0 = Math.floor(vec.z);
          // Indices
          var i = ((((z0 * ny) + y0) * nx) + x0);
          var i1 = i + 1;
          var iy = i + nx;
          var iz = i + nxy;
          var i1y = iy + 1;
          var i1z = iz + 1;
          var iyz = iy + nxy;
          var i1yz = iyz + 1;
          // Values
          var v = data[i];
          var v1 = data[i1];
          var vy = data[iy];
          var vz = data[iz];
          var v1y = data[i1y];
          var v1z = data[i1z];
          var vyz = data[iyz];
          var v1yz = data[i1yz];
          // Position of point in fraction of grid
          var xd = vec.x - x0;
          var yd = vec.y - y0;
          var zd = vec.z - z0;
          // 1st Dimension
          var c00 = lerp(v, v1, xd);
          var c01 = lerp(vz, v1z, xd);
          var c10 = lerp(vy, v1y, xd);
          var c11 = lerp(vyz, v1yz, xd);
          // 2nd Dimension
          var c0 = lerp(c00, c10, yd);
          var c1 = lerp(c01, c11, yd);
          // 3rd Dimension
          var c = lerp(c0, c1, zd);
          return this.valueScale(c);
      };

      return VolumeColormaker;
  }(Colormaker));
  __decorate([
      manageColor
  ], VolumeColormaker.prototype, "positionColor", null);
  ColormakerRegistry.add('volume', VolumeColormaker);

  /**
   * @file Structure Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Structure representation
   * @interface
   */
  var StructureRepresentation = /*@__PURE__*/(function (Representation) {
      function StructureRepresentation(structure, viewer, params) {
          var p = params || {};
          Representation.call(this, structure, viewer, p);
          this.type = 'structure';
          this.parameters = Object.assign({
              radiusType: {
                  type: 'select', options: RadiusFactory.types
              },
              radiusData: {
                  type: 'hidden'
              },
              radiusSize: {
                  type: 'number', precision: 3, max: 10.0, min: 0.001
              },
              radiusScale: {
                  type: 'number', precision: 3, max: 10.0, min: 0.001
              },
              assembly: null,
              defaultAssembly: {
                  type: 'hidden'
              }
          }, this.parameters);
          /**
           * @type {Selection}
           * @private
           */
          this.selection = new Selection(p.sele);
          /**
           * @type {Array}
           * @private
           */
          this.dataList = [];
          /**
           * @type {Structure}
           */
          this.structure = structure;
          /**
           * @type {StructureView}
           */
          this.structureView = this.structure.getView(this.selection);
          if (structure.biomolDict) {
              var biomolOptions = {
                  'default': 'default',
                  '': (structure.unitcell ? 'AU' : 'FULL')
              };
              Object.keys(structure.biomolDict).forEach(function (k) {
                  biomolOptions[k] = k;
              });
              this.parameters.assembly = {
                  type: 'select',
                  options: biomolOptions,
                  rebuild: true
              };
          }
          else {
              this.parameters.assembly = null;
          }
      }

      if ( Representation ) StructureRepresentation.__proto__ = Representation;
      StructureRepresentation.prototype = Object.create( Representation && Representation.prototype );
      StructureRepresentation.prototype.constructor = StructureRepresentation;

      var prototypeAccessors = { defaultScale: { configurable: true } };
      prototypeAccessors.defaultScale.get = function () {
          return {
              'vdw': 1.0,
              'covalent': 1.0,
              'bfactor': 0.01,
              'sstruc': 1.0
          };
      };
      StructureRepresentation.prototype.init = function init (params) {
          var this$1$1 = this;

          var p = params || {};
          p.colorScheme = defaults(p.colorScheme, 'element');
          this.setRadius(p.radius, p);
          this.radiusType = defaults(p.radiusType, 'vdw');
          this.radiusData = defaults(p.radiusData, {});
          this.radiusSize = defaults(p.radiusSize, 1.0);
          this.radiusScale = defaults(p.radiusScale, 1.0);
          this.assembly = defaults(p.assembly, 'default');
          this.defaultAssembly = defaults(p.defaultAssembly, '');
          if (p.quality === 'auto') {
              p.quality = this.getQuality();
          }
          Representation.prototype.init.call(this, p);
          this.selection.signals.stringChanged.add(function ( /* sele */) {
              this$1$1.build();
          });
          this.build();
      };
      StructureRepresentation.prototype.setRadius = function setRadius (value, p) {
          var types = Object.keys(RadiusFactoryTypes);
          if (typeof value === 'string' && types.includes(value.toLowerCase())) {
              p.radiusType = value;
          }
          else if (value !== undefined) {
              p.radiusType = 'size';
              p.radiusSize = value;
          }
          return this;
      };
      StructureRepresentation.prototype.getAssembly = function getAssembly () {
          var name = this.assembly === 'default' ? this.defaultAssembly : this.assembly;
          return this.structure.biomolDict[name];
      };
      StructureRepresentation.prototype.getQuality = function getQuality () {
          var atomCount;
          var s = this.structureView;
          var assembly = this.getAssembly();
          if (assembly) {
              atomCount = assembly.getAtomCount(s);
          }
          else {
              atomCount = s.atomCount;
          }
          if (Mobile) {
              atomCount *= 4;
          }
          var backboneOnly = s.atomStore.count / s.residueStore.count < 2;
          if (backboneOnly) {
              atomCount *= 10;
          }
          if (atomCount < 15000) {
              return 'high';
          }
          else if (atomCount < 80000) {
              return 'medium';
          }
          else {
              return 'low';
          }
      };
      StructureRepresentation.prototype.create = function create () {
          var this$1$1 = this;

          if (this.structureView.atomCount === 0)
              { return; }
          if (!this.structureView.hasCoords()) {
              this.needsBuild = true;
              return;
          }
          else {
              this.needsBuild = false;
          }
          var assembly = this.getAssembly();
          if (assembly) {
              assembly.partList.forEach(function (part, i) {
                  var sview = part.getView(this$1$1.structureView);
                  if (sview.atomCount === 0)
                      { return; }
                  var data = this$1$1.createData(sview, i);
                  if (data) {
                      data.sview = sview;
                      data.instanceList = part.getInstanceList();
                      this$1$1.dataList.push(data);
                  }
              });
          }
          else {
              var data = this.createData(this.structureView, 0);
              if (data) {
                  data.sview = this.structureView;
                  this.dataList.push(data);
              }
          }
      };
      StructureRepresentation.prototype.update = function update (what) {
          var this$1$1 = this;

          if (this.lazy && !this.visible) {
              Object.assign(this.lazyProps.what, what);
              return;
          }
          if (this.needsBuild) {
              this.build();
              return;
          }
          this.dataList.forEach(function (data) {
              if (data.bufferList.length > 0) {
                  this$1$1.updateData(what, data);
              }
          }, this);
      };
      StructureRepresentation.prototype.updateData = function updateData (what, data) {
          this.build();
      };
      StructureRepresentation.prototype.getColorParams = function getColorParams () {
          return Object.assign(Object.assign({}, Representation.prototype.getColorParams.call(this)), { structure: this.structure });
      };
      StructureRepresentation.prototype.getRadiusParams = function getRadiusParams (param) {
          return {
              type: this.radiusType,
              scale: this.radiusScale,
              size: this.radiusSize,
              data: this.radiusData
          };
      };
      StructureRepresentation.prototype.getAtomParams = function getAtomParams (what, params) {
          return Object.assign({
              what: what,
              colorParams: this.getColorParams(),
              radiusParams: this.getRadiusParams()
          }, params);
      };
      StructureRepresentation.prototype.getBondParams = function getBondParams (what, params) {
          return Object.assign({
              what: what,
              colorParams: this.getColorParams(),
              radiusParams: this.getRadiusParams()
          }, params);
      };
      StructureRepresentation.prototype.getAtomRadius = function getAtomRadius (atom) {
          if (this.structureView.atomSet.isSet(atom.index)) {
              var radiusFactory = new RadiusFactory(this.getRadiusParams());
              return radiusFactory.atomRadius(atom);
          }
          return 0;
      };
      /**
       * Set representation parameters
       * @alias StructureRepresentation#setSelection
       * @param {String} string - selection string, see {@tutorial selection-language}
       * @param {Boolean} [silent] - don't trigger a change event in the selection
       * @return {StructureRepresentation} this object
       */
      StructureRepresentation.prototype.setSelection = function setSelection (string, silent) {
          this.selection.setString(string, silent);
          return this;
      };
      /**
       * Set representation parameters
       * @alias StructureRepresentation#setParameters
       * @param {StructureRepresentationParameters} params - structure parameter object
       * @param {Object} [what] - buffer data attributes to be updated,
       *                        note that this needs to be implemented in the
       *                        derived classes. Generally it allows more
       *                        fine-grained control over updating than
       *                        forcing a rebuild.
       * @param {Boolean} what.position - update position data
       * @param {Boolean} what.color - update color data
       * @param {Boolean} [rebuild] - whether or not to rebuild the representation
       * @return {StructureRepresentation} this object
       */
      StructureRepresentation.prototype.setParameters = function setParameters (params, what, rebuild) {
          if ( what === void 0 ) what = {};
          if ( rebuild === void 0 ) rebuild = false;

          var p = params || {};
          this.setRadius(p.radius, p);
          if (p.radiusType !== undefined || p.radiusData !== undefined || p.radiusSize !== undefined || p.radiusScale !== undefined) {
              what.radius = true;
              if (!ExtensionFragDepth || this.disableImpostor) {
                  rebuild = true;
              }
          }
          if (p.defaultAssembly !== undefined &&
              p.defaultAssembly !== this.defaultAssembly &&
              ((this.assembly === 'default' && p.assembly === undefined) ||
                  p.assembly === 'default')) {
              rebuild = true;
          }
          Representation.prototype.setParameters.call(this, p, what, rebuild);
          return this;
      };
      StructureRepresentation.prototype.getParameters = function getParameters () {
          var params = Object.assign(Representation.prototype.getParameters.call(this), {
              sele: this.selection ? this.selection.string : undefined,
              defaultAssembly: this.defaultAssembly
          });
          return params;
      };
      StructureRepresentation.prototype.attach = function attach (callback) {
          var viewer = this.viewer;
          var bufferList = this.bufferList;
          this.dataList.forEach(function (data) {
              data.bufferList.forEach(function (buffer) {
                  bufferList.push(buffer);
                  viewer.add(buffer, data.instanceList);
              });
          });
          this.setVisibility(this.visible);
          callback();
      };
      StructureRepresentation.prototype.clear = function clear () {
          this.dataList.length = 0;
          Representation.prototype.clear.call(this);
      };
      StructureRepresentation.prototype.dispose = function dispose () {
          this.structureView.dispose();
          delete this.structure;
          delete this.structureView;
          Representation.prototype.dispose.call(this);
      };

      Object.defineProperties( StructureRepresentation.prototype, prototypeAccessors );

      return StructureRepresentation;
  }(Representation));

  /**
   * @file Measurement Representation
   * @author Fred Ludlow <fred.ludlow@gmail.com>
   * @private
   */
  /**
   * Measurement representation
   * @interface
   */
  var MeasurementRepresentation = /*@__PURE__*/(function (StructureRepresentation) {
      function MeasurementRepresentation(structure, viewer, params) {
          StructureRepresentation.call(this, structure, viewer, params);
          this.n = 0; // Subclass create sets value
          this.parameters = Object.assign({
              labelVisible: {
                  type: 'boolean'
              },
              labelSize: {
                  type: 'number', precision: 3, max: 10.0, min: 0.001
              },
              labelColor: {
                  type: 'color'
              },
              labelFontFamily: {
                  type: 'select',
                  options: {
                      'sans-serif': 'sans-serif',
                      'monospace': 'monospace',
                      'serif': 'serif'
                  },
                  buffer: 'fontFamily'
              },
              labelFontStyle: {
                  type: 'select',
                  options: {
                      'normal': 'normal',
                      'italic': 'italic'
                  },
                  buffer: 'fontStyle'
              },
              labelFontWeight: {
                  type: 'select',
                  options: {
                      'normal': 'normal',
                      'bold': 'bold'
                  },
                  buffer: 'fontWeight'
              },
              labelsdf: {
                  type: 'boolean', buffer: 'sdf'
              },
              labelXOffset: {
                  type: 'number', precision: 1, max: 20, min: -20, buffer: 'xOffset'
              },
              labelYOffset: {
                  type: 'number', precision: 1, max: 20, min: -20, buffer: 'yOffset'
              },
              labelZOffset: {
                  type: 'number', precision: 1, max: 20, min: -20, buffer: 'zOffset'
              },
              labelAttachment: {
                  type: 'select',
                  options: {
                      'bottom-left': 'bottom-left',
                      'bottom-center': 'bottom-center',
                      'bottom-right': 'bottom-right',
                      'middle-left': 'middle-left',
                      'middle-center': 'middle-center',
                      'middle-right': 'middle-right',
                      'top-left': 'top-left',
                      'top-center': 'top-center',
                      'top-right': 'top-right'
                  },
                  rebuild: true
              },
              labelBorder: {
                  type: 'boolean', buffer: 'showBorder'
              },
              labelBorderColor: {
                  type: 'color', buffer: 'borderColor'
              },
              labelBorderWidth: {
                  type: 'number', precision: 2, max: 0.3, min: 0, buffer: 'borderWidth'
              },
              labelBackground: {
                  type: 'boolean', rebuild: true
              },
              labelBackgroundColor: {
                  type: 'color', buffer: 'backgroundColor'
              },
              labelBackgroundMargin: {
                  type: 'number', precision: 2, max: 2, min: 0, rebuild: true
              },
              labelBackgroundOpacity: {
                  type: 'range', step: 0.01, max: 1, min: 0, buffer: 'backgroundOpacity'
              },
              labelFixedSize: {
                  type: 'boolean', buffer: 'fixedSize'
              },
              lineOpacity: {
                  type: 'range', min: 0.0, max: 1.0, step: 0.01
              },
              linewidth: {
                  type: 'integer', max: 50, min: 1, buffer: true
              }
          }, this.parameters, {
              flatShaded: null
          });
      }

      if ( StructureRepresentation ) MeasurementRepresentation.__proto__ = StructureRepresentation;
      MeasurementRepresentation.prototype = Object.create( StructureRepresentation && StructureRepresentation.prototype );
      MeasurementRepresentation.prototype.constructor = MeasurementRepresentation;
      MeasurementRepresentation.prototype.init = function init (params) {
          var p = params || {};
          this.labelVisible = defaults(p.labelVisible, true);
          this.labelSize = defaults(p.labelSize, 2.0);
          this.labelColor = defaults(p.labelColor, 0xFFFFFF);
          this.labelFontFamily = defaults(p.labelFontFamily, 'sans-serif');
          this.labelFontStyle = defaults(p.labelFontstyle, 'normal');
          this.labelFontWeight = defaults(p.labelFontWeight, 'bold');
          this.labelsdf = defaults(p.labelsdf, Browser === 'Chrome');
          this.labelXOffset = defaults(p.labelXOffset, 0.0);
          this.labelYOffset = defaults(p.labelYOffset, 0.0);
          this.labelZOffset = defaults(p.labelZOffset, 0.5);
          this.labelAttachment = defaults(p.labelAttachment, 'bottom-left');
          this.labelBorder = defaults(p.labelBorder, false);
          this.labelBorderColor = defaults(p.labelBorderColor, 'lightgrey');
          this.labelBorderWidth = defaults(p.labelBorderWidth, 0.15);
          this.labelBackground = defaults(p.labelBackground, false);
          this.labelBackgroundColor = defaults(p.labelBackgroundColor, 'lightgrey');
          this.labelBackgroundMargin = defaults(p.labelBackgroundMargin, 0.5);
          this.labelBackgroundOpacity = defaults(p.labelBackgroundOpacity, 1.0);
          this.labelFixedSize = defaults(p.labelFixedSize, false);
          this.lineOpacity = defaults(p.lineOpacity, 1.0);
          this.linewidth = defaults(p.linewidth, 2);
          StructureRepresentation.prototype.init.call(this, p);
      };
      // All measurements need to rebuild on position change
      MeasurementRepresentation.prototype.update = function update (what) {
          if (what.position) {
              this.build();
          }
          else {
              StructureRepresentation.prototype.update.call(this, what);
          }
      };
      MeasurementRepresentation.prototype.updateData = function updateData (what, data) {
          var textData = {};
          if (!what || what.labelSize) {
              Object.assign(textData, { size: uniformArray(this.n, this.labelSize) });
          }
          if (!what || what.labelColor) {
              var c = new Color(this.labelColor);
              Object.assign(textData, { color: uniformArray3(this.n, c.r, c.g, c.b) });
          }
          this.textBuffer.setAttributes(textData);
      };
      MeasurementRepresentation.prototype.setParameters = function setParameters (params, what, rebuild) {
          if ( what === void 0 ) what = {};
          if ( rebuild === void 0 ) rebuild = false;

          if (params && params.labelSize) {
              what.labelSize = true;
          }
          if (params && (params.labelColor || params.labelColor === 0x000000)) {
              what.labelColor = true;
              rebuild = true;
          }
          StructureRepresentation.prototype.setParameters.call(this, params, what, rebuild);
          if (params && params.opacity !== undefined) {
              this.textBuffer.setParameters({ opacity: 1.0 }); // only opaque labels
          }
          if (params && params.labelVisible !== undefined) {
              this.setVisibility(this.visible);
          }
          return this;
      };
      MeasurementRepresentation.prototype.setVisibility = function setVisibility (value, noRenderRequest) {
          StructureRepresentation.prototype.setVisibility.call(this, value, true);
          if (this.textBuffer) {
              this.textBuffer.setVisibility(this.labelVisible && this.visible);
          }
          if (!noRenderRequest)
              { this.viewer.requestRender(); }
          return this;
      };
      MeasurementRepresentation.prototype.getLabelBufferParams = function getLabelBufferParams (params) {
          if ( params === void 0 ) params = {};

          return StructureRepresentation.prototype.getBufferParams.call(this, Object.assign({
              fontFamily: this.labelFontFamily,
              fontStyle: this.labelFontStyle,
              fontWeight: this.labelFontWeight,
              sdf: this.labelsdf,
              xOffset: this.labelXOffset,
              yOffset: this.labelYOffset,
              zOffset: this.labelZOffset,
              attachment: this.labelAttachment,
              showBorder: this.labelBorder,
              borderColor: this.labelBorderColor,
              borderWidth: this.labelBorderWidth,
              showBackground: this.labelBackground,
              backgroundColor: this.labelBackgroundColor,
              backgroundMargin: this.labelBackgroundMargin,
              backgroundOpacity: this.labelBackgroundOpacity,
              fixedSize: this.labelFixedSize,
              disablePicking: true,
              visible: this.labelVisible
          }, params, {
              opacity: 1.0 // only opaque labels
          }));
      };
      MeasurementRepresentation.prototype.getAtomRadius = function getAtomRadius () {
          return 0;
      };

      return MeasurementRepresentation;
  }(StructureRepresentation));
  /**
   * MeasurementRepresentations take atom[Pair|Triple|Quad] parameters.
   *
   * Parses nested array of either integer atom indices or selection
   * expressions into a flat array of coordinates.
   *
   * @param  {Structure} sview The structure to which the atoms refer
   * @param  {Array} atoms Nested array of atom pairs|triples|quads as
   *   Integer indices or selection expressions
   * @return {Float32Array} Flattened array of position coordinates
   */
  function parseNestedAtoms(sview, atoms) {
      var ap = sview.getAtomProxy();
      var sele = new Selection();
      var nSets = atoms.length;
      if (nSets === 0)
          { return new Float32Array(0); }
      // Peek-ahead at first item to determine order and parse mode
      var order = atoms[0].length;
      var selected = sview.getAtomSet();
      var a = new Float32Array(nSets * order * 3);
      var p = 0;
      atoms.forEach(function (group) {
          var _break = false;
          for (var j = 0; j < order; j++) {
              var value = group[j];
              if (typeof (value) === 'number' && Number.isInteger(value)) {
                  if (selected.get(value)) {
                      ap.index = value;
                  }
                  else {
                      _break = true;
                      break;
                  }
              }
              else {
                  sele.setString(value);
                  var atomIndices = sview.getAtomIndices(sele);
                  if (atomIndices.length) {
                      ap.index = atomIndices[0];
                  }
                  else {
                      _break = true;
                      break;
                  }
              }
              var offset = p + j * 3;
              a[offset++] = ap.x;
              a[offset++] = ap.y;
              a[offset++] = ap.z;
          }
          if (!_break)
              { p += 3 * order; }
      });
      return a.subarray(0, p);
  }
  /* out = v1 * cos(angle) + v2 * sin(angle) */
  function calcArcPoint(out, center, v1, v2, angle) {
      var x = Math.cos(angle);
      var y = Math.sin(angle);
      out[0] = center[0] + v1[0] * x + v2[0] * y;
      out[1] = center[1] + v1[1] * x + v2[1] * y;
      out[2] = center[2] + v1[2] * x + v2[2] * y;
  }

  ShaderRegistry.add('shader/SDFFont.vert', "uniform float clipNear;\nuniform float clipRadius;\nuniform vec3 clipCenter;\nuniform float xOffset;\nuniform float yOffset;\nuniform float zOffset;\nuniform bool ortho;\nuniform float canvasHeight;\nuniform float pixelRatio;\n#if defined( NEAR_CLIP ) || defined( RADIUS_CLIP ) || ( !defined( PICKING ) && !defined( NOLIGHT ) )\nvarying vec3 vViewPosition;\n#endif\nvarying vec2 texCoord;\n#if defined( RADIUS_CLIP )\nvarying vec3 vClipCenter;\n#endif\n#if defined( PICKING )\n#include unpack_color\nattribute float primitiveId;\nvarying vec3 vPickingColor;\n#else\n#include color_pars_vertex\n#endif\nattribute vec2 mapping;\nattribute vec2 inputTexCoord;\nattribute float inputSize;\n#include matrix_scale\n#include common\nvoid main(void){\n#if defined( PICKING )\nvPickingColor = unpackColor( primitiveId );\n#else\n#include color_vertex\n#endif\ntexCoord = inputTexCoord;\nfloat scale = matrixScale( modelViewMatrix );\nfloat _xOffset = xOffset * scale;\nfloat _yOffset = yOffset * scale;\nfloat _zOffset = zOffset * scale;\nif( texCoord.x == 10.0 ){\n_zOffset -= 0.001;\n}\nvec4 cameraPos = modelViewMatrix * vec4( position, 1.0 );\n#ifdef FIXED_SIZE\nif ( ortho ) {\nscale /= pixelRatio * (( canvasHeight / 2.0 ) / -cameraPosition.z) * 0.1;\n} else {\nscale /= pixelRatio * (( canvasHeight / 2.0 ) / -cameraPos.z) * 0.1;\n}\n#endif\nvec4 cameraCornerPos = vec4( cameraPos.xyz, 1.0 );\ncameraCornerPos.xy += mapping * inputSize * 0.01 * scale;\ncameraCornerPos.x += _xOffset;\ncameraCornerPos.y += _yOffset;\nif( ortho ){\ncameraCornerPos.xyz += normalize( -cameraPosition ) * _zOffset;\n} else {\ncameraCornerPos.xyz += normalize( -cameraCornerPos.xyz ) * _zOffset;\n}\ngl_Position = projectionMatrix * cameraCornerPos;\n#if defined( NEAR_CLIP ) || defined( RADIUS_CLIP ) || ( !defined( PICKING ) && !defined( NOLIGHT ) )\nvViewPosition = -cameraCornerPos.xyz;\n#endif\n#if defined( RADIUS_CLIP )\nvClipCenter = -( modelViewMatrix * vec4( clipCenter, 1.0 ) ).xyz;\n#endif\n#include nearclip_vertex\n#include radiusclip_vertex\n}");

  ShaderRegistry.add('shader/SDFFont.frag', "uniform sampler2D fontTexture;\nuniform float opacity;\nuniform bool showBorder;\nuniform vec3 borderColor;\nuniform float borderWidth;\nuniform vec3 backgroundColor;\nuniform float backgroundOpacity;\nuniform float clipNear;\nuniform float clipRadius;\nvarying vec3 vViewPosition;\nvarying vec2 texCoord;\n#if defined( RADIUS_CLIP )\nvarying vec3 vClipCenter;\n#endif\n#if defined( PICKING )\nuniform float objectId;\nvarying vec3 vPickingColor;\nconst vec3 vColor = vec3( 0.0 );\n#else\n#include common\n#include color_pars_fragment\n#include fog_pars_fragment\n#endif\nconst float gamma = 2.2 * 1.4142 / 128.0;\nconst float padding = 0.75;\nvoid main(){\n#include nearclip_fragment\n#include radiusclip_fragment\nif( texCoord.x > 1.0 ){\ngl_FragColor = vec4( backgroundColor, backgroundOpacity );\n}else{\nfloat sdf = texture2D( fontTexture, texCoord ).a;\nif( showBorder ) sdf += borderWidth;\nfloat a = smoothstep(padding - gamma, padding + gamma, sdf);\nif( a < 0.2 ) discard;\na *= opacity;\nvec3 outgoingLight = vColor;\nif( showBorder && sdf < ( padding + borderWidth ) ){\noutgoingLight = borderColor;\n}\ngl_FragColor = vec4( outgoingLight, a );\n}\n#if defined( PICKING )\nif( opacity < 0.3 )\ndiscard;\ngl_FragColor = vec4( vPickingColor, objectId );\n#else\n#include premultiplied_alpha_fragment\n#include tonemapping_fragment\n#include encodings_fragment\n#include fog_fragment\n#endif\n}");

  /**
   * @file Edt
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  // 2D Euclidean distance transform by Felzenszwalb & Huttenlocher https://cs.brown.edu/~pff/papers/dt-final.pdf
  function edt(data, width, height, f, d, v, z) {
      for (var x = 0; x < width; x++) {
          for (var y = 0; y < height; y++) {
              f[y] = data[y * width + x];
          }
          edt1d(f, d, v, z, height);
          for (var y$1 = 0; y$1 < height; y$1++) {
              data[y$1 * width + x] = d[y$1];
          }
      }
      for (var y$2 = 0; y$2 < height; y$2++) {
          for (var x$1 = 0; x$1 < width; x$1++) {
              f[x$1] = data[y$2 * width + x$1];
          }
          edt1d(f, d, v, z, width);
          for (var x$2 = 0; x$2 < width; x$2++) {
              data[y$2 * width + x$2] = Math.sqrt(d[x$2]);
          }
      }
  }
  // 1D squared distance transform
  function edt1d(f, d, v, z, n) {
      v[0] = 0;
      z[0] = Number.MIN_SAFE_INTEGER;
      z[1] = Number.MAX_SAFE_INTEGER;
      for (var q = 1, k = 0; q < n; q++) {
          var s = ((f[q] + q * q) - (f[v[k]] + v[k] * v[k])) / (2 * q - 2 * v[k]);
          while (s <= z[k]) {
              k--;
              s = ((f[q] + q * q) - (f[v[k]] + v[k] * v[k])) / (2 * q - 2 * v[k]);
          }
          k++;
          v[k] = q;
          z[k] = s;
          z[k + 1] = Number.MAX_SAFE_INTEGER;
      }
      for (var q$1 = 0, k$1 = 0; q$1 < n; q$1++) {
          while (z[k$1 + 1] < q$1)
              { k$1++; }
          d[q$1] = (q$1 - v[k$1]) * (q$1 - v[k$1]) + f[v[k$1]];
      }
  }

  /**
   * @file Text Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var TextAtlasCache = {};
  function getTextAtlas(params) {
      var hash = JSON.stringify(params);
      if (TextAtlasCache[hash] === undefined) {
          TextAtlasCache[hash] = new TextAtlas(params);
      }
      return TextAtlasCache[hash];
  }
  var TextAtlasDefaultParams = {
      font: 'sans-serif',
      size: 36,
      style: 'normal',
      variant: 'normal',
      weight: 'normal',
      outline: 3,
      width: 1024,
      height: 1024
  };
  var TextAtlas = function TextAtlas(params) {
      if ( params === void 0 ) params = {};

      this.gamma = 1;
      this.mapped = {};
      this.scratchW = 0;
      this.scratchH = 0;
      this.currentX = 0;
      this.currentY = 0;
      this.cutoff = 0.25;
      this.parameters = createParams(params, TextAtlasDefaultParams);
      var p = this.parameters;
      this.radius = p.size / 8;
      this.padding = p.size / 3;
      // Prepare line-height with room for outline and descenders/ascenders
      var lineHeight = this.lineHeight = p.size + 2 * p.outline + Math.round(p.size / 4);
      var maxWidth = this.maxWidth = p.width / 4;
      // Prepare scratch canvas
      var canvas = this.canvas = document.createElement('canvas');
      canvas.width = maxWidth;
      canvas.height = lineHeight;
      var ctx = this.context = this.canvas.getContext('2d');
      ctx.font = (p.style) + " " + (p.variant) + " " + (p.weight) + " " + (p.size) + "px " + (p.font);
      ctx.fillStyle = 'black';
      ctx.textAlign = 'left';
      ctx.textBaseline = 'bottom';
      ctx.lineJoin = 'round';
      // temporary arrays for the distance transform
      this.gridOuter = new Float64Array(lineHeight * maxWidth);
      this.gridInner = new Float64Array(lineHeight * maxWidth);
      this.f = new Float64Array(Math.max(lineHeight, maxWidth));
      this.d = new Float64Array(Math.max(lineHeight, maxWidth));
      this.z = new Float64Array(Math.max(lineHeight, maxWidth) + 1);
      this.v = new Int16Array(Math.max(lineHeight, maxWidth));
      //
      this.data = new Uint8Array(p.width * p.height * 4);
      this.canvas2 = document.createElement('canvas');
      this.canvas2.width = p.width;
      this.canvas2.height = p.height;
      this.context2 = this.canvas2.getContext('2d');
      // Replacement Character
      this.placeholder = this.map(String.fromCharCode(0xFFFD));
      // Basic Latin (subset)
      for (var i = 0x0020; i <= 0x007E; ++i) {
          this.map(String.fromCharCode(i));
      }
      // TODO: to slow to always prepare them
      // // Latin-1 Supplement (subset)
      // for (let i = 0x00A1; i <= 0x00FF; ++i) {
      //   this.map(String.fromCharCode(i))
      // }
      // Degree sign
      this.map(String.fromCharCode(0x00B0));
      // // Greek and Coptic (subset)
      // for (let i = 0x0391; i <= 0x03C9; ++i) {
      //   this.map(String.fromCharCode(i))
      // }
      // // Cyrillic (subset)
      // for (let i = 0x0400; i <= 0x044F; ++i) {
      //   this.map(String.fromCharCode(i))
      // }
      // Angstrom Sign
      this.map(String.fromCharCode(0x212B));
      this.texture = new CanvasTexture(this.canvas2);
      this.texture.flipY = false;
      this.texture.needsUpdate = true;
  };
  TextAtlas.prototype.map = function map (text) {
      var p = this.parameters;
      if (this.mapped[text] === undefined) {
          this.draw(text);
          if (this.currentX + this.scratchW > p.width) {
              this.currentX = 0;
              this.currentY += this.scratchH;
          }
          if (this.currentY + this.scratchH > p.height) {
              console.warn('canvas to small');
          }
          this.mapped[text] = {
              x: this.currentX,
              y: this.currentY,
              w: this.scratchW,
              h: this.scratchH
          };
          this.context2.drawImage(this.canvas, 0, 0, this.scratchW, this.scratchH, this.currentX, this.currentY, this.scratchW, this.scratchH);
          this.currentX += this.scratchW;
      }
      return this.mapped[text];
  };
  TextAtlas.prototype.get = function get (text) {
      return this.mapped[text] || this.placeholder;
  };
  TextAtlas.prototype.draw = function draw (text) {
      var p = this.parameters;
      var h = this.lineHeight;
      var o = p.outline;
      var ctx = this.context;
      // const dst = this.scratch
      var max = this.maxWidth;
      // const colors = this.colors
      // Bottom aligned, take outline into account
      var x = o;
      var y = h - p.outline;
      // Measure text
      var m = ctx.measureText(text);
      var w = Math.min(max, Math.ceil(m.width + 2 * x + 1));
      var n = w * h;
      // Clear scratch area
      ctx.clearRect(0, 0, w, h);
      // Draw text
      ctx.fillText(text, x, y);
      var imageData = ctx.getImageData(0, 0, w, h);
      var data = imageData.data;
      for (var i = 0; i < n; i++) {
          var a = imageData.data[i * 4 + 3] / 255; // alpha value
          this.gridOuter[i] = a === 1 ? 0 : a === 0 ? Number.MAX_SAFE_INTEGER : Math.pow(Math.max(0, 0.5 - a), 2);
          this.gridInner[i] = a === 1 ? Number.MAX_SAFE_INTEGER : a === 0 ? 0 : Math.pow(Math.max(0, a - 0.5), 2);
      }
      edt(this.gridOuter, w, h, this.f, this.d, this.v, this.z);
      edt(this.gridInner, w, h, this.f, this.d, this.v, this.z);
      for (var i$1 = 0; i$1 < n; i$1++) {
          var d = this.gridOuter[i$1] - this.gridInner[i$1];
          data[i$1 * 4 + 3] = Math.max(0, Math.min(255, Math.round(255 - 255 * (d / this.radius + this.cutoff))));
      }
      ctx.putImageData(imageData, 0, 0);
      this.scratchW = w;
      this.scratchH = h;
  };
  var TextBufferDefaultParameters = Object.assign({
      fontFamily: 'sans-serif',
      fontStyle: 'normal',
      fontWeight: 'bold',
      fontSize: 36,
      xOffset: 0.0,
      yOffset: 0.0,
      zOffset: 0.5,
      attachment: 'bottom-left',
      showBorder: false,
      borderColor: 'lightgrey',
      borderWidth: 0.15,
      showBackground: false,
      backgroundColor: 'lightgrey',
      backgroundMargin: 0.5,
      backgroundOpacity: 1.0,
      forceTransparent: true,
      fixedSize: false
  }, BufferDefaultParameters);
  var TextBufferParameterTypes = Object.assign({
      fontFamily: { uniform: true },
      fontStyle: { uniform: true },
      fontWeight: { uniform: true },
      fontSize: { uniform: true },
      xOffset: { uniform: true },
      yOffset: { uniform: true },
      zOffset: { uniform: true },
      showBorder: { uniform: true },
      borderColor: { uniform: true },
      borderWidth: { uniform: true },
      backgroundColor: { uniform: true },
      backgroundOpacity: { uniform: true },
      fixedSize: { updateShader: true }
  }, BufferParameterTypes);
  function getCharCount(data, params) {
      var n = data.position.length / 3;
      var charCount = 0;
      for (var i = 0; i < n; ++i) {
          charCount += data.text[i].length;
      }
      if (params.showBackground)
          { charCount += n; }
      return charCount;
  }
  /**
   * Text buffer. Renders screen-aligned text strings.
   *
   * @example
   * var textBuffer = new TextBuffer({
   *   position: new Float32Array([ 0, 0, 0 ]),
   *   color: new Float32Array([ 1, 0, 0 ]),
   *   size: new Float32Array([ 2 ]),
   *   text: [ "Hello" ]
   * });
   */
  var TextBuffer = /*@__PURE__*/(function (MappedQuadBuffer) {
      function TextBuffer(data, params) {
          if ( params === void 0 ) params = {};

          MappedQuadBuffer.call(this, {
              position: new Float32Array(getCharCount(data, params) * 3),
              color: new Float32Array(getCharCount(data, params) * 3),
              picking: new IgnorePicker()
          }, params);
          this.parameterTypes = TextBufferParameterTypes;
          this.alwaysTransparent = true;
          this.hasWireframe = false;
          this.isText = true;
          this.vertexShader = 'SDFFont.vert';
          this.fragmentShader = 'SDFFont.frag';
          this.text = data.text;
          this.positionCount = data.position.length / 3;
          this.addUniforms({
              'fontTexture': { value: null },
              'xOffset': { value: this.parameters.xOffset },
              'yOffset': { value: this.parameters.yOffset },
              'zOffset': { value: this.parameters.zOffset },
              'ortho': { value: false },
              'showBorder': { value: this.parameters.showBorder },
              'borderColor': { value: new Color(this.parameters.borderColor) },
              'borderWidth': { value: this.parameters.borderWidth },
              'backgroundColor': { value: new Color(this.parameters.backgroundColor) },
              'backgroundOpacity': { value: this.parameters.backgroundOpacity },
              'canvasHeight': { value: 1.0 },
              'pixelRatio': { value: 1.0 }
          });
          this.addAttributes({
              'inputTexCoord': { type: 'v2', value: null },
              'inputSize': { type: 'f', value: null }
          });
          this.setAttributes(data);
          this.makeTexture();
          this.makeMapping();
      }

      if ( MappedQuadBuffer ) TextBuffer.__proto__ = MappedQuadBuffer;
      TextBuffer.prototype = Object.create( MappedQuadBuffer && MappedQuadBuffer.prototype );
      TextBuffer.prototype.constructor = TextBuffer;

      var prototypeAccessors = { defaultParameters: { configurable: true } };
      prototypeAccessors.defaultParameters.get = function () { return TextBufferDefaultParameters; };
      TextBuffer.prototype.makeMaterial = function makeMaterial () {
          MappedQuadBuffer.prototype.makeMaterial.call(this);
          var tex = this.texture;
          var m = this.material;
          m.transparent = true;
          m.extensions.derivatives = true;
          m.lights = false;
          m.uniforms.fontTexture.value = tex;
          m.needsUpdate = true;
          var wm = this.wireframeMaterial;
          wm.transparent = true;
          wm.extensions.derivatives = true;
          wm.lights = false;
          wm.uniforms.fontTexture.value = tex;
          wm.needsUpdate = true;
          var pm = this.pickingMaterial;
          pm.extensions.derivatives = true;
          pm.lights = false;
          pm.uniforms.fontTexture.value = tex;
          pm.needsUpdate = true;
      };
      TextBuffer.prototype.setAttributes = function setAttributes (data) {
          if ( data === void 0 ) data = {};

          var position, size, color;
          var aPosition, inputSize, aColor;
          var text = this.text;
          var attributes = this.geometry.attributes; // TODO
          if (data.position) {
              position = data.position;
              aPosition = attributes.position.array;
              attributes.position.needsUpdate = true;
          }
          if (data.size) {
              size = data.size;
              inputSize = attributes.inputSize.array;
              attributes.inputSize.needsUpdate = true;
          }
          if (data.color) {
              color = data.color;
              aColor = attributes.color.array;
              attributes.color.needsUpdate = true;
          }
          var n = this.positionCount;
          var j, o;
          var iCharAll = 0;
          var txt, iChar, nChar;
          for (var v = 0; v < n; ++v) {
              o = 3 * v;
              txt = text[v];
              nChar = txt.length;
              if (this.parameters.showBackground)
                  { nChar += 1; }
              for (iChar = 0; iChar < nChar; ++iChar, ++iCharAll) {
                  for (var m = 0; m < 4; m++) {
                      j = iCharAll * 4 * 3 + (3 * m);
                      if (position) {
                          aPosition[j] = position[o];
                          aPosition[j + 1] = position[o + 1];
                          aPosition[j + 2] = position[o + 2];
                      }
                      if (size) {
                          inputSize[(iCharAll * 4) + m] = size[v];
                      }
                      if (color) {
                          aColor[j] = color[o];
                          aColor[j + 1] = color[o + 1];
                          aColor[j + 2] = color[o + 2];
                      }
                  }
              }
          }
      };
      TextBuffer.prototype.makeTexture = function makeTexture () {
          this.textAtlas = getTextAtlas({
              font: this.parameters.fontFamily,
              style: this.parameters.fontStyle,
              weight: this.parameters.fontWeight,
              size: this.parameters.fontSize
          });
          this.texture = this.textAtlas.texture;
      };
      TextBuffer.prototype.makeMapping = function makeMapping () {
          var ta = this.textAtlas;
          var text = this.text;
          var attachment = this.parameters.attachment;
          var margin = (ta.lineHeight * this.parameters.backgroundMargin * 0.1) - 10;
          var attribs = this.geometry.attributes; // TODO
          var inputTexCoord = attribs.inputTexCoord.array;
          var inputMapping = attribs.mapping.array;
          var n = this.positionCount;
          var iCharAll = 0;
          var c, i, txt, xadvance, iChar, nChar, xShift, yShift;
          for (var v = 0; v < n; ++v) {
              txt = text[v];
              xadvance = 0;
              nChar = txt.length;
              // calculate width
              for (iChar = 0; iChar < nChar; ++iChar) {
                  c = ta.get(txt[iChar]);
                  xadvance += c.w - 2 * ta.parameters.outline;
              }
              // attachment
              if (attachment.startsWith('top')) {
                  yShift = ta.lineHeight / 1.25;
              }
              else if (attachment.startsWith('middle')) {
                  yShift = ta.lineHeight / 2.5;
              }
              else {
                  yShift = 0; // "bottom"
              }
              if (attachment.endsWith('right')) {
                  xShift = xadvance;
              }
              else if (attachment.endsWith('center')) {
                  xShift = xadvance / 2;
              }
              else {
                  xShift = 0; // "left"
              }
              xShift += ta.parameters.outline;
              yShift += ta.parameters.outline;
              // background
              if (this.parameters.showBackground) {
                  i = iCharAll * 2 * 4;
                  inputMapping[i + 0] = -ta.lineHeight / 6 - xShift - margin; // top left
                  inputMapping[i + 1] = ta.lineHeight - yShift + margin;
                  inputMapping[i + 2] = -ta.lineHeight / 6 - xShift - margin; // bottom left
                  inputMapping[i + 3] = 0 - yShift - margin;
                  inputMapping[i + 4] = xadvance + ta.lineHeight / 6 - xShift + 2 * ta.parameters.outline + margin; // top right
                  inputMapping[i + 5] = ta.lineHeight - yShift + margin;
                  inputMapping[i + 6] = xadvance + ta.lineHeight / 6 - xShift + 2 * ta.parameters.outline + margin; // bottom right
                  inputMapping[i + 7] = 0 - yShift - margin;
                  inputTexCoord[i + 0] = 10;
                  inputTexCoord[i + 2] = 10;
                  inputTexCoord[i + 4] = 10;
                  inputTexCoord[i + 6] = 10;
                  iCharAll += 1;
              }
              xadvance = 0;
              for (iChar = 0; iChar < nChar; ++iChar, ++iCharAll) {
                  c = ta.get(txt[iChar]);
                  i = iCharAll * 2 * 4;
                  inputMapping[i + 0] = xadvance - xShift; // top left
                  inputMapping[i + 1] = c.h - yShift;
                  inputMapping[i + 2] = xadvance - xShift; // bottom left
                  inputMapping[i + 3] = 0 - yShift;
                  inputMapping[i + 4] = xadvance + c.w - xShift; // top right
                  inputMapping[i + 5] = c.h - yShift;
                  inputMapping[i + 6] = xadvance + c.w - xShift; // bottom right
                  inputMapping[i + 7] = 0 - yShift;
                  var texWidth = ta.parameters.width;
                  var texHeight = ta.parameters.height;
                  var texCoords = [
                      c.x / texWidth, c.y / texHeight,
                      c.x / texWidth, (c.y + c.h) / texHeight,
                      (c.x + c.w) / texWidth, c.y / texHeight,
                      (c.x + c.w) / texWidth, (c.y + c.h) / texHeight // bottom right
                  ];
                  inputTexCoord.set(texCoords, i);
                  xadvance += c.w - 2 * ta.parameters.outline;
              }
          }
          attribs.inputTexCoord.needsUpdate = true;
          attribs.mapping.needsUpdate = true;
      };
      TextBuffer.prototype.getDefines = function getDefines (type) {
          var defines = MappedQuadBuffer.prototype.getDefines.call(this, type);
          if (this.parameters.fixedSize) {
              defines.FIXED_SIZE = 1;
          }
          return defines;
      };
      TextBuffer.prototype.setUniforms = function setUniforms (data) {
          if (data && (data.fontFamily !== undefined ||
              data.fontStyle !== undefined ||
              data.fontWeight !== undefined ||
              data.fontSize !== undefined)) {
              this.makeTexture();
              this.makeMapping();
              this.texture.needsUpdate = true;
              data.fontTexture = this.texture;
          }
          MappedQuadBuffer.prototype.setUniforms.call(this, data);
      };

      Object.defineProperties( TextBuffer.prototype, prototypeAccessors );

      return TextBuffer;
  }(MappedQuadBuffer));
  BufferRegistry.add('text', TextBuffer);

  ShaderRegistry.add('shader/WideLine.vert', "\nuniform float clipNear;\nuniform vec3 clipCenter;\nuniform float linewidth;\nuniform vec2 resolution;\nuniform mat4 projectionMatrixInverse;\nattribute vec2 mapping;\nattribute vec3 position1;\nattribute vec3 position2;\n#ifdef PICKING\n#include unpack_color\nattribute float primitiveId;\nvarying vec3 vPickingColor;\n#else\nattribute vec3 color2;\nvarying vec3 vColor;\nvarying vec3 vColor2;\nvarying float flag;\nvarying vec3 vViewPosition;\n#endif\n#if defined( RADIUS_CLIP )\nvarying vec3 vClipCenter;\n#endif\nvoid trimSegment( const in vec4 start, inout vec4 end ) {\nfloat a = projectionMatrix[ 2 ][ 2 ]; float b = projectionMatrix[ 3 ][ 2 ]; float nearEstimate = - 0.5 * b / a;\nfloat alpha = ( nearEstimate - start.z ) / ( end.z - start.z );\nend.xyz = mix( start.xyz, end.xyz, alpha );\n}\nvoid main() {\nfloat aspect = resolution.x / resolution.y;\n#ifdef PICKING\nvPickingColor = unpackColor( primitiveId );\n#else\nflag = mapping.y;\nvColor = color;\nvColor2 = color2;\n#endif\nvec4 start = modelViewMatrix * vec4( position1, 1.0 );\nvec4 end = modelViewMatrix * vec4( position2, 1.0 );\nbool perspective = ( projectionMatrix[ 2 ][ 3 ] == -1.0 ); if ( perspective ) {\nif ( start.z < 0.0 && end.z >= 0.0 ) {\ntrimSegment( start, end );\n} else if ( end.z < 0.0 && start.z >= 0.0 ) {\ntrimSegment( end, start );\n}\n}\nvec4 clipStart = projectionMatrix * start;\nvec4 clipEnd = projectionMatrix * end;\nvec2 ndcStart = clipStart.xy / clipStart.w;\nvec2 ndcEnd = clipEnd.xy / clipEnd.w;\nvec2 dir = ndcEnd - ndcStart;\ndir.x *= aspect;\ndir = normalize( dir );\nvec2 offset = vec2( dir.y, - dir.x );\ndir.x /= aspect;\noffset.x /= aspect;\nif ( mapping.x < 0.0 ) offset *= - 1.0;\noffset *= linewidth;\noffset /= resolution.y;\nvec4 clip = ( mapping.y < 0.5 ) ? clipStart : clipEnd;\noffset *= clip.w;\nclip.xy += offset;\ngl_Position = clip;\n#ifndef PICKING\nvViewPosition = ( projectionMatrixInverse * clip ).xyz;\n#endif\n#if defined( RADIUS_CLIP )\nvClipCenter = -( modelViewMatrix * vec4( clipCenter, 1.0 ) ).xyz;\n#endif\n#include nearclip_vertex\n}");

  ShaderRegistry.add('shader/WideLine.frag', "uniform vec3 diffuse;\nuniform float opacity;\nuniform float clipNear;\nuniform float clipRadius;\n#if defined( RADIUS_CLIP )\nvarying vec3 vClipCenter;\n#endif\n#ifdef PICKING\nuniform float objectId;\nvarying vec3 vPickingColor;\n#else\n#include common\n#include fog_pars_fragment\nvarying vec3 vViewPosition;\nvarying vec3 vColor;\nvarying vec3 vColor2;\nvarying float flag;\n#endif\nvoid main() {\n#include nearclip_fragment\n#include radiusclip_fragment\n#if defined( PICKING )\nif( opacity < 0.3 )\ndiscard;\ngl_FragColor = vec4( vPickingColor, objectId );\n#else\nvec3 outgoingLight = vec3( 0.0 );\nvec4 diffuseColor = vec4( diffuse, 1.0 );\nif ( flag < 0.0 ) {\ndiffuseColor.rgb *= vColor;\n} else {\ndiffuseColor.rgb *= vColor2;\n}\n#include alphatest_fragment\noutgoingLight = diffuseColor.rgb;\ngl_FragColor = vec4( outgoingLight, diffuseColor.a * opacity );\n#include premultiplied_alpha_fragment\n#include tonemapping_fragment\n#include encodings_fragment\n#include fog_fragment\n#endif\n}");

  /**
   * @file Wide Line Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var WideLineBufferDefaultParameters = Object.assign({
      linewidth: 2
  }, BufferDefaultParameters);
  var WideLineBufferParameterTypes = Object.assign({
      linewidth: { uniform: true }
  }, BufferParameterTypes);
  /**
   * Wide Line buffer. Draws lines with a fixed width in pixels.
   *
   * @example
   * var lineBuffer = new WideLineBuffer({
   *   position1: new Float32Array([ 0, 0, 0 ]),
   *   position2: new Float32Array([ 1, 1, 1 ]),
   *   color: new Float32Array([ 1, 0, 0 ]),
   *   color2: new Float32Array([ 0, 1, 0 ])
   * });
   */
  var WideLineBuffer = /*@__PURE__*/(function (MappedQuadBuffer) {
      function WideLineBuffer(data, params) {
          if ( params === void 0 ) params = {};

          MappedQuadBuffer.call(this, data, params);
          this.parameterTypes = WideLineBufferParameterTypes;
          this.vertexShader = 'WideLine.vert';
          this.fragmentShader = 'WideLine.frag';
          if (!data.color2 && data.color)
              { data.color2 = data.color; }
          this.addUniforms({
              'linewidth': { value: this.parameters.linewidth },
              'resolution': { value: new Vector2() },
              'projectionMatrixInverse': { value: new Matrix4() }
          });
          this.addAttributes({
              'position1': { type: 'v3', value: null },
              'position2': { type: 'v3', value: null },
              'color2': { type: 'c', value: null }
          });
          this.setAttributes(data);
          this.makeMapping();
      }

      if ( MappedQuadBuffer ) WideLineBuffer.__proto__ = MappedQuadBuffer;
      WideLineBuffer.prototype = Object.create( MappedQuadBuffer && MappedQuadBuffer.prototype );
      WideLineBuffer.prototype.constructor = WideLineBuffer;

      var prototypeAccessors = { defaultParameters: { configurable: true } };
      prototypeAccessors.defaultParameters.get = function () { return WideLineBufferDefaultParameters; };
      WideLineBuffer.prototype.setParameters = function setParameters (params) {
          MappedQuadBuffer.prototype.setParameters.call(this, params);
      };

      Object.defineProperties( WideLineBuffer.prototype, prototypeAccessors );

      return WideLineBuffer;
  }(MappedQuadBuffer));
  BufferRegistry.add('wideline', WideLineBuffer);

  /**
   * @file Angle Representation
   * @author Fred Ludlow <fred.ludlow@gmail.com>
   * @private
   */
  /**
   * Angle representation object
   *
   * Reperesentation consists of four parts, visibility can be set for each
   * label - the text label with the angle size
   * vectors - lines joining the three points
   * sector - triangles representing the angle
   * arc - line bordering the sector
   *
   * @param {Structure} structure - the structure to measure angles in
   * @param {Viewer} viewer - a viewer object
   * @param {AngleRepresentationParameters} params - angle representation parameters
   */
  var AngleRepresentation = /*@__PURE__*/(function (MeasurementRepresentation) {
      function AngleRepresentation(structure, viewer, params) {
          MeasurementRepresentation.call(this, structure, viewer, params);
          this.type = 'angle';
          this.parameters = Object.assign({
              atomTriple: {
                  type: 'hidden', rebuild: true
              },
              vectorVisible: {
                  type: 'boolean', default: true
              },
              arcVisible: {
                  type: 'boolean', default: true
              },
              sectorVisible: {
                  type: 'boolean', default: true
              }
          }, this.parameters);
          this.init(params);
      }

      if ( MeasurementRepresentation ) AngleRepresentation.__proto__ = MeasurementRepresentation;
      AngleRepresentation.prototype = Object.create( MeasurementRepresentation && MeasurementRepresentation.prototype );
      AngleRepresentation.prototype.constructor = AngleRepresentation;
      AngleRepresentation.prototype.init = function init (params) {
          var p = params || {};
          p.side = defaults(p.side, 'double');
          p.opacity = defaults(p.opacity, 0.5);
          this.atomTriple = defaults(p.atomTriple, []);
          this.arcVisible = defaults(p.arcVisible, true);
          this.sectorVisible = defaults(p.sectorVisible, true);
          this.vectorVisible = defaults(p.vectorVisible, true);
          MeasurementRepresentation.prototype.init.call(this, p);
      };
      AngleRepresentation.prototype.createData = function createData (sview) {
          if (!sview.atomCount || !this.atomTriple.length)
              { return; }
          var atomPosition = atomTriplePositions(sview, this.atomTriple);
          var angleData = getAngleData(atomPosition);
          var n = this.n = angleData.labelPosition.length / 3;
          var labelColor = new Color(this.labelColor);
          // Create buffers
          this.textBuffer = new TextBuffer({
              position: angleData.labelPosition,
              size: uniformArray(n, this.labelSize),
              color: uniformArray3(n, labelColor.r, labelColor.g, labelColor.b),
              text: angleData.labelText
          }, this.getLabelBufferParams());
          var c = new Color(this.colorValue);
          this.vectorBuffer = new WideLineBuffer(getFixedLengthWrappedDashData({
              position1: angleData.vectorPosition1,
              position2: angleData.vectorPosition2,
              color: uniformArray3(2 * n, c.r, c.g, c.b),
              color2: uniformArray3(2 * n, c.r, c.g, c.b)
          }), this.getBufferParams({
              linewidth: this.linewidth,
              visible: this.vectorVisible,
              opacity: this.lineOpacity
          }));
          this.arcLength = angleData.arcPosition1.length / 3;
          this.arcBuffer = new WideLineBuffer(getFixedLengthWrappedDashData({
              position1: angleData.arcPosition1,
              position2: angleData.arcPosition2,
              color: uniformArray3(this.arcLength, c.r, c.g, c.b),
              color2: uniformArray3(this.arcLength, c.r, c.g, c.b)
          }), this.getBufferParams({
              linewidth: this.linewidth,
              visible: this.arcVisible,
              opacity: this.lineOpacity
          }));
          this.sectorLength = angleData.sectorPosition.length / 3;
          this.sectorBuffer = new MeshBuffer({
              position: angleData.sectorPosition,
              color: uniformArray3(this.sectorLength, c.r, c.g, c.b)
          }, this.getBufferParams({
              visible: this.sectorVisible
          }));
          return {
              bufferList: [
                  this.textBuffer,
                  this.vectorBuffer,
                  this.arcBuffer,
                  this.sectorBuffer
              ]
          };
      };
      AngleRepresentation.prototype.updateData = function updateData (what, data) {
          MeasurementRepresentation.prototype.updateData.call(this, what, data);
          var vectorData = {};
          var arcData = {};
          var sectorData = {};
          if (what.color) {
              var c = new Color(this.colorValue);
              Object.assign(vectorData, {
                  color: uniformArray3(this.n * 2, c.r, c.g, c.b),
                  color2: uniformArray3(this.n * 2, c.r, c.g, c.b)
              });
              Object.assign(arcData, {
                  color: uniformArray3(this.arcLength, c.r, c.g, c.b),
                  color2: uniformArray3(this.arcLength, c.r, c.g, c.b)
              });
              Object.assign(sectorData, {
                  color: uniformArray3(this.sectorLength, c.r, c.g, c.b)
              });
          }
          // if (what.sectorOpacity) {
          //   this.sectorBuffer.opacity = what.sectorOpacity
          // }
          this.vectorBuffer.setAttributes(vectorData);
          this.arcBuffer.setAttributes(arcData);
          this.sectorBuffer.setAttributes(sectorData);
      };
      AngleRepresentation.prototype.setParameters = function setParameters (params) {
          var rebuild = false;
          var what = {};
          MeasurementRepresentation.prototype.setParameters.call(this, params, what, rebuild);
          if (params && (params.vectorVisible !== undefined ||
              params.arcVisible !== undefined ||
              params.sectorVisible !== undefined)) {
              this.setVisibility(this.visible);
          }
          if (params && params.lineOpacity) {
              this.vectorBuffer.setParameters({ opacity: params.lineOpacity });
              this.arcBuffer.setParameters({ opacity: params.lineOpacity });
          }
          if (params && params.opacity !== undefined) {
              this.vectorBuffer.setParameters({ opacity: this.lineOpacity });
              this.arcBuffer.setParameters({ opacity: this.lineOpacity });
          }
          if (params && params.linewidth) {
              this.vectorBuffer.setParameters({ linewidth: params.linewidth });
              this.arcBuffer.setParameters({ linewidth: params.linewidth });
          }
          return this;
      };
      AngleRepresentation.prototype.setVisibility = function setVisibility (value, noRenderRequest) {
          MeasurementRepresentation.prototype.setVisibility.call(this, value, true);
          if (this.vectorBuffer) {
              this.vectorBuffer.setVisibility(this.vectorVisible && this.visible);
          }
          if (this.arcBuffer) {
              this.arcBuffer.setVisibility(this.arcVisible && this.visible);
          }
          if (this.sectorBuffer) {
              this.sectorBuffer.setVisibility(this.sectorVisible && this.visible);
          }
          if (!noRenderRequest)
              { this.viewer.requestRender(); }
          return this;
      };

      return AngleRepresentation;
  }(MeasurementRepresentation));
  /**
   * Ensure mid point does not coincide with first or second
   * @param  {Float32Array} position 9*nAngle array of coordinates
   * @return {Float32Array}          Filtered position array, may be shorter
   */
  function validatePositions(position) {
      var include = [];
      var n = position.length / 9;
      for (var i = 0; i < n; i++) {
          // Check that first point not same as second and that second not same as third
          var okay = true;
          for (var j = i; j < i + 3; j += 3) {
              if (position[j] === position[j + 3] &&
                  position[j + 1] === position[j + 4] &&
                  position[j + 2] === position[j + 5]) {
                  okay = false;
              }
          }
          if (okay)
              { include.push(i); }
      }
      var outPosition = new Float32Array(include.length * 9);
      var outIdx = 0;
      include.forEach(function (i) {
          copyArray(position, outPosition, i * 9, outIdx * 9, 9);
          outIdx++;
      });
      return outPosition;
  }
  function atomTriplePositions(sview, atomTriple) {
      return validatePositions(parseNestedAtoms(sview, atomTriple));
  }
  /**
   * Converts triple positions into data required to build various buffers.
   */
  function getAngleData(position, params) {
      if ( params === void 0 ) params = {};

      var angleStep = defaults(params.angleStep, Math.PI / 90);
      var n = position.length / 9;
      var angles = new Float32Array(n);
      var labelPosition = new Float32Array(n * 3);
      var labelText = new Array(n);
      var vectorPosition1 = new Float32Array(n * 6); // Two lines per angle
      var vectorPosition2 = new Float32Array(n * 6);
      var arcPositionTmp1 = new Array(n); // Start points for arc lines
      var arcPositionTmp2 = new Array(n); // End points for arc lines
      var sectorPositionTmp = new Array(n); // Triangle points
      var totalSegments = 0;
      // Re-used vectors etc
      var p1 = v3new(); // Positions of points for each angel
      var p2 = v3new();
      var p3 = v3new();
      var v21 = v3new(); // Vectors
      var v23 = v3new();
      var cross = v3new(); // Cross product v21xv23
      var cross2 = v3new(); // In-plane cross product v21 x (v21 x v23)
      var labelTmp = v3new();
      var arcPoint = v3new();
      var loop = function ( i ) {
          var p = 9 * i;
          v3fromArray(p1, position, p);
          v3fromArray(p2, position, p + 3);
          v3fromArray(p3, position, p + 6);
          var v = 6 * i;
          v3toArray(p1, vectorPosition1, v);
          v3toArray(p2, vectorPosition2, v);
          v3toArray(p2, vectorPosition1, v + 3);
          v3toArray(p3, vectorPosition2, v + 3);
          v3sub(v21, p1, p2);
          v3sub(v23, p3, p2);
          v3normalize(v21, v21); // validatePositions ensures valid
          v3normalize(v23, v23);
          v3cross(cross, v21, v23);
          var crossLength = v3length(cross);
          var dot = v3dot(v21, v23);
          var angle = angles[i] = Math.atan2(crossLength, dot);
          labelText[i] = (RAD2DEG * angle).toFixed(1) + String.fromCharCode(0x00B0);
          if (v3length(cross) === 0.0) {
              // Angle exactly 0/180, pick an arbitrary direction
              cross[0] = 1.0;
              cross[1] = 0.0;
              cross[2] = 0.0;
          }
          v3cross(cross2, cross, v21);
          v3normalize(cross2, cross2);
          calcArcPoint(labelTmp, p2, v21, cross2, angle / 2.0);
          // TODO: Scale label position?
          v3toArray(labelTmp, labelPosition, 3 * i);
          // Build the arc and sector
          var nSegments = Math.ceil(angle / angleStep);
          var sectorVertices = new Float32Array(nSegments * 9);
          sectorPositionTmp[i] = sectorVertices;
          var arcVertices1 = new Float32Array(nSegments * 3);
          var arcVertices2 = new Float32Array(nSegments * 3);
          arcPositionTmp1[i] = arcVertices1;
          arcPositionTmp2[i] = arcVertices2;
          v3add(arcPoint, p2, v21); // Our initial arc point
          var appendArcSection = function (a, j) {
              var si = j * 9;
              var ai = j * 3;
              v3toArray(p2, sectorVertices, si);
              v3toArray(arcPoint, sectorVertices, si + 3);
              v3toArray(arcPoint, arcVertices1, ai);
              calcArcPoint(arcPoint, p2, v21, cross2, a);
              v3toArray(arcPoint, sectorVertices, si + 6);
              v3toArray(arcPoint, arcVertices2, ai);
          };
          var j = 0;
          for (var a = angleStep; a < angle; a += angleStep) {
              appendArcSection(a, j);
              j++;
          }
          appendArcSection(angle, j);
          totalSegments += nSegments;
      };

      for (var i = 0; i < n; i++) loop( i );
      // Flatten nested arrays of arc/segment points
      var arcSize = totalSegments * 3;
      var sectorSize = totalSegments * 9;
      var arcPosition1 = new Float32Array(arcSize);
      var arcPosition2 = new Float32Array(arcSize);
      var sectorPosition = new Float32Array(sectorSize);
      var sectorOffset = 0;
      var arcOffset = 0;
      for (var i$1 = 0; i$1 < n; i$1++) {
          var ap1 = arcPositionTmp1[i$1];
          var ap2 = arcPositionTmp2[i$1];
          copyArray(ap1, arcPosition1, 0, arcOffset, ap1.length);
          copyArray(ap2, arcPosition2, 0, arcOffset, ap2.length);
          arcOffset += ap1.length; // === ap2.length
          var sp = sectorPositionTmp[i$1];
          copyArray(sp, sectorPosition, 0, sectorOffset, sp.length);
          sectorOffset += sp.length;
      }
      return {
          labelPosition: labelPosition,
          labelText: labelText,
          vectorPosition1: vectorPosition1,
          vectorPosition2: vectorPosition2,
          arcPosition1: arcPosition1,
          arcPosition2: arcPosition2,
          sectorPosition: sectorPosition
      };
  }
  RepresentationRegistry.add('angle', AngleRepresentation);

  /**
   * @file Cylinder Geometry Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var scale$6 = new Vector3();
  var eye$6 = new Vector3();
  var target$6 = new Vector3();
  var up$6 = new Vector3(0, 1, 0);
  var CylinderGeometryBufferDefaultParameters = Object.assign({
      radialSegments: 1,
      openEnded: true
  }, BufferDefaultParameters);
  function getData$1(data, params) {
      if ( params === void 0 ) params = {};

      var geo = getGeo$1(params);
      var n = data.position1.length;
      var geoLength = geo.attributes.position.array.length / 3;
      var count = n / 3;
      var primitiveId = new Float32Array(count * 2 * geoLength);
      serialBlockArray(count, geoLength, 0, primitiveId);
      serialBlockArray(count, geoLength, count * geoLength, primitiveId);
      var position = new Float32Array(n * 2);
      var color = new Float32Array(n * 2);
      return {
          position: position, color: color, primitiveId: primitiveId, picking: data.picking
      };
  }
  function getGeo$1(params) {
      if ( params === void 0 ) params = {};

      var radialSegments = defaults(params.radialSegments, 10);
      var openEnded = defaults(params.openEnded, true);
      var matrix = new Matrix4().makeRotationX(Math.PI / 2);
      var geo = new CylinderBufferGeometry(1, // radiusTop,
      1, // radiusBottom,
      1, // height,
      radialSegments, // radialSegments,
      1, // heightSegments,
      openEnded // openEnded
      );
      geo.applyMatrix4(matrix);
      return geo;
  }
  /**
   * Cylinder geometry buffer.
   *
   * @example
   * var cylinderGeometryBuffer = new CylinderGeometryBuffer({
   *   position1: new Float32Array([ 0, 0, 0 ]),
   *   position2: new Float32Array([ 1, 1, 1 ]),
   *   color: new Float32Array([ 1, 0, 0 ]),
   *   color2: new Float32Array([ 0, 1, 0 ]),
   *   radius: new Float32Array([ 1 ])
   * });
   */
  var CylinderGeometryBuffer = /*@__PURE__*/(function (GeometryBuffer) {
      function CylinderGeometryBuffer(data, params) {
          if ( params === void 0 ) params = {};

          GeometryBuffer.call(this, getData$1(data, params), params, getGeo$1(params));
          this.updateNormals = true;
          var n = data.position1.length;
          var m = data.radius.length;
          this.__center = new Float32Array(n);
          this._position = new Float32Array(n * 2);
          this._color = new Float32Array(n * 2);
          this._from = new Float32Array(n * 2);
          this._to = new Float32Array(n * 2);
          this._radius = new Float32Array(m * 2);
          this.setAttributes(data, true);
      }

      if ( GeometryBuffer ) CylinderGeometryBuffer.__proto__ = GeometryBuffer;
      CylinderGeometryBuffer.prototype = Object.create( GeometryBuffer && GeometryBuffer.prototype );
      CylinderGeometryBuffer.prototype.constructor = CylinderGeometryBuffer;

      var prototypeAccessors = { defaultParameters: { configurable: true } };
      prototypeAccessors.defaultParameters.get = function () { return CylinderGeometryBufferDefaultParameters; };
      CylinderGeometryBuffer.prototype.applyPositionTransform = function applyPositionTransform (matrix, i, i3) {
          eye$6.fromArray(this._from, i3);
          target$6.fromArray(this._to, i3);
          matrix.lookAt(eye$6, target$6, up$6);
          var r = this._radius[i];
          scale$6.set(r, r, eye$6.distanceTo(target$6));
          matrix.scale(scale$6);
      };
      CylinderGeometryBuffer.prototype.setAttributes = function setAttributes (data, initNormals) {
          if ( data === void 0 ) data = {};

          var meshData = {};
          if (data.position1 && data.position2) {
              calculateCenterArray(data.position1, data.position2, this.__center);
              calculateCenterArray(data.position1, this.__center, this._position);
              calculateCenterArray(this.__center, data.position2, this._position, data.position1.length);
              this._from.set(data.position1);
              this._from.set(this.__center, data.position1.length);
              this._to.set(this.__center);
              this._to.set(data.position2, this.__center.length);
              meshData.position = this._position;
          }
          if (data.color && data.color2) {
              this._color.set(data.color);
              this._color.set(data.color2, data.color.length);
              meshData.color = this._color;
          }
          if (data.radius) {
              this._radius.set(data.radius);
              this._radius.set(data.radius, data.radius.length);
              meshData.radius = this._radius;
          }
          GeometryBuffer.prototype.setAttributes.call(this, meshData, initNormals);
      };

      Object.defineProperties( CylinderGeometryBuffer.prototype, prototypeAccessors );

      return CylinderGeometryBuffer;
  }(GeometryBuffer));

  ShaderRegistry.add('shader/CylinderImpostor.vert', "\nattribute vec3 mapping;\nattribute vec3 position1;\nattribute vec3 position2;\nattribute float radius;\nvarying vec3 axis;varying vec4 base_radius;varying vec4 end_b;varying vec3 U;varying vec3 V;\nvarying vec4 w;\n#ifdef PICKING\n#include unpack_color\nattribute float primitiveId;\nvarying vec3 vPickingColor;\n#else\nattribute vec3 color2;\nvarying vec3 vColor1;\nvarying vec3 vColor2;\n#endif\nuniform mat4 modelViewMatrixInverse;\nuniform float ortho;\n#include matrix_scale\nvoid main(){\n#ifdef PICKING\nvPickingColor = unpackColor( primitiveId );\n#else\nvColor1 = color;\nvColor2 = color2;\n#endif\nbase_radius.w = radius * matrixScale( modelViewMatrix );\nvec3 center = position;\nvec3 dir = normalize( position2 - position1 );\nfloat ext = length( position2 - position1 ) / 2.0;\nvec3 cam_dir;\nif( ortho == 0.0 ){\ncam_dir = ( modelViewMatrixInverse * vec4( 0, 0, 0, 1 ) ).xyz - center;\n}else{\ncam_dir = ( modelViewMatrixInverse * vec4( 0, 0, 1, 0 ) ).xyz;\n}\ncam_dir = normalize( cam_dir );\nvec3 ldir;\nfloat b = dot( cam_dir, dir );\nend_b.w = b;\nif( b < 0.0 )\nldir = -ext * dir;\nelse\nldir = ext * dir;\nvec3 left = radius * normalize( cross( cam_dir, ldir ) );\nvec3 up = radius * normalize( cross( left, ldir ) );\naxis = normalize( normalMatrix * ldir );\nU = normalize( normalMatrix * up );\nV = normalize( normalMatrix * left );\nvec4 base4 = modelViewMatrix * vec4( center - ldir, 1.0 );\nbase_radius.xyz = base4.xyz / base4.w;\nvec4 end4 = modelViewMatrix * vec4( center + ldir, 1.0 );\nend_b.xyz = end4.xyz / end4.w;\nw = modelViewMatrix * vec4(\ncenter + mapping.x*ldir + mapping.y*left + mapping.z*up, 1.0\n);\ngl_Position = projectionMatrix * w;\ngl_Position.z = 0.99;\n}");

  ShaderRegistry.add('shader/CylinderImpostor.frag', "#define STANDARD\n#define IMPOSTOR\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 interiorColor;\nuniform float interiorDarkening;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\nuniform float clipNear;\nuniform mat4 projectionMatrix;\nuniform float ortho;\nvarying vec3 axis;\nvarying vec4 base_radius;\nvarying vec4 end_b;\nvarying vec3 U;\nvarying vec3 V;\nvarying vec4 w;\n#ifdef PICKING\nuniform float objectId;\nvarying vec3 vPickingColor;\n#else\nvarying vec3 vColor1;\nvarying vec3 vColor2;\n#include common\n#include fog_pars_fragment\n#include bsdfs\n#include lights_pars_begin\n#include lights_physical_pars_fragment\n#endif\nbool interior = false;\nfloat distSq3( vec3 v3a, vec3 v3b ){\nreturn (\n( v3a.x - v3b.x ) * ( v3a.x - v3b.x ) +\n( v3a.y - v3b.y ) * ( v3a.y - v3b.y ) +\n( v3a.z - v3b.z ) * ( v3a.z - v3b.z )\n);\n}\nfloat calcDepth( in vec3 cameraPos ){\nvec2 clipZW = cameraPos.z * projectionMatrix[2].zw + projectionMatrix[3].zw;\nreturn 0.5 + 0.5 * clipZW.x / clipZW.y;\n}\nfloat calcClip( vec3 cameraPos ){\nreturn dot( vec4( cameraPos, 1.0 ), vec4( 0.0, 0.0, 1.0, clipNear - 0.5 ) );\n}\nvoid main(){\nvec3 ray_target = w.xyz / w.w;\nvec3 base = base_radius.xyz; float vRadius = base_radius.w; vec3 end = end_b.xyz; float b = end_b.w;\nvec3 ray_origin = vec3(0.0); vec3 ortho_ray_direction = vec3(0.0, 0.0, 1.0); vec3 persp_ray_direction = normalize(ray_origin - ray_target);\nvec3 ray_direction = mix(persp_ray_direction, ortho_ray_direction, ortho);\n\nmat3 basis = mat3( U, V, axis );\nvec3 diff = ray_target - 0.5 * (base + end);\n\nvec3 P = diff * basis;\nfloat dz = dot( axis, ray_direction );\nfloat radius2 = vRadius*vRadius;\nvec3 D = vec3(dot(U, ray_direction),\ndot(V, ray_direction),\ndz);\nfloat a0 = P.x*P.x + P.y*P.y - radius2;\nfloat a1 = P.x*D.x + P.y*D.y;\nfloat a2 = D.x*D.x + D.y*D.y;\nfloat d = a1*a1 - a0*a2;\nif (d < 0.0) {\ndiscard;\n}\nfloat dist = (-a1 + sqrt(d)) / a2;\nvec3 surface_point = ray_target + dist * ray_direction;\nvec3 base_to_surface = surface_point - base;\nvec3 _normal = normalize( base_to_surface - axis * dot(base_to_surface, axis) );\nfloat base_cap_test = dot( base_to_surface, axis );\nfloat end_cap_test = dot((surface_point - end), axis);\n#ifndef CAP\nvec3 new_point2 = ray_target + ( (-a1 - sqrt(d)) / a2 ) * ray_direction;\nvec3 tmp_point2 = new_point2 - base;\n#endif\nif (base_cap_test < 0.0) {\nfloat dNV;\nfloat near;\nvec3 front_point;\nif ( ortho == 1.0 ) {\nfront_point = ray_target;\n} else {\ndNV = dot(-axis, ray_direction);\nnear = dot(-axis, (base)) / dNV;\nfront_point = ray_direction * near + ray_origin;\n}\nif (dot(front_point - base, front_point-base) > radius2) {\ndiscard;\n}\n#ifdef CAP\nsurface_point = front_point;\n_normal = axis;\n#else\nsurface_point = ray_target + ( (-a1 - sqrt(d)) / a2 ) * ray_direction;\ndNV = dot(-axis, ray_direction);\nnear = dot(axis, end) / dNV;\nnew_point2 = ray_direction * near + ray_origin;\nif (dot(new_point2 - end, new_point2-base) < radius2) {\ndiscard;\n}\ninterior = true;\n#endif\n}\nif( end_cap_test > 0.0 )\n{\nfloat dNV;\nfloat near;\nvec3 end_point;\nif ( ortho == 1.0 ) {\nend_point = ray_target;\n} else {\ndNV = dot(axis, ray_direction);\nif (dNV < 0.0) {\ndiscard;\n}\nnear = dot(axis, end) / dNV;\nend_point = ray_direction * near + ray_origin;\n}\n\nif( dot(end_point - end, end_point-base) > radius2 ) {\ndiscard;\n}\n#ifdef CAP\nsurface_point = end_point;\n_normal = axis;\n#else\nsurface_point = ray_target + ( (-a1 - sqrt(d)) / a2 ) * ray_direction;\ndNV = dot(-axis, ray_direction);\nnear = dot(-axis, (base)) / dNV;\nnew_point2 = ray_direction * near + ray_origin;\nif (dot(new_point2 - base, new_point2-base) < radius2) {\ndiscard;\n}\ninterior = true;\n#endif\n}\ngl_FragDepthEXT = calcDepth( surface_point );\n\n#ifdef NEAR_CLIP\nif( calcClip( surface_point ) > 0.0 ){\ndist = (-a1 - sqrt(d)) / a2;\nsurface_point = ray_target + dist * ray_direction;\nif( calcClip( surface_point ) > 0.0 ) {\ndiscard;\n}\ninterior = true;\ngl_FragDepthEXT = calcDepth( surface_point );\nif( gl_FragDepthEXT >= 0.0 ){\ngl_FragDepthEXT = max( 0.0, calcDepth( vec3( - ( clipNear - 0.5 ) ) ) + ( 0.0000001 / vRadius ) );\n}\n}else if( gl_FragDepthEXT <= 0.0 ){\ndist = (-a1 - sqrt(d)) / a2;\nsurface_point = ray_target + dist * ray_direction;\ninterior = true;\ngl_FragDepthEXT = calcDepth( surface_point );\nif( gl_FragDepthEXT >= 0.0 ){\ngl_FragDepthEXT = 0.0 + ( 0.0000001 / vRadius );\n}\n}\n#else\nif( gl_FragDepthEXT <= 0.0 ){\ndist = (-a1 - sqrt(d)) / a2;\nsurface_point = ray_target + dist * ray_direction;\ninterior = true;\ngl_FragDepthEXT = calcDepth( surface_point );\nif( gl_FragDepthEXT >= 0.0 ){\ngl_FragDepthEXT = 0.0 + ( 0.0000001 / vRadius );\n}\n}\n#endif\nif (gl_FragDepthEXT < 0.0) {\ndiscard;\n}\nif (gl_FragDepthEXT > 1.0) {\ndiscard;\n}\n#ifdef PICKING\nif( opacity < 0.3 )\ndiscard;\ngl_FragColor = vec4( vPickingColor, objectId );\n#else\nvec3 vViewPosition = -surface_point;\nvec3 vNormal = _normal;\nvec3 vColor;\nif( distSq3( surface_point, end ) < distSq3( surface_point, base ) ){\nif( b < 0.0 ){\nvColor = vColor1;\n}else{\nvColor = vColor2;\n}\n}else{\nif( b > 0.0 ){\nvColor = vColor1;\n}else{\nvColor = vColor2;\n}\n}\nvec4 diffuseColor = vec4( diffuse, opacity );\nReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\nvec3 totalEmissiveLight = emissive;\n#include color_fragment\n#include roughnessmap_fragment\n#include metalnessmap_fragment\nvec3 normal = normalize( vNormal );\nvec3 geometryNormal = normal;\n#include lights_physical_fragment\n#include lights_fragment_begin\n#include lights_fragment_end\nvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveLight;\nif( interior ){\n#ifdef USE_INTERIOR_COLOR\noutgoingLight.xyz = interiorColor;\n#else\n#ifdef DIFFUSE_INTERIOR\noutgoingLight.xyz = vColor;\n#endif\n#endif\noutgoingLight.xyz *= 1.0 - interiorDarkening;\n}\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );\n#include premultiplied_alpha_fragment\n#include tonemapping_fragment\n#include encodings_fragment\n#include fog_fragment\n#endif\n}");

  /**
   * @file Mapped Aligned Box Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  //       +Y   /
  //    0**********2
  //    *   | /   **
  //    *   |/   * *
  // -----------3---- +X
  //    *  /|   *  *
  //    * / |   *  *
  //    1/**|******4
  //    /   |   * *
  //   /    |   **  
  //  +Z    |   5 
  var mapping$1 = new Float32Array([
      -1.0, 1.0, -1.0,
      -1.0, -1.0, -1.0,
      1.0, 1.0, -1.0,
      1.0, 1.0, 1.0,
      1.0, -1.0, -1.0,
      1.0, -1.0, 1.0
  ]);
  var mappingIndices$1 = new Uint16Array([
      0, 1, 2,
      1, 4, 2,
      2, 4, 3,
      4, 5, 3
  ]);
  /**
   * Mapped Aligned box buffer. Draws boxes where one side is always screen-space aligned.
   * Used to render cylinder imposters.
   * @interface
   */
  var MappedAlignedBoxBuffer = /*@__PURE__*/(function (MappedBuffer) {
      function MappedAlignedBoxBuffer(data, params) {
          if ( params === void 0 ) params = {};

          MappedBuffer.call(this, 'v3', data, params);
      }

      if ( MappedBuffer ) MappedAlignedBoxBuffer.__proto__ = MappedBuffer;
      MappedAlignedBoxBuffer.prototype = Object.create( MappedBuffer && MappedBuffer.prototype );
      MappedAlignedBoxBuffer.prototype.constructor = MappedAlignedBoxBuffer;

      var prototypeAccessors = { mapping: { configurable: true },mappingIndices: { configurable: true },mappingIndicesSize: { configurable: true },mappingSize: { configurable: true },mappingItemSize: { configurable: true } };
      prototypeAccessors.mapping.get = function () { return mapping$1; };
      prototypeAccessors.mappingIndices.get = function () { return mappingIndices$1; };
      prototypeAccessors.mappingIndicesSize.get = function () { return 12; };
      prototypeAccessors.mappingSize.get = function () { return 6; };
      prototypeAccessors.mappingItemSize.get = function () { return 3; };

      Object.defineProperties( MappedAlignedBoxBuffer.prototype, prototypeAccessors );

      return MappedAlignedBoxBuffer;
  }(MappedBuffer));

  /**
   * @file Cylinder Impostor Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var CylinderImpostorBufferDefaultParameters = Object.assign({
      openEnded: false
  }, BufferDefaultParameters);
  var CylinderImpostorBufferParameterTypes = Object.assign({
      openEnded: { updateShader: true }
  }, BufferParameterTypes);
  /**
   * Cylinder impostor buffer.
   *
   * @example
   * var cylinderimpostorBuffer = new CylinderImpostorBuffer({
   *     position1: new Float32Array([ 0, 0, 0 ]),
   *     position2: new Float32Array([ 1, 1, 1 ]),
   *     color: new Float32Array([ 1, 0, 0 ]),
   *     color2: new Float32Array([ 0, 1, 0 ]),
   *     radius: new Float32Array([ 1 ])
   * });
   */
  var CylinderImpostorBuffer = /*@__PURE__*/(function (MappedAlignedBoxBuffer) {
      function CylinderImpostorBuffer(data, params) {
          if ( params === void 0 ) params = {};

          MappedAlignedBoxBuffer.call(this, data, params);
          this.parameterTypes = CylinderImpostorBufferParameterTypes;
          this.isImpostor = true;
          this.vertexShader = 'CylinderImpostor.vert';
          this.fragmentShader = 'CylinderImpostor.frag';
          this.addUniforms({
              'modelViewMatrixInverse': { value: new Matrix4() },
              'ortho': { value: 0.0 }
          });
          this.addAttributes({
              'position1': { type: 'v3', value: null },
              'position2': { type: 'v3', value: null },
              'color2': { type: 'c', value: null },
              'radius': { type: 'f', value: null }
          });
          this.setAttributes(data);
          this.makeMapping();
      }

      if ( MappedAlignedBoxBuffer ) CylinderImpostorBuffer.__proto__ = MappedAlignedBoxBuffer;
      CylinderImpostorBuffer.prototype = Object.create( MappedAlignedBoxBuffer && MappedAlignedBoxBuffer.prototype );
      CylinderImpostorBuffer.prototype.constructor = CylinderImpostorBuffer;

      var prototypeAccessors = { defaultParameters: { configurable: true } };
      prototypeAccessors.defaultParameters.get = function () { return CylinderImpostorBufferDefaultParameters; };
      CylinderImpostorBuffer.prototype.getDefines = function getDefines (type) {
          var defines = MappedAlignedBoxBuffer.prototype.getDefines.call(this, type);
          if (!this.parameters.openEnded) {
              defines.CAP = 1;
          }
          return defines;
      };

      Object.defineProperties( CylinderImpostorBuffer.prototype, prototypeAccessors );

      return CylinderImpostorBuffer;
  }(MappedAlignedBoxBuffer));

  /**
   * @file Cylinder Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  Object.assign({
      disableImpostor: false
  }, CylinderGeometryBufferDefaultParameters, CylinderImpostorBufferDefaultParameters);
  /**
   * Cylinder buffer. Depending on the value {@link ExtensionFragDepth} and
   * `params.disableImpostor` the constructor returns either a
   * {@link CylinderGeometryBuffer} or a {@link CylinderImpostorBuffer}
   * @implements {Buffer}
   *
   * @example
   * var cylinderBuffer = new CylinderBuffer({
   *   position1: new Float32Array([ 0, 0, 0 ]),
   *   position2: new Float32Array([ 1, 1, 1 ]),
   *   color: new Float32Array([ 1, 0, 0 ]),
   *   color2: new Float32Array([ 0, 1, 0 ]),
   *   radius: new Float32Array([ 1 ])
   * });
   */
  var CylinderBuffer = function CylinderBuffer(data, params) {
      if ( params === void 0 ) params = {};

      if (!data.color2 && data.color)
          { data.color2 = data.color; }
      if (!ExtensionFragDepth || (params && params.disableImpostor)) {
          return new CylinderGeometryBuffer(data, params);
      }
      else {
          return new CylinderImpostorBuffer(data, params);
      }
  };
  BufferRegistry.add('cylinder', CylinderBuffer);

  /**
   * @file Axes Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Axes representation. Show principal axes and/or a box aligned with them
   * that fits the structure or selection.
   *
   * __Name:__ _axes_
   *
   * @example
   * stage.loadFile( "rcsb://3pqr", {
   *     assembly: "BU1"
   * } ).then( function( o ){
   *     o.addRepresentation( "cartoon" );
   *     o.addRepresentation( "axes", {
   *         sele: "RET", showAxes: false, showBox: true, radius: 0.2
   *     } );
   *     o.addRepresentation( "ball+stick", { sele: "RET" } );
   *     o.addRepresentation( "axes", {
   *         sele: ":B and backbone", showAxes: false, showBox: true, radius: 0.2
   *     } );
   *     stage.autoView();
   *     var pa = o.structure.getPrincipalAxes();
   *     stage.animationControls.rotate( pa.getRotationQuaternion(), 1500 );
   * } );
   */
  var AxesRepresentation = /*@__PURE__*/(function (StructureRepresentation) {
      function AxesRepresentation(structure, viewer, params) {
          StructureRepresentation.call(this, structure, viewer, params);
          this.type = 'axes';
          this.parameters = Object.assign({
              radiusSize: {
                  type: 'number', precision: 3, max: 10.0, min: 0.001
              },
              sphereDetail: true,
              radialSegments: true,
              disableImpostor: true,
              showAxes: {
                  type: 'boolean', rebuild: true
              },
              showBox: {
                  type: 'boolean', rebuild: true
              }
          }, this.parameters, {
              assembly: null
          });
          this.init(params);
      }

      if ( StructureRepresentation ) AxesRepresentation.__proto__ = StructureRepresentation;
      AxesRepresentation.prototype = Object.create( StructureRepresentation && StructureRepresentation.prototype );
      AxesRepresentation.prototype.constructor = AxesRepresentation;
      AxesRepresentation.prototype.init = function init (params) {
          var p = params || {};
          p.radiusSize = defaults(p.radiusSize, 0.5);
          p.colorValue = defaults(p.colorValue, 'lightgreen');
          p.useInteriorColor = defaults(p.useInteriorColor, true);
          this.showAxes = defaults(p.showAxes, true);
          this.showBox = defaults(p.showBox, false);
          StructureRepresentation.prototype.init.call(this, p);
      };
      AxesRepresentation.prototype.getPrincipalAxes = function getPrincipalAxes () {
          var selection;
          var assembly = this.getAssembly();
          if (assembly) {
              selection = assembly.partList[0].getSelection();
          }
          return this.structureView.getPrincipalAxes(selection);
      };
      AxesRepresentation.prototype.getAxesData = function getAxesData (sview) {
          var pa = this.getPrincipalAxes();
          var c = new Color(this.colorValue);
          var vn = 0;
          var en = 0;
          if (this.showAxes) {
              vn += 6;
              en += 3;
          }
          if (this.showBox) {
              vn += 8;
              en += 12;
          }
          var vertexPosition = new Float32Array(3 * vn);
          var vertexColor = uniformArray3(vn, c.r, c.g, c.b);
          var vertexRadius = uniformArray(vn, this.radiusSize);
          var edgePosition1 = new Float32Array(3 * en);
          var edgePosition2 = new Float32Array(3 * en);
          var edgeColor = uniformArray3(en, c.r, c.g, c.b);
          var edgeRadius = uniformArray(en, this.radiusSize);
          var offset = 0;
          if (this.showAxes) {
              var addAxis = function (v1, v2) {
                  v1.toArray(vertexPosition, offset * 2);
                  v2.toArray(vertexPosition, offset * 2 + 3);
                  v1.toArray(edgePosition1, offset);
                  v2.toArray(edgePosition2, offset);
                  offset += 3;
              };
              addAxis(pa.begA, pa.endA);
              addAxis(pa.begB, pa.endB);
              addAxis(pa.begC, pa.endC);
          }
          if (this.showBox) {
              var v = new Vector3();
              var ref = pa.getProjectedScaleForAtoms(sview);
              var d1a = ref.d1a;
              var d2a = ref.d2a;
              var d3a = ref.d3a;
              var d1b = ref.d1b;
              var d2b = ref.d2b;
              var d3b = ref.d3b;
              // console.log(d1a, d2a, d3a, d1b, d2b, d3b)
              var offset2 = offset * 2;
              var addCorner = function (d1, d2, d3) {
                  v.copy(pa.center)
                      .addScaledVector(pa.normVecA, d1)
                      .addScaledVector(pa.normVecB, d2)
                      .addScaledVector(pa.normVecC, d3);
                  v.toArray(vertexPosition, offset2);
                  offset2 += 3;
              };
              addCorner(d1a, d2a, d3a);
              addCorner(d1a, d2a, d3b);
              addCorner(d1a, d2b, d3b);
              addCorner(d1a, d2b, d3a);
              addCorner(d1b, d2b, d3b);
              addCorner(d1b, d2b, d3a);
              addCorner(d1b, d2a, d3a);
              addCorner(d1b, d2a, d3b);
              var edgeOffset = offset;
              var addEdge = function (a, b) {
                  v.fromArray(vertexPosition, offset * 2 + a * 3)
                      .toArray(edgePosition1, edgeOffset);
                  v.fromArray(vertexPosition, offset * 2 + b * 3)
                      .toArray(edgePosition2, edgeOffset);
                  edgeOffset += 3;
              };
              addEdge(0, 1);
              addEdge(0, 3);
              addEdge(0, 6);
              addEdge(1, 2);
              addEdge(1, 7);
              addEdge(2, 3);
              addEdge(2, 4);
              addEdge(3, 5);
              addEdge(4, 5);
              addEdge(4, 7);
              addEdge(5, 6);
              addEdge(6, 7);
          }
          var picker = new AxesPicker(pa);
          return {
              vertex: {
                  position: vertexPosition,
                  color: vertexColor,
                  radius: vertexRadius,
                  picking: picker
              },
              edge: {
                  position1: edgePosition1,
                  position2: edgePosition2,
                  color: edgeColor,
                  color2: edgeColor,
                  radius: edgeRadius,
                  picking: picker
              }
          };
      };
      AxesRepresentation.prototype.create = function create () {
          var axesData = this.getAxesData(this.structureView);
          this.sphereBuffer = new SphereBuffer(axesData.vertex, this.getBufferParams({
              sphereDetail: this.sphereDetail,
              disableImpostor: this.disableImpostor,
              dullInterior: true
          }));
          this.cylinderBuffer = new CylinderBuffer(axesData.edge, this.getBufferParams({
              openEnded: true,
              radialSegments: this.radialSegments,
              disableImpostor: this.disableImpostor,
              dullInterior: true
          }));
          this.dataList.push({
              sview: this.structureView,
              bufferList: [this.sphereBuffer, this.cylinderBuffer]
          });
      };
      AxesRepresentation.prototype.createData = function createData (sview) {
          return;
      };
      AxesRepresentation.prototype.updateData = function updateData (what, data) {
          var axesData = this.getAxesData(data.sview);
          var sphereData = {};
          var cylinderData = {};
          if (!what || what.position) {
              Object.assign(sphereData, {
                  position: axesData.vertex.position
              });
              Object.assign(cylinderData, {
                  position1: axesData.edge.position1,
                  position2: axesData.edge.position2
              });
          }
          if (!what || what.color) {
              Object.assign(sphereData, {
                  color: axesData.vertex.color
              });
              Object.assign(cylinderData, {
                  color: axesData.edge.color,
                  color2: axesData.edge.color
              });
          }
          if (!what || what.radius) {
              Object.assign(sphereData, {
                  radius: axesData.vertex.radius
              });
              Object.assign(cylinderData, {
                  radius: axesData.edge.radius
              });
          }
          this.sphereBuffer.setAttributes(sphereData);
          this.cylinderBuffer.setAttributes(cylinderData);
      };

      return AxesRepresentation;
  }(StructureRepresentation));
  RepresentationRegistry.add('axes', AxesRepresentation);

  /**
   * @file Ball And Stick Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Ball And Stick representation parameter object. Extends {@link RepresentationParameters} and
   * {@link StructureRepresentationParameters}.
   *
   * @typedef {Object} BallAndStickRepresentationParameters - ball and stick representation parameters
   *
   * @property {Integer} sphereDetail - sphere quality (icosahedron subdivisions)
   * @property {Integer} radialSegments - cylinder quality (number of segments)
   * @property {Boolean} openEnded - capped or not
   * @property {Boolean} disableImpostor - disable use of raycasted impostors for rendering
   * @property {Float} aspectRatio - size difference between atom and bond radii
   * @property {Boolean} lineOnly - render only bonds, and only as lines
   * @property {Integer} linewidth - width of lines
   * @property {Boolean} cylinderOnly - render only bonds (no atoms)
   * @property {String} multipleBond - one off "off", "symmetric", "offset"
   * @property {Float} bondSpacing - spacing for multiple bond rendering
   * @property {Float} bondScale - scale/radius for multiple bond rendering
   */
  /**
   * Ball And Stick representation. Show atoms as spheres and bonds as cylinders.
   *
   * __Name:__ _ball+stick_
   *
   * @example
   * stage.loadFile( "rcsb://1crn" ).then( function( o ){
   *     o.addRepresentation( "ball+stick" );
   *     o.autoView();
   * } );
   */
  var BallAndStickRepresentation = /*@__PURE__*/(function (StructureRepresentation) {
      function BallAndStickRepresentation(structure, viewer, params) {
          StructureRepresentation.call(this, structure, viewer, params);
          this.type = 'ball+stick';
          this.parameters = Object.assign({
              sphereDetail: true,
              radialSegments: true,
              openEnded: true,
              disableImpostor: true,
              aspectRatio: {
                  type: 'number', precision: 1, max: 10.0, min: 1.0
              },
              lineOnly: {
                  type: 'boolean', rebuild: true
              },
              cylinderOnly: {
                  type: 'boolean', rebuild: true
              },
              multipleBond: {
                  type: 'select',
                  rebuild: true,
                  options: {
                      'off': 'off',
                      'symmetric': 'symmetric',
                      'offset': 'offset'
                  }
              },
              bondScale: {
                  type: 'number', precision: 2, max: 1.0, min: 0.01
              },
              bondSpacing: {
                  type: 'number', precision: 2, max: 2.0, min: 0.5
              },
              linewidth: {
                  type: 'integer', max: 50, min: 1, buffer: true
              }
          }, this.parameters);
          this.init(params);
      }

      if ( StructureRepresentation ) BallAndStickRepresentation.__proto__ = StructureRepresentation;
      BallAndStickRepresentation.prototype = Object.create( StructureRepresentation && StructureRepresentation.prototype );
      BallAndStickRepresentation.prototype.constructor = BallAndStickRepresentation;
      BallAndStickRepresentation.prototype.init = function init (params) {
          var p = params || {};
          p.radiusType = defaults(p.radiusType, 'size');
          p.radiusSize = defaults(p.radiusSize, 0.15);
          p.useInteriorColor = defaults(p.useInteriorColor, true);
          this.aspectRatio = defaults(p.aspectRatio, 2.0);
          this.lineOnly = defaults(p.lineOnly, false);
          this.cylinderOnly = defaults(p.cylinderOnly, false);
          this.multipleBond = defaults(p.multipleBond, 'off');
          this.bondSpacing = defaults(p.bondSpacing, 1.0);
          this.bondScale = defaults(p.bondScale, 0.4);
          this.linewidth = defaults(p.linewidth, 2);
          StructureRepresentation.prototype.init.call(this, p);
      };
      BallAndStickRepresentation.prototype.getAtomRadius = function getAtomRadius (atom) {
          return this.aspectRatio * StructureRepresentation.prototype.getAtomRadius.call(this, atom);
      };
      BallAndStickRepresentation.prototype.getAtomParams = function getAtomParams (what, params) {
          var p = StructureRepresentation.prototype.getAtomParams.call(this, what, params);
          p.radiusParams.scale *= this.aspectRatio;
          return p;
      };
      BallAndStickRepresentation.prototype.getAtomData = function getAtomData (sview, what, params) {
          return sview.getAtomData(this.getAtomParams(what, params));
      };
      BallAndStickRepresentation.prototype.getBondParams = function getBondParams (what, params) {
          params = Object.assign({
              multipleBond: this.multipleBond,
              bondSpacing: this.bondSpacing,
              bondScale: this.bondScale
          }, params);
          return StructureRepresentation.prototype.getBondParams.call(this, what, params);
      };
      BallAndStickRepresentation.prototype.getBondData = function getBondData (sview, what, params) {
          return sview.getBondData(this.getBondParams(what, params));
      };
      BallAndStickRepresentation.prototype.createData = function createData (sview) {
          var bufferList = [];
          if (this.lineOnly) {
              this.lineBuffer = new WideLineBuffer(this.getBondData(sview, { position: true, color: true, picking: true }), this.getBufferParams({ linewidth: this.linewidth }));
              bufferList.push(this.lineBuffer);
          }
          else {
              var cylinderBuffer = new CylinderBuffer(this.getBondData(sview), this.getBufferParams({
                  openEnded: this.openEnded,
                  radialSegments: this.radialSegments,
                  disableImpostor: this.disableImpostor,
                  dullInterior: true
              }));
              bufferList.push(cylinderBuffer);
              if (!this.cylinderOnly) {
                  var sphereBuffer = new SphereBuffer(this.getAtomData(sview), this.getBufferParams({
                      sphereDetail: this.sphereDetail,
                      disableImpostor: this.disableImpostor,
                      dullInterior: true
                  }));
                  bufferList.push(sphereBuffer);
              }
          }
          return {
              bufferList: bufferList
          };
      };
      BallAndStickRepresentation.prototype.updateData = function updateData (what, data) {
          if (this.multipleBond !== 'off' && what && what.radius) {
              what.position = true;
          }
          var bondData = this.getBondData(data.sview, what);
          if (this.lineOnly) {
              var lineData = {};
              if (!what || what.position) {
                  Object.assign(lineData, {
                      position1: bondData.position1,
                      position2: bondData.position2
                  });
              }
              if (!what || what.color) {
                  Object.assign(lineData, {
                      color: bondData.color,
                      color2: bondData.color2
                  });
              }
              data.bufferList[0].setAttributes(lineData);
          }
          else {
              var cylinderData = {};
              if (!what || what.position) {
                  Object.assign(cylinderData, {
                      position1: bondData.position1,
                      position2: bondData.position2
                  });
              }
              if (!what || what.color) {
                  Object.assign(cylinderData, {
                      color: bondData.color,
                      color2: bondData.color2
                  });
              }
              if (!what || what.radius) {
                  Object.assign(cylinderData, {
                      radius: bondData.radius
                  });
              }
              data.bufferList[0].setAttributes(cylinderData);
              if (!this.cylinderOnly) {
                  var atomData = this.getAtomData(data.sview, what);
                  var sphereData = {};
                  if (!what || what.position) {
                      Object.assign(sphereData, {
                          position: atomData.position
                      });
                  }
                  if (!what || what.color) {
                      Object.assign(sphereData, {
                          color: atomData.color
                      });
                  }
                  if (!what || what.radius) {
                      Object.assign(sphereData, {
                          radius: atomData.radius
                      });
                  }
                  data.bufferList[1].setAttributes(sphereData);
              }
          }
      };
      BallAndStickRepresentation.prototype.setParameters = function setParameters (params) {
          if ( params === void 0 ) params = {};

          var rebuild = false;
          var what = {};
          if (params.aspectRatio || params.bondSpacing || params.bondScale) {
              Object.assign(what, { radius: true });
              if (!ExtensionFragDepth || this.disableImpostor) {
                  rebuild = true;
              }
          }
          StructureRepresentation.prototype.setParameters.call(this, params, what, rebuild);
          return this;
      };

      return BallAndStickRepresentation;
  }(StructureRepresentation));
  RepresentationRegistry.add('ball+stick', BallAndStickRepresentation);

  /**
   * @file Backbone Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Backbone representation. Show cylinders (or lines) connecting .CA (protein)
   * or .C4'/.C3' (RNA/DNA) of polymers.
   *
   * __Name:__ _backbone_
   *
   * @example
   * stage.loadFile( "rcsb://1sfi" ).then( function( o ){
   *     o.addRepresentation( "backbone" );
   *     o.autoView();
   * } );
   */
  var BackboneRepresentation = /*@__PURE__*/(function (BallAndStickRepresentation) {
      function BackboneRepresentation(structure, viewer, params) {
          BallAndStickRepresentation.call(this, structure, viewer, params);
          this.type = 'backbone';
          this.parameters = Object.assign({}, this.parameters, {
              multipleBond: null,
              bondSpacing: null
          });
          this.init(params);
      }

      if ( BallAndStickRepresentation ) BackboneRepresentation.__proto__ = BallAndStickRepresentation;
      BackboneRepresentation.prototype = Object.create( BallAndStickRepresentation && BallAndStickRepresentation.prototype );
      BackboneRepresentation.prototype.constructor = BackboneRepresentation;
      BackboneRepresentation.prototype.init = function init (params) {
          var p = params || {};
          p.aspectRatio = defaults(p.aspectRatio, 1.0);
          p.radiusSize = defaults(p.radiusSize, 0.25);
          BallAndStickRepresentation.prototype.init.call(this, p);
      };
      BackboneRepresentation.prototype.getAtomRadius = function getAtomRadius (atom) {
          return atom.isTrace() ? BallAndStickRepresentation.prototype.getAtomRadius.call(this, atom) : 0;
      };
      BackboneRepresentation.prototype.getAtomData = function getAtomData (sview, what, params) {
          return sview.getBackboneAtomData(this.getAtomParams(what, params));
      };
      BackboneRepresentation.prototype.getBondData = function getBondData (sview, what, params) {
          return sview.getBackboneBondData(this.getBondParams(what, params));
      };

      return BackboneRepresentation;
  }(BallAndStickRepresentation));
  RepresentationRegistry.add('backbone', BackboneRepresentation);

  /**
   * @file Base Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Base representation. Show cylinders for RNA/DNA ladders.
   *
   * __Name:__ _base_
   *
   * @example
   * stage.loadFile( "rcsb://1d66" ).then( function( o ){
   *     o.addRepresentation( "cartoon", { sele: "nucleic" } );
   *     o.addRepresentation( "base", { color: "resname" } );
   *     o.autoView( "nucleic" );
   * } );
   */
  var BaseRepresentation = /*@__PURE__*/(function (BallAndStickRepresentation) {
      function BaseRepresentation(structure, viewer, params) {
          BallAndStickRepresentation.call(this, structure, viewer, params);
          this.type = 'base';
          this.parameters = Object.assign({}, this.parameters, {
              multipleBond: null,
              bondSpacing: null
          });
      }

      if ( BallAndStickRepresentation ) BaseRepresentation.__proto__ = BallAndStickRepresentation;
      BaseRepresentation.prototype = Object.create( BallAndStickRepresentation && BallAndStickRepresentation.prototype );
      BaseRepresentation.prototype.constructor = BaseRepresentation;
      BaseRepresentation.prototype.init = function init (params) {
          var p = params || {};
          p.aspectRatio = defaults(p.aspectRatio, 1.0);
          p.radiusSize = defaults(p.radiusSize, 0.3);
          BallAndStickRepresentation.prototype.init.call(this, p);
      };
      BaseRepresentation.prototype.getAtomData = function getAtomData (sview, what, params) {
          return sview.getRungAtomData(this.getAtomParams(what, params));
      };
      BaseRepresentation.prototype.getBondData = function getBondData (sview, what, params) {
          var p = this.getBondParams(what, params);
          Object.assign(p.colorParams, { rung: true });
          return sview.getRungBondData(p);
      };

      return BaseRepresentation;
  }(BallAndStickRepresentation));
  RepresentationRegistry.add('base', BaseRepresentation);

  /**
   * @file Spline
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var Interpolator = function Interpolator(m, tension) {
      this.m = m;
      this.tension = tension;
      this.dt = 1.0 / this.m;
      this.delta = 0.0001;
      this.vec1 = new Vector3();
      this.vec2 = new Vector3();
      this.vDir = new Vector3();
      this.vTan = new Vector3();
      this.vNorm = new Vector3();
      this.vBin = new Vector3();
      this.m2 = Math.ceil(this.m / 2);
  };
  Interpolator.prototype.interpolateToArr = function interpolateToArr (v0, v1, v2, v3, t, arr, offset) {
      arr[offset + 0] = spline(v0.x, v1.x, v2.x, v3.x, t, this.tension);
      arr[offset + 1] = spline(v0.y, v1.y, v2.y, v3.y, t, this.tension);
      arr[offset + 2] = spline(v0.z, v1.z, v2.z, v3.z, t, this.tension);
  };
  Interpolator.prototype.interpolateToVec = function interpolateToVec (v0, v1, v2, v3, t, vec) {
      vec.x = spline(v0.x, v1.x, v2.x, v3.x, t, this.tension);
      vec.y = spline(v0.y, v1.y, v2.y, v3.y, t, this.tension);
      vec.z = spline(v0.z, v1.z, v2.z, v3.z, t, this.tension);
  };
  Interpolator.prototype.interpolatePosition = function interpolatePosition (v0, v1, v2, v3, pos, offset) {
      for (var j = 0; j < this.m; ++j) {
          var l = offset + j * 3;
          var d = this.dt * j;
          this.interpolateToArr(v0, v1, v2, v3, d, pos, l);
      }
  };
  Interpolator.prototype.interpolateTangent = function interpolateTangent (v0, v1, v2, v3, tan, offset) {
      for (var j = 0; j < this.m; ++j) {
          var d = this.dt * j;
          var d1 = d - this.delta;
          var d2 = d + this.delta;
          var l = offset + j * 3;
          // capping as a precaution
          if (d1 < 0)
              { d1 = 0; }
          if (d2 > 1)
              { d2 = 1; }
          //
          this.interpolateToVec(v0, v1, v2, v3, d1, this.vec1);
          this.interpolateToVec(v0, v1, v2, v3, d2, this.vec2);
          //
          this.vec2.sub(this.vec1).normalize();
          this.vec2.toArray(tan, l);
      }
  };
  Interpolator.prototype.vectorSubdivide = function vectorSubdivide (interpolationFn, iterator, array, offset, isCyclic) {
      var v0;
      var v1 = iterator.next();
      var v2 = iterator.next();
      var v3 = iterator.next();
      //
      var n = iterator.size;
      var n1 = n - 1;
      var k = offset || 0;
      for (var i = 0; i < n1; ++i) {
          v0 = v1;
          v1 = v2;
          v2 = v3;
          v3 = iterator.next();
          interpolationFn.apply(this, [v0, v1, v2, v3, array, k]);
          k += 3 * this.m;
      }
      if (isCyclic) {
          v0 = iterator.get(n - 2);
          v1 = iterator.get(n - 1);
          v2 = iterator.get(0);
          v3 = iterator.get(1);
          interpolationFn.apply(this, [v0, v1, v2, v3, array, k]);
          k += 3 * this.m;
      }
  };
  //
  Interpolator.prototype.getPosition = function getPosition (iterator, array, offset, isCyclic) {
      iterator.reset();
      this.vectorSubdivide(this.interpolatePosition, iterator, array, offset, isCyclic);
      var n1 = iterator.size - 1;
      var k = n1 * this.m * 3;
      if (isCyclic)
          { k += this.m * 3; }
      var v = iterator.get(isCyclic ? 0 : n1);
      array[k] = v.x;
      array[k + 1] = v.y;
      array[k + 2] = v.z;
  };
  Interpolator.prototype.getTangent = function getTangent (iterator, array, offset, isCyclic) {
      iterator.reset();
      this.vectorSubdivide(this.interpolateTangent, iterator, array, offset, isCyclic);
      var n1 = iterator.size - 1;
      var k = n1 * this.m * 3;
      if (isCyclic)
          { k += this.m * 3; }
      copyArray(array, array, k - 3, k, 3);
  };
  Interpolator.prototype.interpolateNormalDir = function interpolateNormalDir (u0, u1, u2, u3, v0, v1, v2, v3, tan, norm, bin, offset, shift) {
      for (var j = 0; j < this.m; ++j) {
          var l = offset + j * 3;
          if (shift)
              { l += this.m2 * 3; }
          var d = this.dt * j;
          this.interpolateToVec(u0, u1, u2, u3, d, this.vec1);
          this.interpolateToVec(v0, v1, v2, v3, d, this.vec2);
          this.vDir.subVectors(this.vec2, this.vec1).normalize();
          this.vTan.fromArray(tan, l);
          this.vBin.crossVectors(this.vDir, this.vTan).normalize();
          this.vBin.toArray(bin, l);
          this.vNorm.crossVectors(this.vTan, this.vBin).normalize();
          this.vNorm.toArray(norm, l);
      }
  };
  Interpolator.prototype.interpolateNormal = function interpolateNormal (vDir, tan, norm, bin, offset) {
      for (var j = 0; j < this.m; ++j) {
          var l = offset + j * 3;
          vDir.copy(this.vNorm);
          this.vTan.fromArray(tan, l);
          this.vBin.crossVectors(vDir, this.vTan).normalize();
          this.vBin.toArray(bin, l);
          this.vNorm.crossVectors(this.vTan, this.vBin).normalize();
          this.vNorm.toArray(norm, l);
      }
  };
  Interpolator.prototype.getNormal = function getNormal (size, tan, norm, bin, offset, isCyclic) {
      this.vNorm.set(0, 0, 1);
      var n = size;
      var n1 = n - 1;
      var k = offset || 0;
      for (var i = 0; i < n1; ++i) {
          this.interpolateNormal(this.vDir, tan, norm, bin, k);
          k += 3 * this.m;
      }
      if (isCyclic) {
          this.interpolateNormal(this.vDir, tan, norm, bin, k);
          k += 3 * this.m;
      }
      this.vBin.toArray(bin, k);
      this.vNorm.toArray(norm, k);
  };
  Interpolator.prototype.getNormalDir = function getNormalDir (iterDir1, iterDir2, tan, norm, bin, offset, isCyclic, shift) {
      iterDir1.reset();
      iterDir2.reset();
      //
      var vSub1 = new Vector3();
      var vSub2 = new Vector3();
      var vSub3 = new Vector3();
      var vSub4 = new Vector3();
      //
      var d1v1 = new Vector3();
      var d1v2 = new Vector3().copy(iterDir1.next());
      var d1v3 = new Vector3().copy(iterDir1.next());
      var d1v4 = new Vector3().copy(iterDir1.next());
      var d2v1 = new Vector3();
      var d2v2 = new Vector3().copy(iterDir2.next());
      var d2v3 = new Vector3().copy(iterDir2.next());
      var d2v4 = new Vector3().copy(iterDir2.next());
      //
      this.vNorm.set(0, 0, 1);
      var n = iterDir1.size;
      var n1 = n - 1;
      var k = offset || 0;
      for (var i = 0; i < n1; ++i) {
          d1v1.copy(d1v2);
          d1v2.copy(d1v3);
          d1v3.copy(d1v4);
          d1v4.copy(iterDir1.next());
          d2v1.copy(d2v2);
          d2v2.copy(d2v3);
          d2v3.copy(d2v4);
          d2v4.copy(iterDir2.next());
          //
          if (i === 0) {
              vSub1.subVectors(d2v1, d1v1);
              vSub2.subVectors(d2v2, d1v2);
              if (vSub1.dot(vSub2) < 0) {
                  vSub2.multiplyScalar(-1);
                  d2v2.addVectors(d1v2, vSub2);
              }
              vSub3.subVectors(d2v3, d1v3);
              if (vSub2.dot(vSub3) < 0) {
                  vSub3.multiplyScalar(-1);
                  d2v3.addVectors(d1v3, vSub3);
              }
          }
          else {
              vSub3.copy(vSub4);
          }
          vSub4.subVectors(d2v4, d1v4);
          if (vSub3.dot(vSub4) < 0) {
              vSub4.multiplyScalar(-1);
              d2v4.addVectors(d1v4, vSub4);
          }
          this.interpolateNormalDir(d1v1, d1v2, d1v3, d1v4, d2v1, d2v2, d2v3, d2v4, tan, norm, bin, k, shift);
          k += 3 * this.m;
      }
      if (isCyclic) {
          d1v1.copy(iterDir1.get(n - 2));
          d1v2.copy(iterDir1.get(n - 1));
          d1v3.copy(iterDir1.get(0));
          d1v4.copy(iterDir1.get(1));
          d2v1.copy(iterDir2.get(n - 2));
          d2v2.copy(iterDir2.get(n - 1));
          d2v3.copy(iterDir2.get(0));
          d2v4.copy(iterDir2.get(1));
          //
          vSub3.copy(vSub4);
          vSub4.subVectors(d2v4, d1v4);
          if (vSub3.dot(vSub4) < 0) {
              vSub4.multiplyScalar(-1);
              d2v4.addVectors(d1v4, vSub4);
          }
          this.interpolateNormalDir(d1v1, d1v2, d1v3, d1v4, d2v1, d2v2, d2v3, d2v4, tan, norm, bin, k, shift);
          k += 3 * this.m;
      }
      if (shift) {
          // FIXME shift requires data from one this.more preceeding residue
          this.vBin.fromArray(bin, this.m2 * 3);
          this.vNorm.fromArray(norm, this.m2 * 3);
          for (var j = 0; j < this.m2; ++j) {
              this.vBin.toArray(bin, j * 3);
              this.vNorm.toArray(norm, j * 3);
          }
      }
      else {
          this.vBin.toArray(bin, k);
          this.vNorm.toArray(norm, k);
      }
  };
  //
  Interpolator.prototype.interpolateColor = function interpolateColor (item1, item2, colFn, col, offset) {
      var j, l;
      for (j = 0; j < this.m2; ++j) {
          l = offset + j * 3;
          colFn.apply(this, [item1, col, l]); // itemColorToArray
      }
      for (j = this.m2; j < this.m; ++j) {
          l = offset + j * 3;
          colFn.apply(this, [item2, col, l]); // itemColorToArray
      }
  };
  Interpolator.prototype.getColor = function getColor (iterator, colFn, col, offset, isCyclic) {
      iterator.reset();
      iterator.next(); // first element not needed
      var i0;
      var i1 = iterator.next();
      //
      var n = iterator.size;
      var n1 = n - 1;
      var k = offset || 0;
      for (var i = 0; i < n1; ++i) {
          i0 = i1;
          i1 = iterator.next();
          this.interpolateColor(i0, i1, colFn, col, k);
          k += 3 * this.m;
      }
      if (isCyclic) {
          i0 = iterator.get(n - 1);
          i1 = iterator.get(0);
          this.interpolateColor(i0, i1, colFn, col, k);
          k += 3 * this.m;
      }
      //
      col[k] = col[k - 3];
      col[k + 1] = col[k - 2];
      col[k + 2] = col[k - 1];
  };
  //
  Interpolator.prototype.interpolatePicking = function interpolatePicking (item1, item2, pickFn, pick, offset) {
      var j;
      for (j = 0; j < this.m2; ++j) {
          pick[offset + j] = pickFn.apply(this, [item1]);
      }
      for (j = this.m2; j < this.m; ++j) {
          pick[offset + j] = pickFn.apply(this, [item2]);
      }
  };
  Interpolator.prototype.getPicking = function getPicking (iterator, pickFn, pick, offset, isCyclic) {
      iterator.reset();
      iterator.next(); // first element not needed
      var i0;
      var i1 = iterator.next();
      //
      var n = iterator.size;
      var n1 = n - 1;
      var k = offset || 0;
      for (var i = 0; i < n1; ++i) {
          i0 = i1;
          i1 = iterator.next();
          this.interpolatePicking(i0, i1, pickFn, pick, k);
          k += this.m;
      }
      if (isCyclic) {
          i0 = iterator.get(n - 1);
          i1 = iterator.get(0);
          this.interpolatePicking(i0, i1, pickFn, pick, k);
          k += this.m;
      }
      //
      pick[k] = pick[k - 1];
  };
  //
  Interpolator.prototype.interpolateSize = function interpolateSize (item1, item2, sizeFn, size, offset) {
      var s1 = sizeFn.apply(this, [item1]);
      var s2 = sizeFn.apply(this, [item2]);
      for (var j = 0; j < this.m; ++j) {
          // linear interpolation
          var t = j / this.m;
          size[offset + j] = (1 - t) * s1 + t * s2;
      }
  };
  Interpolator.prototype.getSize = function getSize (iterator, sizeFn, size, offset, isCyclic) {
      iterator.reset();
      iterator.next(); // first element not needed
      var i0;
      var i1 = iterator.next();
      //
      var n = iterator.size;
      var n1 = n - 1;
      var k = offset || 0;
      for (var i = 0; i < n1; ++i) {
          i0 = i1;
          i1 = iterator.next();
          this.interpolateSize(i0, i1, sizeFn, size, k);
          k += this.m;
      }
      if (isCyclic) {
          i0 = iterator.get(n - 1);
          i1 = iterator.get(0);
          this.interpolateSize(i0, i1, sizeFn, size, k);
          k += this.m;
      }
      //
      size[k] = size[k - 1];
  };
  var Spline = function Spline(polymer, params) {
      this.polymer = polymer;
      this.size = polymer.residueCount;
      var p = params || {};
      this.directional = p.directional || false;
      this.positionIterator = p.positionIterator || false;
      this.subdiv = p.subdiv || 1;
      this.smoothSheet = p.smoothSheet || false;
      if (!p.tension) {
          this.tension = this.polymer.isNucleic() ? 0.5 : 0.9;
      }
      else {
          this.tension = p.tension;
      }
      this.interpolator = new Interpolator(this.subdiv, this.tension);
  };
  Spline.prototype.getAtomIterator = function getAtomIterator (type, smooth) {
      var polymer = this.polymer;
      var structure = polymer.structure;
      var n = polymer.residueCount;
      var i = 0;
      var j = -1;
      var cache = [
          structure.getAtomProxy(),
          structure.getAtomProxy(),
          structure.getAtomProxy(),
          structure.getAtomProxy()
      ];
      var cache2 = [
          new Vector3(),
          new Vector3(),
          new Vector3(),
          new Vector3()
      ];
      function next() {
          var atomProxy = get(j);
          j += 1;
          return atomProxy;
      }
      var apPrev = structure.getAtomProxy();
      var apNext = structure.getAtomProxy();
      function get(idx) {
          var atomProxy = cache[i % 4];
          atomProxy.index = polymer.getAtomIndexByType(idx, type);
          if (smooth && idx > 0 && idx < n && atomProxy.sstruc === 'e') {
              var vec = cache2[i % 4];
              apPrev.index = polymer.getAtomIndexByType(idx + 1, type);
              apNext.index = polymer.getAtomIndexByType(idx - 1, type);
              vec.addVectors(apPrev, apNext)
                  .add(atomProxy).add(atomProxy)
                  .multiplyScalar(0.25);
              i += 1;
              return vec;
          }
          i += 1;
          return atomProxy;
      }
      function reset() {
          i = 0;
          j = -1;
      }
      return {
          size: n,
          next: next,
          get: get,
          reset: reset
      };
  };
  Spline.prototype.getSubdividedColor = function getSubdividedColor (params) {
      var m = this.subdiv;
      var polymer = this.polymer;
      var n = polymer.residueCount;
      var n1 = n - 1;
      var nCol = n1 * m * 3 + 3;
      if (polymer.isCyclic)
          { nCol += m * 3; }
      var col = new Float32Array(nCol);
      var iterator = this.getAtomIterator('trace');
      var p = params || {};
      p.structure = polymer.structure;
      var colormaker = ColormakerRegistry.getScheme(p);
      function colFn(item, array, offset) {
          colormaker.atomColorToArray(item, array, offset);
      }
      this.interpolator.getColor(iterator, colFn, col, 0, polymer.isCyclic);
      return {
          'color': col
      };
  };
  Spline.prototype.getSubdividedPicking = function getSubdividedPicking () {
      var m = this.subdiv;
      var polymer = this.polymer;
      var n = polymer.residueCount;
      var n1 = n - 1;
      var nCol = n1 * m + 1;
      if (polymer.isCyclic)
          { nCol += m; }
      var structure = polymer.structure;
      var iterator = this.getAtomIterator('trace');
      var pick = new Float32Array(nCol);
      function pickFn(item) {
          return item.index;
      }
      this.interpolator.getPicking(iterator, pickFn, pick, 0, polymer.isCyclic);
      return {
          'picking': new AtomPicker(pick, structure)
      };
  };
  Spline.prototype.getSubdividedPosition = function getSubdividedPosition () {
      var pos = this.getPosition();
      return {
          'position': pos
      };
  };
  Spline.prototype.getSubdividedOrientation = function getSubdividedOrientation () {
      var tan = this.getTangent();
      var normals = this.getNormals(tan);
      return {
          'tangent': tan,
          'normal': normals.normal,
          'binormal': normals.binormal
      };
  };
  Spline.prototype.getSubdividedSize = function getSubdividedSize (params) {
      var m = this.subdiv;
      var polymer = this.polymer;
      var n = polymer.residueCount;
      var n1 = n - 1;
      var nSize = n1 * m + 1;
      if (polymer.isCyclic)
          { nSize += m; }
      var size = new Float32Array(nSize);
      var iterator = this.getAtomIterator('trace');
      var radiusFactory = new RadiusFactory(params);
      function sizeFn(item) {
          return radiusFactory.atomRadius(item);
      }
      this.interpolator.getSize(iterator, sizeFn, size, 0, polymer.isCyclic);
      return {
          'size': size
      };
  };
  Spline.prototype.getPosition = function getPosition () {
      var m = this.subdiv;
      var polymer = this.polymer;
      var n = polymer.residueCount;
      var n1 = n - 1;
      var nPos = n1 * m * 3 + 3;
      if (polymer.isCyclic)
          { nPos += m * 3; }
      var pos = new Float32Array(nPos);
      var iterator = this.positionIterator || this.getAtomIterator('trace', this.smoothSheet);
      this.interpolator.getPosition(iterator, pos, 0, polymer.isCyclic);
      return pos;
  };
  Spline.prototype.getTangent = function getTangent () {
      var m = this.subdiv;
      var polymer = this.polymer;
      var n = this.size;
      var n1 = n - 1;
      var nTan = n1 * m * 3 + 3;
      if (polymer.isCyclic)
          { nTan += m * 3; }
      var tan = new Float32Array(nTan);
      var iterator = this.positionIterator || this.getAtomIterator('trace', this.smoothSheet);
      this.interpolator.getTangent(iterator, tan, 0, polymer.isCyclic);
      return tan;
  };
  Spline.prototype.getNormals = function getNormals (tan) {
      var m = this.subdiv;
      var polymer = this.polymer;
      var isProtein = polymer.isProtein();
      var n = this.size;
      var n1 = n - 1;
      var nNorm = n1 * m * 3 + 3;
      if (polymer.isCyclic)
          { nNorm += m * 3; }
      var norm = new Float32Array(nNorm);
      var bin = new Float32Array(nNorm);
      if (this.directional && !this.polymer.isCg()) {
          var iterDir1 = this.getAtomIterator('direction1');
          var iterDir2 = this.getAtomIterator('direction2');
          this.interpolator.getNormalDir(iterDir1, iterDir2, tan, norm, bin, 0, polymer.isCyclic, isProtein);
      }
      else {
          this.interpolator.getNormal(n, tan, norm, bin, 0, polymer.isCyclic);
      }
      return {
          'normal': norm,
          'binormal': bin
      };
  };

  /**
   * @file Tube Mesh Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var vTangent = new Vector3();
  var vMeshNormal = new Vector3();
  var TubeMeshBufferDefaultParameters = Object.assign({
      radialSegments: 4,
      capped: false,
      aspectRatio: 1.0
  }, BufferDefaultParameters);
  function getData(data, params) {
      if ( params === void 0 ) params = {};

      var radialSegments = defaults(params.radialSegments, 4);
      var capped = defaults(params.capped, false);
      var capVertices = capped ? radialSegments : 0;
      var capTriangles = capped ? radialSegments - 2 : 0;
      var n = data.position.length / 3;
      var n1 = n - 1;
      var x = n * radialSegments * 3 + 2 * capVertices * 3;
      var xi = n1 * 2 * radialSegments * 3 + 2 * capTriangles * 3;
      return {
          position: new Float32Array(x),
          color: new Float32Array(x),
          index: getUintArray(xi, x / 3),
          normal: new Float32Array(x),
          picking: data.picking
      };
  }
  /**
   * Tube mesh buffer. Draws a tube.
   */
  var TubeMeshBuffer = /*@__PURE__*/(function (MeshBuffer) {
      function TubeMeshBuffer(data, params) {
          if ( params === void 0 ) params = {};

          MeshBuffer.call(this, getData(data, params), params);
          this.capVertices = this.parameters.capped ? this.parameters.radialSegments : 0;
          this.capTriangles = this.parameters.capped ? this.parameters.radialSegments - 2 : 0;
          this.size2 = data.position.length / 3;
          data.primitiveId = serialArray(this.size2);
          this.setAttributes(data);
          this.makeIndex();
      }

      if ( MeshBuffer ) TubeMeshBuffer.__proto__ = MeshBuffer;
      TubeMeshBuffer.prototype = Object.create( MeshBuffer && MeshBuffer.prototype );
      TubeMeshBuffer.prototype.constructor = TubeMeshBuffer;

      var prototypeAccessors = { defaultParameters: { configurable: true } };
      prototypeAccessors.defaultParameters.get = function () { return TubeMeshBufferDefaultParameters; };
      TubeMeshBuffer.prototype.setAttributes = function setAttributes (data) {
          if ( data === void 0 ) data = {};

          var aspectRatio = this.parameters.aspectRatio;
          var n = this.size2;
          var n1 = n - 1;
          var radialSegments = this.parameters.radialSegments;
          var attributes = this.geometry.attributes;
          var position, normal, binormal, tangent, color, size, primitiveId;
          var meshPosition, meshColor, meshNormal, meshPrimitiveId;
          if (data.position) {
              position = data.position;
              normal = data.normal;
              binormal = data.binormal;
              tangent = data.tangent;
              size = data.size;
              meshPosition = attributes.position.array;
              meshNormal = attributes.normal.array;
              attributes.position.needsUpdate = true;
              attributes.normal.needsUpdate = true;
          }
          if (data.color) {
              color = data.color;
              meshColor = attributes.color.array;
              attributes.color.needsUpdate = true;
          }
          if (data.primitiveId) {
              primitiveId = data.primitiveId;
              meshPrimitiveId = attributes.primitiveId.array;
              attributes.primitiveId.needsUpdate = true;
          }
          var k, l;
          var radius = 0;
          var normX = 0;
          var normY = 0;
          var normZ = 0;
          var biX = 0;
          var biY = 0;
          var biZ = 0;
          var posX = 0;
          var posY = 0;
          var posZ = 0;
          var cxArr = [];
          var cyArr = [];
          var cx1Arr = [];
          var cy1Arr = [];
          var cx2Arr = [];
          var cy2Arr = [];
          if (position) {
              for (var j = 0; j < radialSegments; ++j) {
                  var v = (j / radialSegments) * 2 * Math.PI;
                  cxArr[j] = aspectRatio * Math.cos(v);
                  cyArr[j] = Math.sin(v);
                  cx1Arr[j] = aspectRatio * Math.cos(v - 0.01);
                  cy1Arr[j] = Math.sin(v - 0.01);
                  cx2Arr[j] = aspectRatio * Math.cos(v + 0.01);
                  cy2Arr[j] = Math.sin(v + 0.01);
              }
          }
          for (var i = 0; i < n; ++i) {
              k = i * 3;
              l = k * radialSegments;
              if (position && tangent && normal && binormal && size) {
                  vTangent.set(tangent[k], tangent[k + 1], tangent[k + 2]);
                  normX = normal[k];
                  normY = normal[k + 1];
                  normZ = normal[k + 2];
                  biX = binormal[k];
                  biY = binormal[k + 1];
                  biZ = binormal[k + 2];
                  posX = position[k];
                  posY = position[k + 1];
                  posZ = position[k + 2];
                  radius = size[i];
              }
              for (var j$1 = 0; j$1 < radialSegments; ++j$1) {
                  var s = l + j$1 * 3;
                  if (position) {
                      var cx = -radius * cxArr[j$1]; // TODO: Hack: Negating it so it faces outside.
                      var cy = radius * cyArr[j$1];
                      var cx1 = -radius * cx1Arr[j$1];
                      var cy1 = radius * cy1Arr[j$1];
                      var cx2 = -radius * cx2Arr[j$1];
                      var cy2 = radius * cy2Arr[j$1];
                      meshPosition[s] = posX + cx * normX + cy * biX;
                      meshPosition[s + 1] = posY + cx * normY + cy * biY;
                      meshPosition[s + 2] = posZ + cx * normZ + cy * biZ;
                      // TODO half of these are symmetric
                      vMeshNormal.set(
                      // ellipse tangent approximated as vector from/to adjacent points
                      (cx2 * normX + cy2 * biX) - (cx1 * normX + cy1 * biX), (cx2 * normY + cy2 * biY) - (cx1 * normY + cy1 * biY), (cx2 * normZ + cy2 * biZ) - (cx1 * normZ + cy1 * biZ)).cross(vTangent);
                      meshNormal[s] = vMeshNormal.x;
                      meshNormal[s + 1] = vMeshNormal.y;
                      meshNormal[s + 2] = vMeshNormal.z;
                  }
                  if (color) {
                      meshColor[s] = color[k];
                      meshColor[s + 1] = color[k + 1];
                      meshColor[s + 2] = color[k + 2];
                  }
                  if (primitiveId) {
                      meshPrimitiveId[i * radialSegments + j$1] = primitiveId[i];
                  }
              }
          }
          // front cap
          k = 0;
          l = n * 3 * radialSegments;
          for (var j$2 = 0; j$2 < radialSegments; ++j$2) {
              var s$1 = k + j$2 * 3;
              var t = l + j$2 * 3;
              if (position && tangent) {
                  meshPosition[t] = meshPosition[s$1];
                  meshPosition[t + 1] = meshPosition[s$1 + 1];
                  meshPosition[t + 2] = meshPosition[s$1 + 2];
                  meshNormal[t] = tangent[k];
                  meshNormal[t + 1] = tangent[k + 1];
                  meshNormal[t + 2] = tangent[k + 2];
              }
              if (color) {
                  meshColor[t] = meshColor[s$1];
                  meshColor[t + 1] = meshColor[s$1 + 1];
                  meshColor[t + 2] = meshColor[s$1 + 2];
              }
              if (primitiveId) {
                  meshPrimitiveId[n * radialSegments + j$2] = meshPrimitiveId[0 + j$2];
              }
          }
          // back cap
          k = (n - 1) * 3 * radialSegments;
          l = (n + 1) * 3 * radialSegments;
          for (var j$3 = 0; j$3 < radialSegments; ++j$3) {
              var s$2 = k + j$3 * 3;
              var t$1 = l + j$3 * 3;
              if (position && tangent) {
                  meshPosition[t$1] = meshPosition[s$2];
                  meshPosition[t$1 + 1] = meshPosition[s$2 + 1];
                  meshPosition[t$1 + 2] = meshPosition[s$2 + 2];
                  meshNormal[t$1] = tangent[n1 * 3];
                  meshNormal[t$1 + 1] = tangent[n1 * 3 + 1];
                  meshNormal[t$1 + 2] = tangent[n1 * 3 + 2];
              }
              if (color) {
                  meshColor[t$1] = meshColor[s$2];
                  meshColor[t$1 + 1] = meshColor[s$2 + 1];
                  meshColor[t$1 + 2] = meshColor[s$2 + 2];
              }
              if (primitiveId) {
                  meshPrimitiveId[(n + 1) * radialSegments + j$3] = meshPrimitiveId[(n - 1) * radialSegments + j$3];
              }
          }
      };
      TubeMeshBuffer.prototype.makeIndex = function makeIndex () {
          var index = this.geometry.getIndex();
          if (!index) {
              Log.error('Index is null');
              return;
          }
          var meshIndex = index.array;
          var n = this.size2;
          var n1 = n - 1;
          var capTriangles = this.capTriangles;
          var radialSegments = this.parameters.radialSegments;
          var radialSegments1 = this.parameters.radialSegments + 1;
          var k, l;
          for (var i = 0; i < n1; ++i) {
              var k$1 = i * radialSegments * 3 * 2;
              var irs = i * radialSegments;
              var irs1 = (i + 1) * radialSegments;
              for (var j = 0; j < radialSegments; ++j) {
                  l = k$1 + j * 3 * 2;
                  // meshIndex[ l + 0 ] = irs + ( ( j + 0 ) % radialSegments );
                  meshIndex[l] = irs + j;
                  meshIndex[l + 1] = irs + ((j + 1) % radialSegments);
                  // meshIndex[ l + 2 ] = irs1 + ( ( j + 0 ) % radialSegments );
                  meshIndex[l + 2] = irs1 + j;
                  // meshIndex[ l + 3 ] = irs1 + ( ( j + 0 ) % radialSegments );
                  meshIndex[l + 3] = irs1 + j;
                  meshIndex[l + 4] = irs + ((j + 1) % radialSegments);
                  meshIndex[l + 5] = irs1 + ((j + 1) % radialSegments);
              }
          }
          // capping
          var strip = [0];
          for (var j$1 = 1; j$1 < radialSegments1 / 2; ++j$1) {
              strip.push(j$1);
              if (radialSegments - j$1 !== j$1) {
                  strip.push(radialSegments - j$1);
              }
          }
          // front cap
          l = n1 * radialSegments * 3 * 2;
          k = n * radialSegments;
          for (var j$2 = 0; j$2 < strip.length - 2; ++j$2) {
              if (j$2 % 2 === 0) {
                  meshIndex[l + j$2 * 3 + 0] = k + strip[j$2 + 0];
                  meshIndex[l + j$2 * 3 + 1] = k + strip[j$2 + 1];
                  meshIndex[l + j$2 * 3 + 2] = k + strip[j$2 + 2];
              }
              else {
                  meshIndex[l + j$2 * 3 + 0] = k + strip[j$2 + 2];
                  meshIndex[l + j$2 * 3 + 1] = k + strip[j$2 + 1];
                  meshIndex[l + j$2 * 3 + 2] = k + strip[j$2 + 0];
              }
          }
          // back cap
          l = n1 * radialSegments * 3 * 2 + 3 * capTriangles;
          k = n * radialSegments + radialSegments;
          for (var j$3 = 0; j$3 < strip.length - 2; ++j$3) {
              if (j$3 % 2 === 0) {
                  meshIndex[l + j$3 * 3 + 0] = k + strip[j$3 + 0];
                  meshIndex[l + j$3 * 3 + 1] = k + strip[j$3 + 1];
                  meshIndex[l + j$3 * 3 + 2] = k + strip[j$3 + 2];
              }
              else {
                  meshIndex[l + j$3 * 3 + 0] = k + strip[j$3 + 2];
                  meshIndex[l + j$3 * 3 + 1] = k + strip[j$3 + 1];
                  meshIndex[l + j$3 * 3 + 2] = k + strip[j$3 + 0];
              }
          }
      };

      Object.defineProperties( TubeMeshBuffer.prototype, prototypeAccessors );

      return TubeMeshBuffer;
  }(MeshBuffer));

  /**
   * @file Cartoon Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Cartoon representation. Show a thick ribbon that
   * smoothly connecting backbone atoms in polymers.
   *
   * __Name:__ _cartoon_
   *
   * @example
   * stage.loadFile( "rcsb://1crn" ).then( function( o ){
   *     o.addRepresentation( "cartoon" );
   *     o.autoView();
   * } );
   */
  var CartoonRepresentation = /*@__PURE__*/(function (StructureRepresentation) {
      function CartoonRepresentation(structure, viewer, params) {
          StructureRepresentation.call(this, structure, viewer, params);
          this.type = 'cartoon';
          this.parameters = Object.assign({
              aspectRatio: {
                  type: 'number', precision: 1, max: 10.0, min: 1.0, rebuild: true
              },
              subdiv: {
                  type: 'integer', max: 50, min: 1, rebuild: true
              },
              radialSegments: {
                  type: 'integer', max: 50, min: 1, rebuild: true
              },
              tension: {
                  type: 'number', precision: 1, max: 1.0, min: 0.1
              },
              capped: {
                  type: 'boolean', rebuild: true
              },
              smoothSheet: {
                  type: 'boolean', rebuild: true
              }
          }, this.parameters);
          this.init(params);
      }

      if ( StructureRepresentation ) CartoonRepresentation.__proto__ = StructureRepresentation;
      CartoonRepresentation.prototype = Object.create( StructureRepresentation && StructureRepresentation.prototype );
      CartoonRepresentation.prototype.constructor = CartoonRepresentation;
      CartoonRepresentation.prototype.init = function init (params) {
          var p = params || {};
          p.colorScheme = defaults(p.colorScheme, 'chainname');
          p.colorScale = defaults(p.colorScale, 'RdYlBu');
          p.radiusType = defaults(p.radiusType, 'sstruc');
          p.radiusScale = defaults(p.radiusScale, 0.7);
          p.useInteriorColor = defaults(p.useInteriorColor, true);
          this.aspectRatio = defaults(p.aspectRatio, 5.0);
          this.tension = defaults(p.tension, NaN);
          this.capped = defaults(p.capped, true);
          this.smoothSheet = defaults(p.smoothSheet, false);
          if (p.quality === 'low') {
              this.subdiv = 3;
              this.radialSegments = 6;
          }
          else if (p.quality === 'medium') {
              this.subdiv = 6;
          }
          else if (p.quality === 'high') {
              this.subdiv = 12;
          }
          else {
              this.subdiv = defaults(p.subdiv, 6);
          }
          StructureRepresentation.prototype.init.call(this, p);
      };
      CartoonRepresentation.prototype.getSplineParams = function getSplineParams (params) {
          return Object.assign({
              subdiv: this.subdiv,
              tension: this.tension,
              directional: this.aspectRatio !== 1.0,
              smoothSheet: this.smoothSheet
          }, params);
      };
      CartoonRepresentation.prototype.getSpline = function getSpline (polymer) {
          return new Spline(polymer, this.getSplineParams());
      };
      CartoonRepresentation.prototype.getAspectRatio = function getAspectRatio (polymer) {
          return polymer.isCg() ? 1.0 : this.aspectRatio;
      };
      CartoonRepresentation.prototype.getAtomRadius = function getAtomRadius (atom) {
          return atom.isTrace() ? StructureRepresentation.prototype.getAtomRadius.call(this, atom) : 0;
      };
      CartoonRepresentation.prototype.createData = function createData (sview) {
          var this$1$1 = this;

          var bufferList = [];
          var polymerList = [];
          this.structure.eachPolymer(function (polymer) {
              if (polymer.residueCount < 4)
                  { return; }
              polymerList.push(polymer);
              var spline = this$1$1.getSpline(polymer);
              var aspectRatio = this$1$1.getAspectRatio(polymer);
              var subPos = spline.getSubdividedPosition();
              var subOri = spline.getSubdividedOrientation();
              var subCol = spline.getSubdividedColor(this$1$1.getColorParams());
              var subPick = spline.getSubdividedPicking();
              var subSize = spline.getSubdividedSize(this$1$1.getRadiusParams());
              bufferList.push(new TubeMeshBuffer(Object.assign({}, subPos, subOri, subCol, subPick, subSize), this$1$1.getBufferParams({
                  radialSegments: this$1$1.radialSegments,
                  aspectRatio: aspectRatio,
                  capped: this$1$1.capped
              })));
          }, sview.getSelection());
          return {
              bufferList: bufferList,
              polymerList: polymerList
          };
      };
      CartoonRepresentation.prototype.updateData = function updateData (what, data) {
          if (exports.Debug)
              { Log.time(this.type + ' repr update'); }
          what = what || {};
          for (var i = 0, il = data.polymerList.length; i < il; ++i) {
              var bufferData = {};
              var polymer = data.polymerList[i];
              var spline = this.getSpline(polymer);
              var aspectRatio = this.getAspectRatio(polymer);
              Object.assign(data.bufferList[i], { aspectRatio: aspectRatio });
              if (what.position || what.radius) {
                  var subPos = spline.getSubdividedPosition();
                  var subOri = spline.getSubdividedOrientation();
                  var subSize = spline.getSubdividedSize(this.getRadiusParams(aspectRatio));
                  bufferData.position = subPos.position;
                  bufferData.normal = subOri.normal;
                  bufferData.binormal = subOri.binormal;
                  bufferData.tangent = subOri.tangent;
                  bufferData.size = subSize.size;
              }
              if (what.color) {
                  var subCol = spline.getSubdividedColor(this.getColorParams());
                  bufferData.color = subCol.color;
              }
              if (what.picking) {
                  var subPick = spline.getSubdividedPicking();
                  bufferData.picking = subPick.picking;
              }
              data.bufferList[i].setAttributes(bufferData);
          }
          if (exports.Debug)
              { Log.timeEnd(this.type + ' repr update'); }
      };
      CartoonRepresentation.prototype.setParameters = function setParameters (params) {
          var rebuild = false;
          var what = {};
          if (params && params.aspectRatio) {
              what.radius = true;
          }
          if (params && params.tension) {
              what.position = true;
          }
          StructureRepresentation.prototype.setParameters.call(this, params, what, rebuild);
          return this;
      };

      return CartoonRepresentation;
  }(StructureRepresentation));
  RepresentationRegistry.add('cartoon', CartoonRepresentation);

  /**
   * @file Contact Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Contact representation.
   */
  var ContactRepresentation = /*@__PURE__*/(function (StructureRepresentation) {
      function ContactRepresentation(structure, viewer, params) {
          StructureRepresentation.call(this, structure, viewer, params);
          this.type = 'contact';
          this.parameters = Object.assign({
              hydrogenBond: {
                  type: 'boolean', rebuild: true
              },
              weakHydrogenBond: {
                  type: 'boolean', rebuild: true
              },
              waterHydrogenBond: {
                  type: 'boolean', rebuild: true
              },
              backboneHydrogenBond: {
                  type: 'boolean', rebuild: true
              },
              hydrophobic: {
                  type: 'boolean', rebuild: true
              },
              halogenBond: {
                  type: 'boolean', rebuild: true
              },
              ionicInteraction: {
                  type: 'boolean', rebuild: true
              },
              metalCoordination: {
                  type: 'boolean', rebuild: true
              },
              cationPi: {
                  type: 'boolean', rebuild: true
              },
              piStacking: {
                  type: 'boolean', rebuild: true
              },
              filterSele: {
                  type: 'text', rebuild: true
              },
              labelVisible: {
                  type: 'boolean', rebuild: true
              },
              labelFixedSize: {
                  type: 'boolean', buffer: 'fixedSize'
              },
              labelSize: {
                  type: 'number', precision: 3, max: 10.0, min: 0.001, rebuild: true
              },
              labelUnit: {
                  type: 'select',
                  rebuild: true,
                  options: { '': '', angstrom: 'angstrom', nm: 'nm' }
              },
              maxHydrophobicDist: {
                  type: 'number', precision: 1, max: 10, min: 0.1, rebuild: true
              },
              maxHbondDist: {
                  type: 'number', precision: 1, max: 10, min: 0.1, rebuild: true
              },
              maxHbondSulfurDist: {
                  type: 'number', precision: 1, max: 10, min: 0.1, rebuild: true
              },
              maxHbondAccAngle: {
                  type: 'integer', max: 180, min: 0, rebuild: true
              },
              maxHbondDonAngle: {
                  type: 'integer', max: 180, min: 0, rebuild: true
              },
              maxHbondAccPlaneAngle: {
                  type: 'integer', max: 90, min: 0, rebuild: true
              },
              maxHbondDonPlaneAngle: {
                  type: 'integer', max: 90, min: 0, rebuild: true
              },
              maxPiStackingDist: {
                  type: 'number', precision: 1, max: 10, min: 0.1, rebuild: true
              },
              maxPiStackingOffset: {
                  type: 'number', precision: 1, max: 10, min: 0.1, rebuild: true
              },
              maxPiStackingAngle: {
                  type: 'integer', max: 180, min: 0, rebuild: true
              },
              maxCationPiDist: {
                  type: 'number', precision: 1, max: 10, min: 0.1, rebuild: true
              },
              maxCationPiOffset: {
                  type: 'number', precision: 1, max: 10, min: 0.1, rebuild: true
              },
              maxIonicDist: {
                  type: 'number', precision: 1, max: 10, min: 0.1, rebuild: true
              },
              maxHalogenBondDist: {
                  type: 'number', precision: 1, max: 10, min: 0.1, rebuild: true
              },
              maxHalogenBondAngle: {
                  type: 'integer', max: 180, min: 0, rebuild: true
              },
              maxMetalDist: {
                  type: 'number', precision: 1, max: 10, min: 0.1, rebuild: true
              },
              refineSaltBridges: {
                  type: 'boolean', rebuild: true
              },
              masterModelIndex: {
                  type: 'integer', max: 1000, min: -1, rebuild: true
              },
              lineOfSightDistFactor: {
                  type: 'number', precision: 1, max: 10, min: 0.0, rebuild: true
              },
              radialSegments: true,
              disableImpostor: true
          }, this.parameters);
          this.init(params);
      }

      if ( StructureRepresentation ) ContactRepresentation.__proto__ = StructureRepresentation;
      ContactRepresentation.prototype = Object.create( StructureRepresentation && StructureRepresentation.prototype );
      ContactRepresentation.prototype.constructor = ContactRepresentation;
      ContactRepresentation.prototype.init = function init (params) {
          var p = params || {};
          p.radiusSize = defaults(p.radiusSize, 0.05);
          p.useInteriorColor = defaults(p.useInteriorColor, true);
          this.hydrogenBond = defaults(p.hydrogenBond, true);
          this.weakHydrogenBond = defaults(p.weakHydrogenBond, false);
          this.waterHydrogenBond = defaults(p.waterHydrogenBond, false);
          this.backboneHydrogenBond = defaults(p.backboneHydrogenBond, false);
          this.hydrophobic = defaults(p.hydrophobic, false);
          this.halogenBond = defaults(p.halogenBond, true);
          this.ionicInteraction = defaults(p.ionicInteraction, true);
          this.metalCoordination = defaults(p.metalCoordination, true);
          this.cationPi = defaults(p.cationPi, true);
          this.piStacking = defaults(p.piStacking, true);
          this.filterSele = defaults(p.filterSele, '');
          this.labelVisible = defaults(p.labelVisible, false);
          this.labelFixedSize = defaults(p.labelFixedSize, false);
          this.labelSize = defaults(p.labelSize, 2.0);
          this.labelUnit = defaults(p.labelUnit, '');
          this.maxHydrophobicDist = defaults(p.maxHydrophobicDist, 4.0);
          this.maxHbondDist = defaults(p.maxHbondDist, 3.5);
          this.maxHbondSulfurDist = defaults(p.maxHbondSulfurDist, 4.1);
          this.maxHbondAccAngle = defaults(p.maxHbondAccAngle, 45);
          this.maxHbondDonAngle = defaults(p.maxHbondDonAngle, 45);
          this.maxHbondAccPlaneAngle = defaults(p.maxHbondAccPlaneAngle, 90);
          this.maxHbondDonPlaneAngle = defaults(p.maxHbondDonPlaneAngle, 30);
          this.maxPiStackingDist = defaults(p.maxPiStackingDist, 5.5);
          this.maxPiStackingOffset = defaults(p.maxPiStackingOffset, 2.0);
          this.maxPiStackingAngle = defaults(p.maxPiStackingAngle, 30);
          this.maxCationPiDist = defaults(p.maxCationPiDist, 6.0);
          this.maxCationPiOffset = defaults(p.maxCationPiOffset, 2.0);
          this.maxIonicDist = defaults(p.maxIonicDist, 5.0);
          this.maxHalogenBondDist = defaults(p.maxHalogenBondDist, 3.5);
          this.maxHalogenBondAngle = defaults(p.maxHalogenBondAngle, 30);
          this.maxMetalDist = defaults(p.maxMetalDist, 3.0);
          this.refineSaltBridges = defaults(p.refineSaltBridges, true);
          this.masterModelIndex = defaults(p.masterModelIndex, -1);
          this.lineOfSightDistFactor = defaults(p.lineOfSightDistFactor, 1.0);
          StructureRepresentation.prototype.init.call(this, p);
      };
      ContactRepresentation.prototype.getAtomRadius = function getAtomRadius () {
          return 0;
      };
      ContactRepresentation.prototype.getContactData = function getContactData$1 (sview) {
          var params = {
              maxHydrophobicDist: this.maxHydrophobicDist,
              maxHbondDist: this.maxHbondDist,
              maxHbondSulfurDist: this.maxHbondSulfurDist,
              maxHbondAccAngle: this.maxHbondAccAngle,
              maxHbondDonAngle: this.maxHbondDonAngle,
              maxHbondAccPlaneAngle: this.maxHbondAccPlaneAngle,
              maxHbondDonPlaneAngle: this.maxHbondDonPlaneAngle,
              maxPiStackingDist: this.maxPiStackingDist,
              maxPiStackingOffset: this.maxPiStackingOffset,
              maxPiStackingAngle: this.maxPiStackingAngle,
              maxCationPiDist: this.maxCationPiDist,
              maxCationPiOffset: this.maxCationPiOffset,
              maxIonicDist: this.maxIonicDist,
              maxHalogenBondDist: this.maxHalogenBondDist,
              maxHalogenBondAngle: this.maxHalogenBondAngle,
              maxMetalDist: this.maxMetalDist,
              refineSaltBridges: this.refineSaltBridges,
              masterModelIndex: this.masterModelIndex,
              lineOfSightDistFactor: this.lineOfSightDistFactor
          };
          var dataParams = {
              hydrogenBond: this.hydrogenBond,
              weakHydrogenBond: this.weakHydrogenBond,
              waterHydrogenBond: this.waterHydrogenBond,
              backboneHydrogenBond: this.backboneHydrogenBond,
              hydrophobic: this.hydrophobic,
              halogenBond: this.halogenBond,
              ionicInteraction: this.ionicInteraction,
              metalCoordination: this.metalCoordination,
              cationPi: this.cationPi,
              piStacking: this.piStacking,
              radius: this.radiusSize * this.radiusScale,
              filterSele: this.filterSele
          };
          var contacts = calculateContacts(sview, params);
          return getContactData(contacts, sview, dataParams);
      };
      ContactRepresentation.prototype.createData = function createData (sview) {
          var contactData = this.getContactData(sview);
          var bufferList = [
              new CylinderBuffer(getFixedCountDashData(contactData), this.getBufferParams({
                  sphereDetail: 1,
                  dullInterior: true,
                  disableImpostor: this.disableImpostor
              }))
          ];
          if (this.labelVisible) {
              var labelParams = {
                  size: this.labelSize,
                  unit: this.labelUnit
              };
              bufferList.push(new TextBuffer(getLabelData(contactData, labelParams), this.getBufferParams({ fixedSize: this.labelFixedSize })));
          }
          return { bufferList: bufferList };
      };

      return ContactRepresentation;
  }(StructureRepresentation));
  RepresentationRegistry.add('contact', ContactRepresentation);

  /**
   * @file Dihedral Representation
   * @author Fred Ludlow <fred.ludlow@gmail.com>
   * @private
   */
  /**
   * Dihedral representation object
   *
   * Reperesentation consists of three parts, visibility can be set for each
   * label - text label indicating dihedral angle
   * line - line indicating four positions that define the dihedral
   * sector - filled arc section
   *
   * @param {Structure} structure - the structure to measure angles in
   * @param {Viewer} viewer - a viewer object
   * @param {AngleRepresentationParameters} params - angle representation parameters
   */
  var DihedralRepresentation = /*@__PURE__*/(function (MeasurementRepresentation) {
      function DihedralRepresentation(structure, viewer, params) {
          MeasurementRepresentation.call(this, structure, viewer, params);
          this.type = 'dihedral';
          this.parameters = Object.assign({
              atomQuad: {
                  type: 'hidden', rebuild: true
              },
              extendLine: {
                  type: 'boolean', rebuild: true, default: true
              },
              lineVisible: {
                  type: 'boolean', default: true
              },
              planeVisible: {
                  type: 'boolean', default: true
              },
              sectorVisible: {
                  type: 'boolean', default: true
              }
          }, this.parameters);
          this.init(params);
      }

      if ( MeasurementRepresentation ) DihedralRepresentation.__proto__ = MeasurementRepresentation;
      DihedralRepresentation.prototype = Object.create( MeasurementRepresentation && MeasurementRepresentation.prototype );
      DihedralRepresentation.prototype.constructor = DihedralRepresentation;
      DihedralRepresentation.prototype.init = function init (params) {
          var p = params || {};
          p.side = defaults(p.side, 'double');
          p.opacity = defaults(p.opacity, 0.5);
          this.atomQuad = defaults(p.atomQuad, []);
          this.extendLine = defaults(p.extendLine, true);
          this.lineVisible = defaults(p.lineVisible, true);
          this.planeVisible = defaults(p.planeVisible, true);
          this.sectorVisible = defaults(p.sectorVisible, true);
          MeasurementRepresentation.prototype.init.call(this, p);
      };
      DihedralRepresentation.prototype.createData = function createData (sview) {
          if (!sview.atomCount || !this.atomQuad.length)
              { return; }
          var atomPosition = parseNestedAtoms(sview, this.atomQuad);
          var dihedralData = getDihedralData(atomPosition, {
              extendLine: this.extendLine
          });
          var n = this.n = dihedralData.labelText.length;
          var labelColor = new Color(this.labelColor);
          this.textBuffer = new TextBuffer({
              position: dihedralData.labelPosition,
              size: uniformArray(n, this.labelSize),
              color: uniformArray3(n, labelColor.r, labelColor.g, labelColor.b),
              text: dihedralData.labelText
          }, this.getLabelBufferParams());
          var c = new Color(this.colorValue);
          this.lineLength = dihedralData.linePosition1.length / 3;
          var lineColor = uniformArray3(this.lineLength, c.r, c.g, c.b);
          this.lineBuffer = new WideLineBuffer(getFixedLengthWrappedDashData({
              position1: dihedralData.linePosition1,
              position2: dihedralData.linePosition2,
              color: lineColor,
              color2: lineColor
          }), this.getBufferParams({
              linewidth: this.linewidth,
              visible: this.lineVisible,
              opacity: this.lineOpacity
          }));
          this.planeLength = dihedralData.planePosition.length / 3;
          this.planeBuffer = new MeshBuffer({
              position: dihedralData.planePosition,
              color: uniformArray3(this.planeLength, c.r, c.g, c.b)
          }, this.getBufferParams({
              visible: this.planeVisible
          }));
          this.sectorLength = dihedralData.sectorPosition.length / 3;
          this.sectorBuffer = new MeshBuffer({
              position: dihedralData.sectorPosition,
              color: uniformArray3(this.sectorLength, c.r, c.g, c.b)
          }, this.getBufferParams({
              visible: this.sectorVisible
          }));
          return {
              bufferList: [
                  this.textBuffer,
                  this.lineBuffer,
                  this.planeBuffer,
                  this.sectorBuffer
              ]
          };
      };
      DihedralRepresentation.prototype.updateData = function updateData (what, data) {
          MeasurementRepresentation.prototype.updateData.call(this, what, data);
          var lineData = {};
          var planeData = {};
          var sectorData = {};
          if (what.color) {
              var c = new Color(this.colorValue);
              Object.assign(lineData, {
                  color: uniformArray3(this.lineLength, c.r, c.g, c.b),
                  color2: uniformArray3(this.lineLength, c.r, c.g, c.b)
              });
              Object.assign(planeData, {
                  color: uniformArray3(this.planeLength, c.r, c.g, c.b)
              });
              Object.assign(sectorData, {
                  color: uniformArray3(this.sectorLength, c.r, c.g, c.b)
              });
          }
          this.lineBuffer.setAttributes(lineData);
          this.planeBuffer.setAttributes(planeData);
          this.sectorBuffer.setAttributes(sectorData);
      };
      DihedralRepresentation.prototype.setParameters = function setParameters (params) {
          var rebuild = false;
          var what = {};
          MeasurementRepresentation.prototype.setParameters.call(this, params, what, rebuild);
          if (params && (params.lineVisible !== undefined ||
              params.sectorVisible !== undefined ||
              params.planeVisible !== undefined)) {
              this.setVisibility(this.visible);
          }
          if (params && params.lineOpacity) {
              this.lineBuffer.setParameters({ opacity: params.lineOpacity });
          }
          if (params && params.opacity !== undefined) {
              this.lineBuffer.setParameters({ opacity: this.lineOpacity });
          }
          if (params && params.linewidth) {
              this.lineBuffer.setParameters({ linewidth: params.linewidth });
          }
          return this;
      };
      DihedralRepresentation.prototype.setVisibility = function setVisibility (value, noRenderRequest) {
          MeasurementRepresentation.prototype.setVisibility.call(this, value, true);
          if (this.lineBuffer) {
              this.lineBuffer.setVisibility(this.lineVisible && this.visible);
          }
          if (this.planeBuffer) {
              this.planeBuffer.setVisibility(this.planeVisible && this.visible);
          }
          if (this.sectorBuffer) {
              this.sectorBuffer.setVisibility(this.sectorVisible && this.visible);
          }
          if (!noRenderRequest)
              { this.viewer.requestRender(); }
          return this;
      };

      return DihedralRepresentation;
  }(MeasurementRepresentation));
  /**
   * Build the data required to create {Buffer} objects, given positions
   * @param  {Float32Array} atomPosition 3*4*nDihedral array of coordinates
   * @return {Object}              Arrays for building buffers
   */
  function getDihedralData(position, params) {
      if ( params === void 0 ) params = {};

      var angleStep = defaults(params.angleStep, Math.PI / 90);
      var nPos = position.length;
      var n = position.length / 12;
      var angles = new Float32Array(n);
      var labelPosition = new Float32Array(n * 3);
      var labelText = new Array(n);
      // Temporary arrays as don't know output length yet
      var lineTmp1 = new Array(n);
      var lineTmp2 = new Array(n);
      var sectorTmp = new Array(n);
      var planeTmp = new Array(n);
      // Eventual sizes of output arrays
      var totalLines = 0;
      var totalSegments = 0;
      var totalPlanes = 0;
      var p1 = v3new();
      var p2 = v3new();
      var p3 = v3new();
      var p4 = v3new();
      var v21 = v3new();
      var v23 = v3new();
      var v34 = v3new();
      var tmp = v3new();
      var mid = v3new();
      var inPlane1 = v3new();
      var inPlane2 = v3new();
      var start = v3new();
      var end = v3new();
      var cross = v3new();
      var arcPoint = v3new();
      var i = 0; // Actual output index (after skipping inappropriate)
      var loop = function ( p ) {
          // Set Positions
          v3fromArray(p1, position, p);
          v3fromArray(p2, position, p + 3);
          v3fromArray(p3, position, p + 6);
          v3fromArray(p4, position, p + 9);
          // Vectors between points
          v3sub(v21, p1, p2);
          v3sub(v23, p3, p2);
          if (v3length(v23) === 0.0) {
              return; // Can't define axis
          }
          v3sub(v34, p4, p3);
          v3multiplyScalar(tmp, v23, 0.5);
          v3add(mid, p2, tmp);
          v3normalize(v21, v21);
          v3normalize(v23, v23);
          v3normalize(v34, v34);
          // Which side of plane are p1, p4 (are we measuring something that
          // looks more like an improper? e.g. C, CA, CB, N)
          v3sub(tmp, p1, mid);
          var improperStart = v3dot(tmp, v23) > 0.0;
          v3sub(tmp, p4, mid);
          var improperEnd = v3dot(tmp, v23) < 0.0;
          // Calculate vectors perp to v23 (lying in plane (1,2,3) and (2,3,4))
          v3multiplyScalar(tmp, v23, v3dot(v23, v21));
          v3sub(inPlane1, v21, tmp);
          v3multiplyScalar(tmp, v23, v3dot(v23, v34));
          v3sub(inPlane2, v34, tmp);
          if (v3length(inPlane1) === 0.0 || v3length(inPlane2) === 0.0) {
              return; // Indeterminate angle
          }
          v3normalize(inPlane1, inPlane1);
          v3normalize(inPlane2, inPlane2);
          // Can use acos as normalized and non-zero
          var angle = angles[i] = Math.acos(v3dot(inPlane1, inPlane2));
          labelText[i] = (RAD2DEG * angle).toFixed(1) + String.fromCharCode(0x00B0);
          v3cross(cross, inPlane1, v23);
          v3normalize(cross, cross);
          if (v3dot(cross, inPlane2) < 0.0) {
              v3negate(cross, cross); // Ensure cp faces correct way
          }
          calcArcPoint(tmp, mid, inPlane1, cross, angle / 2.0);
          v3toArray(tmp, labelPosition, 3 * i);
          var nSegments = Math.ceil(angle / angleStep);
          // For extended display mode, 4 straight lines plus arc/segment edge
          // For non-extended, 2 straight lines plus segment edge
          var nLines = nSegments + ((params.extendLine) ? 4 : 2);
          // Don't draw planes if not extending lines
          var nPlanes = params.extendLine ? 36 : 0;
          var line1 = new Float32Array(nLines * 3);
          var line2 = new Float32Array(nLines * 3);
          var sector = new Float32Array(nSegments * 9);
          // 2 planes, 2 triangles each per dihedral (2*2*9)
          var plane = new Float32Array(nPlanes);
          lineTmp1[i] = line1;
          lineTmp2[i] = line2;
          sectorTmp[i] = sector;
          planeTmp[i] = plane;
          // Start points for lines/planes, only required
          // if extending lines
          if (params.extendLine) {
              if (improperStart) { // We'll start on the v3->1 line (tmp)
                  v3sub(tmp, p1, p3);
                  v3normalize(tmp, tmp);
                  v3multiplyScalar(start, tmp, 1.0 / v3dot(inPlane1, tmp));
                  v3add(start, start, p3);
              }
              else { // start on the 2->1 line
                  v3multiplyScalar(start, v21, 1.0 / v3dot(inPlane1, v21));
                  v3add(start, start, p2);
              }
              if (improperEnd) { // Finish on 2->4 line
                  v3sub(tmp, p4, p2);
                  v3normalize(tmp, tmp);
                  v3multiplyScalar(end, tmp, 1.0 / v3dot(inPlane2, tmp));
                  v3add(end, end, p2);
              }
              else { // end on the 3->4 line
                  v3multiplyScalar(end, v34, 1.0 / v3dot(inPlane2, v34));
                  v3add(end, end, p3);
              }
          }
          v3add(arcPoint, mid, inPlane1);
          // index into line1, line2
          var li = 0;
          // If extending lines, there's a bit of stuff to do here
          // figuring out start and end positions
          if (params.extendLine) {
              v3toArray(p1, line1, li);
              v3toArray(start, line2, li);
              li += 3;
              v3toArray(start, line1, li);
              v3toArray(arcPoint, line2, li);
              li += 3;
              // Construct plane at start, if not extening lines
              // this is skipped
              v3toArray(start, plane, 0);
              v3toArray(arcPoint, plane, 3);
              v3toArray(improperStart ? p3 : p2, plane, 6);
              v3toArray(improperStart ? p3 : p2, plane, 9);
              v3toArray(arcPoint, plane, 12);
              v3toArray(mid, plane, 15);
          }
          else {
              // Not extending lines
              v3toArray(mid, line1, li);
              v3toArray(arcPoint, line2, li);
              li += 3;
          }
          var appendArcSection = function (a, j) {
              var si = j * 9;
              v3toArray(mid, sector, si);
              v3toArray(arcPoint, sector, si + 3);
              v3toArray(arcPoint, line1, li);
              calcArcPoint(arcPoint, mid, inPlane1, cross, a);
              v3toArray(arcPoint, sector, si + 6);
              v3toArray(arcPoint, line2, li);
              li += 3;
          };
          var j = 0;
          for (var a = angleStep; a < angle; a += angleStep) {
              appendArcSection(a, j++);
          }
          appendArcSection(angle, j++);
          if (params.extendLine) {
              v3toArray(arcPoint, line1, (nLines - 2) * 3);
              v3toArray(end, line2, (nLines - 2) * 3);
              v3toArray(end, line1, (nLines - 1) * 3);
              v3toArray(p4, line2, (nLines - 1) * 3);
              // Construct plane at end
              v3toArray(end, plane, 18);
              v3toArray(arcPoint, plane, 21);
              v3toArray(improperEnd ? p2 : p3, plane, 24);
              v3toArray(improperEnd ? p2 : p3, plane, 27);
              v3toArray(arcPoint, plane, 30);
              v3toArray(mid, plane, 33);
          }
          else {
              v3toArray(arcPoint, line1, li);
              v3toArray(mid, line2, li);
              li += 3;
          }
          totalLines += nLines * 3;
          totalSegments += nSegments * 9;
          totalPlanes += nPlanes;
          i += 1;
      };

      for (var p = 0; p < nPos; p += 12) loop( p );
      var nSuccess = i;
      var linePosition1 = new Float32Array(totalLines);
      var linePosition2 = new Float32Array(totalLines);
      var sectorPosition = new Float32Array(totalSegments);
      var planePosition = new Float32Array(totalPlanes);
      var lineOffset = 0;
      var sectorOffset = 0;
      var planeOffset = 0;
      for (var i$1 = 0; i$1 < nSuccess; i$1++) {
          var lp1 = lineTmp1[i$1];
          var lp2 = lineTmp2[i$1];
          var sp = sectorTmp[i$1];
          var pp = planeTmp[i$1];
          copyArray(lp1, linePosition1, 0, lineOffset, lp1.length);
          copyArray(lp2, linePosition2, 0, lineOffset, lp2.length);
          copyArray(sp, sectorPosition, 0, sectorOffset, sp.length);
          copyArray(pp, planePosition, 0, planeOffset, pp.length);
          lineOffset += lp1.length;
          sectorOffset += sp.length;
          planeOffset += pp.length;
      }
      return {
          labelPosition: labelPosition.subarray(0, nSuccess * 3),
          labelText: labelText.slice(0, nSuccess),
          linePosition1: linePosition1,
          linePosition2: linePosition2,
          planePosition: planePosition,
          sectorPosition: sectorPosition
      };
  }
  RepresentationRegistry.add('dihedral', DihedralRepresentation);

  /**
   * @file Dihedral Histogram Representation
   * @author Rudolfs Petrovs <rudolfs.petrovs@astx.com>
   * @private
   */
  var pointLength = 3; // One Point Length (number of coordinates of one point in 3D)
  var pointsInTriangle = 3;
  function createUpdatedObject(o, updateSource) {
      function hasKey(obj, key) {
          return key in obj;
      }
      var result = Object.assign({}, o); // Shallow copy
      for (var key in result) {
          if (hasKey(result, key) && hasKey(updateSource, key)) {
              result[key] = defaults(updateSource[key], result[key]);
          }
      }
      return result;
  }
  function createColorArray(color, arrayLength) {
      var colorValue = new Color(color);
      var targetArray = new Float32Array(arrayLength * 3);
      uniformArray3(arrayLength, colorValue.r, colorValue.g, colorValue.b, targetArray);
      return targetArray;
  }
  /**
   * Dihedral Histogram representation object
   *
   * Reperesentation consists of several parts:
   * opaqueMiddleDisc - opaque disc in the middle of the dihedral between front and back histograms
   * frontHistogram - circular histogram from the adjacent bond viewpoint
   * backHistogram - circular histogram from the distant bond viewpoint
   * histogramBinBorder - lines, which separate histogram bins
   * bondArrows - lines, which show the actual angle on the histogram disc
   *
   * @param {Structure} structure - the structure to measure angles in
   * @param {Viewer} viewer - a viewer object
   * @param {DihedralHistogramRepresentationParameters} params - Dihedral histogram representation parameters
   */
  var DihedralHistogramRepresentation = /*@__PURE__*/(function (StructureRepresentation) {
      function DihedralHistogramRepresentation(structure, viewer, params) {
          StructureRepresentation.call(this, structure, viewer, params);
          this.type = 'dihedral-histogram';
          this.parameters = Object.assign({
              histogramsData: {
                  type: 'hidden', rebuild: true
              },
              histogramBinBorderVisible: {
                  type: 'boolean', default: true
              },
              scaleBinToSectorArea: {
                  type: 'boolean',
                  rebuild: true,
                  default: false
              }
          }, this.parameters);
          this.init(params);
      }

      if ( StructureRepresentation ) DihedralHistogramRepresentation.__proto__ = StructureRepresentation;
      DihedralHistogramRepresentation.prototype = Object.create( StructureRepresentation && StructureRepresentation.prototype );
      DihedralHistogramRepresentation.prototype.constructor = DihedralHistogramRepresentation;
      DihedralHistogramRepresentation.prototype.init = function init (params) {
          var p = params || {};
          var defaultColorData = {
              histogramBinBorderColor: 'grey',
              adjacentBondArrowColor: 'black',
              distantBondArrowColor: 'magenta',
              frontHistogramColor: 'green',
              backHistogramColor: 'blue',
              opaqueMiddleDiscColor: 'white'
          };
          var colorData = createUpdatedObject(defaultColorData, p);
          Object.assign(this, colorData);
          var defaultParameters = {
              histogramsData: [],
              histogramOpacity: 1.0,
              opaqueMiddleDiscVisible: true,
              opaqueMiddleDiscOpacity: 1.0,
              histogramBinBorderVisible: true,
              histogramBinBorderWidth: 1,
              histogramBinBorderOpacity: 0.5,
              bondArrowVisible: true,
              bondArrowWidth: 2,
              bondArrowOpacity: 1.0,
              scaleBinToSectorArea: false,
          };
          var parameters = createUpdatedObject(defaultParameters, p);
          Object.assign(this, parameters);
          this.histogramsData.forEach(function (x) {
              var specificColorData = createUpdatedObject(colorData, x);
              Object.assign(x, specificColorData);
          });
          p.side = defaults(p.side, 'double');
          p.opacity = defaults(p.opacity, 0.5);
          p.radiusType = defaults(p.radiusType, 'size');
          p.radiusSize = defaults(p.radiusSize, 0.15);
          StructureRepresentation.prototype.init.call(this, p);
      };
      DihedralHistogramRepresentation.prototype.getHistogramBinBorderBufferParameters = function getHistogramBinBorderBufferParameters () {
          return this.getBufferParams({
              linewidth: this.histogramBinBorderWidth,
              visible: this.histogramBinBorderVisible,
              opacity: this.histogramBinBorderOpacity,
          });
      };
      DihedralHistogramRepresentation.prototype.getBondArrowsBufferParameters = function getBondArrowsBufferParameters () {
          return this.getBufferParams({
              linewidth: this.bondArrowWidth,
              visible: this.bondArrowVisible,
              opacity: this.bondArrowOpacity,
          });
      };
      DihedralHistogramRepresentation.prototype.getOpaqueMiddleDiscBufferParameters = function getOpaqueMiddleDiscBufferParameters () {
          return this.getBufferParams({
              visible: this.opaqueMiddleDiscVisible,
              opacity: this.opaqueMiddleDiscOpacity
          });
      };
      DihedralHistogramRepresentation.prototype.getHistogramBufferParameters = function getHistogramBufferParameters () {
          return this.getBufferParams({
              visible: true,
              opacity: this.histogramOpacity,
              side: "double"
          });
      };
      DihedralHistogramRepresentation.prototype.createData = function createData (sview) {
          if (!sview.atomCount || !this.histogramsData.length)
              { return; }
          this.histogramsData.forEach(function (x) { return x.atomPositions = parseNestedAtoms(sview, [x.atomQuad]); });
          var scaleData = this.scaleBinToSectorArea ? function (y) { return Math.sqrt(y); } : function (y) { return y; };
          this.histogramsData.forEach(function (x) { return x.histogram360Scaled = x.histogram360.map(scaleData); });
          function Float32Concat(arrays) {
              var lengths = arrays.map(function (x) { return x.length; });
              var result = new Float32Array(arraySum(lengths));
              var accumulatedOffset = 0;
              for (var i = 0; i < arrays.length; i++) {
                  result.set(arrays[i], accumulatedOffset);
                  accumulatedOffset += arrays[i].length;
              }
              return result;
          }
          function createWideLineBuffer(linesList, params) {
              return new WideLineBuffer({
                  position1: Float32Concat(linesList.map(function (x) { return x.startPoints; })),
                  position2: Float32Concat(linesList.map(function (x) { return x.endPoints; })),
                  color: Float32Concat(linesList.map(function (x) { return x.startColors; })),
                  color2: Float32Concat(linesList.map(function (x) { return x.endColors; })),
              }, params);
          }
          function createMeshBuffer(mesh, params) {
              return new MeshBuffer({
                  position: Float32Concat(mesh.map(function (x) { return x.triangles; })),
                  color: Float32Concat(mesh.map(function (x) { return x.triangleColors; }))
              }, params);
          }
          var dihedralDataArray = [];
          for (var i = 0; i < this.histogramsData.length; i++) {
              var dihedralData = undefined;
              var currentHistogramData = this.histogramsData[i];
              var currentHistogram360 = currentHistogramData.histogram360;
              if (currentHistogram360.length >= 3) {
                  dihedralData = calculateDihedralHistogram(currentHistogramData);
              }
              if (typeof dihedralData === "undefined")
                  { continue; }
              dihedralDataArray.push(dihedralData);
          }
          this.frontHistogramBinBordersBuffer = createWideLineBuffer(dihedralDataArray.map(function (x) { return x.frontHistogramBinBorders; }), this.getHistogramBinBorderBufferParameters());
          this.backHistogramBinBordersBuffer = createWideLineBuffer(dihedralDataArray.map(function (x) { return x.backHistogramBinBorders; }), this.getHistogramBinBorderBufferParameters());
          this.adjacentBondArrowsBuffer = createWideLineBuffer(dihedralDataArray.map(function (x) { return x.adjacentBondArrows; }), this.getBondArrowsBufferParameters());
          this.distantBondArrowsBuffer = createWideLineBuffer(dihedralDataArray.map(function (x) { return x.distantBondArrows; }), this.getBondArrowsBufferParameters());
          this.opaqueMiddleDiscBuffer = createMeshBuffer(dihedralDataArray.map(function (x) { return x.opaqueMiddleDisc; }), this.getOpaqueMiddleDiscBufferParameters());
          this.frontHistogramBuffer = createMeshBuffer(dihedralDataArray.map(function (x) { return x.frontHistogram; }), this.getHistogramBufferParameters());
          this.backHistogramBuffer = createMeshBuffer(dihedralDataArray.map(function (x) { return x.backHistogram; }), this.getHistogramBufferParameters());
          return {
              bufferList: [].concat(this.frontHistogramBinBordersBuffer, this.backHistogramBinBordersBuffer, this.adjacentBondArrowsBuffer, this.distantBondArrowsBuffer, this.opaqueMiddleDiscBuffer, this.frontHistogramBuffer, this.backHistogramBuffer)
          };
      };
      DihedralHistogramRepresentation.prototype.setParameters = function setParameters (params) {
          var rebuild = false;
          var what = {};
          StructureRepresentation.prototype.setParameters.call(this, params, what, rebuild);
          if (params && (params.histogramBinBorderVisible !== undefined)) {
              this.setVisibility(this.visible);
          }
          return this;
      };
      DihedralHistogramRepresentation.prototype.setVisibility = function setVisibility (value, noRenderRequest) {
          StructureRepresentation.prototype.setVisibility.call(this, value, true);
          if (this.frontHistogramBinBordersBuffer) {
              this.frontHistogramBinBordersBuffer.setVisibility(this.histogramBinBorderVisible);
          }
          if (this.backHistogramBinBordersBuffer) {
              this.backHistogramBinBordersBuffer.setVisibility(this.histogramBinBorderVisible);
          }
          if (!noRenderRequest)
              { this.viewer.requestRender(); }
          return this;
      };

      return DihedralHistogramRepresentation;
  }(StructureRepresentation));
  /**
   * Calculates the data required to create {Buffer} objects for one histogram, given positions
   * @param  Float32Array positionOfDihedralAtoms 3*4 array of coordinates
   * @param  NumberArray histogram array of coordinates
   * @return Arrays for building buffers
   */
  function calculateDihedralHistogram(histogramData) {
      var positionOfDihedralAtoms = histogramData.atomPositions;
      var histogram = histogramData.histogram360Scaled;
      var totalSectorTrianglesInOpaqueMiddleDisc = histogram.length <= 180 ? 360 : histogram.length * 2;
      var frontAndBack = 2;
      var opaqueMiddleDisc = {
          triangles: new Float32Array(totalSectorTrianglesInOpaqueMiddleDisc * pointsInTriangle * pointLength),
          triangleColors: createColorArray(histogramData.opaqueMiddleDiscColor, totalSectorTrianglesInOpaqueMiddleDisc * pointsInTriangle)
      };
      var frontHistogram = {
          triangles: new Float32Array(histogram.length * pointsInTriangle * pointLength),
          triangleColors: createColorArray(histogramData.frontHistogramColor, histogram.length * pointsInTriangle)
      };
      var backHistogram = {
          triangles: new Float32Array(histogram.length * pointsInTriangle * pointLength),
          triangleColors: createColorArray(histogramData.backHistogramColor, histogram.length * pointsInTriangle)
      };
      var frontHistogramBinBorders = {
          startPoints: new Float32Array(histogram.length * pointLength),
          endPoints: new Float32Array(histogram.length * pointLength),
          startColors: createColorArray(histogramData.histogramBinBorderColor, histogram.length),
          endColors: createColorArray(histogramData.histogramBinBorderColor, histogram.length)
      };
      var backHistogramBinBorders = {
          startPoints: new Float32Array(histogram.length * pointLength),
          endPoints: new Float32Array(histogram.length * pointLength),
          startColors: createColorArray(histogramData.histogramBinBorderColor, histogram.length),
          endColors: createColorArray(histogramData.histogramBinBorderColor, histogram.length)
      };
      var adjacentBondArrows = {
          startPoints: new Float32Array(frontAndBack * pointLength),
          endPoints: new Float32Array(frontAndBack * pointLength),
          startColors: createColorArray(histogramData.adjacentBondArrowColor, histogram.length),
          endColors: createColorArray(histogramData.adjacentBondArrowColor, histogram.length)
      };
      var distantBondArrows = {
          startPoints: new Float32Array(frontAndBack * pointLength),
          endPoints: new Float32Array(frontAndBack * pointLength),
          startColors: createColorArray(histogramData.distantBondArrowColor, histogram.length),
          endColors: createColorArray(histogramData.distantBondArrowColor, histogram.length)
      };
      var p1 = v3new();
      var p2 = v3new();
      var p3 = v3new();
      var p4 = v3new();
      var v21 = v3new();
      var v23 = v3new();
      var v32 = v3new();
      var v34 = v3new();
      var mid = v3new();
      var inPlane1 = v3new();
      var inPlane2 = v3new();
      var cross1 = v3new();
      var cross2 = v3new();
      var arcPoint = v3new();
      var tmp = v3new();
      var tmp2 = v3new();
      // Set Atom Coordinates
      var dihedralAtomVectors = [p1, p2, p3, p4];
      for (var i = 0; i < dihedralAtomVectors.length; i++) {
          v3fromArray(dihedralAtomVectors[i], positionOfDihedralAtoms, i * pointLength);
      }
      // Vectors between points
      v3sub(v21, p1, p2);
      v3sub(v23, p3, p2);
      v3sub(v34, p4, p3);
      if (v3length(v23) === 0.0) {
          return; // Can't define axis
      }
      v3multiplyScalar(tmp, v23, 0.5);
      v3add(mid, p2, tmp);
      v3normalize(v21, v21);
      v3normalize(v23, v23);
      v3normalize(v34, v34);
      v3negate(v32, v23);
      // Calculate vectors perp to v23 (lying in plane (1,2,3) and (2,3,4))
      v3multiplyScalar(tmp, v32, v3dot(v32, v21));
      v3sub(inPlane1, v21, tmp);
      v3multiplyScalar(tmp, v23, v3dot(v23, v34));
      v3sub(inPlane2, v34, tmp);
      if (v3length(inPlane1) === 0.0 || v3length(inPlane2) === 0.0) {
          return; // Indeterminate angle
      }
      v3normalize(inPlane1, inPlane1);
      v3normalize(inPlane2, inPlane2);
      // Can use acos as normalized and non-zero
      var absAngle = Math.acos(v3dot(inPlane1, inPlane2));
      v3cross(cross1, v32, inPlane1);
      v3cross(cross2, v23, inPlane2);
      v3normalize(cross1, cross1);
      v3normalize(cross2, cross2);
      var angle = absAngle;
      if (v3dot(cross1, inPlane2) < 0.0) {
          angle = -absAngle;
      }
      v3add(arcPoint, mid, inPlane1);
      // Calculate necessary constants
      var maxHist = Math.max.apply(null, histogram);
      var histBinAngleStep = (Math.PI * 2) / histogram.length;
      function setHistogramBinCoordinates(out, ind, zeroDegreeVector, crossVector, histBinAngleStep) {
          var startOffset = ind * pointsInTriangle * pointLength;
          v3toArray(mid, out, startOffset);
          var scalingFactor = Number(histogram[ind]) / maxHist;
          v3multiplyScalar(tmp, zeroDegreeVector, scalingFactor);
          v3multiplyScalar(tmp2, crossVector, scalingFactor);
          calcArcPoint(arcPoint, mid, tmp, tmp2, ind * histBinAngleStep);
          v3toArray(arcPoint, out, startOffset + 1 * pointLength);
          calcArcPoint(arcPoint, mid, tmp, tmp2, (ind + 1) * histBinAngleStep);
          v3toArray(arcPoint, out, startOffset + 2 * pointLength);
      }
      function setOneSideHistogram(discHistogram, binBorders, ind, zeroDegreeVector, crossVector) {
          // Set Bond Arrows
          copyArray(mid, adjacentBondArrows.startPoints, 0, ind * pointLength, mid.length);
          calcArcPoint(tmp, mid, zeroDegreeVector, crossVector, 0 + histBinAngleStep * 0);
          copyArray(tmp, adjacentBondArrows.endPoints, 0, ind * pointLength, mid.length);
          copyArray(mid, distantBondArrows.startPoints, 0, ind * pointLength, mid.length);
          calcArcPoint(tmp, mid, zeroDegreeVector, crossVector, angle);
          copyArray(tmp, distantBondArrows.endPoints, 0, ind * pointLength, mid.length);
          // Set Histogram Bin Borders
          for (var i = 0; i < histogram.length; i++) {
              copyArray(mid, binBorders.startPoints, 0, i * 3, mid.length);
              calcArcPoint(tmp, mid, zeroDegreeVector, crossVector, 0 + histBinAngleStep * i);
              copyArray(tmp, binBorders.endPoints, 0, i * 3, tmp.length);
          }
          // Set Histogram Bins
          for (var sectionIndex = 0; sectionIndex < histogram.length; sectionIndex++) {
              setHistogramBinCoordinates(discHistogram.triangles, sectionIndex, zeroDegreeVector, crossVector, histBinAngleStep);
          }
      }
      // Opaque disc
      var opaqueCircleSectorAngleStep = Math.PI * 2 / totalSectorTrianglesInOpaqueMiddleDisc;
      for (var sectionIndex = 0; sectionIndex < totalSectorTrianglesInOpaqueMiddleDisc; sectionIndex++) {
          var startOffset = sectionIndex * pointsInTriangle * pointLength;
          v3toArray(mid, opaqueMiddleDisc.triangles, startOffset);
          calcArcPoint(arcPoint, mid, inPlane1, cross1, sectionIndex * opaqueCircleSectorAngleStep);
          v3toArray(arcPoint, opaqueMiddleDisc.triangles, startOffset + 1 * pointLength);
          calcArcPoint(arcPoint, mid, inPlane1, cross1, (sectionIndex + 1) * opaqueCircleSectorAngleStep);
          v3toArray(arcPoint, opaqueMiddleDisc.triangles, startOffset + 2 * pointLength);
      }
      // Front Histogram
      var distanceToOpaqueDisc = 0.01;
      v3multiplyScalar(tmp, v23, -distanceToOpaqueDisc); // Get a vector to move "mid" just a bit from opaque disc
      v3add(mid, mid, tmp);
      setOneSideHistogram(frontHistogram, frontHistogramBinBorders, 0, inPlane1, cross1);
      // Back Histogram
      v3multiplyScalar(tmp, v23, 2 * distanceToOpaqueDisc); // Get a vector to move "mid" back and plus just a bit from opaque disc the other way
      v3add(mid, mid, tmp);
      setOneSideHistogram(backHistogram, backHistogramBinBorders, 1, inPlane2, cross2);
      return {
          opaqueMiddleDisc: opaqueMiddleDisc,
          frontHistogram: frontHistogram,
          backHistogram: backHistogram,
          frontHistogramBinBorders: frontHistogramBinBorders,
          backHistogramBinBorders: backHistogramBinBorders,
          adjacentBondArrows: adjacentBondArrows,
          distantBondArrows: distantBondArrows
      };
  }
  RepresentationRegistry.add('dihedral-histogram', DihedralHistogramRepresentation);

  /**
   * @file Distance Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @author Fred Ludlow <fred.ludlow@gmail.com>
   * @private
   */
  /**
   * Distance representation
   */
  var DistanceRepresentation = /*@__PURE__*/(function (MeasurementRepresentation) {
      function DistanceRepresentation(structure, viewer, params) {
          MeasurementRepresentation.call(this, structure, viewer, params);
          this.type = 'distance';
          this.parameters = Object.assign({
              radialSegments: true,
              openEnded: true,
              disableImpostor: true,
              labelUnit: {
                  type: 'select',
                  rebuild: true,
                  options: { '': '', angstrom: 'angstrom', nm: 'nm' }
              },
              useCylinder: {
                  type: 'boolean', rebuild: true
              },
              atomPair: {
                  type: 'hidden', rebuild: true
              }
          }, this.parameters);
          this.init(params);
      }

      if ( MeasurementRepresentation ) DistanceRepresentation.__proto__ = MeasurementRepresentation;
      DistanceRepresentation.prototype = Object.create( MeasurementRepresentation && MeasurementRepresentation.prototype );
      DistanceRepresentation.prototype.constructor = DistanceRepresentation;
      DistanceRepresentation.prototype.init = function init (params) {
          var p = params || {};
          p.linewidth = defaults(p.linewidth, 5.0);
          p.radiusType = defaults(p.radiusType, 'size');
          p.radiusSize = defaults(p.radiusSize, 0.2);
          this.labelUnit = defaults(p.labelUnit, '');
          this.useCylinder = defaults(p.useCylinder, false);
          this.atomPair = defaults(p.atomPair, []);
          MeasurementRepresentation.prototype.init.call(this, p);
      };
      DistanceRepresentation.prototype.getDistanceData = function getDistanceData (sview, atomPair) {
          var this$1$1 = this;

          var n = atomPair.length;
          var text = new Array(n);
          var position = new Float32Array(n * 3);
          var sele1 = new Selection();
          var sele2 = new Selection();
          var bondStore = new BondStore();
          var ap1 = sview.getAtomProxy();
          var ap2 = sview.getAtomProxy();
          var j = 0; // Skipped pairs
          var selected = sview.getAtomSet();
          atomPair.forEach(function (pair, i) {
              var v1 = pair[0];
              var v2 = pair[1];
              if (typeof (v1) === 'number' && Number.isInteger(v1) && typeof (v2) === 'number' && Number.isInteger(v2)) {
                  if (selected.get(v1) && selected.get(v2)) {
                      ap1.index = v1;
                      ap2.index = v2;
                  }
                  else {
                      j += 1;
                      return;
                  }
              }
              else {
                  sele1.setString(v1);
                  sele2.setString(v2);
                  var atomIndices1 = sview.getAtomIndices(sele1);
                  var atomIndices2 = sview.getAtomIndices(sele2);
                  if (atomIndices1.length && atomIndices2.length) {
                      ap1.index = atomIndices1[0];
                      ap2.index = atomIndices2[0];
                  }
                  else {
                      j += 1;
                      return;
                  }
              }
              bondStore.addBond(ap1, ap2, 1);
              i -= j;
              var d = ap1.distanceTo(ap2);
              switch (this$1$1.labelUnit) {
                  case 'angstrom':
                      text[i] = d.toFixed(2) + ' ' + String.fromCharCode(0x212B);
                      break;
                  case 'nm':
                      text[i] = (d / 10).toFixed(2) + ' nm';
                      break;
                  default:
                      text[i] = d.toFixed(2);
                      break;
              }
              var i3 = i * 3;
              position[i3 + 0] = (ap1.x + ap2.x) / 2;
              position[i3 + 1] = (ap1.y + ap2.y) / 2;
              position[i3 + 2] = (ap1.z + ap2.z) / 2;
          });
          if (j > 0) {
              n -= j;
              position = position.subarray(0, n * 3);
          }
          var bondSet = new BitArray(bondStore.count, true);
          return {
              text: text,
              position: position,
              bondSet: bondSet,
              bondStore: bondStore
          };
      };
      DistanceRepresentation.prototype.getBondData = function getBondData (sview, what, params) {
          var bondData = sview.getBondData(this.getBondParams(what, params));
          if (bondData.picking) {
              bondData.picking = new DistancePicker(bondData.picking.array, bondData.picking.structure, params.bondStore);
          }
          return bondData;
      };
      DistanceRepresentation.prototype.createData = function createData (sview) {
          if (!sview.atomCount || !this.atomPair.length)
              { return; }
          var n = this.atomPair.length;
          var c = new Color(this.labelColor);
          var distanceData = this.getDistanceData(sview, this.atomPair);
          this.textBuffer = new TextBuffer({
              position: distanceData.position,
              size: uniformArray(n, this.labelSize),
              color: uniformArray3(n, c.r, c.g, c.b),
              text: distanceData.text
          }, this.getLabelBufferParams());
          var bondParams = {
              bondSet: distanceData.bondSet,
              bondStore: distanceData.bondStore
          };
          var bondData = this.getBondData(sview, { position: true, color: true, picking: true, radius: this.useCylinder }, bondParams);
          if (this.useCylinder) {
              this.distanceBuffer = new CylinderBuffer(bondData, this.getBufferParams({
                  openEnded: this.openEnded,
                  radialSegments: this.radialSegments,
                  disableImpostor: this.disableImpostor,
                  dullInterior: true
              }));
          }
          else {
              this.distanceBuffer = new WideLineBuffer(getFixedLengthDashData(bondData), this.getBufferParams({
                  linewidth: this.linewidth,
                  visible: this.lineVisible,
                  opacity: this.lineOpacity
              }));
          }
          return {
              bondSet: distanceData.bondSet,
              bondStore: distanceData.bondStore,
              position: distanceData.position,
              bufferList: [this.textBuffer, this.distanceBuffer]
          };
      };
      DistanceRepresentation.prototype.updateData = function updateData (what, data) {
          MeasurementRepresentation.prototype.updateData.call(this, what, data);
          var bondParams = {
              bondSet: data.bondSet,
              bondStore: data.bondStore
          };
          var bondData = this.getBondData(data.sview, what, bondParams);
          var distanceData = {};
          if (!what || what.color) {
              Object.assign(distanceData, {
                  color: bondData.color,
                  color2: bondData.color2
              });
          }
          if (!what || what.radius) {
              Object.assign(distanceData, { radius: bondData.radius });
          }
          this.distanceBuffer.setAttributes(distanceData);
      };
      DistanceRepresentation.prototype.setParameters = function setParameters (params) {
          var rebuild = false;
          var what = {};
          MeasurementRepresentation.prototype.setParameters.call(this, params, what, rebuild);
          if (!this.useCylinder) {
              if (params && params.lineOpacity) {
                  this.distanceBuffer.setParameters({ opacity: params.lineOpacity });
              }
              if (params && params.opacity !== undefined) {
                  this.distanceBuffer.setParameters({ opacity: this.lineOpacity });
              }
              if (params && params.linewidth) {
                  this.distanceBuffer.setParameters({ linewidth: params.linewidth });
              }
          }
          return this;
      };

      return DistanceRepresentation;
  }(MeasurementRepresentation));
  RepresentationRegistry.add('distance', DistanceRepresentation);

  /**
   * @file Vector Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function getSize$2(data) {
      var n = data.position.length / 3;
      return n * 2 * 3;
  }
  var VectorBufferDefaultParameters = Object.assign({
      scale: 1,
      color: 'grey'
  }, BufferDefaultParameters);
  /**
   * Vector buffer. Draws vectors as lines.
   */
  var VectorBuffer = /*@__PURE__*/(function (Buffer) {
      function VectorBuffer(data, params) {
          if ( params === void 0 ) params = {};

          Buffer.call(this, {
              position: new Float32Array(getSize$2(data)),
              color: new Float32Array(getSize$2(data))
          }, params);
          this.isLine = true;
          this.vertexShader = 'Line.vert';
          this.fragmentShader = 'Line.frag';
          var color = new Color(this.parameters.color);
          var attributes = this.geometry.attributes; // TODO
          uniformArray3(getSize$2(data) / 3, color.r, color.g, color.b, attributes.color.array);
          this.setAttributes(data);
      }

      if ( Buffer ) VectorBuffer.__proto__ = Buffer;
      VectorBuffer.prototype = Object.create( Buffer && Buffer.prototype );
      VectorBuffer.prototype.constructor = VectorBuffer;

      var prototypeAccessors = { defaultParameters: { configurable: true } };
      prototypeAccessors.defaultParameters.get = function () { return VectorBufferDefaultParameters; };
      VectorBuffer.prototype.setAttributes = function setAttributes (data) {
          if ( data === void 0 ) data = {};

          var attributes = this.geometry.attributes; // TODO
          var position, vector;
          var aPosition;
          if (data.position && data.vector) {
              position = data.position;
              vector = data.vector;
              aPosition = attributes.position.array;
              attributes.position.needsUpdate = true;
          }
          var n = this.size / 2;
          var scale = this.parameters.scale;
          if (position && vector) {
              for (var v = 0; v < n; v++) {
                  var i = v * 2 * 3;
                  var j = v * 3;
                  aPosition[i + 0] = position[j + 0];
                  aPosition[i + 1] = position[j + 1];
                  aPosition[i + 2] = position[j + 2];
                  aPosition[i + 3] = position[j + 0] + vector[j + 0] * scale;
                  aPosition[i + 4] = position[j + 1] + vector[j + 1] * scale;
                  aPosition[i + 5] = position[j + 2] + vector[j + 2] * scale;
              }
          }
      };

      Object.defineProperties( VectorBuffer.prototype, prototypeAccessors );

      return VectorBuffer;
  }(Buffer));

  /**
   * @file Helixorient Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Helixorient Representation
   */
  var HelixorientRepresentation = /*@__PURE__*/(function (StructureRepresentation) {
      function HelixorientRepresentation(structure, viewer, params) {
          StructureRepresentation.call(this, structure, viewer, params);
          this.type = 'helixorient';
          this.parameters = Object.assign({
              sphereDetail: true,
              disableImpostor: true
          }, this.parameters);
          this.init(params);
      }

      if ( StructureRepresentation ) HelixorientRepresentation.__proto__ = StructureRepresentation;
      HelixorientRepresentation.prototype = Object.create( StructureRepresentation && StructureRepresentation.prototype );
      HelixorientRepresentation.prototype.constructor = HelixorientRepresentation;
      HelixorientRepresentation.prototype.init = function init (params) {
          var p = params || {};
          p.colorScheme = defaults(p.colorScheme, 'sstruc');
          p.radiusType = defaults(p.radiusType, 'size');
          p.radiusSize = defaults(p.radiusSize, 0.15);
          p.radiusScale = defaults(p.radiusScale, 1.0);
          p.useInteriorColor = defaults(p.useInteriorColor, true);
          StructureRepresentation.prototype.init.call(this, p);
      };
      HelixorientRepresentation.prototype.createData = function createData (sview) {
          var this$1$1 = this;

          var bufferList = [];
          var polymerList = [];
          this.structure.eachPolymer(function (polymer) {
              if (polymer.residueCount < 4)
                  { return; }
              polymerList.push(polymer);
              var helixorient = new Helixorient(polymer);
              var position = helixorient.getPosition();
              var color = helixorient.getColor(this$1$1.getColorParams());
              var size = helixorient.getSize(this$1$1.getRadiusParams());
              var picking = helixorient.getPicking();
              bufferList.push(new SphereBuffer({
                  position: position.center,
                  color: color.color,
                  radius: size.size,
                  picking: picking.picking
              }, this$1$1.getBufferParams({
                  sphereDetail: this$1$1.sphereDetail,
                  disableImpostor: this$1$1.disableImpostor,
                  dullInterior: true
              })), new VectorBuffer({
                  position: position.center,
                  vector: position.axis
              }, this$1$1.getBufferParams({
                  color: 'skyblue',
                  scale: 1
              })), new VectorBuffer({
                  position: position.center,
                  vector: position.resdir
              }, this$1$1.getBufferParams({
                  color: 'lightgreen',
                  scale: 1
              })));
          }, sview.getSelection());
          return {
              bufferList: bufferList,
              polymerList: polymerList
          };
      };
      HelixorientRepresentation.prototype.updateData = function updateData (what, data) {
          if (exports.Debug)
              { Log.time(this.type + ' repr update'); }
          what = what || {};
          for (var i = 0, il = data.polymerList.length; i < il; ++i) {
              var j = i * 3;
              var bufferData = {};
              var polymer = data.polymerList[i];
              var helixorient = new Helixorient(polymer);
              if (what.position) {
                  var position = helixorient.getPosition();
                  Object.assign(bufferData, { position: position.center });
                  data.bufferList[j + 1].setAttributes({
                      'position': position.center,
                      'vector': position.axis
                  });
                  data.bufferList[j + 2].setAttributes({
                      'position': position.center,
                      'vector': position.resdir
                  });
              }
              data.bufferList[j].setAttributes(bufferData);
          }
          if (exports.Debug)
              { Log.timeEnd(this.type + ' repr update'); }
      };

      return HelixorientRepresentation;
  }(StructureRepresentation));
  RepresentationRegistry.add('helixorient', HelixorientRepresentation);

  /**
   * @file Licorice Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Licorice representation object ({@link BallAndStickRepresentation} with `aspectRatio` fixed at 1.0)
   */
  var LicoriceRepresentation = /*@__PURE__*/(function (BallAndStickRepresentation) {
      function LicoriceRepresentation(structure, viewer, params) {
          BallAndStickRepresentation.call(this, structure, viewer, params);
          this.type = 'licorice';
          this.parameters = Object.assign({}, this.parameters, { aspectRatio: null });
      }

      if ( BallAndStickRepresentation ) LicoriceRepresentation.__proto__ = BallAndStickRepresentation;
      LicoriceRepresentation.prototype = Object.create( BallAndStickRepresentation && BallAndStickRepresentation.prototype );
      LicoriceRepresentation.prototype.constructor = LicoriceRepresentation;
      LicoriceRepresentation.prototype.init = function init (params) {
          var p = params || {};
          p.aspectRatio = 1.0;
          BallAndStickRepresentation.prototype.init.call(this, p);
      };

      return LicoriceRepresentation;
  }(BallAndStickRepresentation));
  RepresentationRegistry.add('licorice', LicoriceRepresentation);

  ShaderRegistry.add('shader/HyperballStickImpostor.vert', "\nattribute vec3 mapping;\nattribute float radius;\nattribute float radius2;\nattribute vec3 position1;\nattribute vec3 position2;\nvarying mat4 matrix_near;\nvarying vec4 prime1;\nvarying vec4 prime2;\nvarying float vRadius;\nvarying float vRadius2;\n#ifdef PICKING\n#include unpack_color\nattribute float primitiveId;\nvarying vec3 vPickingColor;\n#else\nattribute vec3 color2;\nvarying vec3 vColor1;\nvarying vec3 vColor2;\n#endif\nuniform float shrink;\nuniform mat4 modelViewProjectionMatrix;\nuniform mat4 modelViewProjectionMatrixInverse;\nvoid main(){\nvRadius = radius;\nvRadius2 = radius2;\nvec4 spaceposition;\nvec3 position_atom1;\nvec3 position_atom2;\nvec4 vertex_position;\n#ifdef PICKING\nvPickingColor = unpackColor( primitiveId );\n#else\nvColor1 = color;\nvColor2 = color2;\n#endif\nfloat radius1 = radius;\nposition_atom1 = position1;\nposition_atom2 = position2;\nfloat distance = distance( position_atom1, position_atom2 );\nspaceposition.z = mapping.z * distance;\nif (radius1 > radius2) {\nspaceposition.y = mapping.y * 1.5 * radius1;\nspaceposition.x = mapping.x * 1.5 * radius1;\n} else {\nspaceposition.y = mapping.y * 1.5 * radius2;\nspaceposition.x = mapping.x * 1.5 * radius2;\n}\nspaceposition.w = 1.0;\nvec4 e3 = vec4( 1.0 );\nvec3 e1, e1_temp, e2, e2_temp;\ne3.xyz = normalize(position_atom1-position_atom2);\nif (e3.z == 0.0) { e3.z = 0.0000000000001;}\nif ( (position_atom1.x - position_atom2.x) == 0.0) { position_atom1.x += 0.001;}\nif ( (position_atom1.y - position_atom2.y) == 0.0) { position_atom1.y += 0.001;}\nif ( (position_atom1.z - position_atom2.z) == 0.0) { position_atom1.z += 0.001;}\nvec4 focus = vec4( 1.0 );\nfocus.x = ( position_atom1.x*position_atom1.x - position_atom2.x*position_atom2.x +\n( radius2*radius2 - radius1*radius1 )*e3.x*e3.x/shrink )/(2.0*(position_atom1.x - position_atom2.x));\nfocus.y = ( position_atom1.y*position_atom1.y - position_atom2.y*position_atom2.y +\n( radius2*radius2 - radius1*radius1 )*e3.y*e3.y/shrink )/(2.0*(position_atom1.y - position_atom2.y));\nfocus.z = ( position_atom1.z*position_atom1.z - position_atom2.z*position_atom2.z +\n( radius2*radius2 - radius1*radius1 )*e3.z*e3.z/shrink )/(2.0*(position_atom1.z - position_atom2.z));\ne1.x = 1.0;\ne1.y = 1.0;\ne1.z = ( (e3.x*focus.x + e3.y*focus.y + e3.z*focus.z) - e1.x*e3.x - e1.y*e3.y)/e3.z;\ne1_temp = e1 - focus.xyz;\ne1 = normalize(e1_temp);\ne2_temp = e1.yzx * e3.zxy - e1.zxy * e3.yzx;\ne2 = normalize(e2_temp);\nmat3 R= mat3( e1.xyz, e2.xyz, e3.xyz );\nvertex_position.xyz = R * spaceposition.xyz;\nvertex_position.w = 1.0;\nvertex_position.x += (position_atom1.x+position_atom2.x) / 2.0;\nvertex_position.y += (position_atom1.y+position_atom2.y) / 2.0;\nvertex_position.z += (position_atom1.z+position_atom2.z) / 2.0;\ngl_Position = modelViewProjectionMatrix * vertex_position;\nvec4 i_near, i_far;\nvec4 near = gl_Position;\nnear.z = 0.0 ;\nnear = modelViewProjectionMatrixInverse * near;\ni_near = near;\nvec4 far = gl_Position;\nfar.z = far.w ;\ni_far = modelViewProjectionMatrixInverse * far;\nprime1 = vec4( position_atom1 - (position_atom1 - focus.xyz)*shrink, 1.0 );\nprime2 = vec4( position_atom2 - (position_atom2 - focus.xyz)*shrink, 1.0 );\nfloat Rsquare = (radius1*radius1/shrink) - (\n(position_atom1.x - focus.x)*(position_atom1.x - focus.x) +\n(position_atom1.y - focus.y)*(position_atom1.y - focus.y) +\n(position_atom1.z - focus.z)*(position_atom1.z - focus.z)\n);\nfocus.w = Rsquare;\nmatrix_near = mat4( i_near, i_far, focus, e3 );\ngl_Position.z = 1.0;\n}");

  ShaderRegistry.add('shader/HyperballStickImpostor.frag', "#define STANDARD\n#define IMPOSTOR\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 interiorColor;\nuniform float interiorDarkening;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\nuniform float clipNear;\nuniform float shrink;\nuniform mat4 modelViewMatrix;\nuniform mat4 modelViewProjectionMatrix;\nuniform mat4 modelViewMatrixInverseTranspose;\nuniform mat4 projectionMatrix;\nvarying mat4 matrix_near;\nvarying vec4 prime1;\nvarying vec4 prime2;\nvarying float vRadius;\nvarying float vRadius2;\n#ifdef PICKING\nuniform float objectId;\nvarying vec3 vPickingColor;\n#else\nvarying vec3 vColor1;\nvarying vec3 vColor2;\n#include common\n#include fog_pars_fragment\n#include bsdfs\n#include lights_pars_begin\n#include lights_physical_pars_fragment\n#endif\nbool interior = false;\nfloat calcClip( vec4 cameraPos ){\nreturn dot( cameraPos, vec4( 0.0, 0.0, 1.0, clipNear - 0.5 ) );\n}\nfloat calcClip( vec3 cameraPos ){\nreturn calcClip( vec4( cameraPos, 1.0 ) );\n}\nfloat calcDepth( in vec3 cameraPos ){\nvec2 clipZW = cameraPos.z * projectionMatrix[2].zw + projectionMatrix[3].zw;\nreturn 0.5 + 0.5 * clipZW.x / clipZW.y;\n}\nstruct Ray {\nvec3 origin ;\nvec3 direction ;\n};\nbool cutoff_plane (vec3 M, vec3 cutoff, vec3 x3){\nfloat a = x3.x;\nfloat b = x3.y;\nfloat c = x3.z;\nfloat d = -x3.x*cutoff.x-x3.y*cutoff.y-x3.z*cutoff.z;\nfloat l = a*M.x+b*M.y+c*M.z+d;\nif (l<0.0) {return true;}\nelse{return false;}\n}\nvec3 isect_surf(Ray r, mat4 matrix_coef){\nvec4 direction = vec4(r.direction, 0.0);\nvec4 origin = vec4(r.origin, 1.0);\nfloat a = dot(direction,(matrix_coef*direction));\nfloat b = dot(origin,(matrix_coef*direction));\nfloat c = dot(origin,(matrix_coef*origin));\nfloat delta =b*b-a*c;\ngl_FragColor.a = 1.0;\nif (delta<0.0){\ndiscard;\n}\nfloat t1 =(-b-sqrt(delta))/a;\nreturn r.origin+t1*r.direction;\n}\nvec3 isect_surf2(Ray r, mat4 matrix_coef){\nvec4 direction = vec4(r.direction, 0.0);\nvec4 origin = vec4(r.origin, 1.0);\nfloat a = dot(direction,(matrix_coef*direction));\nfloat b = dot(origin,(matrix_coef*direction));\nfloat c = dot(origin,(matrix_coef*origin));\nfloat delta =b*b-a*c;\ngl_FragColor.a = 1.0;\nif (delta<0.0){\ndiscard;\n}\nfloat t2 =(-b+sqrt(delta))/a;\nreturn r.origin+t2*r.direction;\n}\nRay primary_ray(vec4 near1, vec4 far1){\nvec3 near=near1.xyz/near1.w;\nvec3 far=far1.xyz/far1.w;\nreturn Ray(near,far-near);\n}\nfloat update_z_buffer(vec3 M, mat4 ModelViewP){\nfloat depth1;\nvec4 Ms=(ModelViewP*vec4(M,1.0));\nreturn depth1=(1.0+Ms.z/Ms.w)/2.0;\n}\nvoid main(){\nfloat radius = max( vRadius, vRadius2 );\nvec4 i_near, i_far, focus;\nvec3 e3, e1, e1_temp, e2;\ni_near = vec4(matrix_near[0][0],matrix_near[0][1],matrix_near[0][2],matrix_near[0][3]);\ni_far = vec4(matrix_near[1][0],matrix_near[1][1],matrix_near[1][2],matrix_near[1][3]);\nfocus = vec4(matrix_near[2][0],matrix_near[2][1],matrix_near[2][2],matrix_near[2][3]);\ne3 = vec3(matrix_near[3][0],matrix_near[3][1],matrix_near[3][2]);\ne1.x = 1.0;\ne1.y = 1.0;\ne1.z = ( (e3.x*focus.x + e3.y*focus.y + e3.z*focus.z) - e1.x*e3.x - e1.y*e3.y)/e3.z;\ne1_temp = e1 - focus.xyz;\ne1 = normalize(e1_temp);\ne2 = normalize(cross(e1,e3));\nvec4 equation = focus;\nfloat shrinkfactor = shrink;\nfloat t1 = -1.0/(1.0-shrinkfactor);\nfloat t2 = 1.0/(shrinkfactor);\nvec4 colonne1, colonne2, colonne3, colonne4;\nmat4 mat;\nvec3 equation1 = vec3(t2,t2,t1);\nfloat A1 = - e1.x*equation.x - e1.y*equation.y - e1.z*equation.z;\nfloat A2 = - e2.x*equation.x - e2.y*equation.y - e2.z*equation.z;\nfloat A3 = - e3.x*equation.x - e3.y*equation.y - e3.z*equation.z;\nfloat A11 = equation1.x*e1.x*e1.x + equation1.y*e2.x*e2.x + equation1.z*e3.x*e3.x;\nfloat A21 = equation1.x*e1.x*e1.y + equation1.y*e2.x*e2.y + equation1.z*e3.x*e3.y;\nfloat A31 = equation1.x*e1.x*e1.z + equation1.y*e2.x*e2.z + equation1.z*e3.x*e3.z;\nfloat A41 = equation1.x*e1.x*A1 + equation1.y*e2.x*A2 + equation1.z*e3.x*A3;\nfloat A22 = equation1.x*e1.y*e1.y + equation1.y*e2.y*e2.y + equation1.z*e3.y*e3.y;\nfloat A32 = equation1.x*e1.y*e1.z + equation1.y*e2.y*e2.z + equation1.z*e3.y*e3.z;\nfloat A42 = equation1.x*e1.y*A1 + equation1.y*e2.y*A2 + equation1.z*e3.y*A3;\nfloat A33 = equation1.x*e1.z*e1.z + equation1.y*e2.z*e2.z + equation1.z*e3.z*e3.z;\nfloat A43 = equation1.x*e1.z*A1 + equation1.y*e2.z*A2 + equation1.z*e3.z*A3;\nfloat A44 = equation1.x*A1*A1 + equation1.y*A2*A2 + equation1.z*A3*A3 - equation.w;\ncolonne1 = vec4(A11,A21,A31,A41);\ncolonne2 = vec4(A21,A22,A32,A42);\ncolonne3 = vec4(A31,A32,A33,A43);\ncolonne4 = vec4(A41,A42,A43,A44);\nmat = mat4(colonne1,colonne2,colonne3,colonne4);\nRay ray = primary_ray(i_near,i_far) ;\nvec3 M;\nM = isect_surf(ray, mat);\nif (cutoff_plane(M, prime1.xyz, -e3) || cutoff_plane(M, prime2.xyz, e3)){ discard; }\nvec4 M1 = vec4(M,1.0);\nvec4 M2 = mat*M1;\nvec3 _normal = ( modelViewMatrixInverseTranspose * M2 ).xyz;\ngl_FragDepthEXT = update_z_buffer(M, modelViewProjectionMatrix) ;\n#ifdef NEAR_CLIP\nif( calcClip( modelViewMatrix * vec4( M, 1.0 ) ) > 0.0 ){\nM = isect_surf2(ray, mat);\nif( calcClip( modelViewMatrix * vec4( M, 1.0 ) ) > 0.0 )\ndiscard;\ninterior = true;\ngl_FragDepthEXT = update_z_buffer(M, modelViewProjectionMatrix) ;\nif( gl_FragDepthEXT >= 0.0 ){\ngl_FragDepthEXT = max( 0.0, calcDepth( vec3( - ( clipNear - 0.5 ) ) ) + ( 0.0000001 / radius ) );\n}\n}else if( gl_FragDepthEXT <= 0.0 ){\nM = isect_surf2(ray, mat);\ninterior = true;\ngl_FragDepthEXT = update_z_buffer(M, modelViewProjectionMatrix);\nif( gl_FragDepthEXT >= 0.0 ){\ngl_FragDepthEXT = 0.0 + ( 0.0000001 / radius );\n}\n}\n#else\nif( gl_FragDepthEXT <= 0.0 ){\nM = isect_surf2(ray, mat);\ninterior = true;\ngl_FragDepthEXT = update_z_buffer(M, modelViewProjectionMatrix) ;\nif( gl_FragDepthEXT >= 0.0 ){\ngl_FragDepthEXT = 0.0 + ( 0.0000001 / radius );\n}\n}\n#endif\nif (cutoff_plane(M, prime1.xyz, -e3) || cutoff_plane(M, prime2.xyz, e3)){ discard; }\nif (gl_FragDepthEXT < 0.0)\ndiscard;\nif (gl_FragDepthEXT > 1.0)\ndiscard;\nfloat distance_ratio = ((M.x-prime2.x)*e3.x + (M.y-prime2.y)*e3.y +(M.z-prime2.z)*e3.z) /\ndistance(prime2.xyz,prime1.xyz);\n#ifdef PICKING\nif( opacity < 0.3 )\ndiscard;\ngl_FragColor = vec4( vPickingColor, objectId );\n#else\nvec3 vViewPosition = -( modelViewMatrix * vec4( M, 1.0 ) ).xyz;\nvec3 vNormal = _normal;\nvec3 vColor;\nif( distance_ratio>0.5 ){\nvColor = vColor1;\n}else{\nvColor = vColor2;\n}\nvec4 diffuseColor = vec4( diffuse, opacity );\nReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\nvec3 totalEmissiveLight = emissive;\n#include color_fragment\n#include roughnessmap_fragment\n#include metalnessmap_fragment\nvec3 normal = normalize( vNormal );\nvec3 geometryNormal = normal;\n#include lights_physical_fragment\n#include lights_fragment_begin\n#include lights_fragment_end\nvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveLight;\nif( interior ){\n#ifdef USE_INTERIOR_COLOR\noutgoingLight.xyz = interiorColor;\n#else\n#ifdef DIFFUSE_INTERIOR\noutgoingLight.xyz = vColor;\n#endif\n#endif\noutgoingLight.xyz *= 1.0 - interiorDarkening;\n}\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );\n#include premultiplied_alpha_fragment\n#include tonemapping_fragment\n#include encodings_fragment\n#include fog_fragment\n#endif\n}");

  /**
   * @file Mapped Box Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var mapping = new Float32Array([
      -1.0, -1.0, -1.0,
      1.0, -1.0, -1.0,
      1.0, -1.0, 1.0,
      -1.0, -1.0, 1.0,
      -1.0, 1.0, -1.0,
      1.0, 1.0, -1.0,
      1.0, 1.0, 1.0,
      -1.0, 1.0, 1.0
  ]);
  var mappingIndices = new Uint16Array([
      0, 1, 2,
      0, 2, 3,
      1, 5, 6,
      1, 6, 2,
      4, 6, 5,
      4, 7, 6,
      0, 7, 4,
      0, 3, 7,
      0, 5, 1,
      0, 4, 5,
      3, 2, 6,
      3, 6, 7
  ]);
  /**
   * Mapped Box buffer. Draws boxes. Used to render general imposters.
   * @interface
   */
  var MappedBoxBuffer = /*@__PURE__*/(function (MappedBuffer) {
      function MappedBoxBuffer(data, params) {
          if ( params === void 0 ) params = {};

          MappedBuffer.call(this, 'v3', data, params);
      }

      if ( MappedBuffer ) MappedBoxBuffer.__proto__ = MappedBuffer;
      MappedBoxBuffer.prototype = Object.create( MappedBuffer && MappedBuffer.prototype );
      MappedBoxBuffer.prototype.constructor = MappedBoxBuffer;

      var prototypeAccessors = { mapping: { configurable: true },mappingIndices: { configurable: true },mappingIndicesSize: { configurable: true },mappingSize: { configurable: true },mappingItemSize: { configurable: true } };
      prototypeAccessors.mapping.get = function () { return mapping; };
      prototypeAccessors.mappingIndices.get = function () { return mappingIndices; };
      prototypeAccessors.mappingIndicesSize.get = function () { return 36; };
      prototypeAccessors.mappingSize.get = function () { return 8; };
      prototypeAccessors.mappingItemSize.get = function () { return 3; };

      Object.defineProperties( MappedBoxBuffer.prototype, prototypeAccessors );

      return MappedBoxBuffer;
  }(MappedBuffer));

  /**
   * @file Hyperball Stick Impostor Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var HyperballStickImpostorBufferDefaultParameters = Object.assign({
      shrink: 0.14
  }, BufferDefaultParameters);
  var HyperballStickImpostorBufferParameterTypes = Object.assign({
      shrink: { uniform: true }
  }, BufferParameterTypes);
  /**
   * Hyperball stick impostor buffer.
   *
   * @example
   * var hyperballStickImpostorBuffer = new HyperballStickImpostorBuffer({
   *   position1: new Float32Array([ 0, 0, 0 ]),
   *   position2: new Float32Array([ 2, 2, 2 ]),
   *   color: new Float32Array([ 1, 0, 0 ]),
   *   color2: new Float32Array([ 0, 1, 0 ]),
   *   radius: new Float32Array([ 1 ]),
   *   radius2: new Float32Array([ 2 ])
   * });
   */
  var HyperballStickImpostorBuffer = /*@__PURE__*/(function (MappedBoxBuffer) {
      function HyperballStickImpostorBuffer(data, params) {
          if ( params === void 0 ) params = {};

          MappedBoxBuffer.call(this, data, params);
          this.parameterTypes = HyperballStickImpostorBufferParameterTypes;
          this.isImpostor = true;
          this.vertexShader = 'HyperballStickImpostor.vert';
          this.fragmentShader = 'HyperballStickImpostor.frag';
          this.addUniforms({
              'modelViewProjectionMatrix': { value: new Matrix4() },
              'modelViewProjectionMatrixInverse': { value: new Matrix4() },
              'modelViewMatrixInverseTranspose': { value: new Matrix4() },
              'shrink': { value: this.parameters.shrink }
          });
          this.addAttributes({
              'position1': { type: 'v3', value: null },
              'position2': { type: 'v3', value: null },
              'color2': { type: 'c', value: null },
              'radius': { type: 'f', value: null },
              'radius2': { type: 'f', value: null }
          });
          this.setAttributes(data);
          this.makeMapping();
      }

      if ( MappedBoxBuffer ) HyperballStickImpostorBuffer.__proto__ = MappedBoxBuffer;
      HyperballStickImpostorBuffer.prototype = Object.create( MappedBoxBuffer && MappedBoxBuffer.prototype );
      HyperballStickImpostorBuffer.prototype.constructor = HyperballStickImpostorBuffer;

      var prototypeAccessors = { defaultParameters: { configurable: true } };
      prototypeAccessors.defaultParameters.get = function () { return HyperballStickImpostorBufferDefaultParameters; };

      Object.defineProperties( HyperballStickImpostorBuffer.prototype, prototypeAccessors );

      return HyperballStickImpostorBuffer;
  }(MappedBoxBuffer));

  /**
   * @file Hyperball Stick Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  Object.assign({
      disableImpostor: false
  }, CylinderGeometryBufferDefaultParameters, HyperballStickImpostorBufferDefaultParameters);
  /**
   * Hyperball stick buffer. Depending on the value {@link ExtensionFragDepth} and
   * `params.disableImpostor` the constructor returns either a
   * {@link CylinderGeometryBuffer} or a {@link HyperballStickImpostorBuffer}
   * @implements {Buffer}
   *
   * @example
   * var hyperballStickBuffer = new HyperballStickBuffer({
   *   position1: new Float32Array([ 0, 0, 0 ]),
   *   position2: new Float32Array([ 2, 2, 2 ]),
   *   color: new Float32Array([ 1, 0, 0 ]),
   *   color2: new Float32Array([ 0, 1, 0 ]),
   *   radius: new Float32Array([ 1 ]),
   *   radius2: new Float32Array([ 2 ])
   * });
   */
  var HyperballStickBuffer = function HyperballStickBuffer(data, params) {
      if ( params === void 0 ) params = {};

      if (!ExtensionFragDepth || (params && params.disableImpostor)) {
          data.radius = calculateMinArray(data.radius, data.radius2);
          return new CylinderGeometryBuffer(data, params);
      }
      else {
          return new HyperballStickImpostorBuffer(data, params);
      }
  };

  /**
   * @file Hyperball Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Hyperball Representation
   */
  var HyperballRepresentation = /*@__PURE__*/(function (LicoriceRepresentation) {
      function HyperballRepresentation(structure, viewer, params) {
          LicoriceRepresentation.call(this, structure, viewer, params);
          this.type = 'hyperball';
          this.parameters = Object.assign({
              shrink: {
                  type: 'number', precision: 3, max: 1.0, min: 0.001, buffer: true
              }
          }, this.parameters, {
              multipleBond: null,
              bondSpacing: null
          });
      }

      if ( LicoriceRepresentation ) HyperballRepresentation.__proto__ = LicoriceRepresentation;
      HyperballRepresentation.prototype = Object.create( LicoriceRepresentation && LicoriceRepresentation.prototype );
      HyperballRepresentation.prototype.constructor = HyperballRepresentation;
      HyperballRepresentation.prototype.init = function init (params) {
          var p = params || {};
          p.radiusScale = defaults(p.radiusScale, 0.2);
          p.radiusType = defaults(p.radiusType, 'vdw');
          p.useInteriorColor = defaults(p.useInteriorColor, true);
          this.shrink = defaults(p.shrink, 0.12);
          LicoriceRepresentation.prototype.init.call(this, p);
      };
      HyperballRepresentation.prototype.getBondParams = function getBondParams (what, params) {
          if (!what || what.radius) {
              params = Object.assign({ radius2: true }, params);
          }
          return LicoriceRepresentation.prototype.getBondParams.call(this, what, params);
      };
      HyperballRepresentation.prototype.createData = function createData (sview) {
          var sphereBuffer = new SphereBuffer(sview.getAtomData(this.getAtomParams()), this.getBufferParams({
              sphereDetail: this.sphereDetail,
              disableImpostor: this.disableImpostor,
              dullInterior: true
          }));
          this.__center = new Float32Array(sview.bondCount * 3);
          var stickBuffer = new HyperballStickBuffer(sview.getBondData(this.getBondParams()), this.getBufferParams({
              shrink: this.shrink,
              radialSegments: this.radialSegments,
              disableImpostor: this.disableImpostor,
              dullInterior: true
          }));
          return {
              bufferList: [sphereBuffer, stickBuffer]
          };
      };
      HyperballRepresentation.prototype.updateData = function updateData (what, data) {
          var atomData = data.sview.getAtomData(this.getAtomParams());
          var bondData = data.sview.getBondData(this.getBondParams());
          var sphereData = {};
          var stickData = {};
          if (!what || what.position) {
              Object.assign(sphereData, { position: atomData.position });
              var from = bondData.position1;
              var to = bondData.position2;
              Object.assign(stickData, {
                  position: calculateCenterArray(from, to, this.__center),
                  position1: from,
                  position2: to
              });
          }
          if (!what || what.color) {
              Object.assign(sphereData, { color: atomData.color });
              Object.assign(stickData, {
                  color: bondData.color,
                  color2: bondData.color2
              });
          }
          if (!what || what.radius) {
              Object.assign(sphereData, { radius: atomData.radius });
              Object.assign(stickData, {
                  radius: bondData.radius,
                  radius2: bondData.radius2
              });
          }
          data.bufferList[0].setAttributes(sphereData);
          data.bufferList[1].setAttributes(stickData);
      };

      return HyperballRepresentation;
  }(LicoriceRepresentation));
  RepresentationRegistry.add('hyperball', HyperballRepresentation);

  /**
   * @file Label Factory
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var LabelFactoryTypes = {
      '': '',
      'atomname': 'atom name',
      'atomindex': 'atom index',
      'occupancy': 'occupancy',
      'bfactor': 'b-factor',
      'serial': 'serial',
      'element': 'element',
      'atom': 'atom name + index',
      'resname': 'residue name',
      'resno': 'residue no',
      'res': 'one letter code + no',
      'residue': '[residue name] + no + inscode',
      'text': 'text',
      'format': 'format',
      'qualified': 'qualified name'
  };
  var LabelFactory = function LabelFactory(type, text, format) {
      if ( text === void 0 ) text = {};
      if ( format === void 0 ) format = '';

      this.type = type;
      this.text = text;
      this.format = format;
      this.errorLogged = false;
  };
  LabelFactory.prototype.atomLabel = function atomLabel (a) {
      var type = this.type;
      var l;
      switch (type) {
          case 'atomname':
              l = a.atomname;
              break;
          case 'atomindex':
              l = "" + (a.index);
              break;
          case 'occupancy':
              l = a.occupancy.toFixed(2);
              break;
          case 'bfactor':
              l = a.bfactor.toFixed(2);
              break;
          case 'serial':
              l = "" + (a.serial);
              break;
          case 'element':
              l = a.element;
              break;
          case 'atom':
              l = (a.atomname) + "|" + (a.index);
              break;
          case 'resname':
              l = a.resname;
              break;
          case 'resno':
              l = "" + (a.resno);
              break;
          case 'res':
              l = "" + ((AA1[a.resname.toUpperCase()] || a.resname)) + (a.resno);
              break;
          case 'residue':
              var aa1 = AA1[a.resname.toUpperCase()];
              if (aa1 && !a.inscode) {
                  l = "" + aa1 + (a.resno);
              }
              else {
                  l = "[" + (a.resname) + "]" + (a.resno) + (a.inscode);
              }
              break;
          case 'text':
              l = this.text[a.index];
              break;
          case 'format':
              try {
                  l = sprintf.sprintf(this.format, a);
              }
              catch (e) {
                  if (!this.errorLogged) {
                      this.errorLogged = true;
                      console.log(e.message);
                  }
              }
              break;
          // case "qualified":
          default:
              l = a.qualifiedName();
              break;
      }
      return l === undefined ? '' : l;
  };
  LabelFactory.types = LabelFactoryTypes;

  /**
   * @file Label Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Label representation
   */
  var LabelRepresentation = /*@__PURE__*/(function (StructureRepresentation) {
      function LabelRepresentation(structure, viewer, params) {
          StructureRepresentation.call(this, structure, viewer, params);
          this.type = 'label';
          this.parameters = Object.assign({
              labelType: {
                  type: 'select', options: LabelFactory.types, rebuild: true
              },
              labelText: {
                  type: 'hidden', rebuild: true
              },
              labelFormat: {
                  type: 'text', rebuild: true
              },
              labelGrouping: {
                  type: 'select',
                  options: {
                      'atom': 'atom',
                      'residue': 'residue'
                  },
                  rebuild: true
              },
              fontFamily: {
                  type: 'select',
                  options: {
                      'sans-serif': 'sans-serif',
                      'monospace': 'monospace',
                      'serif': 'serif'
                  },
                  buffer: true
              },
              fontStyle: {
                  type: 'select',
                  options: {
                      'normal': 'normal',
                      'italic': 'italic'
                  },
                  buffer: true
              },
              fontWeight: {
                  type: 'select',
                  options: {
                      'normal': 'normal',
                      'bold': 'bold'
                  },
                  buffer: true
              },
              xOffset: {
                  type: 'number', precision: 1, max: 20, min: -20, buffer: true
              },
              yOffset: {
                  type: 'number', precision: 1, max: 20, min: -20, buffer: true
              },
              zOffset: {
                  type: 'number', precision: 1, max: 20, min: -20, buffer: true
              },
              attachment: {
                  type: 'select',
                  options: {
                      'bottom-left': 'bottom-left',
                      'bottom-center': 'bottom-center',
                      'bottom-right': 'bottom-right',
                      'middle-left': 'middle-left',
                      'middle-center': 'middle-center',
                      'middle-right': 'middle-right',
                      'top-left': 'top-left',
                      'top-center': 'top-center',
                      'top-right': 'top-right'
                  },
                  rebuild: true
              },
              showBorder: {
                  type: 'boolean', buffer: true
              },
              borderColor: {
                  type: 'color', buffer: true
              },
              borderWidth: {
                  type: 'number', precision: 2, max: 0.3, min: 0, buffer: true
              },
              showBackground: {
                  type: 'boolean', rebuild: true
              },
              backgroundColor: {
                  type: 'color', buffer: true
              },
              backgroundMargin: {
                  type: 'number', precision: 2, max: 2, min: 0, rebuild: true
              },
              backgroundOpacity: {
                  type: 'range', step: 0.01, max: 1, min: 0, buffer: true
              },
              fixedSize: {
                  type: 'boolean', buffer: true
              }
          }, this.parameters, {
              side: null,
              flatShaded: null,
              wireframe: null,
              linewidth: null,
              roughness: null,
              metalness: null,
              diffuse: null
          });
          this.init(params);
      }

      if ( StructureRepresentation ) LabelRepresentation.__proto__ = StructureRepresentation;
      LabelRepresentation.prototype = Object.create( StructureRepresentation && StructureRepresentation.prototype );
      LabelRepresentation.prototype.constructor = LabelRepresentation;
      LabelRepresentation.prototype.init = function init (params) {
          var p = params || {};
          this.labelType = defaults(p.labelType, 'res');
          this.labelText = defaults(p.labelText, {});
          this.labelFormat = defaults(p.labelFormat, '');
          this.labelGrouping = defaults(p.labelGrouping, 'atom');
          this.fontFamily = defaults(p.fontFamily, 'sans-serif');
          this.fontStyle = defaults(p.fontStyle, 'normal');
          this.fontWeight = defaults(p.fontWeight, 'bold');
          this.xOffset = defaults(p.xOffset, 0.0);
          this.yOffset = defaults(p.yOffset, 0.0);
          this.zOffset = defaults(p.zOffset, 0.5);
          this.attachment = defaults(p.attachment, 'bottom-left');
          this.showBorder = defaults(p.showBorder, false);
          this.borderColor = defaults(p.borderColor, 'lightgrey');
          this.borderWidth = defaults(p.borderWidth, 0.15);
          this.showBackground = defaults(p.showBackground, false);
          this.backgroundColor = defaults(p.backgroundColor, 'lightgrey');
          this.backgroundMargin = defaults(p.backgroundMargin, 0.5);
          this.backgroundOpacity = defaults(p.backgroundOpacity, 1.0);
          this.fixedSize = defaults(p.fixedSize, false);
          StructureRepresentation.prototype.init.call(this, p);
      };
      LabelRepresentation.prototype.getTextData = function getTextData (sview, what) {
          var p = this.getAtomParams(what);
          var labelFactory = new LabelFactory(this.labelType, this.labelText, this.labelFormat);
          var position, size, color, text, positionN, sizeN, colorN;
          if (this.labelGrouping === 'atom') {
              var atomData = sview.getAtomData(p);
              position = atomData.position;
              size = atomData.radius;
              color = atomData.color;
              if (!what || what.text) {
                  text = [];
                  sview.eachAtom(function (ap) { return text.push(labelFactory.atomLabel(ap)); });
              }
          }
          else if (this.labelGrouping === 'residue') {
              if (!what || what.position)
                  { positionN = []; }
              if (!what || what.color)
                  { colorN = []; }
              if (!what || what.radius)
                  { sizeN = []; }
              if (!what || what.text)
                  { text = []; }
              if (p.colorParams)
                  { p.colorParams.structure = sview.getStructure(); }
              var colormaker = ColormakerRegistry.getScheme(p.colorParams);
              var radiusFactory = new RadiusFactory(p.radiusParams);
              var ap1 = sview.getAtomProxy();
              var i = 0;
              sview.eachResidue(function (rp) {
                  var i3 = i * 3;
                  if (rp.isProtein() || rp.isNucleic()) {
                      ap1.index = rp.traceAtomIndex;
                      if (!what || what.position) {
                          ap1.positionToArray(positionN, i3);
                      }
                  }
                  else {
                      ap1.index = rp.atomOffset;
                      if (!what || what.position) {
                          rp.positionToArray(positionN, i3);
                      }
                  }
                  if (!what || what.color) {
                      colormaker.atomColorToArray(ap1, colorN, i3);
                  }
                  if (!what || what.radius) {
                      sizeN[i] = radiusFactory.atomRadius(ap1);
                  }
                  if (!what || what.text) {
                      text.push(labelFactory.atomLabel(ap1));
                  }
                  ++i;
              });
              if (!what || what.position)
                  { position = new Float32Array(positionN); }
              if (!what || what.color)
                  { color = new Float32Array(colorN); }
              if (!what || what.radius)
                  { size = new Float32Array(sizeN); }
          }
          return { position: position, size: size, color: color, text: text };
      };
      LabelRepresentation.prototype.createData = function createData (sview) {
          var what = { position: true, color: true, radius: true, text: true };
          var textBuffer = new TextBuffer(this.getTextData(sview, what), this.getBufferParams({
              fontFamily: this.fontFamily,
              fontStyle: this.fontStyle,
              fontWeight: this.fontWeight,
              xOffset: this.xOffset,
              yOffset: this.yOffset,
              zOffset: this.zOffset,
              attachment: this.attachment,
              showBorder: this.showBorder,
              borderColor: this.borderColor,
              borderWidth: this.borderWidth,
              showBackground: this.showBackground,
              backgroundColor: this.backgroundColor,
              backgroundMargin: this.backgroundMargin,
              backgroundOpacity: this.backgroundOpacity,
              fixedSize: this.fixedSize
          }));
          return { bufferList: [textBuffer] };
      };
      LabelRepresentation.prototype.updateData = function updateData (what, data) {
          data.bufferList[0].setAttributes(this.getTextData(data.sview, what));
      };
      LabelRepresentation.prototype.getAtomRadius = function getAtomRadius () {
          return 0;
      };

      return LabelRepresentation;
  }(StructureRepresentation));
  RepresentationRegistry.add('label', LabelRepresentation);

  /**
   * @file Line Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Determine which atoms in  a Structure[View] form no bonds to any other atoms
   * in that Structure.
   *
   * This differs from setting the selection to "nonbonded" as it finds atoms
   * that have no bonds within the current selection.
   * @param  {Structure} structure - The Structure or StructureView object
   * @return {AtomSet} AtomSet of lone atoms
   */
  function getLoneAtomSet(structure) {
      var atomSet = structure.getAtomSet();
      var bondSet = structure.getBondSet();
      var bp = structure.getBondProxy();
      bondSet.forEach(function (idx) {
          bp.index = idx;
          atomSet.clear(bp.atomIndex1);
          atomSet.clear(bp.atomIndex2);
      });
      return atomSet;
  }
  /**
   * Line representation
   */
  var LineRepresentation = /*@__PURE__*/(function (StructureRepresentation) {
      function LineRepresentation(structure, viewer, params) {
          StructureRepresentation.call(this, structure, viewer, params);
          this.type = 'line';
          this.parameters = Object.assign({
              multipleBond: {
                  type: 'select',
                  rebuild: true,
                  options: {
                      'off': 'off',
                      'symmetric': 'symmetric',
                      'offset': 'offset'
                  }
              },
              bondSpacing: {
                  type: 'number', precision: 2, max: 2.0, min: 0.5
              },
              linewidth: {
                  type: 'integer', max: 50, min: 1, buffer: true
              },
              lines: {
                  type: 'boolean', rebuild: true
              },
              crosses: {
                  type: 'select',
                  rebuild: true,
                  options: {
                      'off': 'off',
                      'lone': 'lone',
                      'all': 'all'
                  }
              },
              crossSize: {
                  type: 'number', precision: 2, max: 2.0, min: 0.1
              }
          }, this.parameters, {
              flatShaded: null,
              side: null,
              wireframe: null,
              roughness: null,
              metalness: null
          });
          this.init(params);
      }

      if ( StructureRepresentation ) LineRepresentation.__proto__ = StructureRepresentation;
      LineRepresentation.prototype = Object.create( StructureRepresentation && StructureRepresentation.prototype );
      LineRepresentation.prototype.constructor = LineRepresentation;
      LineRepresentation.prototype.init = function init (params) {
          var p = params || {};
          this.multipleBond = defaults(p.multipleBond, 'off');
          this.bondSpacing = defaults(p.bondSpacing, 1.0);
          this.linewidth = defaults(p.linewidth, 2);
          this.lines = defaults(p.lines, true);
          this.crosses = defaults(p.crosses, 'lone');
          this.crossSize = defaults(p.crossSize, 0.4);
          StructureRepresentation.prototype.init.call(this, p);
      };
      LineRepresentation.prototype.getAtomRadius = function getAtomRadius (atom) {
          return 0.1;
      };
      LineRepresentation.prototype.getBondParams = function getBondParams (what, params) {
          params = Object.assign({
              multipleBond: this.multipleBond,
              bondSpacing: this.bondSpacing,
              radiusParams: { 'type': 'size', 'size': 0.1, 'scale': 1 }
          }, params);
          return StructureRepresentation.prototype.getBondParams.call(this, what, params);
      };
      LineRepresentation.prototype._crossData = function _crossData (what, sview) {
          if (what) {
              if (!what.position && !what.color)
                  { return; }
          }
          var p = {};
          if (this.crosses === 'lone') {
              Object.assign(p, { atomSet: getLoneAtomSet(sview) });
          }
          var atomData = sview.getAtomData(this.getAtomParams(what, p));
          var crossData = {};
          var position = atomData.position;
          var color = atomData.color;
          var picking = atomData.picking;
          var size = (position || color).length;
          var attrSize = size * 3;
          var cPosition1 = new Float32Array(0);
          var cPosition2 = new Float32Array(0);
          var cColor = new Float32Array(0);
          var cColor2 = new Float32Array(0);
          var cOffset = 0;
          var pickingArray = new Float32Array(0);
          if (!what || what.position) {
              cPosition1 = crossData.position1 = new Float32Array(attrSize);
              cPosition2 = crossData.position2 = new Float32Array(attrSize);
              cOffset = this.crossSize / 2;
          }
          if (!what || what.color) {
              cColor = crossData.color = new Float32Array(attrSize);
              cColor2 = crossData.color2 = new Float32Array(attrSize);
          }
          if (!what || what.picking) {
              pickingArray = new Float32Array(atomData.picking.array.length * 3); // Needs padding??
          }
          for (var v = 0; v < size; v++) {
              var j = v * 3;
              var i = j * 3;
              if (!what || what.position) {
                  var x = position[j];
                  var y = position[j + 1];
                  var z = position[j + 2];
                  cPosition1[i] = x - cOffset;
                  cPosition1[i + 1] = y;
                  cPosition1[i + 2] = z;
                  cPosition2[i] = x + cOffset;
                  cPosition2[i + 1] = y;
                  cPosition2[i + 2] = z;
                  cPosition1[i + 3] = x;
                  cPosition1[i + 4] = y - cOffset;
                  cPosition1[i + 5] = z;
                  cPosition2[i + 3] = x;
                  cPosition2[i + 4] = y + cOffset;
                  cPosition2[i + 5] = z;
                  cPosition1[i + 6] = x;
                  cPosition1[i + 7] = y;
                  cPosition1[i + 8] = z - cOffset;
                  cPosition2[i + 6] = x;
                  cPosition2[i + 7] = y;
                  cPosition2[i + 8] = z + cOffset;
              }
              if (!what || what.color) {
                  var cimax = i + 9;
                  for (var ci = i; ci < cimax; ci += 3) {
                      cColor[ci] = cColor2[ci] = color[j];
                      cColor[ci + 1] = cColor2[ci + 1] = color[j + 1];
                      cColor[ci + 2] = cColor2[ci + 2] = color[j + 2];
                  }
              }
              if (!what || what.picking) {
                  pickingArray[j] =
                      pickingArray[j + 1] =
                          pickingArray[j + 2] = picking.array[v];
              }
          }
          if (!what || what.picking) {
              crossData.picking = new AtomPicker(pickingArray, picking.structure);
          }
          return crossData;
      };
      LineRepresentation.prototype.createData = function createData (sview) {
          var what = { position: true, color: true, picking: true };
          var bufferList = [];
          if (this.lines) {
              var bondData = sview.getBondData(this.getBondParams(what));
              var lineBuffer = new WideLineBuffer(bondData, this.getBufferParams({ linewidth: this.linewidth }));
              bufferList.push(lineBuffer);
          }
          if (this.crosses !== 'off') {
              var crossBuffer = new WideLineBuffer(this._crossData(what, sview), this.getBufferParams({ linewidth: this.linewidth }));
              bufferList.push(crossBuffer);
          }
          return {
              bufferList: bufferList
          };
      };
      LineRepresentation.prototype.updateData = function updateData (what, data) {
          var bufferIdx = 0;
          if (this.lines) {
              var bondData = data.sview.getBondData(this.getBondParams(what));
              var lineAttributes = {};
              if (!what || what.position) {
                  Object.assign(lineAttributes, {
                      position1: bondData.position1,
                      position2: bondData.position2
                  });
              }
              if (!what || what.color) {
                  Object.assign(lineAttributes, {
                      color: bondData.color,
                      color2: bondData.color2
                  });
              }
              data.bufferList[bufferIdx++].setAttributes(lineAttributes);
          }
          if (this.crosses !== 'off') {
              var crossData = this._crossData(what, data.sview);
              var crossAttributes = {};
              if (!what || what.position) {
                  Object.assign(crossAttributes, {
                      position1: crossData.position1,
                      position2: crossData.position2
                  });
              }
              if (!what || what.color) {
                  Object.assign(crossAttributes, {
                      color: crossData.color,
                      color2: crossData.color2
                  });
              }
              data.bufferList[bufferIdx++].setAttributes(crossAttributes);
          }
      };
      LineRepresentation.prototype.setParameters = function setParameters (params) {
          var rebuild = false;
          var what = {};
          if (params && (params.bondSpacing || params.crossSize)) {
              Object.assign(what, { position: true });
          }
          StructureRepresentation.prototype.setParameters.call(this, params, what, rebuild);
          return this;
      };

      return LineRepresentation;
  }(StructureRepresentation));
  RepresentationRegistry.add('line', LineRepresentation);

  function makeGrid(length, width, height, DataCtor, elemSize) {
      DataCtor = DataCtor || Int32Array;
      elemSize = elemSize || 1;
      var data = new DataCtor(length * width * height * elemSize);
      function index(x, y, z) {
          return ((((x * width) + y) * height) + z) * elemSize;
      }
      function set(x, y, z) {
          var args = [], len = arguments.length - 3;
          while ( len-- > 0 ) args[ len ] = arguments[ len + 3 ];

          var i = index(x, y, z);
          for (var j = 0; j < elemSize; ++j) {
              data[i + j] = args[j];
          }
      }
      function toArray(x, y, z, array, offset) {
          if ( array === void 0 ) array = [];
          if ( offset === void 0 ) offset = 0;

          var i = index(x, y, z);
          for (var j = 0; j < elemSize; ++j) {
              array[offset + j] = data[i + j];
          }
      }
      function fromArray(x, y, z, array, offset) {
          if ( offset === void 0 ) offset = 0;

          var i = index(x, y, z);
          for (var j = 0; j < elemSize; ++j) {
              data[i + j] = array[offset + j];
          }
      }
      function copy(grid) {
          data.set(grid.data);
      }
      // function clone() {
      //   return makeGrid(
      //     length, width, height, DataCtor, elemSize
      //   ).copy(this)
      // }
      return { data: data, index: index, set: set, toArray: toArray, fromArray: fromArray, copy: copy };
  }

  /**
   * @file EDT Surface
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function EDTSurface(coordList, radiusList, indexList) {
      // based on D. Xu, Y. Zhang (2009) Generating Triangulated Macromolecular
      // Surfaces by Euclidean Distance Transform. PLoS ONE 4(12): e8140.
      //
      // Permission to use, copy, modify, and distribute this program for
      // any purpose, with or without fee, is hereby granted, provided that
      // the notices on the head, the reference information, and this
      // copyright notice appear in all copies or substantial portions of
      // the Software. It is provided "as is" without express or implied
      // warranty.
      //
      // ported to JavaScript by biochem_fan (http://webglmol.sourceforge.jp/)
      // refactored by dkoes (https://github.com/dkoes)
      //
      // adapted to NGL by Alexander Rose
      var radiusDict = getRadiusDict(radiusList);
      var bbox = computeBoundingBox(coordList);
      if (coordList.length === 0) {
          bbox[0].set([0, 0, 0]);
          bbox[1].set([0, 0, 0]);
      }
      var min = bbox[0];
      var max = bbox[1];
      var probeRadius, scaleFactor, cutoff;
      var pLength, pWidth, pHeight;
      var matrix, ptran;
      var depty, widxz;
      var cutRadius;
      var setAtomID;
      var vpBits, vpDistance, vpAtomID;
      function init(btype, _probeRadius, _scaleFactor, _cutoff, _setAtomID) {
          probeRadius = _probeRadius || 1.4;
          scaleFactor = _scaleFactor || 2.0;
          setAtomID = _setAtomID || true;
          var maxRadius = 0;
          for (var radius in radiusDict) {
              maxRadius = Math.max(maxRadius, radius);
          }
          var grid = getSurfaceGrid(min, max, maxRadius, scaleFactor, btype ? probeRadius : 0);
          pLength = grid.dim[0];
          pWidth = grid.dim[1];
          pHeight = grid.dim[2];
          matrix = grid.matrix;
          ptran = grid.tran;
          scaleFactor = grid.scaleFactor;
          // boundingatom caches
          depty = {};
          widxz = {};
          boundingatom(btype);
          cutRadius = probeRadius * scaleFactor;
          if (_cutoff) {
              cutoff = _cutoff;
          }
          else {
              // cutoff = Math.max( 0.1, -1.2 + scaleFactor * probeRadius );
              cutoff = probeRadius / scaleFactor;
          }
          vpBits = new Uint8Array(pLength * pWidth * pHeight);
          if (btype) {
              vpDistance = new Float64Array(pLength * pWidth * pHeight);
          }
          if (setAtomID) {
              vpAtomID = new Int32Array(pLength * pWidth * pHeight);
          }
      }
      // constants for vpBits bitmasks
      var INOUT = 1;
      var ISDONE = 2;
      var ISBOUND = 4;
      var nb = [
          new Int32Array([1, 0, 0]), new Int32Array([-1, 0, 0]),
          new Int32Array([0, 1, 0]), new Int32Array([0, -1, 0]),
          new Int32Array([0, 0, 1]), new Int32Array([0, 0, -1]),
          new Int32Array([1, 1, 0]), new Int32Array([1, -1, 0]),
          new Int32Array([-1, 1, 0]), new Int32Array([-1, -1, 0]),
          new Int32Array([1, 0, 1]), new Int32Array([1, 0, -1]),
          new Int32Array([-1, 0, 1]), new Int32Array([-1, 0, -1]),
          new Int32Array([0, 1, 1]), new Int32Array([0, 1, -1]),
          new Int32Array([0, -1, 1]), new Int32Array([0, -1, -1]),
          new Int32Array([1, 1, 1]), new Int32Array([1, 1, -1]),
          new Int32Array([1, -1, 1]), new Int32Array([-1, 1, 1]),
          new Int32Array([1, -1, -1]), new Int32Array([-1, -1, 1]),
          new Int32Array([-1, 1, -1]), new Int32Array([-1, -1, -1])
      ];
      //
      this.getVolume = function (type, probeRadius, scaleFactor, cutoff, setAtomID) {
          console.time('EDTSurface.getVolume');
          var btype = type !== 'vws';
          init(btype, probeRadius, scaleFactor, cutoff, setAtomID);
          fillvoxels(btype);
          buildboundary();
          if (type === 'ms' || type === 'ses') {
              fastdistancemap();
          }
          if (type === 'ses') {
              boundingatom(false);
              fillvoxelswaals();
          }
          marchingcubeinit(type);
          // set atomindex in the volume data
          for (var i = 0, il = vpAtomID.length; i < il; ++i) {
              vpAtomID[i] = indexList[vpAtomID[i]];
          }
          console.timeEnd('EDTSurface.getVolume');
          return {
              data: vpBits,
              nx: pHeight,
              ny: pWidth,
              nz: pLength,
              atomindex: vpAtomID
          };
      };
      this.getSurface = function (type, probeRadius, scaleFactor, cutoff, setAtomID, smooth, contour) {
          var vd = this.getVolume(type, probeRadius, scaleFactor, cutoff, setAtomID);
          var volsurf = new VolumeSurface(vd.data, vd.nx, vd.ny, vd.nz, vd.atomindex);
          return volsurf.getSurface(1, smooth, undefined, matrix, contour);
      };
      function boundingatom(btype) {
          var r;
          var j;
          var k;
          var txz;
          var tdept;
          var sradius;
          var tradius;
          var widxzR;
          var deptyName;
          var indx;
          for (var name in radiusDict) {
              r = parseFloat(name);
              if (depty[name])
                  { continue; }
              if (!btype) {
                  tradius = r * scaleFactor + 0.5;
              }
              else {
                  tradius = (r + probeRadius) * scaleFactor + 0.5;
              }
              sradius = tradius * tradius;
              widxzR = Math.floor(tradius) + 1;
              deptyName = new Int32Array(widxzR * widxzR);
              indx = 0;
              for (j = 0; j < widxzR; ++j) {
                  for (k = 0; k < widxzR; ++k) {
                      txz = j * j + k * k;
                      if (txz > sradius) {
                          deptyName[indx] = -1;
                      }
                      else {
                          tdept = Math.sqrt(sradius - txz);
                          deptyName[indx] = Math.floor(tdept);
                      }
                      ++indx;
                  }
              }
              widxz[name] = widxzR;
              depty[name] = deptyName;
          }
      }
      function fillatom(idx) {
          var ci = idx * 3;
          var ri = idx;
          var cx, cy, cz, ox, oy, oz, mi, mj, mk, i, j, k, si, sj, sk;
          var ii, jj, kk;
          cx = Math.floor(0.5 + scaleFactor * (coordList[ci] + ptran[0]));
          cy = Math.floor(0.5 + scaleFactor * (coordList[ci + 1] + ptran[1]));
          cz = Math.floor(0.5 + scaleFactor * (coordList[ci + 2] + ptran[2]));
          var at = radiusList[ri];
          var deptyAt = depty[at];
          var nind = 0;
          var pWH = pWidth * pHeight;
          var n = widxz[at];
          var deptyAtNind;
          for (i = 0; i < n; ++i) {
              for (j = 0; j < n; ++j) {
                  deptyAtNind = deptyAt[nind];
                  if (deptyAtNind !== -1) {
                      for (ii = -1; ii < 2; ++ii) {
                          for (jj = -1; jj < 2; ++jj) {
                              for (kk = -1; kk < 2; ++kk) {
                                  if (ii !== 0 && jj !== 0 && kk !== 0) {
                                      mi = ii * i;
                                      mk = kk * j;
                                      for (k = 0; k <= deptyAtNind; ++k) {
                                          mj = k * jj;
                                          si = cx + mi;
                                          sj = cy + mj;
                                          sk = cz + mk;
                                          if (si < 0 || sj < 0 || sk < 0 ||
                                              si >= pLength || sj >= pWidth || sk >= pHeight) {
                                              continue;
                                          }
                                          var index = si * pWH + sj * pHeight + sk;
                                          if (!setAtomID) {
                                              vpBits[index] |= INOUT;
                                          }
                                          else {
                                              if (!(vpBits[index] & INOUT)) {
                                                  vpBits[index] |= INOUT;
                                                  vpAtomID[index] = idx;
                                              }
                                              else if (vpBits[index] & INOUT) {
                                                  var ci2 = vpAtomID[index];
                                                  if (ci2 !== ci) {
                                                      ox = cx + mi - Math.floor(0.5 + scaleFactor * (coordList[ci2] + ptran[0]));
                                                      oy = cy + mj - Math.floor(0.5 + scaleFactor * (coordList[ci2 + 1] + ptran[1]));
                                                      oz = cz + mk - Math.floor(0.5 + scaleFactor * (coordList[ci2 + 2] + ptran[2]));
                                                      if (mi * mi + mj * mj + mk * mk < ox * ox + oy * oy + oz * oz) {
                                                          vpAtomID[index] = idx;
                                                      }
                                                  }
                                              }
                                          }
                                      } // k
                                  } // if
                              } // kk
                          } // jj
                      } // ii
                  } // if
                  nind++;
              } // j
          } // i
      }
      function fillvoxels(btype) {
          console.time('EDTSurface fillvoxels');
          var i, il;
          for (i = 0, il = vpBits.length; i < il; ++i) {
              vpBits[i] = 0;
              if (btype)
                  { vpDistance[i] = -1.0; }
              if (setAtomID)
                  { vpAtomID[i] = -1; }
          }
          for (i = 0, il = coordList.length / 3; i < il; ++i) {
              fillatom(i);
          }
          for (i = 0, il = vpBits.length; i < il; ++i) {
              if (vpBits[i] & INOUT) {
                  vpBits[i] |= ISDONE;
              }
          }
          console.timeEnd('EDTSurface fillvoxels');
      }
      function fillAtomWaals(idx) {
          var ci = idx * 3;
          var ri = idx;
          var cx;
          var cy;
          var cz;
          var ox;
          var oy;
          var oz;
          var nind = 0;
          var mi;
          var mj;
          var mk;
          var si;
          var sj;
          var sk;
          var i;
          var j;
          var k;
          var ii;
          var jj;
          var kk;
          var n;
          cx = Math.floor(0.5 + scaleFactor * (coordList[ci] + ptran[0]));
          cy = Math.floor(0.5 + scaleFactor * (coordList[ci + 1] + ptran[1]));
          cz = Math.floor(0.5 + scaleFactor * (coordList[ci + 2] + ptran[2]));
          var at = radiusList[ri];
          var pWH = pWidth * pHeight;
          for (i = 0, n = widxz[at]; i < n; ++i) {
              for (j = 0; j < n; ++j) {
                  if (depty[at][nind] !== -1) {
                      for (ii = -1; ii < 2; ++ii) {
                          for (jj = -1; jj < 2; ++jj) {
                              for (kk = -1; kk < 2; ++kk) {
                                  if (ii !== 0 && jj !== 0 && kk !== 0) {
                                      mi = ii * i;
                                      mk = kk * j;
                                      for (k = 0; k <= depty[at][nind]; ++k) {
                                          mj = k * jj;
                                          si = cx + mi;
                                          sj = cy + mj;
                                          sk = cz + mk;
                                          if (si < 0 || sj < 0 || sk < 0 ||
                                              si >= pLength || sj >= pWidth || sk >= pHeight) {
                                              continue;
                                          }
                                          var index = si * pWH + sj * pHeight + sk;
                                          if (!(vpBits[index] & ISDONE)) {
                                              vpBits[index] |= ISDONE;
                                              if (setAtomID)
                                                  { vpAtomID[index] = idx; }
                                          }
                                          else if (setAtomID) {
                                              var ci2 = vpAtomID[index];
                                              ox = Math.floor(0.5 + scaleFactor * (coordList[ci2] + ptran[0]));
                                              oy = Math.floor(0.5 + scaleFactor * (coordList[ci2 + 1] + ptran[1]));
                                              oz = Math.floor(0.5 + scaleFactor * (coordList[ci2 + 2] + ptran[2]));
                                              if (mi * mi + mj * mj + mk * mk < ox * ox + oy * oy + oz * oz) {
                                                  vpAtomID[index] = idx;
                                              }
                                          }
                                      } // k
                                  } // if
                              } // kk
                          } // jj
                      } // ii
                  } // if
                  nind++;
              } // j
          } // i
      }
      function fillvoxelswaals() {
          var i, il;
          for (i = 0, il = vpBits.length; i < il; ++i) {
              vpBits[i] &= ~ISDONE; // not isdone
          }
          for (i = 0, il = coordList.length / 3; i < il; ++i) {
              fillAtomWaals(i);
          }
      }
      function buildboundary() {
          var i, j, k;
          var pWH = pWidth * pHeight;
          for (i = 0; i < pLength; ++i) {
              for (j = 0; j < pHeight; ++j) {
                  for (k = 0; k < pWidth; ++k) {
                      var index = i * pWH + k * pHeight + j;
                      if (vpBits[index] & INOUT) {
                          // var flagbound = false;
                          var ii = 0;
                          // while( !flagbound && ii < 26 ){
                          while (ii < 26) {
                              var ti = i + nb[ii][0];
                              var tj = j + nb[ii][2];
                              var tk = k + nb[ii][1];
                              if (ti > -1 && ti < pLength &&
                                  tk > -1 && tk < pWidth &&
                                  tj > -1 && tj < pHeight &&
                                  !(vpBits[ti * pWH + tk * pHeight + tj] & INOUT)) {
                                  vpBits[index] |= ISBOUND;
                                  // flagbound = true;
                                  break;
                              }
                              else {
                                  ii++;
                              }
                          }
                      }
                  } // k
              } // j
          } // i
      }
      function fastdistancemap() {
          console.time('EDTSurface fastdistancemap');
          var i, j, k, n;
          var boundPoint = makeGrid(pLength, pWidth, pHeight, Uint16Array, 3);
          var pWH = pWidth * pHeight;
          var cutRSq = cutRadius * cutRadius;
          var totalsurfacevox = 0;
          // var totalinnervox = 0;
          var index;
          for (i = 0; i < pLength; ++i) {
              for (j = 0; j < pWidth; ++j) {
                  for (k = 0; k < pHeight; ++k) {
                      index = i * pWH + j * pHeight + k;
                      vpBits[index] &= ~ISDONE;
                      if (vpBits[index] & INOUT) {
                          if (vpBits[index] & ISBOUND) {
                              boundPoint.set(i, j, k, i, j, k);
                              vpDistance[index] = 0;
                              vpBits[index] |= ISDONE;
                              totalsurfacevox += 1;
                          } /* else{
                              totalinnervox += 1;
                          } */
                      }
                  }
              }
          }
          var inarray = new Int32Array(3 * totalsurfacevox);
          var positin = 0;
          var outarray = new Int32Array(3 * totalsurfacevox);
          var positout = 0;
          for (i = 0; i < pLength; ++i) {
              for (j = 0; j < pWidth; ++j) {
                  for (k = 0; k < pHeight; ++k) {
                      index = i * pWH + j * pHeight + k;
                      if (vpBits[index] & ISBOUND) {
                          inarray[positin] = i;
                          inarray[positin + 1] = j;
                          inarray[positin + 2] = k;
                          positin += 3;
                          vpBits[index] &= ~ISBOUND;
                      }
                  }
              }
          }
          do {
              positout = fastoneshell(inarray, boundPoint, positin, outarray);
              positin = 0;
              for (i = 0, n = positout; i < n; i += 3) {
                  index = pWH * outarray[i] + pHeight * outarray[i + 1] + outarray[i + 2];
                  vpBits[index] &= ~ISBOUND;
                  if (vpDistance[index] <= 1.0404 * cutRSq) {
                      // if( vpDistance[ index ] <= 1.02 * cutRadius ){
                      inarray[positin] = outarray[i];
                      inarray[positin + 1] = outarray[i + 1];
                      inarray[positin + 2] = outarray[i + 2];
                      positin += 3;
                  }
              }
          } while (positin > 0);
          // var cutsf = Math.max( 0, scaleFactor - 0.5 );
          // cutoff = cutRadius - 0.5 / ( 0.1 + cutsf );
          var cutoffSq = cutoff * cutoff;
          var index2;
          var bp = new Uint16Array(3);
          for (i = 0; i < pLength; ++i) {
              for (j = 0; j < pWidth; ++j) {
                  for (k = 0; k < pHeight; ++k) {
                      index = i * pWH + j * pHeight + k;
                      vpBits[index] &= ~ISBOUND;
                      // ses solid
                      if (vpBits[index] & INOUT) {
                          if (!(vpBits[index] & ISDONE) ||
                              ((vpBits[index] & ISDONE) && vpDistance[index] >= cutoffSq)) {
                              vpBits[index] |= ISBOUND;
                              if (setAtomID && (vpBits[index] & ISDONE)) {
                                  boundPoint.toArray(i, j, k, bp);
                                  index2 = bp[0] * pWH + bp[1] * pHeight + bp[2];
                                  vpAtomID[index] = vpAtomID[index2];
                              }
                          }
                      }
                  }
              }
          }
          console.timeEnd('EDTSurface fastdistancemap');
      }
      function fastoneshell(inarray, boundPoint, positin, outarray) {
          // *allocout,voxel2
          // ***boundPoint, int*
          // outnum, int *elimi)
          var tx, ty, tz;
          var dx, dy, dz;
          var i, j, n;
          var square;
          var index;
          var nbj;
          var bp = new Uint16Array(3);
          var positout = 0;
          if (positin === 0) {
              return positout;
          }
          var tnvix = -1;
          var tnviy = -1;
          var tnviz = -1;
          var pWH = pWidth * pHeight;
          for (i = 0, n = positin; i < n; i += 3) {
              tx = inarray[i];
              ty = inarray[i + 1];
              tz = inarray[i + 2];
              boundPoint.toArray(tx, ty, tz, bp);
              for (j = 0; j < 6; ++j) {
                  nbj = nb[j];
                  tnvix = tx + nbj[0];
                  tnviy = ty + nbj[1];
                  tnviz = tz + nbj[2];
                  if (tnvix < pLength && tnvix > -1 &&
                      tnviy < pWidth && tnviy > -1 &&
                      tnviz < pHeight && tnviz > -1) {
                      index = tnvix * pWH + pHeight * tnviy + tnviz;
                      if ((vpBits[index] & INOUT) && !(vpBits[index] & ISDONE)) {
                          boundPoint.fromArray(tnvix, tnviy, tnviz, bp);
                          dx = tnvix - bp[0];
                          dy = tnviy - bp[1];
                          dz = tnviz - bp[2];
                          square = dx * dx + dy * dy + dz * dz;
                          // square = Math.sqrt( square );
                          vpDistance[index] = square;
                          vpBits[index] |= ISDONE;
                          vpBits[index] |= ISBOUND;
                          outarray[positout] = tnvix;
                          outarray[positout + 1] = tnviy;
                          outarray[positout + 2] = tnviz;
                          positout += 3;
                      }
                      else if ((vpBits[index] & INOUT) && (vpBits[index] & ISDONE)) {
                          dx = tnvix - bp[0];
                          dy = tnviy - bp[1];
                          dz = tnviz - bp[2];
                          square = dx * dx + dy * dy + dz * dz;
                          // square = Math.sqrt( square );
                          if (square < vpDistance[index]) {
                              boundPoint.fromArray(tnvix, tnviy, tnviz, bp);
                              vpDistance[index] = square;
                              if (!(vpBits[index] & ISBOUND)) {
                                  vpBits[index] |= ISBOUND;
                                  outarray[positout] = tnvix;
                                  outarray[positout + 1] = tnviy;
                                  outarray[positout + 2] = tnviz;
                                  positout += 3;
                              }
                          }
                      }
                  }
              }
          }
          for (i = 0, n = positin; i < n; i += 3) {
              tx = inarray[i];
              ty = inarray[i + 1];
              tz = inarray[i + 2];
              boundPoint.toArray(tx, ty, tz, bp);
              for (j = 6; j < 18; j++) {
                  nbj = nb[j];
                  tnvix = tx + nbj[0];
                  tnviy = ty + nbj[1];
                  tnviz = tz + nbj[2];
                  if (tnvix < pLength && tnvix > -1 &&
                      tnviy < pWidth && tnviy > -1 &&
                      tnviz < pHeight && tnviz > -1) {
                      index = tnvix * pWH + pHeight * tnviy + tnviz;
                      if ((vpBits[index] & INOUT) && !(vpBits[index] & ISDONE)) {
                          boundPoint.fromArray(tnvix, tnviy, tnviz, bp);
                          dx = tnvix - bp[0];
                          dy = tnviy - bp[1];
                          dz = tnviz - bp[2];
                          square = dx * dx + dy * dy + dz * dz;
                          // square = Math.sqrt( square );
                          vpDistance[index] = square;
                          vpBits[index] |= ISDONE;
                          vpBits[index] |= ISBOUND;
                          outarray[positout] = tnvix;
                          outarray[positout + 1] = tnviy;
                          outarray[positout + 2] = tnviz;
                          positout += 3;
                      }
                      else if ((vpBits[index] & INOUT) && (vpBits[index] & ISDONE)) {
                          dx = tnvix - bp[0];
                          dy = tnviy - bp[1];
                          dz = tnviz - bp[2];
                          square = dx * dx + dy * dy + dz * dz;
                          // square = Math.sqrt( square );
                          if (square < vpDistance[index]) {
                              boundPoint.fromArray(tnvix, tnviy, tnviz, bp);
                              vpDistance[index] = square;
                              if (!(vpBits[index] & ISBOUND)) {
                                  vpBits[index] |= ISBOUND;
                                  outarray[positout] = tnvix;
                                  outarray[positout + 1] = tnviy;
                                  outarray[positout + 2] = tnviz;
                                  positout += 3;
                              }
                          }
                      }
                  }
              }
          }
          for (i = 0, n = positin; i < n; i += 3) {
              tx = inarray[i];
              ty = inarray[i + 1];
              tz = inarray[i + 2];
              boundPoint.toArray(tx, ty, tz, bp);
              for (j = 18; j < 26; j++) {
                  nbj = nb[j];
                  tnvix = tx + nbj[0];
                  tnviy = ty + nbj[1];
                  tnviz = tz + nbj[2];
                  if (tnvix < pLength && tnvix > -1 &&
                      tnviy < pWidth && tnviy > -1 &&
                      tnviz < pHeight && tnviz > -1) {
                      index = tnvix * pWH + pHeight * tnviy + tnviz;
                      if ((vpBits[index] & INOUT) && !(vpBits[index] & ISDONE)) {
                          boundPoint.fromArray(tnvix, tnviy, tnviz, bp);
                          dx = tnvix - bp[0];
                          dy = tnviy - bp[1];
                          dz = tnviz - bp[2];
                          square = dx * dx + dy * dy + dz * dz;
                          // square = Math.sqrt( square );
                          vpDistance[index] = square;
                          vpBits[index] |= ISDONE;
                          vpBits[index] |= ISBOUND;
                          outarray[positout] = tnvix;
                          outarray[positout + 1] = tnviy;
                          outarray[positout + 2] = tnviz;
                          positout += 3;
                      }
                      else if ((vpBits[index] & INOUT) && (vpBits[index] & ISDONE)) {
                          dx = tnvix - bp[0];
                          dy = tnviy - bp[1];
                          dz = tnviz - bp[2];
                          square = dx * dx + dy * dy + dz * dz;
                          // square = Math.sqrt( square );
                          if (square < vpDistance[index]) {
                              boundPoint.fromArray(tnvix, tnviy, tnviz, bp);
                              vpDistance[index] = square;
                              if (!(vpBits[index] & ISBOUND)) {
                                  vpBits[index] |= ISBOUND;
                                  outarray[positout] = tnvix;
                                  outarray[positout + 1] = tnviy;
                                  outarray[positout + 2] = tnviz;
                                  positout += 3;
                              }
                          }
                      }
                  }
              }
          }
          return positout;
      }
      function marchingcubeinit(stype) {
          var i;
          var n = vpBits.length;
          if (stype === 'vws') {
              for (i = 0; i < n; ++i) {
                  vpBits[i] &= ~ISBOUND;
                  vpBits[i] = (vpBits[i] & ISDONE) ? 1 : 0;
              }
          }
          else if (stype === 'ms') { // ses without vdw => ms
              for (i = 0; i < n; ++i) {
                  vpBits[i] &= ~ISDONE;
                  if (vpBits[i] & ISBOUND) {
                      vpBits[i] |= ISDONE;
                  }
                  vpBits[i] &= ~ISBOUND;
                  vpBits[i] = (vpBits[i] & ISDONE) ? 1 : 0;
              }
          }
          else if (stype === 'ses') {
              for (i = 0; i < n; ++i) {
                  if ((vpBits[i] & ISBOUND) && (vpBits[i] & ISDONE)) {
                      vpBits[i] &= ~ISBOUND;
                  }
                  else if ((vpBits[i] & ISBOUND) && !(vpBits[i] & ISDONE)) {
                      vpBits[i] |= ISDONE;
                  }
                  vpBits[i] = (vpBits[i] & ISDONE) ? 1 : 0;
              }
          }
          else if (stype === 'sas') {
              for (i = 0; i < n; ++i) {
                  vpBits[i] &= ~ISBOUND;
                  vpBits[i] = (vpBits[i] & ISDONE) ? 1 : 0;
              }
          }
      }
  }
  Object.assign(EDTSurface, { __deps: [
          getSurfaceGrid, getRadiusDict, VolumeSurface, computeBoundingBox, makeGrid
      ] });

  /**
   * @file AV Surface
   * @author Fred Ludlow <fred.ludlow@gmail.com>
   * @private
   */
  function makeAVHash(atomsX, atomsY, atomsZ, atomsR, min, max, maxDistance) {
      maxDistance = Math.max(0.1, maxDistance); // Avoid maxDistance of zero, see #802
      var nAtoms = atomsX.length;
      var minX = min[0];
      var minY = min[1];
      var minZ = min[2];
      var maxX = max[0];
      var maxY = max[1];
      var maxZ = max[2];
      function hashFunc(w, minW) {
          return Math.floor((w - minW) / maxDistance);
      }
      var iDim = hashFunc(maxX, minX) + 1;
      var jDim = hashFunc(maxY, minY) + 1;
      var kDim = hashFunc(maxZ, minZ) + 1;
      var nCells = iDim * jDim * kDim;
      var jkDim = jDim * kDim;
      /* Get cellID for cartesian x,y,z */
      var cellID = function (x, y, z) {
          return (((hashFunc(x, minX) * jDim) + hashFunc(y, minY)) * kDim) + hashFunc(z, minZ);
      };
      /* Initial building, could probably be optimized further */
      var preHash = []; // preHash[ cellID ] = [ atomId1, atomId2 ];
      for (var i = 0; i < nAtoms; i++) {
          var cid = cellID(atomsX[i], atomsY[i], atomsZ[i]);
          if (preHash[cid] === undefined) {
              preHash[cid] = [i];
          }
          else {
              preHash[cid].push(i);
          }
      }
      var cellOffsets = new Uint32Array(nCells);
      var cellLengths = new Uint16Array(nCells);
      var data = new Uint32Array(nAtoms);
      var offset = 0;
      var maxCellLength = 0;
      for (i = 0; i < nCells; i++) {
          var start = cellOffsets[i] = offset;
          var subArray = preHash[i];
          if (subArray !== undefined) {
              for (var j = 0; j < subArray.length; j++) {
                  data[offset] = subArray[j];
                  offset++;
              }
          }
          var cellLength = offset - start;
          cellLengths[i] = cellLength;
          if (cellLength > maxCellLength) {
              maxCellLength = cellLength;
          }
      }
      // Maximum number of neighbours we could ever produce (27 adjacent cells of equal population)
      var neighbourListLength = (27 * maxCellLength) + 1;
      /**
       * Populate the supplied out array with atom indices that are within rAtom + rExtra
       * of x,y,z
       *
       * -1 in out array indicates the end of the list
       *
       * @param  {Float} x - x coordinate
       * @param  {Float} y - y coordinate
       * @param  {Float} z - z coordinate
       * @param  {Float} rExtra - additional radius
       * @param  {Float32Array} out - pre-allocated output array
       * @return {undefined}
       */
      var withinRadii = function (x, y, z, rExtra, out) {
          var outIdx = 0;
          var nearI = hashFunc(x, minX);
          var nearJ = hashFunc(y, minY);
          var nearK = hashFunc(z, minZ);
          var loI = Math.max(0, nearI - 1);
          var loJ = Math.max(0, nearJ - 1);
          var loK = Math.max(0, nearK - 1);
          var hiI = Math.min(iDim, nearI + 2);
          var hiJ = Math.min(jDim, nearJ + 2);
          var hiK = Math.min(kDim, nearK + 2);
          for (var i = loI; i < hiI; ++i) {
              var iOffset = i * jkDim;
              for (var j = loJ; j < hiJ; ++j) {
                  var jOffset = j * kDim;
                  for (var k = loK; k < hiK; ++k) {
                      var cid = iOffset + jOffset + k;
                      var cellStart = cellOffsets[cid];
                      var cellEnd = cellStart + cellLengths[cid];
                      for (var dataIndex = cellStart; dataIndex < cellEnd; dataIndex++) {
                          var atomIndex = data[dataIndex];
                          var dx = atomsX[atomIndex] - x;
                          var dy = atomsY[atomIndex] - y;
                          var dz = atomsZ[atomIndex] - z;
                          var rSum = atomsR[atomIndex] + rExtra;
                          if ((dx * dx + dy * dy + dz * dz) <= (rSum * rSum)) {
                              out[outIdx++] = data[dataIndex];
                          }
                      }
                  }
              }
          }
          // Add terminator
          out[outIdx] = -1;
      };
      return {
          neighbourListLength: neighbourListLength,
          withinRadii: withinRadii
      };
  }
  function AVSurface(coordList, radiusList, indexList) {
      // Field generation method adapted from AstexViewer (Mike Hartshorn)
      // by Fred Ludlow.
      // Other parts based heavily on NGL (Alexander Rose) EDT Surface class
      //
      // Should work as a drop-in alternative to EDTSurface (though some of
      // the EDT paramters are not relevant in this method).
      var nAtoms = radiusList.length;
      var x = new Float32Array(nAtoms);
      var y = new Float32Array(nAtoms);
      var z = new Float32Array(nAtoms);
      for (var i = 0; i < nAtoms; i++) {
          var ci = 3 * i;
          x[i] = coordList[ci];
          y[i] = coordList[ci + 1];
          z[i] = coordList[ci + 2];
      }
      var bbox = computeBoundingBox(coordList);
      if (coordList.length === 0) {
          bbox[0].set([0, 0, 0]);
          bbox[1].set([0, 0, 0]);
      }
      var min = bbox[0];
      var max = bbox[1];
      var r, r2; // Atom positions, expanded radii (squared)
      var maxRadius;
      // Parameters
      var probeRadius, scaleFactor, setAtomID, probePositions;
      // Cache last value for obscured test
      var lastClip = -1;
      // Grid params
      var dim, matrix, grid, atomIndex;
      // grid indices -> xyz coords
      var gridx, gridy, gridz;
      // Lookup tables:
      var sinTable, cosTable;
      // Spatial Hash
      var hash;
      // Neighbour array to be filled by hash
      var neighbours;
      // Vectors for Torus Projection
      var atob = new Float32Array([0.0, 0.0, 0.0]);
      var mid = new Float32Array([0.0, 0.0, 0.0]);
      var n1 = new Float32Array([0.0, 0.0, 0.0]);
      var n2 = new Float32Array([0.0, 0.0, 0.0]);
      var ngTorus;
      function init(_probeRadius, _scaleFactor, _setAtomID, _probePositions) {
          probeRadius = defaults(_probeRadius, 1.4);
          scaleFactor = defaults(_scaleFactor, 2.0);
          setAtomID = defaults(_setAtomID, true);
          probePositions = defaults(_probePositions, 30);
          r = new Float32Array(nAtoms);
          r2 = new Float32Array(nAtoms);
          for (var i = 0; i < r.length; ++i) {
              var rExt = radiusList[i] + probeRadius;
              r[i] = rExt;
              r2[i] = rExt * rExt;
          }
          maxRadius = 0;
          for (var j = 0; j < r.length; ++j) {
              if (r[j] > maxRadius)
                  { maxRadius = r[j]; }
          }
          initializeGrid();
          initializeAngleTables();
          initializeHash();
          lastClip = -1;
      }
      function fillGridDim(a, start, step) {
          for (var i = 0; i < a.length; i++) {
              a[i] = start + (step * i);
          }
      }
      function initializeGrid() {
          var surfGrid = getSurfaceGrid(min, max, maxRadius, scaleFactor, 0.0);
          scaleFactor = surfGrid.scaleFactor;
          dim = surfGrid.dim;
          matrix = surfGrid.matrix;
          ngTorus = Math.max(5, 2 + Math.floor(probeRadius * scaleFactor));
          grid = uniformArray(dim[0] * dim[1] * dim[2], -1001.0);
          atomIndex = new Int32Array(grid.length);
          gridx = new Float32Array(dim[0]);
          gridy = new Float32Array(dim[1]);
          gridz = new Float32Array(dim[2]);
          fillGridDim(gridx, min[0], 1 / scaleFactor);
          fillGridDim(gridy, min[1], 1 / scaleFactor);
          fillGridDim(gridz, min[2], 1 / scaleFactor);
      }
      function initializeAngleTables() {
          var theta = 0.0;
          var step = 2 * Math.PI / probePositions;
          cosTable = new Float32Array(probePositions);
          sinTable = new Float32Array(probePositions);
          for (var i = 0; i < probePositions; i++) {
              cosTable[i] = Math.cos(theta);
              sinTable[i] = Math.sin(theta);
              theta += step;
          }
      }
      function initializeHash() {
          hash = makeAVHash(x, y, z, r, min, max, 2.01 * maxRadius);
          neighbours = new Int32Array(hash.neighbourListLength);
      }
      function obscured(x, y, z, a, b) {
          // Is the point at x,y,z obscured by any of the atoms
          // specifeid by indices in neighbours. Ignore indices
          // a and b (these are the relevant atoms in projectPoints/Torii)
          // Cache the last clipped atom (as very often the same one in
          // subsequent calls)
          var ai;
          if (lastClip !== -1) {
              ai = lastClip;
              if (ai !== a && ai !== b && singleAtomObscures(ai, x, y, z)) {
                  return ai;
              }
              else {
                  lastClip = -1;
              }
          }
          var ni = 0;
          ai = neighbours[ni];
          while (ai >= 0) {
              if (ai !== a && ai !== b && singleAtomObscures(ai, x, y, z)) {
                  lastClip = ai;
                  return ai;
              }
              ai = neighbours[++ni];
          }
          lastClip = -1;
          return -1;
      }
      function singleAtomObscures(ai, x, y, z) {
          var ci = 3 * ai;
          var ra2 = r2[ai];
          var dx = coordList[ci] - x;
          var dy = coordList[ci + 1] - y;
          var dz = coordList[ci + 2] - z;
          var d2 = dx * dx + dy * dy + dz * dz;
          return d2 < ra2;
      }
      function projectPoints() {
          // For each atom:
          //     Iterate over a subsection of the grid, for each point:
          //         If current value < 0.0, unvisited, set positive
          //
          //         In any case: Project this point onto surface of the atomic sphere
          //         If this projected point is not obscured by any other atom
          //             Calcualte delta distance and set grid value to minimum of
          //             itself and delta
          // Should we alias frequently accessed closure variables??
          // Assume JS engine capable of optimizing this
          // anyway...
          for (var i = 0; i < nAtoms; i++) {
              var ax = x[i];
              var ay = y[i];
              var az = z[i];
              var ar = r[i];
              var ar2 = r2[i];
              hash.withinRadii(ax, ay, az, ar, neighbours);
              // Number of grid points, round this up...
              var ng = Math.ceil(ar * scaleFactor);
              // Center of the atom, mapped to grid points (take floor)
              var iax = Math.floor(scaleFactor * (ax - min[0]));
              var iay = Math.floor(scaleFactor * (ay - min[1]));
              var iaz = Math.floor(scaleFactor * (az - min[2]));
              // Extents of grid to consider for this atom
              var minx = Math.max(0, iax - ng);
              var miny = Math.max(0, iay - ng);
              var minz = Math.max(0, iaz - ng);
              // Add two to these points:
              // - iax are floor'd values so this ensures coverage
              // - these are loop limits (exclusive)
              var maxx = Math.min(dim[0], iax + ng + 2);
              var maxy = Math.min(dim[1], iay + ng + 2);
              var maxz = Math.min(dim[2], iaz + ng + 2);
              for (var ix = minx; ix < maxx; ix++) {
                  var dx = gridx[ix] - ax;
                  var xoffset = dim[1] * dim[2] * ix;
                  for (var iy = miny; iy < maxy; iy++) {
                      var dy = gridy[iy] - ay;
                      var dxy2 = dx * dx + dy * dy;
                      var xyoffset = xoffset + dim[2] * iy;
                      for (var iz = minz; iz < maxz; iz++) {
                          var dz = gridz[iz] - az;
                          var d2 = dxy2 + dz * dz;
                          if (d2 < ar2) {
                              var idx = iz + xyoffset;
                              if (grid[idx] < 0.0) {
                                  // Unvisited, make positive
                                  grid[idx] = -grid[idx];
                              }
                              // Project on to the surface of the sphere
                              // sp is the projected point ( dx, dy, dz ) * ( ra / d )
                              var d = Math.sqrt(d2);
                              var ap = ar / d;
                              var spx = dx * ap;
                              var spy = dy * ap;
                              var spz = dz * ap;
                              spx += ax;
                              spy += ay;
                              spz += az;
                              if (obscured(spx, spy, spz, i, -1) === -1) {
                                  var dd = ar - d;
                                  if (dd < grid[idx]) {
                                      grid[idx] = dd;
                                      if (setAtomID)
                                          { atomIndex[idx] = i; }
                                  }
                              }
                          }
                      }
                  }
              }
          }
      }
      function projectTorii() {
          for (var i = 0; i < nAtoms; i++) {
              hash.withinRadii(x[i], y[i], z[i], r[i], neighbours);
              var ia = 0;
              var ni = neighbours[ia];
              while (ni >= 0) {
                  if (i < ni) {
                      projectTorus(i, ni);
                  }
                  ni = neighbours[++ia];
              }
          }
      }
      function projectTorus(a, b) {
          var r1 = r[a];
          var r2 = r[b];
          var dx = atob[0] = x[b] - x[a];
          var dy = atob[1] = y[b] - y[a];
          var dz = atob[2] = z[b] - z[a];
          var d2 = dx * dx + dy * dy + dz * dz;
          // This check now redundant as already done in AVHash.withinRadii
          // if( d2 > (( r1 + r2 ) * ( r1 + r2 )) ){ return; }
          var d = Math.sqrt(d2);
          // Find angle between a->b vector and the circle
          // of their intersection by cosine rule
          var cosA = (r1 * r1 + d * d - r2 * r2) / (2.0 * r1 * d);
          // distance along a->b at intersection
          var dmp = r1 * cosA;
          v3normalize(atob, atob);
          // Create normal to line
          normalToLine(n1, atob);
          v3normalize(n1, n1);
          // Cross together for second normal vector
          v3cross(n2, atob, n1);
          v3normalize(n2, n2);
          // r is radius of circle of intersection
          var rInt = Math.sqrt(r1 * r1 - dmp * dmp);
          v3multiplyScalar(n1, n1, rInt);
          v3multiplyScalar(n2, n2, rInt);
          v3multiplyScalar(atob, atob, dmp);
          mid[0] = atob[0] + x[a];
          mid[1] = atob[1] + y[a];
          mid[2] = atob[2] + z[a];
          lastClip = -1;
          var ng = ngTorus;
          for (var i = 0; i < probePositions; i++) {
              var cost = cosTable[i];
              var sint = sinTable[i];
              var px = mid[0] + cost * n1[0] + sint * n2[0];
              var py = mid[1] + cost * n1[1] + sint * n2[1];
              var pz = mid[2] + cost * n1[2] + sint * n2[2];
              if (obscured(px, py, pz, a, b) === -1) {
                  // As above, iterate over our grid...
                  // px, py, pz in grid coords
                  var iax = Math.floor(scaleFactor * (px - min[0]));
                  var iay = Math.floor(scaleFactor * (py - min[1]));
                  var iaz = Math.floor(scaleFactor * (pz - min[2]));
                  var minx = Math.max(0, iax - ng);
                  var miny = Math.max(0, iay - ng);
                  var minz = Math.max(0, iaz - ng);
                  var maxx = Math.min(dim[0], iax + ng + 2);
                  var maxy = Math.min(dim[1], iay + ng + 2);
                  var maxz = Math.min(dim[2], iaz + ng + 2);
                  for (var ix = minx; ix < maxx; ix++) {
                      dx = px - gridx[ix];
                      var xoffset = dim[1] * dim[2] * ix;
                      for (var iy = miny; iy < maxy; iy++) {
                          dy = py - gridy[iy];
                          var dxy2 = dx * dx + dy * dy;
                          var xyoffset = xoffset + dim[2] * iy;
                          for (var iz = minz; iz < maxz; iz++) {
                              dz = pz - gridz[iz];
                              d2 = dxy2 + dz * dz;
                              var idx = iz + xyoffset;
                              var current = grid[idx];
                              if (current > 0.0 && d2 < (current * current)) {
                                  grid[idx] = Math.sqrt(d2);
                                  if (setAtomID) {
                                      // Is this grid point closer to a or b?
                                      // Take dot product of atob and gridpoint->p (dx, dy, dz)
                                      var dp = dx * atob[0] + dy * atob[1] + dz * atob[2];
                                      atomIndex[idx] = dp < 0.0 ? b : a;
                                  }
                              }
                          }
                      }
                  }
              }
          }
      }
      function normalToLine(out, p) {
          out[0] = out[1] = out[2] = 1.0;
          if (p[0] !== 0) {
              out[0] = (p[1] + p[2]) / -p[0];
          }
          else if (p[1] !== 0) {
              out[1] = (p[0] + p[2]) / -p[1];
          }
          else if (p[2] !== 0) {
              out[2] = (p[0] + p[1]) / -p[2];
          }
          return out;
      }
      function fixNegatives() {
          for (var i = 0; i < grid.length; i++) {
              if (grid[i] < 0)
                  { grid[i] = 0; }
          }
      }
      function fixAtomIDs() {
          for (var i = 0; i < atomIndex.length; i++) {
              atomIndex[i] = indexList[atomIndex[i]];
          }
      }
      function getVolume(probeRadius, scaleFactor, setAtomID) {
          // Basic steps are:
          // 1) Initialize
          // 2) Project points
          // 3) Project torii
          console.time('AVSurface.getVolume');
          console.time('AVSurface.init');
          init(probeRadius, scaleFactor, setAtomID);
          console.timeEnd('AVSurface.init');
          console.time('AVSurface.projectPoints');
          projectPoints();
          console.timeEnd('AVSurface.projectPoints');
          console.time('AVSurface.projectTorii');
          projectTorii();
          console.timeEnd('AVSurface.projectTorii');
          fixNegatives();
          fixAtomIDs();
          console.timeEnd('AVSurface.getVolume');
      }
      this.getSurface = function (type, probeRadius, scaleFactor, cutoff, setAtomID, smooth, contour) {
          // type and cutoff left in for compatibility with EDTSurface.getSurface
          // function signature
          getVolume(probeRadius, scaleFactor, setAtomID);
          var volsurf = new VolumeSurface(grid, dim[2], dim[1], dim[0], atomIndex);
          return volsurf.getSurface(probeRadius, false, undefined, matrix, contour);
      };
  }
  Object.assign(AVSurface, { __deps: [
          getSurfaceGrid, VolumeSurface, uniformArray, computeBoundingBox,
          v3multiplyScalar, v3cross, v3normalize,
          makeAVHash,
          defaults
      ] });

  /**
   * @file Molecular Surface
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  WorkerRegistry.add('molsurf', function func(e, callback) {
      var a = e.data.args;
      var p = e.data.params;
      if (a && p) {
          var SurfClass = (p.type === 'av') ? AVSurface : EDTSurface;
          var surf = new SurfClass(a.coordList, a.radiusList, a.indexList);
          var sd = surf.getSurface(p.type, p.probeRadius, p.scaleFactor, p.cutoff, true, p.smooth, p.contour);
          var transferList = [sd.position.buffer, sd.index.buffer];
          if (sd.normal)
              { transferList.push(sd.normal.buffer); }
          if (sd.atomindex)
              { transferList.push(sd.atomindex.buffer); }
          var data = {
              sd: sd,
              p: p
          };
          callback(data, transferList);
      }
  }, [EDTSurface, AVSurface]);
  /**
   * Create Molecular surfaces
   */
  var MolecularSurface = function MolecularSurface(structure) {
      this.structure = structure;
  };
  MolecularSurface.prototype._getAtomData = function _getAtomData (params) {
      return this.structure.getAtomData({
          what: { position: true, radius: true, index: true },
          radiusParams: defaults(params.radiusParams, {
              type: 'vdw', scale: 1.0
          })
      });
  };
  MolecularSurface.prototype._makeSurface = function _makeSurface (sd, p) {
      var surface = new Surface(p.name, '', sd);
      surface.info.type = p.type;
      surface.info.probeRadius = p.probeRadius;
      surface.info.scaleFactor = p.scaleFactor;
      surface.info.smooth = p.smooth;
      surface.info.cutoff = p.cutoff;
      return surface;
  };
  /**
   * Get molecular surface
   * @param {MolecularSurfaceParameters} params - parameters for surface creation
   * @return {Surface} the surface
   */
  MolecularSurface.prototype.getSurface = function getSurface (params) {
      var p = params || {};
      var atomData = this._getAtomData(params);
      var coordList = atomData.position;
      var radiusList = atomData.radius;
      var indexList = atomData.index;
      var SurfClass = (p.type === 'av') ? AVSurface : EDTSurface;
      var surf = new SurfClass(coordList, radiusList, indexList);
      var sd = surf.getSurface(p.type, p.probeRadius, p.scaleFactor, p.cutoff, true, p.smooth, p.contour);
      return this._makeSurface(sd, p);
  };
  /**
   * Get molecular surface asynchronous
   * @param {MolecularSurfaceParameters} params - parameters for surface creation
   * @param {function(surface: Surface)} callback - function to be called after surface is created
   * @return {undefined}
   */
  MolecularSurface.prototype.getSurfaceWorker = function getSurfaceWorker (params, callback) {
          var this$1$1 = this;

      var p = Object.assign({}, params);
      if (window.hasOwnProperty('Worker')) {
          if (this.worker === undefined) {
              this.worker = new _Worker('molsurf');
          }
          var atomData = this._getAtomData(params);
          var coordList = atomData.position;
          var radiusList = atomData.radius;
          var indexList = atomData.index;
          var msg = {
              args: {
                  coordList: coordList,
                  radiusList: radiusList,
                  indexList: indexList
              },
              params: p
          };
          var transferList = [
              coordList.buffer, radiusList.buffer, indexList.buffer
          ];
          this.worker.post(msg, transferList, function (e) {
              callback(this$1$1._makeSurface(e.data.sd, p));
          }, function (e) {
              console.warn('MolecularSurface.getSurfaceWorker error - trying without worker', e);
              this$1$1.worker.terminate();
              this$1$1.worker = undefined;
              var surface = this$1$1.getSurface(p);
              callback(surface);
          });
      }
      else {
          var surface = this.getSurface(p);
          callback(surface);
      }
  };
  /**
   * Cleanup
   * @return {undefined}
   */
  MolecularSurface.prototype.dispose = function dispose () {
      if (this.worker)
          { this.worker.terminate(); }
  };

  /**
   * @file Molecular Surface Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Molecular Surface Representation
   */
  var MolecularSurfaceRepresentation = /*@__PURE__*/(function (StructureRepresentation) {
      function MolecularSurfaceRepresentation(structure, viewer, params) {
          var this$1$1 = this;

          StructureRepresentation.call(this, structure, viewer, params);
          this.type = 'surface';
          this.parameters = Object.assign({
              surfaceType: {
                  type: 'select',
                  rebuild: true,
                  options: {
                      'vws': 'vws',
                      'sas': 'sas',
                      'ms': 'ms',
                      'ses': 'ses',
                      'av': 'av'
                  }
              },
              probeRadius: {
                  type: 'number',
                  precision: 1,
                  max: 20,
                  min: 0,
                  rebuild: true
              },
              smooth: {
                  type: 'integer',
                  precision: 1,
                  max: 10,
                  min: 0,
                  rebuild: true
              },
              scaleFactor: {
                  type: 'number',
                  precision: 1,
                  max: 5,
                  min: 0,
                  rebuild: true
              },
              cutoff: {
                  type: 'number',
                  precision: 2,
                  max: 50,
                  min: 0,
                  rebuild: true
              },
              contour: {
                  type: 'boolean', rebuild: true
              },
              background: {
                  type: 'boolean', rebuild: true // FIXME
              },
              opaqueBack: {
                  type: 'boolean', buffer: true
              },
              filterSele: {
                  type: 'text', rebuild: true
              },
              colorVolume: {
                  type: 'hidden'
              },
              useWorker: {
                  type: 'boolean', rebuild: true
              }
          }, this.parameters, {
              radius: null,
              scale: null
          });
          this.__infoList = [];
          // TODO find a more direct way
          this.structure.signals.refreshed.add(function () {
              this$1$1.__forceNewMolsurf = true;
          });
          this.toBePrepared = true;
          this.init(params);
      }

      if ( StructureRepresentation ) MolecularSurfaceRepresentation.__proto__ = StructureRepresentation;
      MolecularSurfaceRepresentation.prototype = Object.create( StructureRepresentation && StructureRepresentation.prototype );
      MolecularSurfaceRepresentation.prototype.constructor = MolecularSurfaceRepresentation;
      MolecularSurfaceRepresentation.prototype.init = function init (params) {
          var p = params || {};
          p.colorScheme = defaults(p.colorScheme, 'uniform');
          p.colorValue = defaults(p.colorValue, 0xDDDDDD);
          p.disablePicking = defaults(p.disablePicking, true);
          this.surfaceType = defaults(p.surfaceType, 'ms');
          this.probeRadius = defaults(p.probeRadius, 1.4);
          this.smooth = defaults(p.smooth, 2);
          this.scaleFactor = defaults(p.scaleFactor, 2.0);
          this.cutoff = defaults(p.cutoff, 0.0);
          this.contour = defaults(p.contour, false);
          this.background = defaults(p.background, false);
          this.opaqueBack = defaults(p.opaqueBack, true);
          this.filterSele = defaults(p.filterSele, '');
          this.colorVolume = defaults(p.colorVolume, undefined);
          this.useWorker = defaults(p.useWorker, true);
          StructureRepresentation.prototype.init.call(this, params);
      };
      MolecularSurfaceRepresentation.prototype.prepareData = function prepareData (sview, i, callback) {
          var info = this.__infoList[i];
          if (!info) {
              info = {};
              this.__infoList[i] = info;
          }
          if (!info.molsurf || info.sele !== sview.selection.string) {
              if (this.filterSele) {
                  var sviewFilter = sview.structure.getView(new Selection(this.filterSele));
                  var bbSize = sviewFilter.boundingBox.getSize(new Vector3());
                  var maxDim = Math.max(bbSize.x, bbSize.y, bbSize.z);
                  var asWithin = sview.getAtomSetWithinPoint(sviewFilter.center, (maxDim / 2) + 6.0);
                  sview = sview.getView(new Selection(sview.getAtomSetWithinSelection(asWithin, 3).toSeleString()));
                  if (sview.atomCount === 0) {
                      callback(i);
                      return;
                  }
              }
              info.sele = sview.selection.string;
              info.molsurf = new MolecularSurface(sview);
              var p = this.getSurfaceParams();
              var onSurfaceFinish = function (surface) {
                  info.surface = surface;
                  callback(i);
              };
              if (this.useWorker) {
                  info.molsurf.getSurfaceWorker(p, onSurfaceFinish);
              }
              else {
                  onSurfaceFinish(info.molsurf.getSurface(p));
              }
          }
          else {
              callback(i);
          }
      };
      MolecularSurfaceRepresentation.prototype.prepare = function prepare (callback) {
          var this$1$1 = this;

          if (this.__forceNewMolsurf || this.__sele !== this.selection.string ||
              this.__surfaceParams !== JSON.stringify(this.getSurfaceParams())) {
              this.__infoList.forEach(function (info) {
                  if (info && info.molsurf) {
                      info.molsurf.dispose();
                  }
              });
              this.__infoList.length = 0;
          }
          if (this.structureView.atomCount === 0) {
              callback();
              return;
          }
          var after = function () {
              this$1$1.__sele = this$1$1.selection.string;
              this$1$1.__surfaceParams = JSON.stringify(this$1$1.getSurfaceParams());
              this$1$1.__forceNewMolsurf = false;
              callback();
          };
          var name = this.assembly === 'default' ? this.defaultAssembly : this.assembly;
          var assembly = this.structure.biomolDict[name];
          if (assembly) {
              assembly.partList.forEach(function (part, i) {
                  var sview = part.getView(this$1$1.structureView);
                  this$1$1.prepareData(sview, i, function (_i) {
                      if (_i === assembly.partList.length - 1)
                          { after(); }
                  });
              });
          }
          else {
              this.prepareData(this.structureView, 0, after);
          }
      };
      MolecularSurfaceRepresentation.prototype.createData = function createData (sview, i) {
          var info = this.__infoList[i];
          var surface = info.surface;
          if (!surface) {
              // Surface creation bailed (no surface generated for this sview)
              return;
          }
          var surfaceData = {
              position: surface.getPosition(),
              color: surface.getColor(this.getColorParams()),
              index: surface.getFilteredIndex(this.filterSele, sview)
          };
          var bufferList = [];
          if (surface.contour) {
              var contourBuffer = new ContourBuffer(surfaceData, this.getBufferParams({
                  wireframe: false
              }));
              bufferList.push(contourBuffer);
          }
          else {
              Object.assign(surfaceData, {
                  normal: surface.getNormal(),
                  picking: surface.getPicking(sview.getStructure())
              });
              var surfaceBuffer = new SurfaceBuffer(surfaceData, this.getBufferParams({
                  background: this.background,
                  opaqueBack: this.opaqueBack,
                  dullInterior: false
              }));
              if (this.getBufferParams().side == 'double') {
                  var doubleSidedBuffer = new DoubleSidedBuffer(surfaceBuffer);
                  bufferList.push(doubleSidedBuffer);
              }
              else {
                  bufferList.push(surfaceBuffer);
              }
          }
          return { bufferList: bufferList, info: info };
      };
      MolecularSurfaceRepresentation.prototype.updateData = function updateData (what, data) {
          var surfaceData = {};
          if (what.position || what.radius) {
              this.__forceNewMolsurf = true;
              this.build();
              return;
          }
          if (what.color) {
              surfaceData.color = data.info.surface.getColor(this.getColorParams());
          }
          if (what.index) {
              surfaceData.index = data.info.surface.getFilteredIndex(this.filterSele, data.sview);
          }
          data.bufferList[0].setAttributes(surfaceData);
      };
      MolecularSurfaceRepresentation.prototype.setParameters = function setParameters (params, what, rebuild) {
          if ( what === void 0 ) what = {};

          if (params && params.filterSele) {
              what.index = true;
          }
          if (params && params.colorVolume !== undefined) {
              what.color = true;
          }
          // forbid setting wireframe to true when contour is true
          if (params && params.wireframe && (params.contour || (params.contour === undefined && this.contour))) {
              params.wireframe = false;
          }
          StructureRepresentation.prototype.setParameters.call(this, params, what, rebuild);
          return this;
      };
      MolecularSurfaceRepresentation.prototype.getSurfaceParams = function getSurfaceParams (params) {
          if ( params === void 0 ) params = {};

          var p = Object.assign({
              type: this.surfaceType,
              probeRadius: this.probeRadius,
              scaleFactor: this.scaleFactor,
              smooth: this.smooth && !this.contour,
              cutoff: this.cutoff,
              contour: this.contour,
              useWorker: this.useWorker,
              radiusParams: this.getRadiusParams()
          }, params);
          return p;
      };
      MolecularSurfaceRepresentation.prototype.getColorParams = function getColorParams () {
          var p = StructureRepresentation.prototype.getColorParams.call(this);
          p.volume = this.colorVolume;
          return p;
      };
      MolecularSurfaceRepresentation.prototype.getAtomRadius = function getAtomRadius () {
          return 0;
      };
      MolecularSurfaceRepresentation.prototype.clear = function clear () {
          StructureRepresentation.prototype.clear.call(this);
      };
      MolecularSurfaceRepresentation.prototype.dispose = function dispose () {
          this.__infoList.forEach(function (info) {
              if (info && info.molsurf) {
                  info.molsurf.dispose();
              }
          });
          this.__infoList.length = 0;
          StructureRepresentation.prototype.dispose.call(this);
      };

      return MolecularSurfaceRepresentation;
  }(StructureRepresentation));
  RepresentationRegistry.add('surface', MolecularSurfaceRepresentation);

  /**
   * @file Point Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Point Representation
   */
  var PointRepresentation = /*@__PURE__*/(function (StructureRepresentation) {
      function PointRepresentation(structure, viewer, params) {
          StructureRepresentation.call(this, structure, viewer, params);
          this.type = 'point';
          this.parameters = Object.assign({
              pointSize: {
                  type: 'number', precision: 1, max: 100, min: 0, buffer: true
              },
              sizeAttenuation: {
                  type: 'boolean', buffer: true
              },
              sortParticles: {
                  type: 'boolean', rebuild: true
              },
              useTexture: {
                  type: 'boolean', buffer: true
              },
              alphaTest: {
                  type: 'range', step: 0.001, max: 1, min: 0, buffer: true
              },
              forceTransparent: {
                  type: 'boolean', buffer: true
              },
              edgeBleach: {
                  type: 'range', step: 0.001, max: 1, min: 0, buffer: true
              }
          }, this.parameters, {
              flatShaded: null,
              wireframe: null,
              linewidth: null,
              side: null,
              roughness: null,
              metalness: null
          });
          this.init(params);
      }

      if ( StructureRepresentation ) PointRepresentation.__proto__ = StructureRepresentation;
      PointRepresentation.prototype = Object.create( StructureRepresentation && StructureRepresentation.prototype );
      PointRepresentation.prototype.constructor = PointRepresentation;
      PointRepresentation.prototype.init = function init (params) {
          var p = params || {};
          this.pointSize = defaults(p.pointSize, 1);
          this.sizeAttenuation = defaults(p.sizeAttenuation, true);
          this.sortParticles = defaults(p.sortParticles, false);
          this.useTexture = defaults(p.useTexture, false);
          this.alphaTest = defaults(p.alphaTest, 0.5);
          this.forceTransparent = defaults(p.forceTransparent, false);
          this.edgeBleach = defaults(p.edgeBleach, 0.0);
          StructureRepresentation.prototype.init.call(this, p);
      };
      PointRepresentation.prototype.createData = function createData (sview) {
          var what = { position: true, color: true, picking: true };
          var atomData = sview.getAtomData(this.getAtomParams(what));
          var pointBuffer = new PointBuffer(atomData, this.getBufferParams({
              pointSize: this.pointSize,
              sizeAttenuation: this.sizeAttenuation,
              sortParticles: this.sortParticles,
              useTexture: this.useTexture,
              alphaTest: this.alphaTest,
              forceTransparent: this.forceTransparent,
              edgeBleach: this.edgeBleach
          }));
          return {
              bufferList: [pointBuffer]
          };
      };
      PointRepresentation.prototype.updateData = function updateData (what, data) {
          var atomData = data.sview.getAtomData(this.getAtomParams(what));
          var pointData = {};
          if (!what || what.position) {
              Object.assign(pointData, { position: atomData.position });
          }
          if (!what || what.color) {
              Object.assign(pointData, { color: atomData.color });
          }
          data.bufferList[0].setAttributes(pointData);
      };
      PointRepresentation.prototype.getAtomRadius = function getAtomRadius () {
          return 0.1;
      };

      return PointRepresentation;
  }(StructureRepresentation));
  RepresentationRegistry.add('point', PointRepresentation);

  ShaderRegistry.add('shader/Ribbon.vert', "#define STANDARD\nuniform float clipNear;\nuniform vec3 clipCenter;\n#if defined( NEAR_CLIP ) || defined( RADIUS_CLIP ) || !defined( PICKING )\nvarying vec3 vViewPosition;\n#endif\n#if defined( RADIUS_CLIP )\nvarying vec3 vClipCenter;\n#endif\nattribute vec3 dir;\nattribute float size;\n#ifdef PICKING\n#include unpack_color\nattribute float primitiveId;\nvarying vec3 vPickingColor;\n#else\n#include color_pars_vertex\n#ifndef FLAT_SHADED\nvarying vec3 vNormal;\n#endif\n#endif\n#include common\nvoid main(void){\n#ifdef PICKING\nvPickingColor = unpackColor( primitiveId );\n#else\n#include color_vertex\n#include beginnormal_vertex\n#include defaultnormal_vertex\n#ifndef FLAT_SHADED\nvNormal = normalize( transformedNormal );\n#endif\n#endif\n#include begin_vertex\ntransformed += normalize( dir ) * size;\n#include project_vertex\n#if defined( NEAR_CLIP ) || defined( RADIUS_CLIP ) || !defined( PICKING )\nvViewPosition = -mvPosition.xyz;\n#endif\n#if defined( RADIUS_CLIP )\nvClipCenter = -( modelViewMatrix * vec4( clipCenter, 1.0 ) ).xyz;\n#endif\n#include nearclip_vertex\n}");

  /**
   * @file Ribbon Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var quadIndices = new Uint16Array([
      0, 1, 2,
      1, 3, 2
  ]);
  function getSize$1(data) {
      var n = (data.position.length / 3) - 1;
      var n4 = n * 4;
      var x = n4 * 3;
      return x;
  }
  /**
   * Ribbon buffer. Draws a thin ribbon.
   */
  var RibbonBuffer = /*@__PURE__*/(function (MeshBuffer) {
      function RibbonBuffer(data, params) {
          if ( params === void 0 ) params = {};

          MeshBuffer.call(this, {
              position: new Float32Array(getSize$1(data)),
              color: new Float32Array(getSize$1(data)),
              index: getUintArray(getSize$1(data), getSize$1(data) / 3),
              normal: new Float32Array(getSize$1(data)),
              picking: data.picking
          }, params);
          this.vertexShader = 'Ribbon.vert';
          var n = (data.position.length / 3) - 1;
          var n4 = n * 4;
          var x = n4 * 3;
          this.addAttributes({
              'dir': { type: 'v3', value: new Float32Array(x) }
          });
          this.addAttributes({
              'size': { type: 'f', value: new Float32Array(n4) }
          });
          data.primitiveId = serialArray(n);
          this.setAttributes(data);
          this.makeIndex();
      }

      if ( MeshBuffer ) RibbonBuffer.__proto__ = MeshBuffer;
      RibbonBuffer.prototype = Object.create( MeshBuffer && MeshBuffer.prototype );
      RibbonBuffer.prototype.constructor = RibbonBuffer;
      RibbonBuffer.prototype.setAttributes = function setAttributes (data) {
          if ( data === void 0 ) data = {};

          var n4 = this.size;
          var n = n4 / 4;
          var attributes = this.geometry.attributes; // TODO
          var position, normal, size, dir, color, primitiveId;
          var aPosition, aNormal, aSize, aDir, aColor, aPrimitiveId;
          if (data.position) {
              position = data.position;
              aPosition = attributes.position.array;
              attributes.position.needsUpdate = true;
          }
          if (data.normal) {
              normal = data.normal;
              aNormal = attributes.normal.array;
              attributes.normal.needsUpdate = true;
          }
          if (data.size) {
              size = data.size;
              aSize = attributes.size.array;
              attributes.size.needsUpdate = true;
          }
          if (data.dir) {
              dir = data.dir;
              aDir = attributes.dir.array;
              attributes.dir.needsUpdate = true;
          }
          if (data.color) {
              color = data.color;
              aColor = attributes.color.array;
              attributes.color.needsUpdate = true;
          }
          if (data.primitiveId) {
              primitiveId = data.primitiveId;
              aPrimitiveId = attributes.primitiveId.array;
              attributes.primitiveId.needsUpdate = true;
          }
          var v, i, k, p, l, v3;
          var currSize;
          var prevSize = size ? size[0] : null;
          for (v = 0; v < n; ++v) {
              v3 = v * 3;
              k = v * 3 * 4;
              l = v * 4;
              if (position) {
                  aPosition[k] = aPosition[k + 3] = position[v3];
                  aPosition[k + 1] = aPosition[k + 4] = position[v3 + 1];
                  aPosition[k + 2] = aPosition[k + 5] = position[v3 + 2];
                  aPosition[k + 6] = aPosition[k + 9] = position[v3 + 3];
                  aPosition[k + 7] = aPosition[k + 10] = position[v3 + 4];
                  aPosition[k + 8] = aPosition[k + 11] = position[v3 + 5];
              }
              if (normal) {
                  aNormal[k] = aNormal[k + 3] = -normal[v3];
                  aNormal[k + 1] = aNormal[k + 4] = -normal[v3 + 1];
                  aNormal[k + 2] = aNormal[k + 5] = -normal[v3 + 2];
                  aNormal[k + 6] = aNormal[k + 9] = -normal[v3 + 3];
                  aNormal[k + 7] = aNormal[k + 10] = -normal[v3 + 4];
                  aNormal[k + 8] = aNormal[k + 11] = -normal[v3 + 5];
              }
              for (i = 0; i < 4; ++i) {
                  p = k + 3 * i;
                  if (color) {
                      aColor[p] = color[v3];
                      aColor[p + 1] = color[v3 + 1];
                      aColor[p + 2] = color[v3 + 2];
                  }
                  if (primitiveId) {
                      aPrimitiveId[l + i] = primitiveId[v];
                  }
              }
              if (size) {
                  currSize = size[v];
                  if (prevSize !== size[v]) {
                      aSize[l] = prevSize;
                      aSize[l + 1] = prevSize;
                      aSize[l + 2] = currSize;
                      aSize[l + 3] = currSize;
                  }
                  else {
                      aSize[l] = currSize;
                      aSize[l + 1] = currSize;
                      aSize[l + 2] = currSize;
                      aSize[l + 3] = currSize;
                  }
                  prevSize = currSize;
              }
              if (dir) {
                  aDir[k] = dir[v3];
                  aDir[k + 1] = dir[v3 + 1];
                  aDir[k + 2] = dir[v3 + 2];
                  aDir[k + 3] = -dir[v3];
                  aDir[k + 4] = -dir[v3 + 1];
                  aDir[k + 5] = -dir[v3 + 2];
                  aDir[k + 6] = dir[v3 + 3];
                  aDir[k + 7] = dir[v3 + 4];
                  aDir[k + 8] = dir[v3 + 5];
                  aDir[k + 9] = -dir[v3 + 3];
                  aDir[k + 10] = -dir[v3 + 4];
                  aDir[k + 11] = -dir[v3 + 5];
              }
          }
      };
      RibbonBuffer.prototype.makeIndex = function makeIndex () {
          var index = this.geometry.getIndex();
          if (!index) {
              Log.error('Index is null');
              return;
          }
          var meshIndex = index.array;
          var n = meshIndex.length / 4 / 3;
          for (var v = 0; v < n; ++v) {
              var ix = v * 6;
              var it = v * 4;
              meshIndex.set(quadIndices, ix);
              for (var s = 0; s < 6; ++s) {
                  meshIndex[ix + s] += it;
              }
          }
      };

      return RibbonBuffer;
  }(MeshBuffer));

  /**
   * @file Ribbon Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Ribbon Representation
   */
  var RibbonRepresentation = /*@__PURE__*/(function (StructureRepresentation) {
      function RibbonRepresentation(structure, viewer, params) {
          StructureRepresentation.call(this, structure, viewer, params);
          this.type = 'ribbon';
          this.parameters = Object.assign({
              subdiv: {
                  type: 'integer', max: 50, min: 1, rebuild: true
              },
              tension: {
                  type: 'number', precision: 1, max: 1.0, min: 0.1
              },
              smoothSheet: {
                  type: 'boolean', rebuild: true
              }
          }, this.parameters, {
              side: null,
              wireframe: null,
              linewidth: null
          });
          this.init(params);
      }

      if ( StructureRepresentation ) RibbonRepresentation.__proto__ = StructureRepresentation;
      RibbonRepresentation.prototype = Object.create( StructureRepresentation && StructureRepresentation.prototype );
      RibbonRepresentation.prototype.constructor = RibbonRepresentation;
      RibbonRepresentation.prototype.init = function init (params) {
          var p = params || {};
          p.colorScheme = defaults(p.colorScheme, 'chainname');
          p.colorScale = defaults(p.colorScale, 'RdYlBu');
          p.radiusType = defaults(p.radiusType, 'sstruc');
          p.radiusScale = defaults(p.radiusScale, 4.0);
          if (p.quality === 'low') {
              this.subdiv = 3;
          }
          else if (p.quality === 'medium') {
              this.subdiv = 6;
          }
          else if (p.quality === 'high') {
              this.subdiv = 12;
          }
          else {
              this.subdiv = defaults(p.subdiv, 6);
          }
          this.tension = defaults(p.tension, NaN);
          this.smoothSheet = defaults(p.smoothSheet, false);
          StructureRepresentation.prototype.init.call(this, p);
      };
      RibbonRepresentation.prototype.getSplineParams = function getSplineParams (params) {
          return Object.assign({
              subdiv: this.subdiv,
              tension: this.tension,
              directional: true,
              smoothSheet: this.smoothSheet
          }, params);
      };
      RibbonRepresentation.prototype.getAtomRadius = function getAtomRadius (atom) {
          return atom.isTrace() ? StructureRepresentation.prototype.getAtomRadius.call(this, atom) : 0;
      };
      RibbonRepresentation.prototype.createData = function createData (sview) {
          var this$1$1 = this;

          var bufferList = [];
          var polymerList = [];
          this.structure.eachPolymer(function (polymer) {
              if (polymer.residueCount < 4)
                  { return; }
              polymerList.push(polymer);
              var spline = new Spline(polymer, this$1$1.getSplineParams());
              var subPos = spline.getSubdividedPosition();
              var subOri = spline.getSubdividedOrientation();
              var subCol = spline.getSubdividedColor(this$1$1.getColorParams());
              var subPick = spline.getSubdividedPicking();
              var subSize = spline.getSubdividedSize(this$1$1.getRadiusParams());
              bufferList.push(new RibbonBuffer(({
                  position: subPos.position,
                  normal: subOri.binormal,
                  dir: subOri.normal,
                  color: subCol.color,
                  size: subSize.size,
                  picking: subPick.picking
              }), this$1$1.getBufferParams()));
          }, sview.getSelection());
          return {
              bufferList: bufferList,
              polymerList: polymerList
          };
      };
      RibbonRepresentation.prototype.updateData = function updateData (what, data) {
          what = what || {};
          var i = 0;
          var n = data.polymerList.length;
          for (i = 0; i < n; ++i) {
              var bufferData = {};
              var spline = new Spline(data.polymerList[i], this.getSplineParams());
              if (what.position) {
                  var subPos = spline.getSubdividedPosition();
                  var subOri = spline.getSubdividedOrientation();
                  Object.assign(bufferData, {
                      position: subPos.position,
                      normal: subOri.binormal,
                      dir: subOri.normal
                  });
              }
              if (what.radius || what.scale) {
                  var subSize = spline.getSubdividedSize(this.getRadiusParams());
                  Object.assign(bufferData, { size: subSize.size });
              }
              if (what.color) {
                  var subCol = spline.getSubdividedColor(this.getColorParams());
                  Object.assign(bufferData, { color: subCol.color });
              }
              data.bufferList[i].setAttributes(bufferData);
          }
      };
      RibbonRepresentation.prototype.setParameters = function setParameters (params) {
          var rebuild = false;
          var what = {};
          if (params && params.tension) {
              Object.assign(what, { position: true });
          }
          StructureRepresentation.prototype.setParameters.call(this, params, what, rebuild);
          return this;
      };

      return RibbonRepresentation;
  }(StructureRepresentation));
  RepresentationRegistry.add('ribbon', RibbonRepresentation);

  /**
   * @file Rocket Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Rocket Representation
   */
  var RocketRepresentation = /*@__PURE__*/(function (StructureRepresentation) {
      function RocketRepresentation(structure, viewer, params) {
          StructureRepresentation.call(this, structure, viewer, params);
          this.type = 'rocket';
          this.parameters = Object.assign({
              localAngle: {
                  type: 'integer', max: 180, min: 0, rebuild: true
              },
              centerDist: {
                  type: 'number', precision: 1, max: 10, min: 0, rebuild: true
              },
              ssBorder: {
                  type: 'boolean', rebuild: true
              },
              radialSegments: true,
              openEnded: true,
              disableImpostor: true
          }, this.parameters);
          // this.helixbundleList = []
          this.init(params);
      }

      if ( StructureRepresentation ) RocketRepresentation.__proto__ = StructureRepresentation;
      RocketRepresentation.prototype = Object.create( StructureRepresentation && StructureRepresentation.prototype );
      RocketRepresentation.prototype.constructor = RocketRepresentation;
      RocketRepresentation.prototype.init = function init (params) {
          var p = params || {};
          p.colorScheme = defaults(p.colorScheme, 'sstruc');
          p.radiusSize = defaults(p.radiusSize, 1.5);
          p.radiusScale = defaults(p.radiusScale, 1.0);
          p.openEnded = defaults(p.openEnded, false);
          p.useInteriorColor = defaults(p.useInteriorColor, true);
          this.localAngle = defaults(p.localAngle, 30);
          this.centerDist = defaults(p.centerDist, 2.5);
          this.ssBorder = defaults(p.ssBorder, false);
          StructureRepresentation.prototype.init.call(this, p);
      };
      RocketRepresentation.prototype.createData = function createData (sview) {
          var this$1$1 = this;

          var length = 0;
          var axisList = [];
          var helixbundleList = [];
          this.structure.eachPolymer(function (polymer) {
              if (polymer.residueCount < 4 || polymer.isNucleic())
                  { return; }
              var helixbundle = new Helixbundle(polymer);
              var axis = helixbundle.getAxis(this$1$1.localAngle, this$1$1.centerDist, this$1$1.ssBorder, this$1$1.getColorParams(), this$1$1.getRadiusParams());
              length += axis.size.length;
              axisList.push(axis);
              helixbundleList.push(helixbundle);
          }, sview.getSelection());
          var axisData = {
              begin: new Float32Array(length * 3),
              end: new Float32Array(length * 3),
              size: new Float32Array(length),
              color: new Float32Array(length * 3),
              picking: {}
          };
          var picking = new Float32Array(length);
          var offset = 0;
          axisList.forEach(function (axis) {
              axisData.begin.set(axis.begin, offset * 3);
              axisData.end.set(axis.end, offset * 3);
              axisData.size.set(axis.size, offset);
              axisData.color.set(axis.color, offset * 3);
              picking.set(axis.picking.array, offset);
              offset += axis.size.length;
          });
          if (length) {
              axisData.picking = new AtomPicker(picking, sview.getStructure());
          }
          var cylinderBuffer = new CylinderBuffer({
              position1: axisData.begin,
              position2: axisData.end,
              color: axisData.color,
              color2: axisData.color,
              radius: axisData.size,
              picking: axisData.picking
          }, this.getBufferParams({
              openEnded: this.openEnded,
              radialSegments: this.radialSegments,
              disableImpostor: this.disableImpostor,
              dullInterior: true
          }));
          return {
              bufferList: [cylinderBuffer],
              axisList: axisList,
              helixbundleList: helixbundleList,
              axisData: axisData
          };
      };
      RocketRepresentation.prototype.updateData = function updateData (what, data) {
          var this$1$1 = this;

          what = what || {};
          if (what.position) {
              this.build();
              return;
          }
          var cylinderData = {};
          if (what.color || what.radius) {
              var offset = 0;
              data.helixbundleList.forEach(function (helixbundle) {
                  var axis = helixbundle.getAxis(this$1$1.localAngle, this$1$1.centerDist, this$1$1.ssBorder, this$1$1.getColorParams(), this$1$1.getRadiusParams());
                  if (what.color) {
                      data.axisData.color.set(axis.color, offset * 3);
                  }
                  if (what.radius || what.scale) {
                      data.axisData.size.set(axis.size, offset);
                  }
                  offset += axis.size.length;
              });
              if (what.color) {
                  Object.assign(cylinderData, {
                      color: data.axisData.color,
                      color2: data.axisData.color
                  });
              }
              if (what.radius || what.scale) {
                  Object.assign(cylinderData, {
                      radius: data.axisData.size
                  });
              }
          }
          data.bufferList[0].setAttributes(cylinderData);
      };

      return RocketRepresentation;
  }(StructureRepresentation));
  RepresentationRegistry.add('rocket', RocketRepresentation);

  /**
   * @file Rope Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Rope Representation
   */
  var RopeRepresentation = /*@__PURE__*/(function (CartoonRepresentation) {
      function RopeRepresentation(structure, viewer, params) {
          CartoonRepresentation.call(this, structure, viewer, params);
          this.type = 'rope';
          this.parameters = Object.assign({
              smooth: {
                  type: 'integer', max: 15, min: 0, rebuild: true
              }
          }, this.parameters, {
              aspectRatio: null,
              smoothSheet: null
          });
      }

      if ( CartoonRepresentation ) RopeRepresentation.__proto__ = CartoonRepresentation;
      RopeRepresentation.prototype = Object.create( CartoonRepresentation && CartoonRepresentation.prototype );
      RopeRepresentation.prototype.constructor = RopeRepresentation;
      RopeRepresentation.prototype.init = function init (params) {
          var p = params || {};
          p.aspectRatio = 1.0;
          p.tension = defaults(p.tension, 0.5);
          p.radiusScale = defaults(p.radiusScale, 5.0);
          p.smoothSheet = false;
          this.smooth = defaults(p.smooth, 2);
          CartoonRepresentation.prototype.init.call(this, p);
      };
      RopeRepresentation.prototype.getSpline = function getSpline (polymer) {
          var helixorient = new Helixorient(polymer);
          return new Spline(polymer, this.getSplineParams({
              directional: false,
              positionIterator: helixorient.getCenterIterator(this.smooth)
          }));
      };

      return RopeRepresentation;
  }(CartoonRepresentation));
  RepresentationRegistry.add('rope', RopeRepresentation);

  /**
   * @file Spacefill Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Spacefill Representation
   */
  var SpacefillRepresentation = /*@__PURE__*/(function (StructureRepresentation) {
      function SpacefillRepresentation(structure, viewer, params) {
          StructureRepresentation.call(this, structure, viewer, params);
          this.type = 'spacefill';
          this.parameters = Object.assign({
              sphereDetail: true,
              disableImpostor: true
          }, this.parameters);
          this.init(params);
      }

      if ( StructureRepresentation ) SpacefillRepresentation.__proto__ = StructureRepresentation;
      SpacefillRepresentation.prototype = Object.create( StructureRepresentation && StructureRepresentation.prototype );
      SpacefillRepresentation.prototype.constructor = SpacefillRepresentation;
      SpacefillRepresentation.prototype.init = function init (params) {
          var p = params || {};
          p.useInteriorColor = defaults(p.useInteriorColor, true);
          StructureRepresentation.prototype.init.call(this, p);
      };
      SpacefillRepresentation.prototype.createData = function createData (sview) {
          var sphereBuffer = new SphereBuffer(sview.getAtomData(this.getAtomParams()), this.getBufferParams({
              sphereDetail: this.sphereDetail,
              dullInterior: true,
              disableImpostor: this.disableImpostor
          }));
          return {
              bufferList: [sphereBuffer]
          };
      };
      SpacefillRepresentation.prototype.updateData = function updateData (what, data) {
          var atomData = data.sview.getAtomData(this.getAtomParams(what));
          var sphereData = {};
          if (!what || what.position) {
              Object.assign(sphereData, { position: atomData.position });
          }
          if (!what || what.color) {
              Object.assign(sphereData, { color: atomData.color });
          }
          if (!what || what.radius) {
              Object.assign(sphereData, { radius: atomData.radius });
          }
          data.bufferList[0].setAttributes(sphereData);
      };

      return SpacefillRepresentation;
  }(StructureRepresentation));
  RepresentationRegistry.add('spacefill', SpacefillRepresentation);

  /**
   * @file Trace Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function getSize(data) {
      var n = data.position.length / 3;
      var n1 = n - 1;
      return n1 * 3 * 2;
  }
  /**
   * Trace buffer. Draws a series of lines.
   */
  var TraceBuffer = /*@__PURE__*/(function (Buffer) {
      function TraceBuffer(data, params) {
          if ( params === void 0 ) params = {};

          Buffer.call(this, {
              position: new Float32Array(getSize(data)),
              color: new Float32Array(getSize(data))
          }, params);
          this.isLine = true;
          this.vertexShader = 'Line.vert';
          this.fragmentShader = 'Line.frag';
          this.setAttributes(data);
      }

      if ( Buffer ) TraceBuffer.__proto__ = Buffer;
      TraceBuffer.prototype = Object.create( Buffer && Buffer.prototype );
      TraceBuffer.prototype.constructor = TraceBuffer;
      TraceBuffer.prototype.setAttributes = function setAttributes (data) {
          var position, color;
          var linePosition, lineColor;
          var attributes = this.geometry.attributes; // TODO
          if (data.position) {
              position = data.position;
              linePosition = attributes.position.array;
              attributes.position.needsUpdate = true;
          }
          if (data.color) {
              color = data.color;
              lineColor = attributes.color.array;
              attributes.color.needsUpdate = true;
          }
          if (!position && !color) {
              Log.warn('TraceBuffer.prototype.setAttributes no data');
              return;
          }
          var v, v2;
          var n = this.size;
          var n1 = n - 1;
          for (var i = 0; i < n1; ++i) {
              v = 3 * i;
              v2 = 3 * i * 2;
              if (position) {
                  linePosition[v2] = position[v];
                  linePosition[v2 + 1] = position[v + 1];
                  linePosition[v2 + 2] = position[v + 2];
                  linePosition[v2 + 3] = position[v + 3];
                  linePosition[v2 + 4] = position[v + 4];
                  linePosition[v2 + 5] = position[v + 5];
              }
              if (color) {
                  lineColor[v2] = color[v];
                  lineColor[v2 + 1] = color[v + 1];
                  lineColor[v2 + 2] = color[v + 2];
                  lineColor[v2 + 3] = color[v + 3];
                  lineColor[v2 + 4] = color[v + 4];
                  lineColor[v2 + 5] = color[v + 5];
              }
          }
      };

      return TraceBuffer;
  }(Buffer));

  /**
   * @file Trace Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Trace Representation
   */
  var TraceRepresentation = /*@__PURE__*/(function (StructureRepresentation) {
      function TraceRepresentation(structure, viewer, params) {
          StructureRepresentation.call(this, structure, viewer, params);
          this.type = 'trace';
          this.parameters = Object.assign({
              subdiv: {
                  type: 'integer', max: 50, min: 1, rebuild: true
              },
              tension: {
                  type: 'number', precision: 1, max: 1.0, min: 0.1
              },
              smoothSheet: {
                  type: 'boolean', rebuild: true
              }
          }, this.parameters, {
              flatShaded: null,
              side: null,
              wireframe: null
          });
          this.init(params);
      }

      if ( StructureRepresentation ) TraceRepresentation.__proto__ = StructureRepresentation;
      TraceRepresentation.prototype = Object.create( StructureRepresentation && StructureRepresentation.prototype );
      TraceRepresentation.prototype.constructor = TraceRepresentation;
      TraceRepresentation.prototype.init = function init (params) {
          var p = params || {};
          p.colorScheme = defaults(p.colorScheme, 'chainname');
          p.colorScale = defaults(p.colorScale, 'RdYlBu');
          if (p.quality === 'low') {
              this.subdiv = 3;
          }
          else if (p.quality === 'medium') {
              this.subdiv = 6;
          }
          else if (p.quality === 'high') {
              this.subdiv = 12;
          }
          else {
              this.subdiv = defaults(p.subdiv, 6);
          }
          this.tension = defaults(p.tension, NaN);
          this.smoothSheet = defaults(p.smoothSheet, false);
          StructureRepresentation.prototype.init.call(this, p);
      };
      TraceRepresentation.prototype.getSplineParams = function getSplineParams (params) {
          return Object.assign({
              subdiv: this.subdiv,
              tension: this.tension,
              directional: false,
              smoothSheet: this.smoothSheet
          }, params);
      };
      TraceRepresentation.prototype.getAtomRadius = function getAtomRadius (atom) {
          return atom.isTrace() ? 0.1 : 0;
      };
      TraceRepresentation.prototype.createData = function createData (sview) {
          var this$1$1 = this;

          var bufferList = [];
          var polymerList = [];
          this.structure.eachPolymer(function (polymer) {
              if (polymer.residueCount < 4)
                  { return; }
              polymerList.push(polymer);
              var spline = new Spline(polymer, this$1$1.getSplineParams());
              var subPos = spline.getSubdividedPosition();
              var subCol = spline.getSubdividedColor(this$1$1.getColorParams());
              bufferList.push(new TraceBuffer(Object.assign({}, subPos, subCol), this$1$1.getBufferParams()));
          }, sview.getSelection());
          return {
              bufferList: bufferList,
              polymerList: polymerList
          };
      };
      TraceRepresentation.prototype.updateData = function updateData (what, data) {
          what = what || {};
          var i = 0;
          var n = data.polymerList.length;
          for (i = 0; i < n; ++i) {
              var bufferData = {};
              var spline = new Spline(data.polymerList[i], this.getSplineParams());
              if (what.position) {
                  var subPos = spline.getSubdividedPosition();
                  Object.assign(bufferData, { position: subPos.position });
              }
              if (what.color) {
                  var subCol = spline.getSubdividedColor(this.getColorParams());
                  Object.assign(bufferData, { color: subCol.color });
              }
              data.bufferList[i].setAttributes(bufferData);
          }
      };
      TraceRepresentation.prototype.setParameters = function setParameters (params) {
          var rebuild = false;
          var what = {};
          if (params && params.tension) {
              Object.assign(what, { position: true });
          }
          StructureRepresentation.prototype.setParameters.call(this, params, what, rebuild);
          return this;
      };

      return TraceRepresentation;
  }(StructureRepresentation));
  RepresentationRegistry.add('trace', TraceRepresentation);

  /**
   * @file Tube Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Tube Representation
   */
  var TubeRepresentation = /*@__PURE__*/(function (CartoonRepresentation) {
      function TubeRepresentation(structure, viewer, params) {
          CartoonRepresentation.call(this, structure, viewer, params);
          this.type = 'tube';
          this.parameters = Object.assign({}, this.parameters, { aspectRatio: null });
      }

      if ( CartoonRepresentation ) TubeRepresentation.__proto__ = CartoonRepresentation;
      TubeRepresentation.prototype = Object.create( CartoonRepresentation && CartoonRepresentation.prototype );
      TubeRepresentation.prototype.constructor = TubeRepresentation;
      TubeRepresentation.prototype.init = function init (params) {
          var p = params || {};
          p.aspectRatio = 1.0;
          p.radiusScale = defaults(p.radiusScale, 2.0);
          if (p.quality === 'low') {
              this.radialSegments = 5;
          }
          CartoonRepresentation.prototype.init.call(this, p);
      };
      TubeRepresentation.prototype.getSplineParams = function getSplineParams ( /* params */) {
          return CartoonRepresentation.prototype.getSplineParams.call(this, {
              directional: false
          });
      };

      return TubeRepresentation;
  }(CartoonRepresentation));
  RepresentationRegistry.add('tube', TubeRepresentation);

  /**
   * @file Unitcell Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Unitcell Representation
   */
  var UnitcellRepresentation = /*@__PURE__*/(function (StructureRepresentation) {
      function UnitcellRepresentation(structure, viewer, params) {
          StructureRepresentation.call(this, structure, viewer, params);
          this.type = 'unitcell';
          this.parameters = Object.assign({
              radiusSize: {
                  type: 'number', precision: 3, max: 10.0, min: 0.001
              },
              sphereDetail: true,
              radialSegments: true,
              disableImpostor: true
          }, this.parameters, {
              assembly: null
          });
          this.init(params);
      }

      if ( StructureRepresentation ) UnitcellRepresentation.__proto__ = StructureRepresentation;
      UnitcellRepresentation.prototype = Object.create( StructureRepresentation && StructureRepresentation.prototype );
      UnitcellRepresentation.prototype.constructor = UnitcellRepresentation;
      UnitcellRepresentation.prototype.init = function init (params) {
          var p = params || {};
          var defaultRadius = 0.5;
          if (this.structure.unitcell) {
              defaultRadius = Math.cbrt(this.structure.unitcell.volume) / 200;
          }
          p.radiusSize = defaults(p.radiusSize, defaultRadius);
          p.colorValue = defaults(p.colorValue, 'orange');
          p.useInteriorColor = defaults(p.useInteriorColor, true);
          StructureRepresentation.prototype.init.call(this, p);
      };
      UnitcellRepresentation.prototype.getUnitcellData = function getUnitcellData (structure) {
          return structure.unitcell.getData(structure);
      };
      UnitcellRepresentation.prototype.create = function create () {
          var structure = this.structureView.getStructure();
          if (!structure.unitcell)
              { return; }
          var unitcellData = this.getUnitcellData(structure);
          this.sphereBuffer = new SphereBuffer(unitcellData.vertex, this.getBufferParams({
              sphereDetail: this.sphereDetail,
              disableImpostor: this.disableImpostor,
              dullInterior: true
          }));
          this.cylinderBuffer = new CylinderBuffer(unitcellData.edge, this.getBufferParams({
              openEnded: true,
              radialSegments: this.radialSegments,
              disableImpostor: this.disableImpostor,
              dullInterior: true
          }));
          this.dataList.push({
              sview: this.structureView,
              bufferList: [this.sphereBuffer, this.cylinderBuffer]
          });
      };
      UnitcellRepresentation.prototype.createData = function createData (sview) {
          return;
      };
      UnitcellRepresentation.prototype.updateData = function updateData (what, data) {
          var structure = data.sview.getStructure();
          if (!structure.unitcell)
              { return; }
          var unitcellData = this.getUnitcellData(structure);
          var sphereData = {};
          var cylinderData = {};
          if (!what || what.position) {
              Object.assign(sphereData, { position: unitcellData.vertex.position });
              Object.assign(cylinderData, {
                  position1: unitcellData.edge.position1,
                  position2: unitcellData.edge.position2
              });
          }
          if (!what || what.color) {
              Object.assign(sphereData, { color: unitcellData.vertex.color });
              Object.assign(cylinderData, {
                  color: unitcellData.edge.color,
                  color2: unitcellData.edge.color2
              });
          }
          if (!what || what.radius) {
              Object.assign(sphereData, { radius: unitcellData.vertex.radius });
              Object.assign(cylinderData, { radius: unitcellData.edge.radius });
          }
          this.sphereBuffer.setAttributes(sphereData);
          this.cylinderBuffer.setAttributes(cylinderData);
      };

      return UnitcellRepresentation;
  }(StructureRepresentation));
  RepresentationRegistry.add('unitcell', UnitcellRepresentation);

  /**
   * @file Validation Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Validation representation
   */
  var ValidationRepresentation = /*@__PURE__*/(function (StructureRepresentation) {
      function ValidationRepresentation(structure, viewer, params) {
          StructureRepresentation.call(this, structure, viewer, params);
          this.type = 'validation';
          this.parameters = Object.assign({}, this.parameters, {
              radiusType: null,
              radiusSize: null,
              radiusScale: null
          });
          this.init(params);
      }

      if ( StructureRepresentation ) ValidationRepresentation.__proto__ = StructureRepresentation;
      ValidationRepresentation.prototype = Object.create( StructureRepresentation && StructureRepresentation.prototype );
      ValidationRepresentation.prototype.constructor = ValidationRepresentation;
      ValidationRepresentation.prototype.init = function init (params) {
          var p = params || {};
          p.colorValue = defaults(p.colorValue, '#f0027f');
          p.useInteriorColor = defaults(p.useInteriorColor, true);
          StructureRepresentation.prototype.init.call(this, p);
      };
      ValidationRepresentation.prototype.createData = function createData (sview) {
          if (!sview.validation)
              { return; }
          var clashData = sview.validation.getClashData({
              structure: sview,
              color: this.colorValue
          });
          var cylinderBuffer = new CylinderBuffer(clashData, this.getBufferParams({ openEnded: false }));
          return {
              bufferList: [cylinderBuffer]
          };
      };

      return ValidationRepresentation;
  }(StructureRepresentation));
  RepresentationRegistry.add('validation', ValidationRepresentation);

  /**
   * @file Cone Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var scale$5 = new Vector3();
  var eye$5 = new Vector3();
  var target$5 = new Vector3();
  var up$5 = new Vector3(0, 1, 0);
  function getGeo(params) {
      if ( params === void 0 ) params = {};

      var geo = new ConeBufferGeometry(1, // radius
      1, // height
      defaults(params.radialSegments, 60), // radialSegments
      1, // heightSegments
      defaults(params.openEnded, false) // openEnded
      );
      geo.applyMatrix4(new Matrix4().makeRotationX(-Math.PI / 2));
      return geo;
  }
  var ConeBufferDefaultParameters = Object.assign({
      radialSegments: 60,
      openEnded: false
  }, BufferDefaultParameters);
  /**
   * Cone geometry buffer.
   *
   * @example
   * var coneBuffer = new ConeBuffer({
   *   position1: new Float32Array([ 0, 0, 0 ]),
   *   position2: new Float32Array([ 1, 1, 1 ]),
   *   color: new Float32Array([ 1, 0, 0 ]),
   *   color2: new Float32Array([ 0, 1, 0 ]),
   *   radius: new Float32Array([ 1 ])
   * });
   */
  var ConeBuffer = /*@__PURE__*/(function (GeometryBuffer) {
      function ConeBuffer(data, params) {
          if ( params === void 0 ) params = {};

          GeometryBuffer.call(this, {
              position: new Float32Array(data.position1.length),
              color: data.color,
              picking: data.picking
          }, params, getGeo(params));
          this.updateNormals = true;
          this._position = new Float32Array(data.position1.length);
          this.setAttributes(data, true);
      }

      if ( GeometryBuffer ) ConeBuffer.__proto__ = GeometryBuffer;
      ConeBuffer.prototype = Object.create( GeometryBuffer && GeometryBuffer.prototype );
      ConeBuffer.prototype.constructor = ConeBuffer;

      var prototypeAccessors = { defaultParameters: { configurable: true } };
      prototypeAccessors.defaultParameters.get = function () { return ConeBufferDefaultParameters; };
      ConeBuffer.prototype.applyPositionTransform = function applyPositionTransform (matrix, i, i3) {
          eye$5.fromArray(this._position1, i3);
          target$5.fromArray(this._position2, i3);
          matrix.lookAt(eye$5, target$5, up$5);
          var r = this._radius[i];
          scale$5.set(r, r, eye$5.distanceTo(target$5));
          matrix.scale(scale$5);
      };
      ConeBuffer.prototype.setAttributes = function setAttributes (data, initNormals) {
          if ( data === void 0 ) data = {};

          if (data.position1 && data.position2) {
              calculateCenterArray(data.position1, data.position2, this._position);
              this._position1 = data.position1;
              this._position2 = data.position2;
              data.position = this._position;
          }
          if (data.radius)
              { this._radius = data.radius; }
          GeometryBuffer.prototype.setAttributes.call(this, data, initNormals);
      };

      Object.defineProperties( ConeBuffer.prototype, prototypeAccessors );

      return ConeBuffer;
  }(GeometryBuffer));
  BufferRegistry.add('cone', ConeBuffer);

  /**
   * @file Geometry Group
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var GeometryGroup = function GeometryGroup(geometryList) {
      if ( geometryList === void 0 ) geometryList = [];

      this.geometryList = geometryList;
  };
  GeometryGroup.prototype.computeBoundingBox = function computeBoundingBox () {
          var this$1$1 = this;

      if (!this.boundingBox) {
          this.boundingBox = new Box3();
      }
      else {
          this.boundingBox.empty();
      }
      this.geometryList.forEach(function (geo) {
          if (!geo.boundingBox)
              { geo.computeBoundingBox(); }
          this$1$1.boundingBox.union(geo.boundingBox);
      });
  };

  /**
   * @file Arrow Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var ArrowBufferDefaultParameters = Object.assign({
      aspectRatio: 1.5,
      radialSegments: 50,
      openEnded: false,
      disableImpostor: false
  }, BufferDefaultParameters);
  /**
   * Arrow buffer. Draws arrows made from a cylinder and a cone.
   * @implements {Buffer}
   *
   * @example
   * var arrowBuffer = new ArrowBuffer({
   *   position1: new Float32Array([ 0, 0, 0 ]),
   *   position2: new Float32Array([ 10, 1, 1 ]),
   *   color: new Float32Array([ 1, 0, 0 ]),
   *   radius: new Float32Array([ 1 ])
   * });
   */
  var ArrowBuffer = function ArrowBuffer(data, params) {
      if ( params === void 0 ) params = {};

      this.group = new Group();
      this.wireframeGroup = new Group();
      this.pickingGroup = new Group();
      this.visible = true;
      this.parameters = createParams(params, this.defaultParameters);
      this.splitPosition = new Float32Array(data.position1.length);
      this.cylinderRadius = new Float32Array(data.radius.length);
      var attr = this.makeAttributes(data);
      var bufferParams = {
          radialSegments: this.parameters.radialSegments,
          openEnded: this.parameters.openEnded,
          disableImpostor: this.parameters.disableImpostor
      };
      this.cylinderBuffer = new CylinderBuffer(attr.cylinder, bufferParams);
      this.coneBuffer = new ConeBuffer(attr.cone, bufferParams);
      this.geometry = new GeometryGroup([
          this.cylinderBuffer.geometry,
          this.coneBuffer.geometry
      ]);
      // requires Group objects to be present
      this.matrix = defaults(params.matrix, new Matrix4());
      this.picking = data.picking;
  };

  var prototypeAccessors$4 = { defaultParameters: { configurable: true },matrix: { configurable: true },pickable: { configurable: true } };
  prototypeAccessors$4.defaultParameters.get = function () { return ArrowBufferDefaultParameters; };
  prototypeAccessors$4.matrix.set = function (m) {
      Buffer.prototype.setMatrix.call(this, m);
  };
  prototypeAccessors$4.matrix.get = function () {
      return this.group.matrix.clone();
  };
  prototypeAccessors$4.pickable.get = function () {
      return !!this.picking;
  };
  ArrowBuffer.prototype.makeAttributes = function makeAttributes (data) {
          if ( data === void 0 ) data = {};

      var splitPosition = this.splitPosition;
      var cylinderRadius = this.cylinderRadius;
      var aspectRatio = this.parameters.aspectRatio;
      var i, il;
      var cylinder = {};
      var cone = {};
      if (data.radius) {
          for (i = 0, il = cylinderRadius.length; i < il; ++i) {
              cylinderRadius[i] = data.radius[i] / aspectRatio;
          }
          cylinder.radius = cylinderRadius;
          cone.radius = data.radius;
      }
      if (data.position1 && data.position2) {
          var vFrom = new Vector3();
          var vTo = new Vector3();
          var vDir = new Vector3();
          var vSplit = new Vector3();
          for (i = 0, il = splitPosition.length; i < il; i += 3) {
              vFrom.fromArray(data.position1, i);
              vTo.fromArray(data.position2, i);
              vDir.subVectors(vFrom, vTo);
              var fullLength = vDir.length();
              var coneLength = cylinderRadius[i / 3] * aspectRatio * 2;
              var length = Math.min(fullLength, coneLength);
              vDir.setLength(length);
              vSplit.copy(vTo).add(vDir);
              vSplit.toArray(splitPosition, i);
          }
          cylinder.position1 = data.position1;
          cylinder.position2 = splitPosition;
          cone.position1 = splitPosition;
          cone.position2 = data.position2;
      }
      if (data.color) {
          cylinder.color = data.color;
          cylinder.color2 = data.color;
          cone.color = data.color;
      }
      return {
          cylinder: cylinder,
          cone: cone
      };
  };
  ArrowBuffer.prototype.getMesh = function getMesh () {
      return new Group().add(this.cylinderBuffer.getMesh(), this.coneBuffer.getMesh());
  };
  ArrowBuffer.prototype.getWireframeMesh = function getWireframeMesh () {
      return new Group().add(this.cylinderBuffer.getWireframeMesh(), this.coneBuffer.getWireframeMesh());
  };
  ArrowBuffer.prototype.getPickingMesh = function getPickingMesh () {
      return new Group().add(this.cylinderBuffer.getPickingMesh(), this.coneBuffer.getPickingMesh());
  };
  ArrowBuffer.prototype.setAttributes = function setAttributes (data) {
          if ( data === void 0 ) data = {};

      var attr = this.makeAttributes(data);
      this.cylinderBuffer.setAttributes(attr.cylinder);
      this.coneBuffer.setAttributes(attr.cone);
  };
  /**
   * Set buffer parameters
   * @param {BufferParameters} params - buffer parameters object
   * @return {undefined}
   */
  ArrowBuffer.prototype.setParameters = function setParameters (params) {
          if ( params === void 0 ) params = {};

      params = Object.assign({}, params);
      if (params && params.matrix !== undefined) {
          this.matrix = params.matrix;
      }
      delete params.matrix;
      if (params && params.wireframe !== undefined) {
          this.parameters.wireframe = params.wireframe;
          this.setVisibility(this.visible);
      }
      this.cylinderBuffer.setParameters(params);
      this.coneBuffer.setParameters(params);
  };
  ArrowBuffer.prototype.setVisibility = function setVisibility (value) {
      Buffer.prototype.setVisibility.call(this, value);
  };
  ArrowBuffer.prototype.dispose = function dispose () {
      this.cylinderBuffer.dispose();
      this.coneBuffer.dispose();
  };

  Object.defineProperties( ArrowBuffer.prototype, prototypeAccessors$4 );
  BufferRegistry.add('arrow', ArrowBuffer);

  /**
   * @file Box Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var scale$4 = new Vector3();
  var target$4 = new Vector3();
  var up$4 = new Vector3();
  var eye$4 = new Vector3(0, 0, 0);
  /**
   * Box buffer. Draws boxes.
   *
   * @example
   * var boxBuffer = new BoxBuffer({
   *   position: new Float32Array([ 0, 3, 0, -2, 0, 0 ]),
   *   color: new Float32Array([ 1, 0, 1, 0, 1, 0 ]),
   *   size: new Float32Array([ 2, 1.5 ]),
   *   heightAxis: new Float32Array([ 0, 1, 1, 0, 2, 0 ]),
   *   depthAxis: new Float32Array([ 1, 0, 1, 0, 0, 2 ])
   * })
   */
  var BoxBuffer = /*@__PURE__*/(function (GeometryBuffer) {
      function BoxBuffer(data, params) {
          if ( params === void 0 ) params = {};

          GeometryBuffer.call(this, data, params, new BoxBufferGeometry(1, 1, 1));
          this.updateNormals = true;
          this.setAttributes(data, true);
      }

      if ( GeometryBuffer ) BoxBuffer.__proto__ = GeometryBuffer;
      BoxBuffer.prototype = Object.create( GeometryBuffer && GeometryBuffer.prototype );
      BoxBuffer.prototype.constructor = BoxBuffer;
      BoxBuffer.prototype.applyPositionTransform = function applyPositionTransform (matrix, i, i3) {
          target$4.fromArray(this._heightAxis, i3);
          up$4.fromArray(this._depthAxis, i3);
          matrix.lookAt(eye$4, target$4, up$4);
          scale$4.set(this._size[i], up$4.length(), target$4.length());
          matrix.scale(scale$4);
      };
      BoxBuffer.prototype.setAttributes = function setAttributes (data, initNormals) {
          if ( data === void 0 ) data = {};

          if (data.size)
              { this._size = data.size; }
          if (data.heightAxis)
              { this._heightAxis = data.heightAxis; }
          if (data.depthAxis)
              { this._depthAxis = data.depthAxis; }
          GeometryBuffer.prototype.setAttributes.call(this, data, initNormals);
      };

      return BoxBuffer;
  }(GeometryBuffer));
  BufferRegistry.add('box', BoxBuffer);

  /**
   * @file Ellipsoid Geometry Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var scale$3 = new Vector3();
  var target$3 = new Vector3();
  var up$3 = new Vector3();
  var eye$3 = new Vector3(0, 0, 0);
  var EllipsoidBufferDefaultParameters = Object.assign({
      sphereDetail: 2,
  }, BufferDefaultParameters);
  /**
   * Ellipsoid buffer. Draws ellipsoids.
   *
   * @example
   * var ellipsoidBuffer = new EllipsoidBuffer({
   *   position: new Float32Array([ 0, 0, 0 ]),
   *   color: new Float32Array([ 1, 0, 0 ]),
   *   radius: new Float32Array([ 1 ]),
   *   majorAxis: new Float32Array([ 1, 1, 0 ]),
   *   minorAxis: new Float32Array([ 0.5, 0, 0.5 ]),
   * });
   */
  var EllipsoidBuffer = /*@__PURE__*/(function (GeometryBuffer) {
      function EllipsoidBuffer(data, params) {
          if ( params === void 0 ) params = {};

          GeometryBuffer.call(this, data, params, new IcosahedronBufferGeometry(1, defaults(params.sphereDetail, 2)));
          this.updateNormals = true;
          this.setAttributes(data, true);
      }

      if ( GeometryBuffer ) EllipsoidBuffer.__proto__ = GeometryBuffer;
      EllipsoidBuffer.prototype = Object.create( GeometryBuffer && GeometryBuffer.prototype );
      EllipsoidBuffer.prototype.constructor = EllipsoidBuffer;

      var prototypeAccessors = { defaultParameters: { configurable: true } };
      prototypeAccessors.defaultParameters.get = function () { return EllipsoidBufferDefaultParameters; };
      EllipsoidBuffer.prototype.applyPositionTransform = function applyPositionTransform (matrix, i, i3) {
          target$3.fromArray(this._majorAxis, i3);
          up$3.fromArray(this._minorAxis, i3);
          matrix.lookAt(eye$3, target$3, up$3);
          scale$3.set(this._radius[i], up$3.length(), target$3.length());
          matrix.scale(scale$3);
      };
      EllipsoidBuffer.prototype.setAttributes = function setAttributes (data, initNormals) {
          if ( data === void 0 ) data = {};

          if (data.radius)
              { this._radius = data.radius; }
          if (data.majorAxis)
              { this._majorAxis = data.majorAxis; }
          if (data.minorAxis)
              { this._minorAxis = data.minorAxis; }
          GeometryBuffer.prototype.setAttributes.call(this, data, initNormals);
      };

      Object.defineProperties( EllipsoidBuffer.prototype, prototypeAccessors );

      return EllipsoidBuffer;
  }(GeometryBuffer));
  BufferRegistry.add('ellipsoid', EllipsoidBuffer);

  /**
   * @file Octahedron Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var scale$2 = new Vector3();
  var target$2 = new Vector3();
  var up$2 = new Vector3();
  var eye$2 = new Vector3(0, 0, 0);
  /**
   * Octahedron buffer. Draws octahedrons.
   *
   * @example
   * var octahedronBuffer = new OctahedronBuffer({
   *   position: new Float32Array([ 0, 3, 0, -2, 0, 0 ]),
   *   color: new Float32Array([ 1, 0, 1, 0, 1, 0 ]),
   *   size: new Float32Array([ 2, 1.5 ]),
   *   heightAxis: new Float32Array([ 0, 1, 1, 0, 2, 0 ]),
   *   depthAxis: new Float32Array([ 1, 0, 1, 0, 0, 2 ])
   * })
   */
  var OctahedronBuffer = /*@__PURE__*/(function (GeometryBuffer) {
      function OctahedronBuffer(data, params) {
          if ( params === void 0 ) params = {};

          GeometryBuffer.call(this, data, params, new OctahedronBufferGeometry(1, 0));
          this.updateNormals = true;
          this.setAttributes(data, true);
      }

      if ( GeometryBuffer ) OctahedronBuffer.__proto__ = GeometryBuffer;
      OctahedronBuffer.prototype = Object.create( GeometryBuffer && GeometryBuffer.prototype );
      OctahedronBuffer.prototype.constructor = OctahedronBuffer;
      OctahedronBuffer.prototype.applyPositionTransform = function applyPositionTransform (matrix, i, i3) {
          target$2.fromArray(this._heightAxis, i3);
          up$2.fromArray(this._depthAxis, i3);
          matrix.lookAt(eye$2, target$2, up$2);
          scale$2.set(this._size[i], up$2.length(), target$2.length());
          matrix.scale(scale$2);
      };
      OctahedronBuffer.prototype.setAttributes = function setAttributes (data, initNormals) {
          if ( data === void 0 ) data = {};

          if (data.size)
              { this._size = data.size; }
          if (data.heightAxis)
              { this._heightAxis = data.heightAxis; }
          if (data.depthAxis)
              { this._depthAxis = data.depthAxis; }
          GeometryBuffer.prototype.setAttributes.call(this, data, initNormals);
      };

      return OctahedronBuffer;
  }(GeometryBuffer));
  BufferRegistry.add('octahedron', OctahedronBuffer);

  /**
   * @file Tetrahedron Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var scale$1 = new Vector3();
  var target$1 = new Vector3();
  var up$1 = new Vector3();
  var eye$1 = new Vector3(0, 0, 0);
  /**
   * Tetrahedron buffer. Draws tetrahedrons.
   *
   * @example
   * var tetrahedronBuffer = new TetrahedronBuffer({
   *   position: new Float32Array([ 0, 3, 0, -2, 0, 0 ]),
   *   color: new Float32Array([ 1, 0, 1, 0, 1, 0 ]),
   *   size: new Float32Array([ 2, 1.5 ]),
   *   heightAxis: new Float32Array([ 0, 1, 1, 0, 2, 0 ]),
   *   depthAxis: new Float32Array([ 1, 0, 1, 0, 0, 2 ])
   * })
   */
  var TetrahedronBuffer = /*@__PURE__*/(function (GeometryBuffer) {
      function TetrahedronBuffer(data, params) {
          if ( params === void 0 ) params = {};

          GeometryBuffer.call(this, data, params, new TetrahedronBufferGeometry(1, 0));
          this.updateNormals = true;
          this.setAttributes(data, true);
      }

      if ( GeometryBuffer ) TetrahedronBuffer.__proto__ = GeometryBuffer;
      TetrahedronBuffer.prototype = Object.create( GeometryBuffer && GeometryBuffer.prototype );
      TetrahedronBuffer.prototype.constructor = TetrahedronBuffer;
      TetrahedronBuffer.prototype.applyPositionTransform = function applyPositionTransform (matrix, i, i3) {
          target$1.fromArray(this._heightAxis, i3);
          up$1.fromArray(this._depthAxis, i3);
          matrix.lookAt(eye$1, target$1, up$1);
          scale$1.set(this._size[i], up$1.length(), target$1.length());
          matrix.scale(scale$1);
      };
      TetrahedronBuffer.prototype.setAttributes = function setAttributes (data, initNormals) {
          if ( data === void 0 ) data = {};

          if (data.size)
              { this._size = data.size; }
          if (data.heightAxis)
              { this._heightAxis = data.heightAxis; }
          if (data.depthAxis)
              { this._depthAxis = data.depthAxis; }
          GeometryBuffer.prototype.setAttributes.call(this, data, initNormals);
      };

      return TetrahedronBuffer;
  }(GeometryBuffer));
  BufferRegistry.add('tetrahedron', TetrahedronBuffer);

  /**
   * @file Tetrahedron Geometry Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var scale = new Vector3();
  var target = new Vector3();
  var up = new Vector3();
  var eye = new Vector3(0, 0, 0);
  var TorusBufferDefaultParameters = Object.assign({
      radiusRatio: 0.2,
      radialSegments: 16,
      tubularSegments: 32
  }, BufferDefaultParameters);
  /**
   * Torus geometry buffer. Draws torii.
   *
   * @example
   * var torusBuffer = new TorusBuffer({
   *   position: new Float32Array([ 0, 0, 0 ]),
   *   color: new Float32Array([ 1, 0, 0 ]),
   *   radius: new Float32Array([ 1 ]),
   *   majorAxis: new Float32Array([ 1, 1, 0 ]),
   *   minorAxis: new Float32Array([ 0.5, 0, 0.5 ]),
   * });
   */
  var TorusBuffer = /*@__PURE__*/(function (GeometryBuffer) {
      function TorusBuffer(data, params) {
          if ( params === void 0 ) params = {};

          GeometryBuffer.call(this, data, params, new TorusBufferGeometry(1, defaults(params.radiusRatio, 0.2), defaults(params.radialSegments, 16), defaults(params.tubularSegments, 32)));
          this.updateNormals = true;
          this.setAttributes(data, true);
      }

      if ( GeometryBuffer ) TorusBuffer.__proto__ = GeometryBuffer;
      TorusBuffer.prototype = Object.create( GeometryBuffer && GeometryBuffer.prototype );
      TorusBuffer.prototype.constructor = TorusBuffer;

      var prototypeAccessors = { defaultParameters: { configurable: true } };
      prototypeAccessors.defaultParameters.get = function () { return TorusBufferDefaultParameters; };
      TorusBuffer.prototype.applyPositionTransform = function applyPositionTransform (matrix, i, i3) {
          target.fromArray(this._majorAxis, i3);
          up.fromArray(this._minorAxis, i3);
          matrix.lookAt(eye, target, up);
          var r = this._radius[i];
          scale.set(r, r, r);
          matrix.scale(scale);
      };
      TorusBuffer.prototype.setAttributes = function setAttributes (data, initNormals) {
          if ( data === void 0 ) data = {};

          if (data.radius)
              { this._radius = data.radius; }
          if (data.majorAxis)
              { this._majorAxis = data.majorAxis; }
          if (data.minorAxis)
              { this._minorAxis = data.minorAxis; }
          GeometryBuffer.prototype.setAttributes.call(this, data, initNormals);
      };

      Object.defineProperties( TorusBuffer.prototype, prototypeAccessors );

      return TorusBuffer;
  }(GeometryBuffer));
  BufferRegistry.add('torus', TorusBuffer);

  /**
   * @file Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var Parser = function Parser(streamer, params) {
      var p = params || {};
      this.streamer = streamer;
      this.name = defaults(p.name, '');
      this.path = defaults(p.path, '');
  };

  var prototypeAccessors$3 = { type: { configurable: true },__objName: { configurable: true },isBinary: { configurable: true },isJson: { configurable: true },isXml: { configurable: true } };
  prototypeAccessors$3.type.get = function () { return ''; };
  prototypeAccessors$3.__objName.get = function () { return ''; };
  prototypeAccessors$3.isBinary.get = function () { return false; };
  prototypeAccessors$3.isJson.get = function () { return false; };
  prototypeAccessors$3.isXml.get = function () { return false; };
  Parser.prototype.parse = function parse () {
          var this$1$1 = this;

      return this.streamer.read().then(function () {
          this$1$1._beforeParse();
          this$1$1._parse();
          this$1$1._afterParse();
          return this$1$1[this$1$1.__objName];
      });
  };
  Parser.prototype._parse = function _parse () { };
  Parser.prototype._beforeParse = function _beforeParse () { };
  Parser.prototype._afterParse = function _afterParse () {
      if (exports.Debug)
          { Log.log(this[this.__objName]); }
  };

  Object.defineProperties( Parser.prototype, prototypeAccessors$3 );

  /**
   * @file Structure Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var StructureParser = /*@__PURE__*/(function (Parser) {
      function StructureParser(streamer, params) {
          var p = params || {};
          Parser.call(this, streamer, p);
          this.firstModelOnly = defaults(p.firstModelOnly, false);
          this.asTrajectory = defaults(p.asTrajectory, false);
          this.cAlphaOnly = defaults(p.cAlphaOnly, false);
          this.structure = new Structure(this.name, this.path);
          this.structureBuilder = new StructureBuilder(this.structure);
      }

      if ( Parser ) StructureParser.__proto__ = Parser;
      StructureParser.prototype = Object.create( Parser && Parser.prototype );
      StructureParser.prototype.constructor = StructureParser;

      var prototypeAccessors = { type: { configurable: true },__objName: { configurable: true } };
      prototypeAccessors.type.get = function () { return 'structure'; };
      prototypeAccessors.__objName.get = function () { return 'structure'; };

      Object.defineProperties( StructureParser.prototype, prototypeAccessors );

      return StructureParser;
  }(Parser));

  /**
   * @file Entity
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function entityTypeFromString(string) {
      string = string.toLowerCase();
      switch (string) {
          case 'polymer':
              return PolymerEntity;
          case 'non-polymer':
              return NonPolymerEntity;
          case 'macrolide':
              return MacrolideEntity;
          case 'water':
              return WaterEntity;
          default:
              return UnknownEntity;
      }
  }
  function entityFromType(type) {
      switch (type) {
          case PolymerEntity:
              return 'polymer';
          case NonPolymerEntity:
              return 'non-polymer';
          case MacrolideEntity:
              return 'macrolide';
          case WaterEntity:
              return 'water';
          default:
              return undefined;
      }
  }
  /**
   * Entity of a {@link Structure}
   */
  var Entity = function Entity(structure, index, description, type, chainIndexList) {
      if ( description === void 0 ) description = '';
      if ( chainIndexList === void 0 ) chainIndexList = [];

      this.structure = structure;
      this.index = index;
      this.description = description;
      this.entityType = entityTypeFromString(type || '');
      this.chainIndexList = chainIndexList;
      chainIndexList.forEach(function (ci) {
          structure.chainStore.entityIndex[ci] = index;
      });
  };

  var prototypeAccessors$2 = { type: { configurable: true } };
  prototypeAccessors$2.type.get = function () { return entityFromType(this.entityType); };
  Entity.prototype.getEntityType = function getEntityType () {
      return this.entityType;
  };
  Entity.prototype.isPolymer = function isPolymer () {
      return this.entityType === PolymerEntity;
  };
  Entity.prototype.isNonPolymer = function isNonPolymer () {
      return this.entityType === NonPolymerEntity;
  };
  Entity.prototype.isMacrolide = function isMacrolide () {
      return this.entityType === MacrolideEntity;
  };
  Entity.prototype.isWater = function isWater () {
      return this.entityType === WaterEntity;
  };
  Entity.prototype.eachChain = function eachChain (callback) {
      var cp = this.structure.getChainProxy();
      this.chainIndexList.forEach(function (index) {
          cp.index = index;
          callback(cp);
      });
  };

  Object.defineProperties( Entity.prototype, prototypeAccessors$2 );

  /**
   * @file Unitcell
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var DefaultBoxParams = {
      a: 1,
      b: 1,
      c: 1,
      alpha: 90,
      beta: 90,
      gamma: 90,
      spacegroup: 'P 1'
  };
  /**
   * Unitcell class
   */
  var Unitcell = function Unitcell(params) {
      if ( params === void 0 ) params = DefaultBoxParams;

      this.cartToFrac = new Matrix4();
      this.fracToCart = new Matrix4();
      this.a = params.a;
      this.b = params.b;
      this.c = params.c;
      this.alpha = params.alpha;
      this.beta = params.beta;
      this.gamma = params.gamma;
      this.spacegroup = params.spacegroup;
      var alphaRad = degToRad(this.alpha);
      var betaRad = degToRad(this.beta);
      var gammaRad = degToRad(this.gamma);
      var cosAlpha = Math.cos(alphaRad);
      var cosBeta = Math.cos(betaRad);
      var cosGamma = Math.cos(gammaRad);
      var sinBeta = Math.sin(betaRad);
      var sinGamma = Math.sin(gammaRad);
      this.volume = (this.a * this.b * this.c *
          Math.sqrt(1 - cosAlpha * cosAlpha - cosBeta * cosBeta - cosGamma * cosGamma +
              2.0 * cosAlpha * cosBeta * cosGamma));
      if (params.cartToFrac === undefined) {
          // https://github.com/biojava/biojava/blob/master/biojava-structure/src/main/java/org/biojava/nbio/structure/xtal/CrystalCell.java
          var cStar = (this.a * this.b * sinGamma) / this.volume;
          var cosAlphaStar = ((cosBeta * cosGamma - cosAlpha) / (sinBeta * sinGamma));
          this.fracToCart.set(this.a, 0, 0, 0, this.b * cosGamma, this.b * sinGamma, 0, 0, this.c * cosBeta, -this.c * sinBeta * cosAlphaStar, 1.0 / cStar, 0, 0, 0, 0, 1).transpose();
          this.cartToFrac.getInverse(this.fracToCart);
      }
      else {
          this.cartToFrac.copy(params.cartToFrac);
          this.fracToCart.getInverse(this.cartToFrac);
      }
  };
  Unitcell.prototype.getPosition = function getPosition (structure) {
      var vertexPosition = new Float32Array(3 * 8);
      if (structure.unitcell) {
          var uc = structure.unitcell;
          var centerFrac = structure.center.clone().applyMatrix4(uc.cartToFrac).floor();
          var v = new Vector3();
          var cornerOffset = 0;
          var addCorner = function (x, y, z) {
              v.set(x, y, z)
                  .add(centerFrac)
                  .applyMatrix4(uc.fracToCart)
                  .toArray(vertexPosition, cornerOffset);
              cornerOffset += 3;
          };
          addCorner(0, 0, 0);
          addCorner(1, 0, 0);
          addCorner(0, 1, 0);
          addCorner(0, 0, 1);
          addCorner(1, 1, 0);
          addCorner(1, 0, 1);
          addCorner(0, 1, 1);
          addCorner(1, 1, 1);
      }
      return vertexPosition;
  };
  Unitcell.prototype.getCenter = function getCenter (structure) {
      return centerArray3(this.getPosition(structure));
  };
  Unitcell.prototype.getData = function getData (structure, params) {
          if ( params === void 0 ) params = {};

      var colorValue = defaults(params.colorValue, 'orange');
      var radius = defaults(params.radius, Math.cbrt(this.volume) / 200);
      var c = new Color(colorValue);
      var v = new Vector3();
      var vertexPosition = this.getPosition(structure);
      var vertexColor = uniformArray3(8, c.r, c.g, c.b);
      var vertexRadius = uniformArray(8, radius);
      var edgePosition1 = new Float32Array(3 * 12);
      var edgePosition2 = new Float32Array(3 * 12);
      var edgeColor = uniformArray3(12, c.r, c.g, c.b);
      var edgeRadius = uniformArray(12, radius);
      var edgeOffset = 0;
      function addEdge(a, b) {
          v.fromArray(vertexPosition, a * 3)
              .toArray(edgePosition1, edgeOffset);
          v.fromArray(vertexPosition, b * 3)
              .toArray(edgePosition2, edgeOffset);
          edgeOffset += 3;
      }
      addEdge(0, 1);
      addEdge(0, 2);
      addEdge(0, 3);
      addEdge(1, 4);
      addEdge(1, 5);
      addEdge(2, 6);
      addEdge(3, 5);
      addEdge(4, 7);
      addEdge(5, 7);
      addEdge(2, 4);
      addEdge(7, 6);
      addEdge(3, 6);
      var picker = new UnitcellPicker(this, structure);
      return {
          vertex: {
              position: vertexPosition,
              color: vertexColor,
              radius: vertexRadius,
              picking: picker
          },
          edge: {
              position1: edgePosition1,
              position2: edgePosition2,
              color: edgeColor,
              color2: edgeColor,
              radius: edgeRadius,
              picking: picker
          }
      };
  };

  /**
   * @file Pdb Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  // PDB helix record encoding
  var HelixTypes = {
      1: 'h',
      2: 'h',
      3: 'i',
      4: 'h',
      5: 'g',
      6: 'h',
      7: 'h',
      8: 'h',
      9: 'h',
      10: 'h',
      0: 'h' //Used to be ''
  };
  var dAminoAcids = [
      'DAL',
      'DAR',
      'DSG',
      'DAS',
      'DCY',
      'DGL',
      'DGN',
      'DHI',
      'DIL',
      'DLE',
      'DLY',
      'MED',
      'DPN',
      'DPR',
      'DSN',
      'DTH',
      'DTR',
      'DTY',
      'DVA',
      'DNE' // D-NORLEUCINE
      // ???  // D-SELENOCYSTEINE
  ];
  var entityKeyList = [
      'MOL_ID', 'MOLECULE', 'CHAIN', 'FRAGMENT', 'SYNONYM',
      'EC', 'ENGINEERED', 'MUTATION', 'OTHER_DETAILS'
  ];
  var reWhitespace$7 = /\s+/;
  function getModresId(resno, chainname, inscode) {
      var id = "" + resno;
      if (chainname)
          { id += ":" + chainname; }
      if (inscode)
          { id += "^" + inscode; }
      return id;
  }
  var PdbParser = /*@__PURE__*/(function (StructureParser) {
      function PdbParser(streamer, params) {
          var p = params || {};
          StructureParser.call(this, streamer, p);
          this.hex = defaults(p.hex, false);
      }

      if ( StructureParser ) PdbParser.__proto__ = StructureParser;
      PdbParser.prototype = Object.create( StructureParser && StructureParser.prototype );
      PdbParser.prototype.constructor = PdbParser;

      var prototypeAccessors = { type: { configurable: true } };
      prototypeAccessors.type.get = function () { return 'pdb'; };
      PdbParser.prototype._parse = function _parse () {
          // http://www.wwpdb.org/documentation/file-format.php
          if (exports.Debug)
              { Log.time('PdbParser._parse ' + this.name); }
          var isLegacy = false;
          var headerLine = this.streamer.peekLines(1)[0];
          var headerId = headerLine.substr(62, 4);
          var legacyId = headerLine.substr(72, 4);
          if (headerId === legacyId && legacyId.trim()) {
              isLegacy = true;
          }
          var isPqr = this.type === 'pqr';
          var isPdbqt = this.type === 'pdbqt';
          var s = this.structure;
          var sb = this.structureBuilder;
          var hex = this.hex;
          var serialRadix = 10;
          var resnoRadix = 10;
          var firstModelOnly = this.firstModelOnly;
          var asTrajectory = this.asTrajectory;
          var cAlphaOnly = this.cAlphaOnly;
          var frames = s.frames;
          var boxes = s.boxes;
          var doFrames = false;
          var currentFrame, currentCoord;
          var biomolDict = s.biomolDict;
          var currentBiomol;
          var currentPart;
          var currentMatrix;
          var line, recordName;
          var serial, chainname, resno, resname, occupancy;
          var inscode, atomname, hetero, bfactor, altloc;
          var formalCharge;
          var startChain, startResi, startIcode;
          var endChain, endResi, endIcode;
          var serialDict = {};
          var unitcellDict = {};
          var bondDict = {};
          var entityDataList = [];
          var currentEntityData;
          var currentEntityKey;
          // MOL_ID                 Numbers each component; also used in  SOURCE to associate
          //                        the information.
          // MOLECULE               Name of the macromolecule.
          // CHAIN                  Comma-separated list of chain  identifier(s).
          // FRAGMENT               Specifies a domain or region of the  molecule.
          // SYNONYM                Comma-separated list of synonyms for  the MOLECULE.
          // EC                     The Enzyme Commission number associated  with the molecule.
          //                        If there is more than one EC number,  they are presented
          //                        as a comma-separated list.
          // ENGINEERED             Indicates that the molecule was  produced using
          //                        recombinant technology or by purely  chemical synthesis.
          // MUTATION               Indicates if there is a mutation.
          // OTHER_DETAILS          Additional comments.
          var hetnameDict = {};
          var modresDict = {};
          var chainDict = {};
          var chainIdx, chainid, newChain;
          var currentChainname, currentResno, currentResname, currentInscode;
          var seqresDict = {};
          var currentSeqresChainname;
          var secStruct = {
              helices: [],
              sheets: []
          };
          var helices = secStruct.helices;
          var sheets = secStruct.sheets;
          var atomMap = s.atomMap;
          var atomStore = s.atomStore;
          atomStore.resize(Math.round(this.streamer.data.length / 80));
          if (isPqr || isPdbqt)
              { atomStore.addField('partialCharge', 1, 'float32'); }
          if (isPqr)
              { atomStore.addField('radius', 1, 'float32'); }
          var ap1 = s.getAtomProxy();
          var ap2 = s.getAtomProxy();
          var idx = 0;
          var modelIdx = 0;
          var pendingStart = true;
          function _parseChunkOfLines(_i, _n, lines) {
              var ref;

              for (var i = _i; i < _n; ++i) {
                  line = lines[i];
                  recordName = line.substr(0, 6);
                  if (recordName === 'ATOM  ' || recordName === 'HETATM') {
                      // http://www.wwpdb.org/documentation/file-format-content/format33/sect9.html#ATOM
                      // PQR: Field_name Atom_number Atom_name Residue_name Chain_ID Residue_number X Y Z Charge Radius
                      if (pendingStart) {
                          if (asTrajectory) {
                              if (doFrames) {
                                  currentFrame = new Float32Array(atomStore.count * 3);
                                  frames.push(currentFrame);
                              }
                              else {
                                  currentFrame = [];
                              }
                              currentCoord = 0;
                          }
                          else {
                              if (!firstModelOnly)
                                  { serialDict = {}; }
                          }
                          chainIdx = 1;
                          chainid = chainIdx.toString();
                          newChain = true;
                          pendingStart = false;
                      }
                      if (firstModelOnly && modelIdx > 0)
                          { continue; }
                      var x = (void 0), y = (void 0), z = (void 0), ls = (void 0), dd = 0;
                      if (isPqr) {
                          ls = line.split(reWhitespace$7);
                          dd = ls.length === 10 ? 1 : 0;
                          atomname = ls[2];
                          if (cAlphaOnly && atomname !== 'CA')
                              { continue; }
                          x = parseFloat(ls[6 - dd]);
                          y = parseFloat(ls[7 - dd]);
                          z = parseFloat(ls[8 - dd]);
                      }
                      else {
                          atomname = line.substr(12, 4).trim();
                          if (cAlphaOnly && atomname !== 'CA')
                              { continue; }
                          x = parseFloat(line.substr(30, 8));
                          y = parseFloat(line.substr(38, 8));
                          z = parseFloat(line.substr(46, 8));
                      }
                      if (asTrajectory) {
                          var j = currentCoord * 3;
                          currentFrame[j + 0] = x;
                          currentFrame[j + 1] = y;
                          currentFrame[j + 2] = z;
                          currentCoord += 1;
                          if (doFrames)
                              { continue; }
                      }
                      var element = (void 0);
                      if (isPqr) {
                          serial = parseInt(ls[1]);
                          element = '';
                          hetero = (line[0] === 'H') ? 1 : 0;
                          chainname = dd ? '' : ls[4];
                          resno = parseInt(ls[5 - dd]);
                          inscode = '';
                          resname = ls[3];
                          altloc = '';
                          occupancy = 1.0;
                      }
                      else {
                          serial = parseInt(line.substr(6, 5), serialRadix);
                          if (hex && serial === 99999) {
                              serialRadix = 16;
                          }
                          hetero = (line[0] === 'H') ? 1 : 0;
                          chainname = line[21].trim();
                          resno = parseInt(line.substr(22, 4), resnoRadix);
                          if (hex && resno === 9999) {
                              resnoRadix = 16;
                          }
                          inscode = line[26].trim();
                          resname = line.substr(17, 4).trim() || 'MOL';
                          bfactor = parseFloat(line.substr(60, 6));
                          altloc = line[16].trim();
                          occupancy = parseFloat(line.substr(54, 6));
                          if (!isLegacy) {
                              if (isPdbqt) {
                                  element = line.substr(12, 2).trim();
                              }
                              else {
                                  element = line.substr(76, 2).trim();
                                  if (!chainname) {
                                      chainname = line.substr(72, 4).trim(); // segid
                                  }
                              }
                              // Where specified, formalCharge is of form "2-" or "1+"
                              formalCharge = parseInt((line.substr(79, 1) + line.substr(78, 1)).trim());
                          }
                      }
                      atomStore.growIfFull();
                      atomStore.atomTypeId[idx] = atomMap.add(atomname, element);
                      atomStore.x[idx] = x;
                      atomStore.y[idx] = y;
                      atomStore.z[idx] = z;
                      atomStore.serial[idx] = serial;
                      atomStore.altloc[idx] = altloc.charCodeAt(0);
                      atomStore.occupancy[idx] = isNaN(occupancy) ? 0 : occupancy;
                      if (isPqr) {
                          atomStore.partialCharge[idx] = parseFloat(ls[9 - dd]);
                          atomStore.radius[idx] = parseFloat(ls[10 - dd]);
                      }
                      else {
                          atomStore.bfactor[idx] = isNaN(bfactor) ? 0 : bfactor;
                          if (isPdbqt) {
                              atomStore.partialCharge[idx] = parseFloat(line.substr(70, 6));
                          }
                          // isFinite check will reject undefined (in legacy case) and NaN values
                          if (isFinite(formalCharge)) {
                              if (!atomStore.formalCharge) {
                                  atomStore.addField('formalCharge', 1, 'int8');
                              }
                              atomStore.formalCharge[idx] = formalCharge;
                          }
                      }
                      var modresId = getModresId(resno, chainname, inscode);
                      // TODO instead of looking at MODRES look at SEQRES and
                      //      missing residues in REMARK 465
                      if (hetero && !modresDict[modresId] && !dAminoAcids.includes(resname)) {
                          if (currentChainname !== chainname || currentResname !== resname ||
                              (!WaterNames.includes(resname) &&
                                  (currentResno !== resno || currentInscode !== inscode))) {
                              chainIdx += 1;
                              chainid = chainIdx.toString();
                              currentResno = resno;
                              currentResname = resname;
                              currentInscode = inscode;
                          }
                      }
                      else if (!newChain && currentChainname !== chainname) {
                          chainIdx += 1;
                          chainid = chainIdx.toString();
                      }
                      sb.addAtom(modelIdx, chainname, chainid, resname, resno, hetero, undefined, inscode);
                      serialDict[serial] = idx;
                      idx += 1;
                      newChain = false;
                      currentChainname = chainname;
                  }
                  else if (recordName === 'CONECT') {
                      var fromIdx = serialDict[parseInt(line.substr(6, 5))];
                      var pos = [11, 16, 21, 26];
                      var bondIndex = {};
                      if (fromIdx === undefined) {
                          // Log.log( "missing CONNECT serial" );
                          continue;
                      }
                      for (var j$1 = 0; j$1 < 4; ++j$1) {
                          var toIdx = parseInt(line.substr(pos[j$1], 5));
                          if (Number.isNaN(toIdx))
                              { continue; }
                          toIdx = serialDict[toIdx];
                          if (toIdx === undefined) {
                              // Log.log( "missing CONNECT serial" );
                              continue;
                          } /* else if( toIdx < fromIdx ){
                              // likely a duplicate in standard PDB format
                              // but not necessarily, so better remove duplicates
                              // in a pass after parsing (and auto bonding)
                              continue;
                          } */
                          if (fromIdx < toIdx) {
                              ap1.index = fromIdx;
                              ap2.index = toIdx;
                          }
                          else {
                              ap1.index = toIdx;
                              ap2.index = fromIdx;
                          }
                          // interpret records where a 'toIdx' atom is given multiple times
                          // as double/triple bonds, e.g. CONECT 1529 1528 1528 is a double bond
                          if (bondIndex[toIdx] !== undefined) {
                              s.bondStore.bondOrder[bondIndex[toIdx]] += 1;
                          }
                          else {
                              var hash = ap1.index + '|' + ap2.index;
                              if (bondDict[hash] === undefined) {
                                  bondDict[hash] = true;
                                  bondIndex[toIdx] = s.bondStore.count;
                                  s.bondStore.addBond(ap1, ap2, 1); // start/assume with single bond
                              }
                          }
                      }
                  }
                  else if (recordName === 'HELIX ') {
                      startChain = line[19].trim();
                      startResi = parseInt(line.substr(21, 4));
                      startIcode = line[25].trim();
                      endChain = line[31].trim();
                      endResi = parseInt(line.substr(33, 4));
                      endIcode = line[37].trim();
                      var helixType = parseInt(line.substr(39, 1));
                      helixType = (HelixTypes[helixType] || HelixTypes[0]).charCodeAt(0);
                      helices.push([
                          startChain, startResi, startIcode,
                          endChain, endResi, endIcode,
                          helixType
                      ]);
                  }
                  else if (recordName === 'SHEET ') {
                      startChain = line[21].trim();
                      startResi = parseInt(line.substr(22, 4));
                      startIcode = line[26].trim();
                      endChain = line[32].trim();
                      endResi = parseInt(line.substr(33, 4));
                      endIcode = line[37].trim();
                      sheets.push([
                          startChain, startResi, startIcode,
                          endChain, endResi, endIcode
                      ]);
                  }
                  else if (recordName === 'HETNAM') {
                      hetnameDict[line.substr(11, 3)] = line.substr(15).trim();
                  }
                  else if (recordName === 'SEQRES') {
                      var seqresChainname = line[11].trim();
                      if (seqresChainname !== currentSeqresChainname) {
                          seqresDict[seqresChainname] = [];
                          currentSeqresChainname = seqresChainname;
                      }
                      (ref = seqresDict[seqresChainname]).push.apply(ref, line.substr(19).trim().split(reWhitespace$7));
                  }
                  else if (recordName === 'MODRES') {
                      // MODRES 2SRC PTR A  527  TYR  O-PHOSPHOTYROSINE
                      var resname$1 = line.substr(12, 3).trim();
                      var chainname$1 = line[16].trim();
                      var inscode$1 = line[22].trim();
                      var resno$1 = parseInt(line.substr(18, 4).trim());
                      var id = getModresId(resno$1, chainname$1, inscode$1);
                      modresDict[id] = { resname: resname$1, chainname: chainname$1, inscode: inscode$1, resno: resno$1 };
                  }
                  else if (recordName === 'COMPND') {
                      var comp = line.substr(10, 70).trim();
                      var keyEnd = comp.indexOf(':');
                      var key = comp.substring(0, keyEnd);
                      var value = (void 0);
                      if (entityKeyList.includes(key)) {
                          currentEntityKey = key;
                          value = comp.substring(keyEnd + 2);
                      }
                      else {
                          value = comp;
                      }
                      value = value.replace(/;$/, '');
                      if (currentEntityKey === 'MOL_ID') {
                          currentEntityData = {
                              chainList: [],
                              name: ''
                          };
                          entityDataList.push(currentEntityData);
                      }
                      else if (currentEntityKey === 'MOLECULE') {
                          if (currentEntityData.name)
                              { currentEntityData.name += ' '; }
                          currentEntityData.name += value;
                      }
                      else if (currentEntityKey === 'CHAIN') {
                          Array.prototype.push.apply(currentEntityData.chainList, value.split(/\s*,\s*/));
                      }
                  }
                  else if (line.startsWith('TER')) {
                      var cp = s.getChainProxy(s.chainStore.count - 1);
                      chainDict[cp.chainname] = cp.index;
                      chainIdx += 1;
                      chainid = chainIdx.toString();
                      newChain = true;
                  }
                  else if (recordName === 'REMARK' && line.substr(7, 3) === '350') {
                      if (line.substr(11, 12) === 'BIOMOLECULE:') {
                          var name = line.substr(23).trim();
                          if (/^(0|[1-9][0-9]*)$/.test(name))
                              { name = 'BU' + name; }
                          currentBiomol = new Assembly(name);
                          biomolDict[name] = currentBiomol;
                      }
                      else if (line.substr(13, 5) === 'BIOMT') {
                          var biomt = line.split(/\s+/);
                          var row = parseInt(line[18]) - 1;
                          if (row === 0) {
                              currentMatrix = new Matrix4();
                              currentPart.matrixList.push(currentMatrix);
                          }
                          var biomtElms = currentMatrix.elements;
                          biomtElms[4 * 0 + row] = parseFloat(biomt[4]);
                          biomtElms[4 * 1 + row] = parseFloat(biomt[5]);
                          biomtElms[4 * 2 + row] = parseFloat(biomt[6]);
                          biomtElms[4 * 3 + row] = parseFloat(biomt[7]);
                      }
                      else if (line.substr(11, 30) === 'APPLY THE FOLLOWING TO CHAINS:' ||
                          line.substr(11, 30) === '                   AND CHAINS:') {
                          if (line.substr(11, 5) === 'APPLY') {
                              currentPart = currentBiomol.addPart();
                          }
                          var chainList = line.substr(41, 30).split(',');
                          for (var j$2 = 0, jl = chainList.length; j$2 < jl; ++j$2) {
                              var c = chainList[j$2].trim();
                              if (c)
                                  { currentPart.chainList.push(c); }
                          }
                      }
                  }
                  else if (recordName === 'HEADER') {
                      s.id = line.substr(62, 4);
                  }
                  else if (recordName === 'TITLE ') {
                      s.title += (s.title ? ' ' : '') + line.substr(10, 70).trim();
                  }
                  else if (recordName === 'MODEL ') {
                      pendingStart = true;
                  }
                  else if (recordName === 'ENDMDL' || line.trim() === 'END') {
                      if (pendingStart)
                          { continue; }
                      if (asTrajectory && !doFrames) {
                          frames.push(new Float32Array(currentFrame));
                          doFrames = true;
                      }
                      modelIdx += 1;
                      pendingStart = true;
                  }
                  else if (line.substr(0, 5) === 'MTRIX') {
                      // ignore 'given' operators
                      if (line[59] === '1')
                          { continue; }
                      if (!currentBiomol || currentBiomol.name !== 'NCS') {
                          var ncsName = 'NCS';
                          currentBiomol = new Assembly(ncsName);
                          biomolDict[ncsName] = currentBiomol;
                          currentPart = currentBiomol.addPart();
                      }
                      var ncs = line.split(/\s+/);
                      var ncsRow = parseInt(line[5]) - 1;
                      if (ncsRow === 0) {
                          currentMatrix = new Matrix4();
                          currentPart.matrixList.push(currentMatrix);
                      }
                      var ncsElms = currentMatrix.elements;
                      ncsElms[4 * 0 + ncsRow] = parseFloat(ncs[2]);
                      ncsElms[4 * 1 + ncsRow] = parseFloat(ncs[3]);
                      ncsElms[4 * 2 + ncsRow] = parseFloat(ncs[4]);
                      ncsElms[4 * 3 + ncsRow] = parseFloat(ncs[5]);
                  }
                  else if (line.substr(0, 5) === 'ORIGX') {
                      if (!unitcellDict.origx) {
                          unitcellDict.origx = new Matrix4();
                      }
                      var orgix = line.split(/\s+/);
                      var origxRow = parseInt(line[5]) - 1;
                      var origxElms = unitcellDict.origx.elements;
                      origxElms[4 * 0 + origxRow] = parseFloat(orgix[1]);
                      origxElms[4 * 1 + origxRow] = parseFloat(orgix[2]);
                      origxElms[4 * 2 + origxRow] = parseFloat(orgix[3]);
                      origxElms[4 * 3 + origxRow] = parseFloat(orgix[4]);
                  }
                  else if (line.substr(0, 5) === 'SCALE') {
                      if (!unitcellDict.scale) {
                          unitcellDict.scale = new Matrix4();
                      }
                      var scale = line.split(/\s+/);
                      var scaleRow = parseInt(line[5]) - 1;
                      var scaleElms = unitcellDict.scale.elements;
                      scaleElms[4 * 0 + scaleRow] = parseFloat(scale[1]);
                      scaleElms[4 * 1 + scaleRow] = parseFloat(scale[2]);
                      scaleElms[4 * 2 + scaleRow] = parseFloat(scale[3]);
                      scaleElms[4 * 3 + scaleRow] = parseFloat(scale[4]);
                  }
                  else if (recordName === 'CRYST1') {
                      // CRYST1   55.989   55.989   55.989  90.00  90.00  90.00 P 1           1
                      //  7 - 15       Real(9.3)      a (Angstroms)
                      // 16 - 24       Real(9.3)      b (Angstroms)
                      // 25 - 33       Real(9.3)      c (Angstroms)
                      // 34 - 40       Real(7.2)      alpha         alpha (degrees).
                      // 41 - 47       Real(7.2)      beta          beta (degrees).
                      // 48 - 54       Real(7.2)      gamma         gamma (degrees).
                      // 56 - 66       LString        sGroup        Space group.
                      // 67 - 70       Integer        z             Z value.
                      var aLength = parseFloat(line.substr(6, 9));
                      var bLength = parseFloat(line.substr(15, 9));
                      var cLength = parseFloat(line.substr(24, 9));
                      var alpha = parseFloat(line.substr(33, 7));
                      var beta = parseFloat(line.substr(40, 7));
                      var gamma = parseFloat(line.substr(47, 7));
                      var sGroup = line.substr(55, 11).trim();
                      // const zValue = parseInt( line.substr( 66, 4 ) );
                      var box = new Float32Array(9);
                      box[0] = aLength;
                      box[4] = bLength;
                      box[8] = cLength;
                      boxes.push(box);
                      if (modelIdx === 0) {
                          unitcellDict.a = aLength;
                          unitcellDict.b = bLength;
                          unitcellDict.c = cLength;
                          unitcellDict.alpha = alpha;
                          unitcellDict.beta = beta;
                          unitcellDict.gamma = gamma;
                          unitcellDict.spacegroup = sGroup;
                      }
                  }
              }
          }
          this.streamer.eachChunkOfLines(function (lines /*, chunkNo, chunkCount */) {
              _parseChunkOfLines(0, lines.length, lines);
          });
          // finalize ensures resname will be defined for all rp.resname
          // (required in entity handling below)
          sb.finalize();
          //
          var en = entityDataList.length;
          if (en) {
              s.eachChain(function (cp) {
                  cp.entityIndex = en;
              });
              entityDataList.forEach(function (e, i) {
                  var chainIndexList = e.chainList.map(function (chainname) {
                      return chainDict[chainname];
                  });
                  s.entityList.push(new Entity(s, i, e.name, 'polymer', chainIndexList));
              });
              var ei = entityDataList.length;
              var rp = s.getResidueProxy();
              var residueDict = {};
              s.eachChain(function (cp) {
                  if (cp.entityIndex === en) {
                      rp.index = cp.residueOffset;
                      if (!residueDict[rp.resname]) {
                          residueDict[rp.resname] = [];
                      }
                      residueDict[rp.resname].push(cp.index);
                  }
              });
              Object.keys(residueDict).forEach(function (resname) {
                  var chainList = residueDict[resname];
                  var type = 'non-polymer';
                  var name = hetnameDict[resname] || resname;
                  if (WaterNames.includes(resname)) {
                      name = 'water';
                      type = 'water';
                  }
                  s.entityList.push(new Entity(s, ei, name, type, chainList));
                  ei += 1;
              });
          }
          //
          if (unitcellDict.a !== undefined) {
              s.unitcell = new Unitcell(unitcellDict);
          }
          else {
              s.unitcell = undefined;
          }
          if (helices.length || sheets.length) {
              assignSecondaryStructure(s, secStruct);
          }
          s.finalizeAtoms();
          if (!isLegacy)
              { calculateChainnames(s); }
          calculateBonds(s);
          s.finalizeBonds();
          if (!helices.length && !sheets.length) {
              calculateSecondaryStructure(s);
          }
          buildUnitcellAssembly(s);
          if (exports.Debug)
              { Log.timeEnd('PdbParser._parse ' + this.name); }
      };

      Object.defineProperties( PdbParser.prototype, prototypeAccessors );

      return PdbParser;
  }(StructureParser));
  ParserRegistry.add('pdb', PdbParser);
  ParserRegistry.add('pdb1', PdbParser);
  ParserRegistry.add('ent', PdbParser);

  /**
   * @file Cif Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var reWhitespace$6 = /\s+/;
  var reQuotedWhitespace = /'((?:(?!'\s).)*)'|"((?:(?!"\s).)*)"|(\S+)/g;
  var reDoubleQuote = /"/g;
  var reTrimQuotes$1 = /^['"]+|['"]+$/g;
  function trimQuotes(str) {
      if (str && str[0] === str[str.length - 1] && (str[0] === "'" || str[0] === '"')) {
          return str.substring(1, str.length - 1);
      }
      else {
          return str;
      }
  }
  function ensureArray(dict, field) {
      if (!Array.isArray(dict[field])) {
          Object.keys(dict).forEach(function (key) {
              dict[key] = [dict[key]];
          });
      }
  }
  function hasValue(d) {
      return d !== '?';
  }
  function cifDefaults(value, defaultValue) {
      return hasValue(value) ? value : defaultValue;
  }
  function getBondOrder(valueOrder) {
      switch (valueOrder.toLowerCase()) {
          case '?': // assume single bond
          case 'sing':
              return 1;
          case 'doub':
              return 2;
          case 'trip':
              return 3;
          case 'quad':
              return 4;
      }
      return 0;
  }
  function parseChemComp(cif, structure, structureBuilder) {
      var atomStore = structure.atomStore;
      var atomMap = structure.atomMap;
      var i, n;
      var cc = cif.chem_comp;
      var cca = cif.chem_comp_atom;
      var ccb = cif.chem_comp_bond;
      if (cc) {
          if (cc.name) {
              structure.title = cc.name.trim().replace(reTrimQuotes$1, '');
          }
          if (cc.id) {
              structure.id = cc.id.trim().replace(reTrimQuotes$1, '');
          }
      }
      var atomnameDict = {};
      if (cca) {
          ensureArray(cca, 'comp_id');
          var atomname, element, resname, resno;
          n = cca.comp_id.length;
          for (i = 0; i < n; ++i) {
              atomStore.growIfFull();
              atomname = cca.atom_id[i].replace(reDoubleQuote, '');
              element = cca.type_symbol[i];
              atomnameDict[atomname] = i;
              atomStore.atomTypeId[i] = atomMap.add(atomname, element);
              atomStore.x[i] = cca.model_Cartn_x[i];
              atomStore.y[i] = cca.model_Cartn_y[i];
              atomStore.z[i] = cca.model_Cartn_z[i];
              atomStore.serial[i] = i;
              resname = cca.pdbx_component_comp_id[i];
              resno = cca.pdbx_residue_numbering ? cca.pdbx_residue_numbering[i] : 1;
              structureBuilder.addAtom(0, '', '', resname, resno, true);
          }
          for (i = 0; i < n; ++i) {
              var j = i + n;
              atomStore.growIfFull();
              atomname = cca.atom_id[i].replace(reDoubleQuote, '');
              element = cca.type_symbol[i];
              atomStore.atomTypeId[j] = atomMap.add(atomname, element);
              atomStore.x[j] = cca.pdbx_model_Cartn_x_ideal[i];
              atomStore.y[j] = cca.pdbx_model_Cartn_y_ideal[i];
              atomStore.z[j] = cca.pdbx_model_Cartn_z_ideal[i];
              atomStore.serial[j] = j;
              resname = cca.pdbx_component_comp_id[i];
              resno = cca.pdbx_residue_numbering ? cca.pdbx_residue_numbering[i] : 1;
              structureBuilder.addAtom(1, '', '', resname, resno, true);
          }
      }
      if (cca && ccb) {
          ensureArray(ccb, 'comp_id');
          var atomname1, atomname2, bondOrder;
          n = ccb.comp_id.length;
          var na = cca.comp_id.length;
          var ap1 = structure.getAtomProxy();
          var ap2 = structure.getAtomProxy();
          for (i = 0; i < n; ++i) {
              atomname1 = ccb.atom_id_1[i].replace(reDoubleQuote, '');
              atomname2 = ccb.atom_id_2[i].replace(reDoubleQuote, '');
              bondOrder = getBondOrder(ccb.value_order[i]);
              ap1.index = atomnameDict[atomname1];
              ap2.index = atomnameDict[atomname2];
              structure.bondStore.growIfFull();
              structure.bondStore.addBond(ap1, ap2, bondOrder);
              ap1.index += na;
              ap2.index += na;
              structure.bondStore.growIfFull();
              structure.bondStore.addBond(ap1, ap2, bondOrder);
          }
      }
  }
  function parseCore(cif, structure, structureBuilder) {
      var atomStore = structure.atomStore;
      var atomMap = structure.atomMap;
      if (cif.data) {
          structure.id = cif.data;
          structure.name = cif.data;
      }
      structure.unitcell = new Unitcell({
          a: parseFloat(cif.cell_length_a),
          b: parseFloat(cif.cell_length_b),
          c: parseFloat(cif.cell_length_c),
          alpha: parseFloat(cif.cell_angle_alpha),
          beta: parseFloat(cif.cell_angle_beta),
          gamma: parseFloat(cif.cell_angle_gamma),
          spacegroup: trimQuotes(cif['symmetry_space_group_name_H-M'])
      });
      var v = new Vector3();
      var c = new Vector3();
      var n = cif.atom_site_type_symbol.length;
      for (var i = 0; i < n; ++i) {
          atomStore.growIfFull();
          var atomname = cif.atom_site_label[i];
          var element = cif.atom_site_type_symbol[i];
          atomStore.atomTypeId[i] = atomMap.add(atomname, element);
          v.set(cif.atom_site_fract_x[i], cif.atom_site_fract_y[i], cif.atom_site_fract_z[i]);
          v.applyMatrix4(structure.unitcell.fracToCart);
          c.add(v);
          atomStore.x[i] = v.x;
          atomStore.y[i] = v.y;
          atomStore.z[i] = v.z;
          if (cif.atom_site_occupancy) {
              atomStore.occupancy[i] = parseFloat(cif.atom_site_occupancy[i]);
          }
          atomStore.serial[i] = i;
          structureBuilder.addAtom(0, '', '', 'HET', 1, true);
      }
      c.divideScalar(n);
      structure.center = c;
      buildUnitcellAssembly(structure);
      var v2 = new Vector3();
      var v3 = new Vector3();
      var ml = structure.biomolDict.SUPERCELL.partList[0].matrixList;
      var k = n;
      function covalent(idx) {
          return atomMap.get(atomStore.atomTypeId[idx]).covalent;
      }
      var identityMatrix = new Matrix4();
      var loop = function ( i ) {
          var covalentI = covalent(i);
          v.set(atomStore.x[i], atomStore.y[i], atomStore.z[i]);
          ml.forEach(function (m) {
              if (identityMatrix.equals(m))
                  { return; }
              v2.copy(v);
              v2.applyMatrix4(m);
              for (var j = 0; j < n; ++j) {
                  v3.set(atomStore.x[j], atomStore.y[j], atomStore.z[j]);
                  var distSquared = v2.distanceToSquared(v3);
                  var d = covalent(j) + covalentI;
                  var d1 = d + 0.3;
                  var d2 = d - 0.5;
                  if (distSquared < (d1 * d1) && distSquared > (d2 * d2)) {
                      atomStore.growIfFull();
                      atomStore.atomTypeId[k] = atomStore.atomTypeId[i];
                      atomStore.x[k] = v2.x;
                      atomStore.y[k] = v2.y;
                      atomStore.z[k] = v2.z;
                      atomStore.occupancy[k] = atomStore.occupancy[i];
                      atomStore.serial[k] = k;
                      atomStore.altloc[k] = 'A'.charCodeAt(0);
                      structureBuilder.addAtom(0, '', '', 'HET', 1, true);
                      k += 1;
                      return;
                  }
              }
          });
      };

      for (var i$1 = 0; i$1 < n; ++i$1) loop( i$1 );
  }
  function processSecondaryStructure(cif, structure, asymIdDict) {
      var helices = [];
      var sheets = [];
      var i, il, begIcode, endIcode;
      // get helices
      var sc = cif.struct_conf;
      if (sc) {
          ensureArray(sc, 'id');
          for (i = 0, il = sc.beg_auth_seq_id.length; i < il; ++i) {
              var helixType = parseInt(sc.pdbx_PDB_helix_class[i]);
              if (!Number.isNaN(helixType)) {
                  begIcode = sc.pdbx_beg_PDB_ins_code[i];
                  endIcode = sc.pdbx_end_PDB_ins_code[i];
                  helices.push([
                      asymIdDict[sc.beg_label_asym_id[i]],
                      parseInt(sc.beg_auth_seq_id[i]),
                      cifDefaults(begIcode, ''),
                      asymIdDict[sc.end_label_asym_id[i]],
                      parseInt(sc.end_auth_seq_id[i]),
                      cifDefaults(endIcode, ''),
                      (HelixTypes[helixType] || HelixTypes[0]).charCodeAt(0)
                  ]);
              }
          }
      }
      // get sheets
      var ssr = cif.struct_sheet_range;
      if (ssr) {
          ensureArray(ssr, 'id');
          for (i = 0, il = ssr.beg_auth_seq_id.length; i < il; ++i) {
              begIcode = ssr.pdbx_beg_PDB_ins_code[i];
              endIcode = ssr.pdbx_end_PDB_ins_code[i];
              sheets.push([
                  asymIdDict[ssr.beg_label_asym_id[i]],
                  parseInt(ssr.beg_auth_seq_id[i]),
                  cifDefaults(begIcode, ''),
                  asymIdDict[ssr.end_label_asym_id[i]],
                  parseInt(ssr.end_auth_seq_id[i]),
                  cifDefaults(endIcode, '')
              ]);
          }
      }
      if (sc || ssr) {
          return {
              helices: helices,
              sheets: sheets
          };
      }
      else {
          return false;
      }
  }
  function processSymmetry(cif, structure, asymIdDict) {
      // biomol & ncs processing
      var operDict = {};
      var biomolDict = structure.biomolDict;
      if (cif.pdbx_struct_oper_list) {
          var biomolOp = cif.pdbx_struct_oper_list;
          ensureArray(biomolOp, 'id');
          biomolOp.id.forEach(function (id, i) {
              var m = new Matrix4();
              var elms = m.elements;
              elms[0] = parseFloat(biomolOp['matrix[1][1]'][i]);
              elms[1] = parseFloat(biomolOp['matrix[1][2]'][i]);
              elms[2] = parseFloat(biomolOp['matrix[1][3]'][i]);
              elms[4] = parseFloat(biomolOp['matrix[2][1]'][i]);
              elms[5] = parseFloat(biomolOp['matrix[2][2]'][i]);
              elms[6] = parseFloat(biomolOp['matrix[2][3]'][i]);
              elms[8] = parseFloat(biomolOp['matrix[3][1]'][i]);
              elms[9] = parseFloat(biomolOp['matrix[3][2]'][i]);
              elms[10] = parseFloat(biomolOp['matrix[3][3]'][i]);
              elms[3] = parseFloat(biomolOp['vector[1]'][i]);
              elms[7] = parseFloat(biomolOp['vector[2]'][i]);
              elms[11] = parseFloat(biomolOp['vector[3]'][i]);
              m.transpose();
              operDict[id] = m;
          });
      }
      if (cif.pdbx_struct_assembly_gen) {
          var gen = cif.pdbx_struct_assembly_gen;
          ensureArray(gen, 'assembly_id');
          var getMatrixDict = function (expr) {
              var matDict = {};
              var l = expr.replace(/[()']/g, '').split(',');
              l.forEach(function (e) {
                  if (e.includes('-')) {
                      var es = e.split('-');
                      var j = parseInt(es[0]);
                      var m = parseInt(es[1]);
                      for (; j <= m; ++j) {
                          matDict[j] = operDict[j];
                      }
                  }
                  else {
                      matDict[e] = operDict[e];
                  }
              });
              return matDict;
          };
          gen.assembly_id.forEach(function (id, i) {
              var md = {};
              var oe = gen.oper_expression[i].replace(/['"]\(|['"]/g, '');
              if (oe.includes(')(') || oe.indexOf('(') > 0) {
                  oe = oe.split('(');
                  var md1 = getMatrixDict(oe[0]);
                  var md2 = getMatrixDict(oe[1]);
                  Object.keys(md1).forEach(function (k1) {
                      Object.keys(md2).forEach(function (k2) {
                          var mat = new Matrix4();
                          mat.multiplyMatrices(md1[k1], md2[k2]);
                          md[k1 + 'x' + k2] = mat;
                      });
                  });
              }
              else {
                  md = getMatrixDict(oe);
              }
              var matrixList = [];
              for (var k in md) {
                  matrixList.push(md[k]);
              }
              var name = id;
              if (/^(0|[1-9][0-9]*)$/.test(name))
                  { name = 'BU' + name; }
              var chainList = gen.asym_id_list[i].split(',');
              for (var j = 0, jl = chainList.length; j < jl; ++j) {
                  chainList[j] = asymIdDict[chainList[j]];
              }
              if (biomolDict[name] === undefined) {
                  biomolDict[name] = new Assembly(name);
              }
              biomolDict[name].addPart(matrixList, chainList);
          });
      }
      // non-crystallographic symmetry operations
      if (cif.struct_ncs_oper) {
          var ncsOp = cif.struct_ncs_oper;
          ensureArray(ncsOp, 'id');
          var ncsName = 'NCS';
          biomolDict[ncsName] = new Assembly(ncsName);
          var ncsPart = biomolDict[ncsName].addPart();
          ncsOp.id.forEach(function (id, i) {
              // ignore 'given' operators
              if (ncsOp.code[i] === 'given')
                  { return; }
              var m = new Matrix4();
              var elms = m.elements;
              elms[0] = parseFloat(ncsOp['matrix[1][1]'][i]);
              elms[1] = parseFloat(ncsOp['matrix[1][2]'][i]);
              elms[2] = parseFloat(ncsOp['matrix[1][3]'][i]);
              elms[4] = parseFloat(ncsOp['matrix[2][1]'][i]);
              elms[5] = parseFloat(ncsOp['matrix[2][2]'][i]);
              elms[6] = parseFloat(ncsOp['matrix[2][3]'][i]);
              elms[8] = parseFloat(ncsOp['matrix[3][1]'][i]);
              elms[9] = parseFloat(ncsOp['matrix[3][2]'][i]);
              elms[10] = parseFloat(ncsOp['matrix[3][3]'][i]);
              elms[3] = parseFloat(ncsOp['vector[1]'][i]);
              elms[7] = parseFloat(ncsOp['vector[2]'][i]);
              elms[11] = parseFloat(ncsOp['vector[3]'][i]);
              m.transpose();
              ncsPart.matrixList.push(m);
          });
          if (ncsPart.matrixList.length === 0) {
              delete biomolDict[ncsName];
          }
      }
      // cell & symmetry
      var unitcellDict = {};
      if (cif.cell) {
          var cell = cif.cell;
          var a = parseFloat(cell.length_a);
          var b = parseFloat(cell.length_b);
          var c = parseFloat(cell.length_c);
          var box = new Float32Array(9);
          box[0] = a;
          box[4] = b;
          box[8] = c;
          structure.boxes.push(box);
          unitcellDict.a = a;
          unitcellDict.b = b;
          unitcellDict.c = c;
          unitcellDict.alpha = parseFloat(cell.angle_alpha);
          unitcellDict.beta = parseFloat(cell.angle_beta);
          unitcellDict.gamma = parseFloat(cell.angle_gamma);
      }
      if (cif.symmetry) {
          unitcellDict.spacegroup = trimQuotes(cif.symmetry['space_group_name_H-M']);
      }
      // origx
      var origx = new Matrix4();
      if (cif.database_PDB_matrix) {
          var origxMat = cif.database_PDB_matrix;
          var origxElms = origx.elements;
          origxElms[0] = parseFloat(origxMat['origx[1][1]']);
          origxElms[1] = parseFloat(origxMat['origx[1][2]']);
          origxElms[2] = parseFloat(origxMat['origx[1][3]']);
          origxElms[4] = parseFloat(origxMat['origx[2][1]']);
          origxElms[5] = parseFloat(origxMat['origx[2][2]']);
          origxElms[6] = parseFloat(origxMat['origx[2][3]']);
          origxElms[8] = parseFloat(origxMat['origx[3][1]']);
          origxElms[9] = parseFloat(origxMat['origx[3][2]']);
          origxElms[10] = parseFloat(origxMat['origx[3][3]']);
          origxElms[3] = parseFloat(origxMat['origx_vector[1]']);
          origxElms[7] = parseFloat(origxMat['origx_vector[2]']);
          origxElms[11] = parseFloat(origxMat['origx_vector[3]']);
          origx.transpose();
          unitcellDict.origx = origx;
      }
      // scale
      var scale = new Matrix4();
      if (cif.atom_sites) {
          var scaleMat = cif.atom_sites;
          var scaleElms = scale.elements;
          scaleElms[0] = parseFloat(scaleMat['fract_transf_matrix[1][1]']);
          scaleElms[1] = parseFloat(scaleMat['fract_transf_matrix[1][2]']);
          scaleElms[2] = parseFloat(scaleMat['fract_transf_matrix[1][3]']);
          scaleElms[4] = parseFloat(scaleMat['fract_transf_matrix[2][1]']);
          scaleElms[5] = parseFloat(scaleMat['fract_transf_matrix[2][2]']);
          scaleElms[6] = parseFloat(scaleMat['fract_transf_matrix[2][3]']);
          scaleElms[8] = parseFloat(scaleMat['fract_transf_matrix[3][1]']);
          scaleElms[9] = parseFloat(scaleMat['fract_transf_matrix[3][2]']);
          scaleElms[10] = parseFloat(scaleMat['fract_transf_matrix[3][3]']);
          scaleElms[3] = parseFloat(scaleMat['fract_transf_vector[1]']);
          scaleElms[7] = parseFloat(scaleMat['fract_transf_vector[2]']);
          scaleElms[11] = parseFloat(scaleMat['fract_transf_vector[3]']);
          scale.transpose();
          unitcellDict.scale = scale;
      }
      if (unitcellDict.a !== undefined) {
          structure.unitcell = new Unitcell(unitcellDict);
      }
      else {
          structure.unitcell = undefined;
      }
  }
  function processConnections(cif, structure, asymIdDict) {
      // add connections
      var sc = cif.struct_conn;
      if (sc) {
          ensureArray(sc, 'id');
          var reDoubleQuote = /"/g;
          var ap1 = structure.getAtomProxy();
          var ap2 = structure.getAtomProxy();
          var atomIndicesCache = {};
          for (var i = 0, il = sc.id.length; i < il; ++i) {
              // ignore:
              // hydrog - hydrogen bond
              // mismat - mismatched base pairs
              // saltbr - ionic interaction
              var connTypeId = sc.conn_type_id[i];
              if (connTypeId === 'hydrog' ||
                  connTypeId === 'mismat' ||
                  connTypeId === 'saltbr')
                  { continue; }
              // ignore bonds between symmetry mates
              if (sc.ptnr1_symmetry[i] !== '1_555' ||
                  sc.ptnr2_symmetry[i] !== '1_555')
                  { continue; }
              // process:
              // covale - covalent bond
              // covale_base -
              //      covalent modification of a nucleotide base
              // covale_phosphate -
              //      covalent modification of a nucleotide phosphate
              // covale_sugar -
              //      covalent modification of a nucleotide sugar
              // disulf - disulfide bridge
              // metalc - metal coordination
              // modres - covalent residue modification
              var inscode1 = sc.pdbx_ptnr1_PDB_ins_code[i];
              var altloc1 = sc.pdbx_ptnr1_label_alt_id[i];
              var sele1 = (sc.ptnr1_auth_seq_id[i] +
                  (hasValue(inscode1) ? ('^' + inscode1) : '') +
                  ':' + asymIdDict[sc.ptnr1_label_asym_id[i]] +
                  '.' + sc.ptnr1_label_atom_id[i].replace(reDoubleQuote, '') +
                  (hasValue(altloc1) ? ('%' + altloc1) : ''));
              var atomIndices1 = atomIndicesCache[sele1];
              if (!atomIndices1) {
                  var selection1 = new Selection(sele1);
                  if (selection1.selection.error) {
                      if (exports.Debug)
                          { Log.warn('invalid selection for connection', sele1); }
                      continue;
                  }
                  atomIndices1 = structure.getAtomIndices(selection1);
                  atomIndicesCache[sele1] = atomIndices1;
              }
              var inscode2 = sc.pdbx_ptnr2_PDB_ins_code[i];
              var altloc2 = sc.pdbx_ptnr2_label_alt_id[i];
              var sele2 = (sc.ptnr2_auth_seq_id[i] +
                  (hasValue(inscode2) ? ('^' + inscode2) : '') +
                  ':' + asymIdDict[sc.ptnr2_label_asym_id[i]] +
                  '.' + sc.ptnr2_label_atom_id[i].replace(reDoubleQuote, '') +
                  (hasValue(altloc2) ? ('%' + altloc2) : ''));
              var atomIndices2 = atomIndicesCache[sele2];
              if (!atomIndices2) {
                  var selection2 = new Selection(sele2);
                  if (selection2.selection.error) {
                      if (exports.Debug)
                          { Log.warn('invalid selection for connection', sele2); }
                      continue;
                  }
                  atomIndices2 = structure.getAtomIndices(selection2);
                  atomIndicesCache[sele2] = atomIndices2;
              }
              // cases with more than one atom per selection
              // - #altloc1 to #altloc2
              // - #model to #model
              // - #altloc1 * #model to #altloc2 * #model
              var k = atomIndices1.length;
              var l = atomIndices2.length;
              if (k > l) {
                  var tmpA = k;
                  k = l;
                  l = tmpA;
                  var tmpB = atomIndices1;
                  atomIndices1 = atomIndices2;
                  atomIndices2 = tmpB;
              }
              // console.log( k, l );
              if (k === 0 || l === 0) {
                  if (exports.Debug)
                      { Log.warn('no atoms found for', sele1, sele2); }
                  continue;
              }
              for (var j = 0; j < l; ++j) {
                  ap1.index = atomIndices1[j % k];
                  ap2.index = atomIndices2[j];
                  if (ap1 && ap2) {
                      structure.bondStore.addBond(ap1, ap2, getBondOrder(sc.pdbx_value_order[i]));
                  }
                  else {
                      Log.log('atoms for connection not found');
                  }
              }
          }
      }
  }
  function processEntities(cif, structure, chainIndexDict) {
      if (cif.entity) {
          ensureArray(cif.entity, 'id');
          var e = cif.entity;
          var n = e.id.length;
          for (var i = 0; i < n; ++i) {
              var description = e.pdbx_description[i];
              var type = e.type[i];
              var chainIndexList = Array.from(chainIndexDict[e.id[i]]);
              structure.entityList[i] = new Entity(structure, i, description, type, chainIndexList);
          }
      }
  }
  //
  var CifParser = /*@__PURE__*/(function (StructureParser) {
      function CifParser () {
          StructureParser.apply(this, arguments);
      }

      if ( StructureParser ) CifParser.__proto__ = StructureParser;
      CifParser.prototype = Object.create( StructureParser && StructureParser.prototype );
      CifParser.prototype.constructor = CifParser;

      var prototypeAccessors = { type: { configurable: true } };

      prototypeAccessors.type.get = function () { return 'cif'; };
      CifParser.prototype._parse = function _parse () {
          // http://mmcif.wwpdb.org/
          Log.time('CifParser._parse ' + this.name);
          var s = this.structure;
          var sb = this.structureBuilder;
          var firstModelOnly = this.firstModelOnly;
          var asTrajectory = this.asTrajectory;
          var cAlphaOnly = this.cAlphaOnly;
          var frames = s.frames;
          var currentFrame, currentCoord;
          var rawline, line;
          //
          var cif = {};
          var asymIdDict = {};
          var chainIndexDict = {};
          var pendingString = false;
          var currentString = null;
          var pendingValue = false;
          var pendingLoop = false;
          var pendingName = false;
          var loopPointers = [];
          var currentLoopIndex = null;
          var currentCategory = null;
          var currentName = null;
          var first = null;
          var pointerNames = [];
          var authAsymId, authSeqId, labelSeqId, labelAtomId, labelCompId, labelAsymId, labelEntityId, labelAltId, groupPDB, id, typeSymbol, pdbxPDBmodelNum, pdbxPDBinsCode, CartnX, CartnY, CartnZ, bIsoOrEquiv, occupancy;
          //
          var atomMap = s.atomMap;
          var atomStore = s.atomStore;
          atomStore.resize(this.streamer.data.length / 100);
          var idx = 0;
          var modelIdx = 0;
          var modelNum;
          function _parseChunkOfLines(_i, _n, lines) {
              for (var i = _i; i < _n; ++i) {
                  rawline = lines[i];
                  line = rawline.trim();
                  if ((!line && !pendingString && !pendingLoop) || line[0] === '#') {
                      // Log.log( "NEW BLOCK" );
                      pendingString = false;
                      pendingLoop = false;
                      pendingValue = false;
                      loopPointers.length = 0;
                      currentLoopIndex = null;
                      currentCategory = null;
                      currentName = null;
                      first = null;
                      pointerNames.length = 0;
                  }
                  else if (line.substring(0, 5) === 'data_') {
                      cif.data = line.substring(5).trim();
                      // Log.log( "DATA", data );
                  }
                  else if (line[0] === ';') {
                      if (pendingString) {
                          // Log.log( "STRING END", currentString );
                          if (pendingLoop) {
                              if (currentLoopIndex === loopPointers.length) {
                                  currentLoopIndex = 0;
                              }
                              loopPointers[currentLoopIndex].push(currentString);
                              currentLoopIndex += 1;
                          }
                          else {
                              if (currentName === false) {
                                  cif[currentCategory] = currentString;
                              }
                              else {
                                  cif[currentCategory][currentName] = currentString; //TODO currentname can equals null
                              }
                          }
                          pendingString = false;
                          currentString = null;
                      }
                      else {
                          // Log.log( "STRING START" );
                          pendingString = true;
                          currentString = line.substring(1);
                      }
                  }
                  else if (line === 'loop_') {
                      // Log.log( "LOOP START" );
                      pendingLoop = true;
                      pendingName = true;
                      loopPointers.length = 0;
                      pointerNames.length = 0;
                      currentLoopIndex = 0;
                  }
                  else if (line[0] === '_') {
                      var keyParts, category, name;
                      if (pendingLoop && !pendingName) {
                          pendingLoop = false;
                      }
                      if (pendingLoop) {
                          // Log.log( "LOOP KEY", line );
                          keyParts = line.split('.');
                          category = keyParts[0].substring(1);
                          name = keyParts[1];
                          if (keyParts.length === 1) {
                              name = false;
                              if (!cif[category])
                                  { cif[category] = []; }
                              loopPointers.push(cif[category]);
                          }
                          else {
                              if (!cif[category])
                                  { cif[category] = {}; }
                              if (cif[category][name]) {
                                  if (exports.Debug)
                                      { Log.warn(category, name, 'already exists'); }
                              }
                              else {
                                  cif[category][name] = [];
                                  loopPointers.push(cif[category][name]);
                                  pointerNames.push(name);
                              }
                          }
                          currentCategory = category;
                          currentName = name;
                          first = true;
                      }
                      else {
                          var keyValuePair = line.match(reQuotedWhitespace);
                          var key = keyValuePair[0];
                          var value = keyValuePair[1];
                          keyParts = key.split('.');
                          category = keyParts[0].substring(1);
                          name = keyParts[1];
                          if (keyParts.length === 1) {
                              name = false;
                              cif[category] = value;
                          }
                          else {
                              if (!cif[category])
                                  { cif[category] = {}; }
                              if (cif[category][name]) {
                                  if (exports.Debug)
                                      { Log.warn(category, name, 'already exists'); }
                              }
                              else {
                                  cif[category][name] = value;
                              }
                          }
                          if (!value)
                              { pendingValue = true; }
                          currentCategory = category;
                          currentName = name;
                      }
                  }
                  else {
                      if (pendingString) {
                          // Log.log( "STRING VALUE", line );
                          currentString += rawline;
                      }
                      else if (pendingLoop) {
                          // Log.log( "LOOP VALUE", line );
                          if (!line) {
                              continue;
                          }
                          else if (currentCategory === 'atom_site') {
                              var ls = line.split(reWhitespace$6);
                              if (first) {
                                  authAsymId = pointerNames.indexOf('auth_asym_id');
                                  authSeqId = pointerNames.indexOf('auth_seq_id');
                                  labelSeqId = pointerNames.indexOf('label_seq_id');
                                  labelAtomId = pointerNames.indexOf('label_atom_id');
                                  labelCompId = pointerNames.indexOf('label_comp_id');
                                  labelAsymId = pointerNames.indexOf('label_asym_id');
                                  labelEntityId = pointerNames.indexOf('label_entity_id');
                                  labelAltId = pointerNames.indexOf('label_alt_id');
                                  CartnX = pointerNames.indexOf('Cartn_x');
                                  CartnY = pointerNames.indexOf('Cartn_y');
                                  CartnZ = pointerNames.indexOf('Cartn_z');
                                  id = pointerNames.indexOf('id');
                                  typeSymbol = pointerNames.indexOf('type_symbol');
                                  groupPDB = pointerNames.indexOf('group_PDB');
                                  bIsoOrEquiv = pointerNames.indexOf('B_iso_or_equiv');
                                  pdbxPDBmodelNum = pointerNames.indexOf('pdbx_PDB_model_num');
                                  pdbxPDBinsCode = pointerNames.indexOf('pdbx_PDB_ins_code');
                                  occupancy = pointerNames.indexOf('occupancy');
                                  first = false;
                                  modelNum = parseInt(ls[pdbxPDBmodelNum]);
                                  if (asTrajectory) {
                                      currentFrame = [];
                                      currentCoord = 0;
                                  }
                              }
                              //
                              var _modelNum = parseInt(ls[pdbxPDBmodelNum]);
                              if (modelNum !== _modelNum) {
                                  if (asTrajectory) {
                                      if (modelIdx === 0) {
                                          frames.push(new Float32Array(currentFrame));
                                      }
                                      currentFrame = new Float32Array(atomStore.count * 3);
                                      frames.push(currentFrame);
                                      currentCoord = 0;
                                  }
                                  modelIdx += 1;
                              }
                              modelNum = _modelNum;
                              if (firstModelOnly && modelIdx > 0)
                                  { continue; }
                              //
                              var atomname = ls[labelAtomId].replace(reDoubleQuote, '');
                              if (cAlphaOnly && atomname !== 'CA')
                                  { continue; }
                              var x = parseFloat(ls[CartnX]);
                              var y = parseFloat(ls[CartnY]);
                              var z = parseFloat(ls[CartnZ]);
                              if (asTrajectory) {
                                  var frameOffset = currentCoord * 3;
                                  currentFrame[frameOffset + 0] = x;
                                  currentFrame[frameOffset + 1] = y;
                                  currentFrame[frameOffset + 2] = z;
                                  currentCoord += 1;
                                  if (modelIdx > 0)
                                      { continue; }
                              }
                              //
                              var resname = ls[labelCompId];
                              var resno = parseInt(ls[authSeqId !== -1 ? authSeqId : labelSeqId]);
                              var inscode = ls[pdbxPDBinsCode];
                              inscode = (inscode === '?') ? '' : inscode;
                              var chainname = ls[authAsymId];
                              var chainid = ls[labelAsymId];
                              var hetero = (ls[groupPDB][0] === 'H') ? 1 : 0;
                              //
                              var element = ls[typeSymbol];
                              var bfactor = parseFloat(ls[bIsoOrEquiv]);
                              var occ = parseFloat(ls[occupancy]);
                              var altloc = ls[labelAltId];
                              altloc = (altloc === '.') ? '' : altloc;
                              atomStore.growIfFull();
                              atomStore.atomTypeId[idx] = atomMap.add(atomname, element);
                              atomStore.x[idx] = x;
                              atomStore.y[idx] = y;
                              atomStore.z[idx] = z;
                              atomStore.serial[idx] = parseInt(ls[id]);
                              atomStore.bfactor[idx] = isNaN(bfactor) ? 0 : bfactor;
                              atomStore.occupancy[idx] = isNaN(occ) ? 0 : occ;
                              atomStore.altloc[idx] = altloc.charCodeAt(0);
                              sb.addAtom(modelIdx, chainname, chainid, resname, resno, hetero, undefined, inscode);
                              if (exports.Debug) {
                                  // check if one-to-many (chainname-asymId) relationship is
                                  // actually a many-to-many mapping
                                  var assignedChainname = asymIdDict[chainid];
                                  if (assignedChainname !== undefined && assignedChainname !== chainname) {
                                      if (exports.Debug)
                                          { Log.warn(assignedChainname, chainname); }
                                  }
                              }
                              // chainname mapping: label_asym_id -> auth_asym_id
                              asymIdDict[chainid] = chainname;
                              // entity mapping: chainIndex -> label_entity_id
                              var entityId = ls[labelEntityId];
                              if (!chainIndexDict[entityId]) {
                                  chainIndexDict[entityId] = new Set();
                              }
                              chainIndexDict[entityId].add(s.chainStore.count - 1);
                              idx += 1;
                          }
                          else {
                              var ls$1 = line.match(reQuotedWhitespace);
                              var nn = ls$1.length;
                              if (currentLoopIndex === loopPointers.length) {
                                  currentLoopIndex = 0;
                              } /* else if( currentLoopIndex + nn > loopPointers.length ){
                                Log.warn( "cif parsing error, wrong number of loop data entries", nn, loopPointers.length );
                              } */
                              for (var j = 0; j < nn; ++j) {
                                  loopPointers[currentLoopIndex + j].push(ls$1[j]);
                              }
                              currentLoopIndex += nn;
                          }
                          pendingName = false;
                      }
                      else if (line[0] === "'" && line[line.length - 1] === "'") {
                          // Log.log( "NEWLINE STRING", line );
                          var str = line.substring(1, line.length - 1);
                          if (currentName === false) {
                              cif[currentCategory] = str;
                          }
                          else {
                              cif[currentCategory][currentName] = str;
                          }
                      }
                      else if (pendingValue) {
                          // Log.log( "NEWLINE VALUE", line );
                          if (currentName === false) {
                              cif[currentCategory] = line;
                          }
                          else {
                              cif[currentCategory][currentName] = line;
                          }
                      }
                      else {
                          if (exports.Debug)
                              { Log.log('CifParser._parse: unknown state', line); }
                      }
                  }
              }
          }
          this.streamer.eachChunkOfLines(function (lines /*, chunkNo, chunkCount */) {
              _parseChunkOfLines(0, lines.length, lines);
          });
          if (cif.chem_comp && cif.chem_comp_atom) {
              parseChemComp(cif, s, sb);
              sb.finalize();
              s.finalizeAtoms();
              s.finalizeBonds();
              assignResidueTypeBonds(s);
          }
          else if (cif.atom_site_type_symbol && cif.atom_site_label && cif.atom_site_fract_x) {
              parseCore(cif, s, sb);
              sb.finalize();
              s.finalizeAtoms();
              calculateBonds(s);
              s.finalizeBonds();
              // assignResidueTypeBonds( s );
          }
          else {
              var secStruct = processSecondaryStructure(cif, s, asymIdDict);
              processSymmetry(cif, s, asymIdDict);
              processConnections(cif, s, asymIdDict);
              processEntities(cif, s, chainIndexDict);
              if (cif.struct && cif.struct.title) {
                  s.title = cif.struct.title.trim().replace(reTrimQuotes$1, '');
              }
              if (cif.entry && cif.entry.id) {
                  s.id = cif.entry.id.trim().replace(reTrimQuotes$1, '');
              }
              // structure header (mimicking biojava)
              if (cif.pdbx_audit_revision_history) {
                  if (cif.pdbx_audit_revision_history.revision_date) {
                      ensureArray(cif.pdbx_audit_revision_history, 'revision_date');
                      var dates = cif.pdbx_audit_revision_history.revision_date.filter(hasValue);
                      if (dates.length) {
                          s.header.releaseDate = dates[0];
                      }
                  }
                  if (cif.pdbx_database_status.recvd_initial_deposition_date) {
                      ensureArray(cif.pdbx_database_status, 'recvd_initial_deposition_date');
                      var depDates = cif.pdbx_database_status.recvd_initial_deposition_date.filter(hasValue);
                      if (depDates.length) {
                          s.header.depositionDate = depDates[0];
                      }
                  }
              }
              else if (cif.database_PDB_rev) {
                  if (cif.database_PDB_rev.date) {
                      ensureArray(cif.database_PDB_rev, 'date');
                      var dates$1 = cif.database_PDB_rev.date.filter(hasValue);
                      if (dates$1.length) {
                          s.header.releaseDate = dates$1[0];
                      }
                  }
                  if (cif.database_PDB_rev.date_original) {
                      ensureArray(cif.database_PDB_rev, 'date_original');
                      var depDates$1 = cif.database_PDB_rev.date_original.filter(hasValue);
                      if (depDates$1.length) {
                          s.header.depositionDate = depDates$1[0];
                      }
                  }
              }
              if (cif.reflns && cif.reflns.d_resolution_high) {
                  if (hasValue(cif.reflns.d_resolution_high)) {
                      s.header.resolution = parseFloat(cif.reflns.d_resolution_high);
                  }
              }
              else if (cif.refine && cif.refine.ls_d_res_high) {
                  if (hasValue(cif.refine.ls_d_res_high)) {
                      s.header.resolution = parseFloat(cif.refine.ls_d_res_high);
                  }
              }
              if (cif.refine && cif.refine.ls_R_factor_R_free) {
                  if (hasValue(cif.refine.ls_R_factor_R_free)) {
                      s.header.rFree = parseFloat(cif.refine.ls_R_factor_R_free);
                  }
              }
              if (cif.refine && cif.refine.ls_R_factor_R_work) {
                  if (hasValue(cif.refine.ls_R_factor_R_work)) {
                      s.header.rWork = parseFloat(cif.refine.ls_R_factor_R_work);
                  }
              }
              if (cif.exptl && cif.exptl.method) {
                  ensureArray(cif.exptl, 'method');
                  s.header.experimentalMethods = cif.exptl.method.map(function (m) {
                      return m.replace(reTrimQuotes$1, '');
                  });
              }
              sb.finalize();
              s.finalizeAtoms();
              calculateBonds(s);
              s.finalizeBonds();
              if (!secStruct) {
                  calculateSecondaryStructure(s);
              }
              else {
                  assignSecondaryStructure(s, secStruct);
              }
              buildUnitcellAssembly(s);
              s.extraData.cif = cif;
          }
          if (exports.Debug)
              { Log.timeEnd('CifParser._parse ' + this.name); }
      };

      Object.defineProperties( CifParser.prototype, prototypeAccessors );

      return CifParser;
  }(StructureParser));
  ParserRegistry.add('cif', CifParser);
  ParserRegistry.add('mcif', CifParser);
  ParserRegistry.add('mmcif', CifParser);

  /**
   * @file Gro Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var GroParser = /*@__PURE__*/(function (StructureParser) {
      function GroParser () {
          StructureParser.apply(this, arguments);
      }

      if ( StructureParser ) GroParser.__proto__ = StructureParser;
      GroParser.prototype = Object.create( StructureParser && StructureParser.prototype );
      GroParser.prototype.constructor = GroParser;

      var prototypeAccessors = { type: { configurable: true } };

      prototypeAccessors.type.get = function () { return 'gro'; };
      GroParser.prototype._parse = function _parse () {
          // http://manual.gromacs.org/current/online/gro.html
          if (exports.Debug)
              { Log.time('GroParser._parse ' + this.name); }
          var s = this.structure;
          var sb = this.structureBuilder;
          var firstModelOnly = this.firstModelOnly;
          var asTrajectory = this.asTrajectory;
          var cAlphaOnly = this.cAlphaOnly;
          var frames = s.frames;
          var boxes = s.boxes;
          var currentFrame, currentCoord;
          var firstLines = this.streamer.peekLines(3);
          s.title = firstLines[0].trim();
          // determine number of decimal places
          var ndec = firstLines[2].length - firstLines[2].lastIndexOf('.') - 1;
          var lpos = 5 + ndec;
          var xpos = 20;
          var ypos = 20 + lpos;
          var zpos = 20 + 2 * lpos;
          //
          var atomname, resname, resno, serial;
          var atomCount = parseInt(firstLines[1]);
          var modelLineCount = atomCount + 3;
          var atomMap = s.atomMap;
          var atomStore = s.atomStore;
          atomStore.resize(atomCount);
          var idx = 0;
          var modelIdx = 0;
          var lineNo = 0;
          function _parseChunkOfLines(_i, _n, lines) {
              for (var i = _i; i < _n; ++i) {
                  ++lineNo;
                  var l = lineNo - 1;
                  var line = lines[i];
                  if (!line)
                      { continue; }
                  if (l % modelLineCount === 0) {
                      // Log.log( "title", line )
                      if (asTrajectory) {
                          currentFrame = new Float32Array(atomCount * 3);
                          frames.push(currentFrame);
                          currentCoord = 0;
                      }
                  }
                  else if (l % modelLineCount === 1) ;
                  else if (l % modelLineCount === modelLineCount - 1) {
                      var str = line.trim().split(/\s+/);
                      var box = new Float32Array(9);
                      box[0] = parseFloat(str[0]) * 10;
                      box[4] = parseFloat(str[1]) * 10;
                      box[8] = parseFloat(str[2]) * 10;
                      boxes.push(box);
                      if (firstModelOnly) {
                          return true;
                      }
                      modelIdx += 1;
                  }
                  else {
                      atomname = line.substr(10, 5).trim();
                      if (cAlphaOnly && atomname !== 'CA')
                          { continue; }
                      var x = parseFloat(line.substr(xpos, lpos)) * 10;
                      var y = parseFloat(line.substr(ypos, lpos)) * 10;
                      var z = parseFloat(line.substr(zpos, lpos)) * 10;
                      if (asTrajectory) {
                          var j = currentCoord * 3;
                          currentFrame[j + 0] = x;
                          currentFrame[j + 1] = y;
                          currentFrame[j + 2] = z;
                          currentCoord += 1;
                          if (l > modelLineCount)
                              { continue; }
                      }
                      resname = line.substr(5, 5).trim();
                      resno = parseInt(line.substr(0, 5));
                      serial = parseInt(line.substr(15, 5));
                      atomStore.growIfFull();
                      atomStore.atomTypeId[idx] = atomMap.add(atomname);
                      atomStore.x[idx] = x;
                      atomStore.y[idx] = y;
                      atomStore.z[idx] = z;
                      atomStore.serial[idx] = serial;
                      sb.addAtom(modelIdx, '', '', resname, resno, 0, 'l');
                      idx += 1;
                  }
              }
          }
          this.streamer.eachChunkOfLines(function (lines /*, chunkNo, chunkCount */) {
              _parseChunkOfLines(0, lines.length, lines);
          });
          sb.finalize();
          s.finalizeAtoms();
          calculateChainnames(s);
          calculateBonds(s);
          s.finalizeBonds();
          calculateSecondaryStructure(s);
          if (exports.Debug)
              { Log.timeEnd('GroParser._parse ' + this.name); }
      };

      Object.defineProperties( GroParser.prototype, prototypeAccessors );

      return GroParser;
  }(StructureParser));
  ParserRegistry.add('gro', GroParser);

  /**
   * @file utf8-utils
   * @private
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * mostly copied from https://github.com/creationix/msgpack-js-browser
   * by Tim Caswell <tim@creationix.com>, MIT License, Copyright (c) 2013
   */

  /**
   * @file mmtf-constants
   * @private
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   */


  var PassThroughFields = [
      "mmtfVersion", "mmtfProducer",
      "unitCell", "spaceGroup", "structureId", "title",
      "depositionDate", "releaseDate",
      "experimentalMethods", "resolution", "rFree", "rWork",
      "bioAssemblyList", "ncsOperatorList", "entityList", "groupList",
      "numBonds", "numAtoms", "numGroups", "numChains", "numModels",
      "groupsPerChain", "chainsPerModel" ];

  var EncodedFields = [
  	// required
      "xCoordList", "yCoordList", "zCoordList",
      "groupIdList", "groupTypeList",
      "chainIdList",
      // optional
      "bFactorList", "atomIdList", "altLocList", "occupancyList",
      "secStructList", "insCodeList", "sequenceIndexList",
      "chainNameList",
      "bondAtomList", "bondOrderList"
  ];

  var AllFields = PassThroughFields.concat( EncodedFields );

  /**
   * @file mmtf-utils
   * @private
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   */

  /**
   * mmtf utils module.
   * @module MmtfUtils
   */


  function getView( ctor, typedArray, elemSize ){
      return typedArray ? new ctor(
          typedArray.buffer,
          typedArray.byteOffset,
          typedArray.byteLength / ( elemSize || 1 )
      ) : undefined;
  }

  function getDataView( typedArray ){
      return getView( DataView, typedArray );
  }

  /**
   * get an Uint8Array view on the input array memory
   * @static
   * @param  {TypedArray} dataArray - input array
   * @return {Uint8Array} new view on the input array memory
   */
  function getUint8View( typedArray ){
      return getView( Uint8Array, typedArray );
  }

  /**
   * get an Int8Array view on the input array memory
   * @static
   * @param  {TypedArray} dataArray - input array
   * @return {Int8Array} new view on the input array memory
   */
  function getInt8View( typedArray ){
      return getView( Int8Array, typedArray );
  }

  /**
   * get an Int32Array view on the input array memory
   * @static
   * @param  {TypedArray} dataArray - input array
   * @return {Int32Array} new view on the input array memory
   */
  function getInt32View( typedArray ){
      return getView( Int32Array, typedArray, 4 );
  }

  function getFloat32View( typedArray ){
      return getView( Float32Array, typedArray, 4 );
  }


  /**
   * get an Int16Array copy of the the input array data
   * @static
   * @param  {TypedArray} view - input data in big endian format
   * @param  {Int16Array} [dataArray] - pre-allocated output array
   * @return {Int16Array} copy of the input array data
   */
  function decodeInt16( bytes, output ){
      var n = bytes.length / 2;
      if( !output ) { output = new Int16Array( n ); }
      for( var i = 0, i2 = 0; i < n; ++i, i2 += 2 ){
          output[ i ] = bytes[ i2 ] << 8 ^ bytes[ i2 + 1 ] << 0;
      }
      return output;
  }

  /**
   * get an Int32Array copy of the the input array data
   * @static
   * @param  {TypedArray} view - input data in big endian format
   * @param  {Int32Array} [dataArray] - pre-allocated output array
   * @return {Int32Array} copy of the input array data
   */
  function decodeInt32( bytes, output ){
      var n = bytes.length / 4;
      if( !output ) { output = new Int32Array( n ); }
      for( var i = 0, i4 = 0; i < n; ++i, i4 += 4 ){
          output[ i ] = (
              bytes[ i4     ] << 24 ^ bytes[ i4 + 1 ] << 16 ^
              bytes[ i4 + 2 ] <<  8 ^ bytes[ i4 + 3 ] <<  0
          );
      }
      return output;
  }

  function decodeFloat32( bytes, output ){
      var n = bytes.length;
      if( !output ) { output = new Float32Array( n / 4 ); }
      var dvOut = getDataView( output );
      var dvIn = getDataView( bytes );
      for( var i = 0, i4 = 0, il = n / 4; i < il; ++i, i4 += 4 ){
          dvOut.setFloat32( i4, dvIn.getFloat32( i4 ), true );
      }
      return output;
  }

  /**
   * decode integers into floats using given divisor
   * example:
   *     intArray: [ 12, 34, 543, 687, 2, 0, 4689 ]
   *     divisor: 100
   *     return: [ 0.12, 0.34, 5.43, 6.87, 0.02, 0.00, 46.89 ]
   * @static
   * @param  {TypedArray|Array} intArray - input array containing integers
   * @param  {Number} divisor - number to devide the integers to obtain floats
   * @param  {Float32Array} [dataArray] - pre-allocated output array
   * @return {Float32Array} decoded array
   */
  function decodeInteger( intArray, divisor, output ){
      var n = intArray.length;
      var invDiv = 1/divisor;
      if( !output ) { output = new Float32Array( n ); }
      for( var i = 0; i < n; ++i ){
          // multiply by inverse of the divisor which is faster then division
          output[ i ] = intArray[ i ] * invDiv;
      }
      return output;
  }



  /**
   * perform run-length decoding of input array
   * example:
   *     array: [ 0, 2, 3, 5 ]  // pairs of values and length of a run
   *     return: [ 0, 0, 3, 3, 3, 3, 3 ]
   * @static
   * @param  {TypedArray|Array} array - run-length encoded input array
   * @param  {TypedArray|Array} [dataArray] - pre-allocated output array
   * @return {TypedArray|Array} decoded array
   */
  function decodeRun( array, output ){
      var i, il;
      if( !output ){
          // calculate the length the decoded array will have
          var fullLength = 0;
          for( i = 0, il = array.length; i < il; i+=2 ){
              fullLength += array[ i + 1 ];
          }
          // create a new array of the same type of the input array
          output = new array.constructor( fullLength );
      }
      var dataOffset = 0;
      for( i = 0, il = array.length; i < il; i+=2 ){
          var value = array[ i ];  // value to be repeated
          var length = array[ i + 1 ];  // number of repeats
          for( var j = 0; j < length; ++j ){
              output[ dataOffset ] = value;
              ++dataOffset;
          }
      }
      return output;
  }



  /**
   * perform delta decoding of the input array
   * by iterativly adding the ith element's value to the i+1th
   * example:
   *     dataArray: [ 0, 2, 1, 2, 1, 1, -4, -2, 9 ]
   *     return: [ 0, 2, 3, 5, 6, 7, 3, 1, 10 ]
   * @static
   * @param  {TypedArray|Array} dataArray - delta encoded input array
   * @return {TypedArray|Array} decoded array
   */
  function decodeDelta( array, output ){
      var n = array.length;
      if( !output ) { output = new array.constructor( n ); }
      if( n ) { output[ 0 ] = array[ 0 ]; }
      for( var i = 1; i < n; ++i ){
          output[ i ] = array[ i ] + output[ i - 1 ];
      }
      return output;
  }



  /**
   * [decodePacking description]
   * @param  {Int16Array|Int8Array} int16or8 [description]
   * @param  {Int32Array} output   [description]
   * @return {Int32Array}          [description]
   */
  function decodePacking( int16or8, output ){
      var upperLimit = int16or8 instanceof Int8Array ? 0x7F : 0x7FFF;
      var lowerLimit = -upperLimit - 1;
      var n = int16or8.length;
      var i, j;
      if( !output ){
          var fullLength = 0;
          for( i = 0; i < n; ++i ){
              if( int16or8[ i ] < upperLimit && int16or8[ i ] > lowerLimit ){
                  ++fullLength;
              }
          }
          output = new Int32Array( fullLength );
      }
      i = 0;
      j = 0;
      while( i < n ){
          var value = 0;
          while( int16or8[ i ] === upperLimit || int16or8[ i ] === lowerLimit ){
              value += int16or8[ i ];
              ++i;
          }
          value += int16or8[ i ];
          ++i;
          output[ j ] = value;
          ++j;
      }
      return output;
  }



  function decodeDeltaRun( array, output ){
      return decodeDelta( decodeRun( array ), output );
  }



  /**
   * perform run-length decoding followed (@see decodeRunLength)
   * by decoding integers into floats using given divisor (@see decodeIntegerToFloat)
   * example:
   *     array: [ 320, 3, 100, 2 ]
   *     divisor: 100
   *     return: [ 3.20, 3.20, 3.20, 1.00, 1.00 ]
   * @static
   * @param  {Uint8Array} array - run-length encoded int32 array as bytes in big endian format
   * @param  {Integer} divisor - number to devide the integers to obtain floats
   * @param  {Float32Array} dataArray - pre-allocated output array
   * @return {Float32Array} decoded array
   */
  function decodeIntegerRun( intArray, divisor, output ){
      return decodeInteger(
          decodeRun( intArray, getInt32View( output ) ), divisor, output
      );
  }



  function decodeIntegerDelta( intArray, divisor, output ){
      return decodeInteger(
          decodeDelta( intArray, getInt32View( output ) ), divisor, output
      );
  }



  function decodeIntegerPacking( int16or8, divisor, output ){
      return decodeInteger(
          decodePacking( int16or8, getInt32View( output ) ), divisor, output
      );
  }

  function decodeIntegerDeltaPacking( int16or8, divisor, output ){
      var unpacked = decodePacking( int16or8, getInt32View( output ) );
      return decodeIntegerDelta( unpacked, divisor, getFloat32View( unpacked ) );
  }



  function decodeBytes( bytes ){
      var dv = getDataView( bytes );
      var type = dv.getInt32( 0 );
      var size = dv.getInt32( 4 );
      var param = bytes.subarray( 8, 12 );
      var bytes = bytes.subarray( 12 );
      return [ type, bytes, size, param ];
  }

  /**
   * @file msgpack-decode
   * @private
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   */

  /**
   * msgpack decode module.
   * @module MsgpackDecode
   */

  /**
   * decode binary encoded MessagePack v5 (http://msgpack.org/) data
   * @static
   * @param  {Uint8Array} buffer - binary encoded MessagePack data
   * @return {Object|Array|String|Number|Boolean|null} decoded Messagepack data
   */
  function decodeMsgpack(buffer) {
    // Loosely based on
    // The MIT License (MIT)
    // Copyright (c) 2013 Tim Caswell <tim@creationix.com>
    // https://github.com/creationix/msgpack-js
    var offset = 0;
    var dataView = new DataView(buffer.buffer);

    /**
     * decode all key-value pairs of a map into an object
     * @param  {Integer} length - number of key-value pairs
     * @return {Object} decoded map
     */
    function map(length) {
      var value = {};
      for (var i = 0; i < length; i++) {
        var key = parse();
        value[key] = parse();
      }
      return value;
    }

    /**
     * decode binary array
     * @param  {Integer} length - number of elements in the array
     * @return {Uint8Array} decoded array
     */
    function bin(length) {
      var value = buffer.subarray(offset, offset + length);
      offset += length;
      return value;
    }

    /**
     * decode string
     * @param  {Integer} length - number string characters
     * @return {String} decoded string
     */
    function str(length) {
      var array = buffer.subarray(offset, offset + length);
      offset += length;
      // limit number of arguments to String.fromCharCode to something
      // browsers can handle, see http://stackoverflow.com/a/22747272
      var chunkSize = 0xffff;
      if(length > chunkSize){
        var c = [];
        for(var i = 0; i < array.length; i += chunkSize) {
          c.push(String.fromCharCode.apply(
            null, array.subarray(i, i + chunkSize)
          ));
        }
        return c.join("");
      }else {
        return String.fromCharCode.apply(null, array);
      }
    }

    /**
     * decode array
     * @param  {Integer} length - number of array elements
     * @return {Array} decoded array
     */
    function array(length) {
      var value = new Array(length);
      for (var i = 0; i < length; i++) {
        value[i] = parse();
      }
      return value;
    }

    /**
     * recursively parse the MessagePack data
     * @return {Object|Array|String|Number|Boolean|null} decoded MessagePack data
     */
    function parse() {
      var type = buffer[offset];
      var value, length;
      // Positive FixInt
      if ((type & 0x80) === 0x00) {
        offset++;
        return type;
      }
      // FixMap
      if ((type & 0xf0) === 0x80) {
        length = type & 0x0f;
        offset++;
        return map(length);
      }
      // FixArray
      if ((type & 0xf0) === 0x90) {
        length = type & 0x0f;
        offset++;
        return array(length);
      }
      // FixStr
      if ((type & 0xe0) === 0xa0) {
        length = type & 0x1f;
        offset++;
        return str(length);
      }
      // Negative FixInt
      if ((type & 0xe0) === 0xe0) {
        value = dataView.getInt8(offset);
        offset++;
        return value;
      }
      switch (type) {
      // nil
      case 0xc0:
        offset++;
        return null;
      // 0xc1: (never used, could be employed for padding)
      // false
      case 0xc2:
        offset++;
        return false;
      // true
      case 0xc3:
        offset++;
        return true;
      // bin 8
      case 0xc4:
        length = dataView.getUint8(offset + 1);
        offset += 2;
        return bin(length);
      // bin 16
      case 0xc5:
        length = dataView.getUint16(offset + 1);
        offset += 3;
        return bin(length);
      // bin 32
      case 0xc6:
        length = dataView.getUint32(offset + 1);
        offset += 5;
        return bin(length);
      // // ext 8
      // case 0xc7:
      //   length = dataView.getUint8(offset + 1);
      //   extType = dataView.getUint8(offset + 2);
      //   offset += 3;
      //   return [extType, bin(length)];
      // // ext 16
      // case 0xc8:
      //   length = dataView.getUint16(offset + 1);
      //   extType = dataView.getUint8(offset + 3);
      //   offset += 4;
      //   return [extType, bin(length)];
      // // ext 32
      // case 0xc9:
      //   length = dataView.getUint32(offset + 1);
      //   extType = dataView.getUint8(offset + 5);
      //   offset += 6;
      //   return [extType, bin(length)];
      // float 32
      case 0xca:
        value = dataView.getFloat32(offset + 1);
        offset += 5;
        return value;
      // float 64
      case 0xcb:
        value = dataView.getFloat64(offset + 1);
        offset += 9;
        return value;
      // uint8
      case 0xcc:
        value = buffer[offset + 1];
        offset += 2;
        return value;
      // uint 16
      case 0xcd:
        value = dataView.getUint16(offset + 1);
        offset += 3;
        return value;
      // uint 32
      case 0xce:
        value = dataView.getUint32(offset + 1);
        offset += 5;
        return value;
      // // uint64
      // case 0xcf:
      //   // FIXME not available/representable in JS
      //   // largest possible int in JS is 2^53
      //   // value = dataView.getUint64(offset + 1);
      //   offset += 9;
      //   return 0;
      // int 8
      case 0xd0:
        value = dataView.getInt8(offset + 1);
        offset += 2;
        return value;
      // int 16
      case 0xd1:
        value = dataView.getInt16(offset + 1);
        offset += 3;
        return value;
      // int 32
      case 0xd2:
        value = dataView.getInt32(offset + 1);
        offset += 5;
        return value;
      // // int 64
      // case 0xd3:
      //   // FIXME not available/representable in JS
      //   // largest possible int in JS is 2^53
      //   // value = dataView.getInt64(offset + 1);
      //   offset += 9;
      //   return 0;

      // // fixext 1
      // case 0xd4:
      //   extType = dataView.getUint8(offset + 1);
      //   offset += 2;
      //   return [extType, bin(1)];
      // // fixext 2
      // case 0xd5:
      //   extType = dataView.getUint8(offset + 1);
      //   offset += 2;
      //   return [extType, bin(2)];
      // // fixext 4
      // case 0xd6:
      //   extType = dataView.getUint8(offset + 1);
      //   offset += 2;
      //   return [extType, bin(4)];
      // // fixext 8
      // case 0xd7:
      //   extType = dataView.getUint8(offset + 1);
      //   offset += 2;
      //   return [extType, bin(8)];
      // // fixext 16
      // case 0xd8:
      //   extType = dataView.getUint8(offset + 1);
      //   offset += 2;
      //   return [extType, bin(16)];
      // str 8
      case 0xd9:
        length = dataView.getUint8(offset + 1);
        offset += 2;
        return str(length);
      // str 16
      case 0xda:
        length = dataView.getUint16(offset + 1);
        offset += 3;
        return str(length);
      // str 32
      case 0xdb:
        length = dataView.getUint32(offset + 1);
        offset += 5;
        return str(length);
      // array 16
      case 0xdc:
        length = dataView.getUint16(offset + 1);
        offset += 3;
        return array(length);
      // array 32
      case 0xdd:
        length = dataView.getUint32(offset + 1);
        offset += 5;
        return array(length);
      // map 16:
      case 0xde:
        length = dataView.getUint16(offset + 1);
        offset += 3;
        return map(length);
      // map 32
      case 0xdf:
        length = dataView.getUint32(offset + 1);
        offset += 5;
        return map(length);
      }

      throw new Error("Unknown type 0x" + type.toString(16));
    }

    // start the recursive parsing
    return parse();
  }

  /**
   * Fields shared in encoded and decoded mmtf data objects.
   * @typedef {Object} module:MmtfDecode.SharedMmtfData
   * @property {String} mmtfVersion - MMTF specification version
   * @property {String} mmtfProducer - Program that created the file
   * @property {Float[]} [unitCell] - Crystallographic unit cell
   * @property {Float} unitCell.0 - x length
   * @property {Float} unitCell.1 - y length
   * @property {Float} unitCell.2 - z length
   * @property {Float} unitCell.3 - alpha angle
   * @property {Float} unitCell.4 - beta angle
   * @property {Float} unitCell.5 - gamma angle
   * @property {String} [spaceGroup] - Hermann-Mauguin symbol
   * @property {String} [structureId] - Some reference, e.g. a PDB ID
   * @property {String} [title] - Short description
   * @property {String} [depositionDate] - Deposition date in YYYY-MM-DD format
   * @property {String} [releaseDate] - Release date in YYYY-MM-DD format
   * @property {String[]} [experimentalMethods] - Structure determination methods
   * @property {Float} [resolution] - Resolution in Å
   * @property {Float} [rFree] - R-free value
   * @property {Float} [rWork] - R-work value
   * @property {Integer} numBonds - Number of bonds
   * @property {Integer} numAtoms - Number of atoms
   * @property {Integer} numGroups - Number of groups (residues)
   * @property {Integer} numChains - Number of chains
   * @property {Integer} numModels - Number of models
   * @property {Integer[]} chainsPerModel - List of number of chains in each model
   * @property {Integer[]} groupsPerChain - List of number of groups in each chain
   * @property {Entity[]} [entityList] - List of entity objects
   * @property {Integer[]} entityList.chainIndexList - Pointers into chain data fields
   * @property {String} entityList.description - Description of the entity
   * @property {String} entityList.type - Name of the entity type
   * @property {String} entityList.sequence - One letter code sequence
   * @property {Assembly[]} [bioAssemblyList] - List of assembly objects
   * @property {Transform[]} bioAssemblyList.transformList - List of transform objects
   * @property {Integer[]} bioAssemblyList.transformList.chainIndexList - Pointers into chain data fields
   * @property {Float[]} bioAssemblyList.transformList.matrix - 4x4 transformation matrix
   * @property {Array[]} [ncsOperatorList] - List of ncs operator matrices
   * @property {Float[]} ncsOperatorList. - 4x4 transformation matrix
   * @property {GroupType[]} groupList - List of groupType objects
   * @property {Integer[]} groupList.formalChargeList - List of atom formal charges
   * @property {String[]} groupList.elementList - List of elements
   * @property {String[]} groupList.atomNameList - List of atom names
   * @property {Integer[]} groupList.bondAtomList - List of bonded atom indices
   * @property {Integer[]} groupList.bondOrderList - List of bond orders
   * @property {String} groupList.groupName - The name of the group
   * @property {String} groupList.singleLetterCode - The single letter code
   * @property {String} groupList.chemCompType -  The chemical component type
   */

  /**
   * Encoded mmtf data object. Also includes the fields from {@link module:MmtfDecode.SharedMmtfData}. See MMTF specification on how they are encoded.
   * @typedef {Object} module:MmtfDecode.EncodedMmtfData
   * @mixes module:MmtfDecode.SharedMmtfData
   * @property {Uint8Array} [bondAtomList] - Encoded bonded atom indices
   * @property {Uint8Array} [bondOrderList] - Encoded bond orders
   * @property {Uint8Array} xCoordBig - Encoded x coordinates in Å, part 1
   * @property {Uint8Array} xCoordSmall - Encoded x coordinates in Å, part 2
   * @property {Uint8Array} yCoordBig - Encoded y coordinates in Å, part 1
   * @property {Uint8Array} yCoordSmall - Encoded y coordinates in Å, part 2
   * @property {Uint8Array} yCoordBig - Encoded y coordinates in Å, part 1
   * @property {Uint8Array} yCoordSmall - Encoded y coordinates in Å, part 2
   * @property {Uint8Array} [bFactorBig] - Encoded B-factors in Å^2, part 1
   * @property {Uint8Array} [bFactorSmall] - Encoded B-factors in Å^2, part 2
   * @property {Uint8Array} [atomIdList] - Encoded  atom ids
   * @property {Uint8Array} [altLocList] - Encoded alternate location labels
   * @property {Uint8Array} [occupancyList] - Encoded occupancies
   * @property {Uint8Array} groupIdList - Encoded group ids
   * @property {Uint8Array} groupTypeList - Encoded group types
   * @property {Uint8Array} [secStructList] - Encoded secondary structure codes
   * @property {Uint8Array} [insCodeList] - Encoded insertion codes
   * @property {Uint8Array} [seuenceIdList] - Encoded sequence ids
   * @property {Uint8Array} chainIdList - Encoded chain ids
   * @property {Uint8Array} [chainNameList] - Encoded chain names
   */

  /**
   * Decoded mmtf data object. Also includes fields the from {@link module:MmtfDecode.SharedMmtfData}.
   * @typedef {Object} module:MmtfDecode.MmtfData
   * @mixes module:MmtfDecode.SharedMmtfData
   * @property {Int32Array} [bondAtomList] - List of bonded atom indices
   * @property {Uint8Array} [bondOrderList] - List of bond orders
   * @property {Float32Array} xCoordList - List of x coordinates in Å
   * @property {Float32Array} yCoordList - List of y coordinates in Å
   * @property {Float32Array} zCoordList - List of z coordinates in Å
   * @property {Float32Array} [bFactorList] - List of B-factors in Å^2
   * @property {Int32Array} [atomIdList] - List of atom ids
   * @property {Uint8Array} [altLocList] - List of alternate location labels
   * @property {Float32Array} [occupancyList] - List of occupancies
   * @property {Int32Array} groupIdList - List of group ids
   * @property {Int32Array} groupTypeList - List of group types
   * @property {Int8Array} [secStructList] - List of secondary structure codes, encoding
   *    0: pi helix, 1: bend, 2: alpha helix, 3: extended,
   *    4: 3-10 helix, 5: bridge, 6: turn, 7: coil, -1: undefined
   * @property {Uint8Array} [insCodeList] - List of insertion codes
   * @property {Int32Array} [seuenceIdList] - List of sequence ids
   * @property {Uint8Array} chainIdList - List of chain ids
   * @property {Uint8Array} [chainNameList] - List of chain names
   */


  /**
   * [performDecoding description]
   * @param  {Integer} bytes [description]
   * @param  {Integer} size  [description]
   * @param  {Uint8Array} param [description]
   * @return {TypedArray}       [description]
   */
  function performDecoding( type, bytes, size, param ){

      switch( type ){
          case 1:
              return decodeFloat32( bytes );
          case 2:
              return getInt8View( bytes );
          case 3:
              return decodeInt16( bytes );
          case 4:
              return decodeInt32( bytes );
          case 5:
              // var length = decodeInt32( param )[ 0 ];
              return getUint8View( bytes );  // interpret as string array
          case 6:
              // interpret as char array
              return decodeRun( decodeInt32( bytes ), new Uint8Array( size ) );
          case 7:
              return decodeRun( decodeInt32( bytes ) )
          case 8:
              return decodeDeltaRun( decodeInt32( bytes ) );
          case 9:
              return decodeIntegerRun( decodeInt32( bytes ), decodeInt32( param )[ 0 ] );
          case 10:
              return decodeIntegerDeltaPacking( decodeInt16( bytes ), decodeInt32( param )[ 0 ] );
          case 11:
              return decodeInteger( decodeInt16( bytes ), decodeInt32( param )[ 0 ] );
          case 12:
              return decodeIntegerPacking( decodeInt16( bytes ), decodeInt32( param )[ 0 ] );
          case 13:
              return decodeIntegerPacking( getInt8View( bytes ), decodeInt32( param )[ 0 ] );
          case 14:
              return decodePacking( decodeInt16( bytes ) );
          case 15:
              return decodePacking( getInt8View( bytes ) );
      }

  }

  /**
   * Decode MMTF fields
   * @static
   * @param  {Object} inputDict - encoded MMTF data
   * @param  {Object} [params] - decoding parameters
   * @param  {String[]} params.ignoreFields - names of optional fields not to decode
   * @return {module:MmtfDecode.MmtfData} mmtfData
   */
  function decodeMmtf( inputDict, params ){

      params = params || {};
      var ignoreFields = params.ignoreFields;
      var outputDict = {};

      AllFields.forEach( function( name ){
          var ignore = ignoreFields ? ignoreFields.indexOf( name ) !== -1 : false;
          var data = inputDict[ name ];
          if( !ignore && data !== undefined ){
              if( data instanceof Uint8Array ){
                  outputDict[ name ] = performDecoding.apply( null, decodeBytes( data ) );
              }else {
                  outputDict[ name ] = data;
              }
          }
      } );

      return outputDict;

  }

  /**
   * @file Mmtf Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var SstrucMap = {
      '0': 'i'.charCodeAt(0),
      '1': 's'.charCodeAt(0),
      '2': 'h'.charCodeAt(0),
      '3': 'e'.charCodeAt(0),
      '4': 'g'.charCodeAt(0),
      '5': 'b'.charCodeAt(0),
      '6': 't'.charCodeAt(0),
      '7': 'l'.charCodeAt(0),
      '-1': ''.charCodeAt(0) // NA
  };
  var MmtfParser = /*@__PURE__*/(function (StructureParser) {
      function MmtfParser () {
          StructureParser.apply(this, arguments);
      }

      if ( StructureParser ) MmtfParser.__proto__ = StructureParser;
      MmtfParser.prototype = Object.create( StructureParser && StructureParser.prototype );
      MmtfParser.prototype.constructor = MmtfParser;

      var prototypeAccessors = { type: { configurable: true },isBinary: { configurable: true } };

      prototypeAccessors.type.get = function () { return 'mmtf'; };
      prototypeAccessors.isBinary.get = function () { return true; };
      MmtfParser.prototype._parse = function _parse () {
          // https://github.com/rcsb/mmtf
          if (exports.Debug)
              { Log.time('MmtfParser._parse ' + this.name); }
          var i, il, j, jl, groupData;
          var s = this.structure;
          var sd = decodeMmtf(decodeMsgpack(this.streamer.data));
          // structure header
          var headerFields = [
              'depositionDate', 'releaseDate', 'resolution',
              'rFree', 'rWork', 'experimentalMethods'
          ];
          headerFields.forEach(function (name) {
              if (sd[name] !== undefined) {
                  s.header[name] = sd[name];
              }
          });
          var numBonds, numAtoms, numGroups, numChains, numModels;
          var chainsPerModel;
          s.id = sd.structureId;
          s.title = sd.title;
          s.atomStore.addField('formalCharge', 1, 'int8');
          if (this.firstModelOnly || this.asTrajectory) {
              numModels = 1;
              numChains = sd.chainsPerModel[0];
              numGroups = 0;
              for (i = 0, il = numChains; i < il; ++i) {
                  numGroups += sd.groupsPerChain[i];
              }
              numAtoms = 0;
              for (i = 0, il = numGroups; i < il; ++i) {
                  groupData = sd.groupList[sd.groupTypeList[i]];
                  numAtoms += groupData.atomNameList.length;
              }
              numBonds = sd.numBonds;
              chainsPerModel = [numChains];
          }
          else {
              numBonds = sd.numBonds;
              numAtoms = sd.numAtoms;
              numGroups = sd.numGroups;
              numChains = sd.numChains;
              numModels = sd.numModels;
              chainsPerModel = sd.chainsPerModel;
          }
          numBonds += numGroups; // add numGroups to have space for polymer bonds
          //
          if (this.asTrajectory) {
              for (i = 0, il = sd.numModels; i < il; ++i) {
                  var frame = new Float32Array(numAtoms * 3);
                  var frameAtomOffset = numAtoms * i;
                  for (j = 0; j < numAtoms; ++j) {
                      var j3 = j * 3;
                      var offset = j + frameAtomOffset;
                      frame[j3] = sd.xCoordList[offset];
                      frame[j3 + 1] = sd.yCoordList[offset];
                      frame[j3 + 2] = sd.zCoordList[offset];
                  }
                  s.frames.push(frame);
              }
          }
          // bondStore
          var bAtomIndex1 = new Uint32Array(numBonds);
          var bAtomIndex2 = new Uint32Array(numBonds);
          var bBondOrder = new Uint8Array(numBonds);
          var aGroupIndex = new Uint32Array(numAtoms);
          var aFormalCharge = new Int8Array(numAtoms);
          var gChainIndex = new Uint32Array(numGroups);
          var gAtomOffset = new Uint32Array(numGroups);
          var gAtomCount = new Uint16Array(numGroups);
          var cModelIndex = new Uint16Array(numChains);
          var cGroupOffset = new Uint32Array(numChains);
          var cGroupCount = new Uint32Array(numChains);
          var mChainOffset = new Uint32Array(numModels);
          var mChainCount = new Uint32Array(numModels);
          // set-up model-chain relations
          var chainOffset = 0;
          for (i = 0, il = numModels; i < il; ++i) {
              var modelChainCount = chainsPerModel[i];
              mChainOffset[i] = chainOffset;
              mChainCount[i] = modelChainCount;
              for (j = 0; j < modelChainCount; ++j) {
                  cModelIndex[j + chainOffset] = i;
              }
              chainOffset += modelChainCount;
          }
          // set-up chain-residue relations
          var groupsPerChain = sd.groupsPerChain;
          var groupOffset = 0;
          for (i = 0, il = numChains; i < il; ++i) {
              var chainGroupCount = groupsPerChain[i];
              cGroupOffset[i] = groupOffset;
              cGroupCount[i] = chainGroupCount;
              for (j = 0; j < chainGroupCount; ++j) {
                  gChainIndex[j + groupOffset] = i;
              }
              groupOffset += chainGroupCount;
          }
          /// ///
          // get data from group map
          var atomOffset = 0;
          var bondOffset = 0;
          for (i = 0, il = numGroups; i < il; ++i) {
              groupData = sd.groupList[sd.groupTypeList[i]];
              var groupAtomCount = groupData.atomNameList.length;
              var groupFormalChargeList = groupData.formalChargeList;
              var groupBondAtomList = groupData.bondAtomList;
              var groupBondOrderList = groupData.bondOrderList;
              for (j = 0, jl = groupBondOrderList.length; j < jl; ++j) {
                  bAtomIndex1[bondOffset] = atomOffset + groupBondAtomList[j * 2];
                  bAtomIndex2[bondOffset] = atomOffset + groupBondAtomList[j * 2 + 1];
                  bBondOrder[bondOffset] = groupBondOrderList[j];
                  bondOffset += 1;
              }
              //
              gAtomOffset[i] = atomOffset;
              gAtomCount[i] = groupAtomCount;
              for (j = 0; j < groupAtomCount; ++j) {
                  aGroupIndex[atomOffset] = i;
                  aFormalCharge[atomOffset] = groupFormalChargeList[j];
                  atomOffset += 1;
              }
          }
          // extra bonds
          var bondAtomList = sd.bondAtomList;
          if (bondAtomList) {
              if (sd.bondOrderList) {
                  bBondOrder.set(sd.bondOrderList, bondOffset);
              }
              for (i = 0, il = bondAtomList.length; i < il; i += 2) {
                  var atomIndex1 = bondAtomList[i];
                  var atomIndex2 = bondAtomList[i + 1];
                  if (atomIndex1 < numAtoms && atomIndex2 < numAtoms) {
                      bAtomIndex1[bondOffset] = atomIndex1;
                      bAtomIndex2[bondOffset] = atomIndex2;
                      bondOffset += 1;
                  }
              }
          }
          //
          s.bondStore.length = bBondOrder.length;
          s.bondStore.count = bondOffset;
          s.bondStore.atomIndex1 = bAtomIndex1;
          s.bondStore.atomIndex2 = bAtomIndex2;
          s.bondStore.bondOrder = bBondOrder;
          s.atomStore.length = numAtoms;
          s.atomStore.count = numAtoms;
          s.atomStore.residueIndex = aGroupIndex;
          s.atomStore.atomTypeId = new Uint16Array(numAtoms);
          s.atomStore.x = sd.xCoordList.subarray(0, numAtoms);
          s.atomStore.y = sd.yCoordList.subarray(0, numAtoms);
          s.atomStore.z = sd.zCoordList.subarray(0, numAtoms);
          s.atomStore.serial = sd.atomIdList.subarray(0, numAtoms);
          s.atomStore.bfactor = sd.bFactorList.subarray(0, numAtoms);
          s.atomStore.altloc = sd.altLocList.subarray(0, numAtoms);
          s.atomStore.occupancy = sd.occupancyList.subarray(0, numAtoms);
          s.atomStore.formalCharge = aFormalCharge;
          s.residueStore.length = numGroups;
          s.residueStore.count = numGroups;
          s.residueStore.chainIndex = gChainIndex;
          s.residueStore.residueTypeId = sd.groupTypeList;
          s.residueStore.atomOffset = gAtomOffset;
          s.residueStore.atomCount = gAtomCount;
          s.residueStore.resno = sd.groupIdList.subarray(0, numGroups);
          s.residueStore.sstruc = sd.secStructList.subarray(0, numGroups);
          s.residueStore.inscode = sd.insCodeList.subarray(0, numGroups);
          s.chainStore.length = numChains;
          s.chainStore.count = numChains;
          s.chainStore.entityIndex = new Uint16Array(numChains);
          s.chainStore.modelIndex = cModelIndex;
          s.chainStore.residueOffset = cGroupOffset;
          s.chainStore.residueCount = cGroupCount;
          s.chainStore.chainname = sd.chainNameList.subarray(0, numChains * 4);
          s.chainStore.chainid = sd.chainIdList.subarray(0, numChains * 4);
          s.modelStore.length = numModels;
          s.modelStore.count = numModels;
          s.modelStore.chainOffset = mChainOffset;
          s.modelStore.chainCount = mChainCount;
          //
          var groupTypeDict = {};
          for (i = 0, il = sd.groupList.length; i < il; ++i) {
              var groupType = sd.groupList[i];
              var atomTypeIdList = [];
              for (j = 0, jl = groupType.atomNameList.length; j < jl; ++j) {
                  var element = groupType.elementList[j].toUpperCase();
                  var atomname = groupType.atomNameList[j];
                  atomTypeIdList.push(s.atomMap.add(atomname, element));
              }
              var chemCompType = groupType.chemCompType.toUpperCase();
              var hetFlag = ChemCompHetero.includes(chemCompType);
              var numGroupBonds = groupType.bondOrderList.length;
              var atomIndices1 = new Array(numGroupBonds);
              var atomIndices2 = new Array(numGroupBonds);
              for (j = 0; j < numGroupBonds; ++j) {
                  atomIndices1[j] = groupType.bondAtomList[j * 2];
                  atomIndices2[j] = groupType.bondAtomList[j * 2 + 1];
              }
              var bonds = {
                  atomIndices1: atomIndices1,
                  atomIndices2: atomIndices2,
                  bondOrders: groupType.bondOrderList
              };
              groupTypeDict[i] = s.residueMap.add(groupType.groupName, atomTypeIdList, hetFlag, chemCompType, bonds);
          }
          for (i = 0, il = numGroups; i < il; ++i) {
              s.residueStore.residueTypeId[i] = groupTypeDict[s.residueStore.residueTypeId[i]];
          }
          for (i = 0, il = s.atomStore.count; i < il; ++i) {
              var residueIndex = s.atomStore.residueIndex[i];
              var residueType = s.residueMap.list[s.residueStore.residueTypeId[residueIndex]];
              var resAtomOffset = s.residueStore.atomOffset[residueIndex];
              s.atomStore.atomTypeId[i] = residueType.atomTypeIdList[i - resAtomOffset];
          }
          if (sd.secStructList) {
              var secStructLength = sd.secStructList.length;
              for (i = 0, il = s.residueStore.count; i < il; ++i) {
                  // with ( i % secStructLength ) secStruct entries are reused
                  var sstruc = SstrucMap[s.residueStore.sstruc[i % secStructLength]];
                  if (sstruc !== undefined)
                      { s.residueStore.sstruc[i] = sstruc; }
              }
          }
          //
          if (sd.entityList) {
              sd.entityList.forEach(function (e, i) {
                  s.entityList[i] = new Entity(s, i, e.description, e.type, e.chainIndexList);
              });
          }
          if (sd.bioAssemblyList) {
              sd.bioAssemblyList.forEach(function (_assembly, k) {
                  var id = k + 1;
                  var assembly = new Assembly('' + id);
                  s.biomolDict['BU' + id] = assembly;
                  var chainToPart = {};
                  _assembly.transformList.forEach(function (_transform) {
                      var matrix = new Matrix4().fromArray(_transform.matrix).transpose();
                      var chainList = _transform.chainIndexList.map(function (chainIndex) {
                          var chainname = '';
                          for (var k = 0; k < 4; ++k) {
                              var code = sd.chainNameList[chainIndex * 4 + k];
                              if (code) {
                                  chainname += String.fromCharCode(code);
                              }
                              else {
                                  break;
                              }
                          }
                          return chainname;
                      });
                      var part = chainToPart[chainList.toString()];
                      if (part) {
                          part.matrixList.push(matrix);
                      }
                      else {
                          chainToPart[chainList.toString()] = assembly.addPart([matrix], chainList);
                      }
                  });
              });
          }
          if (sd.ncsOperatorList) {
              var ncsName = 'NCS';
              var ncsAssembly = new Assembly(ncsName);
              var ncsPart = ncsAssembly.addPart();
              sd.ncsOperatorList.forEach(function (_operator) {
                  var matrix = new Matrix4().fromArray(_operator).transpose();
                  ncsPart.matrixList.push(matrix);
              });
              if (ncsPart.matrixList.length > 0) {
                  s.biomolDict[ncsName] = ncsAssembly;
              }
          }
          var uc = sd.unitCell;
          if (uc && Array.isArray(uc) && uc[0]) {
              s.unitcell = new Unitcell({
                  a: uc[0],
                  b: uc[1],
                  c: uc[2],
                  alpha: uc[3],
                  beta: uc[4],
                  gamma: uc[5],
                  spacegroup: sd.spaceGroup
              });
          }
          else {
              s.unitcell = undefined;
          }
          // calculate backbone bonds
          calculateBondsBetween(s, true);
          // calculate rung bonds
          calculateBondsWithin(s, true);
          s.finalizeAtoms();
          s.finalizeBonds();
          buildUnitcellAssembly(s);
          if (exports.Debug)
              { Log.timeEnd('MmtfParser._parse ' + this.name); }
      };

      Object.defineProperties( MmtfParser.prototype, prototypeAccessors );

      return MmtfParser;
  }(StructureParser));
  ParserRegistry.add('mmtf', MmtfParser);

  /**
   * @file Mol2 Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var reWhitespace$5 = /\s+/;
  var bondTypes = {
      '1': 1,
      '2': 2,
      '3': 3,
      'am': 1,
      'ar': 1,
      'du': 1,
      'un': 1,
      'nc': 0 // not connected
  };
  var Mol2Parser = /*@__PURE__*/(function (StructureParser) {
      function Mol2Parser () {
          StructureParser.apply(this, arguments);
      }

      if ( StructureParser ) Mol2Parser.__proto__ = StructureParser;
      Mol2Parser.prototype = Object.create( StructureParser && StructureParser.prototype );
      Mol2Parser.prototype.constructor = Mol2Parser;

      var prototypeAccessors = { type: { configurable: true } };

      prototypeAccessors.type.get = function () { return 'mol2'; };
      Mol2Parser.prototype._parse = function _parse () {
          // http://paulbourke.net/dataformats/mol2/
          if (exports.Debug)
              { Log.time('Mol2Parser._parse ' + this.name); }
          var s = this.structure;
          var sb = this.structureBuilder;
          var firstModelOnly = this.firstModelOnly;
          var asTrajectory = this.asTrajectory;
          var frames = s.frames;
          var doFrames = false;
          var currentFrame, currentCoord;
          var atomMap = s.atomMap;
          var atomStore = s.atomStore;
          atomStore.resize(Math.round(this.streamer.data.length / 60));
          atomStore.addField('partialCharge', 1, 'float32');
          var idx = 0;
          var moleculeLineNo = 0;
          var modelAtomIdxStart = 0;
          var modelIdx = -1;
          var numAtoms = 0;
          var currentRecordType = 0;
          var moleculeRecordType = 1;
          var atomRecordType = 2;
          var bondRecordType = 3;
          var ap1 = s.getAtomProxy();
          var ap2 = s.getAtomProxy();
          function _parseChunkOfLines(_i, _n, lines) {
              for (var i = _i; i < _n; ++i) {
                  var line = lines[i].trim();
                  if (line === '' || line[0] === '#')
                      { continue; }
                  if (line[0] === '@') {
                      if (line === '@<TRIPOS>MOLECULE') {
                          currentRecordType = moleculeRecordType;
                          moleculeLineNo = 0;
                          ++modelIdx;
                      }
                      else if (line === '@<TRIPOS>ATOM') {
                          currentRecordType = atomRecordType;
                          modelAtomIdxStart = atomStore.count;
                          if (asTrajectory) {
                              currentCoord = 0;
                              currentFrame = new Float32Array(numAtoms * 3);
                              frames.push(currentFrame);
                              if (modelIdx > 0)
                                  { doFrames = true; }
                          }
                      }
                      else if (line === '@<TRIPOS>BOND') {
                          currentRecordType = bondRecordType;
                      }
                      else {
                          currentRecordType = 0;
                      }
                  }
                  else if (currentRecordType === moleculeRecordType) {
                      if (moleculeLineNo === 0) {
                          s.title = line;
                          s.id = line;
                      }
                      else if (moleculeLineNo === 1) {
                          var ls = line.split(reWhitespace$5);
                          numAtoms = parseInt(ls[0]);
                          // num_atoms [num_bonds [num_subst [num_feat [num_sets]]]]
                      }
                      else ;
                      ++moleculeLineNo;
                  }
                  else if (currentRecordType === atomRecordType) {
                      var ls$1 = line.split(reWhitespace$5);
                      if (firstModelOnly && modelIdx > 0)
                          { continue; }
                      var x = parseFloat(ls$1[2]);
                      var y = parseFloat(ls$1[3]);
                      var z = parseFloat(ls$1[4]);
                      if (asTrajectory) {
                          var j = currentCoord * 3;
                          currentFrame[j + 0] = x;
                          currentFrame[j + 1] = y;
                          currentFrame[j + 2] = z;
                          currentCoord += 1;
                          if (doFrames)
                              { continue; }
                      }
                      var serial = ls$1[0];
                      var atomname = ls$1[1];
                      var element = ls$1[5].split('.')[0];
                      var resno = ls$1[6] ? parseInt(ls$1[6]) : 1;
                      var resname = ls$1[7] ? ls$1[7] : '';
                      var partialCharge = ls$1[8] ? parseFloat(ls$1[8]) : 0.0;
                      atomStore.growIfFull();
                      atomStore.atomTypeId[idx] = atomMap.add(atomname, element);
                      atomStore.x[idx] = x;
                      atomStore.y[idx] = y;
                      atomStore.z[idx] = z;
                      atomStore.serial[idx] = serial;
                      atomStore.partialCharge[idx] = partialCharge;
                      sb.addAtom(modelIdx, '', '', resname, resno, 1);
                      idx += 1;
                  }
                  else if (currentRecordType === bondRecordType) {
                      if (firstModelOnly && modelIdx > 0)
                          { continue; }
                      if (asTrajectory && modelIdx > 0)
                          { continue; }
                      var ls$2 = line.split(reWhitespace$5);
                      // ls[ 0 ] is bond id
                      ap1.index = parseInt(ls$2[1]) - 1 + modelAtomIdxStart;
                      ap2.index = parseInt(ls$2[2]) - 1 + modelAtomIdxStart;
                      var order = bondTypes[ls$2[3]];
                      s.bondStore.addBond(ap1, ap2, order);
                  }
              }
          }
          this.streamer.eachChunkOfLines(function (lines /*, chunkNo, chunkCount */) {
              _parseChunkOfLines(0, lines.length, lines);
          });
          sb.finalize();
          s.finalizeAtoms();
          calculateChainnames(s);
          calculateBondsWithin(s, true);
          calculateBondsBetween(s, true);
          s.finalizeBonds();
          assignResidueTypeBonds(s);
          calculateSecondaryStructure(s);
          if (exports.Debug)
              { Log.timeEnd('Mol2Parser._parse ' + this.name); }
      };

      Object.defineProperties( Mol2Parser.prototype, prototypeAccessors );

      return Mol2Parser;
  }(StructureParser));
  ParserRegistry.add('mol2', Mol2Parser);

  /**
   * @file Pdbqt Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  // autodock variant of PDB format with
  // - atom partial charges (empty column in pdb format)
  // - atom types (bfactor column in pdb format)
  // http://autodock.scripps.edu/faqs-help/faq/what-is-the-format-of-a-pdbqt-file
  var PdbqtParser = /*@__PURE__*/(function (PdbParser) {
      function PdbqtParser () {
          PdbParser.apply(this, arguments);
      }

      if ( PdbParser ) PdbqtParser.__proto__ = PdbParser;
      PdbqtParser.prototype = Object.create( PdbParser && PdbParser.prototype );
      PdbqtParser.prototype.constructor = PdbqtParser;

      var prototypeAccessors = { type: { configurable: true } };

      prototypeAccessors.type.get = function () { return 'pdbqt'; };

      Object.defineProperties( PdbqtParser.prototype, prototypeAccessors );

      return PdbqtParser;
  }(PdbParser));
  ParserRegistry.add('pdbqt', PdbqtParser);

  /**
   * @file Pqr Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  // http://www.poissonboltzmann.org/docs/file-format-info/
  var PqrParser = /*@__PURE__*/(function (PdbParser) {
      function PqrParser () {
          PdbParser.apply(this, arguments);
      }

      if ( PdbParser ) PqrParser.__proto__ = PdbParser;
      PqrParser.prototype = Object.create( PdbParser && PdbParser.prototype );
      PqrParser.prototype.constructor = PqrParser;

      var prototypeAccessors = { type: { configurable: true } };

      prototypeAccessors.type.get = function () { return 'pqr'; };

      Object.defineProperties( PqrParser.prototype, prototypeAccessors );

      return PqrParser;
  }(PdbParser));
  ParserRegistry.add('pqr', PqrParser);

  /**
   * @file Sdf Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var reItem = /> +<(.+)>/;
  var SdfParser = /*@__PURE__*/(function (StructureParser) {
      function SdfParser () {
          StructureParser.apply(this, arguments);
      }

      if ( StructureParser ) SdfParser.__proto__ = StructureParser;
      SdfParser.prototype = Object.create( StructureParser && StructureParser.prototype );
      SdfParser.prototype.constructor = SdfParser;

      var prototypeAccessors = { type: { configurable: true } };

      prototypeAccessors.type.get = function () { return 'sdf'; };
      SdfParser.prototype._parse = function _parse () {
          // https://en.wikipedia.org/wiki/Chemical_table_file#SDF
          // http://download.accelrys.com/freeware/ctfile-formats/ctfile-formats.zip
          if (exports.Debug)
              { Log.time('SdfParser._parse ' + this.name); }
          var s = this.structure;
          var sb = this.structureBuilder;
          var firstModelOnly = this.firstModelOnly;
          var asTrajectory = this.asTrajectory;
          var headerLines = this.streamer.peekLines(2);
          s.id = headerLines[0].trim();
          s.title = headerLines[1].trim();
          var frames = s.frames;
          var doFrames = false;
          var currentFrame, currentCoord;
          var atomMap = s.atomMap;
          var atomStore = s.atomStore;
          atomStore.resize(Math.round(this.streamer.data.length / 50));
          atomStore.addField('formalCharge', 1, 'int8');
          var ap1 = s.getAtomProxy();
          var ap2 = s.getAtomProxy();
          var idx = 0;
          var lineNo = 0;
          var modelIdx = 0;
          var modelAtomIdxStart = 0;
          var sdfData = [];
          var currentItem = false;
          var currentData = {};
          var mItem;
          s.extraData.sdf = sdfData;
          var atomCount, bondCount, atomStart, atomEnd, bondStart, bondEnd;
          function _parseChunkOfLines(_i, _n, lines) {
              for (var i = _i; i < _n; ++i) {
                  var line = lines[i];
                  if (line.substr(0, 4) === '$$$$') {
                      lineNo = -1;
                      ++modelIdx;
                      modelAtomIdxStart = atomStore.count;
                      sdfData.push(currentData);
                      currentData = {};
                      currentItem = false;
                  }
                  else if (lineNo === 3) {
                      atomCount = parseInt(line.substr(0, 3));
                      bondCount = parseInt(line.substr(3, 3));
                      atomStart = 4;
                      atomEnd = atomStart + atomCount;
                      bondStart = atomEnd;
                      bondEnd = bondStart + bondCount;
                      if (asTrajectory) {
                          currentCoord = 0;
                          currentFrame = new Float32Array(atomCount * 3);
                          frames.push(currentFrame);
                          if (modelIdx > 0)
                              { doFrames = true; }
                      }
                  }
                  else if (lineNo >= atomStart && lineNo < atomEnd) {
                      if (firstModelOnly && modelIdx > 0)
                          { continue; }
                      var x = parseFloat(line.substr(0, 10));
                      var y = parseFloat(line.substr(10, 10));
                      var z = parseFloat(line.substr(20, 10));
                      if (asTrajectory) {
                          var j = currentCoord * 3;
                          currentFrame[j + 0] = x;
                          currentFrame[j + 1] = y;
                          currentFrame[j + 2] = z;
                          currentCoord += 1;
                          if (doFrames)
                              { continue; }
                      }
                      var element = line.substr(31, 3).trim();
                      var atomname = element + (idx + 1);
                      atomStore.growIfFull();
                      atomStore.atomTypeId[idx] = atomMap.add(atomname, element);
                      atomStore.x[idx] = x;
                      atomStore.y[idx] = y;
                      atomStore.z[idx] = z;
                      atomStore.serial[idx] = idx;
                      atomStore.formalCharge[idx] = 0;
                      sb.addAtom(modelIdx, '', '', 'HET', 1, 1);
                      idx += 1;
                  }
                  else if (lineNo >= bondStart && lineNo < bondEnd) {
                      if (firstModelOnly && modelIdx > 0)
                          { continue; }
                      if (asTrajectory && modelIdx > 0)
                          { continue; }
                      ap1.index = parseInt(line.substr(0, 3)) - 1 + modelAtomIdxStart;
                      ap2.index = parseInt(line.substr(3, 3)) - 1 + modelAtomIdxStart;
                      var order = parseInt(line.substr(6, 3));
                      s.bondStore.addBond(ap1, ap2, order);
                  }
                  else if (line.match(/M {2}CHG/)) {
                      var chargeCount = parseInt(line.substr(6, 3));
                      for (var ci = 0, coffset = 10; ci < chargeCount; ++ci, coffset += 8) {
                          var aToken = parseInt(line.substr(coffset, 3));
                          var atomIdx = aToken - 1 + modelAtomIdxStart;
                          var cToken = parseInt(line.substr(coffset + 4, 3));
                          atomStore.formalCharge[atomIdx] = cToken;
                      }
                      // eslint-disable-next-line no-cond-assign
                  }
                  else if (mItem = line.match(reItem)) {
                      currentItem = mItem[1];
                      currentData[currentItem] = [];
                  }
                  else if (currentItem !== false && line) {
                      currentData[currentItem].push(line);
                  }
                  ++lineNo;
              }
          }
          this.streamer.eachChunkOfLines(function (lines /*, chunkNo, chunkCount */) {
              _parseChunkOfLines(0, lines.length, lines);
          });
          sb.finalize();
          s.finalizeAtoms();
          s.finalizeBonds();
          assignResidueTypeBonds(s);
          if (exports.Debug)
              { Log.timeEnd('SdfParser._parse ' + this.name); }
      };
      SdfParser.prototype._postProcess = function _postProcess () {
          assignResidueTypeBonds(this.structure);
      };

      Object.defineProperties( SdfParser.prototype, prototypeAccessors );

      return SdfParser;
  }(StructureParser));
  ParserRegistry.add('sdf', SdfParser);
  ParserRegistry.add('sd', SdfParser);
  ParserRegistry.add('mol', SdfParser);

  /**
   * @file Prmtop Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var amberChargeUnitFactor = 18.2223;
  function parseIntSubstr(line, start, length) {
      return parseInt(line.substr(start, length).trim());
  }
  var PrmtopParser = /*@__PURE__*/(function (StructureParser) {
      function PrmtopParser () {
          StructureParser.apply(this, arguments);
      }

      if ( StructureParser ) PrmtopParser.__proto__ = StructureParser;
      PrmtopParser.prototype = Object.create( StructureParser && StructureParser.prototype );
      PrmtopParser.prototype.constructor = PrmtopParser;

      var prototypeAccessors = { type: { configurable: true } };

      prototypeAccessors.type.get = function () { return 'prmtop'; };
      PrmtopParser.prototype._parse = function _parse () {
          // http://ambermd.org/prmtop.pdf
          // http://ambermd.org/formats.html#topology
          if (exports.Debug)
              { Log.time('PrmtopParser._parse ' + this.name); }
          var s = this.structure;
          var sb = this.structureBuilder;
          //
          var atomMap = s.atomMap;
          var atomStore = s.atomStore;
          atomStore.addField('partialCharge', 1, 'float32');
          atomStore.addField('radius', 1, 'float32');
          var title = [];
          var pointersDict = {};
          var pointers = [
              'NATOM', 'NTYPES', 'NBONH', 'MBONA', 'NTHETH', 'MTHETA',
              'NPHIH', 'MPHIA', 'NHPARM', 'NPARM', 'NNB', 'NRES',
              'NBONA', 'NTHETA', 'NPHIA', 'NUMBND', 'NUMANG', 'NPTRA',
              'NATYP', 'NPHB', 'IFPERT', 'NBPER', 'NGPER', 'NDPER',
              'MBPER', 'MGPER', 'MDPER', 'IFBOX', 'NMXRS', 'IFCAP',
              'NUMEXTRA', 'NCOPY'
          ];
          pointers.forEach(function (name) { pointersDict[name] = 0; });
          var atomNames;
          var charges;
          var radii;
          var bAtomIndex1;
          var bAtomIndex2;
          var bBondOrder = new Uint8Array(0);
          var residueLabels;
          var residuePointers;
          var mode;
          // let currentFormat
          var curIdx;
          var bondIdx;
          function _parseChunkOfLines(_i, _n, lines) {
              for (var i = _i; i < _n; ++i) {
                  var line = lines[i];
                  var lt = line.trim();
                  if (!lt) {
                      continue;
                  }
                  else if (line.startsWith('%FORMAT')) ;
                  else if (line.startsWith('%FLAG')) {
                      var flag = line.substr(5).trim();
                      curIdx = 0;
                      if (flag === 'TITLE') {
                          mode = 0 /* Title */;
                      }
                      else if (flag === 'POINTERS') {
                          mode = 1 /* Pointers */;
                      }
                      else if (flag === 'ATOM_NAME') {
                          mode = 2 /* AtomName */;
                      }
                      else if (flag === 'CHARGE') {
                          mode = 3 /* Charge */;
                      }
                      else if (flag === 'MASS') {
                          mode = 4 /* Mass */;
                      }
                      else if (flag === 'RESIDUE_LABEL') {
                          mode = 5 /* ResidueLabel */;
                      }
                      else if (flag === 'RESIDUE_POINTER') {
                          mode = 6 /* ResiduePointer */;
                      }
                      else if (flag === 'BONDS_INC_HYDROGEN') {
                          bondIdx = 0;
                          mode = 7 /* BondsIncHydrogen */;
                      }
                      else if (flag === 'BONDS_WITHOUT_HYDROGEN') {
                          bondIdx = pointersDict['NBONH'];
                          mode = 8 /* BondsWithoutHydrogen */;
                      }
                      else if (flag === 'RADII') {
                          mode = 9 /* Radii */;
                      }
                      else {
                          mode = undefined;
                      }
                  }
                  else if (mode === 0 /* Title */) {
                      title.push(lt);
                  }
                  else if (mode === 1 /* Pointers */) {
                      var n = Math.min(curIdx + 10, 32);
                      for (var i$1 = 0; curIdx < n; ++i$1, ++curIdx) {
                          pointersDict[pointers[curIdx]] = parseInt(line.substr(i$1 * 8, 8).trim());
                      }
                      atomNames = new Array(pointersDict.NATOM);
                      charges = new Float32Array(pointersDict.NATOM);
                      radii = new Float32Array(pointersDict.NATOM);
                      atomStore.resize(pointersDict.NATOM);
                      var bondCount = pointersDict.NBONH + pointersDict.MBONA;
                      bAtomIndex1 = new Uint32Array(bondCount);
                      bAtomIndex2 = new Uint32Array(bondCount);
                      bBondOrder = new Uint8Array(bondCount);
                      residueLabels = new Array(pointersDict.NRES);
                      residuePointers = new Uint32Array(pointersDict.NRES);
                  }
                  else if (mode === 2 /* AtomName */) {
                      var n$1 = Math.min(curIdx + 20, pointersDict.NATOM);
                      for (var i$2 = 0; curIdx < n$1; ++i$2, ++curIdx) {
                          atomNames[curIdx] = line.substr(i$2 * 4, 4).trim();
                      }
                  }
                  else if (mode === 3 /* Charge */) {
                      var n$2 = Math.min(curIdx + 5, pointersDict.NATOM);
                      for (var i$3 = 0; curIdx < n$2; ++i$3, ++curIdx) {
                          charges[curIdx] = parseFloat(line.substr(i$3 * 16, 16)) / amberChargeUnitFactor;
                      }
                  }
                  else if (mode === 4 /* Mass */) ;
                  else if (mode === 5 /* ResidueLabel */) {
                      var n$3 = Math.min(curIdx + 20, pointersDict.NRES);
                      for (var i$4 = 0; curIdx < n$3; ++i$4, ++curIdx) {
                          residueLabels[curIdx] = line.substr(i$4 * 4, 4).trim();
                      }
                  }
                  else if (mode === 6 /* ResiduePointer */) {
                      var n$4 = Math.min(curIdx + 10, pointersDict.NRES);
                      for (var i$5 = 0; curIdx < n$4; ++i$5, ++curIdx) {
                          residuePointers[curIdx] = parseIntSubstr(line, i$5 * 8, 8);
                      }
                  }
                  else if (mode === 7 /* BondsIncHydrogen */) {
                      var n$5 = Math.min(curIdx + 10, pointersDict.NBONH * 3);
                      for (var i$6 = 0; curIdx < n$5; ++i$6, ++curIdx) {
                          var r = curIdx % 3;
                          if (r === 0) {
                              bAtomIndex1[bondIdx] = parseIntSubstr(line, i$6 * 8, 8) / 3;
                          }
                          if (r === 1) {
                              bAtomIndex2[bondIdx] = parseIntSubstr(line, i$6 * 8, 8) / 3;
                              bBondOrder[bondIdx] = 1;
                              ++bondIdx;
                          }
                      }
                  }
                  else if (mode === 8 /* BondsWithoutHydrogen */) {
                      var n$6 = Math.min(curIdx + 10, pointersDict.MBONA * 3);
                      for (var i$7 = 0; curIdx < n$6; ++i$7, ++curIdx) {
                          var r$1 = curIdx % 3;
                          if (r$1 === 0) {
                              bAtomIndex1[bondIdx] = parseIntSubstr(line, i$7 * 8, 8) / 3;
                          }
                          if (r$1 === 1) {
                              bAtomIndex2[bondIdx] = parseIntSubstr(line, i$7 * 8, 8) / 3;
                              bBondOrder[bondIdx] = 1;
                              ++bondIdx;
                          }
                      }
                  }
                  else if (mode === 9 /* Radii */) {
                      var n$7 = Math.min(curIdx + 5, pointersDict.NATOM);
                      for (var i$8 = 0; curIdx < n$7; ++i$8, ++curIdx) {
                          radii[curIdx] = parseFloat(line.substr(i$8 * 16, 16));
                      }
                  }
              }
          }
          this.streamer.eachChunkOfLines(function (lines /*, chunkNo, chunkCount */) {
              _parseChunkOfLines(0, lines.length, lines);
          });
          s.title = title.join(' ');
          var atomCount = pointersDict.NATOM;
          var curResIdx = 0;
          var curResname = residueLabels[0];
          var curResno = 1;
          for (var i = 0; i < atomCount; ++i) {
              if (i + 1 === residuePointers[curResIdx + 1]) {
                  ++curResIdx;
                  curResname = residueLabels[curResIdx];
                  curResno = curResIdx + 1;
              }
              atomStore.atomTypeId[i] = atomMap.add(atomNames[i]);
              atomStore.serial[i] = i + 1;
              sb.addAtom(0, '', '', curResname, curResno);
          }
          atomStore.partialCharge.set(charges);
          atomStore.radius.set(radii);
          s.bondStore.length = bBondOrder.length;
          s.bondStore.count = bBondOrder.length;
          s.bondStore.atomIndex1 = bAtomIndex1;
          s.bondStore.atomIndex2 = bAtomIndex2;
          s.bondStore.bondOrder = bBondOrder;
          sb.finalize();
          s.finalizeAtoms();
          s.finalizeBonds();
          calculateBondsWithin(s, true);
          calculateBondsBetween(s, true, true);
          calculateChainnames(s, true);
          assignResidueTypeBonds(s);
          if (exports.Debug)
              { Log.timeEnd('PrmtopParser._parse ' + this.name); }
      };

      Object.defineProperties( PrmtopParser.prototype, prototypeAccessors );

      return PrmtopParser;
  }(StructureParser));
  ParserRegistry.add('prmtop', PrmtopParser);
  ParserRegistry.add('parm7', PrmtopParser);

  /**
   * @file Psf Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var TitleMode = 1;
  var AtomMode = 2;
  var BondMode = 3;
  var AngleMode = 4;
  var DihedralMode = 5;
  var ImproperMode = 6;
  var reWhitespace$4 = /\s+/;
  var reTitle = /(^\*|REMARK)*/;
  var PsfParser = /*@__PURE__*/(function (StructureParser) {
      function PsfParser () {
          StructureParser.apply(this, arguments);
      }

      if ( StructureParser ) PsfParser.__proto__ = StructureParser;
      PsfParser.prototype = Object.create( StructureParser && StructureParser.prototype );
      PsfParser.prototype.constructor = PsfParser;

      var prototypeAccessors = { type: { configurable: true } };

      prototypeAccessors.type.get = function () { return 'psf'; };
      PsfParser.prototype._parse = function _parse () {
          // http://www.ks.uiuc.edu/Training/Tutorials/namd/namd-tutorial-unix-html/node23.html
          if (exports.Debug)
              { Log.time('PsfParser._parse ' + this.name); }
          var s = this.structure;
          var sb = this.structureBuilder;
          //
          var atomMap = s.atomMap;
          var atomStore = s.atomStore;
          atomStore.addField('partialCharge', 1, 'float32');
          var title = [];
          var mode;
          var chainid;
          var lastSegid;
          var idx = 0;
          var chainIdx = 0;
          var bondIdx = 0;
          var bAtomIndex1, bAtomIndex2, bBondOrder;
          function _parseChunkOfLines(_i, _n, lines) {
              for (var i = _i; i < _n; ++i) {
                  var line = lines[i].trim();
                  if (!line) {
                      mode = undefined;
                      continue;
                  }
                  if (mode === AtomMode) {
                      var ls = line.split(reWhitespace$4);
                      var serial = parseInt(ls[0]);
                      var segid = ls[1];
                      var resno = parseInt(ls[2]);
                      var resname = ls[3];
                      var atomname = ls[4];
                      var charge = parseFloat(ls[6]);
                      if (segid !== lastSegid) {
                          chainid = getChainname(chainIdx);
                          ++chainIdx;
                      }
                      atomStore.growIfFull();
                      atomStore.atomTypeId[idx] = atomMap.add(atomname);
                      atomStore.serial[idx] = serial;
                      atomStore.partialCharge[idx] = charge;
                      sb.addAtom(0, chainid, chainid, resname, resno);
                      idx += 1;
                      lastSegid = segid;
                  }
                  else if (mode === BondMode) {
                      var ls$1 = line.split(reWhitespace$4);
                      for (var j = 0, m = ls$1.length; j < m; j += 2) {
                          bAtomIndex1[bondIdx] = parseInt(ls$1[j]) - 1;
                          bAtomIndex2[bondIdx] = parseInt(ls$1[j + 1]) - 1;
                          bBondOrder[bondIdx] = 1;
                          bondIdx += 1;
                      }
                  }
                  else if (mode === TitleMode) {
                      title.push(line.replace(reTitle, '').trim());
                  }
                  else if (mode === AngleMode) ;
                  else if (mode === DihedralMode) ;
                  else if (mode === ImproperMode) ;
                  else if (line.includes('!NATOM')) {
                      mode = AtomMode;
                      var numAtoms = parseInt(line.split(reWhitespace$4)[0]);
                      atomStore.resize(numAtoms);
                  }
                  else if (line.includes('!NBOND')) {
                      mode = BondMode;
                      var numBonds = parseInt(line.split(reWhitespace$4)[0]);
                      bAtomIndex1 = new Uint32Array(numBonds);
                      bAtomIndex2 = new Uint32Array(numBonds);
                      bBondOrder = new Uint8Array(numBonds);
                  }
                  else if (line.includes('!NTITLE')) {
                      mode = TitleMode;
                  }
                  else if (line.includes('!NTHETA')) {
                      mode = AngleMode;
                  }
                  else if (line.includes('!NPHI')) {
                      mode = DihedralMode;
                  }
                  else if (line.includes('!NIMPHI')) {
                      mode = ImproperMode;
                  }
              }
          }
          this.streamer.eachChunkOfLines(function (lines /*, chunkNo, chunkCount */) {
              _parseChunkOfLines(0, lines.length, lines);
          });
          s.title = title.join(' ');
          s.bondStore.length = bBondOrder.length;
          s.bondStore.count = bondIdx;
          s.bondStore.atomIndex1 = bAtomIndex1;
          s.bondStore.atomIndex2 = bAtomIndex2;
          s.bondStore.bondOrder = bBondOrder;
          sb.finalize();
          s.finalizeAtoms();
          s.finalizeBonds();
          calculateBondsWithin(s, true);
          calculateBondsBetween(s, true, true);
          assignResidueTypeBonds(s);
          if (exports.Debug)
              { Log.timeEnd('PsfParser._parse ' + this.name); }
      };

      Object.defineProperties( PsfParser.prototype, prototypeAccessors );

      return PsfParser;
  }(StructureParser));
  ParserRegistry.add('psf', PsfParser);

  /**
   * @file Top Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var reField = /\[ (.+) \]/;
  var reWhitespace$3 = /\s+/;
  var TopParser = /*@__PURE__*/(function (StructureParser) {
      function TopParser () {
          StructureParser.apply(this, arguments);
      }

      if ( StructureParser ) TopParser.__proto__ = StructureParser;
      TopParser.prototype = Object.create( StructureParser && StructureParser.prototype );
      TopParser.prototype.constructor = TopParser;

      var prototypeAccessors = { type: { configurable: true } };

      prototypeAccessors.type.get = function () { return 'top'; };
      TopParser.prototype._parse = function _parse () {
          // http://manual.gromacs.org/online/top.html
          if (exports.Debug)
              { Log.time('TopParser._parse ' + this.name); }
          var s = this.structure;
          var sb = this.structureBuilder;
          //
          var atomMap = s.atomMap;
          var bondStore = s.bondStore;
          var atomStore = s.atomStore;
          atomStore.addField('partialCharge', 1, 'float32');
          var molecules = [];
          var moleculetypeDict = {};
          var currentMoleculetype;
          var mode;
          function _parseChunkOfLines(_i, _n, lines) {
              for (var i = _i; i < _n; ++i) {
                  var line = lines[i];
                  var lt = line.trim();
                  if (!lt || lt[0] === '*' || lt[0] === ';') {
                      continue;
                  }
                  if (lt.startsWith('#include')) {
                      throw new Error('TopParser: #include statements not allowed');
                  }
                  var fieldMatch = line.match(reField);
                  if (fieldMatch !== null) {
                      var name = fieldMatch[1];
                      if (name === 'moleculetype') {
                          mode = 2 /* Moleculetype */;
                          currentMoleculetype = {
                              atoms: [],
                              bonds: []
                          };
                      }
                      else if (name === 'atoms') {
                          mode = 3 /* Atoms */;
                      }
                      else if (name === 'bonds') {
                          mode = 4 /* Bonds */;
                      }
                      else if (name === 'system') {
                          mode = 0 /* System */;
                      }
                      else if (name === 'molecules') {
                          mode = 1 /* Molecules */;
                      }
                      else {
                          mode = undefined;
                      }
                      continue;
                  }
                  var cIdx = lt.indexOf(';');
                  if (cIdx !== -1) {
                      lt = lt.substring(0, cIdx).trim();
                  }
                  if (mode === 2 /* Moleculetype */) {
                      var molName = lt.split(reWhitespace$3)[0];
                      moleculetypeDict[molName] = currentMoleculetype;
                  }
                  else if (mode === 3 /* Atoms */) {
                      var ls = lt.split(reWhitespace$3);
                      currentMoleculetype.atoms.push([
                          parseInt(ls[2]),
                          ls[3],
                          ls[4],
                          parseFloat(ls[6]) // charge
                      ]);
                  }
                  else if (mode === 4 /* Bonds */) {
                      var ls$1 = lt.split(reWhitespace$3);
                      currentMoleculetype.bonds.push([
                          parseInt(ls$1[0]),
                          parseInt(ls$1[1]) // aj
                      ]);
                  }
                  else if (mode === 0 /* System */) {
                      s.title = lt;
                  }
                  else if (mode === 1 /* Molecules */) {
                      var ls$2 = lt.split(reWhitespace$3);
                      molecules.push([
                          ls$2[0],
                          parseInt(ls$2[1]) // count
                      ]);
                  }
              }
          }
          this.streamer.eachChunkOfLines(function (lines /*, chunkNo, chunkCount */) {
              _parseChunkOfLines(0, lines.length, lines);
          });
          var atomCount = 0;
          var bondCount = 0;
          molecules.forEach(function (val) {
              var name = val[0];
              var molCount = val[1];
              var molType = moleculetypeDict[name];
              atomCount += molCount * molType.atoms.length;
              bondCount += molCount * molType.bonds.length;
          });
          atomStore.resize(atomCount);
          bondStore.resize(bondCount);
          var atomIdx = 0;
          var resIdx = 0;
          var chainidIdx = 0;
          var chainnameIdx = 0;
          var bondIdx = 0;
          var atomOffset = 0;
          var lastResno;
          molecules.forEach(function (val) {
              var name = val[0];
              var molCount = val[1];
              var molType = moleculetypeDict[name];
              var chainname = getChainname(chainnameIdx);
              var loop = function ( i ) {
                  lastResno = -1;
                  var chainid = WaterNames.includes(name) ? chainname : getChainname(chainidIdx);
                  molType.atoms.forEach(function (atomData) {
                      var resno = atomData[0];
                      var resname = atomData[1];
                      var atomname = atomData[2];
                      var charge = atomData[3];
                      if (resno !== lastResno) {
                          ++resIdx;
                      }
                      atomStore.atomTypeId[atomIdx] = atomMap.add(atomname);
                      atomStore.serial[atomIdx] = atomIdx + 1;
                      atomStore.partialCharge[atomIdx] = charge;
                      sb.addAtom(0, chainname, chainid, resname, resIdx + 1);
                      ++atomIdx;
                      lastResno = resno;
                  });
                  molType.bonds.forEach(function (bondData) {
                      bondStore.atomIndex1[bondIdx] = atomOffset + bondData[0] - 1;
                      bondStore.atomIndex2[bondIdx] = atomOffset + bondData[1] - 1;
                      ++bondIdx;
                  });
                  ++chainidIdx;
                  atomOffset += molType.atoms.length;
              };

              for (var i = 0; i < molCount; ++i) loop();
              ++chainnameIdx;
          });
          bondStore.count = bondCount;
          sb.finalize();
          s.finalizeAtoms();
          s.finalizeBonds();
          calculateBondsWithin(s, true);
          calculateBondsBetween(s, true, true);
          assignResidueTypeBonds(s);
          if (exports.Debug)
              { Log.timeEnd('TopParser._parse ' + this.name); }
      };

      Object.defineProperties( TopParser.prototype, prototypeAccessors );

      return TopParser;
  }(StructureParser));
  ParserRegistry.add('top', TopParser);

  /**
   * @file Trajectory Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var TrajectoryParser = /*@__PURE__*/(function (Parser) {
      function TrajectoryParser(streamer, params) {
          Parser.call(this, streamer, params);
          this.frames = new Frames(this.name, this.path);
      }

      if ( Parser ) TrajectoryParser.__proto__ = Parser;
      TrajectoryParser.prototype = Object.create( Parser && Parser.prototype );
      TrajectoryParser.prototype.constructor = TrajectoryParser;

      var prototypeAccessors = { type: { configurable: true },__objName: { configurable: true } };
      prototypeAccessors.type.get = function () { return 'trajectory'; };
      prototypeAccessors.__objName.get = function () { return 'frames'; };

      Object.defineProperties( TrajectoryParser.prototype, prototypeAccessors );

      return TrajectoryParser;
  }(Parser));

  /**
   * @file Dcd Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var charmmTimeUnitFactor = 20.45482949774598;
  var DcdParser = /*@__PURE__*/(function (TrajectoryParser) {
      function DcdParser () {
          TrajectoryParser.apply(this, arguments);
      }

      if ( TrajectoryParser ) DcdParser.__proto__ = TrajectoryParser;
      DcdParser.prototype = Object.create( TrajectoryParser && TrajectoryParser.prototype );
      DcdParser.prototype.constructor = DcdParser;

      var prototypeAccessors = { type: { configurable: true },isBinary: { configurable: true } };

      prototypeAccessors.type.get = function () { return 'dcd'; };
      prototypeAccessors.isBinary.get = function () { return true; };
      DcdParser.prototype._parse = function _parse () {
          // http://www.ks.uiuc.edu/Research/vmd/plugins/molfile/dcdplugin.html
          // The DCD format is structured as follows
          //   (FORTRAN UNFORMATTED, with Fortran data type descriptions):
          // HDR     NSET    ISTRT   NSAVC   5-ZEROS NATOM-NFREAT    DELTA   9-ZEROS
          // `CORD'  #files  step 1  step    zeroes  (zero)          timestep  (zeroes)
          //                         interval
          // C*4     INT     INT     INT     5INT    INT             DOUBLE  9INT
          // ==========================================================================
          // NTITLE          TITLE
          // INT (=2)        C*MAXTITL
          //                 (=32)
          // ==========================================================================
          // NATOM
          // #atoms
          // INT
          // ==========================================================================
          // X(I), I=1,NATOM         (DOUBLE)
          // Y(I), I=1,NATOM
          // Z(I), I=1,NATOM
          // ==========================================================================
          if (exports.Debug)
              { Log.time('DcdParser._parse ' + this.name); }
          var bin = ensureBuffer(this.streamer.data);
          var dv = new DataView(bin);
          var f = this.frames;
          var coordinates = f.coordinates;
          var boxes = f.boxes;
          var header = {};
          var nextPos = 0;
          // header block
          var intView = new Int32Array(bin, 0, 23);
          var ef = intView[0] !== dv.getInt32(0); // endianess flag
          // swap byte order when big endian (84 indicates little endian)
          if (intView[0] !== 84) {
              var n = bin.byteLength;
              for (var i = 0; i < n; i += 4) {
                  dv.setFloat32(i, dv.getFloat32(i), true);
              }
          }
          if (intView[0] !== 84) {
              Log.error('dcd bad format, header block start');
          }
          // format indicator, should read 'CORD'
          var formatString = String.fromCharCode(dv.getUint8(4), dv.getUint8(5), dv.getUint8(6), dv.getUint8(7));
          if (formatString !== 'CORD') {
              Log.error('dcd bad format, format string');
          }
          var isCharmm = false;
          var extraBlock = false;
          var fourDims = false;
          // version field in charmm, unused in X-PLOR
          if (intView[22] !== 0) {
              isCharmm = true;
              if (intView[12] !== 0)
                  { extraBlock = true; }
              if (intView[13] === 1)
                  { fourDims = true; }
          }
          header.NSET = intView[2];
          header.ISTART = intView[3];
          header.NSAVC = intView[4];
          header.NAMNF = intView[10];
          if (isCharmm) {
              header.DELTA = dv.getFloat32(44, ef);
          }
          else {
              header.DELTA = dv.getFloat64(44, ef);
          }
          if (intView[22] !== 84) {
              Log.error('dcd bad format, header block end');
          }
          nextPos = nextPos + 21 * 4 + 8;
          // title block
          var titleLength = dv.getInt32(nextPos, ef);
          var titlePos = nextPos + 1;
          if ((titleLength - 4) % 80 !== 0) {
              Log.error('dcd bad format, title block start');
          }
          header.TITLE = uint8ToString(new Uint8Array(bin, titlePos, titleLength));
          if (dv.getInt32(titlePos + titleLength + 4 - 1, ef) !== titleLength) {
              Log.error('dcd bad format, title block end');
          }
          nextPos = nextPos + titleLength + 8;
          // natom block
          if (dv.getInt32(nextPos, ef) !== 4) {
              Log.error('dcd bad format, natom block start');
          }
          header.NATOM = dv.getInt32(nextPos + 4, ef);
          if (dv.getInt32(nextPos + 8, ef) !== 4) {
              Log.error('dcd bad format, natom block end');
          }
          nextPos = nextPos + 4 + 8;
          // fixed atoms block
          if (header.NAMNF > 0) {
              // TODO read coordinates and indices of fixed atoms
              Log.error('dcd format with fixed atoms unsupported, aborting');
              return;
          }
          // frames
          var natom = header.NATOM;
          var natom4 = natom * 4;
          for (var i$1 = 0, n$1 = header.NSET; i$1 < n$1; ++i$1) {
              if (extraBlock) {
                  nextPos += 4; // block start
                  // unitcell: A, alpha, B, beta, gamma, C (doubles)
                  var box = new Float32Array(9);
                  box[0] = dv.getFloat64(nextPos, ef);
                  box[4] = dv.getFloat64(nextPos + 2 * 8, ef);
                  box[8] = dv.getFloat64(nextPos + 5 * 8, ef);
                  boxes.push(box);
                  nextPos += 48;
                  nextPos += 4; // block end
              }
              // xyz coordinates
              var coord = new Float32Array(natom * 3);
              for (var j = 0; j < 3; ++j) {
                  if (dv.getInt32(nextPos, ef) !== natom4) {
                      Log.error('dcd bad format, coord block start', i$1, j);
                  }
                  nextPos += 4; // block start
                  var c = new Float32Array(bin, nextPos, natom);
                  for (var k = 0; k < natom; ++k) {
                      coord[3 * k + j] = c[k];
                  }
                  nextPos += natom4;
                  if (dv.getInt32(nextPos, ef) !== natom4) {
                      Log.error('dcd bad format, coord block end', i$1, j);
                  }
                  nextPos += 4; // block end
              }
              coordinates.push(coord);
              if (fourDims) {
                  var bytes = dv.getInt32(nextPos, ef);
                  nextPos += 4 + bytes + 4; // block start + skip + block end
              }
          }
          if (header.DELTA) {
              f.deltaTime = header.DELTA * charmmTimeUnitFactor;
          }
          if (header.ISTART >= 1) {
              f.timeOffset = (header.ISTART - 1) * f.deltaTime;
          }
          // console.log(header)
          // console.log(header.TITLE)
          // console.log('isCharmm', isCharmm, 'extraBlock', extraBlock, 'fourDims, fourDims)
          if (exports.Debug)
              { Log.timeEnd('DcdParser._parse ' + this.name); }
      };

      Object.defineProperties( DcdParser.prototype, prototypeAccessors );

      return DcdParser;
  }(TrajectoryParser));
  ParserRegistry.add('dcd', DcdParser);

  /**
   * @file Netcdf Reader
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   *
   * Adapted from https://github.com/cheminfo-js/netcdfjs
   * MIT License, Copyright (c) 2016 cheminfo
   */
  /**
   * Throws a non-valid NetCDF exception if the statement it's true
   * @ignore
   * @param {boolean} statement - Throws if true
   * @param {string} reason - Reason to throw
   */
  function notNetcdf(statement, reason) {
      if (statement) {
          throw new TypeError('Not a valid NetCDF v3.x file: ' + reason);
      }
  }
  /**
   * Moves 1, 2, or 3 bytes to next 4-byte boundary
   * @ignore
   * @param {IOBuffer} buffer - Buffer for the file data
   */
  function padding(buffer) {
      if ((buffer.offset % 4) !== 0) {
          buffer.skip(4 - (buffer.offset % 4));
      }
  }
  /**
   * Reads the name
   * @ignore
   * @param {IOBuffer} buffer - Buffer for the file data
   * @return {string} - Name
   */
  function readName(buffer) {
      // Read name
      var nameLength = buffer.readUint32();
      var name = buffer.readChars(nameLength);
      // validate name
      // TODO
      // Apply padding
      padding(buffer);
      return name;
  }
  var types = {
      BYTE: 1,
      CHAR: 2,
      SHORT: 3,
      INT: 4,
      FLOAT: 5,
      DOUBLE: 6
  };
  /**
   * Parse a number into their respective type
   * @ignore
   * @param {number} type - integer that represents the type
   * @return {string} - parsed value of the type
   */
  function num2str(type) {
      switch (Number(type)) {
          case types.BYTE:
              return 'byte';
          case types.CHAR:
              return 'char';
          case types.SHORT:
              return 'short';
          case types.INT:
              return 'int';
          case types.FLOAT:
              return 'float';
          case types.DOUBLE:
              return 'double';
          default:
              return 'undefined';
      }
  }
  /**
   * Parse a number type identifier to his size in bytes
   * @ignore
   * @param {number} type - integer that represents the type
   * @return {number} -size of the type
   */
  function num2bytes(type) {
      switch (Number(type)) {
          case types.BYTE:
              return 1;
          case types.CHAR:
              return 1;
          case types.SHORT:
              return 2;
          case types.INT:
              return 4;
          case types.FLOAT:
              return 4;
          case types.DOUBLE:
              return 8;
          default:
              return -1;
      }
  }
  /**
   * Reverse search of num2str
   * @ignore
   * @param {string} type - string that represents the type
   * @return {number} - parsed value of the type
   */
  function str2num(type) {
      switch (String(type)) {
          case 'byte':
              return types.BYTE;
          case 'char':
              return types.CHAR;
          case 'short':
              return types.SHORT;
          case 'int':
              return types.INT;
          case 'float':
              return types.FLOAT;
          case 'double':
              return types.DOUBLE;
          default:
              return -1;
      }
  }
  /**
   * Auxiliary function to read numeric data
   * @ignore
   * @param {number} size - Size of the element to read
   * @param {function} bufferReader - Function to read next value
   * @return {Array<number>|number}
   */
  function readNumber(size, bufferReader) {
      if (size !== 1) {
          var numbers = new Array(size);
          for (var i = 0; i < size; i++) {
              numbers[i] = bufferReader();
          }
          return numbers;
      }
      else {
          return bufferReader();
      }
  }
  /**
   * Given a type and a size reads the next element
   * @ignore
   * @param {IOBuffer} buffer - Buffer for the file data
   * @param {number} type - Type of the data to read
   * @param {number} size - Size of the element to read
   * @return {string|Array<number>|number}
   */
  function readType(buffer, type, size) {
      switch (type) {
          case types.BYTE:
              return buffer.readBytes(size);
          case types.CHAR:
              return trimNull(buffer.readChars(size));
          case types.SHORT:
              return readNumber(size, buffer.readInt16.bind(buffer));
          case types.INT:
              return readNumber(size, buffer.readInt32.bind(buffer));
          case types.FLOAT:
              return readNumber(size, buffer.readFloat32.bind(buffer));
          case types.DOUBLE:
              return readNumber(size, buffer.readFloat64.bind(buffer));
          default:
              notNetcdf(true, 'non valid type ' + type);
              return undefined;
      }
  }
  /**
   * Removes null terminate value
   * @ignore
   * @param {string} value - String to trim
   * @return {string} - Trimmed string
   */
  function trimNull(value) {
      if (value.charCodeAt(value.length - 1) === 0) {
          return value.substring(0, value.length - 1);
      }
      return value;
  }
  // const STREAMING = 4294967295;
  /**
   * Read data for the given non-record variable
   * @ignore
   * @param {IOBuffer} buffer - Buffer for the file data
   * @param {object} variable - Variable metadata
   * @return {Array} - Data of the element
   */
  function nonRecord(buffer, variable) {
      // variable type
      var type = str2num(variable.type);
      // size of the data
      var size = variable.size / num2bytes(type);
      // iterates over the data
      var data = new Array(size);
      for (var i = 0; i < size; i++) {
          data[i] = readType(buffer, type, 1);
      }
      return data;
  }
  /**
   * Read data for the given record variable
   * @ignore
   * @param {IOBuffer} buffer - Buffer for the file data
   * @param {object} variable - Variable metadata
   * @param {object} recordDimension - Record dimension metadata
   * @return {Array} - Data of the element
   */
  function record(buffer, variable, recordDimension) {
      // variable type
      var type = str2num(variable.type);
      var width = variable.size ? variable.size / num2bytes(type) : 1;
      // size of the data
      // TODO streaming data
      var size = recordDimension.length;
      // iterates over the data
      var data = new Array(size);
      var step = recordDimension.recordStep;
      for (var i = 0; i < size; i++) {
          var currentOffset = buffer.offset;
          data[i] = readType(buffer, type, width);
          buffer.seek(currentOffset + step);
      }
      return data;
  }
  // Grammar constants
  var ZERO = 0;
  var NC_DIMENSION = 10;
  var NC_VARIABLE = 11;
  var NC_ATTRIBUTE = 12;
  /**
   * Read the header of the file
   * @ignore
   * @param {IOBuffer} buffer - Buffer for the file data
   * @param {number} version - Version of the file
   * @return {object} - Object with the fields:
   *  * `recordDimension`: Number with the length of record dimension
   *  * `dimensions`: List of dimensions
   *  * `globalAttributes`: List of global attributes
   *  * `variables`: List of variables
   */
  function header(buffer, version) {
      // Length of record dimension
      // sum of the varSize's of all the record variables.
      var header = { recordDimension: { length: buffer.readUint32() } };
      // Version
      header.version = version;
      // List of dimensions
      var dimList = dimensionsList(buffer);
      header.recordDimension.id = dimList.recordId;
      header.recordDimension.name = dimList.recordName;
      header.dimensions = dimList.dimensions;
      // List of global attributes
      header.globalAttributes = attributesList(buffer);
      // List of variables
      var variables = variablesList(buffer, dimList.recordId, version);
      header.variables = variables.variables;
      header.recordDimension.recordStep = variables.recordStep;
      return header;
  }
  /**
   * List of dimensions
   * @ignore
   * @param {IOBuffer} buffer - Buffer for the file data
   * @return {object} - List of dimensions and record dimension with:
   *  * `name`: String with the name of the dimension
   *  * `size`: Number with the size of the dimension
   */
  function dimensionsList(buffer) {
      var dimensions, recordId, recordName;
      var dimList = buffer.readUint32();
      if (dimList === ZERO) {
          notNetcdf((buffer.readUint32() !== ZERO), 'wrong empty tag for list of dimensions');
          return [];
      }
      else {
          notNetcdf((dimList !== NC_DIMENSION), 'wrong tag for list of dimensions');
          // Length of dimensions
          var dimensionSize = buffer.readUint32();
          dimensions = new Array(dimensionSize);
          for (var dim = 0; dim < dimensionSize; dim++) {
              // Read name
              var name = readName(buffer);
              // Read dimension size
              var size = buffer.readUint32();
              if (size === 0) {
                  recordId = dim;
                  recordName = name;
              }
              dimensions[dim] = {
                  name: name,
                  size: size
              };
          }
          return {
              dimensions: dimensions,
              recordId: recordId,
              recordName: recordName
          };
      }
  }
  /**
   * List of attributes
   * @ignore
   * @param {IOBuffer} buffer - Buffer for the file data
   * @return {Array<object>} - List of attributes with:
   *  * `name`: String with the name of the attribute
   *  * `type`: String with the type of the attribute
   *  * `value`: A number or string with the value of the attribute
   */
  function attributesList(buffer) {
      var attributes;
      var gAttList = buffer.readUint32();
      if (gAttList === ZERO) {
          notNetcdf((buffer.readUint32() !== ZERO), 'wrong empty tag for list of attributes');
          return [];
      }
      else {
          notNetcdf((gAttList !== NC_ATTRIBUTE), 'wrong tag for list of attributes');
          // Length of attributes
          var attributeSize = buffer.readUint32();
          attributes = new Array(attributeSize);
          for (var gAtt = 0; gAtt < attributeSize; gAtt++) {
              // Read name
              var name = readName(buffer);
              // Read type
              var type = buffer.readUint32();
              notNetcdf(((type < 1) || (type > 6)), 'non valid type ' + type);
              // Read attribute
              var size = buffer.readUint32();
              var value = readType(buffer, type, size);
              // Apply padding
              padding(buffer);
              attributes[gAtt] = {
                  name: name,
                  type: num2str(type),
                  value: value
              };
          }
      }
      return attributes;
  }
  /**
   * List of variables
   * @ignore
   * @param {IOBuffer} buffer - Buffer for the file data
   * @param {number} recordId - Id if the record dimension
   * @param {number} version - Version of the file
   * @return {object} - Number of recordStep and list of variables with:
   *  * `name`: String with the name of the variable
   *  * `dimensions`: Array with the dimension IDs of the variable
   *  * `attributes`: Array with the attributes of the variable
   *  * `type`: String with the type of the variable
   *  * `size`: Number with the size of the variable
   *  * `offset`: Number with the offset where of the variable begins
   *  * `record`: True if is a record variable, false otherwise
   */
  function variablesList(buffer, recordId, version) {
      var varList = buffer.readUint32();
      var recordStep = 0;
      var variables;
      if (varList === ZERO) {
          notNetcdf((buffer.readUint32() !== ZERO), 'wrong empty tag for list of variables');
          return [];
      }
      else {
          notNetcdf((varList !== NC_VARIABLE), 'wrong tag for list of variables');
          // Length of variables
          var variableSize = buffer.readUint32();
          variables = new Array(variableSize);
          for (var v = 0; v < variableSize; v++) {
              // Read name
              var name = readName(buffer);
              // Read dimensionality of the variable
              var dimensionality = buffer.readUint32();
              // Index into the list of dimensions
              var dimensionsIds = new Array(dimensionality);
              for (var dim = 0; dim < dimensionality; dim++) {
                  dimensionsIds[dim] = buffer.readUint32();
              }
              // Read variables size
              var attributes = attributesList(buffer);
              // Read type
              var type = buffer.readUint32();
              notNetcdf(((type < 1) && (type > 6)), 'non valid type ' + type);
              // Read variable size
              // The 32-bit varSize field is not large enough to contain the
              // size of variables that require more than 2^32 - 4 bytes,
              // so 2^32 - 1 is used in the varSize field for such variables.
              var varSize = buffer.readUint32();
              // Read offset
              var offset = buffer.readUint32();
              if (version === 2) {
                  notNetcdf((offset > 0), 'offsets larger than 4GB not supported');
                  offset = buffer.readUint32();
              }
              // Count amount of record variables
              if (dimensionsIds[0] === recordId) {
                  recordStep += varSize;
              }
              variables[v] = {
                  name: name,
                  dimensions: dimensionsIds,
                  attributes: attributes,
                  type: num2str(type),
                  size: varSize,
                  offset: offset,
                  record: (dimensionsIds[0] === recordId)
              };
          }
      }
      return {
          variables: variables,
          recordStep: recordStep
      };
  }
  /**
   * Reads a NetCDF v3.x file
   * https://www.unidata.ucar.edu/software/netcdf/docs/file_format_specifications.html
   */
  var NetcdfReader = function NetcdfReader(data) {
      var buffer = new IOBuffer(data);
      buffer.setBigEndian();
      // Validate that it's a NetCDF file
      notNetcdf((buffer.readChars(3) !== 'CDF'), 'should start with CDF');
      // Check the NetCDF format
      var version = buffer.readByte();
      notNetcdf((version > 2), 'unknown version');
      // Read the header
      this.header = header(buffer, version);
      this.buffer = buffer;
  };

  var prototypeAccessors$1 = { version: { configurable: true },recordDimension: { configurable: true },dimensions: { configurable: true },globalAttributes: { configurable: true },variables: { configurable: true } };
  /**
   * @return {string} - Version for the NetCDF format
   */
  prototypeAccessors$1.version.get = function () {
      if (this.header.version === 1) {
          return 'classic format';
      }
      else {
          return '64-bit offset format';
      }
  };
  /**
   * @return {object} - Metadata for the record dimension
   *  * `length`: Number of elements in the record dimension
   *  * `id`: Id number in the list of dimensions for the record dimension
   *  * `name`: String with the name of the record dimension
   *  * `recordStep`: Number with the record variables step size
   */
  prototypeAccessors$1.recordDimension.get = function () {
      return this.header.recordDimension;
  };
  /**
   * @return {Array<object>} - List of dimensions with:
   *  * `name`: String with the name of the dimension
   *  * `size`: Number with the size of the dimension
   */
  prototypeAccessors$1.dimensions.get = function () {
      return this.header.dimensions;
  };
  /**
   * @return {Array<object>} - List of global attributes with:
   *  * `name`: String with the name of the attribute
   *  * `type`: String with the type of the attribute
   *  * `value`: A number or string with the value of the attribute
   */
  prototypeAccessors$1.globalAttributes.get = function () {
      return this.header.globalAttributes;
  };
  /**
   * @return {Array<object>} - List of variables with:
   *  * `name`: String with the name of the variable
   *  * `dimensions`: Array with the dimension IDs of the variable
   *  * `attributes`: Array with the attributes of the variable
   *  * `type`: String with the type of the variable
   *  * `size`: Number with the size of the variable
   *  * `offset`: Number with the offset where of the variable begins
   *  * `record`: True if is a record variable, false otherwise
   */
  prototypeAccessors$1.variables.get = function () {
      return this.header.variables;
  };
  /**
   * Checks if a variable is available
   * @param {string|object} variableName - Name of the variable to check
   * @return {Boolean} - Variable existence
   */
  NetcdfReader.prototype.hasDataVariable = function hasDataVariable (variableName) {
      return this.header.variables.findIndex(function (val) {
          return val.name === variableName;
      }) !== -1;
  };
  /**
   * Retrieves the data for a given variable
   * @param {string|object} variableName - Name of the variable to search or variable object
   * @return {Array} - List with the variable values
   */
  NetcdfReader.prototype.getDataVariable = function getDataVariable (variableName) {
      var variable;
      if (typeof variableName === 'string') {
          // search the variable
          variable = this.header.variables.find(function (val) {
              return val.name === variableName;
          });
      }
      else {
          variable = variableName;
      }
      // throws if variable not found
      notNetcdf((variable === undefined), 'variable not found');
      // go to the offset position
      this.buffer.seek(variable.offset);
      if (variable.record) {
          // record variable case
          return record(this.buffer, variable, this.header.recordDimension);
      }
      else {
          // non-record variable case
          return nonRecord(this.buffer, variable);
      }
  };

  Object.defineProperties( NetcdfReader.prototype, prototypeAccessors$1 );

  /**
   * @file Nctraj Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var NctrajParser = /*@__PURE__*/(function (TrajectoryParser) {
      function NctrajParser () {
          TrajectoryParser.apply(this, arguments);
      }

      if ( TrajectoryParser ) NctrajParser.__proto__ = TrajectoryParser;
      NctrajParser.prototype = Object.create( TrajectoryParser && TrajectoryParser.prototype );
      NctrajParser.prototype.constructor = NctrajParser;

      var prototypeAccessors = { type: { configurable: true },isBinary: { configurable: true } };

      prototypeAccessors.type.get = function () { return 'nctraj'; };
      prototypeAccessors.isBinary.get = function () { return true; };
      NctrajParser.prototype._parse = function _parse () {
          // http://ambermd.org/netcdf/nctraj.xhtml
          if (exports.Debug)
              { Log.time('NctrajParser._parse ' + this.name); }
          var netcdfReader = new NetcdfReader(this.streamer.data);
          var f = this.frames;
          var coordinates = f.coordinates;
          var boxes = f.boxes;
          var times = f.times;
          netcdfReader.getDataVariable('coordinates').forEach(function (c) {
              coordinates.push(new Float32Array(c));
          });
          if (netcdfReader.hasDataVariable('cell_lengths')) {
              netcdfReader.getDataVariable('cell_lengths').forEach(function (b) {
                  boxes.push(new Float32Array(b));
              });
          }
          if (netcdfReader.hasDataVariable('time')) {
              netcdfReader.getDataVariable('time').forEach(function (t) {
                  times.push(t);
              });
          }
          if (times.length >= 1) {
              f.timeOffset = times[0];
          }
          if (times.length >= 2) {
              f.deltaTime = times[1] - times[0];
          }
          if (exports.Debug)
              { Log.timeEnd('NctrajParser._parse ' + this.name); }
      };

      Object.defineProperties( NctrajParser.prototype, prototypeAccessors );

      return NctrajParser;
  }(TrajectoryParser));
  ParserRegistry.add('nctraj', NctrajParser);
  ParserRegistry.add('ncdf', NctrajParser);
  ParserRegistry.add('nc', NctrajParser);

  /**
   * @file Trr Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var TrrParser = /*@__PURE__*/(function (TrajectoryParser) {
      function TrrParser () {
          TrajectoryParser.apply(this, arguments);
      }

      if ( TrajectoryParser ) TrrParser.__proto__ = TrajectoryParser;
      TrrParser.prototype = Object.create( TrajectoryParser && TrajectoryParser.prototype );
      TrrParser.prototype.constructor = TrrParser;

      var prototypeAccessors = { type: { configurable: true },isBinary: { configurable: true } };

      prototypeAccessors.type.get = function () { return 'trr'; };
      prototypeAccessors.isBinary.get = function () { return true; };
      TrrParser.prototype._parse = function _parse () {
          // https://github.com/gromacs/gromacs/blob/master/src/gromacs/fileio/trrio.cpp
          if (exports.Debug)
              { Log.time('TrrParser._parse ' + this.name); }
          var bin = ensureBuffer(this.streamer.data);
          var dv = new DataView(bin);
          var f = this.frames;
          var coordinates = f.coordinates;
          var boxes = f.boxes;
          var times = f.times;
          var offset = 0;
          while (true) {
              // const magicnum = dv.getInt32(offset)
              // const i1 = dv.getFloat32(offset + 4)
              offset += 8;
              var versionSize = dv.getInt32(offset);
              offset += 4;
              offset += versionSize;
              // const irSize = dv.getInt32(offset)
              // const eSize = dv.getInt32(offset + 4)
              var boxSize = dv.getInt32(offset + 8);
              var virSize = dv.getInt32(offset + 12);
              var presSize = dv.getInt32(offset + 16);
              // const topSize = dv.getInt32(offset + 20)
              // const symSize = dv.getInt32(offset + 24)
              var coordSize = dv.getInt32(offset + 28);
              var velocitySize = dv.getInt32(offset + 32);
              var forceSize = dv.getInt32(offset + 36);
              var natoms = dv.getInt32(offset + 40);
              // const step = dv.getInt32(offset + 44)
              // const nre = dv.getInt32(offset + 48)
              offset += 52;
              var floatSize = boxSize / 9;
              var natoms3 = natoms * 3;
              // let lambda
              if (floatSize === 8) {
                  times.push(dv.getFloat64(offset));
                  // lambda = dv.getFloat64(offset + 8)
              }
              else {
                  times.push(dv.getFloat32(offset));
                  // lambda = dv.getFloat32(offset + 4)
              }
              offset += 2 * floatSize;
              if (boxSize) {
                  var box = new Float32Array(9);
                  if (floatSize === 8) {
                      for (var i = 0; i < 9; ++i) {
                          box[i] = dv.getFloat64(offset) * 10;
                          offset += 8;
                      }
                  }
                  else {
                      for (var i$1 = 0; i$1 < 9; ++i$1) {
                          box[i$1] = dv.getFloat32(offset) * 10;
                          offset += 4;
                      }
                  }
                  boxes.push(box);
              }
              // ignore, unused
              offset += virSize;
              // ignore, unused
              offset += presSize;
              if (coordSize) {
                  var frameCoords = (void 0);
                  if (floatSize === 8) {
                      frameCoords = new Float32Array(natoms3);
                      for (var i$2 = 0; i$2 < natoms3; ++i$2) {
                          frameCoords[i$2] = dv.getFloat64(offset) * 10;
                          offset += 8;
                      }
                  }
                  else {
                      var tmp = new Uint32Array(bin, offset, natoms3);
                      for (var i$3 = 0; i$3 < natoms3; ++i$3) {
                          var value = tmp[i$3];
                          tmp[i$3] = (((value & 0xFF) << 24) | ((value & 0xFF00) << 8) |
                              ((value >> 8) & 0xFF00) | ((value >> 24) & 0xFF));
                      }
                      frameCoords = new Float32Array(bin, offset, natoms3);
                      for (var i$4 = 0; i$4 < natoms3; ++i$4) {
                          frameCoords[i$4] *= 10;
                          offset += 4;
                      }
                  }
                  coordinates.push(frameCoords);
              }
              // ignore, unused
              offset += velocitySize;
              // ignore, unused
              offset += forceSize;
              if (offset >= bin.byteLength)
                  { break; }
          }
          if (times.length >= 1) {
              f.timeOffset = times[0];
          }
          if (times.length >= 2) {
              f.deltaTime = times[1] - times[0];
          }
          if (exports.Debug)
              { Log.timeEnd('TrrParser._parse ' + this.name); }
      };

      Object.defineProperties( TrrParser.prototype, prototypeAccessors );

      return TrrParser;
  }(TrajectoryParser));
  ParserRegistry.add('trr', TrrParser);

  /**
   * @file Xtc Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var MagicInts = new Uint32Array([
      0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 10, 12, 16, 20, 25, 32, 40, 50, 64,
      80, 101, 128, 161, 203, 256, 322, 406, 512, 645, 812, 1024, 1290,
      1625, 2048, 2580, 3250, 4096, 5060, 6501, 8192, 10321, 13003,
      16384, 20642, 26007, 32768, 41285, 52015, 65536, 82570, 104031,
      131072, 165140, 208063, 262144, 330280, 416127, 524287, 660561,
      832255, 1048576, 1321122, 1664510, 2097152, 2642245, 3329021,
      4194304, 5284491, 6658042, 8388607, 10568983, 13316085, 16777216
  ]);
  var FirstIdx = 9;
  // const LastIdx = MagicInts.length
  function sizeOfInt(size) {
      var num = 1;
      var numOfBits = 0;
      while (size >= num && numOfBits < 32) {
          numOfBits++;
          num <<= 1;
      }
      return numOfBits;
  }
  var _tmpBytes = new Uint8Array(32);
  function sizeOfInts(numOfInts, sizes) {
      var numOfBytes = 1;
      var numOfBits = 0;
      _tmpBytes[0] = 1;
      for (var i = 0; i < numOfInts; i++) {
          var bytecnt = (void 0);
          var tmp = 0;
          for (bytecnt = 0; bytecnt < numOfBytes; bytecnt++) {
              tmp += _tmpBytes[bytecnt] * sizes[i];
              _tmpBytes[bytecnt] = tmp & 0xff;
              tmp >>= 8;
          }
          while (tmp !== 0) {
              _tmpBytes[bytecnt++] = tmp & 0xff;
              tmp >>= 8;
          }
          numOfBytes = bytecnt;
      }
      var num = 1;
      numOfBytes--;
      while (_tmpBytes[numOfBytes] >= num) {
          numOfBits++;
          num *= 2;
      }
      return numOfBits + numOfBytes * 8;
  }
  function decodeBits(buf, cbuf, numOfBits, buf2) {
      var mask = (1 << numOfBits) - 1;
      var lastBB0 = buf2[1];
      var lastBB1 = buf2[2];
      var cnt = buf[0];
      var num = 0;
      while (numOfBits >= 8) {
          lastBB1 = (lastBB1 << 8) | cbuf[cnt++];
          num |= (lastBB1 >> lastBB0) << (numOfBits - 8);
          numOfBits -= 8;
      }
      if (numOfBits > 0) {
          if (lastBB0 < numOfBits) {
              lastBB0 += 8;
              lastBB1 = (lastBB1 << 8) | cbuf[cnt++];
          }
          lastBB0 -= numOfBits;
          num |= (lastBB1 >> lastBB0) & ((1 << numOfBits) - 1);
      }
      num &= mask;
      buf[0] = cnt;
      buf[1] = lastBB0;
      buf[2] = lastBB1;
      return num;
  }
  var _tmpIntBytes = new Int32Array(32);
  function decodeInts(buf, cbuf, numOfInts, numOfBits, sizes, nums, buf2) {
      var numOfBytes = 0;
      _tmpIntBytes[1] = 0;
      _tmpIntBytes[2] = 0;
      _tmpIntBytes[3] = 0;
      while (numOfBits > 8) {
          // this is inversed??? why??? because of the endiannness???
          _tmpIntBytes[numOfBytes++] = decodeBits(buf, cbuf, 8, buf2);
          numOfBits -= 8;
      }
      if (numOfBits > 0) {
          _tmpIntBytes[numOfBytes++] = decodeBits(buf, cbuf, numOfBits, buf2);
      }
      for (var i = numOfInts - 1; i > 0; i--) {
          var num = 0;
          for (var j = numOfBytes - 1; j >= 0; j--) {
              num = (num << 8) | _tmpIntBytes[j];
              var p = (num / sizes[i]) | 0;
              _tmpIntBytes[j] = p;
              num = num - p * sizes[i];
          }
          nums[i] = num;
      }
      nums[0] = (_tmpIntBytes[0] |
          (_tmpIntBytes[1] << 8) |
          (_tmpIntBytes[2] << 16) |
          (_tmpIntBytes[3] << 24));
  }
  var XtcParser = /*@__PURE__*/(function (TrajectoryParser) {
      function XtcParser () {
          TrajectoryParser.apply(this, arguments);
      }

      if ( TrajectoryParser ) XtcParser.__proto__ = TrajectoryParser;
      XtcParser.prototype = Object.create( TrajectoryParser && TrajectoryParser.prototype );
      XtcParser.prototype.constructor = XtcParser;

      var prototypeAccessors = { type: { configurable: true },isBinary: { configurable: true } };

      prototypeAccessors.type.get = function () { return 'xtc'; };
      prototypeAccessors.isBinary.get = function () { return true; };
      XtcParser.prototype._parse = function _parse () {
          // https://github.com/gromacs/gromacs/blob/master/src/gromacs/fileio/xtcio.cpp
          // https://github.com/gromacs/gromacs/blob/master/src/gromacs/fileio/libxdrf.cpp
          if (exports.Debug)
              { Log.time('XtcParser._parse ' + this.name); }
          var bin = ensureBuffer(this.streamer.data);
          var dv = new DataView(bin);
          var f = this.frames;
          var coordinates = f.coordinates;
          var boxes = f.boxes;
          var times = f.times;
          var minMaxInt = new Int32Array(6);
          var sizeint = new Int32Array(3);
          var bitsizeint = new Int32Array(3);
          var sizesmall = new Uint32Array(3);
          var thiscoord = new Float32Array(3);
          var prevcoord = new Float32Array(3);
          var offset = 0;
          var buf = new Int32Array(3);
          var buf2 = new Uint32Array(buf.buffer);
          while (true) {
              var frameCoords = (void 0);
              // const magicnum = dv.getInt32(offset)
              var natoms = dv.getInt32(offset + 4);
              // const step = dv.getInt32(offset + 8)
              offset += 12;
              var natoms3 = natoms * 3;
              times.push(dv.getFloat32(offset));
              offset += 4;
              var box = new Float32Array(9);
              for (var i = 0; i < 9; ++i) {
                  box[i] = dv.getFloat32(offset) * 10;
                  offset += 4;
              }
              boxes.push(box);
              if (natoms <= 9) { // no compression
                  frameCoords = new Float32Array(natoms);
                  for (var i$1 = 0; i$1 < natoms; ++i$1) {
                      frameCoords[i$1] = dv.getFloat32(offset);
                      offset += 4;
                  }
              }
              else {
                  buf[0] = buf[1] = buf[2] = 0.0;
                  sizeint[0] = sizeint[1] = sizeint[2] = 0;
                  sizesmall[0] = sizesmall[1] = sizesmall[2] = 0;
                  bitsizeint[0] = bitsizeint[1] = bitsizeint[2] = 0;
                  thiscoord[0] = thiscoord[1] = thiscoord[2] = 0;
                  prevcoord[0] = prevcoord[1] = prevcoord[2] = 0;
                  frameCoords = new Float32Array(natoms3);
                  var lfp = 0;
                  var lsize = dv.getInt32(offset);
                  offset += 4;
                  var precision = dv.getFloat32(offset);
                  offset += 4;
                  minMaxInt[0] = dv.getInt32(offset);
                  minMaxInt[1] = dv.getInt32(offset + 4);
                  minMaxInt[2] = dv.getInt32(offset + 8);
                  minMaxInt[3] = dv.getInt32(offset + 12);
                  minMaxInt[4] = dv.getInt32(offset + 16);
                  minMaxInt[5] = dv.getInt32(offset + 20);
                  sizeint[0] = minMaxInt[3] - minMaxInt[0] + 1;
                  sizeint[1] = minMaxInt[4] - minMaxInt[1] + 1;
                  sizeint[2] = minMaxInt[5] - minMaxInt[2] + 1;
                  offset += 24;
                  var bitsize = (void 0);
                  if ((sizeint[0] | sizeint[1] | sizeint[2]) > 0xffffff) {
                      bitsizeint[0] = sizeOfInt(sizeint[0]);
                      bitsizeint[1] = sizeOfInt(sizeint[1]);
                      bitsizeint[2] = sizeOfInt(sizeint[2]);
                      bitsize = 0; // flag the use of large sizes
                  }
                  else {
                      bitsize = sizeOfInts(3, sizeint);
                  }
                  var smallidx = dv.getInt32(offset);
                  offset += 4;
                  // if (smallidx == 0) {alert("Undocumented error 1"); return;}
                  // let tmpIdx = smallidx + 8
                  // const maxidx = (LastIdx < tmpIdx) ? LastIdx : tmpIdx
                  // const minidx = maxidx - 8  // often this equal smallidx
                  var tmpIdx = smallidx - 1;
                  tmpIdx = (FirstIdx > tmpIdx) ? FirstIdx : tmpIdx;
                  var smaller = (MagicInts[tmpIdx] / 2) | 0;
                  var smallnum = (MagicInts[smallidx] / 2) | 0;
                  sizesmall[0] = sizesmall[1] = sizesmall[2] = MagicInts[smallidx];
                  // larger = MagicInts[maxidx]
                  var adz = Math.ceil(dv.getInt32(offset) / 4) * 4;
                  offset += 4;
                  // if (tmpIdx == 0) {alert("Undocumented error 2"); return;}
                  // buf = new Int32Array(bin, offset);
                  // buf8 = new Uint8Array(bin, offset);
                  // tmpIdx += 3; rndup = tmpIdx%4;
                  // for (i=tmpIdx+rndup-1; i>=tmpIdx; i--) buf8[i] = 0;
                  // now unpack buf2...
                  var invPrecision = 1.0 / precision;
                  var run = 0;
                  var i$2 = 0;
                  var buf8 = new Uint8Array(bin, offset); // 229...
                  thiscoord[0] = thiscoord[1] = thiscoord[2] = 0;
                  while (i$2 < lsize) {
                      if (bitsize === 0) {
                          thiscoord[0] = decodeBits(buf, buf8, bitsizeint[0], buf2);
                          thiscoord[1] = decodeBits(buf, buf8, bitsizeint[1], buf2);
                          thiscoord[2] = decodeBits(buf, buf8, bitsizeint[2], buf2);
                      }
                      else {
                          decodeInts(buf, buf8, 3, bitsize, sizeint, thiscoord, buf2);
                      }
                      i$2++;
                      thiscoord[0] += minMaxInt[0];
                      thiscoord[1] += minMaxInt[1];
                      thiscoord[2] += minMaxInt[2];
                      prevcoord[0] = thiscoord[0];
                      prevcoord[1] = thiscoord[1];
                      prevcoord[2] = thiscoord[2];
                      var flag = decodeBits(buf, buf8, 1, buf2);
                      var isSmaller = 0;
                      if (flag === 1) {
                          run = decodeBits(buf, buf8, 5, buf2);
                          isSmaller = run % 3;
                          run -= isSmaller;
                          isSmaller--;
                      }
                      // if ((lfp-ptrstart)+run > size3){
                      //   fprintf(stderr, "(xdrfile error) Buffer overrun during decompression.\n");
                      //   return 0;
                      // }
                      if (run > 0) {
                          thiscoord[0] = thiscoord[1] = thiscoord[2] = 0;
                          for (var k = 0; k < run; k += 3) {
                              decodeInts(buf, buf8, 3, smallidx, sizesmall, thiscoord, buf2);
                              i$2++;
                              thiscoord[0] += prevcoord[0] - smallnum;
                              thiscoord[1] += prevcoord[1] - smallnum;
                              thiscoord[2] += prevcoord[2] - smallnum;
                              if (k === 0) {
                                  // interchange first with second atom for
                                  // better compression of water molecules
                                  var tmpSwap = thiscoord[0];
                                  thiscoord[0] = prevcoord[0];
                                  prevcoord[0] = tmpSwap;
                                  tmpSwap = thiscoord[1];
                                  thiscoord[1] = prevcoord[1];
                                  prevcoord[1] = tmpSwap;
                                  tmpSwap = thiscoord[2];
                                  thiscoord[2] = prevcoord[2];
                                  prevcoord[2] = tmpSwap;
                                  frameCoords[lfp++] = prevcoord[0] * invPrecision;
                                  frameCoords[lfp++] = prevcoord[1] * invPrecision;
                                  frameCoords[lfp++] = prevcoord[2] * invPrecision;
                              }
                              else {
                                  prevcoord[0] = thiscoord[0];
                                  prevcoord[1] = thiscoord[1];
                                  prevcoord[2] = thiscoord[2];
                              }
                              frameCoords[lfp++] = thiscoord[0] * invPrecision;
                              frameCoords[lfp++] = thiscoord[1] * invPrecision;
                              frameCoords[lfp++] = thiscoord[2] * invPrecision;
                          }
                      }
                      else {
                          frameCoords[lfp++] = thiscoord[0] * invPrecision;
                          frameCoords[lfp++] = thiscoord[1] * invPrecision;
                          frameCoords[lfp++] = thiscoord[2] * invPrecision;
                      }
                      smallidx += isSmaller;
                      if (isSmaller < 0) {
                          smallnum = smaller;
                          if (smallidx > FirstIdx) {
                              smaller = (MagicInts[smallidx - 1] / 2) | 0;
                          }
                          else {
                              smaller = 0;
                          }
                      }
                      else if (isSmaller > 0) {
                          smaller = smallnum;
                          smallnum = (MagicInts[smallidx] / 2) | 0;
                      }
                      sizesmall[0] = sizesmall[1] = sizesmall[2] = MagicInts[smallidx];
                      if (sizesmall[0] === 0 || sizesmall[1] === 0 || sizesmall[2] === 0) {
                          console.error('(xdrfile error) Undefined error.');
                          return;
                      }
                  }
                  offset += adz;
              }
              for (var c = 0; c < natoms3; c++) {
                  frameCoords[c] *= 10;
              }
              coordinates.push(frameCoords);
              if (offset >= bin.byteLength)
                  { break; }
          }
          if (times.length >= 1) {
              f.timeOffset = times[0];
          }
          if (times.length >= 2) {
              f.deltaTime = times[1] - times[0];
          }
          if (exports.Debug)
              { Log.timeEnd('XtcParser._parse ' + this.name); }
      };

      Object.defineProperties( XtcParser.prototype, prototypeAccessors );

      return XtcParser;
  }(TrajectoryParser));
  ParserRegistry.add('xtc', XtcParser);

  /**
   * @file Volume Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var VolumeParser = /*@__PURE__*/(function (Parser) {
      function VolumeParser(streamer, params) {
          var p = params || {};
          Parser.call(this, streamer, p);
          this.volume = new Volume(this.name, this.path);
          this.voxelSize = defaults(p.voxelSize, 1);
      }

      if ( Parser ) VolumeParser.__proto__ = Parser;
      VolumeParser.prototype = Object.create( Parser && Parser.prototype );
      VolumeParser.prototype.constructor = VolumeParser;

      var prototypeAccessors = { type: { configurable: true },__objName: { configurable: true } };
      prototypeAccessors.type.get = function () { return 'volume'; };
      prototypeAccessors.__objName.get = function () { return 'volume'; };
      VolumeParser.prototype._afterParse = function _afterParse () {
          this.volume.setMatrix(this.getMatrix());
          Parser.prototype._afterParse.call(this);
      };
      VolumeParser.prototype.getMatrix = function getMatrix () {
          return new Matrix4();
      };

      Object.defineProperties( VolumeParser.prototype, prototypeAccessors );

      return VolumeParser;
  }(Parser));

  /**
   * @file Cube Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  // @author Johanna Tiemann <johanna.tiemann@googlemail.com>
  // @author Alexander Rose <alexander.rose@weirdbyte.de>
  var reWhitespace$2 = /\s+/;
  var reScientificNotation = /-?\d+(?:\.\d*)?(?:[eE][+-]?\d+)?/g;
  var bohrToAngstromFactor = 0.529177210859;
  var CubeParser = /*@__PURE__*/(function (VolumeParser) {
      function CubeParser () {
          VolumeParser.apply(this, arguments);
      }

      if ( VolumeParser ) CubeParser.__proto__ = VolumeParser;
      CubeParser.prototype = Object.create( VolumeParser && VolumeParser.prototype );
      CubeParser.prototype.constructor = CubeParser;

      var prototypeAccessors = { type: { configurable: true } };

      prototypeAccessors.type.get = function () { return 'cube'; };
      CubeParser.prototype._parse = function _parse () {
          // http://paulbourke.net/dataformats/cube/
          if (exports.Debug)
              { Log.time('CubeParser._parse ' + this.name); }
          var v = this.volume;
          var headerLines = this.streamer.peekLines(6);
          var header = {};
          var scaleFactor = bohrToAngstromFactor * this.voxelSize;
          function h(k, l) {
              var field = headerLines[k].trim().split(reWhitespace$2)[l];
              return parseFloat(field);
          }
          header.atomCount = Math.abs(h(2, 0)); // Number of atoms
          header.originX = h(2, 1) * bohrToAngstromFactor; // Position of origin of volumetric data
          header.originY = h(2, 2) * bohrToAngstromFactor;
          header.originZ = h(2, 3) * bohrToAngstromFactor;
          header.NVX = h(3, 0); // Number of voxels
          header.NVY = h(4, 0);
          header.NVZ = h(5, 0);
          header.basisX = new Vector3(h(3, 1), h(3, 2), h(3, 3))
              .multiplyScalar(scaleFactor);
          header.basisY = new Vector3(h(4, 1), h(4, 2), h(4, 3))
              .multiplyScalar(scaleFactor);
          header.basisZ = new Vector3(h(5, 1), h(5, 2), h(5, 3))
              .multiplyScalar(scaleFactor);
          var data = new Float32Array(header.NVX * header.NVY * header.NVZ);
          var count = 0;
          var lineNo = 0;
          var oribitalFlag = h(2, 0) > 0 ? 0 : 1;
          function _parseChunkOfLines(_i, _n, lines) {
              for (var i = _i; i < _n; ++i) {
                  var line = lines[i].trim();
                  if (line !== '' && lineNo >= header.atomCount + 6 + oribitalFlag) {
                      var m = line.match(reScientificNotation);
                      for (var j = 0, lj = m.length; j < lj; ++j) {
                          data[count] = parseFloat(m[j]);
                          ++count;
                      }
                  }
                  ++lineNo;
              }
          }
          this.streamer.eachChunkOfLines(function (lines /*, chunkNo, chunkCount */) {
              _parseChunkOfLines(0, lines.length, lines);
          });
          v.header = header;
          v.setData(data, header.NVZ, header.NVY, header.NVX);
          if (exports.Debug)
              { Log.timeEnd('CubeParser._parse ' + this.name); }
      };
      CubeParser.prototype.getMatrix = function getMatrix () {
          var h = this.volume.header;
          var matrix = new Matrix4();
          matrix.multiply(new Matrix4().makeTranslation(h.originX, h.originY, h.originZ));
          matrix.multiply(new Matrix4().makeBasis(h.basisZ, h.basisY, h.basisX));
          return matrix;
      };

      Object.defineProperties( CubeParser.prototype, prototypeAccessors );

      return CubeParser;
  }(VolumeParser));
  ParserRegistry.add('cub', CubeParser);
  ParserRegistry.add('cube', CubeParser);

  /**
   * @file Dsn6 Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var Dsn6Parser = /*@__PURE__*/(function (VolumeParser) {
      function Dsn6Parser () {
          VolumeParser.apply(this, arguments);
      }

      if ( VolumeParser ) Dsn6Parser.__proto__ = VolumeParser;
      Dsn6Parser.prototype = Object.create( VolumeParser && VolumeParser.prototype );
      Dsn6Parser.prototype.constructor = Dsn6Parser;

      var prototypeAccessors = { type: { configurable: true },isBinary: { configurable: true } };

      prototypeAccessors.type.get = function () { return 'dsn6'; };
      prototypeAccessors.isBinary.get = function () { return true; };
      Dsn6Parser.prototype._parse = function _parse () {
          // DSN6 http://www.uoxray.uoregon.edu/tnt/manual/node104.html
          // BRIX http://svn.cgl.ucsf.edu/svn/chimera/trunk/libs/VolumeData/dsn6/brix-1.html
          if (exports.Debug)
              { Log.time('Dsn6Parser._parse ' + this.name); }
          var v = this.volume;
          var header = {};
          var divisor, summand;
          var bin = ensureBuffer(this.streamer.data);
          var intView = new Int16Array(bin);
          var byteView = new Uint8Array(bin);
          var brixStr = String.fromCharCode.apply(null, byteView.subarray(0, 512));
          if (brixStr.startsWith(':-)')) {
              header.xStart = parseInt(brixStr.substr(10, 5)); // NXSTART
              header.yStart = parseInt(brixStr.substr(15, 5));
              header.zStart = parseInt(brixStr.substr(20, 5));
              header.xExtent = parseInt(brixStr.substr(32, 5)); // NX
              header.yExtent = parseInt(brixStr.substr(38, 5));
              header.zExtent = parseInt(brixStr.substr(42, 5));
              header.xRate = parseInt(brixStr.substr(52, 5)); // MX
              header.yRate = parseInt(brixStr.substr(58, 5));
              header.zRate = parseInt(brixStr.substr(62, 5));
              header.xlen = parseFloat(brixStr.substr(73, 10)) * this.voxelSize;
              header.ylen = parseFloat(brixStr.substr(83, 10)) * this.voxelSize;
              header.zlen = parseFloat(brixStr.substr(93, 10)) * this.voxelSize;
              header.alpha = parseFloat(brixStr.substr(103, 10));
              header.beta = parseFloat(brixStr.substr(113, 10));
              header.gamma = parseFloat(brixStr.substr(123, 10));
              divisor = parseFloat(brixStr.substr(138, 12)) / 100;
              summand = parseInt(brixStr.substr(155, 8));
              header.sigma = parseFloat(brixStr.substr(170, 12)) * 100;
          }
          else {
              // swap byte order when big endian
              if (intView[18] !== 100) {
                  for (var i$1 = 0, n = intView.length; i$1 < n; ++i$1) {
                      var val = intView[i$1];
                      intView[i$1] = ((val & 0xff) << 8) | ((val >> 8) & 0xff);
                  }
              }
              header.xStart = intView[0]; // NXSTART
              header.yStart = intView[1];
              header.zStart = intView[2];
              header.xExtent = intView[3]; // NX
              header.yExtent = intView[4];
              header.zExtent = intView[5];
              header.xRate = intView[6]; // MX
              header.yRate = intView[7];
              header.zRate = intView[8];
              var factor = 1 / intView[17];
              var scalingFactor = factor * this.voxelSize;
              header.xlen = intView[9] * scalingFactor;
              header.ylen = intView[10] * scalingFactor;
              header.zlen = intView[11] * scalingFactor;
              header.alpha = intView[12] * factor;
              header.beta = intView[13] * factor;
              header.gamma = intView[14] * factor;
              divisor = intView[15] / 100;
              summand = intView[16];
              header.gamma = intView[14] * factor;
          }
          v.header = header;
          if (exports.Debug)
              { Log.log(header, divisor, summand); }
          var data = new Float32Array(header.xExtent * header.yExtent * header.zExtent);
          var offset = 512;
          var xBlocks = Math.ceil(header.xExtent / 8);
          var yBlocks = Math.ceil(header.yExtent / 8);
          var zBlocks = Math.ceil(header.zExtent / 8);
          // loop over blocks
          for (var zz = 0; zz < zBlocks; ++zz) {
              for (var yy = 0; yy < yBlocks; ++yy) {
                  for (var xx = 0; xx < xBlocks; ++xx) {
                      // loop inside block
                      for (var k = 0; k < 8; ++k) {
                          var z = 8 * zz + k;
                          for (var j = 0; j < 8; ++j) {
                              var y = 8 * yy + j;
                              for (var i = 0; i < 8; ++i) {
                                  var x = 8 * xx + i;
                                  // check if remaining slice-part contains data
                                  if (x < header.xExtent && y < header.yExtent && z < header.zExtent) {
                                      var idx = ((((x * header.yExtent) + y) * header.zExtent) + z);
                                      data[idx] = (byteView[offset] - summand) / divisor;
                                      ++offset;
                                  }
                                  else {
                                      offset += 8 - i;
                                      break;
                                  }
                              }
                          }
                      }
                  }
              }
          }
          v.setData(data, header.zExtent, header.yExtent, header.xExtent);
          if (header.sigma) {
              v.setStats(undefined, undefined, undefined, header.sigma);
          }
          if (exports.Debug)
              { Log.timeEnd('Dsn6Parser._parse ' + this.name); }
      };
      Dsn6Parser.prototype.getMatrix = function getMatrix () {
          var h = this.volume.header;
          var basisX = [
              h.xlen,
              0,
              0
          ];
          var basisY = [
              h.ylen * Math.cos(Math.PI / 180.0 * h.gamma),
              h.ylen * Math.sin(Math.PI / 180.0 * h.gamma),
              0
          ];
          var basisZ = [
              h.zlen * Math.cos(Math.PI / 180.0 * h.beta),
              h.zlen * (Math.cos(Math.PI / 180.0 * h.alpha) -
                  Math.cos(Math.PI / 180.0 * h.gamma) *
                      Math.cos(Math.PI / 180.0 * h.beta)) / Math.sin(Math.PI / 180.0 * h.gamma),
              0
          ];
          basisZ[2] = Math.sqrt(h.zlen * h.zlen * Math.sin(Math.PI / 180.0 * h.beta) *
              Math.sin(Math.PI / 180.0 * h.beta) - basisZ[1] * basisZ[1]);
          var basis = [[], basisX, basisY, basisZ];
          var nxyz = [0, h.xRate, h.yRate, h.zRate];
          var mapcrs = [0, 1, 2, 3];
          var matrix = new Matrix4();
          matrix.set(basis[mapcrs[1]][0] / nxyz[mapcrs[1]], basis[mapcrs[2]][0] / nxyz[mapcrs[2]], basis[mapcrs[3]][0] / nxyz[mapcrs[3]], 0, basis[mapcrs[1]][1] / nxyz[mapcrs[1]], basis[mapcrs[2]][1] / nxyz[mapcrs[2]], basis[mapcrs[3]][1] / nxyz[mapcrs[3]], 0, basis[mapcrs[1]][2] / nxyz[mapcrs[1]], basis[mapcrs[2]][2] / nxyz[mapcrs[2]], basis[mapcrs[3]][2] / nxyz[mapcrs[3]], 0, 0, 0, 0, 1);
          matrix.multiply(new Matrix4().makeRotationY(degToRad(90)));
          matrix.multiply(new Matrix4().makeTranslation(-h.zStart, h.yStart, h.xStart));
          matrix.multiply(new Matrix4().makeScale(-1, 1, 1));
          return matrix;
      };

      Object.defineProperties( Dsn6Parser.prototype, prototypeAccessors );

      return Dsn6Parser;
  }(VolumeParser));
  ParserRegistry.add('dsn6', Dsn6Parser);
  ParserRegistry.add('brix', Dsn6Parser);

  /**
   * @file Dx Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var reWhitespace$1 = /\s+/;
  var DxParser = /*@__PURE__*/(function (VolumeParser) {
      function DxParser () {
          VolumeParser.apply(this, arguments);
      }

      if ( VolumeParser ) DxParser.__proto__ = VolumeParser;
      DxParser.prototype = Object.create( VolumeParser && VolumeParser.prototype );
      DxParser.prototype.constructor = DxParser;

      var prototypeAccessors = { type: { configurable: true } };

      prototypeAccessors.type.get = function () { return 'dx'; };
      DxParser.prototype._parse = function _parse () {
          // http://apbs-pdb2pqr.readthedocs.io/en/latest/formats/opendx.html
          if (exports.Debug)
              { Log.time('DxParser._parse ' + this.name); }
          var v = this.volume;
          var headerLines = this.streamer.peekLines(30);
          var headerInfo = this.parseHeaderLines(headerLines);
          var header = this.volume.header;
          var dataLineStart = headerInfo.dataLineStart;
          var size = header.nx * header.ny * header.nz;
          var data = new Float32Array(size);
          var count = 0;
          var lineNo = 0;
          function _parseChunkOfLines(_i, _n, lines) {
              for (var i = _i; i < _n; ++i) {
                  if (count < size && lineNo > dataLineStart) {
                      var line = lines[i].trim();
                      if (line !== '') {
                          var ls = line.split(reWhitespace$1);
                          for (var j = 0, lj = ls.length; j < lj; ++j) {
                              data[count] = parseFloat(ls[j]);
                              ++count;
                          }
                      }
                  }
                  ++lineNo;
              }
          }
          this.streamer.eachChunkOfLines(function (lines /*, chunkNo, chunkCount */) {
              _parseChunkOfLines(0, lines.length, lines);
          });
          v.setData(data, header.nz, header.ny, header.nx);
          if (exports.Debug)
              { Log.timeEnd('DxParser._parse ' + this.name); }
      };
      DxParser.prototype.parseHeaderLines = function parseHeaderLines (headerLines) {
          var header = {};
          var n = headerLines.length;
          var dataLineStart = 0;
          var headerByteCount = 0;
          var deltaLineCount = 0;
          for (var i = 0; i < n; ++i) {
              var ls = (void 0);
              var line = headerLines[i];
              if (line.startsWith('object 1')) {
                  ls = line.split(reWhitespace$1);
                  header.nx = parseInt(ls[5]);
                  header.ny = parseInt(ls[6]);
                  header.nz = parseInt(ls[7]);
              }
              else if (line.startsWith('origin')) {
                  ls = line.split(reWhitespace$1);
                  header.xmin = parseFloat(ls[1]);
                  header.ymin = parseFloat(ls[2]);
                  header.zmin = parseFloat(ls[3]);
              }
              else if (line.startsWith('delta')) {
                  ls = line.split(reWhitespace$1);
                  if (deltaLineCount === 0) {
                      header.hx = parseFloat(ls[1]) * this.voxelSize;
                  }
                  else if (deltaLineCount === 1) {
                      header.hy = parseFloat(ls[2]) * this.voxelSize;
                  }
                  else if (deltaLineCount === 2) {
                      header.hz = parseFloat(ls[3]) * this.voxelSize;
                  }
                  deltaLineCount += 1;
              }
              else if (line.startsWith('object 3')) {
                  dataLineStart = i;
                  headerByteCount += line.length + 1;
                  break;
              }
              headerByteCount += line.length + 1;
          }
          this.volume.header = header;
          return {
              dataLineStart: dataLineStart,
              headerByteCount: headerByteCount
          };
      };
      DxParser.prototype.getMatrix = function getMatrix () {
          var h = this.volume.header;
          var matrix = new Matrix4();
          matrix.multiply(new Matrix4().makeRotationY(degToRad(90)));
          matrix.multiply(new Matrix4().makeTranslation(-h.zmin, h.ymin, h.xmin));
          matrix.multiply(new Matrix4().makeScale(-h.hz, h.hy, h.hx));
          return matrix;
      };

      Object.defineProperties( DxParser.prototype, prototypeAccessors );

      return DxParser;
  }(VolumeParser));
  ParserRegistry.add('dx', DxParser);

  /**
   * @file Dxbin Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var DxbinParser = /*@__PURE__*/(function (DxParser) {
      function DxbinParser () {
          DxParser.apply(this, arguments);
      }

      if ( DxParser ) DxbinParser.__proto__ = DxParser;
      DxbinParser.prototype = Object.create( DxParser && DxParser.prototype );
      DxbinParser.prototype.constructor = DxbinParser;

      var prototypeAccessors = { type: { configurable: true },isBinary: { configurable: true } };

      prototypeAccessors.type.get = function () { return 'dxbin'; };
      prototypeAccessors.isBinary.get = function () { return true; };
      DxbinParser.prototype._parse = function _parse () {
          // https://github.com/Electrostatics/apbs-pdb2pqr/issues/216
          if (exports.Debug)
              { Log.time('DxbinParser._parse ' + this.name); }
          var bin = ensureBuffer(this.streamer.data);
          var headerLines = uint8ToLines(new Uint8Array(bin, 0, 1000));
          var headerInfo = this.parseHeaderLines(headerLines);
          var header = this.volume.header;
          var headerByteCount = headerInfo.headerByteCount;
          var size = header.nx * header.ny * header.nz;
          var dv = new DataView(bin);
          var data = new Float32Array(size);
          for (var i = 0; i < size; ++i) {
              data[i] = dv.getFloat64(i * 8 + headerByteCount, true);
          }
          this.volume.setData(data, header.nz, header.ny, header.nx);
          if (exports.Debug)
              { Log.timeEnd('DxbinParser._parse ' + this.name); }
      };

      Object.defineProperties( DxbinParser.prototype, prototypeAccessors );

      return DxbinParser;
  }(DxParser));
  ParserRegistry.add('dxbin', DxbinParser);

  /**
   * @file Mrc Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var MrcParser = /*@__PURE__*/(function (VolumeParser) {
      function MrcParser () {
          VolumeParser.apply(this, arguments);
      }

      if ( VolumeParser ) MrcParser.__proto__ = VolumeParser;
      MrcParser.prototype = Object.create( VolumeParser && VolumeParser.prototype );
      MrcParser.prototype.constructor = MrcParser;

      var prototypeAccessors = { type: { configurable: true },isBinary: { configurable: true } };

      prototypeAccessors.type.get = function () { return 'mrc'; };
      prototypeAccessors.isBinary.get = function () { return true; };
      MrcParser.prototype._parse = function _parse () {
          // MRC
          // http://ami.scripps.edu/software/mrctools/mrc_specification.php
          // http://www2.mrc-lmb.cam.ac.uk/research/locally-developed-software/image-processing-software/#image
          // http://bio3d.colorado.edu/imod/doc/mrc_format.txt
          // CCP4 (MAP)
          // http://www.ccp4.ac.uk/html/maplib.html
          // MRC format does not use the skew transformation header records (words 25-37)
          // CCP4 format does not use the ORIGIN header records (words 50-52)
          if (exports.Debug)
              { Log.time('MrcParser._parse ' + this.name); }
          var v = this.volume;
          var header = {};
          var bin = ensureBuffer(this.streamer.data);
          var intView = new Int32Array(bin, 0, 56);
          var floatView = new Float32Array(bin, 0, 56);
          var dv = new DataView(bin);
          // 53  MAP         Character string 'MAP ' to identify file type
          header.MAP = String.fromCharCode(dv.getUint8(52 * 4), dv.getUint8(52 * 4 + 1), dv.getUint8(52 * 4 + 2), dv.getUint8(52 * 4 + 3));
          // 54  MACHST      Machine stamp indicating machine type which wrote file
          //                 17 and 17 for big-endian or 68 and 65 for little-endian
          header.MACHST = [dv.getUint8(53 * 4), dv.getUint8(53 * 4 + 1)];
          // swap byte order when big endian
          if (header.MACHST[0] === 17 && header.MACHST[1] === 17) {
              var n = bin.byteLength;
              for (var i = 0; i < n; i += 4) {
                  dv.setFloat32(i, dv.getFloat32(i), true);
              }
          }
          header.NX = intView[0]; // NC - columns (fastest changing)
          header.NY = intView[1]; // NR - rows
          header.NZ = intView[2]; // NS - sections (slowest changing)
          // mode
          //  0 image : signed 8-bit bytes range -128 to 127
          //  1 image : 16-bit halfwords
          //  2 image : 32-bit reals
          //  3 transform : complex 16-bit integers
          //  4 transform : complex 32-bit reals
          //  6 image : unsigned 16-bit range 0 to 65535
          // 16 image: unsigned char * 3 (for rgb data, non-standard)
          //
          // Note: Mode 2 is the normal mode used in the CCP4 programs.
          //       Other modes than 2 and 0 may NOT WORK
          header.MODE = intView[3];
          // start
          header.NXSTART = intView[4]; // NCSTART - first column
          header.NYSTART = intView[5]; // NRSTART - first row
          header.NZSTART = intView[6]; // NSSTART - first section
          // intervals
          header.MX = intView[7]; // intervals along x
          header.MY = intView[8]; // intervals along y
          header.MZ = intView[9]; // intervals along z
          // cell length (Angstroms in CCP4)
          header.xlen = floatView[10] * this.voxelSize;
          header.ylen = floatView[11] * this.voxelSize;
          header.zlen = floatView[12] * this.voxelSize;
          // cell angle (Degrees)
          header.alpha = floatView[13];
          header.beta = floatView[14];
          header.gamma = floatView[15];
          // axis correspondence (1,2,3 for X,Y,Z)
          header.MAPC = intView[16]; // column
          header.MAPR = intView[17]; // row
          header.MAPS = intView[18]; // section
          // density statistics
          header.DMIN = floatView[19];
          header.DMAX = floatView[20];
          header.DMEAN = floatView[21];
          // space group number 0 or 1 (default=0)
          header.ISPG = intView[22];
          // number of bytes used for symmetry data (0 or 80)
          header.NSYMBT = intView[23];
          // Flag for skew transformation, =0 none, =1 if foll
          header.LSKFLG = intView[24];
          // 26-34  SKWMAT  Skew matrix S (in order S11, S12, S13, S21 etc) if
          //                LSKFLG .ne. 0.
          // 35-37  SKWTRN  Skew translation t if LSKFLG != 0.
          //                Skew transformation is from standard orthogonal
          //                coordinate frame (as used for atoms) to orthogonal
          //                map frame, as Xo(map) = S * (Xo(atoms) - t)
          // 38      future use       (some of these are used by the MSUBSX routines
          //  .          "              in MAPBRICK, MAPCONT and FRODO)
          //  .          "   (all set to zero by default)
          //  .          "
          // 52          "
          // 50-52 origin in X,Y,Z used for transforms
          header.originX = floatView[49];
          header.originY = floatView[50];
          header.originZ = floatView[51];
          // 53  MAP         Character string 'MAP ' to identify file type
          // => see top of this parser
          // 54  MACHST      Machine stamp indicating machine type which wrote file
          // => see top of this parser
          // Rms deviation of map from mean density
          header.ARMS = floatView[54];
          // 56      NLABL           Number of labels being used
          // 57-256  LABEL(20,10)    10  80 character text labels (ie. A4 format)
          v.header = header;
          // Log.log( header );
          var data;
          if (header.MODE === 2) {
              data = new Float32Array(bin, 256 * 4 + header.NSYMBT, header.NX * header.NY * header.NZ);
          }
          else if (header.MODE === 0) {
              data = new Float32Array(new Int8Array(bin, 256 * 4 + header.NSYMBT, header.NX * header.NY * header.NZ));
              // based on uglymol (https://github.com/uglymol/uglymol) by Marcin Wojdyr (wojdyr)
              // if the file was converted by mapmode2to0 - scale the data
              if (intView[39] === -128 && intView[40] === 127) {
                  // scaling f(x)=b1*x+b0 such that f(-128)=min and f(127)=max
                  var b1 = (header.DMAX - header.DMIN) / 255.0;
                  var b0 = 0.5 * (header.DMIN + header.DMAX + b1);
                  for (var j = 0, jl = data.length; j < jl; ++j) {
                      data[j] = b1 * data[j] + b0;
                  }
              }
          }
          else {
              Log.error('MrcParser unknown mode', header.MODE);
          }
          v.setData(data, header.NX, header.NY, header.NZ);
          if (header.ARMS !== 0) {
              v.setStats(header.DMIN, header.DMAX, header.DMEAN, header.ARMS);
          }
          if (exports.Debug)
              { Log.timeEnd('MrcParser._parse ' + this.name); }
      };
      MrcParser.prototype.getMatrix = function getMatrix () {
          var h = this.volume.header;
          var basisX = [
              h.xlen,
              0,
              0
          ];
          var basisY = [
              h.ylen * Math.cos(Math.PI / 180.0 * h.gamma),
              h.ylen * Math.sin(Math.PI / 180.0 * h.gamma),
              0
          ];
          var basisZ = [
              h.zlen * Math.cos(Math.PI / 180.0 * h.beta),
              h.zlen * (Math.cos(Math.PI / 180.0 * h.alpha) -
                  Math.cos(Math.PI / 180.0 * h.gamma) *
                      Math.cos(Math.PI / 180.0 * h.beta)) / Math.sin(Math.PI / 180.0 * h.gamma),
              0
          ];
          basisZ[2] = Math.sqrt(h.zlen * h.zlen * Math.sin(Math.PI / 180.0 * h.beta) *
              Math.sin(Math.PI / 180.0 * h.beta) - basisZ[1] * basisZ[1]);
          var basis = [[], basisX, basisY, basisZ];
          var nxyz = [0, h.MX, h.MY, h.MZ];
          var mapcrs = [0, h.MAPC, h.MAPR, h.MAPS];
          var matrix = new Matrix4();
          matrix.set(basis[mapcrs[1]][0] / nxyz[mapcrs[1]], basis[mapcrs[2]][0] / nxyz[mapcrs[2]], basis[mapcrs[3]][0] / nxyz[mapcrs[3]], 0, basis[mapcrs[1]][1] / nxyz[mapcrs[1]], basis[mapcrs[2]][1] / nxyz[mapcrs[2]], basis[mapcrs[3]][1] / nxyz[mapcrs[3]], 0, basis[mapcrs[1]][2] / nxyz[mapcrs[1]], basis[mapcrs[2]][2] / nxyz[mapcrs[2]], basis[mapcrs[3]][2] / nxyz[mapcrs[3]], 0, 0, 0, 0, 1);
          matrix.setPosition(new Vector3(h.originX, h.originY, h.originZ));
          matrix.multiply(new Matrix4().makeTranslation(h.NXSTART, h.NYSTART, h.NZSTART));
          return matrix;
      };

      Object.defineProperties( MrcParser.prototype, prototypeAccessors );

      return MrcParser;
  }(VolumeParser));
  ParserRegistry.add('mrc', MrcParser);
  ParserRegistry.add('ccp4', MrcParser);
  ParserRegistry.add('map', MrcParser);

  /**
   * @file Xplor Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var reWhitespace = /\s+/;
  function parseNumberLine(line) {
      return line.trim().split(reWhitespace).map(parseFloat);
  }
  var XplorParser = /*@__PURE__*/(function (VolumeParser) {
      function XplorParser () {
          VolumeParser.apply(this, arguments);
      }

      if ( VolumeParser ) XplorParser.__proto__ = VolumeParser;
      XplorParser.prototype = Object.create( VolumeParser && VolumeParser.prototype );
      XplorParser.prototype.constructor = XplorParser;

      var prototypeAccessors = { type: { configurable: true } };

      prototypeAccessors.type.get = function () { return 'xplor'; };
      XplorParser.prototype._parse = function _parse () {
          // http://hincklab.uthscsa.edu/html/soft_packs/msi_docs/insight980/xplor/formats.html
          // http://www.mrc-lmb.cam.ac.uk/public/xtal/doc/cns/cns_1.3/tutorial/formats/maps/text.html
          if (exports.Debug)
              { Log.time('XplorParser._parse ' + this.name); }
          var v = this.volume;
          var headerLines = this.streamer.peekLines(8);
          var header = {};
          var infoStart;
          if (headerLines[2].startsWith('REMARKS')) {
              infoStart = parseInt(headerLines[1].substring(0, 8)) + 2;
          }
          else {
              infoStart = 5;
          }
          var dataStart = infoStart + 3;
          var gridInfo = parseNumberLine(headerLines[infoStart]);
          header.NA = gridInfo[0];
          header.AMIN = gridInfo[1];
          header.AMAX = gridInfo[2];
          header.NB = gridInfo[3];
          header.BMIN = gridInfo[4];
          header.BMAX = gridInfo[5];
          header.NC = gridInfo[6];
          header.CMIN = gridInfo[7];
          header.CMAX = gridInfo[8];
          var cellInfo = parseNumberLine(headerLines[infoStart + 1]);
          header.a = cellInfo[0] * this.voxelSize;
          header.b = cellInfo[1] * this.voxelSize;
          header.c = cellInfo[2] * this.voxelSize;
          header.alpha = cellInfo[3];
          header.beta = cellInfo[4];
          header.gamma = cellInfo[5];
          var na = header.AMAX - header.AMIN + 1;
          var nb = header.BMAX - header.BMIN + 1;
          var nc = header.CMAX - header.CMIN + 1;
          var n = na * nb * nc;
          var data = new Float32Array(n);
          var lineSection = Math.ceil(1 + (na * nb) / 6);
          var count = 0;
          var lineNo = 0;
          function _parseChunkOfLines(_i, _n, lines) {
              for (var i = _i; i < _n; ++i) {
                  var line = lines[i];
                  if (lineNo >= dataStart && (lineNo - dataStart) % lineSection !== 0 && count < n) {
                      for (var j = 0, lj = 6; j < lj; ++j) {
                          var value = parseFloat(line.substr(12 * j, 12));
                          if (isNaN(value)) {
                              break;
                          } // Last line of map section
                          data[count++] = value;
                      }
                  }
                  else if (count === n) {
                      var lt = line.trim();
                      if (lt && lt !== '-9999') {
                          var ls = parseNumberLine(line);
                          header.RAVE = ls[0];
                          header.RSIGMA = ls[1];
                      }
                  }
                  ++lineNo;
              }
          }
          this.streamer.eachChunkOfLines(function (lines /*, chunkNo, chunkCount */) {
              _parseChunkOfLines(0, lines.length, lines);
          });
          v.header = header;
          v.setData(data, na, nb, nc);
          if (header.RAVE !== 0 && header.RSIGMA !== 1) {
              v.setStats(undefined, undefined, header.RAVE, header.RSIGMA);
          }
          if (exports.Debug)
              { Log.timeEnd('XplorParser._parse ' + this.name); }
      };
      XplorParser.prototype.getMatrix = function getMatrix () {
          var h = this.volume.header;
          var basisX = [
              h.a,
              0,
              0
          ];
          var basisY = [
              h.b * Math.cos(Math.PI / 180.0 * h.gamma),
              h.b * Math.sin(Math.PI / 180.0 * h.gamma),
              0
          ];
          var basisZ = [
              h.c * Math.cos(Math.PI / 180.0 * h.beta),
              h.c * (Math.cos(Math.PI / 180.0 * h.alpha) -
                  Math.cos(Math.PI / 180.0 * h.gamma) *
                      Math.cos(Math.PI / 180.0 * h.beta)) / Math.sin(Math.PI / 180.0 * h.gamma),
              0
          ];
          basisZ[2] = Math.sqrt(h.c * h.c * Math.sin(Math.PI / 180.0 * h.beta) *
              Math.sin(Math.PI / 180.0 * h.beta) - basisZ[1] * basisZ[1]);
          var basis = [[], basisX, basisY, basisZ];
          var nxyz = [0, h.NA, h.NB, h.NC];
          var mapcrs = [0, 1, 2, 3];
          var matrix = new Matrix4();
          matrix.set(basis[mapcrs[1]][0] / nxyz[mapcrs[1]], basis[mapcrs[2]][0] / nxyz[mapcrs[2]], basis[mapcrs[3]][0] / nxyz[mapcrs[3]], 0, basis[mapcrs[1]][1] / nxyz[mapcrs[1]], basis[mapcrs[2]][1] / nxyz[mapcrs[2]], basis[mapcrs[3]][1] / nxyz[mapcrs[3]], 0, basis[mapcrs[1]][2] / nxyz[mapcrs[1]], basis[mapcrs[2]][2] / nxyz[mapcrs[2]], basis[mapcrs[3]][2] / nxyz[mapcrs[3]], 0, 0, 0, 0, 1);
          matrix.multiply(new Matrix4().makeTranslation(h.AMIN, h.BMIN, h.CMIN));
          return matrix;
      };

      Object.defineProperties( XplorParser.prototype, prototypeAccessors );

      return XplorParser;
  }(VolumeParser));
  ParserRegistry.add('xplor', XplorParser);
  ParserRegistry.add('cns', XplorParser);

  /**
   * @file Kin Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function hsvToRgb(h, s, v) {
      h /= 360;
      s /= 100;
      v /= 100;
      var r, g, b;
      var i = Math.floor(h * 6);
      var f = h * 6 - i;
      var p = v * (1 - s);
      var q = v * (1 - f * s);
      var t = v * (1 - (1 - f) * s);
      switch (i % 6) {
          case 0:
              r = v;
              g = t;
              b = p;
              break;
          case 1:
              r = q;
              g = v;
              b = p;
              break;
          case 2:
              r = p;
              g = v;
              b = t;
              break;
          case 3:
              r = p;
              g = q;
              b = v;
              break;
          case 4:
              r = t;
              g = p;
              b = v;
              break;
          case 5:
              r = v;
              g = p;
              b = q;
              break;
      }
      return [r, g, b];
  }
  var ColorDict = {
      red: hsvToRgb(0, 100, 100),
      orange: hsvToRgb(20, 100, 100),
      gold: hsvToRgb(40, 100, 100),
      yellow: hsvToRgb(60, 100, 100),
      lime: hsvToRgb(80, 100, 100),
      green: hsvToRgb(120, 80, 100),
      sea: hsvToRgb(150, 100, 100),
      cyan: hsvToRgb(180, 100, 85),
      sky: hsvToRgb(210, 75, 95),
      blue: hsvToRgb(240, 70, 100),
      purple: hsvToRgb(275, 75, 100),
      magenta: hsvToRgb(300, 95, 100),
      hotpink: hsvToRgb(335, 100, 100),
      pink: hsvToRgb(350, 55, 100),
      peach: hsvToRgb(25, 75, 100),
      lilac: hsvToRgb(275, 55, 100),
      pinktint: hsvToRgb(340, 30, 100),
      peachtint: hsvToRgb(25, 50, 100),
      yellowtint: hsvToRgb(60, 50, 100),
      greentint: hsvToRgb(135, 40, 100),
      bluetint: hsvToRgb(220, 40, 100),
      lilactint: hsvToRgb(275, 35, 100),
      white: hsvToRgb(0, 0, 100),
      gray: hsvToRgb(0, 0, 50),
      brown: hsvToRgb(20, 45, 75),
      deadwhite: [1, 1, 1],
      deadblack: [0, 0, 0],
      invisible: [0, 0, 0]
  };
  var reWhitespaceComma = /[\s,]+/;
  var reCurlyWhitespace = /[^{}\s]*{[^{}]+}|[^{}\s]+/g;
  var reTrimCurly = /^{+|}+$/g;
  var reTrimQuotes = /^['"]+|['"]+$/g;
  var reCollapseEqual = /\s*=\s*/g;
  function parseListDef(line) {
      var name;
      var defaultColor;
      var master = [];
      var width;
      line = line.replace(reCollapseEqual, '=');
      var lm = line.match(reCurlyWhitespace);
      for (var j = 1; j < lm.length; ++j) {
          var e = lm[j];
          if (e[0] === '{') {
              name = e.substring(1, e.length - 1);
          }
          else {
              var es = e.split('=');
              if (es.length === 2) {
                  if (es[0] === 'color') {
                      defaultColor = ColorDict[es[1]];
                  }
                  else if (es[0] === 'width') {
                      width = parseInt(es[1]);
                  }
                  else if (es[0] === 'master') {
                      master.push(es[1].replace(reTrimCurly, ''));
                  }
              }
          }
      }
      return {
          listName: name,
          listColor: defaultColor,
          listMasters: master,
          listWidth: width
      };
  }
  function parseListElm(line) {
      line = line.trim();
      var idx1 = line.indexOf('{');
      var idx2 = line.indexOf('}');
      var ls = line.substr(idx2 + 1).split(reWhitespaceComma);
      var label = line.substr(idx1 + 1, idx2 - 1);
      var position = [
          parseFloat(ls[ls.length - 3]),
          parseFloat(ls[ls.length - 2]),
          parseFloat(ls[ls.length - 1])
      ];
      var color, width, radius;
      var lineBreak = false;
      var triangleBreak = false;
      for (var lsindex = 4; lsindex <= ls.length; lsindex++) {
          var literal = ls[ls.length - lsindex];
          if (literal in ColorDict) {
              color = ColorDict[ls[ls.length - lsindex]];
          }
          if (literal.startsWith('width')) {
              width = parseInt(literal.substring(5));
          }
          if (literal.startsWith('r=')) {
              radius = parseFloat(literal.split('=')[1]);
          }
          if (literal.startsWith('P')) {
              lineBreak = true;
          }
          if (literal.startsWith('X')) {
              triangleBreak = true;
          }
      }
      // const color = line[ idx2 + 1 ] === ' ' ? undefined : ColorDict[ ls[ 0 ] ]
      return {
          label: label,
          position: position,
          color: color,
          radius: radius,
          width: width,
          isLineBreak: lineBreak,
          isTriangleBreak: triangleBreak
      };
  }
  function parseStr(line) {
      var start = line.indexOf('{');
      var end = line.indexOf('}');
      return line.substring(start !== -1 ? start + 1 : 0, end !== -1 ? end : undefined).trim();
  }
  function parseFlag(line) {
      var end = line.indexOf('}');
      return end === -1 ? undefined : line.substr(end + 1).trim();
  }
  function parseGroup(line) {
      var name = '';
      var master = [];
      var flags = {};
      line = line.replace(reCollapseEqual, '=');
      var lm = line.match(reCurlyWhitespace);
      for (var j = 1; j < lm.length; ++j) {
          var e = lm[j];
          if (e[0] === '{') {
              name = e.substring(1, e.length - 1);
          }
          else {
              var es = e.split('=');
              if (es.length === 2) {
                  if (es[0] === 'master') {
                      master.push(es[1].replace(reTrimCurly, ''));
                  }
                  else {
                      flags[es[0]] = es[1].replace(reTrimCurly, '');
                  }
              }
              else {
                  flags[es[0]] = true;
              }
          }
      }
      return { groupName: name,
          groupFlags: flags,
          groupMasters: master
      };
  }
  function convertKinTriangleArrays(ribbonObject) {
      // have to convert ribbons/triangle lists from stripdrawmode to normal drawmode
      // index                    [ 0 1 2 3 4 5 6 7 8 91011 ]
      // label [ 0 1 2 3 4 5 ] to [ 0 1 2 1 2 3 2 3 4 3 4 5 ]
      // convertedindex                                      [ 0 1 2 3 4 5 6 7 8 91011121314151617181920212223242526 ]
      // index          [ 0 1 2 3 4 5 6 7 8 91011121314 ]    [ 0 1 2 3 4 5 6 7 8 3 4 5 6 7 8 91011 6 7 8 91011121314 ]
      // position/color [ 0 0 0 1 1 1 2 2 2 3 3 3 4 4 4 ] to [ 0 0 0 1 1 1 2 2 2 1 1 1 2 2 2 3 3 3 2 2 2 3 3 3 4 4 4 ]
      var labelArray = ribbonObject.labelArray;
      var positionArray = ribbonObject.positionArray;
      var colorArray = ribbonObject.colorArray;
      var breakArray = ribbonObject.breakArray;
      var convertedLabels = [];
      for (var i = 0; i < (labelArray.length - 2) * 3; ++i) {
          convertedLabels[i] = labelArray[i - Math.floor(i / 3) * 2];
      }
      var convertedBreaks = [];
      for (var i$1 = 0; i$1 < (breakArray.length - 2) * 3; ++i$1) {
          convertedBreaks[i$1] = breakArray[i$1 - Math.floor(i$1 / 3) * 2];
      }
      var convertedPositions = [];
      for (var i$2 = 0; i$2 < (positionArray.length / 3 - 2) * 9; ++i$2) {
          convertedPositions[i$2] = positionArray[i$2 - Math.floor(i$2 / 9) * 6];
      }
      var convertedColors = [];
      for (var i$3 = 0; i$3 < (colorArray.length / 3 - 2) * 9; ++i$3) {
          convertedColors[i$3] = colorArray[i$3 - Math.floor(i$3 / 9) * 6];
      }
      var vector3Positions = [];
      for (var i$4 = 0; i$4 < (convertedPositions.length) / 3; ++i$4) {
          vector3Positions.push(new Vector3(convertedPositions[i$4 * 3], convertedPositions[i$4 * 3] + 1, convertedPositions[i$4 * 3] + 2));
      }
      //let normals = []
      //for (let i = 0; i < vector3Positions.length - 1; ++i) {
      //  let normalVec3 = vector3Positions[i].cross(vector3Positions[i + 1])
      //  normals.push(normalVec3.x)
      //  normals.push(normalVec3.y)
      //  normals.push(normalVec3.z)
      //}
      return {
          name: ribbonObject.name,
          masterArray: ribbonObject.masterArray,
          labelArray: convertedLabels,
          positionArray: convertedPositions,
          breakArray: convertedBreaks,
          colorArray: convertedColors
      };
  }
  function removePointBreaksTriangleArrays(convertedRibbonObject) {
      // after converting ribbon/triangle arrys to drawmode, removed point break triangles
      // label [ 0 1 2 3 4 5 ] to [ 0 1 2 1 2 3 2 3 4 3 4 5 ]
      // position/color [ 0 0 0 1 1 1 2 2 2 3 3 3 4 4 4 ] to [ 0 0 0 1 1 1 2 2 2 1 1 1 2 2 2 3 3 3 2 2 2 3 3 3 4 4 4 ]
      var labelArray = convertedRibbonObject.labelArray;
      var positionArray = convertedRibbonObject.positionArray;
      var colorArray = convertedRibbonObject.colorArray;
      var breakArray = convertedRibbonObject.breakArray;
      var editedLabels = [];
      var editedPositions = [];
      var editedColors = [];
      var editedBreaks = [];
      for (var i = 0; i < breakArray.length / 3; i++) {
          var breakPointer = i * 3;
          var positionPointer = i * 9;
          if (!breakArray[breakPointer + 1] && !breakArray[breakPointer + 2]) {
              editedLabels.push(labelArray[breakPointer]);
              editedLabels.push(labelArray[breakPointer + 1]);
              editedLabels.push(labelArray[breakPointer + 2]);
              editedBreaks.push(breakArray[breakPointer]);
              editedBreaks.push(breakArray[breakPointer + 1]);
              editedBreaks.push(breakArray[breakPointer + 2]);
              editedPositions.push(positionArray[positionPointer]);
              editedPositions.push(positionArray[positionPointer + 1]);
              editedPositions.push(positionArray[positionPointer + 2]);
              editedPositions.push(positionArray[positionPointer + 3]);
              editedPositions.push(positionArray[positionPointer + 4]);
              editedPositions.push(positionArray[positionPointer + 5]);
              editedPositions.push(positionArray[positionPointer + 6]);
              editedPositions.push(positionArray[positionPointer + 7]);
              editedPositions.push(positionArray[positionPointer + 8]);
              editedColors.push(colorArray[positionPointer]);
              editedColors.push(colorArray[positionPointer + 1]);
              editedColors.push(colorArray[positionPointer + 2]);
              editedColors.push(colorArray[positionPointer + 3]);
              editedColors.push(colorArray[positionPointer + 4]);
              editedColors.push(colorArray[positionPointer + 5]);
              editedColors.push(colorArray[positionPointer + 6]);
              editedColors.push(colorArray[positionPointer + 7]);
              editedColors.push(colorArray[positionPointer + 8]);
          }
      }
      return {
          name: convertedRibbonObject.name,
          masterArray: convertedRibbonObject.masterArray,
          labelArray: editedLabels,
          positionArray: editedPositions,
          breakArray: editedBreaks,
          colorArray: editedColors
      };
  }
  var KinParser = /*@__PURE__*/(function (Parser) {
      function KinParser () {
          Parser.apply(this, arguments);
      }

      if ( Parser ) KinParser.__proto__ = Parser;
      KinParser.prototype = Object.create( Parser && Parser.prototype );
      KinParser.prototype.constructor = KinParser;

      var prototypeAccessors = { type: { configurable: true },__objName: { configurable: true } };

      prototypeAccessors.type.get = function () { return 'kin'; };
      prototypeAccessors.__objName.get = function () { return 'kinemage'; };
      KinParser.prototype._parse = function _parse () {
          // http://kinemage.biochem.duke.edu/software/king.php
          if (exports.Debug)
              { Log.time(("KinParser._parse " + (this.name))); }
          var kinemage = {
              kinemage: undefined,
              onewidth: undefined,
              '1viewid': undefined,
              pdbfile: undefined,
              texts: [],
              text: '',
              captions: [],
              caption: '',
              groupDict: {},
              subgroupDict: {},
              masterDict: {},
              pointmasterDict: {},
              dotLists: [],
              vectorLists: [],
              ballLists: [],
              ribbonLists: []
          };
          this.kinemage = kinemage;
          var currentGroupMasters;
          var currentSubgroupMasters;
          var isDotList = false;
          var prevDotLabel = '';
          var dotDefaultColor;
          var dotLabel, dotPosition, dotColor;
          var isVectorList = false;
          var prevVecLabel = '';
          var prevVecPosition = null;
          var prevVecColor = null;
          var vecDefaultColor, vecDefaultWidth;
          var vecLabel1, vecLabel2, vecPosition1, vecPosition2, vecColor1, vecColor2;
          var isBallList = false;
          var prevBallLabel = '';
          var ballRadius, ballDefaultColor;
          var ballLabel, ballPosition, ballColor;
          var isRibbonList = false;
          var prevRibbonPointLabel = '';
          var ribbonListDefaultColor;
          var ribbonPointLabelArray, ribbonPointPositionArray, ribbonPointBreakArray, ribbonPointColorArray;
          var isText = false;
          var isCaption = false;
          // @vectorlist {mc} color= white  master= {mainchain}
          // { n   thr A   1  B13.79 1crnFH} P 17.047, 14.099, 3.625 { n   thr A   1  B13.79 1crnFH} L 17.047, 14.099, 3.625
          // @dotlist {x} color=white master={vdw contact} master={dots}
          // { CB  THR   1  A}sky  'P' 18.915,14.199,5.024
          function _parseChunkOfLines(_i, _n, lines) {
              for (var i = _i; i < _n; ++i) {
                  var line = lines[i];
                  if (line[0] === '@') {
                      isDotList = false;
                      isVectorList = false;
                      isBallList = false;
                      isRibbonList = false;
                      isText = false;
                      isCaption = false;
                  }
                  if (!line) {
                      isDotList = false;
                      isVectorList = false;
                      isBallList = false;
                      isRibbonList = false;
                  }
                  else if (line.startsWith('@dotlist')) {
                      // @dotlist {x} color=white master={vdw contact} master={dots}
                      var ref = parseListDef(line);
                      var listColor = ref.listColor;
                      var listName = ref.listName;
                      var listMasters = ref.listMasters;
                      isDotList = true;
                      prevDotLabel = '';
                      dotLabel = [];
                      dotPosition = [];
                      dotColor = [];
                      dotDefaultColor = listColor;
                      if (currentGroupMasters) {
                          listMasters = listMasters.concat(currentGroupMasters);
                      }
                      if (currentSubgroupMasters) {
                          listMasters = listMasters.concat(currentSubgroupMasters);
                      }
                      kinemage.dotLists.push({
                          name: listName,
                          masterArray: listMasters,
                          labelArray: dotLabel,
                          positionArray: dotPosition,
                          colorArray: dotColor
                      });
                  }
                  else if (line.startsWith('@vectorlist')) {
                      // @vectorlist {x} color=white master={small overlap} master={dots}
                      var ref$1 = parseListDef(line);
                      var listMasters$1 = ref$1.listMasters;
                      var listName$1 = ref$1.listName;
                      var listWidth = ref$1.listWidth;
                      var listColor$1 = ref$1.listColor;
                      if (listMasters$1) {
                          listMasters$1.forEach(function (name) {
                              if (!kinemage.masterDict[name]) {
                                  kinemage.masterDict[name] = {
                                      indent: false,
                                      visible: false
                                  };
                              }
                          });
                      }
                      isVectorList = true;
                      prevVecLabel = '';
                      prevVecPosition = null;
                      prevVecColor = null;
                      vecLabel1 = [];
                      vecLabel2 = [];
                      vecPosition1 = [];
                      vecPosition2 = [];
                      vecColor1 = [];
                      vecColor2 = [];
                      vecDefaultColor = listColor$1;
                      vecDefaultWidth = [];
                      if (listWidth) {
                          vecDefaultWidth.push(listWidth);
                      }
                      if (currentGroupMasters) {
                          listMasters$1 = listMasters$1.concat(currentGroupMasters);
                      }
                      if (currentSubgroupMasters) {
                          listMasters$1 = listMasters$1.concat(currentSubgroupMasters);
                      }
                      kinemage.vectorLists.push({
                          name: listName$1,
                          masterArray: listMasters$1,
                          label1Array: vecLabel1,
                          label2Array: vecLabel2,
                          position1Array: vecPosition1,
                          position2Array: vecPosition2,
                          color1Array: vecColor1,
                          color2Array: vecColor2,
                          width: vecDefaultWidth
                      });
                  }
                  else if (line.startsWith('@balllist')) {
                      var ref$2 = parseListDef(line);
                      var listName$2 = ref$2.listName;
                      var listColor$2 = ref$2.listColor;
                      var listMasters$2 = ref$2.listMasters;
                      if (listMasters$2) {
                          listMasters$2.forEach(function (name) {
                              if (!kinemage.masterDict[name]) {
                                  kinemage.masterDict[name] = {
                                      indent: false,
                                      visible: false
                                  };
                              }
                          });
                      }
                      isBallList = true;
                      prevBallLabel = '';
                      ballLabel = [];
                      ballRadius = [];
                      ballPosition = [];
                      ballColor = [];
                      ballDefaultColor = listColor$2;
                      if (currentGroupMasters) {
                          listMasters$2 = listMasters$2.concat(currentGroupMasters);
                      }
                      if (currentSubgroupMasters) {
                          listMasters$2 = listMasters$2.concat(currentSubgroupMasters);
                      }
                      kinemage.ballLists.push({
                          name: listName$2,
                          masterArray: listMasters$2,
                          labelArray: ballLabel,
                          radiusArray: ballRadius,
                          positionArray: ballPosition,
                          colorArray: ballColor
                      });
                  }
                  else if (line.startsWith('@ribbonlist') || line.startsWith('@trianglelist')) {
                      var ref$3 = parseListDef(line);
                      var listMasters$3 = ref$3.listMasters;
                      var listName$3 = ref$3.listName;
                      var listColor$3 = ref$3.listColor;
                      if (listMasters$3) {
                          listMasters$3.forEach(function (name) {
                              if (!kinemage.masterDict[name]) {
                                  kinemage.masterDict[name] = {
                                      indent: false,
                                      visible: false
                                  };
                              }
                          });
                      }
                      isRibbonList = true;
                      prevRibbonPointLabel = '';
                      ribbonPointLabelArray = [];
                      ribbonPointPositionArray = [];
                      ribbonPointBreakArray = [];
                      ribbonPointColorArray = [];
                      ribbonListDefaultColor = listColor$3;
                      if (currentGroupMasters) {
                          listMasters$3 = listMasters$3.concat(currentGroupMasters);
                      }
                      if (currentSubgroupMasters) {
                          listMasters$3 = listMasters$3.concat(currentSubgroupMasters);
                      }
                      kinemage.ribbonLists.push({
                          name: listName$3,
                          masterArray: listMasters$3,
                          labelArray: ribbonPointLabelArray,
                          positionArray: ribbonPointPositionArray,
                          breakArray: ribbonPointBreakArray,
                          colorArray: ribbonPointColorArray
                      });
                  }
                  else if (line.startsWith('@text')) {
                      isText = true;
                      kinemage.texts.push(line.substr(5));
                  }
                  else if (line.startsWith('@caption')) {
                      isCaption = true;
                      kinemage.captions.push(line.substr(8));
                  }
                  else if (isDotList) {
                      // { CB  THR   1  A}sky  'P' 18.915,14.199,5.024
                      var ref$4 = parseListElm(line);
                      var label = ref$4.label;
                      var color = ref$4.color;
                      var position = ref$4.position;
                      if (label === '"') {
                          label = prevDotLabel;
                      }
                      else {
                          prevDotLabel = label;
                      }
                      if (color === undefined) {
                          color = dotDefaultColor;
                      }
                      dotLabel.push(label);
                      dotPosition.push.apply(dotPosition, position);
                      dotColor.push.apply(dotColor, color);
                  }
                  else if (isVectorList) {
                      // { n   thr A   1  B13.79 1crnFH} P 17.047, 14.099, 3.625 { n   thr A   1  B13.79 1crnFH} L 17.047, 14.099, 3.625
                      var doubleLine = line.replace(/(?!^){/g, '\n{');
                      var splitLine = doubleLine.split(/\n/);
                      for (var i2 = 0; i2 < splitLine.length; i2++) {
                          var singlePointLine = splitLine[i2];
                          var ref$5 = parseListElm(singlePointLine);
                          var label$1 = ref$5.label;
                          var color$1 = ref$5.color;
                          var width = ref$5.width;
                          var position$1 = ref$5.position;
                          var isLineBreak = ref$5.isLineBreak;
                          if (label$1 === '"') {
                              label$1 = prevVecLabel;
                          }
                          else {
                              prevVecLabel = label$1;
                          }
                          if (color$1 === undefined) {
                              color$1 = vecDefaultColor;
                          }
                          if (!isLineBreak) {
                              if (prevVecPosition !== null) {
                                  if (width) {
                                      vecDefaultWidth.push(width);
                                  }
                                  vecLabel1.push(prevVecLabel);
                                  vecPosition1.push.apply(vecPosition1, prevVecPosition);
                                  vecColor1.push.apply(vecColor1, prevVecColor);
                                  vecLabel2.push(label$1);
                                  vecPosition2.push.apply(vecPosition2, position$1);
                                  vecColor2.push.apply(vecColor2, color$1);
                              }
                          }
                          prevVecLabel = label$1;
                          prevVecPosition = position$1;
                          prevVecColor = color$1;
                      }
                  }
                  else if (isBallList) {
                      // {cb arg A   1   1.431 -106.80} r=1.431  39.085, 8.083, 22.182
                      var ref$6 = parseListElm(line);
                      var label$2 = ref$6.label;
                      var radius = ref$6.radius;
                      var color$2 = ref$6.color;
                      var position$2 = ref$6.position;
                      if (label$2 === '"') {
                          label$2 = prevBallLabel;
                      }
                      else {
                          prevBallLabel = label$2;
                      }
                      if (radius === undefined) {
                          radius = 1; // temporary default radius
                      }
                      if (color$2 === undefined) {
                          color$2 = ballDefaultColor;
                      }
                      ballLabel.push(label$2);
                      ballRadius.push(radius);
                      ballPosition.push.apply(ballPosition, position$2);
                      ballColor.push.apply(ballColor, color$2);
                  }
                  else if (isRibbonList) {
                      var ref$7 = parseListElm(line);
                      var label$3 = ref$7.label;
                      var color$3 = ref$7.color;
                      var position$3 = ref$7.position;
                      var isTriangleBreak = ref$7.isTriangleBreak;
                      if (label$3 === '"') {
                          label$3 = prevRibbonPointLabel;
                      }
                      else {
                          prevRibbonPointLabel = label$3;
                      }
                      if (color$3 === undefined) {
                          color$3 = ribbonListDefaultColor;
                      }
                      ribbonPointLabelArray.push(label$3);
                      ribbonPointPositionArray.push.apply(ribbonPointPositionArray, position$3);
                      ribbonPointBreakArray.push(isTriangleBreak);
                      ribbonPointColorArray.push.apply(ribbonPointColorArray, color$3);
                  }
                  else if (isText) {
                      kinemage.texts.push(line);
                  }
                  else if (isCaption) {
                      kinemage.captions.push(line);
                  }
                  else if (line.startsWith('@kinemage')) {
                      kinemage.kinemage = parseInt(line.substr(9).trim());
                  }
                  else if (line.startsWith('@onewidth')) {
                      kinemage.onewidth = true;
                  }
                  else if (line.startsWith('@1viewid')) {
                      kinemage['1viewid'] = parseStr(line);
                  }
                  else if (line.startsWith('@pdbfile')) {
                      kinemage.pdbfile = parseStr(line);
                  }
                  else if (line.startsWith('@group')) {
                      var ref$8 = parseGroup(line);
                      var groupName = ref$8.groupName;
                      var groupFlags = ref$8.groupFlags;
                      var groupMasters = ref$8.groupMasters;
                      if (!kinemage.groupDict[groupName]) {
                          kinemage.groupDict[groupName] = {
                              dominant: false,
                              animate: false
                          };
                          currentGroupMasters = groupMasters;
                      }
                      if (currentGroupMasters) {
                          currentGroupMasters.forEach(function (master) {
                              if (!kinemage.masterDict[master]) {
                                  kinemage.masterDict[master] = {
                                      indent: false,
                                      visible: false
                                  };
                              }
                          });
                      }
                      for (var key in groupFlags) {
                          kinemage.groupDict[groupName][key] = groupFlags[key];
                      }
                  }
                  else if (line.startsWith('@subgroup')) {
                      var ref$9 = parseGroup(line);
                      var groupName$1 = ref$9.groupName;
                      var groupFlags$1 = ref$9.groupFlags;
                      var groupMasters$1 = ref$9.groupMasters;
                      if (!kinemage.subgroupDict[groupName$1]) {
                          kinemage.subgroupDict[groupName$1] = {
                              dominant: false,
                              animate: false
                          };
                          currentSubgroupMasters = groupMasters$1;
                      }
                      if (currentSubgroupMasters) {
                          currentSubgroupMasters.forEach(function (master) {
                              if (!kinemage.masterDict[master]) {
                                  kinemage.masterDict[master] = {
                                      indent: false,
                                      visible: false
                                  };
                              }
                          });
                      }
                      for (var key$1 in groupFlags$1) {
                          kinemage.subgroupDict[groupName$1][key$1] = groupFlags$1[key$1];
                      }
                  }
                  else if (line.startsWith('@master')) {
                      var name = parseStr(line);
                      var flag = parseFlag(line);
                      if (!kinemage.masterDict[name]) {
                          kinemage.masterDict[name] = {
                              indent: false,
                              visible: false
                          };
                      }
                      if (flag === 'on') {
                          kinemage.masterDict[name].visible = true;
                      }
                      else if (flag === 'off') {
                          kinemage.masterDict[name].visible = false;
                      }
                      else if (flag === 'indent') {
                          kinemage.masterDict[name].indent = true;
                      }
                      else ;
                  }
                  else if (line.startsWith('@pointmaster')) {
                      var ref$10 = parseGroup(line);
                      var groupName$2 = ref$10.groupName;
                      var groupFlags$2 = ref$10.groupFlags;
                      kinemage.pointmasterDict[groupName$2] = {
                          id: Object.keys(groupFlags$2)[0].replace(reTrimQuotes, '')
                      };
                  }
                  else {
                      console.log(line);
                  }
              }
          }
          this.streamer.eachChunkOfLines(function (lines /*, chunkNo, chunkCount */) {
              _parseChunkOfLines(0, lines.length, lines);
          });
          kinemage.text = kinemage.texts.join('\n').trim();
          kinemage.caption = kinemage.captions.join('\n').trim();
          if (kinemage.ribbonLists) {
              var convertedLists = [];
              kinemage.ribbonLists.forEach(function (listObject) {
                  convertedLists.push(removePointBreaksTriangleArrays(convertKinTriangleArrays(listObject)));
              });
              kinemage.ribbonLists = convertedLists;
          }
          if (exports.Debug)
              { Log.timeEnd(("KinParser._parse " + (this.name))); }
      };

      Object.defineProperties( KinParser.prototype, prototypeAccessors );

      return KinParser;
  }(Parser));
  ParserRegistry.add('kin', KinParser);

  /**
   * @file Surface Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var SurfaceParser = /*@__PURE__*/(function (Parser) {
      function SurfaceParser(streamer, params) {
          Parser.call(this, streamer, params);
          this.loader = this.getLoader();
          this.surface = new Surface(this.name, this.path);
      }

      if ( Parser ) SurfaceParser.__proto__ = Parser;
      SurfaceParser.prototype = Object.create( Parser && Parser.prototype );
      SurfaceParser.prototype.constructor = SurfaceParser;

      var prototypeAccessors = { type: { configurable: true },__objName: { configurable: true } };
      prototypeAccessors.type.get = function () { return 'surface'; };
      prototypeAccessors.__objName.get = function () { return 'surface'; };
      SurfaceParser.prototype._parse = function _parse () {
          var geometry = this.loader.parse(this.streamer.asText());
          this.surface.fromGeometry(geometry);
      };

      Object.defineProperties( SurfaceParser.prototype, prototypeAccessors );

      return SurfaceParser;
  }(Parser));

  /**
   * @file Obj Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * OBJLoader
   * @class
   * @private
   * @author mrdoob / http://mrdoob.com/
   */
  var OBJLoader = (function OBJLoader() {
      this.regexp = {
          // v float float float
          vertex_pattern: /^v\s+([\d.+\-eE]+)\s+([\d.+\-eE]+)\s+([\d.+\-eE]+)/,
          // vn float float float
          normal_pattern: /^vn\s+([\d.+\-eE]+)\s+([\d.+\-eE]+)\s+([\d.+\-eE]+)/,
          // vt float float
          uv_pattern: /^vt\s+([\d.+\-eE]+)\s+([\d.+\-eE]+)/,
          // f vertex vertex vertex
          face_vertex: /^f\s+(-?\d+)\s+(-?\d+)\s+(-?\d+)(?:\s+(-?\d+))?/,
          // f vertex/uv vertex/uv vertex/uv
          face_vertex_uv: /^f\s+(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)(?:\s+(-?\d+)\/(-?\d+))?/,
          // f vertex/uv/normal vertex/uv/normal vertex/uv/normal
          face_vertex_uv_normal: /^f\s+(-?\d+)\/(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\/(-?\d+)(?:\s+(-?\d+)\/(-?\d+)\/(-?\d+))?/,
          // f vertex//normal vertex//normal vertex//normal
          face_vertex_normal: /^f\s+(-?\d+)\/\/(-?\d+)\s+(-?\d+)\/\/(-?\d+)\s+(-?\d+)\/\/(-?\d+)(?:\s+(-?\d+)\/\/(-?\d+))?/,
          // o object_name | g group_name
          object_pattern: /^[og]\s*(.+)?/,
          // s boolean
          smoothing_pattern: /^s\s+(\d+|on|off)/,
          // mtllib file_reference
          material_library_pattern: /^mtllib /,
          // usemtl material_name
          material_use_pattern: /^usemtl /
      };
  });
  OBJLoader.prototype = {
      constructor: OBJLoader,
      setPath: function (value) {
          this.path = value;
      },
      _createParserState: function () {
          var state = {
              objects: [],
              object: {},
              vertices: [],
              normals: [],
              startObject: function (name, fromDeclaration) {
                  // If the current object (initial from reset) is not from a g/o declaration in the parsed
                  // file. We need to use it for the first parsed g/o to keep things in sync.
                  if (this.object && this.object.fromDeclaration === false) {
                      this.object.name = name;
                      this.object.fromDeclaration = (fromDeclaration !== false);
                      return;
                  }
                  this.object = {
                      name: name || '',
                      geometry: {
                          vertices: [],
                          normals: []
                      },
                      fromDeclaration: (fromDeclaration !== false)
                  };
                  this.objects.push(this.object);
              },
              parseVertexIndex: function (value, len) {
                  var index = parseInt(value, 10);
                  return (index >= 0 ? index - 1 : index + len / 3) * 3;
              },
              parseNormalIndex: function (value, len) {
                  var index = parseInt(value, 10);
                  return (index >= 0 ? index - 1 : index + len / 3) * 3;
              },
              addVertex: function (a, b, c) {
                  var src = this.vertices;
                  var dst = this.object.geometry.vertices;
                  dst.push(src[a + 0]);
                  dst.push(src[a + 1]);
                  dst.push(src[a + 2]);
                  dst.push(src[b + 0]);
                  dst.push(src[b + 1]);
                  dst.push(src[b + 2]);
                  dst.push(src[c + 0]);
                  dst.push(src[c + 1]);
                  dst.push(src[c + 2]);
              },
              addVertexLine: function (a) {
                  var src = this.vertices;
                  var dst = this.object.geometry.vertices;
                  dst.push(src[a + 0]);
                  dst.push(src[a + 1]);
                  dst.push(src[a + 2]);
              },
              addNormal: function (a, b, c) {
                  var src = this.normals;
                  var dst = this.object.geometry.normals;
                  dst.push(src[a + 0]);
                  dst.push(src[a + 1]);
                  dst.push(src[a + 2]);
                  dst.push(src[b + 0]);
                  dst.push(src[b + 1]);
                  dst.push(src[b + 2]);
                  dst.push(src[c + 0]);
                  dst.push(src[c + 1]);
                  dst.push(src[c + 2]);
              },
              addFace: function (a, b, c, d, na, nb, nc, nd) {
                  var vLen = this.vertices.length;
                  var ia = this.parseVertexIndex(a, vLen);
                  var ib = this.parseVertexIndex(b, vLen);
                  var ic = this.parseVertexIndex(c, vLen);
                  var id;
                  if (d === undefined) {
                      this.addVertex(ia, ib, ic);
                  }
                  else {
                      id = this.parseVertexIndex(d, vLen);
                      this.addVertex(ia, ib, id);
                      this.addVertex(ib, ic, id);
                  }
                  if (na !== undefined) {
                      // Normals are many times the same. If so, skip function call and parseInt.
                      var nLen = this.normals.length;
                      ia = this.parseNormalIndex(na, nLen);
                      ib = na === nb ? ia : this.parseNormalIndex(nb, nLen);
                      ic = na === nc ? ia : this.parseNormalIndex(nc, nLen);
                      if (d === undefined) {
                          this.addNormal(ia, ib, ic);
                      }
                      else {
                          id = this.parseNormalIndex(nd, nLen);
                          this.addNormal(ia, ib, id);
                          this.addNormal(ib, ic, id);
                      }
                  }
              },
              addLineGeometry: function (vertices) {
                  this.object.geometry.type = 'Line';
                  var vLen = this.vertices.length;
                  for (var vi = 0, l = vertices.length; vi < l; vi++) {
                      this.addVertexLine(this.parseVertexIndex(vertices[vi], vLen));
                  }
              }
          };
          state.startObject('', false);
          return state;
      },
      parse: function (text) {
          var state = this._createParserState();
          if (text.indexOf('\r\n') !== -1) {
              // This is faster than String.split with regex that splits on both
              text = text.replace(/\r\n/g, '\n');
          }
          if (text.indexOf('\\\n') !== -1) {
              // join lines separated by a line continuation character (\)
              text = text.replace(/\\\n/g, '');
          }
          var i, l;
          var lines = text.split('\n');
          var line = '';
          var lineFirstChar = '';
          var lineSecondChar = '';
          var lineLength = 0;
          var result = [];
          // Faster to just trim left side of the line. Use if available.
          var trimLeft = (typeof ''.trimLeft === 'function');
          for (i = 0, l = lines.length; i < l; i++) {
              line = lines[i];
              line = trimLeft ? line.trimLeft() : line.trim();
              lineLength = line.length;
              if (lineLength === 0)
                  { continue; }
              lineFirstChar = line.charAt(0);
              // @todo invoke passed in handler if any
              if (lineFirstChar === '#')
                  { continue; }
              if (lineFirstChar === 'v') {
                  lineSecondChar = line.charAt(1);
                  if (lineSecondChar === ' ' && (result = this.regexp.vertex_pattern.exec(line)) !== null) {
                      // 0                  1      2      3
                      // ["v 1.0 2.0 3.0", "1.0", "2.0", "3.0"]
                      state.vertices.push(parseFloat(result[1]), parseFloat(result[2]), parseFloat(result[3]));
                  }
                  else if (lineSecondChar === 'n' && (result = this.regexp.normal_pattern.exec(line)) !== null) {
                      // 0                   1      2      3
                      // ["vn 1.0 2.0 3.0", "1.0", "2.0", "3.0"]
                      state.normals.push(parseFloat(result[1]), parseFloat(result[2]), parseFloat(result[3]));
                  }
                  else if (lineSecondChar === 't' && this.regexp.uv_pattern.exec(line) !== null) ;
                  else {
                      throw new Error("Unexpected vertex/normal/uv line: '" + line + "'");
                  }
              }
              else if (lineFirstChar === 'f') {
                  if ((result = this.regexp.face_vertex_uv_normal.exec(line)) !== null) {
                      // f vertex/uv/normal vertex/uv/normal vertex/uv/normal
                      // 0                        1    2    3    4    5    6    7    8    9   10         11         12
                      // ["f 1/1/1 2/2/2 3/3/3", "1", "1", "1", "2", "2", "2", "3", "3", "3", undefined, undefined, undefined]
                      state.addFace(result[1], result[4], result[7], result[10], 
                      // result[ 2 ], result[ 5 ], result[ 8 ], result[ 11 ],  // ignore uv part
                      result[3], result[6], result[9], result[12]);
                  }
                  else if (this.regexp.face_vertex_uv.exec(line) !== null) ;
                  else if ((result = this.regexp.face_vertex_normal.exec(line)) !== null) {
                      // f vertex//normal vertex//normal vertex//normal
                      // 0                     1    2    3    4    5    6   7          8
                      // ["f 1//1 2//2 3//3", "1", "1", "2", "2", "3", "3", undefined, undefined]
                      state.addFace(result[1], result[3], result[5], result[7], result[2], result[4], result[6], result[8]);
                  }
                  else if ((result = this.regexp.face_vertex.exec(line)) !== null) {
                      // f vertex vertex vertex
                      // 0            1    2    3   4
                      // ["f 1 2 3", "1", "2", "3", undefined]
                      state.addFace(result[1], result[2], result[3], result[4]);
                  }
                  else {
                      throw new Error("Unexpected face line: '" + line + "'");
                  }
              }
              else if (lineFirstChar === 'l') {
                  var lineParts = line.substring(1).trim().split(' ');
                  var lineVertices = [];
                  var lineUVs = [];
                  if (line.indexOf('/') === -1) {
                      lineVertices = lineParts;
                  }
                  else {
                      for (var li = 0, llen = lineParts.length; li < llen; li++) {
                          var parts = lineParts[li].split('/');
                          if (parts[0] !== '')
                              { lineVertices.push(parts[0]); }
                          if (parts[1] !== '')
                              { lineUVs.push(parts[1]); }
                      }
                  }
                  state.addLineGeometry(lineVertices, lineUVs);
              }
              else if ((result = this.regexp.object_pattern.exec(line)) !== null) {
                  // o object_name
                  // or
                  // g group_name
                  var name = result[0].substr(1).trim();
                  state.startObject(name);
                  // ignore material related lines
                  // eslint-disable-next-line no-empty
              }
              else if (this.regexp.material_use_pattern.test(line)) ;
              else if (this.regexp.material_library_pattern.test(line)) ;
              else if (this.regexp.smoothing_pattern.exec(line) !== null) ;
              else {
                  // Handle null terminated files without exception
                  if (line === '\0')
                      { continue; }
                  throw new Error("Unexpected line: '" + line + "'");
              }
          }
          var container = [];
          for (i = 0, l = state.objects.length; i < l; i++) {
              var object = state.objects[i];
              var geometry = object.geometry;
              // Skip o/g line declarations that did not follow with any faces
              if (geometry.vertices.length === 0)
                  { continue; }
              var buffergeometry = new BufferGeometry();
              buffergeometry.setAttribute('position', new BufferAttribute(new Float32Array(geometry.vertices), 3));
              if (geometry.normals.length > 0) {
                  buffergeometry.setAttribute('normal', new BufferAttribute(new Float32Array(geometry.normals), 3));
              }
              else {
                  buffergeometry.computeVertexNormals();
              }
              container.push(buffergeometry);
          }
          return container;
      }
  };
  var ObjParser = /*@__PURE__*/(function (SurfaceParser) {
      function ObjParser () {
          SurfaceParser.apply(this, arguments);
      }

      if ( SurfaceParser ) ObjParser.__proto__ = SurfaceParser;
      ObjParser.prototype = Object.create( SurfaceParser && SurfaceParser.prototype );
      ObjParser.prototype.constructor = ObjParser;

      var prototypeAccessors = { type: { configurable: true } };

      prototypeAccessors.type.get = function () { return 'obj'; };
      ObjParser.prototype.getLoader = function getLoader () {
          return new OBJLoader();
      };

      Object.defineProperties( ObjParser.prototype, prototypeAccessors );

      return ObjParser;
  }(SurfaceParser));
  ParserRegistry.add('obj', ObjParser);

  /**
   * @file Ply Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var PLYLoader = (function PLYLoader() {
      this.propertyNameMapping = {};
  });
  PLYLoader.prototype = {
      constructor: PLYLoader,
      setPropertyNameMapping: function (mapping) {
          this.propertyNameMapping = mapping;
      },
      bin2str: function (buf) {
          var arrayBuffer = new Uint8Array(buf);
          var str = '';
          for (var i = 0; i < buf.byteLength; i++) {
              str += String.fromCharCode(arrayBuffer[i]); // implicitly assumes little-endian
          }
          return str;
      },
      isASCII: function (data) {
          var header = this.parseHeader(this.bin2str(data));
          return header.format === 'ascii';
      },
      parse: function (data) {
          if (data instanceof ArrayBuffer) {
              return (this.isASCII(data)
                  ? this.parseASCII(this.bin2str(data))
                  : this.parseBinary(data));
          }
          else {
              return this.parseASCII(data);
          }
      },
      parseHeader: function (data) {
          var patternHeader = /ply([\s\S]*)end_header\s/;
          var headerText = '';
          var headerLength = 0;
          var result = patternHeader.exec(data);
          if (result !== null) {
              headerText = result[1];
              headerLength = result[0].length;
          }
          var header = {
              comments: [],
              elements: [],
              headerLength: headerLength
          };
          var lines = headerText.split('\n');
          var currentElement, lineType, lineValues;
          function makePlyElementProperty(propertValues, propertyNameMapping) {
              var property = {
                  type: propertValues[0]
              };
              if (property.type === 'list') {
                  property.name = propertValues[3];
                  property.countType = propertValues[1];
                  property.itemType = propertValues[2];
              }
              else {
                  property.name = propertValues[1];
              }
              if (property.name in propertyNameMapping) {
                  property.name = propertyNameMapping[property.name];
              }
              return property;
          }
          for (var i = 0; i < lines.length; i++) {
              var line = lines[i];
              line = line.trim();
              if (line === '') {
                  continue;
              }
              lineValues = line.split(/\s+/);
              lineType = lineValues.shift();
              line = lineValues.join(' ');
              switch (lineType) {
                  case 'format':
                      header.format = lineValues[0];
                      header.version = lineValues[1];
                      break;
                  case 'comment':
                      header.comments.push(line);
                      break;
                  case 'element':
                      if (currentElement !== undefined) {
                          header.elements.push(currentElement);
                      }
                      currentElement = {};
                      currentElement.name = lineValues[0];
                      currentElement.count = parseInt(lineValues[1]);
                      currentElement.properties = [];
                      break;
                  case 'property':
                      currentElement.properties.push(makePlyElementProperty(lineValues, this.propertyNameMapping));
                      break;
                  default:
                      console.log('unhandled', lineType, lineValues);
              }
          }
          if (currentElement !== undefined) {
              header.elements.push(currentElement);
          }
          return header;
      },
      parseASCIINumber: function (n, type) {
          switch (type) {
              case 'char':
              case 'uchar':
              case 'short':
              case 'ushort':
              case 'int':
              case 'uint':
              case 'int8':
              case 'uint8':
              case 'int16':
              case 'uint16':
              case 'int32':
              case 'uint32':
                  return parseInt(n);
              case 'float':
              case 'double':
              case 'float32':
              case 'float64':
                  return parseFloat(n);
          }
      },
      parseASCIIElement: function (properties, line) {
          var values = line.split(/\s+/);
          var element = {};
          for (var i = 0; i < properties.length; i++) {
              if (properties[i].type === 'list') {
                  var list = [];
                  var n = this.parseASCIINumber(values.shift(), properties[i].countType);
                  for (var j = 0; j < n; j++) {
                      list.push(this.parseASCIINumber(values.shift(), properties[i].itemType));
                  }
                  element[properties[i].name] = list;
              }
              else {
                  element[properties[i].name] = this.parseASCIINumber(values.shift(), properties[i].type);
              }
          }
          return element;
      },
      parseASCII: function (data) {
          // PLY ascii format specification, as per http://en.wikipedia.org/wiki/PLY_(file_format)
          var geometry = new Geometry();
          var result;
          var header = this.parseHeader(data);
          var patternBody = /end_header\s([\s\S]*)$/;
          var body = '';
          if ((result = patternBody.exec(data)) !== null) {
              body = result[1];
          }
          var lines = body.split('\n');
          var currentElement = 0;
          var currentElementCount = 0;
          geometry.useColor = false;
          for (var i = 0; i < lines.length; i++) {
              var line = lines[i];
              line = line.trim();
              if (line === '') {
                  continue;
              }
              if (currentElementCount >= header.elements[currentElement].count) {
                  currentElement++;
                  currentElementCount = 0;
              }
              var element = this.parseASCIIElement(header.elements[currentElement].properties, line);
              this.handleElement(geometry, header.elements[currentElement].name, element);
              currentElementCount++;
          }
          return this.postProcess(geometry);
      },
      postProcess: function (geometry) {
          if (geometry.useColor) {
              for (var i = 0; i < geometry.faces.length; i++) {
                  geometry.faces[i].vertexColors = [
                      geometry.colors[geometry.faces[i].a],
                      geometry.colors[geometry.faces[i].b],
                      geometry.colors[geometry.faces[i].c]
                  ];
              }
              geometry.elementsNeedUpdate = true;
          }
          geometry.computeBoundingSphere();
          return geometry;
      },
      handleElement: function (geometry, elementName, element) {
          if (elementName === 'vertex') {
              geometry.vertices.push(new Vector3(element.x, element.y, element.z));
              if ('red' in element && 'green' in element && 'blue' in element) {
                  geometry.useColor = true;
                  var color = new Color();
                  color.setRGB(element.red / 255.0, element.green / 255.0, element.blue / 255.0);
                  geometry.colors.push(color);
              }
          }
          else if (elementName === 'face') {
              var vertexIndices = element.vertex_indices;
              if (vertexIndices.length === 3) {
                  geometry.faces.push(new Face3(vertexIndices[0], vertexIndices[1], vertexIndices[2]));
              }
              else if (vertexIndices.length === 4) {
                  geometry.faces.push(new Face3(vertexIndices[0], vertexIndices[1], vertexIndices[3]), new Face3(vertexIndices[1], vertexIndices[2], vertexIndices[3]));
              }
          }
      },
      binaryRead: function (dataview, at, type, littleEndian) {
          switch (type) {
              // corespondences for non-specific length types here match rply:
              case 'int8':
              case 'char': return [dataview.getInt8(at), 1];
              case 'uint8':
              case 'uchar': return [dataview.getUint8(at), 1];
              case 'int16':
              case 'short': return [dataview.getInt16(at, littleEndian), 2];
              case 'uint16':
              case 'ushort': return [dataview.getUint16(at, littleEndian), 2];
              case 'int32':
              case 'int': return [dataview.getInt32(at, littleEndian), 4];
              case 'uint32':
              case 'uint': return [dataview.getUint32(at, littleEndian), 4];
              case 'float32':
              case 'float': return [dataview.getFloat32(at, littleEndian), 4];
              case 'float64':
              case 'double': return [dataview.getFloat64(at, littleEndian), 8];
          }
      },
      binaryReadElement: function (dataview, at, properties, littleEndian) {
          var element = {};
          var result;
          var read = 0;
          for (var i = 0; i < properties.length; i++) {
              if (properties[i].type === 'list') {
                  var list = [];
                  result = this.binaryRead(dataview, at + read, properties[i].countType, littleEndian);
                  var n = result[0];
                  read += result[1];
                  for (var j = 0; j < n; j++) {
                      result = this.binaryRead(dataview, at + read, properties[i].itemType, littleEndian);
                      list.push(result[0]);
                      read += result[1];
                  }
                  element[properties[i].name] = list;
              }
              else {
                  result = this.binaryRead(dataview, at + read, properties[i].type, littleEndian);
                  element[properties[i].name] = result[0];
                  read += result[1];
              }
          }
          return [element, read];
      },
      parseBinary: function (data) {
          var geometry = new Geometry();
          var header = this.parseHeader(this.bin2str(data));
          var littleEndian = (header.format === 'binary_little_endian');
          var body = new DataView(data, header.headerLength);
          var result;
          var loc = 0;
          for (var currentElement = 0; currentElement < header.elements.length; currentElement++) {
              for (var currentElementCount = 0; currentElementCount < header.elements[currentElement].count; currentElementCount++) {
                  result = this.binaryReadElement(body, loc, header.elements[currentElement].properties, littleEndian);
                  loc += result[1];
                  var element = result[0];
                  this.handleElement(geometry, header.elements[currentElement].name, element);
              }
          }
          return this.postProcess(geometry);
      }
  };
  var PlyParser = /*@__PURE__*/(function (SurfaceParser) {
      function PlyParser () {
          SurfaceParser.apply(this, arguments);
      }

      if ( SurfaceParser ) PlyParser.__proto__ = SurfaceParser;
      PlyParser.prototype = Object.create( SurfaceParser && SurfaceParser.prototype );
      PlyParser.prototype.constructor = PlyParser;

      var prototypeAccessors = { type: { configurable: true } };

      prototypeAccessors.type.get = function () { return 'ply'; };
      PlyParser.prototype.getLoader = function getLoader () {
          return new PLYLoader();
      };

      Object.defineProperties( PlyParser.prototype, prototypeAccessors );

      return PlyParser;
  }(SurfaceParser));
  ParserRegistry.add('ply', PlyParser);

  /**
   * @file Csv Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * CSV parser
   */
  var CsvParser = /*@__PURE__*/(function (Parser) {
      function CsvParser(streamer, params) {
          var p = params || {};
          Parser.call(this, streamer, p);
          this.delimiter = defaults(p.delimiter, ',');
          this.comment = defaults(p.comment, '#');
          this.columnNames = defaults(p.columnNames, false);
          this.table = {
              name: this.name,
              path: this.path,
              columnNames: [],
              data: []
          };
      }

      if ( Parser ) CsvParser.__proto__ = Parser;
      CsvParser.prototype = Object.create( Parser && Parser.prototype );
      CsvParser.prototype.constructor = CsvParser;

      var prototypeAccessors = { type: { configurable: true },__objName: { configurable: true } };
      prototypeAccessors.type.get = function () { return 'csv'; };
      prototypeAccessors.__objName.get = function () { return 'table'; };
      CsvParser.prototype._parse = function _parse () {
          var this$1$1 = this;

          var data = this.table.data;
          var reDelimiter = new RegExp('\\s*' + this.delimiter + '\\s*');
          var j = 0;
          this.streamer.eachChunkOfLines(function (chunk) {
              var n = chunk.length;
              for (var i = 0; i < n; ++i) {
                  var line = chunk[i].trim();
                  if (line.startsWith(this$1$1.comment))
                      { continue; }
                  var values = line.split(reDelimiter);
                  if (j === 0) {
                      this$1$1.table.columnNames = values;
                  }
                  else if (line) {
                      data.push(values);
                  }
                  ++j;
              }
          });
      };

      Object.defineProperties( CsvParser.prototype, prototypeAccessors );

      return CsvParser;
  }(Parser));
  ParserRegistry.add('csv', CsvParser);

  /**
   * @file Json Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var JsonParser = /*@__PURE__*/(function (Parser) {
      function JsonParser(streamer, params) {
          var p = params || {};
          Parser.call(this, streamer, p);
          this.string = defaults(p.string, false);
          this.json = {
              name: this.name,
              path: this.path,
              data: {}
          };
      }

      if ( Parser ) JsonParser.__proto__ = Parser;
      JsonParser.prototype = Object.create( Parser && Parser.prototype );
      JsonParser.prototype.constructor = JsonParser;

      var prototypeAccessors = { type: { configurable: true },__objName: { configurable: true },isJson: { configurable: true } };
      prototypeAccessors.type.get = function () { return 'json'; };
      prototypeAccessors.__objName.get = function () { return 'json'; };
      prototypeAccessors.isJson.get = function () { return true; };
      JsonParser.prototype._parse = function _parse () {
          if (this.streamer.isBinary() || this.string) {
              this.json.data = JSON.parse(this.streamer.asText());
          }
          else {
              this.json.data = this.streamer.data;
          }
      };

      Object.defineProperties( JsonParser.prototype, prototypeAccessors );

      return JsonParser;
  }(Parser));
  ParserRegistry.add('json', JsonParser);

  /**
   * @file Msgpack Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var MsgpackParser = /*@__PURE__*/(function (Parser) {
      function MsgpackParser(streamer, params) {
          var p = params || {};
          Parser.call(this, streamer, p);
          this.msgpack = {
              name: this.name,
              path: this.path,
              data: undefined
          };
      }

      if ( Parser ) MsgpackParser.__proto__ = Parser;
      MsgpackParser.prototype = Object.create( Parser && Parser.prototype );
      MsgpackParser.prototype.constructor = MsgpackParser;

      var prototypeAccessors = { type: { configurable: true },__objName: { configurable: true },isBinary: { configurable: true } };
      prototypeAccessors.type.get = function () { return 'msgpack'; };
      prototypeAccessors.__objName.get = function () { return 'msgpack'; };
      prototypeAccessors.isBinary.get = function () { return true; };
      MsgpackParser.prototype._parse = function _parse () {
          if (exports.Debug)
              { Log.time('MsgpackParser._parse ' + this.name); }
          this.msgpack.data = decodeMsgpack(this.streamer.data);
          if (exports.Debug)
              { Log.timeEnd('MsgpackParser._parse ' + this.name); }
      };

      Object.defineProperties( MsgpackParser.prototype, prototypeAccessors );

      return MsgpackParser;
  }(Parser));
  ParserRegistry.add('msgpack', MsgpackParser);

  /**
   * @file Netcdf Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var NetcdfParser = /*@__PURE__*/(function (Parser) {
      function NetcdfParser(streamer, params) {
          var p = params || {};
          Parser.call(this, streamer, p);
          this.netcdf = {
              name: this.name,
              path: this.path,
              data: undefined
          };
      }

      if ( Parser ) NetcdfParser.__proto__ = Parser;
      NetcdfParser.prototype = Object.create( Parser && Parser.prototype );
      NetcdfParser.prototype.constructor = NetcdfParser;

      var prototypeAccessors = { type: { configurable: true },__objName: { configurable: true },isBinary: { configurable: true } };
      prototypeAccessors.type.get = function () { return 'netcdf'; };
      prototypeAccessors.__objName.get = function () { return 'netcdf'; };
      prototypeAccessors.isBinary.get = function () { return true; };
      NetcdfParser.prototype._parse = function _parse () {
          if (exports.Debug)
              { Log.time('NetcdfParser._parse ' + this.name); }
          this.netcdf.data = new NetcdfReader(this.streamer.data);
          if (exports.Debug)
              { Log.timeEnd('NetcdfParser._parse ' + this.name); }
      };

      Object.defineProperties( NetcdfParser.prototype, prototypeAccessors );

      return NetcdfParser;
  }(Parser));
  ParserRegistry.add('netcdf', NetcdfParser);

  /**
   * @file Text Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var TextParser = /*@__PURE__*/(function (Parser) {
      function TextParser(streamer, params) {
          Parser.call(this, streamer, params);
          this.text = {
              name: this.name,
              path: this.path,
              data: ''
          };
      }

      if ( Parser ) TextParser.__proto__ = Parser;
      TextParser.prototype = Object.create( Parser && Parser.prototype );
      TextParser.prototype.constructor = TextParser;

      var prototypeAccessors = { type: { configurable: true },__objName: { configurable: true } };
      prototypeAccessors.type.get = function () { return 'text'; };
      prototypeAccessors.__objName.get = function () { return 'text'; };
      TextParser.prototype._parse = function _parse () {
          this.text.data = this.streamer.asText();
      };

      Object.defineProperties( TextParser.prototype, prototypeAccessors );

      return TextParser;
  }(Parser));
  ParserRegistry.add('txt', TextParser);
  ParserRegistry.add('text', TextParser);

  /**
   * @file Parse Xml
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var reStrip = /^['"]|['"]$/g;
  var reTag = /^<([\w-:.]+)\s*/;
  var reContent = /^([^<]*)/;
  var reAttr = /([\w:-]+)\s*=\s*("[^"]*"|'[^']*'|\w+)\s*/;
  function strip(val) {
      return val.replace(reStrip, '');
  }
  function parseXml(xml) {
      // trim and strip comments
      xml = xml.trim().replace(/<!--[\s\S]*?-->/g, '');
      return document();
      function document() {
          return {
              declaration: declaration(),
              root: tag()
          };
      }
      function declaration() {
          var m = match(/^<\?xml\s*/);
          if (!m)
              { return; }
          // tag
          var node = {
              attributes: {}
          };
          // attributes
          while (!(eos() || is('?>'))) {
              var attr = attribute();
              if (!attr)
                  { return node; }
              node.attributes[attr.name] = attr.value;
          }
          match(/\?>\s*/);
          return node;
      }
      function tag() {
          var m = match(reTag);
          if (!m)
              { return; }
          // name
          var node = {
              name: m[1],
              attributes: {},
              children: []
          };
          // attributes
          while (!(eos() || is('>') || is('?>') || is('/>'))) {
              var attr = attribute();
              if (!attr)
                  { return node; }
              node.attributes[attr.name] = attr.value;
          }
          // self closing tag
          if (match(/^\s*\/>\s*/)) {
              return node;
          }
          match(/\??>\s*/);
          // content
          node.content = content();
          // children
          var child;
          while ((child = tag())) {
              node.children.push(child);
          }
          // closing
          match(/^<\/[\w-:.]+>\s*/);
          return node;
      }
      function content() {
          var m = match(reContent);
          if (m)
              { return m[1]; }
          return '';
      }
      function attribute() {
          var m = match(reAttr);
          if (!m)
              { return; }
          return { name: m[1], value: strip(m[2]) };
      }
      function match(re) {
          var m = xml.match(re);
          if (!m)
              { return; }
          xml = xml.slice(m[0].length);
          return m;
      }
      function eos() {
          return xml.length === 0;
      }
      function is(prefix) {
          return xml.indexOf(prefix) === 0;
      }
  }

  /**
   * @file Xml Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var XmlParser = /*@__PURE__*/(function (Parser) {
      function XmlParser(streamer, params) {
          var p = params || {};
          Parser.call(this, streamer, p);
          this.useDomParser = defaults(p.useDomParser, false);
          this.xml = {
              name: this.name,
              path: this.path,
              data: {}
          };
      }

      if ( Parser ) XmlParser.__proto__ = Parser;
      XmlParser.prototype = Object.create( Parser && Parser.prototype );
      XmlParser.prototype.constructor = XmlParser;

      var prototypeAccessors = { type: { configurable: true },__objName: { configurable: true },isXml: { configurable: true } };
      prototypeAccessors.type.get = function () { return 'xml'; };
      prototypeAccessors.__objName.get = function () { return 'xml'; };
      prototypeAccessors.isXml.get = function () { return true; };
      XmlParser.prototype.__xmlParser = function __xmlParser (xml) {
          return parseXml(xml);
      };
      XmlParser.prototype.__domParser = function __domParser (xml) {
          var domParser = new window.DOMParser();
          return domParser.parseFromString(xml, 'text/xml');
      };
      XmlParser.prototype._parse = function _parse () {
          if (exports.Debug)
              { Log.time('XmlParser._parse ' + this.name); }
          if (this.useDomParser) {
              if (this.streamer.data instanceof Document) { //TS conversion: stripped the window prefix from window.Document
                  this.xml.data = this.streamer.data;
              }
              else {
                  this.xml.data = this.__domParser(this.streamer.asText());
              }
          }
          else {
              this.xml.data = this.__xmlParser(this.streamer.asText());
          }
          if (exports.Debug)
              { Log.timeEnd('XmlParser._parse ' + this.name); }
      };

      Object.defineProperties( XmlParser.prototype, prototypeAccessors );

      return XmlParser;
  }(Parser));
  ParserRegistry.add('xml', XmlParser);

  /**
   * @file Validation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function getNamedItem(a, name) {
      var item = a.getNamedItem(name);
      return item !== null ? item.value : '';
  }
  function getSele(a, atomname, useAltcode) {
      if ( useAltcode === void 0 ) useAltcode = false;

      var icode = getNamedItem(a, 'icode').trim();
      var chain = getNamedItem(a, 'chain').trim();
      var altcode = getNamedItem(a, 'altcode');
      var sele = getNamedItem(a, 'resnum');
      if (icode)
          { sele += '^' + icode; }
      if (chain)
          { sele += ':' + chain; }
      if (atomname)
          { sele += '.' + atomname; }
      if (useAltcode && altcode.trim())
          { sele += '%' + altcode; }
      sele += '/' + (parseInt(getNamedItem(a, 'model')) - 1);
      return sele;
  }
  function getResSele(a) {
      var chain = getNamedItem(a, 'chain').trim();
      var rescode = getNamedItem(a, 'rescode');
      var resnum = getNamedItem(a, 'resnum');
      var sele = "[" + rescode + "]" + resnum;
      if (chain)
          { sele += ":" + chain; }
      return sele;
  }
  function setBitDict(dict, key, bit) {
      if (dict[key] === undefined) {
          dict[key] = bit;
      }
      else {
          dict[key] |= bit;
      }
  }
  function hasAttrValue(attr, value) {
      return attr !== null && attr.value === value;
  }
  function getAtomSele(ap) {
      var icode = ap.inscode;
      var chain = ap.chainname;
      var atomname = ap.atomname;
      var altcode = ap.altloc;
      var sele = ap.resno + '';
      if (icode)
          { sele += '^' + icode; }
      if (chain)
          { sele += ':' + chain; }
      if (atomname)
          { sele += '.' + atomname; }
      if (altcode)
          { sele += '%' + altcode; }
      sele += '/' + ap.modelIndex;
      return sele;
  }
  function getProblemCount(clashDict, g, ga) {
      var geoProblemCount = 0;
      var clashes = g.getElementsByTagName('clash');
      for (var j = 0, jl = clashes.length; j < jl; ++j) {
          if (clashDict[getNamedItem(clashes[j].attributes, 'cid')]) {
              geoProblemCount += 1;
              break;
          }
      }
      var angleOutliers = g.getElementsByTagName('angle-outlier');
      if (angleOutliers.length > 0) {
          geoProblemCount += 1;
      }
      var bondOutliers = g.getElementsByTagName('bond-outlier');
      if (bondOutliers.length > 0) {
          geoProblemCount += 1;
      }
      var planeOutliers = g.getElementsByTagName('plane-outlier');
      if (planeOutliers.length > 0) {
          geoProblemCount += 1;
      }
      if (hasAttrValue(ga.getNamedItem('rota'), 'OUTLIER')) {
          geoProblemCount += 1;
      }
      if (hasAttrValue(ga.getNamedItem('rama'), 'OUTLIER')) {
          geoProblemCount += 1;
      }
      if (hasAttrValue(ga.getNamedItem('RNApucker'), 'outlier')) {
          geoProblemCount += 1;
      }
      return geoProblemCount;
  }
  var Validation = function Validation(name, path) {
      this.name = name;
      this.path = path;
      this.rsrzDict = {};
      this.rsccDict = {};
      /**
       * Random Coil Index (RCI) - evaluates the proximity of residue structural
       * and dynamic properties to the properties of flexible random coil regions
       * from NMR chemical shifts.
       *
       * Mark V. Berjanskii and David S. Wishart (2005)
       * A Simple Method To Predict Protein Flexibility Using Secondary Chemical Shifts
       * J. Am. Chem. Soc., 2005, 127 (43), pp 14970–14971
       * http://pubs.acs.org/doi/abs/10.1021/ja054842f
       *
       * Mark V. Berjanskii and David S. Wishart (2008)
       * Application of the random coil index to studying protein flexibility.
       * J Biomol NMR. 2008 Jan;40(1):31-48. Epub 2007 Nov 6.
       * http://www.springerlink.com/content/2966482w10306126/
       */
      this.rciDict = {};
      this.clashDict = {};
      this.clashArray = [];
      this.geoDict = {};
      this.geoAtomDict = {};
      this.atomDict = {};
      this.clashSele = 'NONE';
  };

  var prototypeAccessors = { type: { configurable: true } };
  prototypeAccessors.type.get = function () { return 'validation'; };
  Validation.prototype.fromXml = function fromXml (xml) {
      if (exports.Debug)
          { Log.time('Validation.fromXml'); }
      var rsrzDict = this.rsrzDict;
      var rsccDict = this.rsccDict;
      var rciDict = this.rciDict;
      var clashDict = this.clashDict;
      var clashArray = this.clashArray;
      var geoDict = this.geoDict;
      var geoAtomDict = this.geoAtomDict;
      var atomDict = this.atomDict;
      var entries = xml.getElementsByTagName('Entry');
      if (entries.length === 1) {
          var chemicalShiftLists = entries[0].getElementsByTagName('chemical_shift_list');
          if (chemicalShiftLists.length === 1) {
              var randomCoilIndices = chemicalShiftLists[0].getElementsByTagName('random_coil_index');
              for (var j = 0, jl = randomCoilIndices.length; j < jl; ++j) {
                  var rcia = randomCoilIndices[j].attributes;
                  var sele = getResSele(rcia);
                  rciDict[sele] = parseFloat(getNamedItem(rcia, 'value'));
              }
          }
      }
      var groups = xml.getElementsByTagName('ModelledSubgroup');
      var _clashDict = {};
      var clashList = [];
      if (exports.Debug)
          { Log.time('Validation.fromXml#clashDict'); }
      for (var i = 0, il = groups.length; i < il; ++i) {
          var g = groups[i];
          var ga = g.attributes;
          var sele$1 = getSele(ga);
          if (ga.getNamedItem('rsrz') !== null) {
              rsrzDict[sele$1] = parseFloat(getNamedItem(ga, 'rsrz'));
          }
          if (ga.getNamedItem('rscc') !== null) {
              rsccDict[sele$1] = parseFloat(getNamedItem(ga, 'rscc'));
          }
          var seleAttr = xml.createAttribute('sele');
          seleAttr.value = sele$1;
          ga.setNamedItem(seleAttr);
          var clashes = g.getElementsByTagName('clash');
          for (var j$1 = 0, jl$1 = clashes.length; j$1 < jl$1; ++j$1) {
              var ca = clashes[j$1].attributes;
              var atom = getNamedItem(ca, 'atom');
              if (guessElement(atom) !== 'H') {
                  var cid = getNamedItem(ca, 'cid');
                  var atomSele = getSele(ga, atom, true);
                  atomDict[atomSele] = true;
                  if (_clashDict[cid] === undefined) {
                      _clashDict[cid] = {
                          sele1: atomSele,
                          res1: sele$1
                      };
                  }
                  else {
                      var c = _clashDict[cid];
                      if (c.res1 !== sele$1) {
                          c.sele2 = atomSele;
                          c.res2 = sele$1;
                          clashList.push(c.res1, sele$1);
                          clashDict[cid] = c;
                          clashArray.push(c);
                      }
                  }
              }
          }
      }
      if (exports.Debug)
          { Log.timeEnd('Validation.fromXml#clashDict'); }
      for (var i$1 = 0, il$1 = groups.length; i$1 < il$1; ++i$1) {
          var g$1 = groups[i$1];
          var ga$1 = g$1.attributes;
          var sele$2 = getNamedItem(ga$1, 'sele');
          var isPolymer = getNamedItem(ga$1, 'seq') !== '.';
          if (isPolymer) {
              var geoProblemCount = getProblemCount(clashDict, g$1, ga$1);
              if (geoProblemCount > 0) {
                  geoDict[sele$2] = geoProblemCount;
              }
          }
          else {
              var clashes$1 = g$1.getElementsByTagName('clash');
              var mogBondOutliers = g$1.getElementsByTagName('mog-bond-outlier');
              var mogAngleOutliers = g$1.getElementsByTagName('mog-angle-outlier');
              if (mogBondOutliers.length > 0 || mogAngleOutliers.length > 0 || clashes$1.length > 0) {
                  var atomDict$1 = {};
                  geoAtomDict[sele$2] = atomDict$1;
                  for (var j$2 = 0, jl$2 = clashes$1.length; j$2 < jl$2; ++j$2) {
                      var ca$1 = clashes$1[j$2].attributes;
                      if (clashDict[getNamedItem(ca$1, 'cid')]) {
                          setBitDict(atomDict$1, getNamedItem(ca$1, 'atom'), 1);
                      }
                  }
                  for (var j$3 = 0, jl$3 = mogBondOutliers.length; j$3 < jl$3; ++j$3) {
                      var mbo = mogBondOutliers[j$3].attributes;
                      getNamedItem(mbo, 'atoms').split(',').forEach(function (atomname) {
                          setBitDict(atomDict$1, atomname, 2);
                      });
                  }
                  for (var j$4 = 0, jl$4 = mogAngleOutliers.length; j$4 < jl$4; ++j$4) {
                      var mao = mogAngleOutliers[j$4].attributes;
                      getNamedItem(mao, 'atoms').split(',').forEach(function (atomname) {
                          setBitDict(atomDict$1, atomname, 4);
                      });
                  }
              }
          }
      }
      this.clashSele = clashList.length ? clashList.join(' OR ') : 'NONE';
      if (exports.Debug)
          { Log.timeEnd('Validation.fromXml'); }
  };
  Validation.prototype.getClashData = function getClashData (params) {
      if (exports.Debug)
          { Log.time('Validation.getClashData'); }
      var p = params || {};
      var s = p.structure;
      var atomSet = s.atomSet; // TODO
      var c = new Color(defaults(p.color, '#f0027f'));
      var ap1 = s.getAtomProxy();
      var ap2 = s.getAtomProxy();
      var vDir = new Vector3();
      var vPos1 = new Vector3();
      var vPos2 = new Vector3();
      var clashArray = this.clashArray;
      var n = clashArray.length;
      var position1 = new Float32Array(n * 3);
      var position2 = new Float32Array(n * 3);
      var color = uniformArray3(n, c.r, c.g, c.b);
      var radius = new Float32Array(n);
      var picking = new Float32Array(n);
      if (exports.Debug)
          { Log.time('Validation.getClashData#atomDict'); }
      var atomDict = this.atomDict;
      s.eachAtom(function (ap) {
          var sele = getAtomSele(ap);
          if (atomDict[sele] === true) {
              atomDict[sele] = ap.index;
          }
      });
      if (exports.Debug)
          { Log.timeEnd('Validation.getClashData#atomDict'); }
      var i = 0;
      clashArray.forEach(function (c, idx) {
          ap1.index = atomDict[c.sele1]; // TODO
          ap2.index = atomDict[c.sele2]; // TODO
          if (ap1.index === undefined || ap2.index === undefined ||
              !atomSet.isSet(ap1.index, ap2.index))
              { return; }
          vDir.subVectors(ap2, ap1).setLength(ap1.vdw); // TODO
          vPos1.copy(ap1).add(vDir); // TODO
          vDir.subVectors(ap1, ap2).setLength(ap2.vdw); // TODO
          vPos2.copy(ap2).add(vDir); // TODO
          var dHalf = ap1.distanceTo(ap2) / 2;
          var r1 = Math.sqrt(ap1.vdw * ap1.vdw - dHalf * dHalf);
          var r2 = Math.sqrt(ap2.vdw * ap2.vdw - dHalf * dHalf);
          vPos1.toArray(position1, i * 3); // TODO
          vPos2.toArray(position2, i * 3);
          radius[i] = (r1 + r2) / 2;
          picking[i] = idx;
          ++i;
      });
      if (exports.Debug)
          { Log.timeEnd('Validation.getClashData'); }
      return {
          position1: position1.subarray(0, i * 3),
          position2: position2.subarray(0, i * 3),
          color: color.subarray(0, i * 3),
          color2: color.subarray(0, i * 3),
          radius: radius.subarray(0, i),
          picking: new ClashPicker(picking.subarray(0, i), this, s)
      };
  };

  Object.defineProperties( Validation.prototype, prototypeAccessors );

  /**
   * @file Validation Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var ValidationParser = /*@__PURE__*/(function (XmlParser) {
      function ValidationParser(streamer, params) {
          var p = params || {};
          XmlParser.call(this, streamer, p);
          this.useDomParser = true;
          this.validation = new Validation(this.name, this.path);
      }

      if ( XmlParser ) ValidationParser.__proto__ = XmlParser;
      ValidationParser.prototype = Object.create( XmlParser && XmlParser.prototype );
      ValidationParser.prototype.constructor = ValidationParser;

      var prototypeAccessors = { __objName: { configurable: true },isXml: { configurable: true } };
      prototypeAccessors.__objName.get = function () { return 'validation'; };
      prototypeAccessors.isXml.get = function () { return true; };
      ValidationParser.prototype._parse = function _parse () {
          XmlParser.prototype._parse.call(this);
          if (exports.Debug)
              { Log.time('ValidationParser._parse ' + this.name); }
          this.validation.fromXml(this.xml.data);
          if (exports.Debug)
              { Log.timeEnd('ValidationParser._parse ' + this.name); }
      };

      Object.defineProperties( ValidationParser.prototype, prototypeAccessors );

      return ValidationParser;
  }(XmlParser));
  ParserRegistry.add('validation', ValidationParser);

  // https://github.com/nodeca/pako
  // MIT License, Copyright (c) 2014 by Vitaly Puzrin


  // 'use strict';


  // var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
  //                 (typeof Uint16Array !== 'undefined') &&
  //                 (typeof Int32Array !== 'undefined');


  function assign(obj /*from1, from2, from3, ...*/) {
    var sources = Array.prototype.slice.call(arguments, 1);
    while (sources.length) {
      var source = sources.shift();
      if (!source) { continue; }

      if (typeof source !== 'object') {
        throw new TypeError(source + 'must be non-object');
      }

      for (var p in source) {
        if (source.hasOwnProperty(p)) {
          obj[p] = source[p];
        }
      }
    }

    return obj;
  }


  // reduce buffer size, avoiding mem copy
  function shrinkBuf(buf, size) {
    if (buf.length === size) { return buf; }
    if (buf.subarray) { return buf.subarray(0, size); }
    buf.length = size;
    return buf;
  }


  function arraySet(dest, src, src_offs, len, dest_offs) {
    if (src.subarray && dest.subarray) {
      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
      return;
    }
    // Fallback to ordinary array
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  }

  // Join array of chunks to single array.
  function flattenChunks(chunks) {
    var i, l, len, pos, chunk, result;

    // calculate data length
    len = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      len += chunks[i].length;
    }

    // join chunks
    result = new Uint8Array(len);
    pos = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      chunk = chunks[i];
      result.set(chunk, pos);
      pos += chunk.length;
    }

    return result;
  }

  // 'use strict';

  // Note: adler32 takes 12% for level 0 and 2% for level 6.
  // It doesn't worth to make additional optimizationa as in original.
  // Small size is preferable.

  function adler32(adler, buf, len, pos) {
    var s1 = (adler & 0xffff) |0,
        s2 = ((adler >>> 16) & 0xffff) |0,
        n = 0;

    while (len !== 0) {
      // Set limit ~ twice less than 5552, to keep
      // s2 in 31-bits, because we force signed ints.
      // in other case %= will fail.
      n = len > 2000 ? 2000 : len;
      len -= n;

      do {
        s1 = (s1 + buf[pos++]) |0;
        s2 = (s2 + s1) |0;
      } while (--n);

      s1 %= 65521;
      s2 %= 65521;
    }

    return (s1 | (s2 << 16)) |0;
  }

  // 'use strict';

  // Note: we can't get significant speed boost here.
  // So write code to minimize size - no pregenerated tables
  // and array tools dependencies.


  // Use ordinary array, since untyped makes no boost here
  function makeTable() {
    var c, table = [];

    for (var n = 0; n < 256; n++) {
      c = n;
      for (var k = 0; k < 8; k++) {
        c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
      }
      table[n] = c;
    }

    return table;
  }

  // Create table on load. Just 255 signed longs. Not a problem.
  var crcTable = makeTable();


  function crc32(crc, buf, len, pos) {
    var t = crcTable,
        end = pos + len;

    crc ^= -1;

    for (var i = pos; i < end; i++) {
      crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
    }

    return (crc ^ (-1)); // >>> 0;
  }

  // 'use strict';

  // See state defs from inflate.js
  var BAD$1 = 30;       /* got a data error -- remain here until reset */
  var TYPE$1 = 12;      /* i: waiting for type bits, including last-flag bit */

  /*
     Decode literal, length, and distance codes and write out the resulting
     literal and match bytes until either not enough input or output is
     available, an end-of-block is encountered, or a data error is encountered.
     When large enough input and output buffers are supplied to inflate(), for
     example, a 16K input buffer and a 64K output buffer, more than 95% of the
     inflate execution time is spent in this routine.

     Entry assumptions:

          state.mode === LEN
          strm.avail_in >= 6
          strm.avail_out >= 258
          start >= strm.avail_out
          state.bits < 8

     On return, state.mode is one of:

          LEN -- ran out of enough output space or enough available input
          TYPE -- reached end of block code, inflate() to interpret next block
          BAD -- error in block data

     Notes:

      - The maximum input bits used by a length/distance pair is 15 bits for the
        length code, 5 bits for the length extra, 15 bits for the distance code,
        and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
        Therefore if strm.avail_in >= 6, then there is enough input to avoid
        checking for available input while decoding.

      - The maximum bytes that a single length/distance pair can output is 258
        bytes, which is the maximum length that can be coded.  inflate_fast()
        requires strm.avail_out >= 258 for each loop to avoid checking for
        output space.
   */
  // module.exports =
  function inflate_fast(strm, start) {
    var state;
    var _in;                    /* local strm.input */
    var last;                   /* have enough input while in < last */
    var _out;                   /* local strm.output */
    var beg;                    /* inflate()'s initial strm.output */
    var end;                    /* while out < end, enough space available */
  //#ifdef INFLATE_STRICT
    var dmax;                   /* maximum distance from zlib header */
  //#endif
    var wsize;                  /* window size or zero if not using window */
    var whave;                  /* valid bytes in the window */
    var wnext;                  /* window write index */
    // Use `s_window` instead `window`, avoid conflict with instrumentation tools
    var s_window;               /* allocated sliding window, if wsize != 0 */
    var hold;                   /* local strm.hold */
    var bits;                   /* local strm.bits */
    var lcode;                  /* local strm.lencode */
    var dcode;                  /* local strm.distcode */
    var lmask;                  /* mask for first level of length codes */
    var dmask;                  /* mask for first level of distance codes */
    var here;                   /* retrieved table entry */
    var op;                     /* code bits, operation, extra bits, or */
                                /*  window position, window bytes to copy */
    var len;                    /* match length, unused bytes */
    var dist;                   /* match distance */
    var from;                   /* where to copy match from */
    var from_source;


    var input, output; // JS specific, because we have no pointers

    /* copy state to local variables */
    state = strm.state;
    //here = state.here;
    _in = strm.next_in;
    input = strm.input;
    last = _in + (strm.avail_in - 5);
    _out = strm.next_out;
    output = strm.output;
    beg = _out - (start - strm.avail_out);
    end = _out + (strm.avail_out - 257);
  //#ifdef INFLATE_STRICT
    dmax = state.dmax;
  //#endif
    wsize = state.wsize;
    whave = state.whave;
    wnext = state.wnext;
    s_window = state.window;
    hold = state.hold;
    bits = state.bits;
    lcode = state.lencode;
    dcode = state.distcode;
    lmask = (1 << state.lenbits) - 1;
    dmask = (1 << state.distbits) - 1;


    /* decode literals and length/distances until end-of-block or not enough
       input data or output space */

    top:
    do {
      if (bits < 15) {
        hold += input[_in++] << bits;
        bits += 8;
        hold += input[_in++] << bits;
        bits += 8;
      }

      here = lcode[hold & lmask];

      dolen:
      for (;;) { // Goto emulation
        op = here >>> 24/*here.bits*/;
        hold >>>= op;
        bits -= op;
        op = (here >>> 16) & 0xff/*here.op*/;
        if (op === 0) {                          /* literal */
          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
          //        "inflate:         literal '%c'\n" :
          //        "inflate:         literal 0x%02x\n", here.val));
          output[_out++] = here & 0xffff/*here.val*/;
        }
        else if (op & 16) {                     /* length base */
          len = here & 0xffff/*here.val*/;
          op &= 15;                           /* number of extra bits */
          if (op) {
            if (bits < op) {
              hold += input[_in++] << bits;
              bits += 8;
            }
            len += hold & ((1 << op) - 1);
            hold >>>= op;
            bits -= op;
          }
          //Tracevv((stderr, "inflate:         length %u\n", len));
          if (bits < 15) {
            hold += input[_in++] << bits;
            bits += 8;
            hold += input[_in++] << bits;
            bits += 8;
          }
          here = dcode[hold & dmask];

          dodist:
          for (;;) { // goto emulation
            op = here >>> 24/*here.bits*/;
            hold >>>= op;
            bits -= op;
            op = (here >>> 16) & 0xff/*here.op*/;

            if (op & 16) {                      /* distance base */
              dist = here & 0xffff/*here.val*/;
              op &= 15;                       /* number of extra bits */
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
                if (bits < op) {
                  hold += input[_in++] << bits;
                  bits += 8;
                }
              }
              dist += hold & ((1 << op) - 1);
  //#ifdef INFLATE_STRICT
              if (dist > dmax) {
                strm.msg = 'invalid distance too far back';
                state.mode = BAD$1;
                break top;
              }
  //#endif
              hold >>>= op;
              bits -= op;
              //Tracevv((stderr, "inflate:         distance %u\n", dist));
              op = _out - beg;                /* max distance in output */
              if (dist > op) {                /* see if copy from window */
                op = dist - op;               /* distance back in window */
                if (op > whave) {
                  if (state.sane) {
                    strm.msg = 'invalid distance too far back';
                    state.mode = BAD$1;
                    break top;
                  }

  // (!) This block is disabled in zlib defailts,
  // don't enable it for binary compatibility
  //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
  //                if (len <= op - whave) {
  //                  do {
  //                    output[_out++] = 0;
  //                  } while (--len);
  //                  continue top;
  //                }
  //                len -= op - whave;
  //                do {
  //                  output[_out++] = 0;
  //                } while (--op > whave);
  //                if (op === 0) {
  //                  from = _out - dist;
  //                  do {
  //                    output[_out++] = output[from++];
  //                  } while (--len);
  //                  continue top;
  //                }
  //#endif
                }
                from = 0; // window index
                from_source = s_window;
                if (wnext === 0) {           /* very common case */
                  from += wsize - op;
                  if (op < len) {         /* some from window */
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;  /* rest from output */
                    from_source = output;
                  }
                }
                else if (wnext < op) {      /* wrap around window */
                  from += wsize + wnext - op;
                  op -= wnext;
                  if (op < len) {         /* some from end of window */
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = 0;
                    if (wnext < len) {  /* some from start of window */
                      op = wnext;
                      len -= op;
                      do {
                        output[_out++] = s_window[from++];
                      } while (--op);
                      from = _out - dist;      /* rest from output */
                      from_source = output;
                    }
                  }
                }
                else {                      /* contiguous in window */
                  from += wnext - op;
                  if (op < len) {         /* some from window */
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;  /* rest from output */
                    from_source = output;
                  }
                }
                while (len > 2) {
                  output[_out++] = from_source[from++];
                  output[_out++] = from_source[from++];
                  output[_out++] = from_source[from++];
                  len -= 3;
                }
                if (len) {
                  output[_out++] = from_source[from++];
                  if (len > 1) {
                    output[_out++] = from_source[from++];
                  }
                }
              }
              else {
                from = _out - dist;          /* copy direct from output */
                do {                        /* minimum length is three */
                  output[_out++] = output[from++];
                  output[_out++] = output[from++];
                  output[_out++] = output[from++];
                  len -= 3;
                } while (len > 2);
                if (len) {
                  output[_out++] = output[from++];
                  if (len > 1) {
                    output[_out++] = output[from++];
                  }
                }
              }
            }
            else if ((op & 64) === 0) {          /* 2nd level distance code */
              here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
              continue dodist;
            }
            else {
              strm.msg = 'invalid distance code';
              state.mode = BAD$1;
              break top;
            }

            break; // need to emulate goto via "continue"
          }
        }
        else if ((op & 64) === 0) {              /* 2nd level length code */
          here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
          continue dolen;
        }
        else if (op & 32) {                     /* end-of-block */
          //Tracevv((stderr, "inflate:         end of block\n"));
          state.mode = TYPE$1;
          break top;
        }
        else {
          strm.msg = 'invalid literal/length code';
          state.mode = BAD$1;
          break top;
        }

        break; // need to emulate goto via "continue"
      }
    } while (_in < last && _out < end);

    /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
    len = bits >> 3;
    _in -= len;
    bits -= len << 3;
    hold &= (1 << bits) - 1;

    /* update state and return */
    strm.next_in = _in;
    strm.next_out = _out;
    strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
    strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
    state.hold = hold;
    state.bits = bits;
    return;
  }
  // 'use strict';


  // var utils = require('../utils/common');

  var MAXBITS = 15;
  var ENOUGH_LENS$1 = 852;
  var ENOUGH_DISTS$1 = 592;
  //var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

  var CODES$1 = 0;
  var LENS$1 = 1;
  var DISTS$1 = 2;

  var lbase = [ /* Length codes 257..285 base */
    3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
    35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
  ];

  var lext = [ /* Length codes 257..285 extra */
    16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
    19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
  ];

  var dbase = [ /* Distance codes 0..29 base */
    1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
    257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
    8193, 12289, 16385, 24577, 0, 0
  ];

  var dext = [ /* Distance codes 0..29 extra */
    16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
    23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
    28, 28, 29, 29, 64, 64
  ];

  // module.exports =
  function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)
  {
    var bits = opts.bits;
        //here = opts.here; /* table entry for duplication */

    var len = 0;               /* a code's length in bits */
    var sym = 0;               /* index of code symbols */
    var min = 0, max = 0;          /* minimum and maximum code lengths */
    var root = 0;              /* number of index bits for root table */
    var curr = 0;              /* number of index bits for current table */
    var drop = 0;              /* code bits to drop for sub-table */
    var left = 0;                   /* number of prefix codes available */
    var used = 0;              /* code entries in table used */
    var huff = 0;              /* Huffman code */
    var incr;              /* for incrementing code, index */
    var fill;              /* index for replicating entries */
    var low;               /* low bits for current root entry */
    var mask;              /* mask for low root bits */
    var next;             /* next available space in table */
    var base = null;     /* base value table to use */
    var base_index = 0;
  //  var shoextra;    /* extra bits table to use */
    var end;                    /* use base and extra for symbol > end */
    var count = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
    var offs = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
    var extra = null;
    var extra_index = 0;

    var here_bits, here_op, here_val;

    /*
     Process a set of code lengths to create a canonical Huffman code.  The
     code lengths are lens[0..codes-1].  Each length corresponds to the
     symbols 0..codes-1.  The Huffman code is generated by first sorting the
     symbols by length from short to long, and retaining the symbol order
     for codes with equal lengths.  Then the code starts with all zero bits
     for the first code of the shortest length, and the codes are integer
     increments for the same length, and zeros are appended as the length
     increases.  For the deflate format, these bits are stored backwards
     from their more natural integer increment ordering, and so when the
     decoding tables are built in the large loop below, the integer codes
     are incremented backwards.

     This routine assumes, but does not check, that all of the entries in
     lens[] are in the range 0..MAXBITS.  The caller must assure this.
     1..MAXBITS is interpreted as that code length.  zero means that that
     symbol does not occur in this code.

     The codes are sorted by computing a count of codes for each length,
     creating from that a table of starting indices for each length in the
     sorted table, and then entering the symbols in order in the sorted
     table.  The sorted table is work[], with that space being provided by
     the caller.

     The length counts are used for other purposes as well, i.e. finding
     the minimum and maximum length codes, determining if there are any
     codes at all, checking for a valid set of lengths, and looking ahead
     at length counts to determine sub-table sizes when building the
     decoding tables.
     */

    /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
    for (len = 0; len <= MAXBITS; len++) {
      count[len] = 0;
    }
    for (sym = 0; sym < codes; sym++) {
      count[lens[lens_index + sym]]++;
    }

    /* bound code lengths, force root to be within code lengths */
    root = bits;
    for (max = MAXBITS; max >= 1; max--) {
      if (count[max] !== 0) { break; }
    }
    if (root > max) {
      root = max;
    }
    if (max === 0) {                     /* no symbols to code at all */
      //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
      //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
      //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
      table[table_index++] = (1 << 24) | (64 << 16) | 0;


      //table.op[opts.table_index] = 64;
      //table.bits[opts.table_index] = 1;
      //table.val[opts.table_index++] = 0;
      table[table_index++] = (1 << 24) | (64 << 16) | 0;

      opts.bits = 1;
      return 0;     /* no symbols, but wait for decoding to report error */
    }
    for (min = 1; min < max; min++) {
      if (count[min] !== 0) { break; }
    }
    if (root < min) {
      root = min;
    }

    /* check for an over-subscribed or incomplete set of lengths */
    left = 1;
    for (len = 1; len <= MAXBITS; len++) {
      left <<= 1;
      left -= count[len];
      if (left < 0) {
        return -1;
      }        /* over-subscribed */
    }
    if (left > 0 && (type === CODES$1 || max !== 1)) {
      return -1;                      /* incomplete set */
    }

    /* generate offsets into symbol table for each length for sorting */
    offs[1] = 0;
    for (len = 1; len < MAXBITS; len++) {
      offs[len + 1] = offs[len] + count[len];
    }

    /* sort symbols by length, by symbol order within each length */
    for (sym = 0; sym < codes; sym++) {
      if (lens[lens_index + sym] !== 0) {
        work[offs[lens[lens_index + sym]]++] = sym;
      }
    }

    /*
     Create and fill in decoding tables.  In this loop, the table being
     filled is at next and has curr index bits.  The code being used is huff
     with length len.  That code is converted to an index by dropping drop
     bits off of the bottom.  For codes where len is less than drop + curr,
     those top drop + curr - len bits are incremented through all values to
     fill the table with replicated entries.

     root is the number of index bits for the root table.  When len exceeds
     root, sub-tables are created pointed to by the root entry with an index
     of the low root bits of huff.  This is saved in low to check for when a
     new sub-table should be started.  drop is zero when the root table is
     being filled, and drop is root when sub-tables are being filled.

     When a new sub-table is needed, it is necessary to look ahead in the
     code lengths to determine what size sub-table is needed.  The length
     counts are used for this, and so count[] is decremented as codes are
     entered in the tables.

     used keeps track of how many table entries have been allocated from the
     provided *table space.  It is checked for LENS and DIST tables against
     the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
     the initial root table size constants.  See the comments in inftrees.h
     for more information.

     sym increments through all symbols, and the loop terminates when
     all codes of length max, i.e. all codes, have been processed.  This
     routine permits incomplete codes, so another loop after this one fills
     in the rest of the decoding tables with invalid code markers.
     */

    /* set up for code type */
    // poor man optimization - use if-else instead of switch,
    // to avoid deopts in old v8
    if (type === CODES$1) {
      base = extra = work;    /* dummy value--not used */
      end = 19;

    } else if (type === LENS$1) {
      base = lbase;
      base_index -= 257;
      extra = lext;
      extra_index -= 257;
      end = 256;

    } else {                    /* DISTS */
      base = dbase;
      extra = dext;
      end = -1;
    }

    /* initialize opts for loop */
    huff = 0;                   /* starting code */
    sym = 0;                    /* starting code symbol */
    len = min;                  /* starting code length */
    next = table_index;              /* current table to fill in */
    curr = root;                /* current table index bits */
    drop = 0;                   /* current bits to drop from code for index */
    low = -1;                   /* trigger new sub-table when len > root */
    used = 1 << root;          /* use root table entries */
    mask = used - 1;            /* mask for comparing low */

    /* check available table space */
    if ((type === LENS$1 && used > ENOUGH_LENS$1) ||
      (type === DISTS$1 && used > ENOUGH_DISTS$1)) {
      return 1;
    }
    /* process all codes and make table entries */
    for (;;) {
      /* create table entry */
      here_bits = len - drop;
      if (work[sym] < end) {
        here_op = 0;
        here_val = work[sym];
      }
      else if (work[sym] > end) {
        here_op = extra[extra_index + work[sym]];
        here_val = base[base_index + work[sym]];
      }
      else {
        here_op = 32 + 64;         /* end of block */
        here_val = 0;
      }

      /* replicate for those indices with low len bits equal to huff */
      incr = 1 << (len - drop);
      fill = 1 << curr;
      min = fill;                 /* save offset to next table */
      do {
        fill -= incr;
        table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
      } while (fill !== 0);

      /* backwards increment the len-bit code huff */
      incr = 1 << (len - 1);
      while (huff & incr) {
        incr >>= 1;
      }
      if (incr !== 0) {
        huff &= incr - 1;
        huff += incr;
      } else {
        huff = 0;
      }

      /* go to next symbol, update count, len */
      sym++;
      if (--count[len] === 0) {
        if (len === max) { break; }
        len = lens[lens_index + work[sym]];
      }

      /* create new sub-table if needed */
      if (len > root && (huff & mask) !== low) {
        /* if first time, transition to sub-tables */
        if (drop === 0) {
          drop = root;
        }

        /* increment past last table */
        next += min;            /* here min is 1 << curr */

        /* determine length of next table */
        curr = len - drop;
        left = 1 << curr;
        while (curr + drop < max) {
          left -= count[curr + drop];
          if (left <= 0) { break; }
          curr++;
          left <<= 1;
        }

        /* check for enough space */
        used += 1 << curr;
        if ((type === LENS$1 && used > ENOUGH_LENS$1) ||
          (type === DISTS$1 && used > ENOUGH_DISTS$1)) {
          return 1;
        }

        /* point entry in root table to sub-table */
        low = huff & mask;
        /*table.op[low] = curr;
        table.bits[low] = root;
        table.val[low] = next - opts.table_index;*/
        table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
      }
    }

    /* fill in remaining table entry if code is incomplete (guaranteed to have
     at most one remaining entry, since if the code is incomplete, the
     maximum code length that was allowed to get this far is one bit) */
    if (huff !== 0) {
      //table.op[next + huff] = 64;            /* invalid code marker */
      //table.bits[next + huff] = len - drop;
      //table.val[next + huff] = 0;
      table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
    }

    /* set return parameters */
    //opts.table_index += used;
    opts.bits = root;
    return 0;
  }
  // 'use strict';


  // var utils         = require('../utils/common');
  // var adler32       = require('./adler32');
  // var crc32         = require('./crc32');
  // var inflate_fast  = require('./inffast');
  // var inflate_table = require('./inftrees');

  var CODES = 0;
  var LENS = 1;
  var DISTS = 2;

  /* Public constants ==========================================================*/
  /* ===========================================================================*/


  /* Allowed flush values; see deflate() and inflate() below for details */
  //var Z_NO_FLUSH      = 0;
  //var Z_PARTIAL_FLUSH = 1;
  //var Z_SYNC_FLUSH    = 2;
  //var Z_FULL_FLUSH    = 3;
  var Z_FINISH        = 4;
  var Z_BLOCK         = 5;
  var Z_TREES         = 6;


  /* Return codes for the compression/decompression functions. Negative values
   * are errors, positive values are used for special but normal events.
   */
  var Z_OK            = 0;
  var Z_STREAM_END    = 1;
  var Z_NEED_DICT     = 2;
  //var Z_ERRNO         = -1;
  var Z_STREAM_ERROR  = -2;
  var Z_DATA_ERROR    = -3;
  var Z_MEM_ERROR     = -4;
  var Z_BUF_ERROR     = -5;
  //var Z_VERSION_ERROR = -6;

  /* The deflate compression method */
  var Z_DEFLATED  = 8;


  /* STATES ====================================================================*/
  /* ===========================================================================*/


  var    HEAD = 1;       /* i: waiting for magic header */
  var    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
  var    TIME = 3;       /* i: waiting for modification time (gzip) */
  var    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
  var    EXLEN = 5;      /* i: waiting for extra length (gzip) */
  var    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
  var    NAME = 7;       /* i: waiting for end of file name (gzip) */
  var    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
  var    HCRC = 9;       /* i: waiting for header crc (gzip) */
  var    DICTID = 10;    /* i: waiting for dictionary check value */
  var    DICT = 11;      /* waiting for inflateSetDictionary() call */
  var        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
  var        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
  var        STORED = 14;    /* i: waiting for stored size (length and complement) */
  var        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
  var        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
  var        TABLE = 17;     /* i: waiting for dynamic block table lengths */
  var        LENLENS = 18;   /* i: waiting for code length code lengths */
  var        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
  var            LEN_ = 20;      /* i: same as LEN below, but only first time in */
  var            LEN = 21;       /* i: waiting for length/lit/eob code */
  var            LENEXT = 22;    /* i: waiting for length extra bits */
  var            DIST = 23;      /* i: waiting for distance code */
  var            DISTEXT = 24;   /* i: waiting for distance extra bits */
  var            MATCH = 25;     /* o: waiting for output space to copy string */
  var            LIT = 26;       /* o: waiting for output space to write literal */
  var    CHECK = 27;     /* i: waiting for 32-bit check value */
  var    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
  var    DONE = 29;      /* finished check, done -- remain here until reset */
  var    BAD = 30;       /* got a data error -- remain here until reset */
  var    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
  var    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */

  /* ===========================================================================*/



  var ENOUGH_LENS = 852;
  var ENOUGH_DISTS = 592;
  function zswap32(q) {
    return  (((q >>> 24) & 0xff) +
            ((q >>> 8) & 0xff00) +
            ((q & 0xff00) << 8) +
            ((q & 0xff) << 24));
  }


  function InflateState() {
    this.mode = 0;             /* current inflate mode */
    this.last = false;          /* true if processing last block */
    this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
    this.havedict = false;      /* true if dictionary provided */
    this.flags = 0;             /* gzip header method and flags (0 if zlib) */
    this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
    this.check = 0;             /* protected copy of check value */
    this.total = 0;             /* protected copy of output count */
    // TODO: may be {}
    this.head = null;           /* where to save gzip header information */

    /* sliding window */
    this.wbits = 0;             /* log base 2 of requested window size */
    this.wsize = 0;             /* window size or zero if not using window */
    this.whave = 0;             /* valid bytes in the window */
    this.wnext = 0;             /* window write index */
    this.window = null;         /* allocated sliding window, if needed */

    /* bit accumulator */
    this.hold = 0;              /* input bit accumulator */
    this.bits = 0;              /* number of bits in "in" */

    /* for string and stored block copying */
    this.length = 0;            /* literal or length of data to copy */
    this.offset = 0;            /* distance back to copy string from */

    /* for table and code decoding */
    this.extra = 0;             /* extra bits needed */

    /* fixed and dynamic code tables */
    this.lencode = null;          /* starting table for length/literal codes */
    this.distcode = null;         /* starting table for distance codes */
    this.lenbits = 0;           /* index bits for lencode */
    this.distbits = 0;          /* index bits for distcode */

    /* dynamic table building */
    this.ncode = 0;             /* number of code length code lengths */
    this.nlen = 0;              /* number of length code lengths */
    this.ndist = 0;             /* number of distance code lengths */
    this.have = 0;              /* number of code lengths in lens[] */
    this.next = null;              /* next available space in codes[] */

    this.lens = new Uint16Array(320); /* temporary storage for code lengths */
    this.work = new Uint16Array(288); /* work area for code table building */

    /*
     because we don't have pointers in js, we use lencode and distcode directly
     as buffers so we don't need codes
    */
    //this.codes = new Buf32(ENOUGH);       /* space for code tables */
    this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
    this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
    this.sane = 0;                   /* if false, allow invalid distance too far */
    this.back = 0;                   /* bits back of last unprocessed length/lit */
    this.was = 0;                    /* initial length of match */
  }

  function inflateResetKeep(strm) {
    var state;

    if (!strm || !strm.state) { return Z_STREAM_ERROR; }
    state = strm.state;
    strm.total_in = strm.total_out = state.total = 0;
    strm.msg = ''; /*Z_NULL*/
    if (state.wrap) {       /* to support ill-conceived Java test suite */
      strm.adler = state.wrap & 1;
    }
    state.mode = HEAD;
    state.last = 0;
    state.havedict = 0;
    state.dmax = 32768;
    state.head = null/*Z_NULL*/;
    state.hold = 0;
    state.bits = 0;
    //state.lencode = state.distcode = state.next = state.codes;
    state.lencode = state.lendyn = new Int32Array(ENOUGH_LENS);
    state.distcode = state.distdyn = new Int32Array(ENOUGH_DISTS);

    state.sane = 1;
    state.back = -1;
    //Tracev((stderr, "inflate: reset\n"));
    return Z_OK;
  }

  function inflateReset(strm) {
    var state;

    if (!strm || !strm.state) { return Z_STREAM_ERROR; }
    state = strm.state;
    state.wsize = 0;
    state.whave = 0;
    state.wnext = 0;
    return inflateResetKeep(strm);

  }

  function inflateReset2(strm, windowBits) {
    var wrap;
    var state;

    /* get the state */
    if (!strm || !strm.state) { return Z_STREAM_ERROR; }
    state = strm.state;

    /* extract wrap request from windowBits parameter */
    if (windowBits < 0) {
      wrap = 0;
      windowBits = -windowBits;
    }
    else {
      wrap = (windowBits >> 4) + 1;
      if (windowBits < 48) {
        windowBits &= 15;
      }
    }

    /* set number of window bits, free window if different */
    if (windowBits && (windowBits < 8 || windowBits > 15)) {
      return Z_STREAM_ERROR;
    }
    if (state.window !== null && state.wbits !== windowBits) {
      state.window = null;
    }

    /* update state and reset the rest of it */
    state.wrap = wrap;
    state.wbits = windowBits;
    return inflateReset(strm);
  }

  function inflateInit2(strm, windowBits) {
    var ret;
    var state;

    if (!strm) { return Z_STREAM_ERROR; }
    //strm.msg = Z_NULL;                 /* in case we return an error */

    state = new InflateState();

    //if (state === Z_NULL) return Z_MEM_ERROR;
    //Tracev((stderr, "inflate: allocated\n"));
    strm.state = state;
    state.window = null/*Z_NULL*/;
    ret = inflateReset2(strm, windowBits);
    if (ret !== Z_OK) {
      strm.state = null/*Z_NULL*/;
    }
    return ret;
  }

  /*
   Return state with length and distance decoding tables and index sizes set to
   fixed code decoding.  Normally this returns fixed tables from inffixed.h.
   If BUILDFIXED is defined, then instead this routine builds the tables the
   first time it's called, and returns those tables the first time and
   thereafter.  This reduces the size of the code by about 2K bytes, in
   exchange for a little execution time.  However, BUILDFIXED should not be
   used for threaded applications, since the rewriting of the tables and virgin
   may not be thread-safe.
   */
  var virgin = true;

  var lenfix;
  var distfix;
  // We have no pointers in JS, so keep tables separate

  function fixedtables(state) {
    /* build fixed huffman tables if first call (may not be thread safe) */
    if (virgin) {
      var sym;

      lenfix = new Int32Array(512);
      distfix = new Int32Array(32);

      /* literal/length table */
      sym = 0;
      while (sym < 144) { state.lens[sym++] = 8; }
      while (sym < 256) { state.lens[sym++] = 9; }
      while (sym < 280) { state.lens[sym++] = 7; }
      while (sym < 288) { state.lens[sym++] = 8; }

      inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });

      /* distance table */
      sym = 0;
      while (sym < 32) { state.lens[sym++] = 5; }

      inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });

      /* do this just once */
      virgin = false;
    }

    state.lencode = lenfix;
    state.lenbits = 9;
    state.distcode = distfix;
    state.distbits = 5;
  }


  /*
   Update the window with the last wsize (normally 32K) bytes written before
   returning.  If window does not exist yet, create it.  This is only called
   when a window is already in use, or when output has been written during this
   inflate call, but the end of the deflate stream has not been reached yet.
   It is also called to create a window for dictionary data when a dictionary
   is loaded.

   Providing output buffers larger than 32K to inflate() should provide a speed
   advantage, since only the last 32K of output is copied to the sliding window
   upon return from inflate(), and since all distances after the first 32K of
   output will fall in the output data, making match copies simpler and faster.
   The advantage may be dependent on the size of the processor's data caches.
   */
  function updatewindow(strm, src, end, copy) {
    var dist;
    var state = strm.state;

    /* if it hasn't been done already, allocate space for the window */
    if (state.window === null) {
      state.wsize = 1 << state.wbits;
      state.wnext = 0;
      state.whave = 0;

      state.window = new Uint8Array(state.wsize);
    }

    /* copy state->wsize or less output bytes into the circular window */
    if (copy >= state.wsize) {
      arraySet(state.window, src, end - state.wsize, state.wsize, 0);
      state.wnext = 0;
      state.whave = state.wsize;
    }
    else {
      dist = state.wsize - state.wnext;
      if (dist > copy) {
        dist = copy;
      }
      //zmemcpy(state->window + state->wnext, end - copy, dist);
      arraySet(state.window, src, end - copy, dist, state.wnext);
      copy -= dist;
      if (copy) {
        //zmemcpy(state->window, end - copy, copy);
        arraySet(state.window, src, end - copy, copy, 0);
        state.wnext = copy;
        state.whave = state.wsize;
      }
      else {
        state.wnext += dist;
        if (state.wnext === state.wsize) { state.wnext = 0; }
        if (state.whave < state.wsize) { state.whave += dist; }
      }
    }
    return 0;
  }

  function inflate(strm, flush) {
    var state;
    var input, output;          // input/output buffers
    var next;                   /* next input INDEX */
    var put;                    /* next output INDEX */
    var have, left;             /* available input and output */
    var hold;                   /* bit buffer */
    var bits;                   /* bits in bit buffer */
    var _in, _out;              /* save starting available input and output */
    var copy;                   /* number of stored or match bytes to copy */
    var from;                   /* where to copy match bytes from */
    var from_source;
    var here = 0;               /* current decoding table entry */
    var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
    //var last;                   /* parent table entry */
    var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
    var len;                    /* length to copy for repeats, bits to drop */
    var ret;                    /* return code */
    var hbuf = new Uint8Array(4);    /* buffer for gzip header crc calculation */
    var opts;

    var n; // temporary var for NEED_BITS

    var order = /* permutation of code lengths */
      [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];


    if (!strm || !strm.state || !strm.output ||
        (!strm.input && strm.avail_in !== 0)) {
      return Z_STREAM_ERROR;
    }

    state = strm.state;
    if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


    //--- LOAD() ---
    put = strm.next_out;
    output = strm.output;
    left = strm.avail_out;
    next = strm.next_in;
    input = strm.input;
    have = strm.avail_in;
    hold = state.hold;
    bits = state.bits;
    //---

    _in = have;
    _out = left;
    ret = Z_OK;

    inf_leave: // goto emulation
    for (;;) {
      switch (state.mode) {
      case HEAD:
        if (state.wrap === 0) {
          state.mode = TYPEDO;
          break;
        }
        //=== NEEDBITS(16);
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
          state.check = 0/*crc32(0L, Z_NULL, 0)*/;
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//

          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          state.mode = FLAGS;
          break;
        }
        state.flags = 0;           /* expect zlib header */
        if (state.head) {
          state.head.done = false;
        }
        if (!(state.wrap & 1) ||   /* check if zlib header allowed */
          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
          strm.msg = 'incorrect header check';
          state.mode = BAD;
          break;
        }
        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
          strm.msg = 'unknown compression method';
          state.mode = BAD;
          break;
        }
        //--- DROPBITS(4) ---//
        hold >>>= 4;
        bits -= 4;
        //---//
        len = (hold & 0x0f)/*BITS(4)*/ + 8;
        if (state.wbits === 0) {
          state.wbits = len;
        }
        else if (len > state.wbits) {
          strm.msg = 'invalid window size';
          state.mode = BAD;
          break;
        }
        state.dmax = 1 << len;
        //Tracev((stderr, "inflate:   zlib header ok\n"));
        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
        state.mode = hold & 0x200 ? DICTID : TYPE;
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        break;
      case FLAGS:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.flags = hold;
        if ((state.flags & 0xff) !== Z_DEFLATED) {
          strm.msg = 'unknown compression method';
          state.mode = BAD;
          break;
        }
        if (state.flags & 0xe000) {
          strm.msg = 'unknown header flags set';
          state.mode = BAD;
          break;
        }
        if (state.head) {
          state.head.text = ((hold >> 8) & 1);
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = TIME;
        /* falls through */
      case TIME:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.head) {
          state.head.time = hold;
        }
        if (state.flags & 0x0200) {
          //=== CRC4(state.check, hold)
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          hbuf[2] = (hold >>> 16) & 0xff;
          hbuf[3] = (hold >>> 24) & 0xff;
          state.check = crc32(state.check, hbuf, 4, 0);
          //===
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = OS;
        /* falls through */
      case OS:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.head) {
          state.head.xflags = (hold & 0xff);
          state.head.os = (hold >> 8);
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = EXLEN;
        /* falls through */
      case EXLEN:
        if (state.flags & 0x0400) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.length = hold;
          if (state.head) {
            state.head.extra_len = hold;
          }
          if (state.flags & 0x0200) {
            //=== CRC2(state.check, hold);
            hbuf[0] = hold & 0xff;
            hbuf[1] = (hold >>> 8) & 0xff;
            state.check = crc32(state.check, hbuf, 2, 0);
            //===//
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
        }
        else if (state.head) {
          state.head.extra = null/*Z_NULL*/;
        }
        state.mode = EXTRA;
        /* falls through */
      case EXTRA:
        if (state.flags & 0x0400) {
          copy = state.length;
          if (copy > have) { copy = have; }
          if (copy) {
            if (state.head) {
              len = state.head.extra_len - state.length;
              if (!state.head.extra) {
                // Use untyped array for more conveniend processing later
                state.head.extra = new Array(state.head.extra_len);
              }
              arraySet(
                state.head.extra,
                input,
                next,
                // extra field is limited to 65536 bytes
                // - no need for additional size check
                copy,
                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                len
              );
              //zmemcpy(state.head.extra + len, next,
              //        len + copy > state.head.extra_max ?
              //        state.head.extra_max - len : copy);
            }
            if (state.flags & 0x0200) {
              state.check = crc32(state.check, input, copy, next);
            }
            have -= copy;
            next += copy;
            state.length -= copy;
          }
          if (state.length) { break inf_leave; }
        }
        state.length = 0;
        state.mode = NAME;
        /* falls through */
      case NAME:
        if (state.flags & 0x0800) {
          if (have === 0) { break inf_leave; }
          copy = 0;
          do {
            // TODO: 2 or 1 bytes?
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */
            if (state.head && len &&
                (state.length < 65536 /*state.head.name_max*/)) {
              state.head.name += String.fromCharCode(len);
            }
          } while (len && copy < have);

          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) { break inf_leave; }
        }
        else if (state.head) {
          state.head.name = null;
        }
        state.length = 0;
        state.mode = COMMENT;
        /* falls through */
      case COMMENT:
        if (state.flags & 0x1000) {
          if (have === 0) { break inf_leave; }
          copy = 0;
          do {
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */
            if (state.head && len &&
                (state.length < 65536 /*state.head.comm_max*/)) {
              state.head.comment += String.fromCharCode(len);
            }
          } while (len && copy < have);
          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) { break inf_leave; }
        }
        else if (state.head) {
          state.head.comment = null;
        }
        state.mode = HCRC;
        /* falls through */
      case HCRC:
        if (state.flags & 0x0200) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if (hold !== (state.check & 0xffff)) {
            strm.msg = 'header crc mismatch';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
        }
        if (state.head) {
          state.head.hcrc = ((state.flags >> 9) & 1);
          state.head.done = true;
        }
        strm.adler = state.check = 0;
        state.mode = TYPE;
        break;
      case DICTID:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        strm.adler = state.check = zswap32(hold);
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = DICT;
        /* falls through */
      case DICT:
        if (state.havedict === 0) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          //---
          return Z_NEED_DICT;
        }
        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
        state.mode = TYPE;
        /* falls through */
      case TYPE:
        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case TYPEDO:
        if (state.last) {
          //--- BYTEBITS() ---//
          hold >>>= bits & 7;
          bits -= bits & 7;
          //---//
          state.mode = CHECK;
          break;
        }
        //=== NEEDBITS(3); */
        while (bits < 3) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.last = (hold & 0x01)/*BITS(1)*/;
        //--- DROPBITS(1) ---//
        hold >>>= 1;
        bits -= 1;
        //---//

        switch ((hold & 0x03)/*BITS(2)*/) {
        case 0:                             /* stored block */
          //Tracev((stderr, "inflate:     stored block%s\n",
          //        state.last ? " (last)" : ""));
          state.mode = STORED;
          break;
        case 1:                             /* fixed block */
          fixedtables(state);
          //Tracev((stderr, "inflate:     fixed codes block%s\n",
          //        state.last ? " (last)" : ""));
          state.mode = LEN_;             /* decode codes */
          if (flush === Z_TREES) {
            //--- DROPBITS(2) ---//
            hold >>>= 2;
            bits -= 2;
            //---//
            break inf_leave;
          }
          break;
        case 2:                             /* dynamic block */
          //Tracev((stderr, "inflate:     dynamic codes block%s\n",
          //        state.last ? " (last)" : ""));
          state.mode = TABLE;
          break;
        case 3:
          strm.msg = 'invalid block type';
          state.mode = BAD;
        }
        //--- DROPBITS(2) ---//
        hold >>>= 2;
        bits -= 2;
        //---//
        break;
      case STORED:
        //--- BYTEBITS() ---// /* go to byte boundary */
        hold >>>= bits & 7;
        bits -= bits & 7;
        //---//
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
          strm.msg = 'invalid stored block lengths';
          state.mode = BAD;
          break;
        }
        state.length = hold & 0xffff;
        //Tracev((stderr, "inflate:       stored length %u\n",
        //        state.length));
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = COPY_;
        if (flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case COPY_:
        state.mode = COPY;
        /* falls through */
      case COPY:
        copy = state.length;
        if (copy) {
          if (copy > have) { copy = have; }
          if (copy > left) { copy = left; }
          if (copy === 0) { break inf_leave; }
          //--- zmemcpy(put, next, copy); ---
          arraySet(output, input, next, copy, put);
          //---//
          have -= copy;
          next += copy;
          left -= copy;
          put += copy;
          state.length -= copy;
          break;
        }
        //Tracev((stderr, "inflate:       stored end\n"));
        state.mode = TYPE;
        break;
      case TABLE:
        //=== NEEDBITS(14); */
        while (bits < 14) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
        //--- DROPBITS(5) ---//
        hold >>>= 5;
        bits -= 5;
        //---//
        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
        //--- DROPBITS(5) ---//
        hold >>>= 5;
        bits -= 5;
        //---//
        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
        //--- DROPBITS(4) ---//
        hold >>>= 4;
        bits -= 4;
        //---//
  //#ifndef PKZIP_BUG_WORKAROUND
        if (state.nlen > 286 || state.ndist > 30) {
          strm.msg = 'too many length or distance symbols';
          state.mode = BAD;
          break;
        }
  //#endif
        //Tracev((stderr, "inflate:       table sizes ok\n"));
        state.have = 0;
        state.mode = LENLENS;
        /* falls through */
      case LENLENS:
        while (state.have < state.ncode) {
          //=== NEEDBITS(3);
          while (bits < 3) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
          //--- DROPBITS(3) ---//
          hold >>>= 3;
          bits -= 3;
          //---//
        }
        while (state.have < 19) {
          state.lens[order[state.have++]] = 0;
        }
        // We have separate tables & no pointers. 2 commented lines below not needed.
        //state.next = state.codes;
        //state.lencode = state.next;
        // Switch to use dynamic table
        state.lencode = state.lendyn;
        state.lenbits = 7;

        opts = { bits: state.lenbits };
        ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
        state.lenbits = opts.bits;

        if (ret) {
          strm.msg = 'invalid code lengths set';
          state.mode = BAD;
          break;
        }
        //Tracev((stderr, "inflate:       code lengths ok\n"));
        state.have = 0;
        state.mode = CODELENS;
        /* falls through */
      case CODELENS:
        while (state.have < state.nlen + state.ndist) {
          for (;;) {
            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          if (here_val < 16) {
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            state.lens[state.have++] = here_val;
          }
          else {
            if (here_val === 16) {
              //=== NEEDBITS(here.bits + 2);
              n = here_bits + 2;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              if (state.have === 0) {
                strm.msg = 'invalid bit length repeat';
                state.mode = BAD;
                break;
              }
              len = state.lens[state.have - 1];
              copy = 3 + (hold & 0x03);//BITS(2);
              //--- DROPBITS(2) ---//
              hold >>>= 2;
              bits -= 2;
              //---//
            }
            else if (here_val === 17) {
              //=== NEEDBITS(here.bits + 3);
              n = here_bits + 3;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              len = 0;
              copy = 3 + (hold & 0x07);//BITS(3);
              //--- DROPBITS(3) ---//
              hold >>>= 3;
              bits -= 3;
              //---//
            }
            else {
              //=== NEEDBITS(here.bits + 7);
              n = here_bits + 7;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              len = 0;
              copy = 11 + (hold & 0x7f);//BITS(7);
              //--- DROPBITS(7) ---//
              hold >>>= 7;
              bits -= 7;
              //---//
            }
            if (state.have + copy > state.nlen + state.ndist) {
              strm.msg = 'invalid bit length repeat';
              state.mode = BAD;
              break;
            }
            while (copy--) {
              state.lens[state.have++] = len;
            }
          }
        }

        /* handle error breaks in while */
        if (state.mode === BAD) { break; }

        /* check for end-of-block code (better have one) */
        if (state.lens[256] === 0) {
          strm.msg = 'invalid code -- missing end-of-block';
          state.mode = BAD;
          break;
        }

        /* build code tables -- note: do not change the lenbits or distbits
           values here (9 and 6) without reading the comments in inftrees.h
           concerning the ENOUGH constants, which depend on those values */
        state.lenbits = 9;

        opts = { bits: state.lenbits };
        ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
        // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;
        state.lenbits = opts.bits;
        // state.lencode = state.next;

        if (ret) {
          strm.msg = 'invalid literal/lengths set';
          state.mode = BAD;
          break;
        }

        state.distbits = 6;
        //state.distcode.copy(state.codes);
        // Switch to use dynamic table
        state.distcode = state.distdyn;
        opts = { bits: state.distbits };
        ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
        // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;
        state.distbits = opts.bits;
        // state.distcode = state.next;

        if (ret) {
          strm.msg = 'invalid distances set';
          state.mode = BAD;
          break;
        }
        //Tracev((stderr, 'inflate:       codes ok\n'));
        state.mode = LEN_;
        if (flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case LEN_:
        state.mode = LEN;
        /* falls through */
      case LEN:
        if (have >= 6 && left >= 258) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          //---
          inflate_fast(strm, _out);
          //--- LOAD() ---
          put = strm.next_out;
          output = strm.output;
          left = strm.avail_out;
          next = strm.next_in;
          input = strm.input;
          have = strm.avail_in;
          hold = state.hold;
          bits = state.bits;
          //---

          if (state.mode === TYPE) {
            state.back = -1;
          }
          break;
        }
        state.back = 0;
        for (;;) {
          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if (here_bits <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if (here_op && (here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.lencode[last_val +
                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((last_bits + here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          //--- DROPBITS(last.bits) ---//
          hold >>>= last_bits;
          bits -= last_bits;
          //---//
          state.back += last_bits;
        }
        //--- DROPBITS(here.bits) ---//
        hold >>>= here_bits;
        bits -= here_bits;
        //---//
        state.back += here_bits;
        state.length = here_val;
        if (here_op === 0) {
          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
          //        "inflate:         literal '%c'\n" :
          //        "inflate:         literal 0x%02x\n", here.val));
          state.mode = LIT;
          break;
        }
        if (here_op & 32) {
          //Tracevv((stderr, "inflate:         end of block\n"));
          state.back = -1;
          state.mode = TYPE;
          break;
        }
        if (here_op & 64) {
          strm.msg = 'invalid literal/length code';
          state.mode = BAD;
          break;
        }
        state.extra = here_op & 15;
        state.mode = LENEXT;
        /* falls through */
      case LENEXT:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;
          while (bits < n) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
          //--- DROPBITS(state.extra) ---//
          hold >>>= state.extra;
          bits -= state.extra;
          //---//
          state.back += state.extra;
        }
        //Tracevv((stderr, "inflate:         length %u\n", state.length));
        state.was = state.length;
        state.mode = DIST;
        /* falls through */
      case DIST:
        for (;;) {
          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if ((here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.distcode[last_val +
                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((last_bits + here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          //--- DROPBITS(last.bits) ---//
          hold >>>= last_bits;
          bits -= last_bits;
          //---//
          state.back += last_bits;
        }
        //--- DROPBITS(here.bits) ---//
        hold >>>= here_bits;
        bits -= here_bits;
        //---//
        state.back += here_bits;
        if (here_op & 64) {
          strm.msg = 'invalid distance code';
          state.mode = BAD;
          break;
        }
        state.offset = here_val;
        state.extra = (here_op) & 15;
        state.mode = DISTEXT;
        /* falls through */
      case DISTEXT:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;
          while (bits < n) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
          //--- DROPBITS(state.extra) ---//
          hold >>>= state.extra;
          bits -= state.extra;
          //---//
          state.back += state.extra;
        }
  //#ifdef INFLATE_STRICT
        if (state.offset > state.dmax) {
          strm.msg = 'invalid distance too far back';
          state.mode = BAD;
          break;
        }
  //#endif
        //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
        state.mode = MATCH;
        /* falls through */
      case MATCH:
        if (left === 0) { break inf_leave; }
        copy = _out - left;
        if (state.offset > copy) {         /* copy from window */
          copy = state.offset - copy;
          if (copy > state.whave) {
            if (state.sane) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break;
            }
  // (!) This block is disabled in zlib defailts,
  // don't enable it for binary compatibility
  //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
  //          Trace((stderr, "inflate.c too far\n"));
  //          copy -= state.whave;
  //          if (copy > state.length) { copy = state.length; }
  //          if (copy > left) { copy = left; }
  //          left -= copy;
  //          state.length -= copy;
  //          do {
  //            output[put++] = 0;
  //          } while (--copy);
  //          if (state.length === 0) { state.mode = LEN; }
  //          break;
  //#endif
          }
          if (copy > state.wnext) {
            copy -= state.wnext;
            from = state.wsize - copy;
          }
          else {
            from = state.wnext - copy;
          }
          if (copy > state.length) { copy = state.length; }
          from_source = state.window;
        }
        else {                              /* copy from output */
          from_source = output;
          from = put - state.offset;
          copy = state.length;
        }
        if (copy > left) { copy = left; }
        left -= copy;
        state.length -= copy;
        do {
          output[put++] = from_source[from++];
        } while (--copy);
        if (state.length === 0) { state.mode = LEN; }
        break;
      case LIT:
        if (left === 0) { break inf_leave; }
        output[put++] = state.length;
        left--;
        state.mode = LEN;
        break;
      case CHECK:
        if (state.wrap) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            // Use '|' insdead of '+' to make sure that result is signed
            hold |= input[next++] << bits;
            bits += 8;
          }
          //===//
          _out -= left;
          strm.total_out += _out;
          state.total += _out;
          if (_out) {
            strm.adler = state.check =
                /*UPDATE(state.check, put - _out, _out);*/
                (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));

          }
          _out = left;
          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
          if ((state.flags ? hold : zswap32(hold)) !== state.check) {
            strm.msg = 'incorrect data check';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          //Tracev((stderr, "inflate:   check matches trailer\n"));
        }
        state.mode = LENGTH;
        /* falls through */
      case LENGTH:
        if (state.wrap && state.flags) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if (hold !== (state.total & 0xffffffff)) {
            strm.msg = 'incorrect length check';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          //Tracev((stderr, "inflate:   length matches trailer\n"));
        }
        state.mode = DONE;
        /* falls through */
      case DONE:
        ret = Z_STREAM_END;
        break inf_leave;
      case BAD:
        ret = Z_DATA_ERROR;
        break inf_leave;
      case MEM:
        return Z_MEM_ERROR;
      case SYNC:
        /* falls through */
      default:
        return Z_STREAM_ERROR;
      }
    }

    // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

    /*
       Return from inflate(), updating the total counts and the check value.
       If there was no progress during the inflate() call, return a buffer
       error.  Call updatewindow() to create and/or update the window state.
       Note: a memory error from inflate() is non-recoverable.
     */

    //--- RESTORE() ---
    strm.next_out = put;
    strm.avail_out = left;
    strm.next_in = next;
    strm.avail_in = have;
    state.hold = hold;
    state.bits = bits;
    //---

    if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
                        (state.mode < CHECK || flush !== Z_FINISH))) {
      if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) ;
    }
    _in -= strm.avail_in;
    _out -= strm.avail_out;
    strm.total_in += _in;
    strm.total_out += _out;
    state.total += _out;
    if (state.wrap && _out) {
      strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
        (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
    }
    strm.data_type = state.bits + (state.last ? 64 : 0) +
                      (state.mode === TYPE ? 128 : 0) +
                      (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
    if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
      ret = Z_BUF_ERROR;
    }
    return ret;
  }

  function inflateEnd(strm) {

    if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
      return Z_STREAM_ERROR;
    }

    var state = strm.state;
    if (state.window) {
      state.window = null;
    }
    strm.state = null;
    return Z_OK;
  }

  function inflateGetHeader(strm, head) {
    var state;

    /* check state */
    if (!strm || !strm.state) { return Z_STREAM_ERROR; }
    state = strm.state;
    if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }

    /* save header structure */
    state.head = head;
    head.done = false;
    return Z_OK;
  }

  function inflateSetDictionary(strm, dictionary) {
    var dictLength = dictionary.length;

    var state;
    var dictid;
    var ret;

    /* check state */
    if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }
    state = strm.state;

    if (state.wrap !== 0 && state.mode !== DICT) {
      return Z_STREAM_ERROR;
    }

    /* check for correct dictionary identifier */
    if (state.mode === DICT) {
      dictid = 1; /* adler32(0, null, 0)*/
      /* dictid = adler32(dictid, dictionary, dictLength); */
      dictid = adler32(dictid, dictionary, dictLength, 0);
      if (dictid !== state.check) {
        return Z_DATA_ERROR;
      }
    }
    /* copy dictionary to window using updatewindow(), which will amend the
     existing dictionary if appropriate */
    ret = updatewindow(strm, dictionary, dictLength, dictLength);
    if (ret) {
      state.mode = MEM;
      return Z_MEM_ERROR;
    }
    state.havedict = 1;
    // Tracev((stderr, "inflate:   dictionary set\n"));
    return Z_OK;
  }

  // String encode/decode helpers
  // 'use strict';


  // var utils = require('./common');


  // Quick check if we can use fast array to bin string conversion
  //
  // - apply(Array) can fail on Android 2.2
  // - apply(Uint8Array) can fail on iOS 5.1 Safary
  //
  var STR_APPLY_OK = true;
  var STR_APPLY_UIA_OK = true;

  try { String.fromCharCode.apply(null, [ 0 ]); } catch (_) { STR_APPLY_OK = false; }
  try { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (_$1) { STR_APPLY_UIA_OK = false; }


  // Table with utf8 lengths (calculated by first byte of sequence)
  // Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
  // because max possible codepoint is 0x10ffff
  var _utf8len = new Uint8Array(256);
  for (var q = 0; q < 256; q++) {
    _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);
  }
  _utf8len[254] = _utf8len[254] = 1; // Invalid sequence start


  // convert string to array (typed, when possible)
  function string2buf(str) {
    var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;

    // count binary size
    for (m_pos = 0; m_pos < str_len; m_pos++) {
      c = str.charCodeAt(m_pos);
      if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
        c2 = str.charCodeAt(m_pos + 1);
        if ((c2 & 0xfc00) === 0xdc00) {
          c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
          m_pos++;
        }
      }
      buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
    }

    // allocate buffer
    buf = new Uint8Array(buf_len);

    // convert
    for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
      c = str.charCodeAt(m_pos);
      if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
        c2 = str.charCodeAt(m_pos + 1);
        if ((c2 & 0xfc00) === 0xdc00) {
          c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
          m_pos++;
        }
      }
      if (c < 0x80) {
        /* one byte */
        buf[i++] = c;
      } else if (c < 0x800) {
        /* two bytes */
        buf[i++] = 0xC0 | (c >>> 6);
        buf[i++] = 0x80 | (c & 0x3f);
      } else if (c < 0x10000) {
        /* three bytes */
        buf[i++] = 0xE0 | (c >>> 12);
        buf[i++] = 0x80 | (c >>> 6 & 0x3f);
        buf[i++] = 0x80 | (c & 0x3f);
      } else {
        /* four bytes */
        buf[i++] = 0xf0 | (c >>> 18);
        buf[i++] = 0x80 | (c >>> 12 & 0x3f);
        buf[i++] = 0x80 | (c >>> 6 & 0x3f);
        buf[i++] = 0x80 | (c & 0x3f);
      }
    }

    return buf;
  }

  // Helper (used in 2 places)
  function _buf2binstring(buf, len) {
    // use fallback for big arrays to avoid stack overflow
    if (len < 65537) {
      if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {
        return String.fromCharCode.apply(null, shrinkBuf(buf, len));
      }
    }

    var result = '';
    for (var i = 0; i < len; i++) {
      result += String.fromCharCode(buf[i]);
    }
    return result;
  }


  // Convert binary string (typed, when possible)
  function binstring2buf(str) {
    var buf = new Uint8Array(str.length);
    for (var i = 0, len = buf.length; i < len; i++) {
      buf[i] = str.charCodeAt(i);
    }
    return buf;
  }


  // convert array to string
  function buf2string(buf, max) {
    var i, out, c, c_len;
    var len = max || buf.length;

    // Reserve max possible length (2 words per char)
    // NB: by unknown reasons, Array is significantly faster for
    //     String.fromCharCode.apply than Uint16Array.
    var utf16buf = new Array(len * 2);

    for (out = 0, i = 0; i < len;) {
      c = buf[i++];
      // quick process ascii
      if (c < 0x80) { utf16buf[out++] = c; continue; }

      c_len = _utf8len[c];
      // skip 5 & 6 byte codes
      if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }

      // apply mask on first byte
      c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
      // join the rest
      while (c_len > 1 && i < len) {
        c = (c << 6) | (buf[i++] & 0x3f);
        c_len--;
      }

      // terminated by end of string?
      if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }

      if (c < 0x10000) {
        utf16buf[out++] = c;
      } else {
        c -= 0x10000;
        utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
        utf16buf[out++] = 0xdc00 | (c & 0x3ff);
      }
    }

    return _buf2binstring(utf16buf, out);
  }


  // Calculate max possible position in utf8 buffer,
  // that will not break sequence. If that's not possible
  // - (very small limits) return max size as is.
  //
  // buf[] - utf8 bytes array
  // max   - length limit (mandatory);
  function utf8border(buf, max) {
    var pos;

    max = max || buf.length;
    if (max > buf.length) { max = buf.length; }

    // go back from last position, until start of sequence found
    pos = max - 1;
    while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }

    // Fuckup - very small and broken sequence,
    // return max, because we should return something anyway.
    if (pos < 0) { return max; }

    // If we came to start of buffer - that means vuffer is too small,
    // return max too.
    if (pos === 0) { return max; }

    return (pos + _utf8len[buf[pos]] > max) ? pos : max;
  }

  /* Allowed flush values; see deflate() and inflate() below for details */
  var Z_NO_FLUSH        = 0;
  var Z_SYNC_FLUSH      = 2;
  var Z_FINISH$1          = 4;
  /* Return codes for the compression/decompression functions. Negative values
    * are errors, positive values are used for special but normal events.
    */
  var Z_OK$1              =  0;
  var Z_STREAM_END$1      =  1;
  var Z_NEED_DICT$1       =  2;
  //export var Z_MEM_ERROR     = -4;
  var Z_BUF_ERROR$1       = -5;

  // 'use strict';

  var messages = {
    2:      'need dictionary',     /* Z_NEED_DICT       2  */
    1:      'stream end',          /* Z_STREAM_END      1  */
    0:      '',                    /* Z_OK              0  */
    '-1':   'file error',          /* Z_ERRNO         (-1) */
    '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
    '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
    '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
    '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
    '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
  };

  // 'use strict';


  function ZStream() {
    /* next input byte */
    this.input = null; // JS specific, because we have no pointers
    this.next_in = 0;
    /* number of bytes available at input */
    this.avail_in = 0;
    /* total number of input bytes read so far */
    this.total_in = 0;
    /* next output byte should be put there */
    this.output = null; // JS specific, because we have no pointers
    this.next_out = 0;
    /* remaining free space at output */
    this.avail_out = 0;
    /* total number of bytes output so far */
    this.total_out = 0;
    /* last error message, NULL if no error */
    this.msg = ''/*Z_NULL*/;
    /* not visible by applications */
    this.state = null;
    /* best guess about the data type: binary or text */
    this.data_type = 2/*Z_UNKNOWN*/;
    /* adler32 value of the uncompressed data */
    this.adler = 0;
  }

  // 'use strict';


  function GZheader() {
    /* true if compressed data believed to be text */
    this.text       = 0;
    /* modification time */
    this.time       = 0;
    /* extra flags (not used when writing a gzip file) */
    this.xflags     = 0;
    /* operating system */
    this.os         = 0;
    /* pointer to extra field or Z_NULL if none */
    this.extra      = null;
    /* extra field length (valid if extra != Z_NULL) */
    this.extra_len  = 0; // Actually, we don't need it in JS,
                         // but leave for few code modifications

    //
    // Setup limits is not necessary because in js we should not preallocate memory
    // for inflate use constant limit in 65536 bytes
    //

    /* space at extra (only when reading header) */
    // this.extra_max  = 0;
    /* pointer to zero-terminated file name or Z_NULL */
    this.name       = '';
    /* space at name (only when reading header) */
    // this.name_max   = 0;
    /* pointer to zero-terminated comment or Z_NULL */
    this.comment    = '';
    /* space at comment (only when reading header) */
    // this.comm_max   = 0;
    /* true if there was or will be a header crc */
    this.hcrc       = 0;
    /* true when done reading gzip header (not used when writing a gzip file) */
    this.done       = false;
  }

  // 'use strict';


  // var zlib_inflate = require('./zlib/inflate');
  // var utils        = require('./utils/common');
  // var strings      = require('./utils/strings');
  // var c            = require('./zlib/constants');
  // var msg          = require('./zlib/messages');
  // var ZStream      = require('./zlib/zstream');
  // var GZheader     = require('./zlib/gzheader');

  var toString = Object.prototype.toString;

  /**
   * class Inflate
   *
   * Generic JS-style wrapper for zlib calls. If you don't need
   * streaming behaviour - use more simple functions: [[inflate]]
   * and [[inflateRaw]].
   **/

  /* internal
   * inflate.chunks -> Array
   *
   * Chunks of output data, if [[Inflate#onData]] not overriden.
   **/

  /**
   * Inflate.result -> Uint8Array|Array|String
   *
   * Uncompressed result, generated by default [[Inflate#onData]]
   * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
   * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you
   * push a chunk with explicit flush (call [[Inflate#push]] with
   * `Z_SYNC_FLUSH` param).
   **/

  /**
   * Inflate.err -> Number
   *
   * Error code after inflate finished. 0 (Z_OK) on success.
   * Should be checked if broken data possible.
   **/

  /**
   * Inflate.msg -> String
   *
   * Error message, if [[Inflate.err]] != 0
   **/


  /**
   * new Inflate(options)
   * - options (Object): zlib inflate options.
   *
   * Creates new inflator instance with specified params. Throws exception
   * on bad params. Supported options:
   *
   * - `windowBits`
   * - `dictionary`
   *
   * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
   * for more information on these.
   *
   * Additional options, for internal needs:
   *
   * - `chunkSize` - size of generated data chunks (16K by default)
   * - `raw` (Boolean) - do raw inflate
   * - `to` (String) - if equal to 'string', then result will be converted
   *   from utf8 to utf16 (javascript) string. When string output requested,
   *   chunk length can differ from `chunkSize`, depending on content.
   *
   * By default, when no options set, autodetect deflate/gzip data format via
   * wrapper header.
   *
   * ##### Example:
   *
   * ```javascript
   * var pako = require('pako')
   *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
   *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
   *
   * var inflate = new pako.Inflate({ level: 3});
   *
   * inflate.push(chunk1, false);
   * inflate.push(chunk2, true);  // true -> last chunk
   *
   * if (inflate.err) { throw new Error(inflate.err); }
   *
   * console.log(inflate.result);
   * ```
   **/
  function Inflate(options) {
    if (!(this instanceof Inflate)) { return new Inflate(options); }

    this.options = assign({
      chunkSize: 16384,
      windowBits: 0,
      to: ''
    }, options || {});

    var opt = this.options;

    // Force window size for `raw` data, if not set directly,
    // because we have no header for autodetect.
    if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {
      opt.windowBits = -opt.windowBits;
      if (opt.windowBits === 0) { opt.windowBits = -15; }
    }

    // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
    if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&
        !(options && options.windowBits)) {
      opt.windowBits += 32;
    }

    // Gzip header has no info about windows size, we can do autodetect only
    // for deflate. So, if window size not set, force it to max when gzip possible
    if ((opt.windowBits > 15) && (opt.windowBits < 48)) {
      // bit 3 (16) -> gzipped data
      // bit 4 (32) -> autodetect gzip/deflate
      if ((opt.windowBits & 15) === 0) {
        opt.windowBits |= 15;
      }
    }

    this.err    = 0;      // error code, if happens (0 = Z_OK)
    this.msg    = '';     // error message
    this.ended  = false;  // used to avoid multiple onEnd() calls
    this.chunks = [];     // chunks of compressed data

    this.strm   = new ZStream();
    this.strm.avail_out = 0;

    var status  = inflateInit2(
      this.strm,
      opt.windowBits
    );

    if (status !== Z_OK$1) {
      throw new Error(messages[status]);
    }

    this.header = new GZheader();

    inflateGetHeader(this.strm, this.header);
  }

  /**
   * Inflate#push(data[, mode]) -> Boolean
   * - data (Uint8Array|Array|ArrayBuffer|String): input data
   * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
   *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.
   *
   * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
   * new output chunks. Returns `true` on success. The last data block must have
   * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
   * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you
   * can use mode Z_SYNC_FLUSH, keeping the decompression context.
   *
   * On fail call [[Inflate#onEnd]] with error code and return false.
   *
   * We strongly recommend to use `Uint8Array` on input for best speed (output
   * format is detected automatically). Also, don't skip last param and always
   * use the same type in your code (boolean or number). That will improve JS speed.
   *
   * For regular `Array`-s make sure all elements are [0..255].
   *
   * ##### Example
   *
   * ```javascript
   * push(chunk, false); // push one of data chunks
   * ...
   * push(chunk, true);  // push last chunk
   * ```
   **/
  Inflate.prototype.push = function (data, mode) {
    var strm = this.strm;
    var chunkSize = this.options.chunkSize;
    var dictionary = this.options.dictionary;
    var status, _mode;
    var next_out_utf8, tail, utf8str;
    var dict;

    // Flag to properly process Z_BUF_ERROR on testing inflate call
    // when we check that all output data was flushed.
    var allowBufError = false;

    if (this.ended) { return false; }
    _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH$1 : Z_NO_FLUSH);

    // Convert data if needed
    if (typeof data === 'string') {
      // Only binary strings can be decompressed on practice
      strm.input = binstring2buf(data);
    } else if (toString.call(data) === '[object ArrayBuffer]') {
      strm.input = new Uint8Array(data);
    } else {
      strm.input = data;
    }

    strm.next_in = 0;
    strm.avail_in = strm.input.length;

    do {
      if (strm.avail_out === 0) {
        strm.output = new Uint8Array(chunkSize);
        strm.next_out = 0;
        strm.avail_out = chunkSize;
      }

      status = inflate(strm, Z_NO_FLUSH);    /* no bad return value */

      if (status === Z_NEED_DICT$1 && dictionary) {
        // Convert data if needed
        if (typeof dictionary === 'string') {
          dict = string2buf(dictionary);
        } else if (toString.call(dictionary) === '[object ArrayBuffer]') {
          dict = new Uint8Array(dictionary);
        } else {
          dict = dictionary;
        }

        status = inflateSetDictionary(this.strm, dict);

      }

      if (status === Z_BUF_ERROR$1 && allowBufError === true) {
        status = Z_OK$1;
        allowBufError = false;
      }

      if (status !== Z_STREAM_END$1 && status !== Z_OK$1) {
        this.onEnd(status);
        this.ended = true;
        return false;
      }

      if (strm.next_out) {
        if (strm.avail_out === 0 || status === Z_STREAM_END$1 || (strm.avail_in === 0 && (_mode === Z_FINISH$1 || _mode === Z_SYNC_FLUSH))) {

          if (this.options.to === 'string') {

            next_out_utf8 = utf8border(strm.output, strm.next_out);

            tail = strm.next_out - next_out_utf8;
            utf8str = buf2string(strm.output, next_out_utf8);

            // move tail
            strm.next_out = tail;
            strm.avail_out = chunkSize - tail;
            if (tail) { arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }

            this.onData(utf8str);

          } else {
            this.onData(shrinkBuf(strm.output, strm.next_out));
          }
        }
      }

      // When no more input data, we should check that internal inflate buffers
      // are flushed. The only way to do it when avail_out = 0 - run one more
      // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.
      // Here we set flag to process this error properly.
      //
      // NOTE. Deflate does not return error in this case and does not needs such
      // logic.
      if (strm.avail_in === 0 && strm.avail_out === 0) {
        allowBufError = true;
      }

    } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END$1);

    if (status === Z_STREAM_END$1) {
      _mode = Z_FINISH$1;
    }

    // Finalize on the last chunk.
    if (_mode === Z_FINISH$1) {
      status = inflateEnd(this.strm);
      this.onEnd(status);
      this.ended = true;
      return status === Z_OK$1;
    }

    // callback interim results if Z_SYNC_FLUSH.
    if (_mode === Z_SYNC_FLUSH) {
      this.onEnd(Z_OK$1);
      strm.avail_out = 0;
      return true;
    }

    return true;
  };


  /**
   * Inflate#onData(chunk) -> Void
   * - chunk (Uint8Array|Array|String): ouput data. Type of array depends
   *   on js engine support. When string output requested, each chunk
   *   will be string.
   *
   * By default, stores data blocks in `chunks[]` property and glue
   * those in `onEnd`. Override this handler, if you need another behaviour.
   **/
  Inflate.prototype.onData = function (chunk) {
    this.chunks.push(chunk);
  };


  /**
   * Inflate#onEnd(status) -> Void
   * - status (Number): inflate status. 0 (Z_OK) on success,
   *   other if not.
   *
   * Called either after you tell inflate that the input stream is
   * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
   * or if an error happened. By default - join collected chunks,
   * free memory and fill `results` / `err` properties.
   **/
  Inflate.prototype.onEnd = function (status) {
    // On success - join
    if (status === Z_OK$1) {
      if (this.options.to === 'string') {
        // Glue & convert here, until we teach pako to send
        // utf8 alligned strings to onData
        this.result = this.chunks.join('');
      } else {
        this.result = flattenChunks(this.chunks);
      }
    }
    this.chunks = [];
    this.err = status;
    this.msg = this.strm.msg;
  };


  /**
   * inflate(data[, options]) -> Uint8Array|Array|String
   * - data (Uint8Array|Array|String): input data to decompress.
   * - options (Object): zlib inflate options.
   *
   * Decompress `data` with inflate/ungzip and `options`. Autodetect
   * format via wrapper header by default. That's why we don't provide
   * separate `ungzip` method.
   *
   * Supported options are:
   *
   * - windowBits
   *
   * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
   * for more information.
   *
   * Sugar (options):
   *
   * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
   *   negative windowBits implicitly.
   * - `to` (String) - if equal to 'string', then result will be converted
   *   from utf8 to utf16 (javascript) string. When string output requested,
   *   chunk length can differ from `chunkSize`, depending on content.
   *
   *
   * ##### Example:
   *
   * ```javascript
   * var pako = require('pako')
   *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])
   *   , output;
   *
   * try {
   *   output = pako.inflate(input);
   * } catch (err)
   *   console.log(err);
   * }
   * ```
   **/
  function doInflate(input, options) {
    var inflator = new Inflate(options);

    inflator.push(input, true);

    // That will never happens, if you don't cheat with options :)
    if (inflator.err) { throw inflator.msg; }

    return inflator.result;
  }

  /**
   * @file Gzip Decompressor
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function gzipDecompress(data) {
      var decompressedData;
      if (data instanceof ArrayBuffer) {
          data = new Uint8Array(data);
      }
      try {
          decompressedData = doInflate(data);
      }
      catch (e) {
          decompressedData = data; // assume it is already uncompressed
      }
      return decompressedData;
  }
  DecompressorRegistry.add('gz', gzipDecompress);

  /**
   * @file Datasource
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Datasource base class
   * @interface
   */
  var Datasource = function Datasource () {};

  /**
   * @file RCSB Datasource
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var baseUrl$1 = '//files.rcsb.org/download/';
  var mmtfBaseUrl = '//mmtf.rcsb.org/v1.0/';
  var mmtfFullUrl = mmtfBaseUrl + 'full/';
  var mmtfReducedUrl = mmtfBaseUrl + 'reduced/';
  var RcsbDatasource = /*@__PURE__*/(function (Datasource) {
      function RcsbDatasource () {
          Datasource.apply(this, arguments);
      }

      if ( Datasource ) RcsbDatasource.__proto__ = Datasource;
      RcsbDatasource.prototype = Object.create( Datasource && Datasource.prototype );
      RcsbDatasource.prototype.constructor = RcsbDatasource;

      RcsbDatasource.prototype.getUrl = function getUrl (src) {
          // valid path are
          // XXXX.pdb, XXXX.pdb.gz, XXXX.cif, XXXX.cif.gz, XXXX.mmtf, XXXX.bb.mmtf
          // XXXX defaults to XXXX.cif
          var info = getFileInfo(src);
          var pdbid = info.name.substr(0, 4);
          var url;
          if (['pdb', 'cif'].includes(info.ext) &&
              (info.compressed === false || info.compressed === 'gz')) {
              url = baseUrl$1 + info.path;
          }
          else if (info.ext === 'mmtf') {
              if (info.base.endsWith('.bb')) {
                  url = mmtfReducedUrl + pdbid;
              }
              else {
                  url = mmtfFullUrl + pdbid;
              }
          }
          else if (!info.ext) {
              url = mmtfFullUrl + pdbid;
          }
          else {
              Log.warn('unsupported ext', info.ext);
              url = mmtfFullUrl + pdbid;
          }
          return getProtocol() + url;
      };
      RcsbDatasource.prototype.getExt = function getExt (src) {
          var ext = getFileInfo(src).ext;
          return ext ? ext : 'mmtf';
      };

      return RcsbDatasource;
  }(Datasource));
  DatasourceRegistry.add('rcsb', new RcsbDatasource());

  /**
   * @file PubChem Datasource
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var baseUrl = '//pubchem.ncbi.nlm.nih.gov/rest/pug/compound/cid/';
  var suffixUrl = '/SDF?record_type=3d';
  var PubchemDatasource = /*@__PURE__*/(function (Datasource) {
      function PubchemDatasource () {
          Datasource.apply(this, arguments);
      }

      if ( Datasource ) PubchemDatasource.__proto__ = Datasource;
      PubchemDatasource.prototype = Object.create( Datasource && Datasource.prototype );
      PubchemDatasource.prototype.constructor = PubchemDatasource;

      PubchemDatasource.prototype.getUrl = function getUrl (src) {
          var info = getFileInfo(src);
          var cid = info.name;
          var url;
          if (!info.ext || info.ext === 'sdf') {
              url = baseUrl + cid + suffixUrl;
          }
          else {
              Log.warn('unsupported ext', info.ext);
              url = baseUrl + cid + suffixUrl;
          }
          return getProtocol() + url;
      };
      PubchemDatasource.prototype.getExt = function getExt (src) {
          var ext = getFileInfo(src).ext;
          return ext ? ext : 'sdf';
      };

      return PubchemDatasource;
  }(Datasource));
  DatasourceRegistry.add('pubchem', new PubchemDatasource());

  /**
   * @file Pass Through Datasource
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var PassThroughDatasource = /*@__PURE__*/(function (Datasource) {
      function PassThroughDatasource () {
          Datasource.apply(this, arguments);
      }

      if ( Datasource ) PassThroughDatasource.__proto__ = Datasource;
      PassThroughDatasource.prototype = Object.create( Datasource && Datasource.prototype );
      PassThroughDatasource.prototype.constructor = PassThroughDatasource;

      PassThroughDatasource.prototype.getUrl = function getUrl (path) {
          return path;
      };
      PassThroughDatasource.prototype.getExt = function getExt (path) {
          return getFileInfo(path).ext;
      };

      return PassThroughDatasource;
  }(Datasource));
  DatasourceRegistry.add('ftp', new PassThroughDatasource());
  DatasourceRegistry.add('http', new PassThroughDatasource());
  DatasourceRegistry.add('https', new PassThroughDatasource());

  /**
   * @file Static Datasource
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var reProtocol = /^((http|https|ftp):)*\/\//;
  var StaticDatasource = /*@__PURE__*/(function (Datasource) {
      function StaticDatasource(baseUrl) {
          if ( baseUrl === void 0 ) baseUrl = '';

          Datasource.call(this);
          this.baseUrl = baseUrl;
      }

      if ( Datasource ) StaticDatasource.__proto__ = Datasource;
      StaticDatasource.prototype = Object.create( Datasource && Datasource.prototype );
      StaticDatasource.prototype.constructor = StaticDatasource;
      StaticDatasource.prototype.getUrl = function getUrl (src) {
          var info = getFileInfo(src);
          var url = this.baseUrl + info.path;
          if (!reProtocol.test(this.baseUrl)) {
              url = getAbsolutePath(url);
          }
          return url;
      };
      StaticDatasource.prototype.getExt = function getExt (src) {
          return getFileInfo(src).ext;
      };

      return StaticDatasource;
  }(Datasource));

  /**
   * @file MDsrv Datasource
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var MdsrvDatasource = /*@__PURE__*/(function (Datasource) {
      function MdsrvDatasource(baseUrl) {
          if ( baseUrl === void 0 ) baseUrl = '';

          Datasource.call(this);
          this.baseUrl = baseUrl;
      }

      if ( Datasource ) MdsrvDatasource.__proto__ = Datasource;
      MdsrvDatasource.prototype = Object.create( Datasource && Datasource.prototype );
      MdsrvDatasource.prototype.constructor = MdsrvDatasource;
      MdsrvDatasource.prototype.getListing = function getListing (path) {
          if ( path === void 0 ) path = '';

          var url = (this.baseUrl) + "dir/" + path;
          if (url[url.length - 1] !== '/')
              { url += '/'; }
          return autoLoad(url, {
              ext: 'json'
          }).then(function (jsonData) { return ({
              path: path,
              data: jsonData.data
          }); });
      };
      MdsrvDatasource.prototype.getUrl = function getUrl (src) {
          var info = getFileInfo(src);
          return ((this.baseUrl) + "file/" + (info.path) + (info.query));
      };
      MdsrvDatasource.prototype.getCountUrl = function getCountUrl (src) {
          var info = getFileInfo(src);
          return ((this.baseUrl) + "traj/numframes/" + (info.path) + (info.query));
      };
      MdsrvDatasource.prototype.getFrameUrl = function getFrameUrl (src, frameIndex) {
          var info = getFileInfo(src);
          return ((this.baseUrl) + "traj/frame/" + frameIndex + "/" + (info.path) + (info.query));
      };
      MdsrvDatasource.prototype.getFrameParams = function getFrameParams (src, atomIndices) {
          return ("atomIndices=" + (atomIndices.join(';')));
      };
      MdsrvDatasource.prototype.getPathUrl = function getPathUrl (src, atomIndex) {
          var info = getFileInfo(src);
          return ((this.baseUrl) + "traj/path/" + atomIndex + "/" + (info.path) + (info.query));
      };
      MdsrvDatasource.prototype.getExt = function getExt (src) {
          return getFileInfo(src).ext;
      };

      return MdsrvDatasource;
  }(Datasource));

  /**
   * @file UI Parameters
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   */
  function BooleanParam() { return { type: 'boolean' }; }
  function ColorParam() { return { type: 'color' }; }
  function IntegerParam(max, min) {
      return { type: 'integer', max: max, min: min };
  }
  function NumberParam(precision, max, min) {
      return { type: 'number', precision: precision, max: max, min: min };
  }
  function RangeParam(step, max, min) {
      return { type: 'range', step: step, max: max, min: min };
  }
  function SelectParam() {
      var options = [], len = arguments.length;
      while ( len-- ) options[ len ] = arguments[ len ];

      return { type: 'select', options: options.reduce(function (o, k) {
          var obj;

          return (Object.assign(Object.assign({}, o), ( obj = {}, obj[k] = k, obj )));
      }, {}) };
  }
  var UIStageParameters = {
      backgroundColor: ColorParam(),
      quality: SelectParam('auto', 'low', 'medium', 'high'),
      sampleLevel: RangeParam(1, 5, -1),
      impostor: BooleanParam(),
      workerDefault: BooleanParam(),
      rotateSpeed: NumberParam(1, 10, 0),
      zoomSpeed: NumberParam(1, 10, 0),
      panSpeed: NumberParam(1, 10, 0),
      clipNear: RangeParam(1, 100, 0),
      clipFar: RangeParam(1, 100, 0),
      clipDist: IntegerParam(200, 0),
      clipMode: SelectParam('scene', 'camera'),
      clipScale: SelectParam('relative', 'absolute'),
      fogNear: RangeParam(1, 100, 0),
      fogFar: RangeParam(1, 100, 0),
      cameraType: SelectParam('perspective', 'orthographic', 'stereo'),
      cameraEyeSep: NumberParam(3, 1.0, 0.01),
      cameraFov: RangeParam(1, 120, 15),
      lightColor: ColorParam(),
      lightIntensity: NumberParam(2, 10, 0),
      ambientColor: ColorParam(),
      ambientIntensity: NumberParam(2, 10, 0),
      hoverTimeout: IntegerParam(10000, -1),
      tooltip: BooleanParam(),
      mousePreset: SelectParam.apply(void 0, Object.keys(MouseActionPresets))
  };

  var version = "2.0.0-dev.39";

  /**
   * @file Version
   * @private
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   */
  /**
   * Version name
   * @type {String}
   */
  var Version = version;

  /**
   * @file ngl
   * @private
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   */
  if (!window.Promise) {
      window.Promise = Promise$1;
  }

  exports.ArrowBuffer = ArrowBuffer;
  exports.Assembly = Assembly;
  exports.Box3 = Box3;
  exports.BoxBuffer = BoxBuffer;
  exports.BufferRepresentation = BufferRepresentation;
  exports.Collection = Collection;
  exports.Color = Color;
  exports.Colormaker = Colormaker;
  exports.ColormakerRegistry = ColormakerRegistry;
  exports.Component = Component;
  exports.ComponentCollection = ComponentCollection;
  exports.ConeBuffer = ConeBuffer;
  exports.Counter = Counter;
  exports.CylinderBuffer = CylinderBuffer;
  exports.DatasourceRegistry = DatasourceRegistry;
  exports.DecompressorRegistry = DecompressorRegistry;
  exports.EllipsoidBuffer = EllipsoidBuffer;
  exports.Euler = Euler;
  exports.Frames = Frames;
  exports.Kdtree = Kdtree;
  exports.KeyActions = KeyActions;
  exports.LeftMouseButton = LeftMouseButton;
  exports.Matrix3 = Matrix3;
  exports.Matrix4 = Matrix4;
  exports.MdsrvDatasource = MdsrvDatasource;
  exports.MeasurementDefaultParams = MeasurementDefaultParams;
  exports.MeshBuffer = MeshBuffer;
  exports.MiddleMouseButton = MiddleMouseButton;
  exports.MolecularSurface = MolecularSurface;
  exports.MouseActions = MouseActions;
  exports.OctahedronBuffer = OctahedronBuffer;
  exports.ParserRegistry = ParserRegistry;
  exports.PdbWriter = PdbWriter;
  exports.PickingProxy = PickingProxy;
  exports.Plane = Plane;
  exports.PointBuffer = PointBuffer;
  exports.Quaternion = Quaternion;
  exports.Queue = Queue;
  exports.RepresentationCollection = RepresentationCollection;
  exports.RepresentationElement = RepresentationElement;
  exports.RepresentationRegistry = RepresentationRegistry;
  exports.RightMouseButton = RightMouseButton;
  exports.ScriptExtensions = ScriptExtensions;
  exports.SdfWriter = SdfWriter;
  exports.Selection = Selection;
  exports.Shape = Shape;
  exports.ShapeComponent = ShapeComponent;
  exports.Signal = signals.Signal;
  exports.SpatialHash = SpatialHash;
  exports.SphereBuffer = SphereBuffer;
  exports.Stage = Stage;
  exports.StaticDatasource = StaticDatasource;
  exports.StlWriter = StlWriter;
  exports.Structure = Structure;
  exports.StructureComponent = StructureComponent;
  exports.StructureComponentDefaultParameters = StructureComponentDefaultParameters;
  exports.Superposition = Superposition;
  exports.SurfaceComponent = SurfaceComponent;
  exports.TetrahedronBuffer = TetrahedronBuffer;
  exports.TextBuffer = TextBuffer;
  exports.TorusBuffer = TorusBuffer;
  exports.TrajectoryPlayer = TrajectoryPlayer;
  exports.UIStageParameters = UIStageParameters;
  exports.Vector2 = Vector2;
  exports.Vector3 = Vector3;
  exports.Version = Version;
  exports.Viewer = Viewer;
  exports.Volume = Volume;
  exports.VolumeComponent = VolumeComponent;
  exports.WidelineBuffer = WideLineBuffer;
  exports.autoLoad = autoLoad;
  exports.concatStructures = concatStructures;
  exports.download = download;
  exports.flatten = flatten;
  exports.getDataInfo = getDataInfo;
  exports.getFileInfo = getFileInfo;
  exports.getQuery = getQuery;
  exports.guessElement = guessElement;
  exports.setDebug = setDebug;
  exports.setListingDatasource = setListingDatasource;
  exports.setMeasurementDefaultParams = setMeasurementDefaultParams;
  exports.setTrajectoryDatasource = setTrajectoryDatasource;
  exports.superpose = superpose;
  exports.throttle = throttle;
  exports.uniqueArray = uniqueArray;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngl.dev.js.map
